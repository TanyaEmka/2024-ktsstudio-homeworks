(()=>{var __webpack_modules__={9089:module=>{"use strict";eval('\n\n/*\n  MIT License http://www.opensource.org/licenses/mit-license.php\n  Author Tobias Koppers @sokra\n*/\nmodule.exports = function (cssWithMappingToString) {\n  var list = [];\n\n  // return the list of modules as css string\n  list.toString = function toString() {\n    return this.map(function (item) {\n      var content = "";\n      var needLayer = typeof item[5] !== "undefined";\n      if (item[4]) {\n        content += "@supports (".concat(item[4], ") {");\n      }\n      if (item[2]) {\n        content += "@media ".concat(item[2], " {");\n      }\n      if (needLayer) {\n        content += "@layer".concat(item[5].length > 0 ? " ".concat(item[5]) : "", " {");\n      }\n      content += cssWithMappingToString(item);\n      if (needLayer) {\n        content += "}";\n      }\n      if (item[2]) {\n        content += "}";\n      }\n      if (item[4]) {\n        content += "}";\n      }\n      return content;\n    }).join("");\n  };\n\n  // import a list of modules into the list\n  list.i = function i(modules, media, dedupe, supports, layer) {\n    if (typeof modules === "string") {\n      modules = [[null, modules, undefined]];\n    }\n    var alreadyImportedModules = {};\n    if (dedupe) {\n      for (var k = 0; k < this.length; k++) {\n        var id = this[k][0];\n        if (id != null) {\n          alreadyImportedModules[id] = true;\n        }\n      }\n    }\n    for (var _k = 0; _k < modules.length; _k++) {\n      var item = [].concat(modules[_k]);\n      if (dedupe && alreadyImportedModules[item[0]]) {\n        continue;\n      }\n      if (typeof layer !== "undefined") {\n        if (typeof item[5] === "undefined") {\n          item[5] = layer;\n        } else {\n          item[1] = "@layer".concat(item[5].length > 0 ? " ".concat(item[5]) : "", " {").concat(item[1], "}");\n          item[5] = layer;\n        }\n      }\n      if (media) {\n        if (!item[2]) {\n          item[2] = media;\n        } else {\n          item[1] = "@media ".concat(item[2], " {").concat(item[1], "}");\n          item[2] = media;\n        }\n      }\n      if (supports) {\n        if (!item[4]) {\n          item[4] = "".concat(supports);\n        } else {\n          item[1] = "@supports (".concat(item[4], ") {").concat(item[1], "}");\n          item[4] = supports;\n        }\n      }\n      list.push(item);\n    }\n  };\n  return list;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTA4OS5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYjtBQUNBO0FBQ0E7QUFDQTtBQUNBQSxNQUFNLENBQUNDLE9BQU8sR0FBRyxVQUFVQyxzQkFBc0IsRUFBRTtFQUNqRCxJQUFJQyxJQUFJLEdBQUcsRUFBRTs7RUFFYjtFQUNBQSxJQUFJLENBQUNDLFFBQVEsR0FBRyxTQUFTQSxRQUFRQSxDQUFBLEVBQUc7SUFDbEMsT0FBTyxJQUFJLENBQUNDLEdBQUcsQ0FBQyxVQUFVQyxJQUFJLEVBQUU7TUFDOUIsSUFBSUMsT0FBTyxHQUFHLEVBQUU7TUFDaEIsSUFBSUMsU0FBUyxHQUFHLE9BQU9GLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxXQUFXO01BQzlDLElBQUlBLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRTtRQUNYQyxPQUFPLElBQUksYUFBYSxDQUFDRSxNQUFNLENBQUNILElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxLQUFLLENBQUM7TUFDakQ7TUFDQSxJQUFJQSxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUU7UUFDWEMsT0FBTyxJQUFJLFNBQVMsQ0FBQ0UsTUFBTSxDQUFDSCxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDO01BQzVDO01BQ0EsSUFBSUUsU0FBUyxFQUFFO1FBQ2JELE9BQU8sSUFBSSxRQUFRLENBQUNFLE1BQU0sQ0FBQ0gsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDSSxNQUFNLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQ0QsTUFBTSxDQUFDSCxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLEVBQUUsSUFBSSxDQUFDO01BQ2pGO01BQ0FDLE9BQU8sSUFBSUwsc0JBQXNCLENBQUNJLElBQUksQ0FBQztNQUN2QyxJQUFJRSxTQUFTLEVBQUU7UUFDYkQsT0FBTyxJQUFJLEdBQUc7TUFDaEI7TUFDQSxJQUFJRCxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUU7UUFDWEMsT0FBTyxJQUFJLEdBQUc7TUFDaEI7TUFDQSxJQUFJRCxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUU7UUFDWEMsT0FBTyxJQUFJLEdBQUc7TUFDaEI7TUFDQSxPQUFPQSxPQUFPO0lBQ2hCLENBQUMsQ0FBQyxDQUFDSSxJQUFJLENBQUMsRUFBRSxDQUFDO0VBQ2IsQ0FBQzs7RUFFRDtFQUNBUixJQUFJLENBQUNTLENBQUMsR0FBRyxTQUFTQSxDQUFDQSxDQUFDQyxPQUFPLEVBQUVDLEtBQUssRUFBRUMsTUFBTSxFQUFFQyxRQUFRLEVBQUVDLEtBQUssRUFBRTtJQUMzRCxJQUFJLE9BQU9KLE9BQU8sS0FBSyxRQUFRLEVBQUU7TUFDL0JBLE9BQU8sR0FBRyxDQUFDLENBQUMsSUFBSSxFQUFFQSxPQUFPLEVBQUVLLFNBQVMsQ0FBQyxDQUFDO0lBQ3hDO0lBQ0EsSUFBSUMsc0JBQXNCLEdBQUcsQ0FBQyxDQUFDO0lBQy9CLElBQUlKLE1BQU0sRUFBRTtNQUNWLEtBQUssSUFBSUssQ0FBQyxHQUFHLENBQUMsRUFBRUEsQ0FBQyxHQUFHLElBQUksQ0FBQ1YsTUFBTSxFQUFFVSxDQUFDLEVBQUUsRUFBRTtRQUNwQyxJQUFJQyxFQUFFLEdBQUcsSUFBSSxDQUFDRCxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDbkIsSUFBSUMsRUFBRSxJQUFJLElBQUksRUFBRTtVQUNkRixzQkFBc0IsQ0FBQ0UsRUFBRSxDQUFDLEdBQUcsSUFBSTtRQUNuQztNQUNGO0lBQ0Y7SUFDQSxLQUFLLElBQUlDLEVBQUUsR0FBRyxDQUFDLEVBQUVBLEVBQUUsR0FBR1QsT0FBTyxDQUFDSCxNQUFNLEVBQUVZLEVBQUUsRUFBRSxFQUFFO01BQzFDLElBQUloQixJQUFJLEdBQUcsRUFBRSxDQUFDRyxNQUFNLENBQUNJLE9BQU8sQ0FBQ1MsRUFBRSxDQUFDLENBQUM7TUFDakMsSUFBSVAsTUFBTSxJQUFJSSxzQkFBc0IsQ0FBQ2IsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUU7UUFDN0M7TUFDRjtNQUNBLElBQUksT0FBT1csS0FBSyxLQUFLLFdBQVcsRUFBRTtRQUNoQyxJQUFJLE9BQU9YLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxXQUFXLEVBQUU7VUFDbENBLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBR1csS0FBSztRQUNqQixDQUFDLE1BQU07VUFDTFgsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLFFBQVEsQ0FBQ0csTUFBTSxDQUFDSCxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUNJLE1BQU0sR0FBRyxDQUFDLEdBQUcsR0FBRyxDQUFDRCxNQUFNLENBQUNILElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsRUFBRSxJQUFJLENBQUMsQ0FBQ0csTUFBTSxDQUFDSCxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsR0FBRyxDQUFDO1VBQ25HQSxJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUdXLEtBQUs7UUFDakI7TUFDRjtNQUNBLElBQUlILEtBQUssRUFBRTtRQUNULElBQUksQ0FBQ1IsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFO1VBQ1pBLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBR1EsS0FBSztRQUNqQixDQUFDLE1BQU07VUFDTFIsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLFNBQVMsQ0FBQ0csTUFBTSxDQUFDSCxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUNHLE1BQU0sQ0FBQ0gsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLEdBQUcsQ0FBQztVQUM5REEsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHUSxLQUFLO1FBQ2pCO01BQ0Y7TUFDQSxJQUFJRSxRQUFRLEVBQUU7UUFDWixJQUFJLENBQUNWLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRTtVQUNaQSxJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDRyxNQUFNLENBQUNPLFFBQVEsQ0FBQztRQUMvQixDQUFDLE1BQU07VUFDTFYsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLGFBQWEsQ0FBQ0csTUFBTSxDQUFDSCxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUNHLE1BQU0sQ0FBQ0gsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLEdBQUcsQ0FBQztVQUNuRUEsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHVSxRQUFRO1FBQ3BCO01BQ0Y7TUFDQWIsSUFBSSxDQUFDb0IsSUFBSSxDQUFDakIsSUFBSSxDQUFDO0lBQ2pCO0VBQ0YsQ0FBQztFQUNELE9BQU9ILElBQUk7QUFDYixDQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vMjAyNC1rdHNzdHVkaW8taG9tZXdvcmtzLy4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qcz8yNGZiIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG4vKlxuICBNSVQgTGljZW5zZSBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocFxuICBBdXRob3IgVG9iaWFzIEtvcHBlcnMgQHNva3JhXG4qL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoY3NzV2l0aE1hcHBpbmdUb1N0cmluZykge1xuICB2YXIgbGlzdCA9IFtdO1xuXG4gIC8vIHJldHVybiB0aGUgbGlzdCBvZiBtb2R1bGVzIGFzIGNzcyBzdHJpbmdcbiAgbGlzdC50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiB0aGlzLm1hcChmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgdmFyIGNvbnRlbnQgPSBcIlwiO1xuICAgICAgdmFyIG5lZWRMYXllciA9IHR5cGVvZiBpdGVtWzVdICE9PSBcInVuZGVmaW5lZFwiO1xuICAgICAgaWYgKGl0ZW1bNF0pIHtcbiAgICAgICAgY29udGVudCArPSBcIkBzdXBwb3J0cyAoXCIuY29uY2F0KGl0ZW1bNF0sIFwiKSB7XCIpO1xuICAgICAgfVxuICAgICAgaWYgKGl0ZW1bMl0pIHtcbiAgICAgICAgY29udGVudCArPSBcIkBtZWRpYSBcIi5jb25jYXQoaXRlbVsyXSwgXCIge1wiKTtcbiAgICAgIH1cbiAgICAgIGlmIChuZWVkTGF5ZXIpIHtcbiAgICAgICAgY29udGVudCArPSBcIkBsYXllclwiLmNvbmNhdChpdGVtWzVdLmxlbmd0aCA+IDAgPyBcIiBcIi5jb25jYXQoaXRlbVs1XSkgOiBcIlwiLCBcIiB7XCIpO1xuICAgICAgfVxuICAgICAgY29udGVudCArPSBjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKGl0ZW0pO1xuICAgICAgaWYgKG5lZWRMYXllcikge1xuICAgICAgICBjb250ZW50ICs9IFwifVwiO1xuICAgICAgfVxuICAgICAgaWYgKGl0ZW1bMl0pIHtcbiAgICAgICAgY29udGVudCArPSBcIn1cIjtcbiAgICAgIH1cbiAgICAgIGlmIChpdGVtWzRdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJ9XCI7XG4gICAgICB9XG4gICAgICByZXR1cm4gY29udGVudDtcbiAgICB9KS5qb2luKFwiXCIpO1xuICB9O1xuXG4gIC8vIGltcG9ydCBhIGxpc3Qgb2YgbW9kdWxlcyBpbnRvIHRoZSBsaXN0XG4gIGxpc3QuaSA9IGZ1bmN0aW9uIGkobW9kdWxlcywgbWVkaWEsIGRlZHVwZSwgc3VwcG9ydHMsIGxheWVyKSB7XG4gICAgaWYgKHR5cGVvZiBtb2R1bGVzID09PSBcInN0cmluZ1wiKSB7XG4gICAgICBtb2R1bGVzID0gW1tudWxsLCBtb2R1bGVzLCB1bmRlZmluZWRdXTtcbiAgICB9XG4gICAgdmFyIGFscmVhZHlJbXBvcnRlZE1vZHVsZXMgPSB7fTtcbiAgICBpZiAoZGVkdXBlKSB7XG4gICAgICBmb3IgKHZhciBrID0gMDsgayA8IHRoaXMubGVuZ3RoOyBrKyspIHtcbiAgICAgICAgdmFyIGlkID0gdGhpc1trXVswXTtcbiAgICAgICAgaWYgKGlkICE9IG51bGwpIHtcbiAgICAgICAgICBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2lkXSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgZm9yICh2YXIgX2sgPSAwOyBfayA8IG1vZHVsZXMubGVuZ3RoOyBfaysrKSB7XG4gICAgICB2YXIgaXRlbSA9IFtdLmNvbmNhdChtb2R1bGVzW19rXSk7XG4gICAgICBpZiAoZGVkdXBlICYmIGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaXRlbVswXV0pIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICBpZiAodHlwZW9mIGxheWVyICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgIGlmICh0eXBlb2YgaXRlbVs1XSA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAgIGl0ZW1bNV0gPSBsYXllcjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtWzFdID0gXCJAbGF5ZXJcIi5jb25jYXQoaXRlbVs1XS5sZW5ndGggPiAwID8gXCIgXCIuY29uY2F0KGl0ZW1bNV0pIDogXCJcIiwgXCIge1wiKS5jb25jYXQoaXRlbVsxXSwgXCJ9XCIpO1xuICAgICAgICAgIGl0ZW1bNV0gPSBsYXllcjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKG1lZGlhKSB7XG4gICAgICAgIGlmICghaXRlbVsyXSkge1xuICAgICAgICAgIGl0ZW1bMl0gPSBtZWRpYTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtWzFdID0gXCJAbWVkaWEgXCIuY29uY2F0KGl0ZW1bMl0sIFwiIHtcIikuY29uY2F0KGl0ZW1bMV0sIFwifVwiKTtcbiAgICAgICAgICBpdGVtWzJdID0gbWVkaWE7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChzdXBwb3J0cykge1xuICAgICAgICBpZiAoIWl0ZW1bNF0pIHtcbiAgICAgICAgICBpdGVtWzRdID0gXCJcIi5jb25jYXQoc3VwcG9ydHMpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW1bMV0gPSBcIkBzdXBwb3J0cyAoXCIuY29uY2F0KGl0ZW1bNF0sIFwiKSB7XCIpLmNvbmNhdChpdGVtWzFdLCBcIn1cIik7XG4gICAgICAgICAgaXRlbVs0XSA9IHN1cHBvcnRzO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBsaXN0LnB1c2goaXRlbSk7XG4gICAgfVxuICB9O1xuICByZXR1cm4gbGlzdDtcbn07Il0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJjc3NXaXRoTWFwcGluZ1RvU3RyaW5nIiwibGlzdCIsInRvU3RyaW5nIiwibWFwIiwiaXRlbSIsImNvbnRlbnQiLCJuZWVkTGF5ZXIiLCJjb25jYXQiLCJsZW5ndGgiLCJqb2luIiwiaSIsIm1vZHVsZXMiLCJtZWRpYSIsImRlZHVwZSIsInN1cHBvcnRzIiwibGF5ZXIiLCJ1bmRlZmluZWQiLCJhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzIiwiayIsImlkIiwiX2siLCJwdXNoIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///9089\n')},6492:module=>{"use strict";eval('\n\nmodule.exports = function (url, options) {\n  if (!options) {\n    options = {};\n  }\n  if (!url) {\n    return url;\n  }\n  url = String(url.__esModule ? url.default : url);\n\n  // If url is already wrapped in quotes, remove them\n  if (/^[\'"].*[\'"]$/.test(url)) {\n    url = url.slice(1, -1);\n  }\n  if (options.hash) {\n    url += options.hash;\n  }\n\n  // Should url be wrapped?\n  // See https://drafts.csswg.org/css-values-3/#urls\n  if (/["\'() \\t\\n]|(%20)/.test(url) || options.needQuotes) {\n    return "\\"".concat(url.replace(/"/g, \'\\\\"\').replace(/\\n/g, "\\\\n"), "\\"");\n  }\n  return url;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNjQ5Mi5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYkEsTUFBTSxDQUFDQyxPQUFPLEdBQUcsVUFBVUMsR0FBRyxFQUFFQyxPQUFPLEVBQUU7RUFDdkMsSUFBSSxDQUFDQSxPQUFPLEVBQUU7SUFDWkEsT0FBTyxHQUFHLENBQUMsQ0FBQztFQUNkO0VBQ0EsSUFBSSxDQUFDRCxHQUFHLEVBQUU7SUFDUixPQUFPQSxHQUFHO0VBQ1o7RUFDQUEsR0FBRyxHQUFHRSxNQUFNLENBQUNGLEdBQUcsQ0FBQ0csVUFBVSxHQUFHSCxHQUFHLENBQUNJLE9BQU8sR0FBR0osR0FBRyxDQUFDOztFQUVoRDtFQUNBLElBQUksY0FBYyxDQUFDSyxJQUFJLENBQUNMLEdBQUcsQ0FBQyxFQUFFO0lBQzVCQSxHQUFHLEdBQUdBLEdBQUcsQ0FBQ00sS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztFQUN4QjtFQUNBLElBQUlMLE9BQU8sQ0FBQ00sSUFBSSxFQUFFO0lBQ2hCUCxHQUFHLElBQUlDLE9BQU8sQ0FBQ00sSUFBSTtFQUNyQjs7RUFFQTtFQUNBO0VBQ0EsSUFBSSxtQkFBbUIsQ0FBQ0YsSUFBSSxDQUFDTCxHQUFHLENBQUMsSUFBSUMsT0FBTyxDQUFDTyxVQUFVLEVBQUU7SUFDdkQsT0FBTyxJQUFJLENBQUNDLE1BQU0sQ0FBQ1QsR0FBRyxDQUFDVSxPQUFPLENBQUMsSUFBSSxFQUFFLEtBQUssQ0FBQyxDQUFDQSxPQUFPLENBQUMsS0FBSyxFQUFFLEtBQUssQ0FBQyxFQUFFLElBQUksQ0FBQztFQUMxRTtFQUNBLE9BQU9WLEdBQUc7QUFDWixDQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vMjAyNC1rdHNzdHVkaW8taG9tZXdvcmtzLy4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2dldFVybC5qcz8xZGU1Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh1cmwsIG9wdGlvbnMpIHtcbiAgaWYgKCFvcHRpb25zKSB7XG4gICAgb3B0aW9ucyA9IHt9O1xuICB9XG4gIGlmICghdXJsKSB7XG4gICAgcmV0dXJuIHVybDtcbiAgfVxuICB1cmwgPSBTdHJpbmcodXJsLl9fZXNNb2R1bGUgPyB1cmwuZGVmYXVsdCA6IHVybCk7XG5cbiAgLy8gSWYgdXJsIGlzIGFscmVhZHkgd3JhcHBlZCBpbiBxdW90ZXMsIHJlbW92ZSB0aGVtXG4gIGlmICgvXlsnXCJdLipbJ1wiXSQvLnRlc3QodXJsKSkge1xuICAgIHVybCA9IHVybC5zbGljZSgxLCAtMSk7XG4gIH1cbiAgaWYgKG9wdGlvbnMuaGFzaCkge1xuICAgIHVybCArPSBvcHRpb25zLmhhc2g7XG4gIH1cblxuICAvLyBTaG91bGQgdXJsIGJlIHdyYXBwZWQ/XG4gIC8vIFNlZSBodHRwczovL2RyYWZ0cy5jc3N3Zy5vcmcvY3NzLXZhbHVlcy0zLyN1cmxzXG4gIGlmICgvW1wiJygpIFxcdFxcbl18KCUyMCkvLnRlc3QodXJsKSB8fCBvcHRpb25zLm5lZWRRdW90ZXMpIHtcbiAgICByZXR1cm4gXCJcXFwiXCIuY29uY2F0KHVybC5yZXBsYWNlKC9cIi9nLCAnXFxcXFwiJykucmVwbGFjZSgvXFxuL2csIFwiXFxcXG5cIiksIFwiXFxcIlwiKTtcbiAgfVxuICByZXR1cm4gdXJsO1xufTsiXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsInVybCIsIm9wdGlvbnMiLCJTdHJpbmciLCJfX2VzTW9kdWxlIiwiZGVmYXVsdCIsInRlc3QiLCJzbGljZSIsImhhc2giLCJuZWVkUXVvdGVzIiwiY29uY2F0IiwicmVwbGFjZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///6492\n')},963:module=>{"use strict";eval('\n\nmodule.exports = function (item) {\n  var content = item[1];\n  var cssMapping = item[3];\n  if (!cssMapping) {\n    return content;\n  }\n  if (typeof btoa === "function") {\n    var base64 = btoa(unescape(encodeURIComponent(JSON.stringify(cssMapping))));\n    var data = "sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(base64);\n    var sourceMapping = "/*# ".concat(data, " */");\n    return [content].concat([sourceMapping]).join("\\n");\n  }\n  return [content].join("\\n");\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTYzLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViQSxNQUFNLENBQUNDLE9BQU8sR0FBRyxVQUFVQyxJQUFJLEVBQUU7RUFDL0IsSUFBSUMsT0FBTyxHQUFHRCxJQUFJLENBQUMsQ0FBQyxDQUFDO0VBQ3JCLElBQUlFLFVBQVUsR0FBR0YsSUFBSSxDQUFDLENBQUMsQ0FBQztFQUN4QixJQUFJLENBQUNFLFVBQVUsRUFBRTtJQUNmLE9BQU9ELE9BQU87RUFDaEI7RUFDQSxJQUFJLE9BQU9FLElBQUksS0FBSyxVQUFVLEVBQUU7SUFDOUIsSUFBSUMsTUFBTSxHQUFHRCxJQUFJLENBQUNFLFFBQVEsQ0FBQ0Msa0JBQWtCLENBQUNDLElBQUksQ0FBQ0MsU0FBUyxDQUFDTixVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDM0UsSUFBSU8sSUFBSSxHQUFHLDhEQUE4RCxDQUFDQyxNQUFNLENBQUNOLE1BQU0sQ0FBQztJQUN4RixJQUFJTyxhQUFhLEdBQUcsTUFBTSxDQUFDRCxNQUFNLENBQUNELElBQUksRUFBRSxLQUFLLENBQUM7SUFDOUMsT0FBTyxDQUFDUixPQUFPLENBQUMsQ0FBQ1MsTUFBTSxDQUFDLENBQUNDLGFBQWEsQ0FBQyxDQUFDLENBQUNDLElBQUksQ0FBQyxJQUFJLENBQUM7RUFDckQ7RUFDQSxPQUFPLENBQUNYLE9BQU8sQ0FBQyxDQUFDVyxJQUFJLENBQUMsSUFBSSxDQUFDO0FBQzdCLENBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8yMDI0LWt0c3N0dWRpby1ob21ld29ya3MvLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qcz9hZjEyIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdGVtKSB7XG4gIHZhciBjb250ZW50ID0gaXRlbVsxXTtcbiAgdmFyIGNzc01hcHBpbmcgPSBpdGVtWzNdO1xuICBpZiAoIWNzc01hcHBpbmcpIHtcbiAgICByZXR1cm4gY29udGVudDtcbiAgfVxuICBpZiAodHlwZW9mIGJ0b2EgPT09IFwiZnVuY3Rpb25cIikge1xuICAgIHZhciBiYXNlNjQgPSBidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShjc3NNYXBwaW5nKSkpKTtcbiAgICB2YXIgZGF0YSA9IFwic291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsXCIuY29uY2F0KGJhc2U2NCk7XG4gICAgdmFyIHNvdXJjZU1hcHBpbmcgPSBcIi8qIyBcIi5jb25jYXQoZGF0YSwgXCIgKi9cIik7XG4gICAgcmV0dXJuIFtjb250ZW50XS5jb25jYXQoW3NvdXJjZU1hcHBpbmddKS5qb2luKFwiXFxuXCIpO1xuICB9XG4gIHJldHVybiBbY29udGVudF0uam9pbihcIlxcblwiKTtcbn07Il0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJpdGVtIiwiY29udGVudCIsImNzc01hcHBpbmciLCJidG9hIiwiYmFzZTY0IiwidW5lc2NhcGUiLCJlbmNvZGVVUklDb21wb25lbnQiLCJKU09OIiwic3RyaW5naWZ5IiwiZGF0YSIsImNvbmNhdCIsInNvdXJjZU1hcHBpbmciLCJqb2luIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///963\n')},7230:(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval('/**\n * @license React\n * react-dom.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n/*\n Modernizr 3.0.0pre (Custom Build) | MIT\n*/\n\n\nvar aa = __webpack_require__(9471),\n  ca = __webpack_require__(9817);\nfunction p(a) {\n  for (var b = "https://reactjs.org/docs/error-decoder.html?invariant=" + a, c = 1; c < arguments.length; c++) b += "&args[]=" + encodeURIComponent(arguments[c]);\n  return "Minified React error #" + a + "; visit " + b + " for the full message or use the non-minified dev environment for full errors and additional helpful warnings.";\n}\nvar da = new Set(),\n  ea = {};\nfunction fa(a, b) {\n  ha(a, b);\n  ha(a + "Capture", b);\n}\nfunction ha(a, b) {\n  ea[a] = b;\n  for (a = 0; a < b.length; a++) da.add(b[a]);\n}\nvar ia = !("undefined" === typeof window || "undefined" === typeof window.document || "undefined" === typeof window.document.createElement),\n  ja = Object.prototype.hasOwnProperty,\n  ka = /^[:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$/,\n  la = {},\n  ma = {};\nfunction oa(a) {\n  if (ja.call(ma, a)) return !0;\n  if (ja.call(la, a)) return !1;\n  if (ka.test(a)) return ma[a] = !0;\n  la[a] = !0;\n  return !1;\n}\nfunction pa(a, b, c, d) {\n  if (null !== c && 0 === c.type) return !1;\n  switch (typeof b) {\n    case "function":\n    case "symbol":\n      return !0;\n    case "boolean":\n      if (d) return !1;\n      if (null !== c) return !c.acceptsBooleans;\n      a = a.toLowerCase().slice(0, 5);\n      return "data-" !== a && "aria-" !== a;\n    default:\n      return !1;\n  }\n}\nfunction qa(a, b, c, d) {\n  if (null === b || "undefined" === typeof b || pa(a, b, c, d)) return !0;\n  if (d) return !1;\n  if (null !== c) switch (c.type) {\n    case 3:\n      return !b;\n    case 4:\n      return !1 === b;\n    case 5:\n      return isNaN(b);\n    case 6:\n      return isNaN(b) || 1 > b;\n  }\n  return !1;\n}\nfunction v(a, b, c, d, e, f, g) {\n  this.acceptsBooleans = 2 === b || 3 === b || 4 === b;\n  this.attributeName = d;\n  this.attributeNamespace = e;\n  this.mustUseProperty = c;\n  this.propertyName = a;\n  this.type = b;\n  this.sanitizeURL = f;\n  this.removeEmptyString = g;\n}\nvar z = {};\n"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach(function (a) {\n  z[a] = new v(a, 0, !1, a, null, !1, !1);\n});\n[["acceptCharset", "accept-charset"], ["className", "class"], ["htmlFor", "for"], ["httpEquiv", "http-equiv"]].forEach(function (a) {\n  var b = a[0];\n  z[b] = new v(b, 1, !1, a[1], null, !1, !1);\n});\n["contentEditable", "draggable", "spellCheck", "value"].forEach(function (a) {\n  z[a] = new v(a, 2, !1, a.toLowerCase(), null, !1, !1);\n});\n["autoReverse", "externalResourcesRequired", "focusable", "preserveAlpha"].forEach(function (a) {\n  z[a] = new v(a, 2, !1, a, null, !1, !1);\n});\n"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach(function (a) {\n  z[a] = new v(a, 3, !1, a.toLowerCase(), null, !1, !1);\n});\n["checked", "multiple", "muted", "selected"].forEach(function (a) {\n  z[a] = new v(a, 3, !0, a, null, !1, !1);\n});\n["capture", "download"].forEach(function (a) {\n  z[a] = new v(a, 4, !1, a, null, !1, !1);\n});\n["cols", "rows", "size", "span"].forEach(function (a) {\n  z[a] = new v(a, 6, !1, a, null, !1, !1);\n});\n["rowSpan", "start"].forEach(function (a) {\n  z[a] = new v(a, 5, !1, a.toLowerCase(), null, !1, !1);\n});\nvar ra = /[\\-:]([a-z])/g;\nfunction sa(a) {\n  return a[1].toUpperCase();\n}\n"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach(function (a) {\n  var b = a.replace(ra, sa);\n  z[b] = new v(b, 1, !1, a, null, !1, !1);\n});\n"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach(function (a) {\n  var b = a.replace(ra, sa);\n  z[b] = new v(b, 1, !1, a, "http://www.w3.org/1999/xlink", !1, !1);\n});\n["xml:base", "xml:lang", "xml:space"].forEach(function (a) {\n  var b = a.replace(ra, sa);\n  z[b] = new v(b, 1, !1, a, "http://www.w3.org/XML/1998/namespace", !1, !1);\n});\n["tabIndex", "crossOrigin"].forEach(function (a) {\n  z[a] = new v(a, 1, !1, a.toLowerCase(), null, !1, !1);\n});\nz.xlinkHref = new v("xlinkHref", 1, !1, "xlink:href", "http://www.w3.org/1999/xlink", !0, !1);\n["src", "href", "action", "formAction"].forEach(function (a) {\n  z[a] = new v(a, 1, !1, a.toLowerCase(), null, !0, !0);\n});\nfunction ta(a, b, c, d) {\n  var e = z.hasOwnProperty(b) ? z[b] : null;\n  if (null !== e ? 0 !== e.type : d || !(2 < b.length) || "o" !== b[0] && "O" !== b[0] || "n" !== b[1] && "N" !== b[1]) qa(b, c, e, d) && (c = null), d || null === e ? oa(b) && (null === c ? a.removeAttribute(b) : a.setAttribute(b, "" + c)) : e.mustUseProperty ? a[e.propertyName] = null === c ? 3 === e.type ? !1 : "" : c : (b = e.attributeName, d = e.attributeNamespace, null === c ? a.removeAttribute(b) : (e = e.type, c = 3 === e || 4 === e && !0 === c ? "" : "" + c, d ? a.setAttributeNS(d, b, c) : a.setAttribute(b, c)));\n}\nvar ua = aa.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,\n  va = Symbol.for("react.element"),\n  wa = Symbol.for("react.portal"),\n  ya = Symbol.for("react.fragment"),\n  za = Symbol.for("react.strict_mode"),\n  Aa = Symbol.for("react.profiler"),\n  Ba = Symbol.for("react.provider"),\n  Ca = Symbol.for("react.context"),\n  Da = Symbol.for("react.forward_ref"),\n  Ea = Symbol.for("react.suspense"),\n  Fa = Symbol.for("react.suspense_list"),\n  Ga = Symbol.for("react.memo"),\n  Ha = Symbol.for("react.lazy");\nSymbol.for("react.scope");\nSymbol.for("react.debug_trace_mode");\nvar Ia = Symbol.for("react.offscreen");\nSymbol.for("react.legacy_hidden");\nSymbol.for("react.cache");\nSymbol.for("react.tracing_marker");\nvar Ja = Symbol.iterator;\nfunction Ka(a) {\n  if (null === a || "object" !== typeof a) return null;\n  a = Ja && a[Ja] || a["@@iterator"];\n  return "function" === typeof a ? a : null;\n}\nvar A = Object.assign,\n  La;\nfunction Ma(a) {\n  if (void 0 === La) try {\n    throw Error();\n  } catch (c) {\n    var b = c.stack.trim().match(/\\n( *(at )?)/);\n    La = b && b[1] || "";\n  }\n  return "\\n" + La + a;\n}\nvar Na = !1;\nfunction Oa(a, b) {\n  if (!a || Na) return "";\n  Na = !0;\n  var c = Error.prepareStackTrace;\n  Error.prepareStackTrace = void 0;\n  try {\n    if (b) {\n      if (b = function () {\n        throw Error();\n      }, Object.defineProperty(b.prototype, "props", {\n        set: function () {\n          throw Error();\n        }\n      }), "object" === typeof Reflect && Reflect.construct) {\n        try {\n          Reflect.construct(b, []);\n        } catch (l) {\n          var d = l;\n        }\n        Reflect.construct(a, [], b);\n      } else {\n        try {\n          b.call();\n        } catch (l) {\n          d = l;\n        }\n        a.call(b.prototype);\n      }\n    } else {\n      try {\n        throw Error();\n      } catch (l) {\n        d = l;\n      }\n      a();\n    }\n  } catch (l) {\n    if (l && d && "string" === typeof l.stack) {\n      for (var e = l.stack.split("\\n"), f = d.stack.split("\\n"), g = e.length - 1, h = f.length - 1; 1 <= g && 0 <= h && e[g] !== f[h];) h--;\n      for (; 1 <= g && 0 <= h; g--, h--) if (e[g] !== f[h]) {\n        if (1 !== g || 1 !== h) {\n          do if (g--, h--, 0 > h || e[g] !== f[h]) {\n            var k = "\\n" + e[g].replace(" at new ", " at ");\n            a.displayName && k.includes("<anonymous>") && (k = k.replace("<anonymous>", a.displayName));\n            return k;\n          } while (1 <= g && 0 <= h);\n        }\n        break;\n      }\n    }\n  } finally {\n    Na = !1, Error.prepareStackTrace = c;\n  }\n  return (a = a ? a.displayName || a.name : "") ? Ma(a) : "";\n}\nfunction Pa(a) {\n  switch (a.tag) {\n    case 5:\n      return Ma(a.type);\n    case 16:\n      return Ma("Lazy");\n    case 13:\n      return Ma("Suspense");\n    case 19:\n      return Ma("SuspenseList");\n    case 0:\n    case 2:\n    case 15:\n      return a = Oa(a.type, !1), a;\n    case 11:\n      return a = Oa(a.type.render, !1), a;\n    case 1:\n      return a = Oa(a.type, !0), a;\n    default:\n      return "";\n  }\n}\nfunction Qa(a) {\n  if (null == a) return null;\n  if ("function" === typeof a) return a.displayName || a.name || null;\n  if ("string" === typeof a) return a;\n  switch (a) {\n    case ya:\n      return "Fragment";\n    case wa:\n      return "Portal";\n    case Aa:\n      return "Profiler";\n    case za:\n      return "StrictMode";\n    case Ea:\n      return "Suspense";\n    case Fa:\n      return "SuspenseList";\n  }\n  if ("object" === typeof a) switch (a.$$typeof) {\n    case Ca:\n      return (a.displayName || "Context") + ".Consumer";\n    case Ba:\n      return (a._context.displayName || "Context") + ".Provider";\n    case Da:\n      var b = a.render;\n      a = a.displayName;\n      a || (a = b.displayName || b.name || "", a = "" !== a ? "ForwardRef(" + a + ")" : "ForwardRef");\n      return a;\n    case Ga:\n      return b = a.displayName || null, null !== b ? b : Qa(a.type) || "Memo";\n    case Ha:\n      b = a._payload;\n      a = a._init;\n      try {\n        return Qa(a(b));\n      } catch (c) {}\n  }\n  return null;\n}\nfunction Ra(a) {\n  var b = a.type;\n  switch (a.tag) {\n    case 24:\n      return "Cache";\n    case 9:\n      return (b.displayName || "Context") + ".Consumer";\n    case 10:\n      return (b._context.displayName || "Context") + ".Provider";\n    case 18:\n      return "DehydratedFragment";\n    case 11:\n      return a = b.render, a = a.displayName || a.name || "", b.displayName || ("" !== a ? "ForwardRef(" + a + ")" : "ForwardRef");\n    case 7:\n      return "Fragment";\n    case 5:\n      return b;\n    case 4:\n      return "Portal";\n    case 3:\n      return "Root";\n    case 6:\n      return "Text";\n    case 16:\n      return Qa(b);\n    case 8:\n      return b === za ? "StrictMode" : "Mode";\n    case 22:\n      return "Offscreen";\n    case 12:\n      return "Profiler";\n    case 21:\n      return "Scope";\n    case 13:\n      return "Suspense";\n    case 19:\n      return "SuspenseList";\n    case 25:\n      return "TracingMarker";\n    case 1:\n    case 0:\n    case 17:\n    case 2:\n    case 14:\n    case 15:\n      if ("function" === typeof b) return b.displayName || b.name || null;\n      if ("string" === typeof b) return b;\n  }\n  return null;\n}\nfunction Sa(a) {\n  switch (typeof a) {\n    case "boolean":\n    case "number":\n    case "string":\n    case "undefined":\n      return a;\n    case "object":\n      return a;\n    default:\n      return "";\n  }\n}\nfunction Ta(a) {\n  var b = a.type;\n  return (a = a.nodeName) && "input" === a.toLowerCase() && ("checkbox" === b || "radio" === b);\n}\nfunction Ua(a) {\n  var b = Ta(a) ? "checked" : "value",\n    c = Object.getOwnPropertyDescriptor(a.constructor.prototype, b),\n    d = "" + a[b];\n  if (!a.hasOwnProperty(b) && "undefined" !== typeof c && "function" === typeof c.get && "function" === typeof c.set) {\n    var e = c.get,\n      f = c.set;\n    Object.defineProperty(a, b, {\n      configurable: !0,\n      get: function () {\n        return e.call(this);\n      },\n      set: function (a) {\n        d = "" + a;\n        f.call(this, a);\n      }\n    });\n    Object.defineProperty(a, b, {\n      enumerable: c.enumerable\n    });\n    return {\n      getValue: function () {\n        return d;\n      },\n      setValue: function (a) {\n        d = "" + a;\n      },\n      stopTracking: function () {\n        a._valueTracker = null;\n        delete a[b];\n      }\n    };\n  }\n}\nfunction Va(a) {\n  a._valueTracker || (a._valueTracker = Ua(a));\n}\nfunction Wa(a) {\n  if (!a) return !1;\n  var b = a._valueTracker;\n  if (!b) return !0;\n  var c = b.getValue();\n  var d = "";\n  a && (d = Ta(a) ? a.checked ? "true" : "false" : a.value);\n  a = d;\n  return a !== c ? (b.setValue(a), !0) : !1;\n}\nfunction Xa(a) {\n  a = a || ("undefined" !== typeof document ? document : void 0);\n  if ("undefined" === typeof a) return null;\n  try {\n    return a.activeElement || a.body;\n  } catch (b) {\n    return a.body;\n  }\n}\nfunction Ya(a, b) {\n  var c = b.checked;\n  return A({}, b, {\n    defaultChecked: void 0,\n    defaultValue: void 0,\n    value: void 0,\n    checked: null != c ? c : a._wrapperState.initialChecked\n  });\n}\nfunction Za(a, b) {\n  var c = null == b.defaultValue ? "" : b.defaultValue,\n    d = null != b.checked ? b.checked : b.defaultChecked;\n  c = Sa(null != b.value ? b.value : c);\n  a._wrapperState = {\n    initialChecked: d,\n    initialValue: c,\n    controlled: "checkbox" === b.type || "radio" === b.type ? null != b.checked : null != b.value\n  };\n}\nfunction ab(a, b) {\n  b = b.checked;\n  null != b && ta(a, "checked", b, !1);\n}\nfunction bb(a, b) {\n  ab(a, b);\n  var c = Sa(b.value),\n    d = b.type;\n  if (null != c) {\n    if ("number" === d) {\n      if (0 === c && "" === a.value || a.value != c) a.value = "" + c;\n    } else a.value !== "" + c && (a.value = "" + c);\n  } else if ("submit" === d || "reset" === d) {\n    a.removeAttribute("value");\n    return;\n  }\n  b.hasOwnProperty("value") ? cb(a, b.type, c) : b.hasOwnProperty("defaultValue") && cb(a, b.type, Sa(b.defaultValue));\n  null == b.checked && null != b.defaultChecked && (a.defaultChecked = !!b.defaultChecked);\n}\nfunction db(a, b, c) {\n  if (b.hasOwnProperty("value") || b.hasOwnProperty("defaultValue")) {\n    var d = b.type;\n    if (!("submit" !== d && "reset" !== d || void 0 !== b.value && null !== b.value)) return;\n    b = "" + a._wrapperState.initialValue;\n    c || b === a.value || (a.value = b);\n    a.defaultValue = b;\n  }\n  c = a.name;\n  "" !== c && (a.name = "");\n  a.defaultChecked = !!a._wrapperState.initialChecked;\n  "" !== c && (a.name = c);\n}\nfunction cb(a, b, c) {\n  if ("number" !== b || Xa(a.ownerDocument) !== a) null == c ? a.defaultValue = "" + a._wrapperState.initialValue : a.defaultValue !== "" + c && (a.defaultValue = "" + c);\n}\nvar eb = Array.isArray;\nfunction fb(a, b, c, d) {\n  a = a.options;\n  if (b) {\n    b = {};\n    for (var e = 0; e < c.length; e++) b["$" + c[e]] = !0;\n    for (c = 0; c < a.length; c++) e = b.hasOwnProperty("$" + a[c].value), a[c].selected !== e && (a[c].selected = e), e && d && (a[c].defaultSelected = !0);\n  } else {\n    c = "" + Sa(c);\n    b = null;\n    for (e = 0; e < a.length; e++) {\n      if (a[e].value === c) {\n        a[e].selected = !0;\n        d && (a[e].defaultSelected = !0);\n        return;\n      }\n      null !== b || a[e].disabled || (b = a[e]);\n    }\n    null !== b && (b.selected = !0);\n  }\n}\nfunction gb(a, b) {\n  if (null != b.dangerouslySetInnerHTML) throw Error(p(91));\n  return A({}, b, {\n    value: void 0,\n    defaultValue: void 0,\n    children: "" + a._wrapperState.initialValue\n  });\n}\nfunction hb(a, b) {\n  var c = b.value;\n  if (null == c) {\n    c = b.children;\n    b = b.defaultValue;\n    if (null != c) {\n      if (null != b) throw Error(p(92));\n      if (eb(c)) {\n        if (1 < c.length) throw Error(p(93));\n        c = c[0];\n      }\n      b = c;\n    }\n    null == b && (b = "");\n    c = b;\n  }\n  a._wrapperState = {\n    initialValue: Sa(c)\n  };\n}\nfunction ib(a, b) {\n  var c = Sa(b.value),\n    d = Sa(b.defaultValue);\n  null != c && (c = "" + c, c !== a.value && (a.value = c), null == b.defaultValue && a.defaultValue !== c && (a.defaultValue = c));\n  null != d && (a.defaultValue = "" + d);\n}\nfunction jb(a) {\n  var b = a.textContent;\n  b === a._wrapperState.initialValue && "" !== b && null !== b && (a.value = b);\n}\nfunction kb(a) {\n  switch (a) {\n    case "svg":\n      return "http://www.w3.org/2000/svg";\n    case "math":\n      return "http://www.w3.org/1998/Math/MathML";\n    default:\n      return "http://www.w3.org/1999/xhtml";\n  }\n}\nfunction lb(a, b) {\n  return null == a || "http://www.w3.org/1999/xhtml" === a ? kb(b) : "http://www.w3.org/2000/svg" === a && "foreignObject" === b ? "http://www.w3.org/1999/xhtml" : a;\n}\nvar mb,\n  nb = function (a) {\n    return "undefined" !== typeof MSApp && MSApp.execUnsafeLocalFunction ? function (b, c, d, e) {\n      MSApp.execUnsafeLocalFunction(function () {\n        return a(b, c, d, e);\n      });\n    } : a;\n  }(function (a, b) {\n    if ("http://www.w3.org/2000/svg" !== a.namespaceURI || "innerHTML" in a) a.innerHTML = b;else {\n      mb = mb || document.createElement("div");\n      mb.innerHTML = "<svg>" + b.valueOf().toString() + "</svg>";\n      for (b = mb.firstChild; a.firstChild;) a.removeChild(a.firstChild);\n      for (; b.firstChild;) a.appendChild(b.firstChild);\n    }\n  });\nfunction ob(a, b) {\n  if (b) {\n    var c = a.firstChild;\n    if (c && c === a.lastChild && 3 === c.nodeType) {\n      c.nodeValue = b;\n      return;\n    }\n  }\n  a.textContent = b;\n}\nvar pb = {\n    animationIterationCount: !0,\n    aspectRatio: !0,\n    borderImageOutset: !0,\n    borderImageSlice: !0,\n    borderImageWidth: !0,\n    boxFlex: !0,\n    boxFlexGroup: !0,\n    boxOrdinalGroup: !0,\n    columnCount: !0,\n    columns: !0,\n    flex: !0,\n    flexGrow: !0,\n    flexPositive: !0,\n    flexShrink: !0,\n    flexNegative: !0,\n    flexOrder: !0,\n    gridArea: !0,\n    gridRow: !0,\n    gridRowEnd: !0,\n    gridRowSpan: !0,\n    gridRowStart: !0,\n    gridColumn: !0,\n    gridColumnEnd: !0,\n    gridColumnSpan: !0,\n    gridColumnStart: !0,\n    fontWeight: !0,\n    lineClamp: !0,\n    lineHeight: !0,\n    opacity: !0,\n    order: !0,\n    orphans: !0,\n    tabSize: !0,\n    widows: !0,\n    zIndex: !0,\n    zoom: !0,\n    fillOpacity: !0,\n    floodOpacity: !0,\n    stopOpacity: !0,\n    strokeDasharray: !0,\n    strokeDashoffset: !0,\n    strokeMiterlimit: !0,\n    strokeOpacity: !0,\n    strokeWidth: !0\n  },\n  qb = ["Webkit", "ms", "Moz", "O"];\nObject.keys(pb).forEach(function (a) {\n  qb.forEach(function (b) {\n    b = b + a.charAt(0).toUpperCase() + a.substring(1);\n    pb[b] = pb[a];\n  });\n});\nfunction rb(a, b, c) {\n  return null == b || "boolean" === typeof b || "" === b ? "" : c || "number" !== typeof b || 0 === b || pb.hasOwnProperty(a) && pb[a] ? ("" + b).trim() : b + "px";\n}\nfunction sb(a, b) {\n  a = a.style;\n  for (var c in b) if (b.hasOwnProperty(c)) {\n    var d = 0 === c.indexOf("--"),\n      e = rb(c, b[c], d);\n    "float" === c && (c = "cssFloat");\n    d ? a.setProperty(c, e) : a[c] = e;\n  }\n}\nvar tb = A({\n  menuitem: !0\n}, {\n  area: !0,\n  base: !0,\n  br: !0,\n  col: !0,\n  embed: !0,\n  hr: !0,\n  img: !0,\n  input: !0,\n  keygen: !0,\n  link: !0,\n  meta: !0,\n  param: !0,\n  source: !0,\n  track: !0,\n  wbr: !0\n});\nfunction ub(a, b) {\n  if (b) {\n    if (tb[a] && (null != b.children || null != b.dangerouslySetInnerHTML)) throw Error(p(137, a));\n    if (null != b.dangerouslySetInnerHTML) {\n      if (null != b.children) throw Error(p(60));\n      if ("object" !== typeof b.dangerouslySetInnerHTML || !("__html" in b.dangerouslySetInnerHTML)) throw Error(p(61));\n    }\n    if (null != b.style && "object" !== typeof b.style) throw Error(p(62));\n  }\n}\nfunction vb(a, b) {\n  if (-1 === a.indexOf("-")) return "string" === typeof b.is;\n  switch (a) {\n    case "annotation-xml":\n    case "color-profile":\n    case "font-face":\n    case "font-face-src":\n    case "font-face-uri":\n    case "font-face-format":\n    case "font-face-name":\n    case "missing-glyph":\n      return !1;\n    default:\n      return !0;\n  }\n}\nvar wb = null;\nfunction xb(a) {\n  a = a.target || a.srcElement || window;\n  a.correspondingUseElement && (a = a.correspondingUseElement);\n  return 3 === a.nodeType ? a.parentNode : a;\n}\nvar yb = null,\n  zb = null,\n  Ab = null;\nfunction Bb(a) {\n  if (a = Cb(a)) {\n    if ("function" !== typeof yb) throw Error(p(280));\n    var b = a.stateNode;\n    b && (b = Db(b), yb(a.stateNode, a.type, b));\n  }\n}\nfunction Eb(a) {\n  zb ? Ab ? Ab.push(a) : Ab = [a] : zb = a;\n}\nfunction Fb() {\n  if (zb) {\n    var a = zb,\n      b = Ab;\n    Ab = zb = null;\n    Bb(a);\n    if (b) for (a = 0; a < b.length; a++) Bb(b[a]);\n  }\n}\nfunction Gb(a, b) {\n  return a(b);\n}\nfunction Hb() {}\nvar Ib = !1;\nfunction Jb(a, b, c) {\n  if (Ib) return a(b, c);\n  Ib = !0;\n  try {\n    return Gb(a, b, c);\n  } finally {\n    if (Ib = !1, null !== zb || null !== Ab) Hb(), Fb();\n  }\n}\nfunction Kb(a, b) {\n  var c = a.stateNode;\n  if (null === c) return null;\n  var d = Db(c);\n  if (null === d) return null;\n  c = d[b];\n  a: switch (b) {\n    case "onClick":\n    case "onClickCapture":\n    case "onDoubleClick":\n    case "onDoubleClickCapture":\n    case "onMouseDown":\n    case "onMouseDownCapture":\n    case "onMouseMove":\n    case "onMouseMoveCapture":\n    case "onMouseUp":\n    case "onMouseUpCapture":\n    case "onMouseEnter":\n      (d = !d.disabled) || (a = a.type, d = !("button" === a || "input" === a || "select" === a || "textarea" === a));\n      a = !d;\n      break a;\n    default:\n      a = !1;\n  }\n  if (a) return null;\n  if (c && "function" !== typeof c) throw Error(p(231, b, typeof c));\n  return c;\n}\nvar Lb = !1;\nif (ia) try {\n  var Mb = {};\n  Object.defineProperty(Mb, "passive", {\n    get: function () {\n      Lb = !0;\n    }\n  });\n  window.addEventListener("test", Mb, Mb);\n  window.removeEventListener("test", Mb, Mb);\n} catch (a) {\n  Lb = !1;\n}\nfunction Nb(a, b, c, d, e, f, g, h, k) {\n  var l = Array.prototype.slice.call(arguments, 3);\n  try {\n    b.apply(c, l);\n  } catch (m) {\n    this.onError(m);\n  }\n}\nvar Ob = !1,\n  Pb = null,\n  Qb = !1,\n  Rb = null,\n  Sb = {\n    onError: function (a) {\n      Ob = !0;\n      Pb = a;\n    }\n  };\nfunction Tb(a, b, c, d, e, f, g, h, k) {\n  Ob = !1;\n  Pb = null;\n  Nb.apply(Sb, arguments);\n}\nfunction Ub(a, b, c, d, e, f, g, h, k) {\n  Tb.apply(this, arguments);\n  if (Ob) {\n    if (Ob) {\n      var l = Pb;\n      Ob = !1;\n      Pb = null;\n    } else throw Error(p(198));\n    Qb || (Qb = !0, Rb = l);\n  }\n}\nfunction Vb(a) {\n  var b = a,\n    c = a;\n  if (a.alternate) for (; b.return;) b = b.return;else {\n    a = b;\n    do b = a, 0 !== (b.flags & 4098) && (c = b.return), a = b.return; while (a);\n  }\n  return 3 === b.tag ? c : null;\n}\nfunction Wb(a) {\n  if (13 === a.tag) {\n    var b = a.memoizedState;\n    null === b && (a = a.alternate, null !== a && (b = a.memoizedState));\n    if (null !== b) return b.dehydrated;\n  }\n  return null;\n}\nfunction Xb(a) {\n  if (Vb(a) !== a) throw Error(p(188));\n}\nfunction Yb(a) {\n  var b = a.alternate;\n  if (!b) {\n    b = Vb(a);\n    if (null === b) throw Error(p(188));\n    return b !== a ? null : a;\n  }\n  for (var c = a, d = b;;) {\n    var e = c.return;\n    if (null === e) break;\n    var f = e.alternate;\n    if (null === f) {\n      d = e.return;\n      if (null !== d) {\n        c = d;\n        continue;\n      }\n      break;\n    }\n    if (e.child === f.child) {\n      for (f = e.child; f;) {\n        if (f === c) return Xb(e), a;\n        if (f === d) return Xb(e), b;\n        f = f.sibling;\n      }\n      throw Error(p(188));\n    }\n    if (c.return !== d.return) c = e, d = f;else {\n      for (var g = !1, h = e.child; h;) {\n        if (h === c) {\n          g = !0;\n          c = e;\n          d = f;\n          break;\n        }\n        if (h === d) {\n          g = !0;\n          d = e;\n          c = f;\n          break;\n        }\n        h = h.sibling;\n      }\n      if (!g) {\n        for (h = f.child; h;) {\n          if (h === c) {\n            g = !0;\n            c = f;\n            d = e;\n            break;\n          }\n          if (h === d) {\n            g = !0;\n            d = f;\n            c = e;\n            break;\n          }\n          h = h.sibling;\n        }\n        if (!g) throw Error(p(189));\n      }\n    }\n    if (c.alternate !== d) throw Error(p(190));\n  }\n  if (3 !== c.tag) throw Error(p(188));\n  return c.stateNode.current === c ? a : b;\n}\nfunction Zb(a) {\n  a = Yb(a);\n  return null !== a ? $b(a) : null;\n}\nfunction $b(a) {\n  if (5 === a.tag || 6 === a.tag) return a;\n  for (a = a.child; null !== a;) {\n    var b = $b(a);\n    if (null !== b) return b;\n    a = a.sibling;\n  }\n  return null;\n}\nvar ac = ca.unstable_scheduleCallback,\n  bc = ca.unstable_cancelCallback,\n  cc = ca.unstable_shouldYield,\n  dc = ca.unstable_requestPaint,\n  B = ca.unstable_now,\n  ec = ca.unstable_getCurrentPriorityLevel,\n  fc = ca.unstable_ImmediatePriority,\n  gc = ca.unstable_UserBlockingPriority,\n  hc = ca.unstable_NormalPriority,\n  ic = ca.unstable_LowPriority,\n  jc = ca.unstable_IdlePriority,\n  kc = null,\n  lc = null;\nfunction mc(a) {\n  if (lc && "function" === typeof lc.onCommitFiberRoot) try {\n    lc.onCommitFiberRoot(kc, a, void 0, 128 === (a.current.flags & 128));\n  } catch (b) {}\n}\nvar oc = Math.clz32 ? Math.clz32 : nc,\n  pc = Math.log,\n  qc = Math.LN2;\nfunction nc(a) {\n  a >>>= 0;\n  return 0 === a ? 32 : 31 - (pc(a) / qc | 0) | 0;\n}\nvar rc = 64,\n  sc = 4194304;\nfunction tc(a) {\n  switch (a & -a) {\n    case 1:\n      return 1;\n    case 2:\n      return 2;\n    case 4:\n      return 4;\n    case 8:\n      return 8;\n    case 16:\n      return 16;\n    case 32:\n      return 32;\n    case 64:\n    case 128:\n    case 256:\n    case 512:\n    case 1024:\n    case 2048:\n    case 4096:\n    case 8192:\n    case 16384:\n    case 32768:\n    case 65536:\n    case 131072:\n    case 262144:\n    case 524288:\n    case 1048576:\n    case 2097152:\n      return a & 4194240;\n    case 4194304:\n    case 8388608:\n    case 16777216:\n    case 33554432:\n    case 67108864:\n      return a & 130023424;\n    case 134217728:\n      return 134217728;\n    case 268435456:\n      return 268435456;\n    case 536870912:\n      return 536870912;\n    case 1073741824:\n      return 1073741824;\n    default:\n      return a;\n  }\n}\nfunction uc(a, b) {\n  var c = a.pendingLanes;\n  if (0 === c) return 0;\n  var d = 0,\n    e = a.suspendedLanes,\n    f = a.pingedLanes,\n    g = c & 268435455;\n  if (0 !== g) {\n    var h = g & ~e;\n    0 !== h ? d = tc(h) : (f &= g, 0 !== f && (d = tc(f)));\n  } else g = c & ~e, 0 !== g ? d = tc(g) : 0 !== f && (d = tc(f));\n  if (0 === d) return 0;\n  if (0 !== b && b !== d && 0 === (b & e) && (e = d & -d, f = b & -b, e >= f || 16 === e && 0 !== (f & 4194240))) return b;\n  0 !== (d & 4) && (d |= c & 16);\n  b = a.entangledLanes;\n  if (0 !== b) for (a = a.entanglements, b &= d; 0 < b;) c = 31 - oc(b), e = 1 << c, d |= a[c], b &= ~e;\n  return d;\n}\nfunction vc(a, b) {\n  switch (a) {\n    case 1:\n    case 2:\n    case 4:\n      return b + 250;\n    case 8:\n    case 16:\n    case 32:\n    case 64:\n    case 128:\n    case 256:\n    case 512:\n    case 1024:\n    case 2048:\n    case 4096:\n    case 8192:\n    case 16384:\n    case 32768:\n    case 65536:\n    case 131072:\n    case 262144:\n    case 524288:\n    case 1048576:\n    case 2097152:\n      return b + 5E3;\n    case 4194304:\n    case 8388608:\n    case 16777216:\n    case 33554432:\n    case 67108864:\n      return -1;\n    case 134217728:\n    case 268435456:\n    case 536870912:\n    case 1073741824:\n      return -1;\n    default:\n      return -1;\n  }\n}\nfunction wc(a, b) {\n  for (var c = a.suspendedLanes, d = a.pingedLanes, e = a.expirationTimes, f = a.pendingLanes; 0 < f;) {\n    var g = 31 - oc(f),\n      h = 1 << g,\n      k = e[g];\n    if (-1 === k) {\n      if (0 === (h & c) || 0 !== (h & d)) e[g] = vc(h, b);\n    } else k <= b && (a.expiredLanes |= h);\n    f &= ~h;\n  }\n}\nfunction xc(a) {\n  a = a.pendingLanes & -1073741825;\n  return 0 !== a ? a : a & 1073741824 ? 1073741824 : 0;\n}\nfunction yc() {\n  var a = rc;\n  rc <<= 1;\n  0 === (rc & 4194240) && (rc = 64);\n  return a;\n}\nfunction zc(a) {\n  for (var b = [], c = 0; 31 > c; c++) b.push(a);\n  return b;\n}\nfunction Ac(a, b, c) {\n  a.pendingLanes |= b;\n  536870912 !== b && (a.suspendedLanes = 0, a.pingedLanes = 0);\n  a = a.eventTimes;\n  b = 31 - oc(b);\n  a[b] = c;\n}\nfunction Bc(a, b) {\n  var c = a.pendingLanes & ~b;\n  a.pendingLanes = b;\n  a.suspendedLanes = 0;\n  a.pingedLanes = 0;\n  a.expiredLanes &= b;\n  a.mutableReadLanes &= b;\n  a.entangledLanes &= b;\n  b = a.entanglements;\n  var d = a.eventTimes;\n  for (a = a.expirationTimes; 0 < c;) {\n    var e = 31 - oc(c),\n      f = 1 << e;\n    b[e] = 0;\n    d[e] = -1;\n    a[e] = -1;\n    c &= ~f;\n  }\n}\nfunction Cc(a, b) {\n  var c = a.entangledLanes |= b;\n  for (a = a.entanglements; c;) {\n    var d = 31 - oc(c),\n      e = 1 << d;\n    e & b | a[d] & b && (a[d] |= b);\n    c &= ~e;\n  }\n}\nvar C = 0;\nfunction Dc(a) {\n  a &= -a;\n  return 1 < a ? 4 < a ? 0 !== (a & 268435455) ? 16 : 536870912 : 4 : 1;\n}\nvar Ec,\n  Fc,\n  Gc,\n  Hc,\n  Ic,\n  Jc = !1,\n  Kc = [],\n  Lc = null,\n  Mc = null,\n  Nc = null,\n  Oc = new Map(),\n  Pc = new Map(),\n  Qc = [],\n  Rc = "mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");\nfunction Sc(a, b) {\n  switch (a) {\n    case "focusin":\n    case "focusout":\n      Lc = null;\n      break;\n    case "dragenter":\n    case "dragleave":\n      Mc = null;\n      break;\n    case "mouseover":\n    case "mouseout":\n      Nc = null;\n      break;\n    case "pointerover":\n    case "pointerout":\n      Oc.delete(b.pointerId);\n      break;\n    case "gotpointercapture":\n    case "lostpointercapture":\n      Pc.delete(b.pointerId);\n  }\n}\nfunction Tc(a, b, c, d, e, f) {\n  if (null === a || a.nativeEvent !== f) return a = {\n    blockedOn: b,\n    domEventName: c,\n    eventSystemFlags: d,\n    nativeEvent: f,\n    targetContainers: [e]\n  }, null !== b && (b = Cb(b), null !== b && Fc(b)), a;\n  a.eventSystemFlags |= d;\n  b = a.targetContainers;\n  null !== e && -1 === b.indexOf(e) && b.push(e);\n  return a;\n}\nfunction Uc(a, b, c, d, e) {\n  switch (b) {\n    case "focusin":\n      return Lc = Tc(Lc, a, b, c, d, e), !0;\n    case "dragenter":\n      return Mc = Tc(Mc, a, b, c, d, e), !0;\n    case "mouseover":\n      return Nc = Tc(Nc, a, b, c, d, e), !0;\n    case "pointerover":\n      var f = e.pointerId;\n      Oc.set(f, Tc(Oc.get(f) || null, a, b, c, d, e));\n      return !0;\n    case "gotpointercapture":\n      return f = e.pointerId, Pc.set(f, Tc(Pc.get(f) || null, a, b, c, d, e)), !0;\n  }\n  return !1;\n}\nfunction Vc(a) {\n  var b = Wc(a.target);\n  if (null !== b) {\n    var c = Vb(b);\n    if (null !== c) if (b = c.tag, 13 === b) {\n      if (b = Wb(c), null !== b) {\n        a.blockedOn = b;\n        Ic(a.priority, function () {\n          Gc(c);\n        });\n        return;\n      }\n    } else if (3 === b && c.stateNode.current.memoizedState.isDehydrated) {\n      a.blockedOn = 3 === c.tag ? c.stateNode.containerInfo : null;\n      return;\n    }\n  }\n  a.blockedOn = null;\n}\nfunction Xc(a) {\n  if (null !== a.blockedOn) return !1;\n  for (var b = a.targetContainers; 0 < b.length;) {\n    var c = Yc(a.domEventName, a.eventSystemFlags, b[0], a.nativeEvent);\n    if (null === c) {\n      c = a.nativeEvent;\n      var d = new c.constructor(c.type, c);\n      wb = d;\n      c.target.dispatchEvent(d);\n      wb = null;\n    } else return b = Cb(c), null !== b && Fc(b), a.blockedOn = c, !1;\n    b.shift();\n  }\n  return !0;\n}\nfunction Zc(a, b, c) {\n  Xc(a) && c.delete(b);\n}\nfunction $c() {\n  Jc = !1;\n  null !== Lc && Xc(Lc) && (Lc = null);\n  null !== Mc && Xc(Mc) && (Mc = null);\n  null !== Nc && Xc(Nc) && (Nc = null);\n  Oc.forEach(Zc);\n  Pc.forEach(Zc);\n}\nfunction ad(a, b) {\n  a.blockedOn === b && (a.blockedOn = null, Jc || (Jc = !0, ca.unstable_scheduleCallback(ca.unstable_NormalPriority, $c)));\n}\nfunction bd(a) {\n  function b(b) {\n    return ad(b, a);\n  }\n  if (0 < Kc.length) {\n    ad(Kc[0], a);\n    for (var c = 1; c < Kc.length; c++) {\n      var d = Kc[c];\n      d.blockedOn === a && (d.blockedOn = null);\n    }\n  }\n  null !== Lc && ad(Lc, a);\n  null !== Mc && ad(Mc, a);\n  null !== Nc && ad(Nc, a);\n  Oc.forEach(b);\n  Pc.forEach(b);\n  for (c = 0; c < Qc.length; c++) d = Qc[c], d.blockedOn === a && (d.blockedOn = null);\n  for (; 0 < Qc.length && (c = Qc[0], null === c.blockedOn);) Vc(c), null === c.blockedOn && Qc.shift();\n}\nvar cd = ua.ReactCurrentBatchConfig,\n  dd = !0;\nfunction ed(a, b, c, d) {\n  var e = C,\n    f = cd.transition;\n  cd.transition = null;\n  try {\n    C = 1, fd(a, b, c, d);\n  } finally {\n    C = e, cd.transition = f;\n  }\n}\nfunction gd(a, b, c, d) {\n  var e = C,\n    f = cd.transition;\n  cd.transition = null;\n  try {\n    C = 4, fd(a, b, c, d);\n  } finally {\n    C = e, cd.transition = f;\n  }\n}\nfunction fd(a, b, c, d) {\n  if (dd) {\n    var e = Yc(a, b, c, d);\n    if (null === e) hd(a, b, d, id, c), Sc(a, d);else if (Uc(e, a, b, c, d)) d.stopPropagation();else if (Sc(a, d), b & 4 && -1 < Rc.indexOf(a)) {\n      for (; null !== e;) {\n        var f = Cb(e);\n        null !== f && Ec(f);\n        f = Yc(a, b, c, d);\n        null === f && hd(a, b, d, id, c);\n        if (f === e) break;\n        e = f;\n      }\n      null !== e && d.stopPropagation();\n    } else hd(a, b, d, null, c);\n  }\n}\nvar id = null;\nfunction Yc(a, b, c, d) {\n  id = null;\n  a = xb(d);\n  a = Wc(a);\n  if (null !== a) if (b = Vb(a), null === b) a = null;else if (c = b.tag, 13 === c) {\n    a = Wb(b);\n    if (null !== a) return a;\n    a = null;\n  } else if (3 === c) {\n    if (b.stateNode.current.memoizedState.isDehydrated) return 3 === b.tag ? b.stateNode.containerInfo : null;\n    a = null;\n  } else b !== a && (a = null);\n  id = a;\n  return null;\n}\nfunction jd(a) {\n  switch (a) {\n    case "cancel":\n    case "click":\n    case "close":\n    case "contextmenu":\n    case "copy":\n    case "cut":\n    case "auxclick":\n    case "dblclick":\n    case "dragend":\n    case "dragstart":\n    case "drop":\n    case "focusin":\n    case "focusout":\n    case "input":\n    case "invalid":\n    case "keydown":\n    case "keypress":\n    case "keyup":\n    case "mousedown":\n    case "mouseup":\n    case "paste":\n    case "pause":\n    case "play":\n    case "pointercancel":\n    case "pointerdown":\n    case "pointerup":\n    case "ratechange":\n    case "reset":\n    case "resize":\n    case "seeked":\n    case "submit":\n    case "touchcancel":\n    case "touchend":\n    case "touchstart":\n    case "volumechange":\n    case "change":\n    case "selectionchange":\n    case "textInput":\n    case "compositionstart":\n    case "compositionend":\n    case "compositionupdate":\n    case "beforeblur":\n    case "afterblur":\n    case "beforeinput":\n    case "blur":\n    case "fullscreenchange":\n    case "focus":\n    case "hashchange":\n    case "popstate":\n    case "select":\n    case "selectstart":\n      return 1;\n    case "drag":\n    case "dragenter":\n    case "dragexit":\n    case "dragleave":\n    case "dragover":\n    case "mousemove":\n    case "mouseout":\n    case "mouseover":\n    case "pointermove":\n    case "pointerout":\n    case "pointerover":\n    case "scroll":\n    case "toggle":\n    case "touchmove":\n    case "wheel":\n    case "mouseenter":\n    case "mouseleave":\n    case "pointerenter":\n    case "pointerleave":\n      return 4;\n    case "message":\n      switch (ec()) {\n        case fc:\n          return 1;\n        case gc:\n          return 4;\n        case hc:\n        case ic:\n          return 16;\n        case jc:\n          return 536870912;\n        default:\n          return 16;\n      }\n    default:\n      return 16;\n  }\n}\nvar kd = null,\n  ld = null,\n  md = null;\nfunction nd() {\n  if (md) return md;\n  var a,\n    b = ld,\n    c = b.length,\n    d,\n    e = "value" in kd ? kd.value : kd.textContent,\n    f = e.length;\n  for (a = 0; a < c && b[a] === e[a]; a++);\n  var g = c - a;\n  for (d = 1; d <= g && b[c - d] === e[f - d]; d++);\n  return md = e.slice(a, 1 < d ? 1 - d : void 0);\n}\nfunction od(a) {\n  var b = a.keyCode;\n  "charCode" in a ? (a = a.charCode, 0 === a && 13 === b && (a = 13)) : a = b;\n  10 === a && (a = 13);\n  return 32 <= a || 13 === a ? a : 0;\n}\nfunction pd() {\n  return !0;\n}\nfunction qd() {\n  return !1;\n}\nfunction rd(a) {\n  function b(b, d, e, f, g) {\n    this._reactName = b;\n    this._targetInst = e;\n    this.type = d;\n    this.nativeEvent = f;\n    this.target = g;\n    this.currentTarget = null;\n    for (var c in a) a.hasOwnProperty(c) && (b = a[c], this[c] = b ? b(f) : f[c]);\n    this.isDefaultPrevented = (null != f.defaultPrevented ? f.defaultPrevented : !1 === f.returnValue) ? pd : qd;\n    this.isPropagationStopped = qd;\n    return this;\n  }\n  A(b.prototype, {\n    preventDefault: function () {\n      this.defaultPrevented = !0;\n      var a = this.nativeEvent;\n      a && (a.preventDefault ? a.preventDefault() : "unknown" !== typeof a.returnValue && (a.returnValue = !1), this.isDefaultPrevented = pd);\n    },\n    stopPropagation: function () {\n      var a = this.nativeEvent;\n      a && (a.stopPropagation ? a.stopPropagation() : "unknown" !== typeof a.cancelBubble && (a.cancelBubble = !0), this.isPropagationStopped = pd);\n    },\n    persist: function () {},\n    isPersistent: pd\n  });\n  return b;\n}\nvar sd = {\n    eventPhase: 0,\n    bubbles: 0,\n    cancelable: 0,\n    timeStamp: function (a) {\n      return a.timeStamp || Date.now();\n    },\n    defaultPrevented: 0,\n    isTrusted: 0\n  },\n  td = rd(sd),\n  ud = A({}, sd, {\n    view: 0,\n    detail: 0\n  }),\n  vd = rd(ud),\n  wd,\n  xd,\n  yd,\n  Ad = A({}, ud, {\n    screenX: 0,\n    screenY: 0,\n    clientX: 0,\n    clientY: 0,\n    pageX: 0,\n    pageY: 0,\n    ctrlKey: 0,\n    shiftKey: 0,\n    altKey: 0,\n    metaKey: 0,\n    getModifierState: zd,\n    button: 0,\n    buttons: 0,\n    relatedTarget: function (a) {\n      return void 0 === a.relatedTarget ? a.fromElement === a.srcElement ? a.toElement : a.fromElement : a.relatedTarget;\n    },\n    movementX: function (a) {\n      if ("movementX" in a) return a.movementX;\n      a !== yd && (yd && "mousemove" === a.type ? (wd = a.screenX - yd.screenX, xd = a.screenY - yd.screenY) : xd = wd = 0, yd = a);\n      return wd;\n    },\n    movementY: function (a) {\n      return "movementY" in a ? a.movementY : xd;\n    }\n  }),\n  Bd = rd(Ad),\n  Cd = A({}, Ad, {\n    dataTransfer: 0\n  }),\n  Dd = rd(Cd),\n  Ed = A({}, ud, {\n    relatedTarget: 0\n  }),\n  Fd = rd(Ed),\n  Gd = A({}, sd, {\n    animationName: 0,\n    elapsedTime: 0,\n    pseudoElement: 0\n  }),\n  Hd = rd(Gd),\n  Id = A({}, sd, {\n    clipboardData: function (a) {\n      return "clipboardData" in a ? a.clipboardData : window.clipboardData;\n    }\n  }),\n  Jd = rd(Id),\n  Kd = A({}, sd, {\n    data: 0\n  }),\n  Ld = rd(Kd),\n  Md = {\n    Esc: "Escape",\n    Spacebar: " ",\n    Left: "ArrowLeft",\n    Up: "ArrowUp",\n    Right: "ArrowRight",\n    Down: "ArrowDown",\n    Del: "Delete",\n    Win: "OS",\n    Menu: "ContextMenu",\n    Apps: "ContextMenu",\n    Scroll: "ScrollLock",\n    MozPrintableKey: "Unidentified"\n  },\n  Nd = {\n    8: "Backspace",\n    9: "Tab",\n    12: "Clear",\n    13: "Enter",\n    16: "Shift",\n    17: "Control",\n    18: "Alt",\n    19: "Pause",\n    20: "CapsLock",\n    27: "Escape",\n    32: " ",\n    33: "PageUp",\n    34: "PageDown",\n    35: "End",\n    36: "Home",\n    37: "ArrowLeft",\n    38: "ArrowUp",\n    39: "ArrowRight",\n    40: "ArrowDown",\n    45: "Insert",\n    46: "Delete",\n    112: "F1",\n    113: "F2",\n    114: "F3",\n    115: "F4",\n    116: "F5",\n    117: "F6",\n    118: "F7",\n    119: "F8",\n    120: "F9",\n    121: "F10",\n    122: "F11",\n    123: "F12",\n    144: "NumLock",\n    145: "ScrollLock",\n    224: "Meta"\n  },\n  Od = {\n    Alt: "altKey",\n    Control: "ctrlKey",\n    Meta: "metaKey",\n    Shift: "shiftKey"\n  };\nfunction Pd(a) {\n  var b = this.nativeEvent;\n  return b.getModifierState ? b.getModifierState(a) : (a = Od[a]) ? !!b[a] : !1;\n}\nfunction zd() {\n  return Pd;\n}\nvar Qd = A({}, ud, {\n    key: function (a) {\n      if (a.key) {\n        var b = Md[a.key] || a.key;\n        if ("Unidentified" !== b) return b;\n      }\n      return "keypress" === a.type ? (a = od(a), 13 === a ? "Enter" : String.fromCharCode(a)) : "keydown" === a.type || "keyup" === a.type ? Nd[a.keyCode] || "Unidentified" : "";\n    },\n    code: 0,\n    location: 0,\n    ctrlKey: 0,\n    shiftKey: 0,\n    altKey: 0,\n    metaKey: 0,\n    repeat: 0,\n    locale: 0,\n    getModifierState: zd,\n    charCode: function (a) {\n      return "keypress" === a.type ? od(a) : 0;\n    },\n    keyCode: function (a) {\n      return "keydown" === a.type || "keyup" === a.type ? a.keyCode : 0;\n    },\n    which: function (a) {\n      return "keypress" === a.type ? od(a) : "keydown" === a.type || "keyup" === a.type ? a.keyCode : 0;\n    }\n  }),\n  Rd = rd(Qd),\n  Sd = A({}, Ad, {\n    pointerId: 0,\n    width: 0,\n    height: 0,\n    pressure: 0,\n    tangentialPressure: 0,\n    tiltX: 0,\n    tiltY: 0,\n    twist: 0,\n    pointerType: 0,\n    isPrimary: 0\n  }),\n  Td = rd(Sd),\n  Ud = A({}, ud, {\n    touches: 0,\n    targetTouches: 0,\n    changedTouches: 0,\n    altKey: 0,\n    metaKey: 0,\n    ctrlKey: 0,\n    shiftKey: 0,\n    getModifierState: zd\n  }),\n  Vd = rd(Ud),\n  Wd = A({}, sd, {\n    propertyName: 0,\n    elapsedTime: 0,\n    pseudoElement: 0\n  }),\n  Xd = rd(Wd),\n  Yd = A({}, Ad, {\n    deltaX: function (a) {\n      return "deltaX" in a ? a.deltaX : "wheelDeltaX" in a ? -a.wheelDeltaX : 0;\n    },\n    deltaY: function (a) {\n      return "deltaY" in a ? a.deltaY : "wheelDeltaY" in a ? -a.wheelDeltaY : "wheelDelta" in a ? -a.wheelDelta : 0;\n    },\n    deltaZ: 0,\n    deltaMode: 0\n  }),\n  Zd = rd(Yd),\n  $d = [9, 13, 27, 32],\n  ae = ia && "CompositionEvent" in window,\n  be = null;\nia && "documentMode" in document && (be = document.documentMode);\nvar ce = ia && "TextEvent" in window && !be,\n  de = ia && (!ae || be && 8 < be && 11 >= be),\n  ee = String.fromCharCode(32),\n  fe = !1;\nfunction ge(a, b) {\n  switch (a) {\n    case "keyup":\n      return -1 !== $d.indexOf(b.keyCode);\n    case "keydown":\n      return 229 !== b.keyCode;\n    case "keypress":\n    case "mousedown":\n    case "focusout":\n      return !0;\n    default:\n      return !1;\n  }\n}\nfunction he(a) {\n  a = a.detail;\n  return "object" === typeof a && "data" in a ? a.data : null;\n}\nvar ie = !1;\nfunction je(a, b) {\n  switch (a) {\n    case "compositionend":\n      return he(b);\n    case "keypress":\n      if (32 !== b.which) return null;\n      fe = !0;\n      return ee;\n    case "textInput":\n      return a = b.data, a === ee && fe ? null : a;\n    default:\n      return null;\n  }\n}\nfunction ke(a, b) {\n  if (ie) return "compositionend" === a || !ae && ge(a, b) ? (a = nd(), md = ld = kd = null, ie = !1, a) : null;\n  switch (a) {\n    case "paste":\n      return null;\n    case "keypress":\n      if (!(b.ctrlKey || b.altKey || b.metaKey) || b.ctrlKey && b.altKey) {\n        if (b.char && 1 < b.char.length) return b.char;\n        if (b.which) return String.fromCharCode(b.which);\n      }\n      return null;\n    case "compositionend":\n      return de && "ko" !== b.locale ? null : b.data;\n    default:\n      return null;\n  }\n}\nvar le = {\n  color: !0,\n  date: !0,\n  datetime: !0,\n  "datetime-local": !0,\n  email: !0,\n  month: !0,\n  number: !0,\n  password: !0,\n  range: !0,\n  search: !0,\n  tel: !0,\n  text: !0,\n  time: !0,\n  url: !0,\n  week: !0\n};\nfunction me(a) {\n  var b = a && a.nodeName && a.nodeName.toLowerCase();\n  return "input" === b ? !!le[a.type] : "textarea" === b ? !0 : !1;\n}\nfunction ne(a, b, c, d) {\n  Eb(d);\n  b = oe(b, "onChange");\n  0 < b.length && (c = new td("onChange", "change", null, c, d), a.push({\n    event: c,\n    listeners: b\n  }));\n}\nvar pe = null,\n  qe = null;\nfunction re(a) {\n  se(a, 0);\n}\nfunction te(a) {\n  var b = ue(a);\n  if (Wa(b)) return a;\n}\nfunction ve(a, b) {\n  if ("change" === a) return b;\n}\nvar we = !1;\nif (ia) {\n  var xe;\n  if (ia) {\n    var ye = ("oninput" in document);\n    if (!ye) {\n      var ze = document.createElement("div");\n      ze.setAttribute("oninput", "return;");\n      ye = "function" === typeof ze.oninput;\n    }\n    xe = ye;\n  } else xe = !1;\n  we = xe && (!document.documentMode || 9 < document.documentMode);\n}\nfunction Ae() {\n  pe && (pe.detachEvent("onpropertychange", Be), qe = pe = null);\n}\nfunction Be(a) {\n  if ("value" === a.propertyName && te(qe)) {\n    var b = [];\n    ne(b, qe, a, xb(a));\n    Jb(re, b);\n  }\n}\nfunction Ce(a, b, c) {\n  "focusin" === a ? (Ae(), pe = b, qe = c, pe.attachEvent("onpropertychange", Be)) : "focusout" === a && Ae();\n}\nfunction De(a) {\n  if ("selectionchange" === a || "keyup" === a || "keydown" === a) return te(qe);\n}\nfunction Ee(a, b) {\n  if ("click" === a) return te(b);\n}\nfunction Fe(a, b) {\n  if ("input" === a || "change" === a) return te(b);\n}\nfunction Ge(a, b) {\n  return a === b && (0 !== a || 1 / a === 1 / b) || a !== a && b !== b;\n}\nvar He = "function" === typeof Object.is ? Object.is : Ge;\nfunction Ie(a, b) {\n  if (He(a, b)) return !0;\n  if ("object" !== typeof a || null === a || "object" !== typeof b || null === b) return !1;\n  var c = Object.keys(a),\n    d = Object.keys(b);\n  if (c.length !== d.length) return !1;\n  for (d = 0; d < c.length; d++) {\n    var e = c[d];\n    if (!ja.call(b, e) || !He(a[e], b[e])) return !1;\n  }\n  return !0;\n}\nfunction Je(a) {\n  for (; a && a.firstChild;) a = a.firstChild;\n  return a;\n}\nfunction Ke(a, b) {\n  var c = Je(a);\n  a = 0;\n  for (var d; c;) {\n    if (3 === c.nodeType) {\n      d = a + c.textContent.length;\n      if (a <= b && d >= b) return {\n        node: c,\n        offset: b - a\n      };\n      a = d;\n    }\n    a: {\n      for (; c;) {\n        if (c.nextSibling) {\n          c = c.nextSibling;\n          break a;\n        }\n        c = c.parentNode;\n      }\n      c = void 0;\n    }\n    c = Je(c);\n  }\n}\nfunction Le(a, b) {\n  return a && b ? a === b ? !0 : a && 3 === a.nodeType ? !1 : b && 3 === b.nodeType ? Le(a, b.parentNode) : "contains" in a ? a.contains(b) : a.compareDocumentPosition ? !!(a.compareDocumentPosition(b) & 16) : !1 : !1;\n}\nfunction Me() {\n  for (var a = window, b = Xa(); b instanceof a.HTMLIFrameElement;) {\n    try {\n      var c = "string" === typeof b.contentWindow.location.href;\n    } catch (d) {\n      c = !1;\n    }\n    if (c) a = b.contentWindow;else break;\n    b = Xa(a.document);\n  }\n  return b;\n}\nfunction Ne(a) {\n  var b = a && a.nodeName && a.nodeName.toLowerCase();\n  return b && ("input" === b && ("text" === a.type || "search" === a.type || "tel" === a.type || "url" === a.type || "password" === a.type) || "textarea" === b || "true" === a.contentEditable);\n}\nfunction Oe(a) {\n  var b = Me(),\n    c = a.focusedElem,\n    d = a.selectionRange;\n  if (b !== c && c && c.ownerDocument && Le(c.ownerDocument.documentElement, c)) {\n    if (null !== d && Ne(c)) if (b = d.start, a = d.end, void 0 === a && (a = b), "selectionStart" in c) c.selectionStart = b, c.selectionEnd = Math.min(a, c.value.length);else if (a = (b = c.ownerDocument || document) && b.defaultView || window, a.getSelection) {\n      a = a.getSelection();\n      var e = c.textContent.length,\n        f = Math.min(d.start, e);\n      d = void 0 === d.end ? f : Math.min(d.end, e);\n      !a.extend && f > d && (e = d, d = f, f = e);\n      e = Ke(c, f);\n      var g = Ke(c, d);\n      e && g && (1 !== a.rangeCount || a.anchorNode !== e.node || a.anchorOffset !== e.offset || a.focusNode !== g.node || a.focusOffset !== g.offset) && (b = b.createRange(), b.setStart(e.node, e.offset), a.removeAllRanges(), f > d ? (a.addRange(b), a.extend(g.node, g.offset)) : (b.setEnd(g.node, g.offset), a.addRange(b)));\n    }\n    b = [];\n    for (a = c; a = a.parentNode;) 1 === a.nodeType && b.push({\n      element: a,\n      left: a.scrollLeft,\n      top: a.scrollTop\n    });\n    "function" === typeof c.focus && c.focus();\n    for (c = 0; c < b.length; c++) a = b[c], a.element.scrollLeft = a.left, a.element.scrollTop = a.top;\n  }\n}\nvar Pe = ia && "documentMode" in document && 11 >= document.documentMode,\n  Qe = null,\n  Re = null,\n  Se = null,\n  Te = !1;\nfunction Ue(a, b, c) {\n  var d = c.window === c ? c.document : 9 === c.nodeType ? c : c.ownerDocument;\n  Te || null == Qe || Qe !== Xa(d) || (d = Qe, "selectionStart" in d && Ne(d) ? d = {\n    start: d.selectionStart,\n    end: d.selectionEnd\n  } : (d = (d.ownerDocument && d.ownerDocument.defaultView || window).getSelection(), d = {\n    anchorNode: d.anchorNode,\n    anchorOffset: d.anchorOffset,\n    focusNode: d.focusNode,\n    focusOffset: d.focusOffset\n  }), Se && Ie(Se, d) || (Se = d, d = oe(Re, "onSelect"), 0 < d.length && (b = new td("onSelect", "select", null, b, c), a.push({\n    event: b,\n    listeners: d\n  }), b.target = Qe)));\n}\nfunction Ve(a, b) {\n  var c = {};\n  c[a.toLowerCase()] = b.toLowerCase();\n  c["Webkit" + a] = "webkit" + b;\n  c["Moz" + a] = "moz" + b;\n  return c;\n}\nvar We = {\n    animationend: Ve("Animation", "AnimationEnd"),\n    animationiteration: Ve("Animation", "AnimationIteration"),\n    animationstart: Ve("Animation", "AnimationStart"),\n    transitionend: Ve("Transition", "TransitionEnd")\n  },\n  Xe = {},\n  Ye = {};\nia && (Ye = document.createElement("div").style, "AnimationEvent" in window || (delete We.animationend.animation, delete We.animationiteration.animation, delete We.animationstart.animation), "TransitionEvent" in window || delete We.transitionend.transition);\nfunction Ze(a) {\n  if (Xe[a]) return Xe[a];\n  if (!We[a]) return a;\n  var b = We[a],\n    c;\n  for (c in b) if (b.hasOwnProperty(c) && c in Ye) return Xe[a] = b[c];\n  return a;\n}\nvar $e = Ze("animationend"),\n  af = Ze("animationiteration"),\n  bf = Ze("animationstart"),\n  cf = Ze("transitionend"),\n  df = new Map(),\n  ef = "abort auxClick cancel canPlay canPlayThrough click close contextMenu copy cut drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error gotPointerCapture input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart lostPointerCapture mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing pointerCancel pointerDown pointerMove pointerOut pointerOver pointerUp progress rateChange reset resize seeked seeking stalled submit suspend timeUpdate touchCancel touchEnd touchStart volumeChange scroll toggle touchMove waiting wheel".split(" ");\nfunction ff(a, b) {\n  df.set(a, b);\n  fa(b, [a]);\n}\nfor (var gf = 0; gf < ef.length; gf++) {\n  var hf = ef[gf],\n    jf = hf.toLowerCase(),\n    kf = hf[0].toUpperCase() + hf.slice(1);\n  ff(jf, "on" + kf);\n}\nff($e, "onAnimationEnd");\nff(af, "onAnimationIteration");\nff(bf, "onAnimationStart");\nff("dblclick", "onDoubleClick");\nff("focusin", "onFocus");\nff("focusout", "onBlur");\nff(cf, "onTransitionEnd");\nha("onMouseEnter", ["mouseout", "mouseover"]);\nha("onMouseLeave", ["mouseout", "mouseover"]);\nha("onPointerEnter", ["pointerout", "pointerover"]);\nha("onPointerLeave", ["pointerout", "pointerover"]);\nfa("onChange", "change click focusin focusout input keydown keyup selectionchange".split(" "));\nfa("onSelect", "focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" "));\nfa("onBeforeInput", ["compositionend", "keypress", "textInput", "paste"]);\nfa("onCompositionEnd", "compositionend focusout keydown keypress keyup mousedown".split(" "));\nfa("onCompositionStart", "compositionstart focusout keydown keypress keyup mousedown".split(" "));\nfa("onCompositionUpdate", "compositionupdate focusout keydown keypress keyup mousedown".split(" "));\nvar lf = "abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange resize seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),\n  mf = new Set("cancel close invalid load scroll toggle".split(" ").concat(lf));\nfunction nf(a, b, c) {\n  var d = a.type || "unknown-event";\n  a.currentTarget = c;\n  Ub(d, b, void 0, a);\n  a.currentTarget = null;\n}\nfunction se(a, b) {\n  b = 0 !== (b & 4);\n  for (var c = 0; c < a.length; c++) {\n    var d = a[c],\n      e = d.event;\n    d = d.listeners;\n    a: {\n      var f = void 0;\n      if (b) for (var g = d.length - 1; 0 <= g; g--) {\n        var h = d[g],\n          k = h.instance,\n          l = h.currentTarget;\n        h = h.listener;\n        if (k !== f && e.isPropagationStopped()) break a;\n        nf(e, h, l);\n        f = k;\n      } else for (g = 0; g < d.length; g++) {\n        h = d[g];\n        k = h.instance;\n        l = h.currentTarget;\n        h = h.listener;\n        if (k !== f && e.isPropagationStopped()) break a;\n        nf(e, h, l);\n        f = k;\n      }\n    }\n  }\n  if (Qb) throw a = Rb, Qb = !1, Rb = null, a;\n}\nfunction D(a, b) {\n  var c = b[of];\n  void 0 === c && (c = b[of] = new Set());\n  var d = a + "__bubble";\n  c.has(d) || (pf(b, a, 2, !1), c.add(d));\n}\nfunction qf(a, b, c) {\n  var d = 0;\n  b && (d |= 4);\n  pf(c, a, d, b);\n}\nvar rf = "_reactListening" + Math.random().toString(36).slice(2);\nfunction sf(a) {\n  if (!a[rf]) {\n    a[rf] = !0;\n    da.forEach(function (b) {\n      "selectionchange" !== b && (mf.has(b) || qf(b, !1, a), qf(b, !0, a));\n    });\n    var b = 9 === a.nodeType ? a : a.ownerDocument;\n    null === b || b[rf] || (b[rf] = !0, qf("selectionchange", !1, b));\n  }\n}\nfunction pf(a, b, c, d) {\n  switch (jd(b)) {\n    case 1:\n      var e = ed;\n      break;\n    case 4:\n      e = gd;\n      break;\n    default:\n      e = fd;\n  }\n  c = e.bind(null, b, c, a);\n  e = void 0;\n  !Lb || "touchstart" !== b && "touchmove" !== b && "wheel" !== b || (e = !0);\n  d ? void 0 !== e ? a.addEventListener(b, c, {\n    capture: !0,\n    passive: e\n  }) : a.addEventListener(b, c, !0) : void 0 !== e ? a.addEventListener(b, c, {\n    passive: e\n  }) : a.addEventListener(b, c, !1);\n}\nfunction hd(a, b, c, d, e) {\n  var f = d;\n  if (0 === (b & 1) && 0 === (b & 2) && null !== d) a: for (;;) {\n    if (null === d) return;\n    var g = d.tag;\n    if (3 === g || 4 === g) {\n      var h = d.stateNode.containerInfo;\n      if (h === e || 8 === h.nodeType && h.parentNode === e) break;\n      if (4 === g) for (g = d.return; null !== g;) {\n        var k = g.tag;\n        if (3 === k || 4 === k) if (k = g.stateNode.containerInfo, k === e || 8 === k.nodeType && k.parentNode === e) return;\n        g = g.return;\n      }\n      for (; null !== h;) {\n        g = Wc(h);\n        if (null === g) return;\n        k = g.tag;\n        if (5 === k || 6 === k) {\n          d = f = g;\n          continue a;\n        }\n        h = h.parentNode;\n      }\n    }\n    d = d.return;\n  }\n  Jb(function () {\n    var d = f,\n      e = xb(c),\n      g = [];\n    a: {\n      var h = df.get(a);\n      if (void 0 !== h) {\n        var k = td,\n          n = a;\n        switch (a) {\n          case "keypress":\n            if (0 === od(c)) break a;\n          case "keydown":\n          case "keyup":\n            k = Rd;\n            break;\n          case "focusin":\n            n = "focus";\n            k = Fd;\n            break;\n          case "focusout":\n            n = "blur";\n            k = Fd;\n            break;\n          case "beforeblur":\n          case "afterblur":\n            k = Fd;\n            break;\n          case "click":\n            if (2 === c.button) break a;\n          case "auxclick":\n          case "dblclick":\n          case "mousedown":\n          case "mousemove":\n          case "mouseup":\n          case "mouseout":\n          case "mouseover":\n          case "contextmenu":\n            k = Bd;\n            break;\n          case "drag":\n          case "dragend":\n          case "dragenter":\n          case "dragexit":\n          case "dragleave":\n          case "dragover":\n          case "dragstart":\n          case "drop":\n            k = Dd;\n            break;\n          case "touchcancel":\n          case "touchend":\n          case "touchmove":\n          case "touchstart":\n            k = Vd;\n            break;\n          case $e:\n          case af:\n          case bf:\n            k = Hd;\n            break;\n          case cf:\n            k = Xd;\n            break;\n          case "scroll":\n            k = vd;\n            break;\n          case "wheel":\n            k = Zd;\n            break;\n          case "copy":\n          case "cut":\n          case "paste":\n            k = Jd;\n            break;\n          case "gotpointercapture":\n          case "lostpointercapture":\n          case "pointercancel":\n          case "pointerdown":\n          case "pointermove":\n          case "pointerout":\n          case "pointerover":\n          case "pointerup":\n            k = Td;\n        }\n        var t = 0 !== (b & 4),\n          J = !t && "scroll" === a,\n          x = t ? null !== h ? h + "Capture" : null : h;\n        t = [];\n        for (var w = d, u; null !== w;) {\n          u = w;\n          var F = u.stateNode;\n          5 === u.tag && null !== F && (u = F, null !== x && (F = Kb(w, x), null != F && t.push(tf(w, F, u))));\n          if (J) break;\n          w = w.return;\n        }\n        0 < t.length && (h = new k(h, n, null, c, e), g.push({\n          event: h,\n          listeners: t\n        }));\n      }\n    }\n    if (0 === (b & 7)) {\n      a: {\n        h = "mouseover" === a || "pointerover" === a;\n        k = "mouseout" === a || "pointerout" === a;\n        if (h && c !== wb && (n = c.relatedTarget || c.fromElement) && (Wc(n) || n[uf])) break a;\n        if (k || h) {\n          h = e.window === e ? e : (h = e.ownerDocument) ? h.defaultView || h.parentWindow : window;\n          if (k) {\n            if (n = c.relatedTarget || c.toElement, k = d, n = n ? Wc(n) : null, null !== n && (J = Vb(n), n !== J || 5 !== n.tag && 6 !== n.tag)) n = null;\n          } else k = null, n = d;\n          if (k !== n) {\n            t = Bd;\n            F = "onMouseLeave";\n            x = "onMouseEnter";\n            w = "mouse";\n            if ("pointerout" === a || "pointerover" === a) t = Td, F = "onPointerLeave", x = "onPointerEnter", w = "pointer";\n            J = null == k ? h : ue(k);\n            u = null == n ? h : ue(n);\n            h = new t(F, w + "leave", k, c, e);\n            h.target = J;\n            h.relatedTarget = u;\n            F = null;\n            Wc(e) === d && (t = new t(x, w + "enter", n, c, e), t.target = u, t.relatedTarget = J, F = t);\n            J = F;\n            if (k && n) b: {\n              t = k;\n              x = n;\n              w = 0;\n              for (u = t; u; u = vf(u)) w++;\n              u = 0;\n              for (F = x; F; F = vf(F)) u++;\n              for (; 0 < w - u;) t = vf(t), w--;\n              for (; 0 < u - w;) x = vf(x), u--;\n              for (; w--;) {\n                if (t === x || null !== x && t === x.alternate) break b;\n                t = vf(t);\n                x = vf(x);\n              }\n              t = null;\n            } else t = null;\n            null !== k && wf(g, h, k, t, !1);\n            null !== n && null !== J && wf(g, J, n, t, !0);\n          }\n        }\n      }\n      a: {\n        h = d ? ue(d) : window;\n        k = h.nodeName && h.nodeName.toLowerCase();\n        if ("select" === k || "input" === k && "file" === h.type) var na = ve;else if (me(h)) {\n          if (we) na = Fe;else {\n            na = De;\n            var xa = Ce;\n          }\n        } else (k = h.nodeName) && "input" === k.toLowerCase() && ("checkbox" === h.type || "radio" === h.type) && (na = Ee);\n        if (na && (na = na(a, d))) {\n          ne(g, na, c, e);\n          break a;\n        }\n        xa && xa(a, h, d);\n        "focusout" === a && (xa = h._wrapperState) && xa.controlled && "number" === h.type && cb(h, "number", h.value);\n      }\n      xa = d ? ue(d) : window;\n      switch (a) {\n        case "focusin":\n          if (me(xa) || "true" === xa.contentEditable) Qe = xa, Re = d, Se = null;\n          break;\n        case "focusout":\n          Se = Re = Qe = null;\n          break;\n        case "mousedown":\n          Te = !0;\n          break;\n        case "contextmenu":\n        case "mouseup":\n        case "dragend":\n          Te = !1;\n          Ue(g, c, e);\n          break;\n        case "selectionchange":\n          if (Pe) break;\n        case "keydown":\n        case "keyup":\n          Ue(g, c, e);\n      }\n      var $a;\n      if (ae) b: {\n        switch (a) {\n          case "compositionstart":\n            var ba = "onCompositionStart";\n            break b;\n          case "compositionend":\n            ba = "onCompositionEnd";\n            break b;\n          case "compositionupdate":\n            ba = "onCompositionUpdate";\n            break b;\n        }\n        ba = void 0;\n      } else ie ? ge(a, c) && (ba = "onCompositionEnd") : "keydown" === a && 229 === c.keyCode && (ba = "onCompositionStart");\n      ba && (de && "ko" !== c.locale && (ie || "onCompositionStart" !== ba ? "onCompositionEnd" === ba && ie && ($a = nd()) : (kd = e, ld = "value" in kd ? kd.value : kd.textContent, ie = !0)), xa = oe(d, ba), 0 < xa.length && (ba = new Ld(ba, a, null, c, e), g.push({\n        event: ba,\n        listeners: xa\n      }), $a ? ba.data = $a : ($a = he(c), null !== $a && (ba.data = $a))));\n      if ($a = ce ? je(a, c) : ke(a, c)) d = oe(d, "onBeforeInput"), 0 < d.length && (e = new Ld("onBeforeInput", "beforeinput", null, c, e), g.push({\n        event: e,\n        listeners: d\n      }), e.data = $a);\n    }\n    se(g, b);\n  });\n}\nfunction tf(a, b, c) {\n  return {\n    instance: a,\n    listener: b,\n    currentTarget: c\n  };\n}\nfunction oe(a, b) {\n  for (var c = b + "Capture", d = []; null !== a;) {\n    var e = a,\n      f = e.stateNode;\n    5 === e.tag && null !== f && (e = f, f = Kb(a, c), null != f && d.unshift(tf(a, f, e)), f = Kb(a, b), null != f && d.push(tf(a, f, e)));\n    a = a.return;\n  }\n  return d;\n}\nfunction vf(a) {\n  if (null === a) return null;\n  do a = a.return; while (a && 5 !== a.tag);\n  return a ? a : null;\n}\nfunction wf(a, b, c, d, e) {\n  for (var f = b._reactName, g = []; null !== c && c !== d;) {\n    var h = c,\n      k = h.alternate,\n      l = h.stateNode;\n    if (null !== k && k === d) break;\n    5 === h.tag && null !== l && (h = l, e ? (k = Kb(c, f), null != k && g.unshift(tf(c, k, h))) : e || (k = Kb(c, f), null != k && g.push(tf(c, k, h))));\n    c = c.return;\n  }\n  0 !== g.length && a.push({\n    event: b,\n    listeners: g\n  });\n}\nvar xf = /\\r\\n?/g,\n  yf = /\\u0000|\\uFFFD/g;\nfunction zf(a) {\n  return ("string" === typeof a ? a : "" + a).replace(xf, "\\n").replace(yf, "");\n}\nfunction Af(a, b, c) {\n  b = zf(b);\n  if (zf(a) !== b && c) throw Error(p(425));\n}\nfunction Bf() {}\nvar Cf = null,\n  Df = null;\nfunction Ef(a, b) {\n  return "textarea" === a || "noscript" === a || "string" === typeof b.children || "number" === typeof b.children || "object" === typeof b.dangerouslySetInnerHTML && null !== b.dangerouslySetInnerHTML && null != b.dangerouslySetInnerHTML.__html;\n}\nvar Ff = "function" === typeof setTimeout ? setTimeout : void 0,\n  Gf = "function" === typeof clearTimeout ? clearTimeout : void 0,\n  Hf = "function" === typeof Promise ? Promise : void 0,\n  Jf = "function" === typeof queueMicrotask ? queueMicrotask : "undefined" !== typeof Hf ? function (a) {\n    return Hf.resolve(null).then(a).catch(If);\n  } : Ff;\nfunction If(a) {\n  setTimeout(function () {\n    throw a;\n  });\n}\nfunction Kf(a, b) {\n  var c = b,\n    d = 0;\n  do {\n    var e = c.nextSibling;\n    a.removeChild(c);\n    if (e && 8 === e.nodeType) if (c = e.data, "/$" === c) {\n      if (0 === d) {\n        a.removeChild(e);\n        bd(b);\n        return;\n      }\n      d--;\n    } else "$" !== c && "$?" !== c && "$!" !== c || d++;\n    c = e;\n  } while (c);\n  bd(b);\n}\nfunction Lf(a) {\n  for (; null != a; a = a.nextSibling) {\n    var b = a.nodeType;\n    if (1 === b || 3 === b) break;\n    if (8 === b) {\n      b = a.data;\n      if ("$" === b || "$!" === b || "$?" === b) break;\n      if ("/$" === b) return null;\n    }\n  }\n  return a;\n}\nfunction Mf(a) {\n  a = a.previousSibling;\n  for (var b = 0; a;) {\n    if (8 === a.nodeType) {\n      var c = a.data;\n      if ("$" === c || "$!" === c || "$?" === c) {\n        if (0 === b) return a;\n        b--;\n      } else "/$" === c && b++;\n    }\n    a = a.previousSibling;\n  }\n  return null;\n}\nvar Nf = Math.random().toString(36).slice(2),\n  Of = "__reactFiber$" + Nf,\n  Pf = "__reactProps$" + Nf,\n  uf = "__reactContainer$" + Nf,\n  of = "__reactEvents$" + Nf,\n  Qf = "__reactListeners$" + Nf,\n  Rf = "__reactHandles$" + Nf;\nfunction Wc(a) {\n  var b = a[Of];\n  if (b) return b;\n  for (var c = a.parentNode; c;) {\n    if (b = c[uf] || c[Of]) {\n      c = b.alternate;\n      if (null !== b.child || null !== c && null !== c.child) for (a = Mf(a); null !== a;) {\n        if (c = a[Of]) return c;\n        a = Mf(a);\n      }\n      return b;\n    }\n    a = c;\n    c = a.parentNode;\n  }\n  return null;\n}\nfunction Cb(a) {\n  a = a[Of] || a[uf];\n  return !a || 5 !== a.tag && 6 !== a.tag && 13 !== a.tag && 3 !== a.tag ? null : a;\n}\nfunction ue(a) {\n  if (5 === a.tag || 6 === a.tag) return a.stateNode;\n  throw Error(p(33));\n}\nfunction Db(a) {\n  return a[Pf] || null;\n}\nvar Sf = [],\n  Tf = -1;\nfunction Uf(a) {\n  return {\n    current: a\n  };\n}\nfunction E(a) {\n  0 > Tf || (a.current = Sf[Tf], Sf[Tf] = null, Tf--);\n}\nfunction G(a, b) {\n  Tf++;\n  Sf[Tf] = a.current;\n  a.current = b;\n}\nvar Vf = {},\n  H = Uf(Vf),\n  Wf = Uf(!1),\n  Xf = Vf;\nfunction Yf(a, b) {\n  var c = a.type.contextTypes;\n  if (!c) return Vf;\n  var d = a.stateNode;\n  if (d && d.__reactInternalMemoizedUnmaskedChildContext === b) return d.__reactInternalMemoizedMaskedChildContext;\n  var e = {},\n    f;\n  for (f in c) e[f] = b[f];\n  d && (a = a.stateNode, a.__reactInternalMemoizedUnmaskedChildContext = b, a.__reactInternalMemoizedMaskedChildContext = e);\n  return e;\n}\nfunction Zf(a) {\n  a = a.childContextTypes;\n  return null !== a && void 0 !== a;\n}\nfunction $f() {\n  E(Wf);\n  E(H);\n}\nfunction ag(a, b, c) {\n  if (H.current !== Vf) throw Error(p(168));\n  G(H, b);\n  G(Wf, c);\n}\nfunction bg(a, b, c) {\n  var d = a.stateNode;\n  b = b.childContextTypes;\n  if ("function" !== typeof d.getChildContext) return c;\n  d = d.getChildContext();\n  for (var e in d) if (!(e in b)) throw Error(p(108, Ra(a) || "Unknown", e));\n  return A({}, c, d);\n}\nfunction cg(a) {\n  a = (a = a.stateNode) && a.__reactInternalMemoizedMergedChildContext || Vf;\n  Xf = H.current;\n  G(H, a);\n  G(Wf, Wf.current);\n  return !0;\n}\nfunction dg(a, b, c) {\n  var d = a.stateNode;\n  if (!d) throw Error(p(169));\n  c ? (a = bg(a, b, Xf), d.__reactInternalMemoizedMergedChildContext = a, E(Wf), E(H), G(H, a)) : E(Wf);\n  G(Wf, c);\n}\nvar eg = null,\n  fg = !1,\n  gg = !1;\nfunction hg(a) {\n  null === eg ? eg = [a] : eg.push(a);\n}\nfunction ig(a) {\n  fg = !0;\n  hg(a);\n}\nfunction jg() {\n  if (!gg && null !== eg) {\n    gg = !0;\n    var a = 0,\n      b = C;\n    try {\n      var c = eg;\n      for (C = 1; a < c.length; a++) {\n        var d = c[a];\n        do d = d(!0); while (null !== d);\n      }\n      eg = null;\n      fg = !1;\n    } catch (e) {\n      throw null !== eg && (eg = eg.slice(a + 1)), ac(fc, jg), e;\n    } finally {\n      C = b, gg = !1;\n    }\n  }\n  return null;\n}\nvar kg = [],\n  lg = 0,\n  mg = null,\n  ng = 0,\n  og = [],\n  pg = 0,\n  qg = null,\n  rg = 1,\n  sg = "";\nfunction tg(a, b) {\n  kg[lg++] = ng;\n  kg[lg++] = mg;\n  mg = a;\n  ng = b;\n}\nfunction ug(a, b, c) {\n  og[pg++] = rg;\n  og[pg++] = sg;\n  og[pg++] = qg;\n  qg = a;\n  var d = rg;\n  a = sg;\n  var e = 32 - oc(d) - 1;\n  d &= ~(1 << e);\n  c += 1;\n  var f = 32 - oc(b) + e;\n  if (30 < f) {\n    var g = e - e % 5;\n    f = (d & (1 << g) - 1).toString(32);\n    d >>= g;\n    e -= g;\n    rg = 1 << 32 - oc(b) + e | c << e | d;\n    sg = f + a;\n  } else rg = 1 << f | c << e | d, sg = a;\n}\nfunction vg(a) {\n  null !== a.return && (tg(a, 1), ug(a, 1, 0));\n}\nfunction wg(a) {\n  for (; a === mg;) mg = kg[--lg], kg[lg] = null, ng = kg[--lg], kg[lg] = null;\n  for (; a === qg;) qg = og[--pg], og[pg] = null, sg = og[--pg], og[pg] = null, rg = og[--pg], og[pg] = null;\n}\nvar xg = null,\n  yg = null,\n  I = !1,\n  zg = null;\nfunction Ag(a, b) {\n  var c = Bg(5, null, null, 0);\n  c.elementType = "DELETED";\n  c.stateNode = b;\n  c.return = a;\n  b = a.deletions;\n  null === b ? (a.deletions = [c], a.flags |= 16) : b.push(c);\n}\nfunction Cg(a, b) {\n  switch (a.tag) {\n    case 5:\n      var c = a.type;\n      b = 1 !== b.nodeType || c.toLowerCase() !== b.nodeName.toLowerCase() ? null : b;\n      return null !== b ? (a.stateNode = b, xg = a, yg = Lf(b.firstChild), !0) : !1;\n    case 6:\n      return b = "" === a.pendingProps || 3 !== b.nodeType ? null : b, null !== b ? (a.stateNode = b, xg = a, yg = null, !0) : !1;\n    case 13:\n      return b = 8 !== b.nodeType ? null : b, null !== b ? (c = null !== qg ? {\n        id: rg,\n        overflow: sg\n      } : null, a.memoizedState = {\n        dehydrated: b,\n        treeContext: c,\n        retryLane: 1073741824\n      }, c = Bg(18, null, null, 0), c.stateNode = b, c.return = a, a.child = c, xg = a, yg = null, !0) : !1;\n    default:\n      return !1;\n  }\n}\nfunction Dg(a) {\n  return 0 !== (a.mode & 1) && 0 === (a.flags & 128);\n}\nfunction Eg(a) {\n  if (I) {\n    var b = yg;\n    if (b) {\n      var c = b;\n      if (!Cg(a, b)) {\n        if (Dg(a)) throw Error(p(418));\n        b = Lf(c.nextSibling);\n        var d = xg;\n        b && Cg(a, b) ? Ag(d, c) : (a.flags = a.flags & -4097 | 2, I = !1, xg = a);\n      }\n    } else {\n      if (Dg(a)) throw Error(p(418));\n      a.flags = a.flags & -4097 | 2;\n      I = !1;\n      xg = a;\n    }\n  }\n}\nfunction Fg(a) {\n  for (a = a.return; null !== a && 5 !== a.tag && 3 !== a.tag && 13 !== a.tag;) a = a.return;\n  xg = a;\n}\nfunction Gg(a) {\n  if (a !== xg) return !1;\n  if (!I) return Fg(a), I = !0, !1;\n  var b;\n  (b = 3 !== a.tag) && !(b = 5 !== a.tag) && (b = a.type, b = "head" !== b && "body" !== b && !Ef(a.type, a.memoizedProps));\n  if (b && (b = yg)) {\n    if (Dg(a)) throw Hg(), Error(p(418));\n    for (; b;) Ag(a, b), b = Lf(b.nextSibling);\n  }\n  Fg(a);\n  if (13 === a.tag) {\n    a = a.memoizedState;\n    a = null !== a ? a.dehydrated : null;\n    if (!a) throw Error(p(317));\n    a: {\n      a = a.nextSibling;\n      for (b = 0; a;) {\n        if (8 === a.nodeType) {\n          var c = a.data;\n          if ("/$" === c) {\n            if (0 === b) {\n              yg = Lf(a.nextSibling);\n              break a;\n            }\n            b--;\n          } else "$" !== c && "$!" !== c && "$?" !== c || b++;\n        }\n        a = a.nextSibling;\n      }\n      yg = null;\n    }\n  } else yg = xg ? Lf(a.stateNode.nextSibling) : null;\n  return !0;\n}\nfunction Hg() {\n  for (var a = yg; a;) a = Lf(a.nextSibling);\n}\nfunction Ig() {\n  yg = xg = null;\n  I = !1;\n}\nfunction Jg(a) {\n  null === zg ? zg = [a] : zg.push(a);\n}\nvar Kg = ua.ReactCurrentBatchConfig;\nfunction Lg(a, b) {\n  if (a && a.defaultProps) {\n    b = A({}, b);\n    a = a.defaultProps;\n    for (var c in a) void 0 === b[c] && (b[c] = a[c]);\n    return b;\n  }\n  return b;\n}\nvar Mg = Uf(null),\n  Ng = null,\n  Og = null,\n  Pg = null;\nfunction Qg() {\n  Pg = Og = Ng = null;\n}\nfunction Rg(a) {\n  var b = Mg.current;\n  E(Mg);\n  a._currentValue = b;\n}\nfunction Sg(a, b, c) {\n  for (; null !== a;) {\n    var d = a.alternate;\n    (a.childLanes & b) !== b ? (a.childLanes |= b, null !== d && (d.childLanes |= b)) : null !== d && (d.childLanes & b) !== b && (d.childLanes |= b);\n    if (a === c) break;\n    a = a.return;\n  }\n}\nfunction Tg(a, b) {\n  Ng = a;\n  Pg = Og = null;\n  a = a.dependencies;\n  null !== a && null !== a.firstContext && (0 !== (a.lanes & b) && (Ug = !0), a.firstContext = null);\n}\nfunction Vg(a) {\n  var b = a._currentValue;\n  if (Pg !== a) if (a = {\n    context: a,\n    memoizedValue: b,\n    next: null\n  }, null === Og) {\n    if (null === Ng) throw Error(p(308));\n    Og = a;\n    Ng.dependencies = {\n      lanes: 0,\n      firstContext: a\n    };\n  } else Og = Og.next = a;\n  return b;\n}\nvar Wg = null;\nfunction Xg(a) {\n  null === Wg ? Wg = [a] : Wg.push(a);\n}\nfunction Yg(a, b, c, d) {\n  var e = b.interleaved;\n  null === e ? (c.next = c, Xg(b)) : (c.next = e.next, e.next = c);\n  b.interleaved = c;\n  return Zg(a, d);\n}\nfunction Zg(a, b) {\n  a.lanes |= b;\n  var c = a.alternate;\n  null !== c && (c.lanes |= b);\n  c = a;\n  for (a = a.return; null !== a;) a.childLanes |= b, c = a.alternate, null !== c && (c.childLanes |= b), c = a, a = a.return;\n  return 3 === c.tag ? c.stateNode : null;\n}\nvar $g = !1;\nfunction ah(a) {\n  a.updateQueue = {\n    baseState: a.memoizedState,\n    firstBaseUpdate: null,\n    lastBaseUpdate: null,\n    shared: {\n      pending: null,\n      interleaved: null,\n      lanes: 0\n    },\n    effects: null\n  };\n}\nfunction bh(a, b) {\n  a = a.updateQueue;\n  b.updateQueue === a && (b.updateQueue = {\n    baseState: a.baseState,\n    firstBaseUpdate: a.firstBaseUpdate,\n    lastBaseUpdate: a.lastBaseUpdate,\n    shared: a.shared,\n    effects: a.effects\n  });\n}\nfunction ch(a, b) {\n  return {\n    eventTime: a,\n    lane: b,\n    tag: 0,\n    payload: null,\n    callback: null,\n    next: null\n  };\n}\nfunction dh(a, b, c) {\n  var d = a.updateQueue;\n  if (null === d) return null;\n  d = d.shared;\n  if (0 !== (K & 2)) {\n    var e = d.pending;\n    null === e ? b.next = b : (b.next = e.next, e.next = b);\n    d.pending = b;\n    return Zg(a, c);\n  }\n  e = d.interleaved;\n  null === e ? (b.next = b, Xg(d)) : (b.next = e.next, e.next = b);\n  d.interleaved = b;\n  return Zg(a, c);\n}\nfunction eh(a, b, c) {\n  b = b.updateQueue;\n  if (null !== b && (b = b.shared, 0 !== (c & 4194240))) {\n    var d = b.lanes;\n    d &= a.pendingLanes;\n    c |= d;\n    b.lanes = c;\n    Cc(a, c);\n  }\n}\nfunction fh(a, b) {\n  var c = a.updateQueue,\n    d = a.alternate;\n  if (null !== d && (d = d.updateQueue, c === d)) {\n    var e = null,\n      f = null;\n    c = c.firstBaseUpdate;\n    if (null !== c) {\n      do {\n        var g = {\n          eventTime: c.eventTime,\n          lane: c.lane,\n          tag: c.tag,\n          payload: c.payload,\n          callback: c.callback,\n          next: null\n        };\n        null === f ? e = f = g : f = f.next = g;\n        c = c.next;\n      } while (null !== c);\n      null === f ? e = f = b : f = f.next = b;\n    } else e = f = b;\n    c = {\n      baseState: d.baseState,\n      firstBaseUpdate: e,\n      lastBaseUpdate: f,\n      shared: d.shared,\n      effects: d.effects\n    };\n    a.updateQueue = c;\n    return;\n  }\n  a = c.lastBaseUpdate;\n  null === a ? c.firstBaseUpdate = b : a.next = b;\n  c.lastBaseUpdate = b;\n}\nfunction gh(a, b, c, d) {\n  var e = a.updateQueue;\n  $g = !1;\n  var f = e.firstBaseUpdate,\n    g = e.lastBaseUpdate,\n    h = e.shared.pending;\n  if (null !== h) {\n    e.shared.pending = null;\n    var k = h,\n      l = k.next;\n    k.next = null;\n    null === g ? f = l : g.next = l;\n    g = k;\n    var m = a.alternate;\n    null !== m && (m = m.updateQueue, h = m.lastBaseUpdate, h !== g && (null === h ? m.firstBaseUpdate = l : h.next = l, m.lastBaseUpdate = k));\n  }\n  if (null !== f) {\n    var q = e.baseState;\n    g = 0;\n    m = l = k = null;\n    h = f;\n    do {\n      var r = h.lane,\n        y = h.eventTime;\n      if ((d & r) === r) {\n        null !== m && (m = m.next = {\n          eventTime: y,\n          lane: 0,\n          tag: h.tag,\n          payload: h.payload,\n          callback: h.callback,\n          next: null\n        });\n        a: {\n          var n = a,\n            t = h;\n          r = b;\n          y = c;\n          switch (t.tag) {\n            case 1:\n              n = t.payload;\n              if ("function" === typeof n) {\n                q = n.call(y, q, r);\n                break a;\n              }\n              q = n;\n              break a;\n            case 3:\n              n.flags = n.flags & -65537 | 128;\n            case 0:\n              n = t.payload;\n              r = "function" === typeof n ? n.call(y, q, r) : n;\n              if (null === r || void 0 === r) break a;\n              q = A({}, q, r);\n              break a;\n            case 2:\n              $g = !0;\n          }\n        }\n        null !== h.callback && 0 !== h.lane && (a.flags |= 64, r = e.effects, null === r ? e.effects = [h] : r.push(h));\n      } else y = {\n        eventTime: y,\n        lane: r,\n        tag: h.tag,\n        payload: h.payload,\n        callback: h.callback,\n        next: null\n      }, null === m ? (l = m = y, k = q) : m = m.next = y, g |= r;\n      h = h.next;\n      if (null === h) if (h = e.shared.pending, null === h) break;else r = h, h = r.next, r.next = null, e.lastBaseUpdate = r, e.shared.pending = null;\n    } while (1);\n    null === m && (k = q);\n    e.baseState = k;\n    e.firstBaseUpdate = l;\n    e.lastBaseUpdate = m;\n    b = e.shared.interleaved;\n    if (null !== b) {\n      e = b;\n      do g |= e.lane, e = e.next; while (e !== b);\n    } else null === f && (e.shared.lanes = 0);\n    hh |= g;\n    a.lanes = g;\n    a.memoizedState = q;\n  }\n}\nfunction ih(a, b, c) {\n  a = b.effects;\n  b.effects = null;\n  if (null !== a) for (b = 0; b < a.length; b++) {\n    var d = a[b],\n      e = d.callback;\n    if (null !== e) {\n      d.callback = null;\n      d = c;\n      if ("function" !== typeof e) throw Error(p(191, e));\n      e.call(d);\n    }\n  }\n}\nvar jh = new aa.Component().refs;\nfunction kh(a, b, c, d) {\n  b = a.memoizedState;\n  c = c(d, b);\n  c = null === c || void 0 === c ? b : A({}, b, c);\n  a.memoizedState = c;\n  0 === a.lanes && (a.updateQueue.baseState = c);\n}\nvar nh = {\n  isMounted: function (a) {\n    return (a = a._reactInternals) ? Vb(a) === a : !1;\n  },\n  enqueueSetState: function (a, b, c) {\n    a = a._reactInternals;\n    var d = L(),\n      e = lh(a),\n      f = ch(d, e);\n    f.payload = b;\n    void 0 !== c && null !== c && (f.callback = c);\n    b = dh(a, f, e);\n    null !== b && (mh(b, a, e, d), eh(b, a, e));\n  },\n  enqueueReplaceState: function (a, b, c) {\n    a = a._reactInternals;\n    var d = L(),\n      e = lh(a),\n      f = ch(d, e);\n    f.tag = 1;\n    f.payload = b;\n    void 0 !== c && null !== c && (f.callback = c);\n    b = dh(a, f, e);\n    null !== b && (mh(b, a, e, d), eh(b, a, e));\n  },\n  enqueueForceUpdate: function (a, b) {\n    a = a._reactInternals;\n    var c = L(),\n      d = lh(a),\n      e = ch(c, d);\n    e.tag = 2;\n    void 0 !== b && null !== b && (e.callback = b);\n    b = dh(a, e, d);\n    null !== b && (mh(b, a, d, c), eh(b, a, d));\n  }\n};\nfunction oh(a, b, c, d, e, f, g) {\n  a = a.stateNode;\n  return "function" === typeof a.shouldComponentUpdate ? a.shouldComponentUpdate(d, f, g) : b.prototype && b.prototype.isPureReactComponent ? !Ie(c, d) || !Ie(e, f) : !0;\n}\nfunction ph(a, b, c) {\n  var d = !1,\n    e = Vf;\n  var f = b.contextType;\n  "object" === typeof f && null !== f ? f = Vg(f) : (e = Zf(b) ? Xf : H.current, d = b.contextTypes, f = (d = null !== d && void 0 !== d) ? Yf(a, e) : Vf);\n  b = new b(c, f);\n  a.memoizedState = null !== b.state && void 0 !== b.state ? b.state : null;\n  b.updater = nh;\n  a.stateNode = b;\n  b._reactInternals = a;\n  d && (a = a.stateNode, a.__reactInternalMemoizedUnmaskedChildContext = e, a.__reactInternalMemoizedMaskedChildContext = f);\n  return b;\n}\nfunction qh(a, b, c, d) {\n  a = b.state;\n  "function" === typeof b.componentWillReceiveProps && b.componentWillReceiveProps(c, d);\n  "function" === typeof b.UNSAFE_componentWillReceiveProps && b.UNSAFE_componentWillReceiveProps(c, d);\n  b.state !== a && nh.enqueueReplaceState(b, b.state, null);\n}\nfunction rh(a, b, c, d) {\n  var e = a.stateNode;\n  e.props = c;\n  e.state = a.memoizedState;\n  e.refs = jh;\n  ah(a);\n  var f = b.contextType;\n  "object" === typeof f && null !== f ? e.context = Vg(f) : (f = Zf(b) ? Xf : H.current, e.context = Yf(a, f));\n  e.state = a.memoizedState;\n  f = b.getDerivedStateFromProps;\n  "function" === typeof f && (kh(a, b, f, c), e.state = a.memoizedState);\n  "function" === typeof b.getDerivedStateFromProps || "function" === typeof e.getSnapshotBeforeUpdate || "function" !== typeof e.UNSAFE_componentWillMount && "function" !== typeof e.componentWillMount || (b = e.state, "function" === typeof e.componentWillMount && e.componentWillMount(), "function" === typeof e.UNSAFE_componentWillMount && e.UNSAFE_componentWillMount(), b !== e.state && nh.enqueueReplaceState(e, e.state, null), gh(a, c, e, d), e.state = a.memoizedState);\n  "function" === typeof e.componentDidMount && (a.flags |= 4194308);\n}\nfunction sh(a, b, c) {\n  a = c.ref;\n  if (null !== a && "function" !== typeof a && "object" !== typeof a) {\n    if (c._owner) {\n      c = c._owner;\n      if (c) {\n        if (1 !== c.tag) throw Error(p(309));\n        var d = c.stateNode;\n      }\n      if (!d) throw Error(p(147, a));\n      var e = d,\n        f = "" + a;\n      if (null !== b && null !== b.ref && "function" === typeof b.ref && b.ref._stringRef === f) return b.ref;\n      b = function (a) {\n        var b = e.refs;\n        b === jh && (b = e.refs = {});\n        null === a ? delete b[f] : b[f] = a;\n      };\n      b._stringRef = f;\n      return b;\n    }\n    if ("string" !== typeof a) throw Error(p(284));\n    if (!c._owner) throw Error(p(290, a));\n  }\n  return a;\n}\nfunction th(a, b) {\n  a = Object.prototype.toString.call(b);\n  throw Error(p(31, "[object Object]" === a ? "object with keys {" + Object.keys(b).join(", ") + "}" : a));\n}\nfunction uh(a) {\n  var b = a._init;\n  return b(a._payload);\n}\nfunction vh(a) {\n  function b(b, c) {\n    if (a) {\n      var d = b.deletions;\n      null === d ? (b.deletions = [c], b.flags |= 16) : d.push(c);\n    }\n  }\n  function c(c, d) {\n    if (!a) return null;\n    for (; null !== d;) b(c, d), d = d.sibling;\n    return null;\n  }\n  function d(a, b) {\n    for (a = new Map(); null !== b;) null !== b.key ? a.set(b.key, b) : a.set(b.index, b), b = b.sibling;\n    return a;\n  }\n  function e(a, b) {\n    a = wh(a, b);\n    a.index = 0;\n    a.sibling = null;\n    return a;\n  }\n  function f(b, c, d) {\n    b.index = d;\n    if (!a) return b.flags |= 1048576, c;\n    d = b.alternate;\n    if (null !== d) return d = d.index, d < c ? (b.flags |= 2, c) : d;\n    b.flags |= 2;\n    return c;\n  }\n  function g(b) {\n    a && null === b.alternate && (b.flags |= 2);\n    return b;\n  }\n  function h(a, b, c, d) {\n    if (null === b || 6 !== b.tag) return b = xh(c, a.mode, d), b.return = a, b;\n    b = e(b, c);\n    b.return = a;\n    return b;\n  }\n  function k(a, b, c, d) {\n    var f = c.type;\n    if (f === ya) return m(a, b, c.props.children, d, c.key);\n    if (null !== b && (b.elementType === f || "object" === typeof f && null !== f && f.$$typeof === Ha && uh(f) === b.type)) return d = e(b, c.props), d.ref = sh(a, b, c), d.return = a, d;\n    d = yh(c.type, c.key, c.props, null, a.mode, d);\n    d.ref = sh(a, b, c);\n    d.return = a;\n    return d;\n  }\n  function l(a, b, c, d) {\n    if (null === b || 4 !== b.tag || b.stateNode.containerInfo !== c.containerInfo || b.stateNode.implementation !== c.implementation) return b = zh(c, a.mode, d), b.return = a, b;\n    b = e(b, c.children || []);\n    b.return = a;\n    return b;\n  }\n  function m(a, b, c, d, f) {\n    if (null === b || 7 !== b.tag) return b = Ah(c, a.mode, d, f), b.return = a, b;\n    b = e(b, c);\n    b.return = a;\n    return b;\n  }\n  function q(a, b, c) {\n    if ("string" === typeof b && "" !== b || "number" === typeof b) return b = xh("" + b, a.mode, c), b.return = a, b;\n    if ("object" === typeof b && null !== b) {\n      switch (b.$$typeof) {\n        case va:\n          return c = yh(b.type, b.key, b.props, null, a.mode, c), c.ref = sh(a, null, b), c.return = a, c;\n        case wa:\n          return b = zh(b, a.mode, c), b.return = a, b;\n        case Ha:\n          var d = b._init;\n          return q(a, d(b._payload), c);\n      }\n      if (eb(b) || Ka(b)) return b = Ah(b, a.mode, c, null), b.return = a, b;\n      th(a, b);\n    }\n    return null;\n  }\n  function r(a, b, c, d) {\n    var e = null !== b ? b.key : null;\n    if ("string" === typeof c && "" !== c || "number" === typeof c) return null !== e ? null : h(a, b, "" + c, d);\n    if ("object" === typeof c && null !== c) {\n      switch (c.$$typeof) {\n        case va:\n          return c.key === e ? k(a, b, c, d) : null;\n        case wa:\n          return c.key === e ? l(a, b, c, d) : null;\n        case Ha:\n          return e = c._init, r(a, b, e(c._payload), d);\n      }\n      if (eb(c) || Ka(c)) return null !== e ? null : m(a, b, c, d, null);\n      th(a, c);\n    }\n    return null;\n  }\n  function y(a, b, c, d, e) {\n    if ("string" === typeof d && "" !== d || "number" === typeof d) return a = a.get(c) || null, h(b, a, "" + d, e);\n    if ("object" === typeof d && null !== d) {\n      switch (d.$$typeof) {\n        case va:\n          return a = a.get(null === d.key ? c : d.key) || null, k(b, a, d, e);\n        case wa:\n          return a = a.get(null === d.key ? c : d.key) || null, l(b, a, d, e);\n        case Ha:\n          var f = d._init;\n          return y(a, b, c, f(d._payload), e);\n      }\n      if (eb(d) || Ka(d)) return a = a.get(c) || null, m(b, a, d, e, null);\n      th(b, d);\n    }\n    return null;\n  }\n  function n(e, g, h, k) {\n    for (var l = null, m = null, u = g, w = g = 0, x = null; null !== u && w < h.length; w++) {\n      u.index > w ? (x = u, u = null) : x = u.sibling;\n      var n = r(e, u, h[w], k);\n      if (null === n) {\n        null === u && (u = x);\n        break;\n      }\n      a && u && null === n.alternate && b(e, u);\n      g = f(n, g, w);\n      null === m ? l = n : m.sibling = n;\n      m = n;\n      u = x;\n    }\n    if (w === h.length) return c(e, u), I && tg(e, w), l;\n    if (null === u) {\n      for (; w < h.length; w++) u = q(e, h[w], k), null !== u && (g = f(u, g, w), null === m ? l = u : m.sibling = u, m = u);\n      I && tg(e, w);\n      return l;\n    }\n    for (u = d(e, u); w < h.length; w++) x = y(u, e, w, h[w], k), null !== x && (a && null !== x.alternate && u.delete(null === x.key ? w : x.key), g = f(x, g, w), null === m ? l = x : m.sibling = x, m = x);\n    a && u.forEach(function (a) {\n      return b(e, a);\n    });\n    I && tg(e, w);\n    return l;\n  }\n  function t(e, g, h, k) {\n    var l = Ka(h);\n    if ("function" !== typeof l) throw Error(p(150));\n    h = l.call(h);\n    if (null == h) throw Error(p(151));\n    for (var u = l = null, m = g, w = g = 0, x = null, n = h.next(); null !== m && !n.done; w++, n = h.next()) {\n      m.index > w ? (x = m, m = null) : x = m.sibling;\n      var t = r(e, m, n.value, k);\n      if (null === t) {\n        null === m && (m = x);\n        break;\n      }\n      a && m && null === t.alternate && b(e, m);\n      g = f(t, g, w);\n      null === u ? l = t : u.sibling = t;\n      u = t;\n      m = x;\n    }\n    if (n.done) return c(e, m), I && tg(e, w), l;\n    if (null === m) {\n      for (; !n.done; w++, n = h.next()) n = q(e, n.value, k), null !== n && (g = f(n, g, w), null === u ? l = n : u.sibling = n, u = n);\n      I && tg(e, w);\n      return l;\n    }\n    for (m = d(e, m); !n.done; w++, n = h.next()) n = y(m, e, w, n.value, k), null !== n && (a && null !== n.alternate && m.delete(null === n.key ? w : n.key), g = f(n, g, w), null === u ? l = n : u.sibling = n, u = n);\n    a && m.forEach(function (a) {\n      return b(e, a);\n    });\n    I && tg(e, w);\n    return l;\n  }\n  function J(a, d, f, h) {\n    "object" === typeof f && null !== f && f.type === ya && null === f.key && (f = f.props.children);\n    if ("object" === typeof f && null !== f) {\n      switch (f.$$typeof) {\n        case va:\n          a: {\n            for (var k = f.key, l = d; null !== l;) {\n              if (l.key === k) {\n                k = f.type;\n                if (k === ya) {\n                  if (7 === l.tag) {\n                    c(a, l.sibling);\n                    d = e(l, f.props.children);\n                    d.return = a;\n                    a = d;\n                    break a;\n                  }\n                } else if (l.elementType === k || "object" === typeof k && null !== k && k.$$typeof === Ha && uh(k) === l.type) {\n                  c(a, l.sibling);\n                  d = e(l, f.props);\n                  d.ref = sh(a, l, f);\n                  d.return = a;\n                  a = d;\n                  break a;\n                }\n                c(a, l);\n                break;\n              } else b(a, l);\n              l = l.sibling;\n            }\n            f.type === ya ? (d = Ah(f.props.children, a.mode, h, f.key), d.return = a, a = d) : (h = yh(f.type, f.key, f.props, null, a.mode, h), h.ref = sh(a, d, f), h.return = a, a = h);\n          }\n          return g(a);\n        case wa:\n          a: {\n            for (l = f.key; null !== d;) {\n              if (d.key === l) {\n                if (4 === d.tag && d.stateNode.containerInfo === f.containerInfo && d.stateNode.implementation === f.implementation) {\n                  c(a, d.sibling);\n                  d = e(d, f.children || []);\n                  d.return = a;\n                  a = d;\n                  break a;\n                } else {\n                  c(a, d);\n                  break;\n                }\n              } else b(a, d);\n              d = d.sibling;\n            }\n            d = zh(f, a.mode, h);\n            d.return = a;\n            a = d;\n          }\n          return g(a);\n        case Ha:\n          return l = f._init, J(a, d, l(f._payload), h);\n      }\n      if (eb(f)) return n(a, d, f, h);\n      if (Ka(f)) return t(a, d, f, h);\n      th(a, f);\n    }\n    return "string" === typeof f && "" !== f || "number" === typeof f ? (f = "" + f, null !== d && 6 === d.tag ? (c(a, d.sibling), d = e(d, f), d.return = a, a = d) : (c(a, d), d = xh(f, a.mode, h), d.return = a, a = d), g(a)) : c(a, d);\n  }\n  return J;\n}\nvar Bh = vh(!0),\n  Ch = vh(!1),\n  Dh = {},\n  Eh = Uf(Dh),\n  Fh = Uf(Dh),\n  Gh = Uf(Dh);\nfunction Hh(a) {\n  if (a === Dh) throw Error(p(174));\n  return a;\n}\nfunction Ih(a, b) {\n  G(Gh, b);\n  G(Fh, a);\n  G(Eh, Dh);\n  a = b.nodeType;\n  switch (a) {\n    case 9:\n    case 11:\n      b = (b = b.documentElement) ? b.namespaceURI : lb(null, "");\n      break;\n    default:\n      a = 8 === a ? b.parentNode : b, b = a.namespaceURI || null, a = a.tagName, b = lb(b, a);\n  }\n  E(Eh);\n  G(Eh, b);\n}\nfunction Jh() {\n  E(Eh);\n  E(Fh);\n  E(Gh);\n}\nfunction Kh(a) {\n  Hh(Gh.current);\n  var b = Hh(Eh.current);\n  var c = lb(b, a.type);\n  b !== c && (G(Fh, a), G(Eh, c));\n}\nfunction Lh(a) {\n  Fh.current === a && (E(Eh), E(Fh));\n}\nvar M = Uf(0);\nfunction Mh(a) {\n  for (var b = a; null !== b;) {\n    if (13 === b.tag) {\n      var c = b.memoizedState;\n      if (null !== c && (c = c.dehydrated, null === c || "$?" === c.data || "$!" === c.data)) return b;\n    } else if (19 === b.tag && void 0 !== b.memoizedProps.revealOrder) {\n      if (0 !== (b.flags & 128)) return b;\n    } else if (null !== b.child) {\n      b.child.return = b;\n      b = b.child;\n      continue;\n    }\n    if (b === a) break;\n    for (; null === b.sibling;) {\n      if (null === b.return || b.return === a) return null;\n      b = b.return;\n    }\n    b.sibling.return = b.return;\n    b = b.sibling;\n  }\n  return null;\n}\nvar Nh = [];\nfunction Oh() {\n  for (var a = 0; a < Nh.length; a++) Nh[a]._workInProgressVersionPrimary = null;\n  Nh.length = 0;\n}\nvar Ph = ua.ReactCurrentDispatcher,\n  Qh = ua.ReactCurrentBatchConfig,\n  Rh = 0,\n  N = null,\n  O = null,\n  P = null,\n  Sh = !1,\n  Th = !1,\n  Uh = 0,\n  Vh = 0;\nfunction Q() {\n  throw Error(p(321));\n}\nfunction Wh(a, b) {\n  if (null === b) return !1;\n  for (var c = 0; c < b.length && c < a.length; c++) if (!He(a[c], b[c])) return !1;\n  return !0;\n}\nfunction Xh(a, b, c, d, e, f) {\n  Rh = f;\n  N = b;\n  b.memoizedState = null;\n  b.updateQueue = null;\n  b.lanes = 0;\n  Ph.current = null === a || null === a.memoizedState ? Yh : Zh;\n  a = c(d, e);\n  if (Th) {\n    f = 0;\n    do {\n      Th = !1;\n      Uh = 0;\n      if (25 <= f) throw Error(p(301));\n      f += 1;\n      P = O = null;\n      b.updateQueue = null;\n      Ph.current = $h;\n      a = c(d, e);\n    } while (Th);\n  }\n  Ph.current = ai;\n  b = null !== O && null !== O.next;\n  Rh = 0;\n  P = O = N = null;\n  Sh = !1;\n  if (b) throw Error(p(300));\n  return a;\n}\nfunction bi() {\n  var a = 0 !== Uh;\n  Uh = 0;\n  return a;\n}\nfunction ci() {\n  var a = {\n    memoizedState: null,\n    baseState: null,\n    baseQueue: null,\n    queue: null,\n    next: null\n  };\n  null === P ? N.memoizedState = P = a : P = P.next = a;\n  return P;\n}\nfunction di() {\n  if (null === O) {\n    var a = N.alternate;\n    a = null !== a ? a.memoizedState : null;\n  } else a = O.next;\n  var b = null === P ? N.memoizedState : P.next;\n  if (null !== b) P = b, O = a;else {\n    if (null === a) throw Error(p(310));\n    O = a;\n    a = {\n      memoizedState: O.memoizedState,\n      baseState: O.baseState,\n      baseQueue: O.baseQueue,\n      queue: O.queue,\n      next: null\n    };\n    null === P ? N.memoizedState = P = a : P = P.next = a;\n  }\n  return P;\n}\nfunction ei(a, b) {\n  return "function" === typeof b ? b(a) : b;\n}\nfunction fi(a) {\n  var b = di(),\n    c = b.queue;\n  if (null === c) throw Error(p(311));\n  c.lastRenderedReducer = a;\n  var d = O,\n    e = d.baseQueue,\n    f = c.pending;\n  if (null !== f) {\n    if (null !== e) {\n      var g = e.next;\n      e.next = f.next;\n      f.next = g;\n    }\n    d.baseQueue = e = f;\n    c.pending = null;\n  }\n  if (null !== e) {\n    f = e.next;\n    d = d.baseState;\n    var h = g = null,\n      k = null,\n      l = f;\n    do {\n      var m = l.lane;\n      if ((Rh & m) === m) null !== k && (k = k.next = {\n        lane: 0,\n        action: l.action,\n        hasEagerState: l.hasEagerState,\n        eagerState: l.eagerState,\n        next: null\n      }), d = l.hasEagerState ? l.eagerState : a(d, l.action);else {\n        var q = {\n          lane: m,\n          action: l.action,\n          hasEagerState: l.hasEagerState,\n          eagerState: l.eagerState,\n          next: null\n        };\n        null === k ? (h = k = q, g = d) : k = k.next = q;\n        N.lanes |= m;\n        hh |= m;\n      }\n      l = l.next;\n    } while (null !== l && l !== f);\n    null === k ? g = d : k.next = h;\n    He(d, b.memoizedState) || (Ug = !0);\n    b.memoizedState = d;\n    b.baseState = g;\n    b.baseQueue = k;\n    c.lastRenderedState = d;\n  }\n  a = c.interleaved;\n  if (null !== a) {\n    e = a;\n    do f = e.lane, N.lanes |= f, hh |= f, e = e.next; while (e !== a);\n  } else null === e && (c.lanes = 0);\n  return [b.memoizedState, c.dispatch];\n}\nfunction gi(a) {\n  var b = di(),\n    c = b.queue;\n  if (null === c) throw Error(p(311));\n  c.lastRenderedReducer = a;\n  var d = c.dispatch,\n    e = c.pending,\n    f = b.memoizedState;\n  if (null !== e) {\n    c.pending = null;\n    var g = e = e.next;\n    do f = a(f, g.action), g = g.next; while (g !== e);\n    He(f, b.memoizedState) || (Ug = !0);\n    b.memoizedState = f;\n    null === b.baseQueue && (b.baseState = f);\n    c.lastRenderedState = f;\n  }\n  return [f, d];\n}\nfunction hi() {}\nfunction ii(a, b) {\n  var c = N,\n    d = di(),\n    e = b(),\n    f = !He(d.memoizedState, e);\n  f && (d.memoizedState = e, Ug = !0);\n  d = d.queue;\n  ji(ki.bind(null, c, d, a), [a]);\n  if (d.getSnapshot !== b || f || null !== P && P.memoizedState.tag & 1) {\n    c.flags |= 2048;\n    li(9, mi.bind(null, c, d, e, b), void 0, null);\n    if (null === R) throw Error(p(349));\n    0 !== (Rh & 30) || ni(c, b, e);\n  }\n  return e;\n}\nfunction ni(a, b, c) {\n  a.flags |= 16384;\n  a = {\n    getSnapshot: b,\n    value: c\n  };\n  b = N.updateQueue;\n  null === b ? (b = {\n    lastEffect: null,\n    stores: null\n  }, N.updateQueue = b, b.stores = [a]) : (c = b.stores, null === c ? b.stores = [a] : c.push(a));\n}\nfunction mi(a, b, c, d) {\n  b.value = c;\n  b.getSnapshot = d;\n  oi(b) && pi(a);\n}\nfunction ki(a, b, c) {\n  return c(function () {\n    oi(b) && pi(a);\n  });\n}\nfunction oi(a) {\n  var b = a.getSnapshot;\n  a = a.value;\n  try {\n    var c = b();\n    return !He(a, c);\n  } catch (d) {\n    return !0;\n  }\n}\nfunction pi(a) {\n  var b = Zg(a, 1);\n  null !== b && mh(b, a, 1, -1);\n}\nfunction qi(a) {\n  var b = ci();\n  "function" === typeof a && (a = a());\n  b.memoizedState = b.baseState = a;\n  a = {\n    pending: null,\n    interleaved: null,\n    lanes: 0,\n    dispatch: null,\n    lastRenderedReducer: ei,\n    lastRenderedState: a\n  };\n  b.queue = a;\n  a = a.dispatch = ri.bind(null, N, a);\n  return [b.memoizedState, a];\n}\nfunction li(a, b, c, d) {\n  a = {\n    tag: a,\n    create: b,\n    destroy: c,\n    deps: d,\n    next: null\n  };\n  b = N.updateQueue;\n  null === b ? (b = {\n    lastEffect: null,\n    stores: null\n  }, N.updateQueue = b, b.lastEffect = a.next = a) : (c = b.lastEffect, null === c ? b.lastEffect = a.next = a : (d = c.next, c.next = a, a.next = d, b.lastEffect = a));\n  return a;\n}\nfunction si() {\n  return di().memoizedState;\n}\nfunction ti(a, b, c, d) {\n  var e = ci();\n  N.flags |= a;\n  e.memoizedState = li(1 | b, c, void 0, void 0 === d ? null : d);\n}\nfunction ui(a, b, c, d) {\n  var e = di();\n  d = void 0 === d ? null : d;\n  var f = void 0;\n  if (null !== O) {\n    var g = O.memoizedState;\n    f = g.destroy;\n    if (null !== d && Wh(d, g.deps)) {\n      e.memoizedState = li(b, c, f, d);\n      return;\n    }\n  }\n  N.flags |= a;\n  e.memoizedState = li(1 | b, c, f, d);\n}\nfunction vi(a, b) {\n  return ti(8390656, 8, a, b);\n}\nfunction ji(a, b) {\n  return ui(2048, 8, a, b);\n}\nfunction wi(a, b) {\n  return ui(4, 2, a, b);\n}\nfunction xi(a, b) {\n  return ui(4, 4, a, b);\n}\nfunction yi(a, b) {\n  if ("function" === typeof b) return a = a(), b(a), function () {\n    b(null);\n  };\n  if (null !== b && void 0 !== b) return a = a(), b.current = a, function () {\n    b.current = null;\n  };\n}\nfunction zi(a, b, c) {\n  c = null !== c && void 0 !== c ? c.concat([a]) : null;\n  return ui(4, 4, yi.bind(null, b, a), c);\n}\nfunction Ai() {}\nfunction Bi(a, b) {\n  var c = di();\n  b = void 0 === b ? null : b;\n  var d = c.memoizedState;\n  if (null !== d && null !== b && Wh(b, d[1])) return d[0];\n  c.memoizedState = [a, b];\n  return a;\n}\nfunction Ci(a, b) {\n  var c = di();\n  b = void 0 === b ? null : b;\n  var d = c.memoizedState;\n  if (null !== d && null !== b && Wh(b, d[1])) return d[0];\n  a = a();\n  c.memoizedState = [a, b];\n  return a;\n}\nfunction Di(a, b, c) {\n  if (0 === (Rh & 21)) return a.baseState && (a.baseState = !1, Ug = !0), a.memoizedState = c;\n  He(c, b) || (c = yc(), N.lanes |= c, hh |= c, a.baseState = !0);\n  return b;\n}\nfunction Ei(a, b) {\n  var c = C;\n  C = 0 !== c && 4 > c ? c : 4;\n  a(!0);\n  var d = Qh.transition;\n  Qh.transition = {};\n  try {\n    a(!1), b();\n  } finally {\n    C = c, Qh.transition = d;\n  }\n}\nfunction Fi() {\n  return di().memoizedState;\n}\nfunction Gi(a, b, c) {\n  var d = lh(a);\n  c = {\n    lane: d,\n    action: c,\n    hasEagerState: !1,\n    eagerState: null,\n    next: null\n  };\n  if (Hi(a)) Ii(b, c);else if (c = Yg(a, b, c, d), null !== c) {\n    var e = L();\n    mh(c, a, d, e);\n    Ji(c, b, d);\n  }\n}\nfunction ri(a, b, c) {\n  var d = lh(a),\n    e = {\n      lane: d,\n      action: c,\n      hasEagerState: !1,\n      eagerState: null,\n      next: null\n    };\n  if (Hi(a)) Ii(b, e);else {\n    var f = a.alternate;\n    if (0 === a.lanes && (null === f || 0 === f.lanes) && (f = b.lastRenderedReducer, null !== f)) try {\n      var g = b.lastRenderedState,\n        h = f(g, c);\n      e.hasEagerState = !0;\n      e.eagerState = h;\n      if (He(h, g)) {\n        var k = b.interleaved;\n        null === k ? (e.next = e, Xg(b)) : (e.next = k.next, k.next = e);\n        b.interleaved = e;\n        return;\n      }\n    } catch (l) {} finally {}\n    c = Yg(a, b, e, d);\n    null !== c && (e = L(), mh(c, a, d, e), Ji(c, b, d));\n  }\n}\nfunction Hi(a) {\n  var b = a.alternate;\n  return a === N || null !== b && b === N;\n}\nfunction Ii(a, b) {\n  Th = Sh = !0;\n  var c = a.pending;\n  null === c ? b.next = b : (b.next = c.next, c.next = b);\n  a.pending = b;\n}\nfunction Ji(a, b, c) {\n  if (0 !== (c & 4194240)) {\n    var d = b.lanes;\n    d &= a.pendingLanes;\n    c |= d;\n    b.lanes = c;\n    Cc(a, c);\n  }\n}\nvar ai = {\n    readContext: Vg,\n    useCallback: Q,\n    useContext: Q,\n    useEffect: Q,\n    useImperativeHandle: Q,\n    useInsertionEffect: Q,\n    useLayoutEffect: Q,\n    useMemo: Q,\n    useReducer: Q,\n    useRef: Q,\n    useState: Q,\n    useDebugValue: Q,\n    useDeferredValue: Q,\n    useTransition: Q,\n    useMutableSource: Q,\n    useSyncExternalStore: Q,\n    useId: Q,\n    unstable_isNewReconciler: !1\n  },\n  Yh = {\n    readContext: Vg,\n    useCallback: function (a, b) {\n      ci().memoizedState = [a, void 0 === b ? null : b];\n      return a;\n    },\n    useContext: Vg,\n    useEffect: vi,\n    useImperativeHandle: function (a, b, c) {\n      c = null !== c && void 0 !== c ? c.concat([a]) : null;\n      return ti(4194308, 4, yi.bind(null, b, a), c);\n    },\n    useLayoutEffect: function (a, b) {\n      return ti(4194308, 4, a, b);\n    },\n    useInsertionEffect: function (a, b) {\n      return ti(4, 2, a, b);\n    },\n    useMemo: function (a, b) {\n      var c = ci();\n      b = void 0 === b ? null : b;\n      a = a();\n      c.memoizedState = [a, b];\n      return a;\n    },\n    useReducer: function (a, b, c) {\n      var d = ci();\n      b = void 0 !== c ? c(b) : b;\n      d.memoizedState = d.baseState = b;\n      a = {\n        pending: null,\n        interleaved: null,\n        lanes: 0,\n        dispatch: null,\n        lastRenderedReducer: a,\n        lastRenderedState: b\n      };\n      d.queue = a;\n      a = a.dispatch = Gi.bind(null, N, a);\n      return [d.memoizedState, a];\n    },\n    useRef: function (a) {\n      var b = ci();\n      a = {\n        current: a\n      };\n      return b.memoizedState = a;\n    },\n    useState: qi,\n    useDebugValue: Ai,\n    useDeferredValue: function (a) {\n      return ci().memoizedState = a;\n    },\n    useTransition: function () {\n      var a = qi(!1),\n        b = a[0];\n      a = Ei.bind(null, a[1]);\n      ci().memoizedState = a;\n      return [b, a];\n    },\n    useMutableSource: function () {},\n    useSyncExternalStore: function (a, b, c) {\n      var d = N,\n        e = ci();\n      if (I) {\n        if (void 0 === c) throw Error(p(407));\n        c = c();\n      } else {\n        c = b();\n        if (null === R) throw Error(p(349));\n        0 !== (Rh & 30) || ni(d, b, c);\n      }\n      e.memoizedState = c;\n      var f = {\n        value: c,\n        getSnapshot: b\n      };\n      e.queue = f;\n      vi(ki.bind(null, d, f, a), [a]);\n      d.flags |= 2048;\n      li(9, mi.bind(null, d, f, c, b), void 0, null);\n      return c;\n    },\n    useId: function () {\n      var a = ci(),\n        b = R.identifierPrefix;\n      if (I) {\n        var c = sg;\n        var d = rg;\n        c = (d & ~(1 << 32 - oc(d) - 1)).toString(32) + c;\n        b = ":" + b + "R" + c;\n        c = Uh++;\n        0 < c && (b += "H" + c.toString(32));\n        b += ":";\n      } else c = Vh++, b = ":" + b + "r" + c.toString(32) + ":";\n      return a.memoizedState = b;\n    },\n    unstable_isNewReconciler: !1\n  },\n  Zh = {\n    readContext: Vg,\n    useCallback: Bi,\n    useContext: Vg,\n    useEffect: ji,\n    useImperativeHandle: zi,\n    useInsertionEffect: wi,\n    useLayoutEffect: xi,\n    useMemo: Ci,\n    useReducer: fi,\n    useRef: si,\n    useState: function () {\n      return fi(ei);\n    },\n    useDebugValue: Ai,\n    useDeferredValue: function (a) {\n      var b = di();\n      return Di(b, O.memoizedState, a);\n    },\n    useTransition: function () {\n      var a = fi(ei)[0],\n        b = di().memoizedState;\n      return [a, b];\n    },\n    useMutableSource: hi,\n    useSyncExternalStore: ii,\n    useId: Fi,\n    unstable_isNewReconciler: !1\n  },\n  $h = {\n    readContext: Vg,\n    useCallback: Bi,\n    useContext: Vg,\n    useEffect: ji,\n    useImperativeHandle: zi,\n    useInsertionEffect: wi,\n    useLayoutEffect: xi,\n    useMemo: Ci,\n    useReducer: gi,\n    useRef: si,\n    useState: function () {\n      return gi(ei);\n    },\n    useDebugValue: Ai,\n    useDeferredValue: function (a) {\n      var b = di();\n      return null === O ? b.memoizedState = a : Di(b, O.memoizedState, a);\n    },\n    useTransition: function () {\n      var a = gi(ei)[0],\n        b = di().memoizedState;\n      return [a, b];\n    },\n    useMutableSource: hi,\n    useSyncExternalStore: ii,\n    useId: Fi,\n    unstable_isNewReconciler: !1\n  };\nfunction Ki(a, b) {\n  try {\n    var c = "",\n      d = b;\n    do c += Pa(d), d = d.return; while (d);\n    var e = c;\n  } catch (f) {\n    e = "\\nError generating stack: " + f.message + "\\n" + f.stack;\n  }\n  return {\n    value: a,\n    source: b,\n    stack: e,\n    digest: null\n  };\n}\nfunction Li(a, b, c) {\n  return {\n    value: a,\n    source: null,\n    stack: null != c ? c : null,\n    digest: null != b ? b : null\n  };\n}\nfunction Mi(a, b) {\n  try {\n    console.error(b.value);\n  } catch (c) {\n    setTimeout(function () {\n      throw c;\n    });\n  }\n}\nvar Ni = "function" === typeof WeakMap ? WeakMap : Map;\nfunction Oi(a, b, c) {\n  c = ch(-1, c);\n  c.tag = 3;\n  c.payload = {\n    element: null\n  };\n  var d = b.value;\n  c.callback = function () {\n    Pi || (Pi = !0, Qi = d);\n    Mi(a, b);\n  };\n  return c;\n}\nfunction Ri(a, b, c) {\n  c = ch(-1, c);\n  c.tag = 3;\n  var d = a.type.getDerivedStateFromError;\n  if ("function" === typeof d) {\n    var e = b.value;\n    c.payload = function () {\n      return d(e);\n    };\n    c.callback = function () {\n      Mi(a, b);\n    };\n  }\n  var f = a.stateNode;\n  null !== f && "function" === typeof f.componentDidCatch && (c.callback = function () {\n    Mi(a, b);\n    "function" !== typeof d && (null === Si ? Si = new Set([this]) : Si.add(this));\n    var c = b.stack;\n    this.componentDidCatch(b.value, {\n      componentStack: null !== c ? c : ""\n    });\n  });\n  return c;\n}\nfunction Ti(a, b, c) {\n  var d = a.pingCache;\n  if (null === d) {\n    d = a.pingCache = new Ni();\n    var e = new Set();\n    d.set(b, e);\n  } else e = d.get(b), void 0 === e && (e = new Set(), d.set(b, e));\n  e.has(c) || (e.add(c), a = Ui.bind(null, a, b, c), b.then(a, a));\n}\nfunction Vi(a) {\n  do {\n    var b;\n    if (b = 13 === a.tag) b = a.memoizedState, b = null !== b ? null !== b.dehydrated ? !0 : !1 : !0;\n    if (b) return a;\n    a = a.return;\n  } while (null !== a);\n  return null;\n}\nfunction Wi(a, b, c, d, e) {\n  if (0 === (a.mode & 1)) return a === b ? a.flags |= 65536 : (a.flags |= 128, c.flags |= 131072, c.flags &= -52805, 1 === c.tag && (null === c.alternate ? c.tag = 17 : (b = ch(-1, 1), b.tag = 2, dh(c, b, 1))), c.lanes |= 1), a;\n  a.flags |= 65536;\n  a.lanes = e;\n  return a;\n}\nvar Xi = ua.ReactCurrentOwner,\n  Ug = !1;\nfunction Yi(a, b, c, d) {\n  b.child = null === a ? Ch(b, null, c, d) : Bh(b, a.child, c, d);\n}\nfunction Zi(a, b, c, d, e) {\n  c = c.render;\n  var f = b.ref;\n  Tg(b, e);\n  d = Xh(a, b, c, d, f, e);\n  c = bi();\n  if (null !== a && !Ug) return b.updateQueue = a.updateQueue, b.flags &= -2053, a.lanes &= ~e, $i(a, b, e);\n  I && c && vg(b);\n  b.flags |= 1;\n  Yi(a, b, d, e);\n  return b.child;\n}\nfunction aj(a, b, c, d, e) {\n  if (null === a) {\n    var f = c.type;\n    if ("function" === typeof f && !bj(f) && void 0 === f.defaultProps && null === c.compare && void 0 === c.defaultProps) return b.tag = 15, b.type = f, cj(a, b, f, d, e);\n    a = yh(c.type, null, d, b, b.mode, e);\n    a.ref = b.ref;\n    a.return = b;\n    return b.child = a;\n  }\n  f = a.child;\n  if (0 === (a.lanes & e)) {\n    var g = f.memoizedProps;\n    c = c.compare;\n    c = null !== c ? c : Ie;\n    if (c(g, d) && a.ref === b.ref) return $i(a, b, e);\n  }\n  b.flags |= 1;\n  a = wh(f, d);\n  a.ref = b.ref;\n  a.return = b;\n  return b.child = a;\n}\nfunction cj(a, b, c, d, e) {\n  if (null !== a) {\n    var f = a.memoizedProps;\n    if (Ie(f, d) && a.ref === b.ref) if (Ug = !1, b.pendingProps = d = f, 0 !== (a.lanes & e)) 0 !== (a.flags & 131072) && (Ug = !0);else return b.lanes = a.lanes, $i(a, b, e);\n  }\n  return dj(a, b, c, d, e);\n}\nfunction ej(a, b, c) {\n  var d = b.pendingProps,\n    e = d.children,\n    f = null !== a ? a.memoizedState : null;\n  if ("hidden" === d.mode) {\n    if (0 === (b.mode & 1)) b.memoizedState = {\n      baseLanes: 0,\n      cachePool: null,\n      transitions: null\n    }, G(fj, gj), gj |= c;else {\n      if (0 === (c & 1073741824)) return a = null !== f ? f.baseLanes | c : c, b.lanes = b.childLanes = 1073741824, b.memoizedState = {\n        baseLanes: a,\n        cachePool: null,\n        transitions: null\n      }, b.updateQueue = null, G(fj, gj), gj |= a, null;\n      b.memoizedState = {\n        baseLanes: 0,\n        cachePool: null,\n        transitions: null\n      };\n      d = null !== f ? f.baseLanes : c;\n      G(fj, gj);\n      gj |= d;\n    }\n  } else null !== f ? (d = f.baseLanes | c, b.memoizedState = null) : d = c, G(fj, gj), gj |= d;\n  Yi(a, b, e, c);\n  return b.child;\n}\nfunction hj(a, b) {\n  var c = b.ref;\n  if (null === a && null !== c || null !== a && a.ref !== c) b.flags |= 512, b.flags |= 2097152;\n}\nfunction dj(a, b, c, d, e) {\n  var f = Zf(c) ? Xf : H.current;\n  f = Yf(b, f);\n  Tg(b, e);\n  c = Xh(a, b, c, d, f, e);\n  d = bi();\n  if (null !== a && !Ug) return b.updateQueue = a.updateQueue, b.flags &= -2053, a.lanes &= ~e, $i(a, b, e);\n  I && d && vg(b);\n  b.flags |= 1;\n  Yi(a, b, c, e);\n  return b.child;\n}\nfunction ij(a, b, c, d, e) {\n  if (Zf(c)) {\n    var f = !0;\n    cg(b);\n  } else f = !1;\n  Tg(b, e);\n  if (null === b.stateNode) jj(a, b), ph(b, c, d), rh(b, c, d, e), d = !0;else if (null === a) {\n    var g = b.stateNode,\n      h = b.memoizedProps;\n    g.props = h;\n    var k = g.context,\n      l = c.contextType;\n    "object" === typeof l && null !== l ? l = Vg(l) : (l = Zf(c) ? Xf : H.current, l = Yf(b, l));\n    var m = c.getDerivedStateFromProps,\n      q = "function" === typeof m || "function" === typeof g.getSnapshotBeforeUpdate;\n    q || "function" !== typeof g.UNSAFE_componentWillReceiveProps && "function" !== typeof g.componentWillReceiveProps || (h !== d || k !== l) && qh(b, g, d, l);\n    $g = !1;\n    var r = b.memoizedState;\n    g.state = r;\n    gh(b, d, g, e);\n    k = b.memoizedState;\n    h !== d || r !== k || Wf.current || $g ? ("function" === typeof m && (kh(b, c, m, d), k = b.memoizedState), (h = $g || oh(b, c, h, d, r, k, l)) ? (q || "function" !== typeof g.UNSAFE_componentWillMount && "function" !== typeof g.componentWillMount || ("function" === typeof g.componentWillMount && g.componentWillMount(), "function" === typeof g.UNSAFE_componentWillMount && g.UNSAFE_componentWillMount()), "function" === typeof g.componentDidMount && (b.flags |= 4194308)) : ("function" === typeof g.componentDidMount && (b.flags |= 4194308), b.memoizedProps = d, b.memoizedState = k), g.props = d, g.state = k, g.context = l, d = h) : ("function" === typeof g.componentDidMount && (b.flags |= 4194308), d = !1);\n  } else {\n    g = b.stateNode;\n    bh(a, b);\n    h = b.memoizedProps;\n    l = b.type === b.elementType ? h : Lg(b.type, h);\n    g.props = l;\n    q = b.pendingProps;\n    r = g.context;\n    k = c.contextType;\n    "object" === typeof k && null !== k ? k = Vg(k) : (k = Zf(c) ? Xf : H.current, k = Yf(b, k));\n    var y = c.getDerivedStateFromProps;\n    (m = "function" === typeof y || "function" === typeof g.getSnapshotBeforeUpdate) || "function" !== typeof g.UNSAFE_componentWillReceiveProps && "function" !== typeof g.componentWillReceiveProps || (h !== q || r !== k) && qh(b, g, d, k);\n    $g = !1;\n    r = b.memoizedState;\n    g.state = r;\n    gh(b, d, g, e);\n    var n = b.memoizedState;\n    h !== q || r !== n || Wf.current || $g ? ("function" === typeof y && (kh(b, c, y, d), n = b.memoizedState), (l = $g || oh(b, c, l, d, r, n, k) || !1) ? (m || "function" !== typeof g.UNSAFE_componentWillUpdate && "function" !== typeof g.componentWillUpdate || ("function" === typeof g.componentWillUpdate && g.componentWillUpdate(d, n, k), "function" === typeof g.UNSAFE_componentWillUpdate && g.UNSAFE_componentWillUpdate(d, n, k)), "function" === typeof g.componentDidUpdate && (b.flags |= 4), "function" === typeof g.getSnapshotBeforeUpdate && (b.flags |= 1024)) : ("function" !== typeof g.componentDidUpdate || h === a.memoizedProps && r === a.memoizedState || (b.flags |= 4), "function" !== typeof g.getSnapshotBeforeUpdate || h === a.memoizedProps && r === a.memoizedState || (b.flags |= 1024), b.memoizedProps = d, b.memoizedState = n), g.props = d, g.state = n, g.context = k, d = l) : ("function" !== typeof g.componentDidUpdate || h === a.memoizedProps && r === a.memoizedState || (b.flags |= 4), "function" !== typeof g.getSnapshotBeforeUpdate || h === a.memoizedProps && r === a.memoizedState || (b.flags |= 1024), d = !1);\n  }\n  return kj(a, b, c, d, f, e);\n}\nfunction kj(a, b, c, d, e, f) {\n  hj(a, b);\n  var g = 0 !== (b.flags & 128);\n  if (!d && !g) return e && dg(b, c, !1), $i(a, b, f);\n  d = b.stateNode;\n  Xi.current = b;\n  var h = g && "function" !== typeof c.getDerivedStateFromError ? null : d.render();\n  b.flags |= 1;\n  null !== a && g ? (b.child = Bh(b, a.child, null, f), b.child = Bh(b, null, h, f)) : Yi(a, b, h, f);\n  b.memoizedState = d.state;\n  e && dg(b, c, !0);\n  return b.child;\n}\nfunction lj(a) {\n  var b = a.stateNode;\n  b.pendingContext ? ag(a, b.pendingContext, b.pendingContext !== b.context) : b.context && ag(a, b.context, !1);\n  Ih(a, b.containerInfo);\n}\nfunction mj(a, b, c, d, e) {\n  Ig();\n  Jg(e);\n  b.flags |= 256;\n  Yi(a, b, c, d);\n  return b.child;\n}\nvar nj = {\n  dehydrated: null,\n  treeContext: null,\n  retryLane: 0\n};\nfunction oj(a) {\n  return {\n    baseLanes: a,\n    cachePool: null,\n    transitions: null\n  };\n}\nfunction pj(a, b, c) {\n  var d = b.pendingProps,\n    e = M.current,\n    f = !1,\n    g = 0 !== (b.flags & 128),\n    h;\n  (h = g) || (h = null !== a && null === a.memoizedState ? !1 : 0 !== (e & 2));\n  if (h) f = !0, b.flags &= -129;else if (null === a || null !== a.memoizedState) e |= 1;\n  G(M, e & 1);\n  if (null === a) {\n    Eg(b);\n    a = b.memoizedState;\n    if (null !== a && (a = a.dehydrated, null !== a)) return 0 === (b.mode & 1) ? b.lanes = 1 : "$!" === a.data ? b.lanes = 8 : b.lanes = 1073741824, null;\n    g = d.children;\n    a = d.fallback;\n    return f ? (d = b.mode, f = b.child, g = {\n      mode: "hidden",\n      children: g\n    }, 0 === (d & 1) && null !== f ? (f.childLanes = 0, f.pendingProps = g) : f = qj(g, d, 0, null), a = Ah(a, d, c, null), f.return = b, a.return = b, f.sibling = a, b.child = f, b.child.memoizedState = oj(c), b.memoizedState = nj, a) : rj(b, g);\n  }\n  e = a.memoizedState;\n  if (null !== e && (h = e.dehydrated, null !== h)) return sj(a, b, g, d, h, e, c);\n  if (f) {\n    f = d.fallback;\n    g = b.mode;\n    e = a.child;\n    h = e.sibling;\n    var k = {\n      mode: "hidden",\n      children: d.children\n    };\n    0 === (g & 1) && b.child !== e ? (d = b.child, d.childLanes = 0, d.pendingProps = k, b.deletions = null) : (d = wh(e, k), d.subtreeFlags = e.subtreeFlags & 14680064);\n    null !== h ? f = wh(h, f) : (f = Ah(f, g, c, null), f.flags |= 2);\n    f.return = b;\n    d.return = b;\n    d.sibling = f;\n    b.child = d;\n    d = f;\n    f = b.child;\n    g = a.child.memoizedState;\n    g = null === g ? oj(c) : {\n      baseLanes: g.baseLanes | c,\n      cachePool: null,\n      transitions: g.transitions\n    };\n    f.memoizedState = g;\n    f.childLanes = a.childLanes & ~c;\n    b.memoizedState = nj;\n    return d;\n  }\n  f = a.child;\n  a = f.sibling;\n  d = wh(f, {\n    mode: "visible",\n    children: d.children\n  });\n  0 === (b.mode & 1) && (d.lanes = c);\n  d.return = b;\n  d.sibling = null;\n  null !== a && (c = b.deletions, null === c ? (b.deletions = [a], b.flags |= 16) : c.push(a));\n  b.child = d;\n  b.memoizedState = null;\n  return d;\n}\nfunction rj(a, b) {\n  b = qj({\n    mode: "visible",\n    children: b\n  }, a.mode, 0, null);\n  b.return = a;\n  return a.child = b;\n}\nfunction tj(a, b, c, d) {\n  null !== d && Jg(d);\n  Bh(b, a.child, null, c);\n  a = rj(b, b.pendingProps.children);\n  a.flags |= 2;\n  b.memoizedState = null;\n  return a;\n}\nfunction sj(a, b, c, d, e, f, g) {\n  if (c) {\n    if (b.flags & 256) return b.flags &= -257, d = Li(Error(p(422))), tj(a, b, g, d);\n    if (null !== b.memoizedState) return b.child = a.child, b.flags |= 128, null;\n    f = d.fallback;\n    e = b.mode;\n    d = qj({\n      mode: "visible",\n      children: d.children\n    }, e, 0, null);\n    f = Ah(f, e, g, null);\n    f.flags |= 2;\n    d.return = b;\n    f.return = b;\n    d.sibling = f;\n    b.child = d;\n    0 !== (b.mode & 1) && Bh(b, a.child, null, g);\n    b.child.memoizedState = oj(g);\n    b.memoizedState = nj;\n    return f;\n  }\n  if (0 === (b.mode & 1)) return tj(a, b, g, null);\n  if ("$!" === e.data) {\n    d = e.nextSibling && e.nextSibling.dataset;\n    if (d) var h = d.dgst;\n    d = h;\n    f = Error(p(419));\n    d = Li(f, d, void 0);\n    return tj(a, b, g, d);\n  }\n  h = 0 !== (g & a.childLanes);\n  if (Ug || h) {\n    d = R;\n    if (null !== d) {\n      switch (g & -g) {\n        case 4:\n          e = 2;\n          break;\n        case 16:\n          e = 8;\n          break;\n        case 64:\n        case 128:\n        case 256:\n        case 512:\n        case 1024:\n        case 2048:\n        case 4096:\n        case 8192:\n        case 16384:\n        case 32768:\n        case 65536:\n        case 131072:\n        case 262144:\n        case 524288:\n        case 1048576:\n        case 2097152:\n        case 4194304:\n        case 8388608:\n        case 16777216:\n        case 33554432:\n        case 67108864:\n          e = 32;\n          break;\n        case 536870912:\n          e = 268435456;\n          break;\n        default:\n          e = 0;\n      }\n      e = 0 !== (e & (d.suspendedLanes | g)) ? 0 : e;\n      0 !== e && e !== f.retryLane && (f.retryLane = e, Zg(a, e), mh(d, a, e, -1));\n    }\n    uj();\n    d = Li(Error(p(421)));\n    return tj(a, b, g, d);\n  }\n  if ("$?" === e.data) return b.flags |= 128, b.child = a.child, b = vj.bind(null, a), e._reactRetry = b, null;\n  a = f.treeContext;\n  yg = Lf(e.nextSibling);\n  xg = b;\n  I = !0;\n  zg = null;\n  null !== a && (og[pg++] = rg, og[pg++] = sg, og[pg++] = qg, rg = a.id, sg = a.overflow, qg = b);\n  b = rj(b, d.children);\n  b.flags |= 4096;\n  return b;\n}\nfunction wj(a, b, c) {\n  a.lanes |= b;\n  var d = a.alternate;\n  null !== d && (d.lanes |= b);\n  Sg(a.return, b, c);\n}\nfunction xj(a, b, c, d, e) {\n  var f = a.memoizedState;\n  null === f ? a.memoizedState = {\n    isBackwards: b,\n    rendering: null,\n    renderingStartTime: 0,\n    last: d,\n    tail: c,\n    tailMode: e\n  } : (f.isBackwards = b, f.rendering = null, f.renderingStartTime = 0, f.last = d, f.tail = c, f.tailMode = e);\n}\nfunction yj(a, b, c) {\n  var d = b.pendingProps,\n    e = d.revealOrder,\n    f = d.tail;\n  Yi(a, b, d.children, c);\n  d = M.current;\n  if (0 !== (d & 2)) d = d & 1 | 2, b.flags |= 128;else {\n    if (null !== a && 0 !== (a.flags & 128)) a: for (a = b.child; null !== a;) {\n      if (13 === a.tag) null !== a.memoizedState && wj(a, c, b);else if (19 === a.tag) wj(a, c, b);else if (null !== a.child) {\n        a.child.return = a;\n        a = a.child;\n        continue;\n      }\n      if (a === b) break a;\n      for (; null === a.sibling;) {\n        if (null === a.return || a.return === b) break a;\n        a = a.return;\n      }\n      a.sibling.return = a.return;\n      a = a.sibling;\n    }\n    d &= 1;\n  }\n  G(M, d);\n  if (0 === (b.mode & 1)) b.memoizedState = null;else switch (e) {\n    case "forwards":\n      c = b.child;\n      for (e = null; null !== c;) a = c.alternate, null !== a && null === Mh(a) && (e = c), c = c.sibling;\n      c = e;\n      null === c ? (e = b.child, b.child = null) : (e = c.sibling, c.sibling = null);\n      xj(b, !1, e, c, f);\n      break;\n    case "backwards":\n      c = null;\n      e = b.child;\n      for (b.child = null; null !== e;) {\n        a = e.alternate;\n        if (null !== a && null === Mh(a)) {\n          b.child = e;\n          break;\n        }\n        a = e.sibling;\n        e.sibling = c;\n        c = e;\n        e = a;\n      }\n      xj(b, !0, c, null, f);\n      break;\n    case "together":\n      xj(b, !1, null, null, void 0);\n      break;\n    default:\n      b.memoizedState = null;\n  }\n  return b.child;\n}\nfunction jj(a, b) {\n  0 === (b.mode & 1) && null !== a && (a.alternate = null, b.alternate = null, b.flags |= 2);\n}\nfunction $i(a, b, c) {\n  null !== a && (b.dependencies = a.dependencies);\n  hh |= b.lanes;\n  if (0 === (c & b.childLanes)) return null;\n  if (null !== a && b.child !== a.child) throw Error(p(153));\n  if (null !== b.child) {\n    a = b.child;\n    c = wh(a, a.pendingProps);\n    b.child = c;\n    for (c.return = b; null !== a.sibling;) a = a.sibling, c = c.sibling = wh(a, a.pendingProps), c.return = b;\n    c.sibling = null;\n  }\n  return b.child;\n}\nfunction zj(a, b, c) {\n  switch (b.tag) {\n    case 3:\n      lj(b);\n      Ig();\n      break;\n    case 5:\n      Kh(b);\n      break;\n    case 1:\n      Zf(b.type) && cg(b);\n      break;\n    case 4:\n      Ih(b, b.stateNode.containerInfo);\n      break;\n    case 10:\n      var d = b.type._context,\n        e = b.memoizedProps.value;\n      G(Mg, d._currentValue);\n      d._currentValue = e;\n      break;\n    case 13:\n      d = b.memoizedState;\n      if (null !== d) {\n        if (null !== d.dehydrated) return G(M, M.current & 1), b.flags |= 128, null;\n        if (0 !== (c & b.child.childLanes)) return pj(a, b, c);\n        G(M, M.current & 1);\n        a = $i(a, b, c);\n        return null !== a ? a.sibling : null;\n      }\n      G(M, M.current & 1);\n      break;\n    case 19:\n      d = 0 !== (c & b.childLanes);\n      if (0 !== (a.flags & 128)) {\n        if (d) return yj(a, b, c);\n        b.flags |= 128;\n      }\n      e = b.memoizedState;\n      null !== e && (e.rendering = null, e.tail = null, e.lastEffect = null);\n      G(M, M.current);\n      if (d) break;else return null;\n    case 22:\n    case 23:\n      return b.lanes = 0, ej(a, b, c);\n  }\n  return $i(a, b, c);\n}\nvar Aj, Bj, Cj, Dj;\nAj = function (a, b) {\n  for (var c = b.child; null !== c;) {\n    if (5 === c.tag || 6 === c.tag) a.appendChild(c.stateNode);else if (4 !== c.tag && null !== c.child) {\n      c.child.return = c;\n      c = c.child;\n      continue;\n    }\n    if (c === b) break;\n    for (; null === c.sibling;) {\n      if (null === c.return || c.return === b) return;\n      c = c.return;\n    }\n    c.sibling.return = c.return;\n    c = c.sibling;\n  }\n};\nBj = function () {};\nCj = function (a, b, c, d) {\n  var e = a.memoizedProps;\n  if (e !== d) {\n    a = b.stateNode;\n    Hh(Eh.current);\n    var f = null;\n    switch (c) {\n      case "input":\n        e = Ya(a, e);\n        d = Ya(a, d);\n        f = [];\n        break;\n      case "select":\n        e = A({}, e, {\n          value: void 0\n        });\n        d = A({}, d, {\n          value: void 0\n        });\n        f = [];\n        break;\n      case "textarea":\n        e = gb(a, e);\n        d = gb(a, d);\n        f = [];\n        break;\n      default:\n        "function" !== typeof e.onClick && "function" === typeof d.onClick && (a.onclick = Bf);\n    }\n    ub(c, d);\n    var g;\n    c = null;\n    for (l in e) if (!d.hasOwnProperty(l) && e.hasOwnProperty(l) && null != e[l]) if ("style" === l) {\n      var h = e[l];\n      for (g in h) h.hasOwnProperty(g) && (c || (c = {}), c[g] = "");\n    } else "dangerouslySetInnerHTML" !== l && "children" !== l && "suppressContentEditableWarning" !== l && "suppressHydrationWarning" !== l && "autoFocus" !== l && (ea.hasOwnProperty(l) ? f || (f = []) : (f = f || []).push(l, null));\n    for (l in d) {\n      var k = d[l];\n      h = null != e ? e[l] : void 0;\n      if (d.hasOwnProperty(l) && k !== h && (null != k || null != h)) if ("style" === l) {\n        if (h) {\n          for (g in h) !h.hasOwnProperty(g) || k && k.hasOwnProperty(g) || (c || (c = {}), c[g] = "");\n          for (g in k) k.hasOwnProperty(g) && h[g] !== k[g] && (c || (c = {}), c[g] = k[g]);\n        } else c || (f || (f = []), f.push(l, c)), c = k;\n      } else "dangerouslySetInnerHTML" === l ? (k = k ? k.__html : void 0, h = h ? h.__html : void 0, null != k && h !== k && (f = f || []).push(l, k)) : "children" === l ? "string" !== typeof k && "number" !== typeof k || (f = f || []).push(l, "" + k) : "suppressContentEditableWarning" !== l && "suppressHydrationWarning" !== l && (ea.hasOwnProperty(l) ? (null != k && "onScroll" === l && D("scroll", a), f || h === k || (f = [])) : (f = f || []).push(l, k));\n    }\n    c && (f = f || []).push("style", c);\n    var l = f;\n    if (b.updateQueue = l) b.flags |= 4;\n  }\n};\nDj = function (a, b, c, d) {\n  c !== d && (b.flags |= 4);\n};\nfunction Ej(a, b) {\n  if (!I) switch (a.tailMode) {\n    case "hidden":\n      b = a.tail;\n      for (var c = null; null !== b;) null !== b.alternate && (c = b), b = b.sibling;\n      null === c ? a.tail = null : c.sibling = null;\n      break;\n    case "collapsed":\n      c = a.tail;\n      for (var d = null; null !== c;) null !== c.alternate && (d = c), c = c.sibling;\n      null === d ? b || null === a.tail ? a.tail = null : a.tail.sibling = null : d.sibling = null;\n  }\n}\nfunction S(a) {\n  var b = null !== a.alternate && a.alternate.child === a.child,\n    c = 0,\n    d = 0;\n  if (b) for (var e = a.child; null !== e;) c |= e.lanes | e.childLanes, d |= e.subtreeFlags & 14680064, d |= e.flags & 14680064, e.return = a, e = e.sibling;else for (e = a.child; null !== e;) c |= e.lanes | e.childLanes, d |= e.subtreeFlags, d |= e.flags, e.return = a, e = e.sibling;\n  a.subtreeFlags |= d;\n  a.childLanes = c;\n  return b;\n}\nfunction Fj(a, b, c) {\n  var d = b.pendingProps;\n  wg(b);\n  switch (b.tag) {\n    case 2:\n    case 16:\n    case 15:\n    case 0:\n    case 11:\n    case 7:\n    case 8:\n    case 12:\n    case 9:\n    case 14:\n      return S(b), null;\n    case 1:\n      return Zf(b.type) && $f(), S(b), null;\n    case 3:\n      d = b.stateNode;\n      Jh();\n      E(Wf);\n      E(H);\n      Oh();\n      d.pendingContext && (d.context = d.pendingContext, d.pendingContext = null);\n      if (null === a || null === a.child) Gg(b) ? b.flags |= 4 : null === a || a.memoizedState.isDehydrated && 0 === (b.flags & 256) || (b.flags |= 1024, null !== zg && (Gj(zg), zg = null));\n      Bj(a, b);\n      S(b);\n      return null;\n    case 5:\n      Lh(b);\n      var e = Hh(Gh.current);\n      c = b.type;\n      if (null !== a && null != b.stateNode) Cj(a, b, c, d, e), a.ref !== b.ref && (b.flags |= 512, b.flags |= 2097152);else {\n        if (!d) {\n          if (null === b.stateNode) throw Error(p(166));\n          S(b);\n          return null;\n        }\n        a = Hh(Eh.current);\n        if (Gg(b)) {\n          d = b.stateNode;\n          c = b.type;\n          var f = b.memoizedProps;\n          d[Of] = b;\n          d[Pf] = f;\n          a = 0 !== (b.mode & 1);\n          switch (c) {\n            case "dialog":\n              D("cancel", d);\n              D("close", d);\n              break;\n            case "iframe":\n            case "object":\n            case "embed":\n              D("load", d);\n              break;\n            case "video":\n            case "audio":\n              for (e = 0; e < lf.length; e++) D(lf[e], d);\n              break;\n            case "source":\n              D("error", d);\n              break;\n            case "img":\n            case "image":\n            case "link":\n              D("error", d);\n              D("load", d);\n              break;\n            case "details":\n              D("toggle", d);\n              break;\n            case "input":\n              Za(d, f);\n              D("invalid", d);\n              break;\n            case "select":\n              d._wrapperState = {\n                wasMultiple: !!f.multiple\n              };\n              D("invalid", d);\n              break;\n            case "textarea":\n              hb(d, f), D("invalid", d);\n          }\n          ub(c, f);\n          e = null;\n          for (var g in f) if (f.hasOwnProperty(g)) {\n            var h = f[g];\n            "children" === g ? "string" === typeof h ? d.textContent !== h && (!0 !== f.suppressHydrationWarning && Af(d.textContent, h, a), e = ["children", h]) : "number" === typeof h && d.textContent !== "" + h && (!0 !== f.suppressHydrationWarning && Af(d.textContent, h, a), e = ["children", "" + h]) : ea.hasOwnProperty(g) && null != h && "onScroll" === g && D("scroll", d);\n          }\n          switch (c) {\n            case "input":\n              Va(d);\n              db(d, f, !0);\n              break;\n            case "textarea":\n              Va(d);\n              jb(d);\n              break;\n            case "select":\n            case "option":\n              break;\n            default:\n              "function" === typeof f.onClick && (d.onclick = Bf);\n          }\n          d = e;\n          b.updateQueue = d;\n          null !== d && (b.flags |= 4);\n        } else {\n          g = 9 === e.nodeType ? e : e.ownerDocument;\n          "http://www.w3.org/1999/xhtml" === a && (a = kb(c));\n          "http://www.w3.org/1999/xhtml" === a ? "script" === c ? (a = g.createElement("div"), a.innerHTML = "<script>\\x3c/script>", a = a.removeChild(a.firstChild)) : "string" === typeof d.is ? a = g.createElement(c, {\n            is: d.is\n          }) : (a = g.createElement(c), "select" === c && (g = a, d.multiple ? g.multiple = !0 : d.size && (g.size = d.size))) : a = g.createElementNS(a, c);\n          a[Of] = b;\n          a[Pf] = d;\n          Aj(a, b, !1, !1);\n          b.stateNode = a;\n          a: {\n            g = vb(c, d);\n            switch (c) {\n              case "dialog":\n                D("cancel", a);\n                D("close", a);\n                e = d;\n                break;\n              case "iframe":\n              case "object":\n              case "embed":\n                D("load", a);\n                e = d;\n                break;\n              case "video":\n              case "audio":\n                for (e = 0; e < lf.length; e++) D(lf[e], a);\n                e = d;\n                break;\n              case "source":\n                D("error", a);\n                e = d;\n                break;\n              case "img":\n              case "image":\n              case "link":\n                D("error", a);\n                D("load", a);\n                e = d;\n                break;\n              case "details":\n                D("toggle", a);\n                e = d;\n                break;\n              case "input":\n                Za(a, d);\n                e = Ya(a, d);\n                D("invalid", a);\n                break;\n              case "option":\n                e = d;\n                break;\n              case "select":\n                a._wrapperState = {\n                  wasMultiple: !!d.multiple\n                };\n                e = A({}, d, {\n                  value: void 0\n                });\n                D("invalid", a);\n                break;\n              case "textarea":\n                hb(a, d);\n                e = gb(a, d);\n                D("invalid", a);\n                break;\n              default:\n                e = d;\n            }\n            ub(c, e);\n            h = e;\n            for (f in h) if (h.hasOwnProperty(f)) {\n              var k = h[f];\n              "style" === f ? sb(a, k) : "dangerouslySetInnerHTML" === f ? (k = k ? k.__html : void 0, null != k && nb(a, k)) : "children" === f ? "string" === typeof k ? ("textarea" !== c || "" !== k) && ob(a, k) : "number" === typeof k && ob(a, "" + k) : "suppressContentEditableWarning" !== f && "suppressHydrationWarning" !== f && "autoFocus" !== f && (ea.hasOwnProperty(f) ? null != k && "onScroll" === f && D("scroll", a) : null != k && ta(a, f, k, g));\n            }\n            switch (c) {\n              case "input":\n                Va(a);\n                db(a, d, !1);\n                break;\n              case "textarea":\n                Va(a);\n                jb(a);\n                break;\n              case "option":\n                null != d.value && a.setAttribute("value", "" + Sa(d.value));\n                break;\n              case "select":\n                a.multiple = !!d.multiple;\n                f = d.value;\n                null != f ? fb(a, !!d.multiple, f, !1) : null != d.defaultValue && fb(a, !!d.multiple, d.defaultValue, !0);\n                break;\n              default:\n                "function" === typeof e.onClick && (a.onclick = Bf);\n            }\n            switch (c) {\n              case "button":\n              case "input":\n              case "select":\n              case "textarea":\n                d = !!d.autoFocus;\n                break a;\n              case "img":\n                d = !0;\n                break a;\n              default:\n                d = !1;\n            }\n          }\n          d && (b.flags |= 4);\n        }\n        null !== b.ref && (b.flags |= 512, b.flags |= 2097152);\n      }\n      S(b);\n      return null;\n    case 6:\n      if (a && null != b.stateNode) Dj(a, b, a.memoizedProps, d);else {\n        if ("string" !== typeof d && null === b.stateNode) throw Error(p(166));\n        c = Hh(Gh.current);\n        Hh(Eh.current);\n        if (Gg(b)) {\n          d = b.stateNode;\n          c = b.memoizedProps;\n          d[Of] = b;\n          if (f = d.nodeValue !== c) if (a = xg, null !== a) switch (a.tag) {\n            case 3:\n              Af(d.nodeValue, c, 0 !== (a.mode & 1));\n              break;\n            case 5:\n              !0 !== a.memoizedProps.suppressHydrationWarning && Af(d.nodeValue, c, 0 !== (a.mode & 1));\n          }\n          f && (b.flags |= 4);\n        } else d = (9 === c.nodeType ? c : c.ownerDocument).createTextNode(d), d[Of] = b, b.stateNode = d;\n      }\n      S(b);\n      return null;\n    case 13:\n      E(M);\n      d = b.memoizedState;\n      if (null === a || null !== a.memoizedState && null !== a.memoizedState.dehydrated) {\n        if (I && null !== yg && 0 !== (b.mode & 1) && 0 === (b.flags & 128)) Hg(), Ig(), b.flags |= 98560, f = !1;else if (f = Gg(b), null !== d && null !== d.dehydrated) {\n          if (null === a) {\n            if (!f) throw Error(p(318));\n            f = b.memoizedState;\n            f = null !== f ? f.dehydrated : null;\n            if (!f) throw Error(p(317));\n            f[Of] = b;\n          } else Ig(), 0 === (b.flags & 128) && (b.memoizedState = null), b.flags |= 4;\n          S(b);\n          f = !1;\n        } else null !== zg && (Gj(zg), zg = null), f = !0;\n        if (!f) return b.flags & 65536 ? b : null;\n      }\n      if (0 !== (b.flags & 128)) return b.lanes = c, b;\n      d = null !== d;\n      d !== (null !== a && null !== a.memoizedState) && d && (b.child.flags |= 8192, 0 !== (b.mode & 1) && (null === a || 0 !== (M.current & 1) ? 0 === T && (T = 3) : uj()));\n      null !== b.updateQueue && (b.flags |= 4);\n      S(b);\n      return null;\n    case 4:\n      return Jh(), Bj(a, b), null === a && sf(b.stateNode.containerInfo), S(b), null;\n    case 10:\n      return Rg(b.type._context), S(b), null;\n    case 17:\n      return Zf(b.type) && $f(), S(b), null;\n    case 19:\n      E(M);\n      f = b.memoizedState;\n      if (null === f) return S(b), null;\n      d = 0 !== (b.flags & 128);\n      g = f.rendering;\n      if (null === g) {\n        if (d) Ej(f, !1);else {\n          if (0 !== T || null !== a && 0 !== (a.flags & 128)) for (a = b.child; null !== a;) {\n            g = Mh(a);\n            if (null !== g) {\n              b.flags |= 128;\n              Ej(f, !1);\n              d = g.updateQueue;\n              null !== d && (b.updateQueue = d, b.flags |= 4);\n              b.subtreeFlags = 0;\n              d = c;\n              for (c = b.child; null !== c;) f = c, a = d, f.flags &= 14680066, g = f.alternate, null === g ? (f.childLanes = 0, f.lanes = a, f.child = null, f.subtreeFlags = 0, f.memoizedProps = null, f.memoizedState = null, f.updateQueue = null, f.dependencies = null, f.stateNode = null) : (f.childLanes = g.childLanes, f.lanes = g.lanes, f.child = g.child, f.subtreeFlags = 0, f.deletions = null, f.memoizedProps = g.memoizedProps, f.memoizedState = g.memoizedState, f.updateQueue = g.updateQueue, f.type = g.type, a = g.dependencies, f.dependencies = null === a ? null : {\n                lanes: a.lanes,\n                firstContext: a.firstContext\n              }), c = c.sibling;\n              G(M, M.current & 1 | 2);\n              return b.child;\n            }\n            a = a.sibling;\n          }\n          null !== f.tail && B() > Hj && (b.flags |= 128, d = !0, Ej(f, !1), b.lanes = 4194304);\n        }\n      } else {\n        if (!d) if (a = Mh(g), null !== a) {\n          if (b.flags |= 128, d = !0, c = a.updateQueue, null !== c && (b.updateQueue = c, b.flags |= 4), Ej(f, !0), null === f.tail && "hidden" === f.tailMode && !g.alternate && !I) return S(b), null;\n        } else 2 * B() - f.renderingStartTime > Hj && 1073741824 !== c && (b.flags |= 128, d = !0, Ej(f, !1), b.lanes = 4194304);\n        f.isBackwards ? (g.sibling = b.child, b.child = g) : (c = f.last, null !== c ? c.sibling = g : b.child = g, f.last = g);\n      }\n      if (null !== f.tail) return b = f.tail, f.rendering = b, f.tail = b.sibling, f.renderingStartTime = B(), b.sibling = null, c = M.current, G(M, d ? c & 1 | 2 : c & 1), b;\n      S(b);\n      return null;\n    case 22:\n    case 23:\n      return Ij(), d = null !== b.memoizedState, null !== a && null !== a.memoizedState !== d && (b.flags |= 8192), d && 0 !== (b.mode & 1) ? 0 !== (gj & 1073741824) && (S(b), b.subtreeFlags & 6 && (b.flags |= 8192)) : S(b), null;\n    case 24:\n      return null;\n    case 25:\n      return null;\n  }\n  throw Error(p(156, b.tag));\n}\nfunction Jj(a, b) {\n  wg(b);\n  switch (b.tag) {\n    case 1:\n      return Zf(b.type) && $f(), a = b.flags, a & 65536 ? (b.flags = a & -65537 | 128, b) : null;\n    case 3:\n      return Jh(), E(Wf), E(H), Oh(), a = b.flags, 0 !== (a & 65536) && 0 === (a & 128) ? (b.flags = a & -65537 | 128, b) : null;\n    case 5:\n      return Lh(b), null;\n    case 13:\n      E(M);\n      a = b.memoizedState;\n      if (null !== a && null !== a.dehydrated) {\n        if (null === b.alternate) throw Error(p(340));\n        Ig();\n      }\n      a = b.flags;\n      return a & 65536 ? (b.flags = a & -65537 | 128, b) : null;\n    case 19:\n      return E(M), null;\n    case 4:\n      return Jh(), null;\n    case 10:\n      return Rg(b.type._context), null;\n    case 22:\n    case 23:\n      return Ij(), null;\n    case 24:\n      return null;\n    default:\n      return null;\n  }\n}\nvar Kj = !1,\n  U = !1,\n  Lj = "function" === typeof WeakSet ? WeakSet : Set,\n  V = null;\nfunction Mj(a, b) {\n  var c = a.ref;\n  if (null !== c) if ("function" === typeof c) try {\n    c(null);\n  } catch (d) {\n    W(a, b, d);\n  } else c.current = null;\n}\nfunction Nj(a, b, c) {\n  try {\n    c();\n  } catch (d) {\n    W(a, b, d);\n  }\n}\nvar Oj = !1;\nfunction Pj(a, b) {\n  Cf = dd;\n  a = Me();\n  if (Ne(a)) {\n    if ("selectionStart" in a) var c = {\n      start: a.selectionStart,\n      end: a.selectionEnd\n    };else a: {\n      c = (c = a.ownerDocument) && c.defaultView || window;\n      var d = c.getSelection && c.getSelection();\n      if (d && 0 !== d.rangeCount) {\n        c = d.anchorNode;\n        var e = d.anchorOffset,\n          f = d.focusNode;\n        d = d.focusOffset;\n        try {\n          c.nodeType, f.nodeType;\n        } catch (F) {\n          c = null;\n          break a;\n        }\n        var g = 0,\n          h = -1,\n          k = -1,\n          l = 0,\n          m = 0,\n          q = a,\n          r = null;\n        b: for (;;) {\n          for (var y;;) {\n            q !== c || 0 !== e && 3 !== q.nodeType || (h = g + e);\n            q !== f || 0 !== d && 3 !== q.nodeType || (k = g + d);\n            3 === q.nodeType && (g += q.nodeValue.length);\n            if (null === (y = q.firstChild)) break;\n            r = q;\n            q = y;\n          }\n          for (;;) {\n            if (q === a) break b;\n            r === c && ++l === e && (h = g);\n            r === f && ++m === d && (k = g);\n            if (null !== (y = q.nextSibling)) break;\n            q = r;\n            r = q.parentNode;\n          }\n          q = y;\n        }\n        c = -1 === h || -1 === k ? null : {\n          start: h,\n          end: k\n        };\n      } else c = null;\n    }\n    c = c || {\n      start: 0,\n      end: 0\n    };\n  } else c = null;\n  Df = {\n    focusedElem: a,\n    selectionRange: c\n  };\n  dd = !1;\n  for (V = b; null !== V;) if (b = V, a = b.child, 0 !== (b.subtreeFlags & 1028) && null !== a) a.return = b, V = a;else for (; null !== V;) {\n    b = V;\n    try {\n      var n = b.alternate;\n      if (0 !== (b.flags & 1024)) switch (b.tag) {\n        case 0:\n        case 11:\n        case 15:\n          break;\n        case 1:\n          if (null !== n) {\n            var t = n.memoizedProps,\n              J = n.memoizedState,\n              x = b.stateNode,\n              w = x.getSnapshotBeforeUpdate(b.elementType === b.type ? t : Lg(b.type, t), J);\n            x.__reactInternalSnapshotBeforeUpdate = w;\n          }\n          break;\n        case 3:\n          var u = b.stateNode.containerInfo;\n          1 === u.nodeType ? u.textContent = "" : 9 === u.nodeType && u.documentElement && u.removeChild(u.documentElement);\n          break;\n        case 5:\n        case 6:\n        case 4:\n        case 17:\n          break;\n        default:\n          throw Error(p(163));\n      }\n    } catch (F) {\n      W(b, b.return, F);\n    }\n    a = b.sibling;\n    if (null !== a) {\n      a.return = b.return;\n      V = a;\n      break;\n    }\n    V = b.return;\n  }\n  n = Oj;\n  Oj = !1;\n  return n;\n}\nfunction Qj(a, b, c) {\n  var d = b.updateQueue;\n  d = null !== d ? d.lastEffect : null;\n  if (null !== d) {\n    var e = d = d.next;\n    do {\n      if ((e.tag & a) === a) {\n        var f = e.destroy;\n        e.destroy = void 0;\n        void 0 !== f && Nj(b, c, f);\n      }\n      e = e.next;\n    } while (e !== d);\n  }\n}\nfunction Rj(a, b) {\n  b = b.updateQueue;\n  b = null !== b ? b.lastEffect : null;\n  if (null !== b) {\n    var c = b = b.next;\n    do {\n      if ((c.tag & a) === a) {\n        var d = c.create;\n        c.destroy = d();\n      }\n      c = c.next;\n    } while (c !== b);\n  }\n}\nfunction Sj(a) {\n  var b = a.ref;\n  if (null !== b) {\n    var c = a.stateNode;\n    switch (a.tag) {\n      case 5:\n        a = c;\n        break;\n      default:\n        a = c;\n    }\n    "function" === typeof b ? b(a) : b.current = a;\n  }\n}\nfunction Tj(a) {\n  var b = a.alternate;\n  null !== b && (a.alternate = null, Tj(b));\n  a.child = null;\n  a.deletions = null;\n  a.sibling = null;\n  5 === a.tag && (b = a.stateNode, null !== b && (delete b[Of], delete b[Pf], delete b[of], delete b[Qf], delete b[Rf]));\n  a.stateNode = null;\n  a.return = null;\n  a.dependencies = null;\n  a.memoizedProps = null;\n  a.memoizedState = null;\n  a.pendingProps = null;\n  a.stateNode = null;\n  a.updateQueue = null;\n}\nfunction Uj(a) {\n  return 5 === a.tag || 3 === a.tag || 4 === a.tag;\n}\nfunction Vj(a) {\n  a: for (;;) {\n    for (; null === a.sibling;) {\n      if (null === a.return || Uj(a.return)) return null;\n      a = a.return;\n    }\n    a.sibling.return = a.return;\n    for (a = a.sibling; 5 !== a.tag && 6 !== a.tag && 18 !== a.tag;) {\n      if (a.flags & 2) continue a;\n      if (null === a.child || 4 === a.tag) continue a;else a.child.return = a, a = a.child;\n    }\n    if (!(a.flags & 2)) return a.stateNode;\n  }\n}\nfunction Wj(a, b, c) {\n  var d = a.tag;\n  if (5 === d || 6 === d) a = a.stateNode, b ? 8 === c.nodeType ? c.parentNode.insertBefore(a, b) : c.insertBefore(a, b) : (8 === c.nodeType ? (b = c.parentNode, b.insertBefore(a, c)) : (b = c, b.appendChild(a)), c = c._reactRootContainer, null !== c && void 0 !== c || null !== b.onclick || (b.onclick = Bf));else if (4 !== d && (a = a.child, null !== a)) for (Wj(a, b, c), a = a.sibling; null !== a;) Wj(a, b, c), a = a.sibling;\n}\nfunction Xj(a, b, c) {\n  var d = a.tag;\n  if (5 === d || 6 === d) a = a.stateNode, b ? c.insertBefore(a, b) : c.appendChild(a);else if (4 !== d && (a = a.child, null !== a)) for (Xj(a, b, c), a = a.sibling; null !== a;) Xj(a, b, c), a = a.sibling;\n}\nvar X = null,\n  Yj = !1;\nfunction Zj(a, b, c) {\n  for (c = c.child; null !== c;) ak(a, b, c), c = c.sibling;\n}\nfunction ak(a, b, c) {\n  if (lc && "function" === typeof lc.onCommitFiberUnmount) try {\n    lc.onCommitFiberUnmount(kc, c);\n  } catch (h) {}\n  switch (c.tag) {\n    case 5:\n      U || Mj(c, b);\n    case 6:\n      var d = X,\n        e = Yj;\n      X = null;\n      Zj(a, b, c);\n      X = d;\n      Yj = e;\n      null !== X && (Yj ? (a = X, c = c.stateNode, 8 === a.nodeType ? a.parentNode.removeChild(c) : a.removeChild(c)) : X.removeChild(c.stateNode));\n      break;\n    case 18:\n      null !== X && (Yj ? (a = X, c = c.stateNode, 8 === a.nodeType ? Kf(a.parentNode, c) : 1 === a.nodeType && Kf(a, c), bd(a)) : Kf(X, c.stateNode));\n      break;\n    case 4:\n      d = X;\n      e = Yj;\n      X = c.stateNode.containerInfo;\n      Yj = !0;\n      Zj(a, b, c);\n      X = d;\n      Yj = e;\n      break;\n    case 0:\n    case 11:\n    case 14:\n    case 15:\n      if (!U && (d = c.updateQueue, null !== d && (d = d.lastEffect, null !== d))) {\n        e = d = d.next;\n        do {\n          var f = e,\n            g = f.destroy;\n          f = f.tag;\n          void 0 !== g && (0 !== (f & 2) ? Nj(c, b, g) : 0 !== (f & 4) && Nj(c, b, g));\n          e = e.next;\n        } while (e !== d);\n      }\n      Zj(a, b, c);\n      break;\n    case 1:\n      if (!U && (Mj(c, b), d = c.stateNode, "function" === typeof d.componentWillUnmount)) try {\n        d.props = c.memoizedProps, d.state = c.memoizedState, d.componentWillUnmount();\n      } catch (h) {\n        W(c, b, h);\n      }\n      Zj(a, b, c);\n      break;\n    case 21:\n      Zj(a, b, c);\n      break;\n    case 22:\n      c.mode & 1 ? (U = (d = U) || null !== c.memoizedState, Zj(a, b, c), U = d) : Zj(a, b, c);\n      break;\n    default:\n      Zj(a, b, c);\n  }\n}\nfunction bk(a) {\n  var b = a.updateQueue;\n  if (null !== b) {\n    a.updateQueue = null;\n    var c = a.stateNode;\n    null === c && (c = a.stateNode = new Lj());\n    b.forEach(function (b) {\n      var d = ck.bind(null, a, b);\n      c.has(b) || (c.add(b), b.then(d, d));\n    });\n  }\n}\nfunction dk(a, b) {\n  var c = b.deletions;\n  if (null !== c) for (var d = 0; d < c.length; d++) {\n    var e = c[d];\n    try {\n      var f = a,\n        g = b,\n        h = g;\n      a: for (; null !== h;) {\n        switch (h.tag) {\n          case 5:\n            X = h.stateNode;\n            Yj = !1;\n            break a;\n          case 3:\n            X = h.stateNode.containerInfo;\n            Yj = !0;\n            break a;\n          case 4:\n            X = h.stateNode.containerInfo;\n            Yj = !0;\n            break a;\n        }\n        h = h.return;\n      }\n      if (null === X) throw Error(p(160));\n      ak(f, g, e);\n      X = null;\n      Yj = !1;\n      var k = e.alternate;\n      null !== k && (k.return = null);\n      e.return = null;\n    } catch (l) {\n      W(e, b, l);\n    }\n  }\n  if (b.subtreeFlags & 12854) for (b = b.child; null !== b;) ek(b, a), b = b.sibling;\n}\nfunction ek(a, b) {\n  var c = a.alternate,\n    d = a.flags;\n  switch (a.tag) {\n    case 0:\n    case 11:\n    case 14:\n    case 15:\n      dk(b, a);\n      fk(a);\n      if (d & 4) {\n        try {\n          Qj(3, a, a.return), Rj(3, a);\n        } catch (t) {\n          W(a, a.return, t);\n        }\n        try {\n          Qj(5, a, a.return);\n        } catch (t) {\n          W(a, a.return, t);\n        }\n      }\n      break;\n    case 1:\n      dk(b, a);\n      fk(a);\n      d & 512 && null !== c && Mj(c, c.return);\n      break;\n    case 5:\n      dk(b, a);\n      fk(a);\n      d & 512 && null !== c && Mj(c, c.return);\n      if (a.flags & 32) {\n        var e = a.stateNode;\n        try {\n          ob(e, "");\n        } catch (t) {\n          W(a, a.return, t);\n        }\n      }\n      if (d & 4 && (e = a.stateNode, null != e)) {\n        var f = a.memoizedProps,\n          g = null !== c ? c.memoizedProps : f,\n          h = a.type,\n          k = a.updateQueue;\n        a.updateQueue = null;\n        if (null !== k) try {\n          "input" === h && "radio" === f.type && null != f.name && ab(e, f);\n          vb(h, g);\n          var l = vb(h, f);\n          for (g = 0; g < k.length; g += 2) {\n            var m = k[g],\n              q = k[g + 1];\n            "style" === m ? sb(e, q) : "dangerouslySetInnerHTML" === m ? nb(e, q) : "children" === m ? ob(e, q) : ta(e, m, q, l);\n          }\n          switch (h) {\n            case "input":\n              bb(e, f);\n              break;\n            case "textarea":\n              ib(e, f);\n              break;\n            case "select":\n              var r = e._wrapperState.wasMultiple;\n              e._wrapperState.wasMultiple = !!f.multiple;\n              var y = f.value;\n              null != y ? fb(e, !!f.multiple, y, !1) : r !== !!f.multiple && (null != f.defaultValue ? fb(e, !!f.multiple, f.defaultValue, !0) : fb(e, !!f.multiple, f.multiple ? [] : "", !1));\n          }\n          e[Pf] = f;\n        } catch (t) {\n          W(a, a.return, t);\n        }\n      }\n      break;\n    case 6:\n      dk(b, a);\n      fk(a);\n      if (d & 4) {\n        if (null === a.stateNode) throw Error(p(162));\n        e = a.stateNode;\n        f = a.memoizedProps;\n        try {\n          e.nodeValue = f;\n        } catch (t) {\n          W(a, a.return, t);\n        }\n      }\n      break;\n    case 3:\n      dk(b, a);\n      fk(a);\n      if (d & 4 && null !== c && c.memoizedState.isDehydrated) try {\n        bd(b.containerInfo);\n      } catch (t) {\n        W(a, a.return, t);\n      }\n      break;\n    case 4:\n      dk(b, a);\n      fk(a);\n      break;\n    case 13:\n      dk(b, a);\n      fk(a);\n      e = a.child;\n      e.flags & 8192 && (f = null !== e.memoizedState, e.stateNode.isHidden = f, !f || null !== e.alternate && null !== e.alternate.memoizedState || (gk = B()));\n      d & 4 && bk(a);\n      break;\n    case 22:\n      m = null !== c && null !== c.memoizedState;\n      a.mode & 1 ? (U = (l = U) || m, dk(b, a), U = l) : dk(b, a);\n      fk(a);\n      if (d & 8192) {\n        l = null !== a.memoizedState;\n        if ((a.stateNode.isHidden = l) && !m && 0 !== (a.mode & 1)) for (V = a, m = a.child; null !== m;) {\n          for (q = V = m; null !== V;) {\n            r = V;\n            y = r.child;\n            switch (r.tag) {\n              case 0:\n              case 11:\n              case 14:\n              case 15:\n                Qj(4, r, r.return);\n                break;\n              case 1:\n                Mj(r, r.return);\n                var n = r.stateNode;\n                if ("function" === typeof n.componentWillUnmount) {\n                  d = r;\n                  c = r.return;\n                  try {\n                    b = d, n.props = b.memoizedProps, n.state = b.memoizedState, n.componentWillUnmount();\n                  } catch (t) {\n                    W(d, c, t);\n                  }\n                }\n                break;\n              case 5:\n                Mj(r, r.return);\n                break;\n              case 22:\n                if (null !== r.memoizedState) {\n                  hk(q);\n                  continue;\n                }\n            }\n            null !== y ? (y.return = r, V = y) : hk(q);\n          }\n          m = m.sibling;\n        }\n        a: for (m = null, q = a;;) {\n          if (5 === q.tag) {\n            if (null === m) {\n              m = q;\n              try {\n                e = q.stateNode, l ? (f = e.style, "function" === typeof f.setProperty ? f.setProperty("display", "none", "important") : f.display = "none") : (h = q.stateNode, k = q.memoizedProps.style, g = void 0 !== k && null !== k && k.hasOwnProperty("display") ? k.display : null, h.style.display = rb("display", g));\n              } catch (t) {\n                W(a, a.return, t);\n              }\n            }\n          } else if (6 === q.tag) {\n            if (null === m) try {\n              q.stateNode.nodeValue = l ? "" : q.memoizedProps;\n            } catch (t) {\n              W(a, a.return, t);\n            }\n          } else if ((22 !== q.tag && 23 !== q.tag || null === q.memoizedState || q === a) && null !== q.child) {\n            q.child.return = q;\n            q = q.child;\n            continue;\n          }\n          if (q === a) break a;\n          for (; null === q.sibling;) {\n            if (null === q.return || q.return === a) break a;\n            m === q && (m = null);\n            q = q.return;\n          }\n          m === q && (m = null);\n          q.sibling.return = q.return;\n          q = q.sibling;\n        }\n      }\n      break;\n    case 19:\n      dk(b, a);\n      fk(a);\n      d & 4 && bk(a);\n      break;\n    case 21:\n      break;\n    default:\n      dk(b, a), fk(a);\n  }\n}\nfunction fk(a) {\n  var b = a.flags;\n  if (b & 2) {\n    try {\n      a: {\n        for (var c = a.return; null !== c;) {\n          if (Uj(c)) {\n            var d = c;\n            break a;\n          }\n          c = c.return;\n        }\n        throw Error(p(160));\n      }\n      switch (d.tag) {\n        case 5:\n          var e = d.stateNode;\n          d.flags & 32 && (ob(e, ""), d.flags &= -33);\n          var f = Vj(a);\n          Xj(a, f, e);\n          break;\n        case 3:\n        case 4:\n          var g = d.stateNode.containerInfo,\n            h = Vj(a);\n          Wj(a, h, g);\n          break;\n        default:\n          throw Error(p(161));\n      }\n    } catch (k) {\n      W(a, a.return, k);\n    }\n    a.flags &= -3;\n  }\n  b & 4096 && (a.flags &= -4097);\n}\nfunction ik(a, b, c) {\n  V = a;\n  jk(a, b, c);\n}\nfunction jk(a, b, c) {\n  for (var d = 0 !== (a.mode & 1); null !== V;) {\n    var e = V,\n      f = e.child;\n    if (22 === e.tag && d) {\n      var g = null !== e.memoizedState || Kj;\n      if (!g) {\n        var h = e.alternate,\n          k = null !== h && null !== h.memoizedState || U;\n        h = Kj;\n        var l = U;\n        Kj = g;\n        if ((U = k) && !l) for (V = e; null !== V;) g = V, k = g.child, 22 === g.tag && null !== g.memoizedState ? kk(e) : null !== k ? (k.return = g, V = k) : kk(e);\n        for (; null !== f;) V = f, jk(f, b, c), f = f.sibling;\n        V = e;\n        Kj = h;\n        U = l;\n      }\n      lk(a, b, c);\n    } else 0 !== (e.subtreeFlags & 8772) && null !== f ? (f.return = e, V = f) : lk(a, b, c);\n  }\n}\nfunction lk(a) {\n  for (; null !== V;) {\n    var b = V;\n    if (0 !== (b.flags & 8772)) {\n      var c = b.alternate;\n      try {\n        if (0 !== (b.flags & 8772)) switch (b.tag) {\n          case 0:\n          case 11:\n          case 15:\n            U || Rj(5, b);\n            break;\n          case 1:\n            var d = b.stateNode;\n            if (b.flags & 4 && !U) if (null === c) d.componentDidMount();else {\n              var e = b.elementType === b.type ? c.memoizedProps : Lg(b.type, c.memoizedProps);\n              d.componentDidUpdate(e, c.memoizedState, d.__reactInternalSnapshotBeforeUpdate);\n            }\n            var f = b.updateQueue;\n            null !== f && ih(b, f, d);\n            break;\n          case 3:\n            var g = b.updateQueue;\n            if (null !== g) {\n              c = null;\n              if (null !== b.child) switch (b.child.tag) {\n                case 5:\n                  c = b.child.stateNode;\n                  break;\n                case 1:\n                  c = b.child.stateNode;\n              }\n              ih(b, g, c);\n            }\n            break;\n          case 5:\n            var h = b.stateNode;\n            if (null === c && b.flags & 4) {\n              c = h;\n              var k = b.memoizedProps;\n              switch (b.type) {\n                case "button":\n                case "input":\n                case "select":\n                case "textarea":\n                  k.autoFocus && c.focus();\n                  break;\n                case "img":\n                  k.src && (c.src = k.src);\n              }\n            }\n            break;\n          case 6:\n            break;\n          case 4:\n            break;\n          case 12:\n            break;\n          case 13:\n            if (null === b.memoizedState) {\n              var l = b.alternate;\n              if (null !== l) {\n                var m = l.memoizedState;\n                if (null !== m) {\n                  var q = m.dehydrated;\n                  null !== q && bd(q);\n                }\n              }\n            }\n            break;\n          case 19:\n          case 17:\n          case 21:\n          case 22:\n          case 23:\n          case 25:\n            break;\n          default:\n            throw Error(p(163));\n        }\n        U || b.flags & 512 && Sj(b);\n      } catch (r) {\n        W(b, b.return, r);\n      }\n    }\n    if (b === a) {\n      V = null;\n      break;\n    }\n    c = b.sibling;\n    if (null !== c) {\n      c.return = b.return;\n      V = c;\n      break;\n    }\n    V = b.return;\n  }\n}\nfunction hk(a) {\n  for (; null !== V;) {\n    var b = V;\n    if (b === a) {\n      V = null;\n      break;\n    }\n    var c = b.sibling;\n    if (null !== c) {\n      c.return = b.return;\n      V = c;\n      break;\n    }\n    V = b.return;\n  }\n}\nfunction kk(a) {\n  for (; null !== V;) {\n    var b = V;\n    try {\n      switch (b.tag) {\n        case 0:\n        case 11:\n        case 15:\n          var c = b.return;\n          try {\n            Rj(4, b);\n          } catch (k) {\n            W(b, c, k);\n          }\n          break;\n        case 1:\n          var d = b.stateNode;\n          if ("function" === typeof d.componentDidMount) {\n            var e = b.return;\n            try {\n              d.componentDidMount();\n            } catch (k) {\n              W(b, e, k);\n            }\n          }\n          var f = b.return;\n          try {\n            Sj(b);\n          } catch (k) {\n            W(b, f, k);\n          }\n          break;\n        case 5:\n          var g = b.return;\n          try {\n            Sj(b);\n          } catch (k) {\n            W(b, g, k);\n          }\n      }\n    } catch (k) {\n      W(b, b.return, k);\n    }\n    if (b === a) {\n      V = null;\n      break;\n    }\n    var h = b.sibling;\n    if (null !== h) {\n      h.return = b.return;\n      V = h;\n      break;\n    }\n    V = b.return;\n  }\n}\nvar mk = Math.ceil,\n  nk = ua.ReactCurrentDispatcher,\n  ok = ua.ReactCurrentOwner,\n  pk = ua.ReactCurrentBatchConfig,\n  K = 0,\n  R = null,\n  Y = null,\n  Z = 0,\n  gj = 0,\n  fj = Uf(0),\n  T = 0,\n  qk = null,\n  hh = 0,\n  rk = 0,\n  sk = 0,\n  tk = null,\n  uk = null,\n  gk = 0,\n  Hj = Infinity,\n  vk = null,\n  Pi = !1,\n  Qi = null,\n  Si = null,\n  wk = !1,\n  xk = null,\n  yk = 0,\n  zk = 0,\n  Ak = null,\n  Bk = -1,\n  Ck = 0;\nfunction L() {\n  return 0 !== (K & 6) ? B() : -1 !== Bk ? Bk : Bk = B();\n}\nfunction lh(a) {\n  if (0 === (a.mode & 1)) return 1;\n  if (0 !== (K & 2) && 0 !== Z) return Z & -Z;\n  if (null !== Kg.transition) return 0 === Ck && (Ck = yc()), Ck;\n  a = C;\n  if (0 !== a) return a;\n  a = window.event;\n  a = void 0 === a ? 16 : jd(a.type);\n  return a;\n}\nfunction mh(a, b, c, d) {\n  if (50 < zk) throw zk = 0, Ak = null, Error(p(185));\n  Ac(a, c, d);\n  if (0 === (K & 2) || a !== R) a === R && (0 === (K & 2) && (rk |= c), 4 === T && Dk(a, Z)), Ek(a, d), 1 === c && 0 === K && 0 === (b.mode & 1) && (Hj = B() + 500, fg && jg());\n}\nfunction Ek(a, b) {\n  var c = a.callbackNode;\n  wc(a, b);\n  var d = uc(a, a === R ? Z : 0);\n  if (0 === d) null !== c && bc(c), a.callbackNode = null, a.callbackPriority = 0;else if (b = d & -d, a.callbackPriority !== b) {\n    null != c && bc(c);\n    if (1 === b) 0 === a.tag ? ig(Fk.bind(null, a)) : hg(Fk.bind(null, a)), Jf(function () {\n      0 === (K & 6) && jg();\n    }), c = null;else {\n      switch (Dc(d)) {\n        case 1:\n          c = fc;\n          break;\n        case 4:\n          c = gc;\n          break;\n        case 16:\n          c = hc;\n          break;\n        case 536870912:\n          c = jc;\n          break;\n        default:\n          c = hc;\n      }\n      c = Gk(c, Hk.bind(null, a));\n    }\n    a.callbackPriority = b;\n    a.callbackNode = c;\n  }\n}\nfunction Hk(a, b) {\n  Bk = -1;\n  Ck = 0;\n  if (0 !== (K & 6)) throw Error(p(327));\n  var c = a.callbackNode;\n  if (Ik() && a.callbackNode !== c) return null;\n  var d = uc(a, a === R ? Z : 0);\n  if (0 === d) return null;\n  if (0 !== (d & 30) || 0 !== (d & a.expiredLanes) || b) b = Jk(a, d);else {\n    b = d;\n    var e = K;\n    K |= 2;\n    var f = Kk();\n    if (R !== a || Z !== b) vk = null, Hj = B() + 500, Lk(a, b);\n    do try {\n      Mk();\n      break;\n    } catch (h) {\n      Nk(a, h);\n    } while (1);\n    Qg();\n    nk.current = f;\n    K = e;\n    null !== Y ? b = 0 : (R = null, Z = 0, b = T);\n  }\n  if (0 !== b) {\n    2 === b && (e = xc(a), 0 !== e && (d = e, b = Ok(a, e)));\n    if (1 === b) throw c = qk, Lk(a, 0), Dk(a, d), Ek(a, B()), c;\n    if (6 === b) Dk(a, d);else {\n      e = a.current.alternate;\n      if (0 === (d & 30) && !Pk(e) && (b = Jk(a, d), 2 === b && (f = xc(a), 0 !== f && (d = f, b = Ok(a, f))), 1 === b)) throw c = qk, Lk(a, 0), Dk(a, d), Ek(a, B()), c;\n      a.finishedWork = e;\n      a.finishedLanes = d;\n      switch (b) {\n        case 0:\n        case 1:\n          throw Error(p(345));\n        case 2:\n          Qk(a, uk, vk);\n          break;\n        case 3:\n          Dk(a, d);\n          if ((d & 130023424) === d && (b = gk + 500 - B(), 10 < b)) {\n            if (0 !== uc(a, 0)) break;\n            e = a.suspendedLanes;\n            if ((e & d) !== d) {\n              L();\n              a.pingedLanes |= a.suspendedLanes & e;\n              break;\n            }\n            a.timeoutHandle = Ff(Qk.bind(null, a, uk, vk), b);\n            break;\n          }\n          Qk(a, uk, vk);\n          break;\n        case 4:\n          Dk(a, d);\n          if ((d & 4194240) === d) break;\n          b = a.eventTimes;\n          for (e = -1; 0 < d;) {\n            var g = 31 - oc(d);\n            f = 1 << g;\n            g = b[g];\n            g > e && (e = g);\n            d &= ~f;\n          }\n          d = e;\n          d = B() - d;\n          d = (120 > d ? 120 : 480 > d ? 480 : 1080 > d ? 1080 : 1920 > d ? 1920 : 3E3 > d ? 3E3 : 4320 > d ? 4320 : 1960 * mk(d / 1960)) - d;\n          if (10 < d) {\n            a.timeoutHandle = Ff(Qk.bind(null, a, uk, vk), d);\n            break;\n          }\n          Qk(a, uk, vk);\n          break;\n        case 5:\n          Qk(a, uk, vk);\n          break;\n        default:\n          throw Error(p(329));\n      }\n    }\n  }\n  Ek(a, B());\n  return a.callbackNode === c ? Hk.bind(null, a) : null;\n}\nfunction Ok(a, b) {\n  var c = tk;\n  a.current.memoizedState.isDehydrated && (Lk(a, b).flags |= 256);\n  a = Jk(a, b);\n  2 !== a && (b = uk, uk = c, null !== b && Gj(b));\n  return a;\n}\nfunction Gj(a) {\n  null === uk ? uk = a : uk.push.apply(uk, a);\n}\nfunction Pk(a) {\n  for (var b = a;;) {\n    if (b.flags & 16384) {\n      var c = b.updateQueue;\n      if (null !== c && (c = c.stores, null !== c)) for (var d = 0; d < c.length; d++) {\n        var e = c[d],\n          f = e.getSnapshot;\n        e = e.value;\n        try {\n          if (!He(f(), e)) return !1;\n        } catch (g) {\n          return !1;\n        }\n      }\n    }\n    c = b.child;\n    if (b.subtreeFlags & 16384 && null !== c) c.return = b, b = c;else {\n      if (b === a) break;\n      for (; null === b.sibling;) {\n        if (null === b.return || b.return === a) return !0;\n        b = b.return;\n      }\n      b.sibling.return = b.return;\n      b = b.sibling;\n    }\n  }\n  return !0;\n}\nfunction Dk(a, b) {\n  b &= ~sk;\n  b &= ~rk;\n  a.suspendedLanes |= b;\n  a.pingedLanes &= ~b;\n  for (a = a.expirationTimes; 0 < b;) {\n    var c = 31 - oc(b),\n      d = 1 << c;\n    a[c] = -1;\n    b &= ~d;\n  }\n}\nfunction Fk(a) {\n  if (0 !== (K & 6)) throw Error(p(327));\n  Ik();\n  var b = uc(a, 0);\n  if (0 === (b & 1)) return Ek(a, B()), null;\n  var c = Jk(a, b);\n  if (0 !== a.tag && 2 === c) {\n    var d = xc(a);\n    0 !== d && (b = d, c = Ok(a, d));\n  }\n  if (1 === c) throw c = qk, Lk(a, 0), Dk(a, b), Ek(a, B()), c;\n  if (6 === c) throw Error(p(345));\n  a.finishedWork = a.current.alternate;\n  a.finishedLanes = b;\n  Qk(a, uk, vk);\n  Ek(a, B());\n  return null;\n}\nfunction Rk(a, b) {\n  var c = K;\n  K |= 1;\n  try {\n    return a(b);\n  } finally {\n    K = c, 0 === K && (Hj = B() + 500, fg && jg());\n  }\n}\nfunction Sk(a) {\n  null !== xk && 0 === xk.tag && 0 === (K & 6) && Ik();\n  var b = K;\n  K |= 1;\n  var c = pk.transition,\n    d = C;\n  try {\n    if (pk.transition = null, C = 1, a) return a();\n  } finally {\n    C = d, pk.transition = c, K = b, 0 === (K & 6) && jg();\n  }\n}\nfunction Ij() {\n  gj = fj.current;\n  E(fj);\n}\nfunction Lk(a, b) {\n  a.finishedWork = null;\n  a.finishedLanes = 0;\n  var c = a.timeoutHandle;\n  -1 !== c && (a.timeoutHandle = -1, Gf(c));\n  if (null !== Y) for (c = Y.return; null !== c;) {\n    var d = c;\n    wg(d);\n    switch (d.tag) {\n      case 1:\n        d = d.type.childContextTypes;\n        null !== d && void 0 !== d && $f();\n        break;\n      case 3:\n        Jh();\n        E(Wf);\n        E(H);\n        Oh();\n        break;\n      case 5:\n        Lh(d);\n        break;\n      case 4:\n        Jh();\n        break;\n      case 13:\n        E(M);\n        break;\n      case 19:\n        E(M);\n        break;\n      case 10:\n        Rg(d.type._context);\n        break;\n      case 22:\n      case 23:\n        Ij();\n    }\n    c = c.return;\n  }\n  R = a;\n  Y = a = wh(a.current, null);\n  Z = gj = b;\n  T = 0;\n  qk = null;\n  sk = rk = hh = 0;\n  uk = tk = null;\n  if (null !== Wg) {\n    for (b = 0; b < Wg.length; b++) if (c = Wg[b], d = c.interleaved, null !== d) {\n      c.interleaved = null;\n      var e = d.next,\n        f = c.pending;\n      if (null !== f) {\n        var g = f.next;\n        f.next = e;\n        d.next = g;\n      }\n      c.pending = d;\n    }\n    Wg = null;\n  }\n  return a;\n}\nfunction Nk(a, b) {\n  do {\n    var c = Y;\n    try {\n      Qg();\n      Ph.current = ai;\n      if (Sh) {\n        for (var d = N.memoizedState; null !== d;) {\n          var e = d.queue;\n          null !== e && (e.pending = null);\n          d = d.next;\n        }\n        Sh = !1;\n      }\n      Rh = 0;\n      P = O = N = null;\n      Th = !1;\n      Uh = 0;\n      ok.current = null;\n      if (null === c || null === c.return) {\n        T = 1;\n        qk = b;\n        Y = null;\n        break;\n      }\n      a: {\n        var f = a,\n          g = c.return,\n          h = c,\n          k = b;\n        b = Z;\n        h.flags |= 32768;\n        if (null !== k && "object" === typeof k && "function" === typeof k.then) {\n          var l = k,\n            m = h,\n            q = m.tag;\n          if (0 === (m.mode & 1) && (0 === q || 11 === q || 15 === q)) {\n            var r = m.alternate;\n            r ? (m.updateQueue = r.updateQueue, m.memoizedState = r.memoizedState, m.lanes = r.lanes) : (m.updateQueue = null, m.memoizedState = null);\n          }\n          var y = Vi(g);\n          if (null !== y) {\n            y.flags &= -257;\n            Wi(y, g, h, f, b);\n            y.mode & 1 && Ti(f, l, b);\n            b = y;\n            k = l;\n            var n = b.updateQueue;\n            if (null === n) {\n              var t = new Set();\n              t.add(k);\n              b.updateQueue = t;\n            } else n.add(k);\n            break a;\n          } else {\n            if (0 === (b & 1)) {\n              Ti(f, l, b);\n              uj();\n              break a;\n            }\n            k = Error(p(426));\n          }\n        } else if (I && h.mode & 1) {\n          var J = Vi(g);\n          if (null !== J) {\n            0 === (J.flags & 65536) && (J.flags |= 256);\n            Wi(J, g, h, f, b);\n            Jg(Ki(k, h));\n            break a;\n          }\n        }\n        f = k = Ki(k, h);\n        4 !== T && (T = 2);\n        null === tk ? tk = [f] : tk.push(f);\n        f = g;\n        do {\n          switch (f.tag) {\n            case 3:\n              f.flags |= 65536;\n              b &= -b;\n              f.lanes |= b;\n              var x = Oi(f, k, b);\n              fh(f, x);\n              break a;\n            case 1:\n              h = k;\n              var w = f.type,\n                u = f.stateNode;\n              if (0 === (f.flags & 128) && ("function" === typeof w.getDerivedStateFromError || null !== u && "function" === typeof u.componentDidCatch && (null === Si || !Si.has(u)))) {\n                f.flags |= 65536;\n                b &= -b;\n                f.lanes |= b;\n                var F = Ri(f, h, b);\n                fh(f, F);\n                break a;\n              }\n          }\n          f = f.return;\n        } while (null !== f);\n      }\n      Tk(c);\n    } catch (na) {\n      b = na;\n      Y === c && null !== c && (Y = c = c.return);\n      continue;\n    }\n    break;\n  } while (1);\n}\nfunction Kk() {\n  var a = nk.current;\n  nk.current = ai;\n  return null === a ? ai : a;\n}\nfunction uj() {\n  if (0 === T || 3 === T || 2 === T) T = 4;\n  null === R || 0 === (hh & 268435455) && 0 === (rk & 268435455) || Dk(R, Z);\n}\nfunction Jk(a, b) {\n  var c = K;\n  K |= 2;\n  var d = Kk();\n  if (R !== a || Z !== b) vk = null, Lk(a, b);\n  do try {\n    Uk();\n    break;\n  } catch (e) {\n    Nk(a, e);\n  } while (1);\n  Qg();\n  K = c;\n  nk.current = d;\n  if (null !== Y) throw Error(p(261));\n  R = null;\n  Z = 0;\n  return T;\n}\nfunction Uk() {\n  for (; null !== Y;) Vk(Y);\n}\nfunction Mk() {\n  for (; null !== Y && !cc();) Vk(Y);\n}\nfunction Vk(a) {\n  var b = Wk(a.alternate, a, gj);\n  a.memoizedProps = a.pendingProps;\n  null === b ? Tk(a) : Y = b;\n  ok.current = null;\n}\nfunction Tk(a) {\n  var b = a;\n  do {\n    var c = b.alternate;\n    a = b.return;\n    if (0 === (b.flags & 32768)) {\n      if (c = Fj(c, b, gj), null !== c) {\n        Y = c;\n        return;\n      }\n    } else {\n      c = Jj(c, b);\n      if (null !== c) {\n        c.flags &= 32767;\n        Y = c;\n        return;\n      }\n      if (null !== a) a.flags |= 32768, a.subtreeFlags = 0, a.deletions = null;else {\n        T = 6;\n        Y = null;\n        return;\n      }\n    }\n    b = b.sibling;\n    if (null !== b) {\n      Y = b;\n      return;\n    }\n    Y = b = a;\n  } while (null !== b);\n  0 === T && (T = 5);\n}\nfunction Qk(a, b, c) {\n  var d = C,\n    e = pk.transition;\n  try {\n    pk.transition = null, C = 1, Xk(a, b, c, d);\n  } finally {\n    pk.transition = e, C = d;\n  }\n  return null;\n}\nfunction Xk(a, b, c, d) {\n  do Ik(); while (null !== xk);\n  if (0 !== (K & 6)) throw Error(p(327));\n  c = a.finishedWork;\n  var e = a.finishedLanes;\n  if (null === c) return null;\n  a.finishedWork = null;\n  a.finishedLanes = 0;\n  if (c === a.current) throw Error(p(177));\n  a.callbackNode = null;\n  a.callbackPriority = 0;\n  var f = c.lanes | c.childLanes;\n  Bc(a, f);\n  a === R && (Y = R = null, Z = 0);\n  0 === (c.subtreeFlags & 2064) && 0 === (c.flags & 2064) || wk || (wk = !0, Gk(hc, function () {\n    Ik();\n    return null;\n  }));\n  f = 0 !== (c.flags & 15990);\n  if (0 !== (c.subtreeFlags & 15990) || f) {\n    f = pk.transition;\n    pk.transition = null;\n    var g = C;\n    C = 1;\n    var h = K;\n    K |= 4;\n    ok.current = null;\n    Pj(a, c);\n    ek(c, a);\n    Oe(Df);\n    dd = !!Cf;\n    Df = Cf = null;\n    a.current = c;\n    ik(c, a, e);\n    dc();\n    K = h;\n    C = g;\n    pk.transition = f;\n  } else a.current = c;\n  wk && (wk = !1, xk = a, yk = e);\n  f = a.pendingLanes;\n  0 === f && (Si = null);\n  mc(c.stateNode, d);\n  Ek(a, B());\n  if (null !== b) for (d = a.onRecoverableError, c = 0; c < b.length; c++) e = b[c], d(e.value, {\n    componentStack: e.stack,\n    digest: e.digest\n  });\n  if (Pi) throw Pi = !1, a = Qi, Qi = null, a;\n  0 !== (yk & 1) && 0 !== a.tag && Ik();\n  f = a.pendingLanes;\n  0 !== (f & 1) ? a === Ak ? zk++ : (zk = 0, Ak = a) : zk = 0;\n  jg();\n  return null;\n}\nfunction Ik() {\n  if (null !== xk) {\n    var a = Dc(yk),\n      b = pk.transition,\n      c = C;\n    try {\n      pk.transition = null;\n      C = 16 > a ? 16 : a;\n      if (null === xk) var d = !1;else {\n        a = xk;\n        xk = null;\n        yk = 0;\n        if (0 !== (K & 6)) throw Error(p(331));\n        var e = K;\n        K |= 4;\n        for (V = a.current; null !== V;) {\n          var f = V,\n            g = f.child;\n          if (0 !== (V.flags & 16)) {\n            var h = f.deletions;\n            if (null !== h) {\n              for (var k = 0; k < h.length; k++) {\n                var l = h[k];\n                for (V = l; null !== V;) {\n                  var m = V;\n                  switch (m.tag) {\n                    case 0:\n                    case 11:\n                    case 15:\n                      Qj(8, m, f);\n                  }\n                  var q = m.child;\n                  if (null !== q) q.return = m, V = q;else for (; null !== V;) {\n                    m = V;\n                    var r = m.sibling,\n                      y = m.return;\n                    Tj(m);\n                    if (m === l) {\n                      V = null;\n                      break;\n                    }\n                    if (null !== r) {\n                      r.return = y;\n                      V = r;\n                      break;\n                    }\n                    V = y;\n                  }\n                }\n              }\n              var n = f.alternate;\n              if (null !== n) {\n                var t = n.child;\n                if (null !== t) {\n                  n.child = null;\n                  do {\n                    var J = t.sibling;\n                    t.sibling = null;\n                    t = J;\n                  } while (null !== t);\n                }\n              }\n              V = f;\n            }\n          }\n          if (0 !== (f.subtreeFlags & 2064) && null !== g) g.return = f, V = g;else b: for (; null !== V;) {\n            f = V;\n            if (0 !== (f.flags & 2048)) switch (f.tag) {\n              case 0:\n              case 11:\n              case 15:\n                Qj(9, f, f.return);\n            }\n            var x = f.sibling;\n            if (null !== x) {\n              x.return = f.return;\n              V = x;\n              break b;\n            }\n            V = f.return;\n          }\n        }\n        var w = a.current;\n        for (V = w; null !== V;) {\n          g = V;\n          var u = g.child;\n          if (0 !== (g.subtreeFlags & 2064) && null !== u) u.return = g, V = u;else b: for (g = w; null !== V;) {\n            h = V;\n            if (0 !== (h.flags & 2048)) try {\n              switch (h.tag) {\n                case 0:\n                case 11:\n                case 15:\n                  Rj(9, h);\n              }\n            } catch (na) {\n              W(h, h.return, na);\n            }\n            if (h === g) {\n              V = null;\n              break b;\n            }\n            var F = h.sibling;\n            if (null !== F) {\n              F.return = h.return;\n              V = F;\n              break b;\n            }\n            V = h.return;\n          }\n        }\n        K = e;\n        jg();\n        if (lc && "function" === typeof lc.onPostCommitFiberRoot) try {\n          lc.onPostCommitFiberRoot(kc, a);\n        } catch (na) {}\n        d = !0;\n      }\n      return d;\n    } finally {\n      C = c, pk.transition = b;\n    }\n  }\n  return !1;\n}\nfunction Yk(a, b, c) {\n  b = Ki(c, b);\n  b = Oi(a, b, 1);\n  a = dh(a, b, 1);\n  b = L();\n  null !== a && (Ac(a, 1, b), Ek(a, b));\n}\nfunction W(a, b, c) {\n  if (3 === a.tag) Yk(a, a, c);else for (; null !== b;) {\n    if (3 === b.tag) {\n      Yk(b, a, c);\n      break;\n    } else if (1 === b.tag) {\n      var d = b.stateNode;\n      if ("function" === typeof b.type.getDerivedStateFromError || "function" === typeof d.componentDidCatch && (null === Si || !Si.has(d))) {\n        a = Ki(c, a);\n        a = Ri(b, a, 1);\n        b = dh(b, a, 1);\n        a = L();\n        null !== b && (Ac(b, 1, a), Ek(b, a));\n        break;\n      }\n    }\n    b = b.return;\n  }\n}\nfunction Ui(a, b, c) {\n  var d = a.pingCache;\n  null !== d && d.delete(b);\n  b = L();\n  a.pingedLanes |= a.suspendedLanes & c;\n  R === a && (Z & c) === c && (4 === T || 3 === T && (Z & 130023424) === Z && 500 > B() - gk ? Lk(a, 0) : sk |= c);\n  Ek(a, b);\n}\nfunction Zk(a, b) {\n  0 === b && (0 === (a.mode & 1) ? b = 1 : (b = sc, sc <<= 1, 0 === (sc & 130023424) && (sc = 4194304)));\n  var c = L();\n  a = Zg(a, b);\n  null !== a && (Ac(a, b, c), Ek(a, c));\n}\nfunction vj(a) {\n  var b = a.memoizedState,\n    c = 0;\n  null !== b && (c = b.retryLane);\n  Zk(a, c);\n}\nfunction ck(a, b) {\n  var c = 0;\n  switch (a.tag) {\n    case 13:\n      var d = a.stateNode;\n      var e = a.memoizedState;\n      null !== e && (c = e.retryLane);\n      break;\n    case 19:\n      d = a.stateNode;\n      break;\n    default:\n      throw Error(p(314));\n  }\n  null !== d && d.delete(b);\n  Zk(a, c);\n}\nvar Wk;\nWk = function (a, b, c) {\n  if (null !== a) {\n    if (a.memoizedProps !== b.pendingProps || Wf.current) Ug = !0;else {\n      if (0 === (a.lanes & c) && 0 === (b.flags & 128)) return Ug = !1, zj(a, b, c);\n      Ug = 0 !== (a.flags & 131072) ? !0 : !1;\n    }\n  } else Ug = !1, I && 0 !== (b.flags & 1048576) && ug(b, ng, b.index);\n  b.lanes = 0;\n  switch (b.tag) {\n    case 2:\n      var d = b.type;\n      jj(a, b);\n      a = b.pendingProps;\n      var e = Yf(b, H.current);\n      Tg(b, c);\n      e = Xh(null, b, d, a, e, c);\n      var f = bi();\n      b.flags |= 1;\n      "object" === typeof e && null !== e && "function" === typeof e.render && void 0 === e.$$typeof ? (b.tag = 1, b.memoizedState = null, b.updateQueue = null, Zf(d) ? (f = !0, cg(b)) : f = !1, b.memoizedState = null !== e.state && void 0 !== e.state ? e.state : null, ah(b), e.updater = nh, b.stateNode = e, e._reactInternals = b, rh(b, d, a, c), b = kj(null, b, d, !0, f, c)) : (b.tag = 0, I && f && vg(b), Yi(null, b, e, c), b = b.child);\n      return b;\n    case 16:\n      d = b.elementType;\n      a: {\n        jj(a, b);\n        a = b.pendingProps;\n        e = d._init;\n        d = e(d._payload);\n        b.type = d;\n        e = b.tag = $k(d);\n        a = Lg(d, a);\n        switch (e) {\n          case 0:\n            b = dj(null, b, d, a, c);\n            break a;\n          case 1:\n            b = ij(null, b, d, a, c);\n            break a;\n          case 11:\n            b = Zi(null, b, d, a, c);\n            break a;\n          case 14:\n            b = aj(null, b, d, Lg(d.type, a), c);\n            break a;\n        }\n        throw Error(p(306, d, ""));\n      }\n      return b;\n    case 0:\n      return d = b.type, e = b.pendingProps, e = b.elementType === d ? e : Lg(d, e), dj(a, b, d, e, c);\n    case 1:\n      return d = b.type, e = b.pendingProps, e = b.elementType === d ? e : Lg(d, e), ij(a, b, d, e, c);\n    case 3:\n      a: {\n        lj(b);\n        if (null === a) throw Error(p(387));\n        d = b.pendingProps;\n        f = b.memoizedState;\n        e = f.element;\n        bh(a, b);\n        gh(b, d, null, c);\n        var g = b.memoizedState;\n        d = g.element;\n        if (f.isDehydrated) {\n          if (f = {\n            element: d,\n            isDehydrated: !1,\n            cache: g.cache,\n            pendingSuspenseBoundaries: g.pendingSuspenseBoundaries,\n            transitions: g.transitions\n          }, b.updateQueue.baseState = f, b.memoizedState = f, b.flags & 256) {\n            e = Ki(Error(p(423)), b);\n            b = mj(a, b, d, c, e);\n            break a;\n          } else if (d !== e) {\n            e = Ki(Error(p(424)), b);\n            b = mj(a, b, d, c, e);\n            break a;\n          } else for (yg = Lf(b.stateNode.containerInfo.firstChild), xg = b, I = !0, zg = null, c = Ch(b, null, d, c), b.child = c; c;) c.flags = c.flags & -3 | 4096, c = c.sibling;\n        } else {\n          Ig();\n          if (d === e) {\n            b = $i(a, b, c);\n            break a;\n          }\n          Yi(a, b, d, c);\n        }\n        b = b.child;\n      }\n      return b;\n    case 5:\n      return Kh(b), null === a && Eg(b), d = b.type, e = b.pendingProps, f = null !== a ? a.memoizedProps : null, g = e.children, Ef(d, e) ? g = null : null !== f && Ef(d, f) && (b.flags |= 32), hj(a, b), Yi(a, b, g, c), b.child;\n    case 6:\n      return null === a && Eg(b), null;\n    case 13:\n      return pj(a, b, c);\n    case 4:\n      return Ih(b, b.stateNode.containerInfo), d = b.pendingProps, null === a ? b.child = Bh(b, null, d, c) : Yi(a, b, d, c), b.child;\n    case 11:\n      return d = b.type, e = b.pendingProps, e = b.elementType === d ? e : Lg(d, e), Zi(a, b, d, e, c);\n    case 7:\n      return Yi(a, b, b.pendingProps, c), b.child;\n    case 8:\n      return Yi(a, b, b.pendingProps.children, c), b.child;\n    case 12:\n      return Yi(a, b, b.pendingProps.children, c), b.child;\n    case 10:\n      a: {\n        d = b.type._context;\n        e = b.pendingProps;\n        f = b.memoizedProps;\n        g = e.value;\n        G(Mg, d._currentValue);\n        d._currentValue = g;\n        if (null !== f) if (He(f.value, g)) {\n          if (f.children === e.children && !Wf.current) {\n            b = $i(a, b, c);\n            break a;\n          }\n        } else for (f = b.child, null !== f && (f.return = b); null !== f;) {\n          var h = f.dependencies;\n          if (null !== h) {\n            g = f.child;\n            for (var k = h.firstContext; null !== k;) {\n              if (k.context === d) {\n                if (1 === f.tag) {\n                  k = ch(-1, c & -c);\n                  k.tag = 2;\n                  var l = f.updateQueue;\n                  if (null !== l) {\n                    l = l.shared;\n                    var m = l.pending;\n                    null === m ? k.next = k : (k.next = m.next, m.next = k);\n                    l.pending = k;\n                  }\n                }\n                f.lanes |= c;\n                k = f.alternate;\n                null !== k && (k.lanes |= c);\n                Sg(f.return, c, b);\n                h.lanes |= c;\n                break;\n              }\n              k = k.next;\n            }\n          } else if (10 === f.tag) g = f.type === b.type ? null : f.child;else if (18 === f.tag) {\n            g = f.return;\n            if (null === g) throw Error(p(341));\n            g.lanes |= c;\n            h = g.alternate;\n            null !== h && (h.lanes |= c);\n            Sg(g, c, b);\n            g = f.sibling;\n          } else g = f.child;\n          if (null !== g) g.return = f;else for (g = f; null !== g;) {\n            if (g === b) {\n              g = null;\n              break;\n            }\n            f = g.sibling;\n            if (null !== f) {\n              f.return = g.return;\n              g = f;\n              break;\n            }\n            g = g.return;\n          }\n          f = g;\n        }\n        Yi(a, b, e.children, c);\n        b = b.child;\n      }\n      return b;\n    case 9:\n      return e = b.type, d = b.pendingProps.children, Tg(b, c), e = Vg(e), d = d(e), b.flags |= 1, Yi(a, b, d, c), b.child;\n    case 14:\n      return d = b.type, e = Lg(d, b.pendingProps), e = Lg(d.type, e), aj(a, b, d, e, c);\n    case 15:\n      return cj(a, b, b.type, b.pendingProps, c);\n    case 17:\n      return d = b.type, e = b.pendingProps, e = b.elementType === d ? e : Lg(d, e), jj(a, b), b.tag = 1, Zf(d) ? (a = !0, cg(b)) : a = !1, Tg(b, c), ph(b, d, e), rh(b, d, e, c), kj(null, b, d, !0, a, c);\n    case 19:\n      return yj(a, b, c);\n    case 22:\n      return ej(a, b, c);\n  }\n  throw Error(p(156, b.tag));\n};\nfunction Gk(a, b) {\n  return ac(a, b);\n}\nfunction al(a, b, c, d) {\n  this.tag = a;\n  this.key = c;\n  this.sibling = this.child = this.return = this.stateNode = this.type = this.elementType = null;\n  this.index = 0;\n  this.ref = null;\n  this.pendingProps = b;\n  this.dependencies = this.memoizedState = this.updateQueue = this.memoizedProps = null;\n  this.mode = d;\n  this.subtreeFlags = this.flags = 0;\n  this.deletions = null;\n  this.childLanes = this.lanes = 0;\n  this.alternate = null;\n}\nfunction Bg(a, b, c, d) {\n  return new al(a, b, c, d);\n}\nfunction bj(a) {\n  a = a.prototype;\n  return !(!a || !a.isReactComponent);\n}\nfunction $k(a) {\n  if ("function" === typeof a) return bj(a) ? 1 : 0;\n  if (void 0 !== a && null !== a) {\n    a = a.$$typeof;\n    if (a === Da) return 11;\n    if (a === Ga) return 14;\n  }\n  return 2;\n}\nfunction wh(a, b) {\n  var c = a.alternate;\n  null === c ? (c = Bg(a.tag, b, a.key, a.mode), c.elementType = a.elementType, c.type = a.type, c.stateNode = a.stateNode, c.alternate = a, a.alternate = c) : (c.pendingProps = b, c.type = a.type, c.flags = 0, c.subtreeFlags = 0, c.deletions = null);\n  c.flags = a.flags & 14680064;\n  c.childLanes = a.childLanes;\n  c.lanes = a.lanes;\n  c.child = a.child;\n  c.memoizedProps = a.memoizedProps;\n  c.memoizedState = a.memoizedState;\n  c.updateQueue = a.updateQueue;\n  b = a.dependencies;\n  c.dependencies = null === b ? null : {\n    lanes: b.lanes,\n    firstContext: b.firstContext\n  };\n  c.sibling = a.sibling;\n  c.index = a.index;\n  c.ref = a.ref;\n  return c;\n}\nfunction yh(a, b, c, d, e, f) {\n  var g = 2;\n  d = a;\n  if ("function" === typeof a) bj(a) && (g = 1);else if ("string" === typeof a) g = 5;else a: switch (a) {\n    case ya:\n      return Ah(c.children, e, f, b);\n    case za:\n      g = 8;\n      e |= 8;\n      break;\n    case Aa:\n      return a = Bg(12, c, b, e | 2), a.elementType = Aa, a.lanes = f, a;\n    case Ea:\n      return a = Bg(13, c, b, e), a.elementType = Ea, a.lanes = f, a;\n    case Fa:\n      return a = Bg(19, c, b, e), a.elementType = Fa, a.lanes = f, a;\n    case Ia:\n      return qj(c, e, f, b);\n    default:\n      if ("object" === typeof a && null !== a) switch (a.$$typeof) {\n        case Ba:\n          g = 10;\n          break a;\n        case Ca:\n          g = 9;\n          break a;\n        case Da:\n          g = 11;\n          break a;\n        case Ga:\n          g = 14;\n          break a;\n        case Ha:\n          g = 16;\n          d = null;\n          break a;\n      }\n      throw Error(p(130, null == a ? a : typeof a, ""));\n  }\n  b = Bg(g, c, b, e);\n  b.elementType = a;\n  b.type = d;\n  b.lanes = f;\n  return b;\n}\nfunction Ah(a, b, c, d) {\n  a = Bg(7, a, d, b);\n  a.lanes = c;\n  return a;\n}\nfunction qj(a, b, c, d) {\n  a = Bg(22, a, d, b);\n  a.elementType = Ia;\n  a.lanes = c;\n  a.stateNode = {\n    isHidden: !1\n  };\n  return a;\n}\nfunction xh(a, b, c) {\n  a = Bg(6, a, null, b);\n  a.lanes = c;\n  return a;\n}\nfunction zh(a, b, c) {\n  b = Bg(4, null !== a.children ? a.children : [], a.key, b);\n  b.lanes = c;\n  b.stateNode = {\n    containerInfo: a.containerInfo,\n    pendingChildren: null,\n    implementation: a.implementation\n  };\n  return b;\n}\nfunction bl(a, b, c, d, e) {\n  this.tag = b;\n  this.containerInfo = a;\n  this.finishedWork = this.pingCache = this.current = this.pendingChildren = null;\n  this.timeoutHandle = -1;\n  this.callbackNode = this.pendingContext = this.context = null;\n  this.callbackPriority = 0;\n  this.eventTimes = zc(0);\n  this.expirationTimes = zc(-1);\n  this.entangledLanes = this.finishedLanes = this.mutableReadLanes = this.expiredLanes = this.pingedLanes = this.suspendedLanes = this.pendingLanes = 0;\n  this.entanglements = zc(0);\n  this.identifierPrefix = d;\n  this.onRecoverableError = e;\n  this.mutableSourceEagerHydrationData = null;\n}\nfunction cl(a, b, c, d, e, f, g, h, k) {\n  a = new bl(a, b, c, h, k);\n  1 === b ? (b = 1, !0 === f && (b |= 8)) : b = 0;\n  f = Bg(3, null, null, b);\n  a.current = f;\n  f.stateNode = a;\n  f.memoizedState = {\n    element: d,\n    isDehydrated: c,\n    cache: null,\n    transitions: null,\n    pendingSuspenseBoundaries: null\n  };\n  ah(f);\n  return a;\n}\nfunction dl(a, b, c) {\n  var d = 3 < arguments.length && void 0 !== arguments[3] ? arguments[3] : null;\n  return {\n    $$typeof: wa,\n    key: null == d ? null : "" + d,\n    children: a,\n    containerInfo: b,\n    implementation: c\n  };\n}\nfunction el(a) {\n  if (!a) return Vf;\n  a = a._reactInternals;\n  a: {\n    if (Vb(a) !== a || 1 !== a.tag) throw Error(p(170));\n    var b = a;\n    do {\n      switch (b.tag) {\n        case 3:\n          b = b.stateNode.context;\n          break a;\n        case 1:\n          if (Zf(b.type)) {\n            b = b.stateNode.__reactInternalMemoizedMergedChildContext;\n            break a;\n          }\n      }\n      b = b.return;\n    } while (null !== b);\n    throw Error(p(171));\n  }\n  if (1 === a.tag) {\n    var c = a.type;\n    if (Zf(c)) return bg(a, c, b);\n  }\n  return b;\n}\nfunction fl(a, b, c, d, e, f, g, h, k) {\n  a = cl(c, d, !0, a, e, f, g, h, k);\n  a.context = el(null);\n  c = a.current;\n  d = L();\n  e = lh(c);\n  f = ch(d, e);\n  f.callback = void 0 !== b && null !== b ? b : null;\n  dh(c, f, e);\n  a.current.lanes = e;\n  Ac(a, e, d);\n  Ek(a, d);\n  return a;\n}\nfunction gl(a, b, c, d) {\n  var e = b.current,\n    f = L(),\n    g = lh(e);\n  c = el(c);\n  null === b.context ? b.context = c : b.pendingContext = c;\n  b = ch(f, g);\n  b.payload = {\n    element: a\n  };\n  d = void 0 === d ? null : d;\n  null !== d && (b.callback = d);\n  a = dh(e, b, g);\n  null !== a && (mh(a, e, g, f), eh(a, e, g));\n  return g;\n}\nfunction hl(a) {\n  a = a.current;\n  if (!a.child) return null;\n  switch (a.child.tag) {\n    case 5:\n      return a.child.stateNode;\n    default:\n      return a.child.stateNode;\n  }\n}\nfunction il(a, b) {\n  a = a.memoizedState;\n  if (null !== a && null !== a.dehydrated) {\n    var c = a.retryLane;\n    a.retryLane = 0 !== c && c < b ? c : b;\n  }\n}\nfunction jl(a, b) {\n  il(a, b);\n  (a = a.alternate) && il(a, b);\n}\nfunction kl() {\n  return null;\n}\nvar ll = "function" === typeof reportError ? reportError : function (a) {\n  console.error(a);\n};\nfunction ml(a) {\n  this._internalRoot = a;\n}\nnl.prototype.render = ml.prototype.render = function (a) {\n  var b = this._internalRoot;\n  if (null === b) throw Error(p(409));\n  gl(a, b, null, null);\n};\nnl.prototype.unmount = ml.prototype.unmount = function () {\n  var a = this._internalRoot;\n  if (null !== a) {\n    this._internalRoot = null;\n    var b = a.containerInfo;\n    Sk(function () {\n      gl(null, a, null, null);\n    });\n    b[uf] = null;\n  }\n};\nfunction nl(a) {\n  this._internalRoot = a;\n}\nnl.prototype.unstable_scheduleHydration = function (a) {\n  if (a) {\n    var b = Hc();\n    a = {\n      blockedOn: null,\n      target: a,\n      priority: b\n    };\n    for (var c = 0; c < Qc.length && 0 !== b && b < Qc[c].priority; c++);\n    Qc.splice(c, 0, a);\n    0 === c && Vc(a);\n  }\n};\nfunction ol(a) {\n  return !(!a || 1 !== a.nodeType && 9 !== a.nodeType && 11 !== a.nodeType);\n}\nfunction pl(a) {\n  return !(!a || 1 !== a.nodeType && 9 !== a.nodeType && 11 !== a.nodeType && (8 !== a.nodeType || " react-mount-point-unstable " !== a.nodeValue));\n}\nfunction ql() {}\nfunction rl(a, b, c, d, e) {\n  if (e) {\n    if ("function" === typeof d) {\n      var f = d;\n      d = function () {\n        var a = hl(g);\n        f.call(a);\n      };\n    }\n    var g = fl(b, d, a, 0, null, !1, !1, "", ql);\n    a._reactRootContainer = g;\n    a[uf] = g.current;\n    sf(8 === a.nodeType ? a.parentNode : a);\n    Sk();\n    return g;\n  }\n  for (; e = a.lastChild;) a.removeChild(e);\n  if ("function" === typeof d) {\n    var h = d;\n    d = function () {\n      var a = hl(k);\n      h.call(a);\n    };\n  }\n  var k = cl(a, 0, !1, null, null, !1, !1, "", ql);\n  a._reactRootContainer = k;\n  a[uf] = k.current;\n  sf(8 === a.nodeType ? a.parentNode : a);\n  Sk(function () {\n    gl(b, k, c, d);\n  });\n  return k;\n}\nfunction sl(a, b, c, d, e) {\n  var f = c._reactRootContainer;\n  if (f) {\n    var g = f;\n    if ("function" === typeof e) {\n      var h = e;\n      e = function () {\n        var a = hl(g);\n        h.call(a);\n      };\n    }\n    gl(b, g, a, e);\n  } else g = rl(c, b, a, e, d);\n  return hl(g);\n}\nEc = function (a) {\n  switch (a.tag) {\n    case 3:\n      var b = a.stateNode;\n      if (b.current.memoizedState.isDehydrated) {\n        var c = tc(b.pendingLanes);\n        0 !== c && (Cc(b, c | 1), Ek(b, B()), 0 === (K & 6) && (Hj = B() + 500, jg()));\n      }\n      break;\n    case 13:\n      Sk(function () {\n        var b = Zg(a, 1);\n        if (null !== b) {\n          var c = L();\n          mh(b, a, 1, c);\n        }\n      }), jl(a, 1);\n  }\n};\nFc = function (a) {\n  if (13 === a.tag) {\n    var b = Zg(a, 134217728);\n    if (null !== b) {\n      var c = L();\n      mh(b, a, 134217728, c);\n    }\n    jl(a, 134217728);\n  }\n};\nGc = function (a) {\n  if (13 === a.tag) {\n    var b = lh(a),\n      c = Zg(a, b);\n    if (null !== c) {\n      var d = L();\n      mh(c, a, b, d);\n    }\n    jl(a, b);\n  }\n};\nHc = function () {\n  return C;\n};\nIc = function (a, b) {\n  var c = C;\n  try {\n    return C = a, b();\n  } finally {\n    C = c;\n  }\n};\nyb = function (a, b, c) {\n  switch (b) {\n    case "input":\n      bb(a, c);\n      b = c.name;\n      if ("radio" === c.type && null != b) {\n        for (c = a; c.parentNode;) c = c.parentNode;\n        c = c.querySelectorAll("input[name=" + JSON.stringify("" + b) + \'][type="radio"]\');\n        for (b = 0; b < c.length; b++) {\n          var d = c[b];\n          if (d !== a && d.form === a.form) {\n            var e = Db(d);\n            if (!e) throw Error(p(90));\n            Wa(d);\n            bb(d, e);\n          }\n        }\n      }\n      break;\n    case "textarea":\n      ib(a, c);\n      break;\n    case "select":\n      b = c.value, null != b && fb(a, !!c.multiple, b, !1);\n  }\n};\nGb = Rk;\nHb = Sk;\nvar tl = {\n    usingClientEntryPoint: !1,\n    Events: [Cb, ue, Db, Eb, Fb, Rk]\n  },\n  ul = {\n    findFiberByHostInstance: Wc,\n    bundleType: 0,\n    version: "18.2.0",\n    rendererPackageName: "react-dom"\n  };\nvar vl = {\n  bundleType: ul.bundleType,\n  version: ul.version,\n  rendererPackageName: ul.rendererPackageName,\n  rendererConfig: ul.rendererConfig,\n  overrideHookState: null,\n  overrideHookStateDeletePath: null,\n  overrideHookStateRenamePath: null,\n  overrideProps: null,\n  overridePropsDeletePath: null,\n  overridePropsRenamePath: null,\n  setErrorHandler: null,\n  setSuspenseHandler: null,\n  scheduleUpdate: null,\n  currentDispatcherRef: ua.ReactCurrentDispatcher,\n  findHostInstanceByFiber: function (a) {\n    a = Zb(a);\n    return null === a ? null : a.stateNode;\n  },\n  findFiberByHostInstance: ul.findFiberByHostInstance || kl,\n  findHostInstancesForRefresh: null,\n  scheduleRefresh: null,\n  scheduleRoot: null,\n  setRefreshHandler: null,\n  getCurrentFiber: null,\n  reconcilerVersion: "18.2.0-next-9e3b772b8-20220608"\n};\nif ("undefined" !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__) {\n  var wl = __REACT_DEVTOOLS_GLOBAL_HOOK__;\n  if (!wl.isDisabled && wl.supportsFiber) try {\n    kc = wl.inject(vl), lc = wl;\n  } catch (a) {}\n}\nexports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = tl;\nexports.createPortal = function (a, b) {\n  var c = 2 < arguments.length && void 0 !== arguments[2] ? arguments[2] : null;\n  if (!ol(b)) throw Error(p(200));\n  return dl(a, b, null, c);\n};\nexports.createRoot = function (a, b) {\n  if (!ol(a)) throw Error(p(299));\n  var c = !1,\n    d = "",\n    e = ll;\n  null !== b && void 0 !== b && (!0 === b.unstable_strictMode && (c = !0), void 0 !== b.identifierPrefix && (d = b.identifierPrefix), void 0 !== b.onRecoverableError && (e = b.onRecoverableError));\n  b = cl(a, 1, !1, null, null, c, !1, d, e);\n  a[uf] = b.current;\n  sf(8 === a.nodeType ? a.parentNode : a);\n  return new ml(b);\n};\nexports.findDOMNode = function (a) {\n  if (null == a) return null;\n  if (1 === a.nodeType) return a;\n  var b = a._reactInternals;\n  if (void 0 === b) {\n    if ("function" === typeof a.render) throw Error(p(188));\n    a = Object.keys(a).join(",");\n    throw Error(p(268, a));\n  }\n  a = Zb(b);\n  a = null === a ? null : a.stateNode;\n  return a;\n};\nexports.flushSync = function (a) {\n  return Sk(a);\n};\nexports.hydrate = function (a, b, c) {\n  if (!pl(b)) throw Error(p(200));\n  return sl(null, a, b, !0, c);\n};\nexports.hydrateRoot = function (a, b, c) {\n  if (!ol(a)) throw Error(p(405));\n  var d = null != c && c.hydratedSources || null,\n    e = !1,\n    f = "",\n    g = ll;\n  null !== c && void 0 !== c && (!0 === c.unstable_strictMode && (e = !0), void 0 !== c.identifierPrefix && (f = c.identifierPrefix), void 0 !== c.onRecoverableError && (g = c.onRecoverableError));\n  b = fl(b, null, a, 1, null != c ? c : null, e, !1, f, g);\n  a[uf] = b.current;\n  sf(a);\n  if (d) for (a = 0; a < d.length; a++) c = d[a], e = c._getVersion, e = e(c._source), null == b.mutableSourceEagerHydrationData ? b.mutableSourceEagerHydrationData = [c, e] : b.mutableSourceEagerHydrationData.push(c, e);\n  return new nl(b);\n};\nexports.render = function (a, b, c) {\n  if (!pl(b)) throw Error(p(200));\n  return sl(null, a, b, !1, c);\n};\nexports.unmountComponentAtNode = function (a) {\n  if (!pl(a)) throw Error(p(40));\n  return a._reactRootContainer ? (Sk(function () {\n    sl(null, null, a, !1, function () {\n      a._reactRootContainer = null;\n      a[uf] = null;\n    });\n  }), !0) : !1;\n};\nexports.unstable_batchedUpdates = Rk;\nexports.unstable_renderSubtreeIntoContainer = function (a, b, c, d) {\n  if (!pl(c)) throw Error(p(200));\n  if (null == a || void 0 === a._reactInternals) throw Error(p(38));\n  return sl(a, b, c, !1, d);\n};\nexports.version = "18.2.0-next-9e3b772b8-20220608";//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///7230\n')},4723:(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval("var __webpack_unused_export__;\n\n\nvar m = __webpack_require__(9834);\nif (true) {\n  exports.H = m.createRoot;\n  __webpack_unused_export__ = m.hydrateRoot;\n} else { var i; }//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDcyMy5qcyIsIm1hcHBpbmdzIjoiO0FBQWE7O0FBRWIsSUFBSUEsQ0FBQyxHQUFHQyxtQkFBTyxDQUFDLElBQVcsQ0FBQztBQUM1QixJQUFJQyxJQUFxQyxFQUFFO0VBQ3pDRyxTQUFrQixHQUFHTCxDQUFDLENBQUNNLFVBQVU7RUFDakNELHlCQUFtQixHQUFHTCxDQUFDLENBQUNPLFdBQVc7QUFDckMsQ0FBQyxNQUFNIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vMjAyNC1rdHNzdHVkaW8taG9tZXdvcmtzLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWRvbS9jbGllbnQuanM/MTFiMSJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbnZhciBtID0gcmVxdWlyZSgncmVhY3QtZG9tJyk7XG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICBleHBvcnRzLmNyZWF0ZVJvb3QgPSBtLmNyZWF0ZVJvb3Q7XG4gIGV4cG9ydHMuaHlkcmF0ZVJvb3QgPSBtLmh5ZHJhdGVSb290O1xufSBlbHNlIHtcbiAgdmFyIGkgPSBtLl9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVEO1xuICBleHBvcnRzLmNyZWF0ZVJvb3QgPSBmdW5jdGlvbihjLCBvKSB7XG4gICAgaS51c2luZ0NsaWVudEVudHJ5UG9pbnQgPSB0cnVlO1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gbS5jcmVhdGVSb290KGMsIG8pO1xuICAgIH0gZmluYWxseSB7XG4gICAgICBpLnVzaW5nQ2xpZW50RW50cnlQb2ludCA9IGZhbHNlO1xuICAgIH1cbiAgfTtcbiAgZXhwb3J0cy5oeWRyYXRlUm9vdCA9IGZ1bmN0aW9uKGMsIGgsIG8pIHtcbiAgICBpLnVzaW5nQ2xpZW50RW50cnlQb2ludCA9IHRydWU7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiBtLmh5ZHJhdGVSb290KGMsIGgsIG8pO1xuICAgIH0gZmluYWxseSB7XG4gICAgICBpLnVzaW5nQ2xpZW50RW50cnlQb2ludCA9IGZhbHNlO1xuICAgIH1cbiAgfTtcbn1cbiJdLCJuYW1lcyI6WyJtIiwicmVxdWlyZSIsInByb2Nlc3MiLCJlbnYiLCJOT0RFX0VOViIsImV4cG9ydHMiLCJjcmVhdGVSb290IiwiaHlkcmF0ZVJvb3QiLCJpIiwiX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRUQiLCJjIiwibyIsInVzaW5nQ2xpZW50RW50cnlQb2ludCIsImgiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///4723\n")},9834:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval("\n\nfunction checkDCE() {\n  /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */\n  if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined' || typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE !== 'function') {\n    return;\n  }\n  if (false) {}\n  try {\n    // Verify that the code above has been dead code eliminated (DCE'd).\n    __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(checkDCE);\n  } catch (err) {\n    // DevTools shouldn't crash React, no matter what.\n    // We should still report in case we break this code.\n    console.error(err);\n  }\n}\nif (true) {\n  // DCE check should happen before ReactDOM bundle executes so that\n  // DevTools can report bad minification during injection.\n  checkDCE();\n  module.exports = __webpack_require__(7230);\n} else {}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTgzNC5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixTQUFTQSxRQUFRQSxDQUFBLEVBQUc7RUFDbEI7RUFDQSxJQUNFLE9BQU9DLDhCQUE4QixLQUFLLFdBQVcsSUFDckQsT0FBT0EsOEJBQThCLENBQUNELFFBQVEsS0FBSyxVQUFVLEVBQzdEO0lBQ0E7RUFDRjtFQUNBLElBQUlFLEtBQXFDLEVBQUUsRUFTMUM7RUFDRCxJQUFJO0lBQ0Y7SUFDQUQsOEJBQThCLENBQUNELFFBQVEsQ0FBQ0EsUUFBUSxDQUFDO0VBQ25ELENBQUMsQ0FBQyxPQUFPTSxHQUFHLEVBQUU7SUFDWjtJQUNBO0lBQ0FDLE9BQU8sQ0FBQ0MsS0FBSyxDQUFDRixHQUFHLENBQUM7RUFDcEI7QUFDRjtBQUVBLElBQUlKLElBQXFDLEVBQUU7RUFDekM7RUFDQTtFQUNBRixRQUFRLENBQUMsQ0FBQztFQUNWUywwQ0FBNkQ7QUFDL0QsQ0FBQyxNQUFNIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vMjAyNC1rdHNzdHVkaW8taG9tZXdvcmtzLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWRvbS9pbmRleC5qcz84YmM4Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuZnVuY3Rpb24gY2hlY2tEQ0UoKSB7XG4gIC8qIGdsb2JhbCBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18gKi9cbiAgaWYgKFxuICAgIHR5cGVvZiBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18gPT09ICd1bmRlZmluZWQnIHx8XG4gICAgdHlwZW9mIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXy5jaGVja0RDRSAhPT0gJ2Z1bmN0aW9uJ1xuICApIHtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAvLyBUaGlzIGJyYW5jaCBpcyB1bnJlYWNoYWJsZSBiZWNhdXNlIHRoaXMgZnVuY3Rpb24gaXMgb25seSBjYWxsZWRcbiAgICAvLyBpbiBwcm9kdWN0aW9uLCBidXQgdGhlIGNvbmRpdGlvbiBpcyB0cnVlIG9ubHkgaW4gZGV2ZWxvcG1lbnQuXG4gICAgLy8gVGhlcmVmb3JlIGlmIHRoZSBicmFuY2ggaXMgc3RpbGwgaGVyZSwgZGVhZCBjb2RlIGVsaW1pbmF0aW9uIHdhc24ndFxuICAgIC8vIHByb3Blcmx5IGFwcGxpZWQuXG4gICAgLy8gRG9uJ3QgY2hhbmdlIHRoZSBtZXNzYWdlLiBSZWFjdCBEZXZUb29scyByZWxpZXMgb24gaXQuIEFsc28gbWFrZSBzdXJlXG4gICAgLy8gdGhpcyBtZXNzYWdlIGRvZXNuJ3Qgb2NjdXIgZWxzZXdoZXJlIGluIHRoaXMgZnVuY3Rpb24sIG9yIGl0IHdpbGwgY2F1c2VcbiAgICAvLyBhIGZhbHNlIHBvc2l0aXZlLlxuICAgIHRocm93IG5ldyBFcnJvcignXl9eJyk7XG4gIH1cbiAgdHJ5IHtcbiAgICAvLyBWZXJpZnkgdGhhdCB0aGUgY29kZSBhYm92ZSBoYXMgYmVlbiBkZWFkIGNvZGUgZWxpbWluYXRlZCAoRENFJ2QpLlxuICAgIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXy5jaGVja0RDRShjaGVja0RDRSk7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIC8vIERldlRvb2xzIHNob3VsZG4ndCBjcmFzaCBSZWFjdCwgbm8gbWF0dGVyIHdoYXQuXG4gICAgLy8gV2Ugc2hvdWxkIHN0aWxsIHJlcG9ydCBpbiBjYXNlIHdlIGJyZWFrIHRoaXMgY29kZS5cbiAgICBjb25zb2xlLmVycm9yKGVycik7XG4gIH1cbn1cblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgLy8gRENFIGNoZWNrIHNob3VsZCBoYXBwZW4gYmVmb3JlIFJlYWN0RE9NIGJ1bmRsZSBleGVjdXRlcyBzbyB0aGF0XG4gIC8vIERldlRvb2xzIGNhbiByZXBvcnQgYmFkIG1pbmlmaWNhdGlvbiBkdXJpbmcgaW5qZWN0aW9uLlxuICBjaGVja0RDRSgpO1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWRvbS5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1kb20uZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiJdLCJuYW1lcyI6WyJjaGVja0RDRSIsIl9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXyIsInByb2Nlc3MiLCJlbnYiLCJOT0RFX0VOViIsIkVycm9yIiwiZXJyIiwiY29uc29sZSIsImVycm9yIiwibW9kdWxlIiwiZXhwb3J0cyIsInJlcXVpcmUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///9834\n")},3534:(__unused_webpack_module,exports)=>{"use strict";eval('/**\n * @license React\n * react.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\nvar l = Symbol.for("react.element"),\n  n = Symbol.for("react.portal"),\n  p = Symbol.for("react.fragment"),\n  q = Symbol.for("react.strict_mode"),\n  r = Symbol.for("react.profiler"),\n  t = Symbol.for("react.provider"),\n  u = Symbol.for("react.context"),\n  v = Symbol.for("react.forward_ref"),\n  w = Symbol.for("react.suspense"),\n  x = Symbol.for("react.memo"),\n  y = Symbol.for("react.lazy"),\n  z = Symbol.iterator;\nfunction A(a) {\n  if (null === a || "object" !== typeof a) return null;\n  a = z && a[z] || a["@@iterator"];\n  return "function" === typeof a ? a : null;\n}\nvar B = {\n    isMounted: function () {\n      return !1;\n    },\n    enqueueForceUpdate: function () {},\n    enqueueReplaceState: function () {},\n    enqueueSetState: function () {}\n  },\n  C = Object.assign,\n  D = {};\nfunction E(a, b, e) {\n  this.props = a;\n  this.context = b;\n  this.refs = D;\n  this.updater = e || B;\n}\nE.prototype.isReactComponent = {};\nE.prototype.setState = function (a, b) {\n  if ("object" !== typeof a && "function" !== typeof a && null != a) throw Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");\n  this.updater.enqueueSetState(this, a, b, "setState");\n};\nE.prototype.forceUpdate = function (a) {\n  this.updater.enqueueForceUpdate(this, a, "forceUpdate");\n};\nfunction F() {}\nF.prototype = E.prototype;\nfunction G(a, b, e) {\n  this.props = a;\n  this.context = b;\n  this.refs = D;\n  this.updater = e || B;\n}\nvar H = G.prototype = new F();\nH.constructor = G;\nC(H, E.prototype);\nH.isPureReactComponent = !0;\nvar I = Array.isArray,\n  J = Object.prototype.hasOwnProperty,\n  K = {\n    current: null\n  },\n  L = {\n    key: !0,\n    ref: !0,\n    __self: !0,\n    __source: !0\n  };\nfunction M(a, b, e) {\n  var d,\n    c = {},\n    k = null,\n    h = null;\n  if (null != b) for (d in void 0 !== b.ref && (h = b.ref), void 0 !== b.key && (k = "" + b.key), b) J.call(b, d) && !L.hasOwnProperty(d) && (c[d] = b[d]);\n  var g = arguments.length - 2;\n  if (1 === g) c.children = e;else if (1 < g) {\n    for (var f = Array(g), m = 0; m < g; m++) f[m] = arguments[m + 2];\n    c.children = f;\n  }\n  if (a && a.defaultProps) for (d in g = a.defaultProps, g) void 0 === c[d] && (c[d] = g[d]);\n  return {\n    $$typeof: l,\n    type: a,\n    key: k,\n    ref: h,\n    props: c,\n    _owner: K.current\n  };\n}\nfunction N(a, b) {\n  return {\n    $$typeof: l,\n    type: a.type,\n    key: b,\n    ref: a.ref,\n    props: a.props,\n    _owner: a._owner\n  };\n}\nfunction O(a) {\n  return "object" === typeof a && null !== a && a.$$typeof === l;\n}\nfunction escape(a) {\n  var b = {\n    "=": "=0",\n    ":": "=2"\n  };\n  return "$" + a.replace(/[=:]/g, function (a) {\n    return b[a];\n  });\n}\nvar P = /\\/+/g;\nfunction Q(a, b) {\n  return "object" === typeof a && null !== a && null != a.key ? escape("" + a.key) : b.toString(36);\n}\nfunction R(a, b, e, d, c) {\n  var k = typeof a;\n  if ("undefined" === k || "boolean" === k) a = null;\n  var h = !1;\n  if (null === a) h = !0;else switch (k) {\n    case "string":\n    case "number":\n      h = !0;\n      break;\n    case "object":\n      switch (a.$$typeof) {\n        case l:\n        case n:\n          h = !0;\n      }\n  }\n  if (h) return h = a, c = c(h), a = "" === d ? "." + Q(h, 0) : d, I(c) ? (e = "", null != a && (e = a.replace(P, "$&/") + "/"), R(c, b, e, "", function (a) {\n    return a;\n  })) : null != c && (O(c) && (c = N(c, e + (!c.key || h && h.key === c.key ? "" : ("" + c.key).replace(P, "$&/") + "/") + a)), b.push(c)), 1;\n  h = 0;\n  d = "" === d ? "." : d + ":";\n  if (I(a)) for (var g = 0; g < a.length; g++) {\n    k = a[g];\n    var f = d + Q(k, g);\n    h += R(k, b, e, f, c);\n  } else if (f = A(a), "function" === typeof f) for (a = f.call(a), g = 0; !(k = a.next()).done;) k = k.value, f = d + Q(k, g++), h += R(k, b, e, f, c);else if ("object" === k) throw b = String(a), Error("Objects are not valid as a React child (found: " + ("[object Object]" === b ? "object with keys {" + Object.keys(a).join(", ") + "}" : b) + "). If you meant to render a collection of children, use an array instead.");\n  return h;\n}\nfunction S(a, b, e) {\n  if (null == a) return a;\n  var d = [],\n    c = 0;\n  R(a, d, "", "", function (a) {\n    return b.call(e, a, c++);\n  });\n  return d;\n}\nfunction T(a) {\n  if (-1 === a._status) {\n    var b = a._result;\n    b = b();\n    b.then(function (b) {\n      if (0 === a._status || -1 === a._status) a._status = 1, a._result = b;\n    }, function (b) {\n      if (0 === a._status || -1 === a._status) a._status = 2, a._result = b;\n    });\n    -1 === a._status && (a._status = 0, a._result = b);\n  }\n  if (1 === a._status) return a._result.default;\n  throw a._result;\n}\nvar U = {\n    current: null\n  },\n  V = {\n    transition: null\n  },\n  W = {\n    ReactCurrentDispatcher: U,\n    ReactCurrentBatchConfig: V,\n    ReactCurrentOwner: K\n  };\nexports.Children = {\n  map: S,\n  forEach: function (a, b, e) {\n    S(a, function () {\n      b.apply(this, arguments);\n    }, e);\n  },\n  count: function (a) {\n    var b = 0;\n    S(a, function () {\n      b++;\n    });\n    return b;\n  },\n  toArray: function (a) {\n    return S(a, function (a) {\n      return a;\n    }) || [];\n  },\n  only: function (a) {\n    if (!O(a)) throw Error("React.Children.only expected to receive a single React element child.");\n    return a;\n  }\n};\nexports.Component = E;\nexports.Fragment = p;\nexports.Profiler = r;\nexports.PureComponent = G;\nexports.StrictMode = q;\nexports.Suspense = w;\nexports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = W;\nexports.cloneElement = function (a, b, e) {\n  if (null === a || void 0 === a) throw Error("React.cloneElement(...): The argument must be a React element, but you passed " + a + ".");\n  var d = C({}, a.props),\n    c = a.key,\n    k = a.ref,\n    h = a._owner;\n  if (null != b) {\n    void 0 !== b.ref && (k = b.ref, h = K.current);\n    void 0 !== b.key && (c = "" + b.key);\n    if (a.type && a.type.defaultProps) var g = a.type.defaultProps;\n    for (f in b) J.call(b, f) && !L.hasOwnProperty(f) && (d[f] = void 0 === b[f] && void 0 !== g ? g[f] : b[f]);\n  }\n  var f = arguments.length - 2;\n  if (1 === f) d.children = e;else if (1 < f) {\n    g = Array(f);\n    for (var m = 0; m < f; m++) g[m] = arguments[m + 2];\n    d.children = g;\n  }\n  return {\n    $$typeof: l,\n    type: a.type,\n    key: c,\n    ref: k,\n    props: d,\n    _owner: h\n  };\n};\nexports.createContext = function (a) {\n  a = {\n    $$typeof: u,\n    _currentValue: a,\n    _currentValue2: a,\n    _threadCount: 0,\n    Provider: null,\n    Consumer: null,\n    _defaultValue: null,\n    _globalName: null\n  };\n  a.Provider = {\n    $$typeof: t,\n    _context: a\n  };\n  return a.Consumer = a;\n};\nexports.createElement = M;\nexports.createFactory = function (a) {\n  var b = M.bind(null, a);\n  b.type = a;\n  return b;\n};\nexports.createRef = function () {\n  return {\n    current: null\n  };\n};\nexports.forwardRef = function (a) {\n  return {\n    $$typeof: v,\n    render: a\n  };\n};\nexports.isValidElement = O;\nexports.lazy = function (a) {\n  return {\n    $$typeof: y,\n    _payload: {\n      _status: -1,\n      _result: a\n    },\n    _init: T\n  };\n};\nexports.memo = function (a, b) {\n  return {\n    $$typeof: x,\n    type: a,\n    compare: void 0 === b ? null : b\n  };\n};\nexports.startTransition = function (a) {\n  var b = V.transition;\n  V.transition = {};\n  try {\n    a();\n  } finally {\n    V.transition = b;\n  }\n};\nexports.unstable_act = function () {\n  throw Error("act(...) is not supported in production builds of React.");\n};\nexports.useCallback = function (a, b) {\n  return U.current.useCallback(a, b);\n};\nexports.useContext = function (a) {\n  return U.current.useContext(a);\n};\nexports.useDebugValue = function () {};\nexports.useDeferredValue = function (a) {\n  return U.current.useDeferredValue(a);\n};\nexports.useEffect = function (a, b) {\n  return U.current.useEffect(a, b);\n};\nexports.useId = function () {\n  return U.current.useId();\n};\nexports.useImperativeHandle = function (a, b, e) {\n  return U.current.useImperativeHandle(a, b, e);\n};\nexports.useInsertionEffect = function (a, b) {\n  return U.current.useInsertionEffect(a, b);\n};\nexports.useLayoutEffect = function (a, b) {\n  return U.current.useLayoutEffect(a, b);\n};\nexports.useMemo = function (a, b) {\n  return U.current.useMemo(a, b);\n};\nexports.useReducer = function (a, b, e) {\n  return U.current.useReducer(a, b, e);\n};\nexports.useRef = function (a) {\n  return U.current.useRef(a);\n};\nexports.useState = function (a) {\n  return U.current.useState(a);\n};\nexports.useSyncExternalStore = function (a, b, e) {\n  return U.current.useSyncExternalStore(a, b, e);\n};\nexports.useTransition = function () {\n  return U.current.useTransition();\n};\nexports.version = "18.2.0";//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///3534\n')},9471:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval("\n\nif (true) {\n  module.exports = __webpack_require__(3534);\n} else {}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTQ3MS5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixJQUFJQSxJQUFxQyxFQUFFO0VBQ3pDRywwQ0FBeUQ7QUFDM0QsQ0FBQyxNQUFNIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vMjAyNC1rdHNzdHVkaW8taG9tZXdvcmtzLy4vbm9kZV9tb2R1bGVzL3JlYWN0L2luZGV4LmpzP2FiNWIiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LmRldmVsb3BtZW50LmpzJyk7XG59XG4iXSwibmFtZXMiOlsicHJvY2VzcyIsImVudiIsIk5PREVfRU5WIiwibW9kdWxlIiwiZXhwb3J0cyIsInJlcXVpcmUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///9471\n")},8582:(__unused_webpack_module,exports)=>{"use strict";eval('/**\n * @license React\n * scheduler.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\nfunction f(a, b) {\n  var c = a.length;\n  a.push(b);\n  a: for (; 0 < c;) {\n    var d = c - 1 >>> 1,\n      e = a[d];\n    if (0 < g(e, b)) a[d] = b, a[c] = e, c = d;else break a;\n  }\n}\nfunction h(a) {\n  return 0 === a.length ? null : a[0];\n}\nfunction k(a) {\n  if (0 === a.length) return null;\n  var b = a[0],\n    c = a.pop();\n  if (c !== b) {\n    a[0] = c;\n    a: for (var d = 0, e = a.length, w = e >>> 1; d < w;) {\n      var m = 2 * (d + 1) - 1,\n        C = a[m],\n        n = m + 1,\n        x = a[n];\n      if (0 > g(C, c)) n < e && 0 > g(x, C) ? (a[d] = x, a[n] = c, d = n) : (a[d] = C, a[m] = c, d = m);else if (n < e && 0 > g(x, c)) a[d] = x, a[n] = c, d = n;else break a;\n    }\n  }\n  return b;\n}\nfunction g(a, b) {\n  var c = a.sortIndex - b.sortIndex;\n  return 0 !== c ? c : a.id - b.id;\n}\nif ("object" === typeof performance && "function" === typeof performance.now) {\n  var l = performance;\n  exports.unstable_now = function () {\n    return l.now();\n  };\n} else {\n  var p = Date,\n    q = p.now();\n  exports.unstable_now = function () {\n    return p.now() - q;\n  };\n}\nvar r = [],\n  t = [],\n  u = 1,\n  v = null,\n  y = 3,\n  z = !1,\n  A = !1,\n  B = !1,\n  D = "function" === typeof setTimeout ? setTimeout : null,\n  E = "function" === typeof clearTimeout ? clearTimeout : null,\n  F = "undefined" !== typeof setImmediate ? setImmediate : null;\n"undefined" !== typeof navigator && void 0 !== navigator.scheduling && void 0 !== navigator.scheduling.isInputPending && navigator.scheduling.isInputPending.bind(navigator.scheduling);\nfunction G(a) {\n  for (var b = h(t); null !== b;) {\n    if (null === b.callback) k(t);else if (b.startTime <= a) k(t), b.sortIndex = b.expirationTime, f(r, b);else break;\n    b = h(t);\n  }\n}\nfunction H(a) {\n  B = !1;\n  G(a);\n  if (!A) if (null !== h(r)) A = !0, I(J);else {\n    var b = h(t);\n    null !== b && K(H, b.startTime - a);\n  }\n}\nfunction J(a, b) {\n  A = !1;\n  B && (B = !1, E(L), L = -1);\n  z = !0;\n  var c = y;\n  try {\n    G(b);\n    for (v = h(r); null !== v && (!(v.expirationTime > b) || a && !M());) {\n      var d = v.callback;\n      if ("function" === typeof d) {\n        v.callback = null;\n        y = v.priorityLevel;\n        var e = d(v.expirationTime <= b);\n        b = exports.unstable_now();\n        "function" === typeof e ? v.callback = e : v === h(r) && k(r);\n        G(b);\n      } else k(r);\n      v = h(r);\n    }\n    if (null !== v) var w = !0;else {\n      var m = h(t);\n      null !== m && K(H, m.startTime - b);\n      w = !1;\n    }\n    return w;\n  } finally {\n    v = null, y = c, z = !1;\n  }\n}\nvar N = !1,\n  O = null,\n  L = -1,\n  P = 5,\n  Q = -1;\nfunction M() {\n  return exports.unstable_now() - Q < P ? !1 : !0;\n}\nfunction R() {\n  if (null !== O) {\n    var a = exports.unstable_now();\n    Q = a;\n    var b = !0;\n    try {\n      b = O(!0, a);\n    } finally {\n      b ? S() : (N = !1, O = null);\n    }\n  } else N = !1;\n}\nvar S;\nif ("function" === typeof F) S = function () {\n  F(R);\n};else if ("undefined" !== typeof MessageChannel) {\n  var T = new MessageChannel(),\n    U = T.port2;\n  T.port1.onmessage = R;\n  S = function () {\n    U.postMessage(null);\n  };\n} else S = function () {\n  D(R, 0);\n};\nfunction I(a) {\n  O = a;\n  N || (N = !0, S());\n}\nfunction K(a, b) {\n  L = D(function () {\n    a(exports.unstable_now());\n  }, b);\n}\nexports.unstable_IdlePriority = 5;\nexports.unstable_ImmediatePriority = 1;\nexports.unstable_LowPriority = 4;\nexports.unstable_NormalPriority = 3;\nexports.unstable_Profiling = null;\nexports.unstable_UserBlockingPriority = 2;\nexports.unstable_cancelCallback = function (a) {\n  a.callback = null;\n};\nexports.unstable_continueExecution = function () {\n  A || z || (A = !0, I(J));\n};\nexports.unstable_forceFrameRate = function (a) {\n  0 > a || 125 < a ? console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported") : P = 0 < a ? Math.floor(1E3 / a) : 5;\n};\nexports.unstable_getCurrentPriorityLevel = function () {\n  return y;\n};\nexports.unstable_getFirstCallbackNode = function () {\n  return h(r);\n};\nexports.unstable_next = function (a) {\n  switch (y) {\n    case 1:\n    case 2:\n    case 3:\n      var b = 3;\n      break;\n    default:\n      b = y;\n  }\n  var c = y;\n  y = b;\n  try {\n    return a();\n  } finally {\n    y = c;\n  }\n};\nexports.unstable_pauseExecution = function () {};\nexports.unstable_requestPaint = function () {};\nexports.unstable_runWithPriority = function (a, b) {\n  switch (a) {\n    case 1:\n    case 2:\n    case 3:\n    case 4:\n    case 5:\n      break;\n    default:\n      a = 3;\n  }\n  var c = y;\n  y = a;\n  try {\n    return b();\n  } finally {\n    y = c;\n  }\n};\nexports.unstable_scheduleCallback = function (a, b, c) {\n  var d = exports.unstable_now();\n  "object" === typeof c && null !== c ? (c = c.delay, c = "number" === typeof c && 0 < c ? d + c : d) : c = d;\n  switch (a) {\n    case 1:\n      var e = -1;\n      break;\n    case 2:\n      e = 250;\n      break;\n    case 5:\n      e = 1073741823;\n      break;\n    case 4:\n      e = 1E4;\n      break;\n    default:\n      e = 5E3;\n  }\n  e = c + e;\n  a = {\n    id: u++,\n    callback: b,\n    priorityLevel: a,\n    startTime: c,\n    expirationTime: e,\n    sortIndex: -1\n  };\n  c > d ? (a.sortIndex = c, f(t, a), null === h(r) && a === h(t) && (B ? (E(L), L = -1) : B = !0, K(H, c - d))) : (a.sortIndex = e, f(r, a), A || z || (A = !0, I(J)));\n  return a;\n};\nexports.unstable_shouldYield = M;\nexports.unstable_wrapCallback = function (a) {\n  var b = y;\n  return function () {\n    var c = y;\n    y = b;\n    try {\n      return a.apply(this, arguments);\n    } finally {\n      y = c;\n    }\n  };\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///8582\n')},9817:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval("\n\nif (true) {\n  module.exports = __webpack_require__(8582);\n} else {}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTgxNy5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixJQUFJQSxJQUFxQyxFQUFFO0VBQ3pDRywwQ0FBNkQ7QUFDL0QsQ0FBQyxNQUFNIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vMjAyNC1rdHNzdHVkaW8taG9tZXdvcmtzLy4vbm9kZV9tb2R1bGVzL3NjaGVkdWxlci9pbmRleC5qcz80MDI5Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9zY2hlZHVsZXIucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvc2NoZWR1bGVyLmRldmVsb3BtZW50LmpzJyk7XG59XG4iXSwibmFtZXMiOlsicHJvY2VzcyIsImVudiIsIk5PREVfRU5WIiwibW9kdWxlIiwiZXhwb3J0cyIsInJlcXVpcmUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///9817\n")},6064:(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval('/**\n * @license React\n * use-sync-external-store-shim.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\nvar e = __webpack_require__(9471);\nfunction h(a, b) {\n  return a === b && (0 !== a || 1 / a === 1 / b) || a !== a && b !== b;\n}\nvar k = "function" === typeof Object.is ? Object.is : h,\n  l = e.useState,\n  m = e.useEffect,\n  n = e.useLayoutEffect,\n  p = e.useDebugValue;\nfunction q(a, b) {\n  var d = b(),\n    f = l({\n      inst: {\n        value: d,\n        getSnapshot: b\n      }\n    }),\n    c = f[0].inst,\n    g = f[1];\n  n(function () {\n    c.value = d;\n    c.getSnapshot = b;\n    r(c) && g({\n      inst: c\n    });\n  }, [a, d, b]);\n  m(function () {\n    r(c) && g({\n      inst: c\n    });\n    return a(function () {\n      r(c) && g({\n        inst: c\n      });\n    });\n  }, [a]);\n  p(d);\n  return d;\n}\nfunction r(a) {\n  var b = a.getSnapshot;\n  a = a.value;\n  try {\n    var d = b();\n    return !k(a, d);\n  } catch (f) {\n    return !0;\n  }\n}\nfunction t(a, b) {\n  return b();\n}\nvar u = "undefined" === typeof window || "undefined" === typeof window.document || "undefined" === typeof window.document.createElement ? t : q;\nexports.useSyncExternalStore = void 0 !== e.useSyncExternalStore ? e.useSyncExternalStore : u;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNjA2NC5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDYTs7QUFBQSxJQUFJQSxDQUFDLEdBQUNDLG1CQUFPLENBQUMsSUFBTyxDQUFDO0FBQUMsU0FBU0MsQ0FBQ0EsQ0FBQ0MsQ0FBQyxFQUFDQyxDQUFDLEVBQUM7RUFBQyxPQUFPRCxDQUFDLEtBQUdDLENBQUMsS0FBRyxDQUFDLEtBQUdELENBQUMsSUFBRSxDQUFDLEdBQUNBLENBQUMsS0FBRyxDQUFDLEdBQUNDLENBQUMsQ0FBQyxJQUFFRCxDQUFDLEtBQUdBLENBQUMsSUFBRUMsQ0FBQyxLQUFHQSxDQUFDO0FBQUE7QUFBQyxJQUFJQyxDQUFDLEdBQUMsVUFBVSxLQUFHLE9BQU9DLE1BQU0sQ0FBQ0MsRUFBRSxHQUFDRCxNQUFNLENBQUNDLEVBQUUsR0FBQ0wsQ0FBQztFQUFDTSxDQUFDLEdBQUNSLENBQUMsQ0FBQ1MsUUFBUTtFQUFDQyxDQUFDLEdBQUNWLENBQUMsQ0FBQ1csU0FBUztFQUFDQyxDQUFDLEdBQUNaLENBQUMsQ0FBQ2EsZUFBZTtFQUFDQyxDQUFDLEdBQUNkLENBQUMsQ0FBQ2UsYUFBYTtBQUFDLFNBQVNDLENBQUNBLENBQUNiLENBQUMsRUFBQ0MsQ0FBQyxFQUFDO0VBQUMsSUFBSWEsQ0FBQyxHQUFDYixDQUFDLENBQUMsQ0FBQztJQUFDYyxDQUFDLEdBQUNWLENBQUMsQ0FBQztNQUFDVyxJQUFJLEVBQUM7UUFBQ0MsS0FBSyxFQUFDSCxDQUFDO1FBQUNJLFdBQVcsRUFBQ2pCO01BQUM7SUFBQyxDQUFDLENBQUM7SUFBQ2tCLENBQUMsR0FBQ0osQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDQyxJQUFJO0lBQUNJLENBQUMsR0FBQ0wsQ0FBQyxDQUFDLENBQUMsQ0FBQztFQUFDTixDQUFDLENBQUMsWUFBVTtJQUFDVSxDQUFDLENBQUNGLEtBQUssR0FBQ0gsQ0FBQztJQUFDSyxDQUFDLENBQUNELFdBQVcsR0FBQ2pCLENBQUM7SUFBQ29CLENBQUMsQ0FBQ0YsQ0FBQyxDQUFDLElBQUVDLENBQUMsQ0FBQztNQUFDSixJQUFJLEVBQUNHO0lBQUMsQ0FBQyxDQUFDO0VBQUEsQ0FBQyxFQUFDLENBQUNuQixDQUFDLEVBQUNjLENBQUMsRUFBQ2IsQ0FBQyxDQUFDLENBQUM7RUFBQ00sQ0FBQyxDQUFDLFlBQVU7SUFBQ2MsQ0FBQyxDQUFDRixDQUFDLENBQUMsSUFBRUMsQ0FBQyxDQUFDO01BQUNKLElBQUksRUFBQ0c7SUFBQyxDQUFDLENBQUM7SUFBQyxPQUFPbkIsQ0FBQyxDQUFDLFlBQVU7TUFBQ3FCLENBQUMsQ0FBQ0YsQ0FBQyxDQUFDLElBQUVDLENBQUMsQ0FBQztRQUFDSixJQUFJLEVBQUNHO01BQUMsQ0FBQyxDQUFDO0lBQUEsQ0FBQyxDQUFDO0VBQUEsQ0FBQyxFQUFDLENBQUNuQixDQUFDLENBQUMsQ0FBQztFQUFDVyxDQUFDLENBQUNHLENBQUMsQ0FBQztFQUFDLE9BQU9BLENBQUM7QUFBQTtBQUNsYyxTQUFTTyxDQUFDQSxDQUFDckIsQ0FBQyxFQUFDO0VBQUMsSUFBSUMsQ0FBQyxHQUFDRCxDQUFDLENBQUNrQixXQUFXO0VBQUNsQixDQUFDLEdBQUNBLENBQUMsQ0FBQ2lCLEtBQUs7RUFBQyxJQUFHO0lBQUMsSUFBSUgsQ0FBQyxHQUFDYixDQUFDLENBQUMsQ0FBQztJQUFDLE9BQU0sQ0FBQ0MsQ0FBQyxDQUFDRixDQUFDLEVBQUNjLENBQUMsQ0FBQztFQUFBLENBQUMsUUFBTUMsQ0FBQyxFQUFDO0lBQUMsT0FBTSxDQUFDLENBQUM7RUFBQTtBQUFDO0FBQUMsU0FBU08sQ0FBQ0EsQ0FBQ3RCLENBQUMsRUFBQ0MsQ0FBQyxFQUFDO0VBQUMsT0FBT0EsQ0FBQyxDQUFDLENBQUM7QUFBQTtBQUFDLElBQUlzQixDQUFDLEdBQUMsV0FBVyxLQUFHLE9BQU9DLE1BQU0sSUFBRSxXQUFXLEtBQUcsT0FBT0EsTUFBTSxDQUFDQyxRQUFRLElBQUUsV0FBVyxLQUFHLE9BQU9ELE1BQU0sQ0FBQ0MsUUFBUSxDQUFDQyxhQUFhLEdBQUNKLENBQUMsR0FBQ1QsQ0FBQztBQUFDYyw0QkFBNEIsR0FBQyxLQUFLLENBQUMsS0FBRzlCLENBQUMsQ0FBQytCLG9CQUFvQixHQUFDL0IsQ0FBQyxDQUFDK0Isb0JBQW9CLEdBQUNMLENBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8yMDI0LWt0c3N0dWRpby1ob21ld29ya3MvLi9ub2RlX21vZHVsZXMvdXNlLXN5bmMtZXh0ZXJuYWwtc3RvcmUvY2pzL3VzZS1zeW5jLWV4dGVybmFsLXN0b3JlLXNoaW0ucHJvZHVjdGlvbi5taW4uanM/OTRhMiJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlIFJlYWN0XG4gKiB1c2Utc3luYy1leHRlcm5hbC1zdG9yZS1zaGltLnByb2R1Y3Rpb24ubWluLmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cbid1c2Ugc3RyaWN0Jzt2YXIgZT1yZXF1aXJlKFwicmVhY3RcIik7ZnVuY3Rpb24gaChhLGIpe3JldHVybiBhPT09YiYmKDAhPT1hfHwxL2E9PT0xL2IpfHxhIT09YSYmYiE9PWJ9dmFyIGs9XCJmdW5jdGlvblwiPT09dHlwZW9mIE9iamVjdC5pcz9PYmplY3QuaXM6aCxsPWUudXNlU3RhdGUsbT1lLnVzZUVmZmVjdCxuPWUudXNlTGF5b3V0RWZmZWN0LHA9ZS51c2VEZWJ1Z1ZhbHVlO2Z1bmN0aW9uIHEoYSxiKXt2YXIgZD1iKCksZj1sKHtpbnN0Ont2YWx1ZTpkLGdldFNuYXBzaG90OmJ9fSksYz1mWzBdLmluc3QsZz1mWzFdO24oZnVuY3Rpb24oKXtjLnZhbHVlPWQ7Yy5nZXRTbmFwc2hvdD1iO3IoYykmJmcoe2luc3Q6Y30pfSxbYSxkLGJdKTttKGZ1bmN0aW9uKCl7cihjKSYmZyh7aW5zdDpjfSk7cmV0dXJuIGEoZnVuY3Rpb24oKXtyKGMpJiZnKHtpbnN0OmN9KX0pfSxbYV0pO3AoZCk7cmV0dXJuIGR9XG5mdW5jdGlvbiByKGEpe3ZhciBiPWEuZ2V0U25hcHNob3Q7YT1hLnZhbHVlO3RyeXt2YXIgZD1iKCk7cmV0dXJuIWsoYSxkKX1jYXRjaChmKXtyZXR1cm4hMH19ZnVuY3Rpb24gdChhLGIpe3JldHVybiBiKCl9dmFyIHU9XCJ1bmRlZmluZWRcIj09PXR5cGVvZiB3aW5kb3d8fFwidW5kZWZpbmVkXCI9PT10eXBlb2Ygd2luZG93LmRvY3VtZW50fHxcInVuZGVmaW5lZFwiPT09dHlwZW9mIHdpbmRvdy5kb2N1bWVudC5jcmVhdGVFbGVtZW50P3Q6cTtleHBvcnRzLnVzZVN5bmNFeHRlcm5hbFN0b3JlPXZvaWQgMCE9PWUudXNlU3luY0V4dGVybmFsU3RvcmU/ZS51c2VTeW5jRXh0ZXJuYWxTdG9yZTp1O1xuIl0sIm5hbWVzIjpbImUiLCJyZXF1aXJlIiwiaCIsImEiLCJiIiwiayIsIk9iamVjdCIsImlzIiwibCIsInVzZVN0YXRlIiwibSIsInVzZUVmZmVjdCIsIm4iLCJ1c2VMYXlvdXRFZmZlY3QiLCJwIiwidXNlRGVidWdWYWx1ZSIsInEiLCJkIiwiZiIsImluc3QiLCJ2YWx1ZSIsImdldFNuYXBzaG90IiwiYyIsImciLCJyIiwidCIsInUiLCJ3aW5kb3ciLCJkb2N1bWVudCIsImNyZWF0ZUVsZW1lbnQiLCJleHBvcnRzIiwidXNlU3luY0V4dGVybmFsU3RvcmUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///6064\n')},1673:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval("\n\nif (true) {\n  module.exports = __webpack_require__(6064);\n} else {}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTY3My5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixJQUFJQSxJQUFxQyxFQUFFO0VBQ3pDRywwQ0FBaUY7QUFDbkYsQ0FBQyxNQUFNIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vMjAyNC1rdHNzdHVkaW8taG9tZXdvcmtzLy4vbm9kZV9tb2R1bGVzL3VzZS1zeW5jLWV4dGVybmFsLXN0b3JlL3NoaW0vaW5kZXguanM/NmFkZiJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi4vY2pzL3VzZS1zeW5jLWV4dGVybmFsLXN0b3JlLXNoaW0ucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi4vY2pzL3VzZS1zeW5jLWV4dGVybmFsLXN0b3JlLXNoaW0uZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiJdLCJuYW1lcyI6WyJwcm9jZXNzIiwiZW52IiwiTk9ERV9FTlYiLCJtb2R1bGUiLCJleHBvcnRzIiwicmVxdWlyZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///1673\n")},6986:(__unused_webpack_module,__unused_webpack___webpack_exports__,__webpack_require__)=>{"use strict";eval('\n// NAMESPACE OBJECT: ./node_modules/axios/lib/platform/common/utils.js\nvar common_utils_namespaceObject = {};\n__webpack_require__.r(common_utils_namespaceObject);\n__webpack_require__.d(common_utils_namespaceObject, {\n  hasBrowserEnv: () => (hasBrowserEnv),\n  hasStandardBrowserEnv: () => (hasStandardBrowserEnv),\n  hasStandardBrowserWebWorkerEnv: () => (hasStandardBrowserWebWorkerEnv)\n});\n\n// EXTERNAL MODULE: ./node_modules/react/index.js\nvar react = __webpack_require__(9471);\nvar react_namespaceObject = /*#__PURE__*/__webpack_require__.t(react, 2);\n// EXTERNAL MODULE: ./node_modules/react-dom/client.js\nvar client = __webpack_require__(4723);\n;// CONCATENATED MODULE: ./node_modules/mobx/dist/mobx.esm.js\nvar niceErrors = {\n  0: "Invalid value for configuration \'enforceActions\', expected \'never\', \'always\' or \'observed\'",\n  1: function _(annotationType, key) {\n    return "Cannot apply \'" + annotationType + "\' to \'" + key.toString() + "\': Field not found.";\n  },\n  /*\n  2(prop) {\n      return `invalid decorator for \'${prop.toString()}\'`\n  },\n  3(prop) {\n      return `Cannot decorate \'${prop.toString()}\': action can only be used on properties with a function value.`\n  },\n  4(prop) {\n      return `Cannot decorate \'${prop.toString()}\': computed can only be used on getter properties.`\n  },\n  */\n  5: "\'keys()\' can only be used on observable objects, arrays, sets and maps",\n  6: "\'values()\' can only be used on observable objects, arrays, sets and maps",\n  7: "\'entries()\' can only be used on observable objects, arrays and maps",\n  8: "\'set()\' can only be used on observable objects, arrays and maps",\n  9: "\'remove()\' can only be used on observable objects, arrays and maps",\n  10: "\'has()\' can only be used on observable objects, arrays and maps",\n  11: "\'get()\' can only be used on observable objects, arrays and maps",\n  12: "Invalid annotation",\n  13: "Dynamic observable objects cannot be frozen. If you\'re passing observables to 3rd party component/function that calls Object.freeze, pass copy instead: toJS(observable)",\n  14: "Intercept handlers should return nothing or a change object",\n  15: "Observable arrays cannot be frozen. If you\'re passing observables to 3rd party component/function that calls Object.freeze, pass copy instead: toJS(observable)",\n  16: "Modification exception: the internal structure of an observable array was changed.",\n  17: function _(index, length) {\n    return "[mobx.array] Index out of bounds, " + index + " is larger than " + length;\n  },\n  18: "mobx.map requires Map polyfill for the current browser. Check babel-polyfill or core-js/es6/map.js",\n  19: function _(other) {\n    return "Cannot initialize from classes that inherit from Map: " + other.constructor.name;\n  },\n  20: function _(other) {\n    return "Cannot initialize map from " + other;\n  },\n  21: function _(dataStructure) {\n    return "Cannot convert to map from \'" + dataStructure + "\'";\n  },\n  22: "mobx.set requires Set polyfill for the current browser. Check babel-polyfill or core-js/es6/set.js",\n  23: "It is not possible to get index atoms from arrays",\n  24: function _(thing) {\n    return "Cannot obtain administration from " + thing;\n  },\n  25: function _(property, name) {\n    return "the entry \'" + property + "\' does not exist in the observable map \'" + name + "\'";\n  },\n  26: "please specify a property",\n  27: function _(property, name) {\n    return "no observable property \'" + property.toString() + "\' found on the observable object \'" + name + "\'";\n  },\n  28: function _(thing) {\n    return "Cannot obtain atom from " + thing;\n  },\n  29: "Expecting some object",\n  30: "invalid action stack. did you forget to finish an action?",\n  31: "missing option for computed: get",\n  32: function _(name, derivation) {\n    return "Cycle detected in computation " + name + ": " + derivation;\n  },\n  33: function _(name) {\n    return "The setter of computed value \'" + name + "\' is trying to update itself. Did you intend to update an _observable_ value, instead of the computed property?";\n  },\n  34: function _(name) {\n    return "[ComputedValue \'" + name + "\'] It is not possible to assign a new value to a computed value.";\n  },\n  35: "There are multiple, different versions of MobX active. Make sure MobX is loaded only once or use `configure({ isolateGlobalState: true })`",\n  36: "isolateGlobalState should be called before MobX is running any reactions",\n  37: function _(method) {\n    return "[mobx] `observableArray." + method + "()` mutates the array in-place, which is not allowed inside a derivation. Use `array.slice()." + method + "()` instead";\n  },\n  38: "\'ownKeys()\' can only be used on observable objects",\n  39: "\'defineProperty()\' can only be used on observable objects"\n};\nvar errors =  false ? 0 : {};\nfunction die(error) {\n  for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    args[_key - 1] = arguments[_key];\n  }\n  if (false) { var e; }\n  throw new Error(typeof error === "number" ? "[MobX] minified error nr: " + error + (args.length ? " " + args.map(String).join(",") : "") + ". Find the full error at: https://github.com/mobxjs/mobx/blob/main/packages/mobx/src/errors.ts" : "[MobX] " + error);\n}\nvar mockGlobal = {};\nfunction getGlobal() {\n  if (typeof globalThis !== "undefined") {\n    return globalThis;\n  }\n  if (typeof window !== "undefined") {\n    return window;\n  }\n  if (typeof __webpack_require__.g !== "undefined") {\n    return __webpack_require__.g;\n  }\n  if (typeof self !== "undefined") {\n    return self;\n  }\n  return mockGlobal;\n}\n\n// We shorten anything used > 5 times\nvar mobx_esm_assign = Object.assign;\nvar getDescriptor = Object.getOwnPropertyDescriptor;\nvar defineProperty = Object.defineProperty;\nvar objectPrototype = Object.prototype;\nvar EMPTY_ARRAY = [];\nObject.freeze(EMPTY_ARRAY);\nvar EMPTY_OBJECT = {};\nObject.freeze(EMPTY_OBJECT);\nvar hasProxy = typeof Proxy !== "undefined";\nvar plainObjectString = /*#__PURE__*/Object.toString();\nfunction assertProxies() {\n  if (!hasProxy) {\n    die( false ? 0 : "Proxy not available");\n  }\n}\nfunction warnAboutProxyRequirement(msg) {\n  if (false) {}\n}\nfunction getNextId() {\n  return ++globalState.mobxGuid;\n}\n/**\n * Makes sure that the provided function is invoked at most once.\n */\nfunction once(func) {\n  var invoked = false;\n  return function () {\n    if (invoked) {\n      return;\n    }\n    invoked = true;\n    return func.apply(this, arguments);\n  };\n}\nvar noop = function noop() {};\nfunction isFunction(fn) {\n  return typeof fn === "function";\n}\nfunction isStringish(value) {\n  var t = typeof value;\n  switch (t) {\n    case "string":\n    case "symbol":\n    case "number":\n      return true;\n  }\n  return false;\n}\nfunction isObject(value) {\n  return value !== null && typeof value === "object";\n}\nfunction isPlainObject(value) {\n  if (!isObject(value)) {\n    return false;\n  }\n  var proto = Object.getPrototypeOf(value);\n  if (proto == null) {\n    return true;\n  }\n  var protoConstructor = Object.hasOwnProperty.call(proto, "constructor") && proto.constructor;\n  return typeof protoConstructor === "function" && protoConstructor.toString() === plainObjectString;\n}\n// https://stackoverflow.com/a/37865170\nfunction isGenerator(obj) {\n  var constructor = obj == null ? void 0 : obj.constructor;\n  if (!constructor) {\n    return false;\n  }\n  if ("GeneratorFunction" === constructor.name || "GeneratorFunction" === constructor.displayName) {\n    return true;\n  }\n  return false;\n}\nfunction addHiddenProp(object, propName, value) {\n  defineProperty(object, propName, {\n    enumerable: false,\n    writable: true,\n    configurable: true,\n    value: value\n  });\n}\nfunction addHiddenFinalProp(object, propName, value) {\n  defineProperty(object, propName, {\n    enumerable: false,\n    writable: false,\n    configurable: true,\n    value: value\n  });\n}\nfunction createInstanceofPredicate(name, theClass) {\n  var propName = "isMobX" + name;\n  theClass.prototype[propName] = true;\n  return function (x) {\n    return isObject(x) && x[propName] === true;\n  };\n}\nfunction isES6Map(thing) {\n  return thing instanceof Map;\n}\nfunction isES6Set(thing) {\n  return thing instanceof Set;\n}\nvar hasGetOwnPropertySymbols = typeof Object.getOwnPropertySymbols !== "undefined";\n/**\n * Returns the following: own enumerable keys and symbols.\n */\nfunction getPlainObjectKeys(object) {\n  var keys = Object.keys(object);\n  // Not supported in IE, so there are not going to be symbol props anyway...\n  if (!hasGetOwnPropertySymbols) {\n    return keys;\n  }\n  var symbols = Object.getOwnPropertySymbols(object);\n  if (!symbols.length) {\n    return keys;\n  }\n  return [].concat(keys, symbols.filter(function (s) {\n    return objectPrototype.propertyIsEnumerable.call(object, s);\n  }));\n}\n// From Immer utils\n// Returns all own keys, including non-enumerable and symbolic\nvar ownKeys = typeof Reflect !== "undefined" && Reflect.ownKeys ? Reflect.ownKeys : hasGetOwnPropertySymbols ? function (obj) {\n  return Object.getOwnPropertyNames(obj).concat(Object.getOwnPropertySymbols(obj));\n} : /* istanbul ignore next */Object.getOwnPropertyNames;\nfunction stringifyKey(key) {\n  if (typeof key === "string") {\n    return key;\n  }\n  if (typeof key === "symbol") {\n    return key.toString();\n  }\n  return new String(key).toString();\n}\nfunction toPrimitive(value) {\n  return value === null ? null : typeof value === "object" ? "" + value : value;\n}\nfunction hasProp(target, prop) {\n  return objectPrototype.hasOwnProperty.call(target, prop);\n}\n// From Immer utils\nvar getOwnPropertyDescriptors = Object.getOwnPropertyDescriptors || function getOwnPropertyDescriptors(target) {\n  // Polyfill needed for Hermes and IE, see https://github.com/facebook/hermes/issues/274\n  var res = {};\n  // Note: without polyfill for ownKeys, symbols won\'t be picked up\n  ownKeys(target).forEach(function (key) {\n    res[key] = getDescriptor(target, key);\n  });\n  return res;\n};\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if ("value" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);\n  }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  Object.defineProperty(Constructor, "prototype", {\n    writable: false\n  });\n  return Constructor;\n}\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  _setPrototypeOf(subClass, superClass);\n}\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n  return _setPrototypeOf(o, p);\n}\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called");\n  }\n  return self;\n}\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === "string") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === "Object" && o.constructor) n = o.constructor.name;\n  if (n === "Map" || n === "Set") return Array.from(o);\n  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n  return arr2;\n}\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) {\n  var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];\n  if (it) return (it = it.call(o)).next.bind(it);\n  if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {\n    if (it) o = it;\n    var i = 0;\n    return function () {\n      if (i >= o.length) return {\n        done: true\n      };\n      return {\n        done: false,\n        value: o[i++]\n      };\n    };\n  }\n  throw new TypeError("Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");\n}\nfunction _toPrimitive(input, hint) {\n  if (typeof input !== "object" || input === null) return input;\n  var prim = input[Symbol.toPrimitive];\n  if (prim !== undefined) {\n    var res = prim.call(input, hint || "default");\n    if (typeof res !== "object") return res;\n    throw new TypeError("@@toPrimitive must return a primitive value.");\n  }\n  return (hint === "string" ? String : Number)(input);\n}\nfunction _toPropertyKey(arg) {\n  var key = _toPrimitive(arg, "string");\n  return typeof key === "symbol" ? key : String(key);\n}\nvar storedAnnotationsSymbol = /*#__PURE__*/Symbol("mobx-stored-annotations");\n/**\n * Creates a function that acts as\n * - decorator\n * - annotation object\n */\nfunction createDecoratorAnnotation(annotation) {\n  function decorator(target, property) {\n    if (is20223Decorator(property)) {\n      return annotation.decorate_20223_(target, property);\n    } else {\n      storeAnnotation(target, property, annotation);\n    }\n  }\n  return Object.assign(decorator, annotation);\n}\n/**\n * Stores annotation to prototype,\n * so it can be inspected later by `makeObservable` called from constructor\n */\nfunction storeAnnotation(prototype, key, annotation) {\n  if (!hasProp(prototype, storedAnnotationsSymbol)) {\n    addHiddenProp(prototype, storedAnnotationsSymbol, _extends({}, prototype[storedAnnotationsSymbol]));\n  }\n  // @override must override something\n  if (false) { var fieldName; }\n  // Cannot re-decorate\n  assertNotDecorated(prototype, annotation, key);\n  // Ignore override\n  if (!isOverride(annotation)) {\n    prototype[storedAnnotationsSymbol][key] = annotation;\n  }\n}\nfunction assertNotDecorated(prototype, annotation, key) {\n  if (false) { var requestedAnnotationType, currentAnnotationType, fieldName; }\n}\n/**\n * Collects annotations from prototypes and stores them on target (instance)\n */\nfunction collectStoredAnnotations(target) {\n  if (!hasProp(target, storedAnnotationsSymbol)) {\n    // if (__DEV__ && !target[storedAnnotationsSymbol]) {\n    //     die(\n    //         `No annotations were passed to makeObservable, but no decorated members have been found either`\n    //     )\n    // }\n    // We need a copy as we will remove annotation from the list once it\'s applied.\n    addHiddenProp(target, storedAnnotationsSymbol, _extends({}, target[storedAnnotationsSymbol]));\n  }\n  return target[storedAnnotationsSymbol];\n}\nfunction is20223Decorator(context) {\n  return typeof context == "object" && typeof context["kind"] == "string";\n}\nfunction assert20223DecoratorType(context, types) {\n  if (false) {}\n}\nvar $mobx = /*#__PURE__*/Symbol("mobx administration");\nvar Atom = /*#__PURE__*/function () {\n  // for effective unobserving. BaseAtom has true, for extra optimization, so its onBecomeUnobserved never gets called, because it\'s not needed\n\n  /**\n   * Create a new atom. For debugging purposes it is recommended to give it a name.\n   * The onBecomeObserved and onBecomeUnobserved callbacks can be used for resource management.\n   */\n  function Atom(name_) {\n    if (name_ === void 0) {\n      name_ =  false ? 0 : "Atom";\n    }\n    this.name_ = void 0;\n    this.isPendingUnobservation_ = false;\n    this.isBeingObserved_ = false;\n    this.observers_ = new Set();\n    this.diffValue_ = 0;\n    this.lastAccessedBy_ = 0;\n    this.lowestObserverState_ = IDerivationState_.NOT_TRACKING_;\n    this.onBOL = void 0;\n    this.onBUOL = void 0;\n    this.name_ = name_;\n  }\n  // onBecomeObservedListeners\n  var _proto = Atom.prototype;\n  _proto.onBO = function onBO() {\n    if (this.onBOL) {\n      this.onBOL.forEach(function (listener) {\n        return listener();\n      });\n    }\n  };\n  _proto.onBUO = function onBUO() {\n    if (this.onBUOL) {\n      this.onBUOL.forEach(function (listener) {\n        return listener();\n      });\n    }\n  }\n  /**\n   * Invoke this method to notify mobx that your atom has been used somehow.\n   * Returns true if there is currently a reactive context.\n   */;\n  _proto.reportObserved = function reportObserved$1() {\n    return reportObserved(this);\n  }\n  /**\n   * Invoke this method _after_ this method has changed to signal mobx that all its observers should invalidate.\n   */;\n  _proto.reportChanged = function reportChanged() {\n    startBatch();\n    propagateChanged(this);\n    endBatch();\n  };\n  _proto.toString = function toString() {\n    return this.name_;\n  };\n  return Atom;\n}();\nvar isAtom = /*#__PURE__*/createInstanceofPredicate("Atom", Atom);\nfunction createAtom(name, onBecomeObservedHandler, onBecomeUnobservedHandler) {\n  if (onBecomeObservedHandler === void 0) {\n    onBecomeObservedHandler = noop;\n  }\n  if (onBecomeUnobservedHandler === void 0) {\n    onBecomeUnobservedHandler = noop;\n  }\n  var atom = new Atom(name);\n  // default `noop` listener will not initialize the hook Set\n  if (onBecomeObservedHandler !== noop) {\n    onBecomeObserved(atom, onBecomeObservedHandler);\n  }\n  if (onBecomeUnobservedHandler !== noop) {\n    onBecomeUnobserved(atom, onBecomeUnobservedHandler);\n  }\n  return atom;\n}\nfunction identityComparer(a, b) {\n  return a === b;\n}\nfunction structuralComparer(a, b) {\n  return deepEqual(a, b);\n}\nfunction shallowComparer(a, b) {\n  return deepEqual(a, b, 1);\n}\nfunction defaultComparer(a, b) {\n  if (Object.is) {\n    return Object.is(a, b);\n  }\n  return a === b ? a !== 0 || 1 / a === 1 / b : a !== a && b !== b;\n}\nvar comparer = {\n  identity: identityComparer,\n  structural: structuralComparer,\n  "default": defaultComparer,\n  shallow: shallowComparer\n};\nfunction deepEnhancer(v, _, name) {\n  // it is an observable already, done\n  if (isObservable(v)) {\n    return v;\n  }\n  // something that can be converted and mutated?\n  if (Array.isArray(v)) {\n    return mobx_esm_observable.array(v, {\n      name: name\n    });\n  }\n  if (isPlainObject(v)) {\n    return mobx_esm_observable.object(v, undefined, {\n      name: name\n    });\n  }\n  if (isES6Map(v)) {\n    return mobx_esm_observable.map(v, {\n      name: name\n    });\n  }\n  if (isES6Set(v)) {\n    return mobx_esm_observable.set(v, {\n      name: name\n    });\n  }\n  if (typeof v === "function" && !isAction(v) && !isFlow(v)) {\n    if (isGenerator(v)) {\n      return flow(v);\n    } else {\n      return autoAction(name, v);\n    }\n  }\n  return v;\n}\nfunction shallowEnhancer(v, _, name) {\n  if (v === undefined || v === null) {\n    return v;\n  }\n  if (isObservableObject(v) || isObservableArray(v) || isObservableMap(v) || isObservableSet(v)) {\n    return v;\n  }\n  if (Array.isArray(v)) {\n    return mobx_esm_observable.array(v, {\n      name: name,\n      deep: false\n    });\n  }\n  if (isPlainObject(v)) {\n    return mobx_esm_observable.object(v, undefined, {\n      name: name,\n      deep: false\n    });\n  }\n  if (isES6Map(v)) {\n    return mobx_esm_observable.map(v, {\n      name: name,\n      deep: false\n    });\n  }\n  if (isES6Set(v)) {\n    return mobx_esm_observable.set(v, {\n      name: name,\n      deep: false\n    });\n  }\n  if (false) {}\n}\nfunction referenceEnhancer(newValue) {\n  // never turn into an observable\n  return newValue;\n}\nfunction refStructEnhancer(v, oldValue) {\n  if (false) {}\n  if (deepEqual(v, oldValue)) {\n    return oldValue;\n  }\n  return v;\n}\nvar OVERRIDE = "override";\nvar override = /*#__PURE__*/createDecoratorAnnotation({\n  annotationType_: OVERRIDE,\n  make_: make_,\n  extend_: extend_,\n  decorate_20223_: decorate_20223_\n});\nfunction isOverride(annotation) {\n  return annotation.annotationType_ === OVERRIDE;\n}\nfunction make_(adm, key) {\n  // Must not be plain object\n  if (false) {}\n  // Must override something\n  if (false) {}\n  return 0 /* MakeResult.Cancel */;\n}\nfunction extend_(adm, key, descriptor, proxyTrap) {\n  die("\'" + this.annotationType_ + "\' can only be used with \'makeObservable\'");\n}\nfunction decorate_20223_(desc, context) {\n  console.warn("\'" + this.annotationType_ + "\' cannot be used with decorators - this is a no-op");\n}\nfunction createActionAnnotation(name, options) {\n  return {\n    annotationType_: name,\n    options_: options,\n    make_: make_$1,\n    extend_: extend_$1,\n    decorate_20223_: decorate_20223_$1\n  };\n}\nfunction make_$1(adm, key, descriptor, source) {\n  var _this$options_;\n  // bound\n  if ((_this$options_ = this.options_) != null && _this$options_.bound) {\n    return this.extend_(adm, key, descriptor, false) === null ? 0 /* MakeResult.Cancel */ : 1 /* MakeResult.Break */;\n  }\n  // own\n  if (source === adm.target_) {\n    return this.extend_(adm, key, descriptor, false) === null ? 0 /* MakeResult.Cancel */ : 2 /* MakeResult.Continue */;\n  }\n  // prototype\n  if (isAction(descriptor.value)) {\n    // A prototype could have been annotated already by other constructor,\n    // rest of the proto chain must be annotated already\n    return 1 /* MakeResult.Break */;\n  }\n  var actionDescriptor = createActionDescriptor(adm, this, key, descriptor, false);\n  defineProperty(source, key, actionDescriptor);\n  return 2 /* MakeResult.Continue */;\n}\nfunction extend_$1(adm, key, descriptor, proxyTrap) {\n  var actionDescriptor = createActionDescriptor(adm, this, key, descriptor);\n  return adm.defineProperty_(key, actionDescriptor, proxyTrap);\n}\nfunction decorate_20223_$1(mthd, context) {\n  if (false) {}\n  var kind = context.kind,\n    name = context.name,\n    addInitializer = context.addInitializer;\n  var ann = this;\n  var _createAction = function _createAction(m) {\n    var _ann$options_$name, _ann$options_, _ann$options_$autoAct, _ann$options_2;\n    return createAction((_ann$options_$name = (_ann$options_ = ann.options_) == null ? void 0 : _ann$options_.name) != null ? _ann$options_$name : name.toString(), m, (_ann$options_$autoAct = (_ann$options_2 = ann.options_) == null ? void 0 : _ann$options_2.autoAction) != null ? _ann$options_$autoAct : false);\n  };\n  // Backwards/Legacy behavior, expects makeObservable(this)\n  if (kind == "field") {\n    addInitializer(function () {\n      storeAnnotation(this, name, ann);\n    });\n    return;\n  }\n  if (kind == "method") {\n    var _this$options_2;\n    if (!isAction(mthd)) {\n      mthd = _createAction(mthd);\n    }\n    if ((_this$options_2 = this.options_) != null && _this$options_2.bound) {\n      addInitializer(function () {\n        var self = this;\n        var bound = self[name].bind(self);\n        bound.isMobxAction = true;\n        self[name] = bound;\n      });\n    }\n    return mthd;\n  }\n  die("Cannot apply \'" + ann.annotationType_ + "\' to \'" + String(name) + "\' (kind: " + kind + "):" + ("\\n\'" + ann.annotationType_ + "\' can only be used on properties with a function value."));\n}\nfunction assertActionDescriptor(adm, _ref, key, _ref2) {\n  var annotationType_ = _ref.annotationType_;\n  var value = _ref2.value;\n  if (false) {}\n}\nfunction createActionDescriptor(adm, annotation, key, descriptor,\n// provides ability to disable safeDescriptors for prototypes\nsafeDescriptors) {\n  var _annotation$options_, _annotation$options_$, _annotation$options_2, _annotation$options_$2, _annotation$options_3, _annotation$options_4, _adm$proxy_2;\n  if (safeDescriptors === void 0) {\n    safeDescriptors = globalState.safeDescriptors;\n  }\n  assertActionDescriptor(adm, annotation, key, descriptor);\n  var value = descriptor.value;\n  if ((_annotation$options_ = annotation.options_) != null && _annotation$options_.bound) {\n    var _adm$proxy_;\n    value = value.bind((_adm$proxy_ = adm.proxy_) != null ? _adm$proxy_ : adm.target_);\n  }\n  return {\n    value: createAction((_annotation$options_$ = (_annotation$options_2 = annotation.options_) == null ? void 0 : _annotation$options_2.name) != null ? _annotation$options_$ : key.toString(), value, (_annotation$options_$2 = (_annotation$options_3 = annotation.options_) == null ? void 0 : _annotation$options_3.autoAction) != null ? _annotation$options_$2 : false,\n    // https://github.com/mobxjs/mobx/discussions/3140\n    (_annotation$options_4 = annotation.options_) != null && _annotation$options_4.bound ? (_adm$proxy_2 = adm.proxy_) != null ? _adm$proxy_2 : adm.target_ : undefined),\n    // Non-configurable for classes\n    // prevents accidental field redefinition in subclass\n    configurable: safeDescriptors ? adm.isPlainObject_ : true,\n    // https://github.com/mobxjs/mobx/pull/2641#issuecomment-737292058\n    enumerable: false,\n    // Non-obsevable, therefore non-writable\n    // Also prevents rewriting in subclass constructor\n    writable: safeDescriptors ? false : true\n  };\n}\nfunction createFlowAnnotation(name, options) {\n  return {\n    annotationType_: name,\n    options_: options,\n    make_: make_$2,\n    extend_: extend_$2,\n    decorate_20223_: decorate_20223_$2\n  };\n}\nfunction make_$2(adm, key, descriptor, source) {\n  var _this$options_;\n  // own\n  if (source === adm.target_) {\n    return this.extend_(adm, key, descriptor, false) === null ? 0 /* MakeResult.Cancel */ : 2 /* MakeResult.Continue */;\n  }\n  // prototype\n  // bound - must annotate protos to support super.flow()\n  if ((_this$options_ = this.options_) != null && _this$options_.bound && (!hasProp(adm.target_, key) || !isFlow(adm.target_[key]))) {\n    if (this.extend_(adm, key, descriptor, false) === null) {\n      return 0 /* MakeResult.Cancel */;\n    }\n  }\n  if (isFlow(descriptor.value)) {\n    // A prototype could have been annotated already by other constructor,\n    // rest of the proto chain must be annotated already\n    return 1 /* MakeResult.Break */;\n  }\n  var flowDescriptor = createFlowDescriptor(adm, this, key, descriptor, false, false);\n  defineProperty(source, key, flowDescriptor);\n  return 2 /* MakeResult.Continue */;\n}\nfunction extend_$2(adm, key, descriptor, proxyTrap) {\n  var _this$options_2;\n  var flowDescriptor = createFlowDescriptor(adm, this, key, descriptor, (_this$options_2 = this.options_) == null ? void 0 : _this$options_2.bound);\n  return adm.defineProperty_(key, flowDescriptor, proxyTrap);\n}\nfunction decorate_20223_$2(mthd, context) {\n  var _this$options_3;\n  if (false) {}\n  var name = context.name,\n    addInitializer = context.addInitializer;\n  if (!isFlow(mthd)) {\n    mthd = flow(mthd);\n  }\n  if ((_this$options_3 = this.options_) != null && _this$options_3.bound) {\n    addInitializer(function () {\n      var self = this;\n      var bound = self[name].bind(self);\n      bound.isMobXFlow = true;\n      self[name] = bound;\n    });\n  }\n  return mthd;\n}\nfunction assertFlowDescriptor(adm, _ref, key, _ref2) {\n  var annotationType_ = _ref.annotationType_;\n  var value = _ref2.value;\n  if (false) {}\n}\nfunction createFlowDescriptor(adm, annotation, key, descriptor, bound,\n// provides ability to disable safeDescriptors for prototypes\nsafeDescriptors) {\n  if (safeDescriptors === void 0) {\n    safeDescriptors = globalState.safeDescriptors;\n  }\n  assertFlowDescriptor(adm, annotation, key, descriptor);\n  var value = descriptor.value;\n  // In case of flow.bound, the descriptor can be from already annotated prototype\n  if (!isFlow(value)) {\n    value = flow(value);\n  }\n  if (bound) {\n    var _adm$proxy_;\n    // We do not keep original function around, so we bind the existing flow\n    value = value.bind((_adm$proxy_ = adm.proxy_) != null ? _adm$proxy_ : adm.target_);\n    // This is normally set by `flow`, but `bind` returns new function...\n    value.isMobXFlow = true;\n  }\n  return {\n    value: value,\n    // Non-configurable for classes\n    // prevents accidental field redefinition in subclass\n    configurable: safeDescriptors ? adm.isPlainObject_ : true,\n    // https://github.com/mobxjs/mobx/pull/2641#issuecomment-737292058\n    enumerable: false,\n    // Non-obsevable, therefore non-writable\n    // Also prevents rewriting in subclass constructor\n    writable: safeDescriptors ? false : true\n  };\n}\nfunction createComputedAnnotation(name, options) {\n  return {\n    annotationType_: name,\n    options_: options,\n    make_: make_$3,\n    extend_: extend_$3,\n    decorate_20223_: decorate_20223_$3\n  };\n}\nfunction make_$3(adm, key, descriptor) {\n  return this.extend_(adm, key, descriptor, false) === null ? 0 /* MakeResult.Cancel */ : 1 /* MakeResult.Break */;\n}\nfunction extend_$3(adm, key, descriptor, proxyTrap) {\n  assertComputedDescriptor(adm, this, key, descriptor);\n  return adm.defineComputedProperty_(key, _extends({}, this.options_, {\n    get: descriptor.get,\n    set: descriptor.set\n  }), proxyTrap);\n}\nfunction decorate_20223_$3(get, context) {\n  if (false) {}\n  var ann = this;\n  var key = context.name,\n    addInitializer = context.addInitializer;\n  addInitializer(function () {\n    var adm = asObservableObject(this)[$mobx];\n    var options = _extends({}, ann.options_, {\n      get: get,\n      context: this\n    });\n    options.name || (options.name =  false ? 0 : "ObservableObject." + key.toString());\n    adm.values_.set(key, new ComputedValue(options));\n  });\n  return function () {\n    return this[$mobx].getObservablePropValue_(key);\n  };\n}\nfunction assertComputedDescriptor(adm, _ref, key, _ref2) {\n  var annotationType_ = _ref.annotationType_;\n  var get = _ref2.get;\n  if (false) {}\n}\nfunction createObservableAnnotation(name, options) {\n  return {\n    annotationType_: name,\n    options_: options,\n    make_: make_$4,\n    extend_: extend_$4,\n    decorate_20223_: decorate_20223_$4\n  };\n}\nfunction make_$4(adm, key, descriptor) {\n  return this.extend_(adm, key, descriptor, false) === null ? 0 /* MakeResult.Cancel */ : 1 /* MakeResult.Break */;\n}\nfunction extend_$4(adm, key, descriptor, proxyTrap) {\n  var _this$options_$enhanc, _this$options_;\n  assertObservableDescriptor(adm, this, key, descriptor);\n  return adm.defineObservableProperty_(key, descriptor.value, (_this$options_$enhanc = (_this$options_ = this.options_) == null ? void 0 : _this$options_.enhancer) != null ? _this$options_$enhanc : deepEnhancer, proxyTrap);\n}\nfunction decorate_20223_$4(desc, context) {\n  if (false) {}\n  var ann = this;\n  var kind = context.kind,\n    name = context.name;\n  // The laziness here is not ideal... It\'s a workaround to how 2022.3 Decorators are implemented:\n  //   `addInitializer` callbacks are executed _before_ any accessors are defined (instead of the ideal-for-us right after each).\n  //   This means that, if we were to do our stuff in an `addInitializer`, we\'d attempt to read a private slot\n  //   before it has been initialized. The runtime doesn\'t like that and throws a `Cannot read private member\n  //   from an object whose class did not declare it` error.\n  // TODO: it seems that this will not be required anymore in the final version of the spec\n  // See TODO: link\n  var initializedObjects = new WeakSet();\n  function initializeObservable(target, value) {\n    var _ann$options_$enhance, _ann$options_;\n    var adm = asObservableObject(target)[$mobx];\n    var observable = new ObservableValue(value, (_ann$options_$enhance = (_ann$options_ = ann.options_) == null ? void 0 : _ann$options_.enhancer) != null ? _ann$options_$enhance : deepEnhancer,  false ? 0 : "ObservableObject." + name.toString(), false);\n    adm.values_.set(name, observable);\n    initializedObjects.add(target);\n  }\n  if (kind == "accessor") {\n    return {\n      get: function get() {\n        if (!initializedObjects.has(this)) {\n          initializeObservable(this, desc.get.call(this));\n        }\n        return this[$mobx].getObservablePropValue_(name);\n      },\n      set: function set(value) {\n        if (!initializedObjects.has(this)) {\n          initializeObservable(this, value);\n        }\n        return this[$mobx].setObservablePropValue_(name, value);\n      },\n      init: function init(value) {\n        if (!initializedObjects.has(this)) {\n          initializeObservable(this, value);\n        }\n        return value;\n      }\n    };\n  }\n  return;\n}\nfunction assertObservableDescriptor(adm, _ref, key, descriptor) {\n  var annotationType_ = _ref.annotationType_;\n  if (false) {}\n}\nvar AUTO = "true";\nvar autoAnnotation = /*#__PURE__*/createAutoAnnotation();\nfunction createAutoAnnotation(options) {\n  return {\n    annotationType_: AUTO,\n    options_: options,\n    make_: make_$5,\n    extend_: extend_$5,\n    decorate_20223_: decorate_20223_$5\n  };\n}\nfunction make_$5(adm, key, descriptor, source) {\n  var _this$options_3, _this$options_4;\n  // getter -> computed\n  if (descriptor.get) {\n    return computed.make_(adm, key, descriptor, source);\n  }\n  // lone setter -> action setter\n  if (descriptor.set) {\n    // TODO make action applicable to setter and delegate to action.make_\n    var set = createAction(key.toString(), descriptor.set);\n    // own\n    if (source === adm.target_) {\n      return adm.defineProperty_(key, {\n        configurable: globalState.safeDescriptors ? adm.isPlainObject_ : true,\n        set: set\n      }) === null ? 0 /* MakeResult.Cancel */ : 2 /* MakeResult.Continue */;\n    }\n    // proto\n    defineProperty(source, key, {\n      configurable: true,\n      set: set\n    });\n    return 2 /* MakeResult.Continue */;\n  }\n  // function on proto -> autoAction/flow\n  if (source !== adm.target_ && typeof descriptor.value === "function") {\n    var _this$options_2;\n    if (isGenerator(descriptor.value)) {\n      var _this$options_;\n      var flowAnnotation = (_this$options_ = this.options_) != null && _this$options_.autoBind ? flow.bound : flow;\n      return flowAnnotation.make_(adm, key, descriptor, source);\n    }\n    var actionAnnotation = (_this$options_2 = this.options_) != null && _this$options_2.autoBind ? autoAction.bound : autoAction;\n    return actionAnnotation.make_(adm, key, descriptor, source);\n  }\n  // other -> observable\n  // Copy props from proto as well, see test:\n  // "decorate should work with Object.create"\n  var observableAnnotation = ((_this$options_3 = this.options_) == null ? void 0 : _this$options_3.deep) === false ? mobx_esm_observable.ref : mobx_esm_observable;\n  // if function respect autoBind option\n  if (typeof descriptor.value === "function" && (_this$options_4 = this.options_) != null && _this$options_4.autoBind) {\n    var _adm$proxy_;\n    descriptor.value = descriptor.value.bind((_adm$proxy_ = adm.proxy_) != null ? _adm$proxy_ : adm.target_);\n  }\n  return observableAnnotation.make_(adm, key, descriptor, source);\n}\nfunction extend_$5(adm, key, descriptor, proxyTrap) {\n  var _this$options_5, _this$options_6;\n  // getter -> computed\n  if (descriptor.get) {\n    return computed.extend_(adm, key, descriptor, proxyTrap);\n  }\n  // lone setter -> action setter\n  if (descriptor.set) {\n    // TODO make action applicable to setter and delegate to action.extend_\n    return adm.defineProperty_(key, {\n      configurable: globalState.safeDescriptors ? adm.isPlainObject_ : true,\n      set: createAction(key.toString(), descriptor.set)\n    }, proxyTrap);\n  }\n  // other -> observable\n  // if function respect autoBind option\n  if (typeof descriptor.value === "function" && (_this$options_5 = this.options_) != null && _this$options_5.autoBind) {\n    var _adm$proxy_2;\n    descriptor.value = descriptor.value.bind((_adm$proxy_2 = adm.proxy_) != null ? _adm$proxy_2 : adm.target_);\n  }\n  var observableAnnotation = ((_this$options_6 = this.options_) == null ? void 0 : _this$options_6.deep) === false ? mobx_esm_observable.ref : mobx_esm_observable;\n  return observableAnnotation.extend_(adm, key, descriptor, proxyTrap);\n}\nfunction decorate_20223_$5(desc, context) {\n  die("\'" + this.annotationType_ + "\' cannot be used as a decorator");\n}\nvar OBSERVABLE = "observable";\nvar OBSERVABLE_REF = "observable.ref";\nvar OBSERVABLE_SHALLOW = "observable.shallow";\nvar OBSERVABLE_STRUCT = "observable.struct";\n// Predefined bags of create observable options, to avoid allocating temporarily option objects\n// in the majority of cases\nvar defaultCreateObservableOptions = {\n  deep: true,\n  name: undefined,\n  defaultDecorator: undefined,\n  proxy: true\n};\nObject.freeze(defaultCreateObservableOptions);\nfunction asCreateObservableOptions(thing) {\n  return thing || defaultCreateObservableOptions;\n}\nvar observableAnnotation = /*#__PURE__*/createObservableAnnotation(OBSERVABLE);\nvar observableRefAnnotation = /*#__PURE__*/createObservableAnnotation(OBSERVABLE_REF, {\n  enhancer: referenceEnhancer\n});\nvar observableShallowAnnotation = /*#__PURE__*/createObservableAnnotation(OBSERVABLE_SHALLOW, {\n  enhancer: shallowEnhancer\n});\nvar observableStructAnnotation = /*#__PURE__*/createObservableAnnotation(OBSERVABLE_STRUCT, {\n  enhancer: refStructEnhancer\n});\nvar observableDecoratorAnnotation = /*#__PURE__*/createDecoratorAnnotation(observableAnnotation);\nfunction getEnhancerFromOptions(options) {\n  return options.deep === true ? deepEnhancer : options.deep === false ? referenceEnhancer : getEnhancerFromAnnotation(options.defaultDecorator);\n}\nfunction getAnnotationFromOptions(options) {\n  var _options$defaultDecor;\n  return options ? (_options$defaultDecor = options.defaultDecorator) != null ? _options$defaultDecor : createAutoAnnotation(options) : undefined;\n}\nfunction getEnhancerFromAnnotation(annotation) {\n  var _annotation$options_$, _annotation$options_;\n  return !annotation ? deepEnhancer : (_annotation$options_$ = (_annotation$options_ = annotation.options_) == null ? void 0 : _annotation$options_.enhancer) != null ? _annotation$options_$ : deepEnhancer;\n}\n/**\n * Turns an object, array or function into a reactive structure.\n * @param v the value which should become observable.\n */\nfunction createObservable(v, arg2, arg3) {\n  // @observable someProp; (2022.3 Decorators)\n  if (is20223Decorator(arg2)) {\n    return observableAnnotation.decorate_20223_(v, arg2);\n  }\n  // @observable someProp;\n  if (isStringish(arg2)) {\n    storeAnnotation(v, arg2, observableAnnotation);\n    return;\n  }\n  // already observable - ignore\n  if (isObservable(v)) {\n    return v;\n  }\n  // plain object\n  if (isPlainObject(v)) {\n    return mobx_esm_observable.object(v, arg2, arg3);\n  }\n  // Array\n  if (Array.isArray(v)) {\n    return mobx_esm_observable.array(v, arg2);\n  }\n  // Map\n  if (isES6Map(v)) {\n    return mobx_esm_observable.map(v, arg2);\n  }\n  // Set\n  if (isES6Set(v)) {\n    return mobx_esm_observable.set(v, arg2);\n  }\n  // other object - ignore\n  if (typeof v === "object" && v !== null) {\n    return v;\n  }\n  // anything else\n  return mobx_esm_observable.box(v, arg2);\n}\nmobx_esm_assign(createObservable, observableDecoratorAnnotation);\nvar observableFactories = {\n  box: function box(value, options) {\n    var o = asCreateObservableOptions(options);\n    return new ObservableValue(value, getEnhancerFromOptions(o), o.name, true, o.equals);\n  },\n  array: function array(initialValues, options) {\n    var o = asCreateObservableOptions(options);\n    return (globalState.useProxies === false || o.proxy === false ? createLegacyArray : createObservableArray)(initialValues, getEnhancerFromOptions(o), o.name);\n  },\n  map: function map(initialValues, options) {\n    var o = asCreateObservableOptions(options);\n    return new ObservableMap(initialValues, getEnhancerFromOptions(o), o.name);\n  },\n  set: function set(initialValues, options) {\n    var o = asCreateObservableOptions(options);\n    return new ObservableSet(initialValues, getEnhancerFromOptions(o), o.name);\n  },\n  object: function object(props, decorators, options) {\n    return initObservable(function () {\n      return extendObservable(globalState.useProxies === false || (options == null ? void 0 : options.proxy) === false ? asObservableObject({}, options) : asDynamicObservableObject({}, options), props, decorators);\n    });\n  },\n  ref: /*#__PURE__*/createDecoratorAnnotation(observableRefAnnotation),\n  shallow: /*#__PURE__*/createDecoratorAnnotation(observableShallowAnnotation),\n  deep: observableDecoratorAnnotation,\n  struct: /*#__PURE__*/createDecoratorAnnotation(observableStructAnnotation)\n};\n// eslint-disable-next-line\nvar mobx_esm_observable = /*#__PURE__*/mobx_esm_assign(createObservable, observableFactories);\nvar COMPUTED = "computed";\nvar COMPUTED_STRUCT = "computed.struct";\nvar computedAnnotation = /*#__PURE__*/createComputedAnnotation(COMPUTED);\nvar computedStructAnnotation = /*#__PURE__*/createComputedAnnotation(COMPUTED_STRUCT, {\n  equals: comparer.structural\n});\n/**\n * Decorator for class properties: @computed get value() { return expr; }.\n * For legacy purposes also invokable as ES5 observable created: `computed(() => expr)`;\n */\nvar computed = function computed(arg1, arg2) {\n  if (is20223Decorator(arg2)) {\n    // @computed (2022.3 Decorators)\n    return computedAnnotation.decorate_20223_(arg1, arg2);\n  }\n  if (isStringish(arg2)) {\n    // @computed\n    return storeAnnotation(arg1, arg2, computedAnnotation);\n  }\n  if (isPlainObject(arg1)) {\n    // @computed({ options })\n    return createDecoratorAnnotation(createComputedAnnotation(COMPUTED, arg1));\n  }\n  // computed(expr, options?)\n  if (false) {}\n  var opts = isPlainObject(arg2) ? arg2 : {};\n  opts.get = arg1;\n  opts.name || (opts.name = arg1.name || ""); /* for generated name */\n  return new ComputedValue(opts);\n};\nObject.assign(computed, computedAnnotation);\ncomputed.struct = /*#__PURE__*/createDecoratorAnnotation(computedStructAnnotation);\nvar _getDescriptor$config, _getDescriptor;\n// we don\'t use globalState for these in order to avoid possible issues with multiple\n// mobx versions\nvar currentActionId = 0;\nvar nextActionId = 1;\nvar isFunctionNameConfigurable = (_getDescriptor$config = (_getDescriptor = /*#__PURE__*/getDescriptor(function () {}, "name")) == null ? void 0 : _getDescriptor.configurable) != null ? _getDescriptor$config : false;\n// we can safely recycle this object\nvar tmpNameDescriptor = {\n  value: "action",\n  configurable: true,\n  writable: false,\n  enumerable: false\n};\nfunction createAction(actionName, fn, autoAction, ref) {\n  if (autoAction === void 0) {\n    autoAction = false;\n  }\n  if (false) {}\n  function res() {\n    return executeAction(actionName, autoAction, fn, ref || this, arguments);\n  }\n  res.isMobxAction = true;\n  res.toString = function () {\n    return fn.toString();\n  };\n  if (isFunctionNameConfigurable) {\n    tmpNameDescriptor.value = actionName;\n    defineProperty(res, "name", tmpNameDescriptor);\n  }\n  return res;\n}\nfunction executeAction(actionName, canRunAsDerivation, fn, scope, args) {\n  var runInfo = _startAction(actionName, canRunAsDerivation, scope, args);\n  try {\n    return fn.apply(scope, args);\n  } catch (err) {\n    runInfo.error_ = err;\n    throw err;\n  } finally {\n    _endAction(runInfo);\n  }\n}\nfunction _startAction(actionName, canRunAsDerivation,\n// true for autoAction\nscope, args) {\n  var notifySpy_ =  false && 0;\n  var startTime_ = 0;\n  if (false) { var flattenedArgs; }\n  var prevDerivation_ = globalState.trackingDerivation;\n  var runAsAction = !canRunAsDerivation || !prevDerivation_;\n  startBatch();\n  var prevAllowStateChanges_ = globalState.allowStateChanges; // by default preserve previous allow\n  if (runAsAction) {\n    untrackedStart();\n    prevAllowStateChanges_ = allowStateChangesStart(true);\n  }\n  var prevAllowStateReads_ = allowStateReadsStart(true);\n  var runInfo = {\n    runAsAction_: runAsAction,\n    prevDerivation_: prevDerivation_,\n    prevAllowStateChanges_: prevAllowStateChanges_,\n    prevAllowStateReads_: prevAllowStateReads_,\n    notifySpy_: notifySpy_,\n    startTime_: startTime_,\n    actionId_: nextActionId++,\n    parentActionId_: currentActionId\n  };\n  currentActionId = runInfo.actionId_;\n  return runInfo;\n}\nfunction _endAction(runInfo) {\n  if (currentActionId !== runInfo.actionId_) {\n    die(30);\n  }\n  currentActionId = runInfo.parentActionId_;\n  if (runInfo.error_ !== undefined) {\n    globalState.suppressReactionErrors = true;\n  }\n  allowStateChangesEnd(runInfo.prevAllowStateChanges_);\n  allowStateReadsEnd(runInfo.prevAllowStateReads_);\n  endBatch();\n  if (runInfo.runAsAction_) {\n    untrackedEnd(runInfo.prevDerivation_);\n  }\n  if (false) {}\n  globalState.suppressReactionErrors = false;\n}\nfunction allowStateChanges(allowStateChanges, func) {\n  var prev = allowStateChangesStart(allowStateChanges);\n  try {\n    return func();\n  } finally {\n    allowStateChangesEnd(prev);\n  }\n}\nfunction allowStateChangesStart(allowStateChanges) {\n  var prev = globalState.allowStateChanges;\n  globalState.allowStateChanges = allowStateChanges;\n  return prev;\n}\nfunction allowStateChangesEnd(prev) {\n  globalState.allowStateChanges = prev;\n}\nvar _Symbol$toPrimitive;\nvar CREATE = "create";\n_Symbol$toPrimitive = Symbol.toPrimitive;\nvar ObservableValue = /*#__PURE__*/function (_Atom) {\n  _inheritsLoose(ObservableValue, _Atom);\n  function ObservableValue(value, enhancer, name_, notifySpy, equals) {\n    var _this;\n    if (name_ === void 0) {\n      name_ =  false ? 0 : "ObservableValue";\n    }\n    if (notifySpy === void 0) {\n      notifySpy = true;\n    }\n    if (equals === void 0) {\n      equals = comparer["default"];\n    }\n    _this = _Atom.call(this, name_) || this;\n    _this.enhancer = void 0;\n    _this.name_ = void 0;\n    _this.equals = void 0;\n    _this.hasUnreportedChange_ = false;\n    _this.interceptors_ = void 0;\n    _this.changeListeners_ = void 0;\n    _this.value_ = void 0;\n    _this.dehancer = void 0;\n    _this.enhancer = enhancer;\n    _this.name_ = name_;\n    _this.equals = equals;\n    _this.value_ = enhancer(value, undefined, name_);\n    if (false) {}\n    return _this;\n  }\n  var _proto = ObservableValue.prototype;\n  _proto.dehanceValue = function dehanceValue(value) {\n    if (this.dehancer !== undefined) {\n      return this.dehancer(value);\n    }\n    return value;\n  };\n  _proto.set = function set(newValue) {\n    var oldValue = this.value_;\n    newValue = this.prepareNewValue_(newValue);\n    if (newValue !== globalState.UNCHANGED) {\n      var notifySpy = isSpyEnabled();\n      if (false) {}\n      this.setNewValue_(newValue);\n      if (false) {}\n    }\n  };\n  _proto.prepareNewValue_ = function prepareNewValue_(newValue) {\n    checkIfStateModificationsAreAllowed(this);\n    if (hasInterceptors(this)) {\n      var change = interceptChange(this, {\n        object: this,\n        type: UPDATE,\n        newValue: newValue\n      });\n      if (!change) {\n        return globalState.UNCHANGED;\n      }\n      newValue = change.newValue;\n    }\n    // apply modifier\n    newValue = this.enhancer(newValue, this.value_, this.name_);\n    return this.equals(this.value_, newValue) ? globalState.UNCHANGED : newValue;\n  };\n  _proto.setNewValue_ = function setNewValue_(newValue) {\n    var oldValue = this.value_;\n    this.value_ = newValue;\n    this.reportChanged();\n    if (hasListeners(this)) {\n      notifyListeners(this, {\n        type: UPDATE,\n        object: this,\n        newValue: newValue,\n        oldValue: oldValue\n      });\n    }\n  };\n  _proto.get = function get() {\n    this.reportObserved();\n    return this.dehanceValue(this.value_);\n  };\n  _proto.intercept_ = function intercept_(handler) {\n    return registerInterceptor(this, handler);\n  };\n  _proto.observe_ = function observe_(listener, fireImmediately) {\n    if (fireImmediately) {\n      listener({\n        observableKind: "value",\n        debugObjectName: this.name_,\n        object: this,\n        type: UPDATE,\n        newValue: this.value_,\n        oldValue: undefined\n      });\n    }\n    return registerListener(this, listener);\n  };\n  _proto.raw = function raw() {\n    // used by MST ot get undehanced value\n    return this.value_;\n  };\n  _proto.toJSON = function toJSON() {\n    return this.get();\n  };\n  _proto.toString = function toString() {\n    return this.name_ + "[" + this.value_ + "]";\n  };\n  _proto.valueOf = function valueOf() {\n    return toPrimitive(this.get());\n  };\n  _proto[_Symbol$toPrimitive] = function () {\n    return this.valueOf();\n  };\n  return ObservableValue;\n}(Atom);\nvar isObservableValue = /*#__PURE__*/(/* unused pure expression or super */ null && (createInstanceofPredicate("ObservableValue", ObservableValue)));\nvar _Symbol$toPrimitive$1;\n/**\n * A node in the state dependency root that observes other nodes, and can be observed itself.\n *\n * ComputedValue will remember the result of the computation for the duration of the batch, or\n * while being observed.\n *\n * During this time it will recompute only when one of its direct dependencies changed,\n * but only when it is being accessed with `ComputedValue.get()`.\n *\n * Implementation description:\n * 1. First time it\'s being accessed it will compute and remember result\n *    give back remembered result until 2. happens\n * 2. First time any deep dependency change, propagate POSSIBLY_STALE to all observers, wait for 3.\n * 3. When it\'s being accessed, recompute if any shallow dependency changed.\n *    if result changed: propagate STALE to all observers, that were POSSIBLY_STALE from the last step.\n *    go to step 2. either way\n *\n * If at any point it\'s outside batch and it isn\'t observed: reset everything and go to 1.\n */\n_Symbol$toPrimitive$1 = Symbol.toPrimitive;\nvar ComputedValue = /*#__PURE__*/function () {\n  // nodes we are looking at. Our value depends on these nodes\n  // during tracking it\'s an array with new observed observers\n\n  // to check for cycles\n\n  // N.B: unminified as it is used by MST\n\n  /**\n   * Create a new computed value based on a function expression.\n   *\n   * The `name` property is for debug purposes only.\n   *\n   * The `equals` property specifies the comparer function to use to determine if a newly produced\n   * value differs from the previous value. Two comparers are provided in the library; `defaultComparer`\n   * compares based on identity comparison (===), and `structuralComparer` deeply compares the structure.\n   * Structural comparison can be convenient if you always produce a new aggregated object and\n   * don\'t want to notify observers if it is structurally the same.\n   * This is useful for working with vectors, mouse coordinates etc.\n   */\n  function ComputedValue(options) {\n    this.dependenciesState_ = IDerivationState_.NOT_TRACKING_;\n    this.observing_ = [];\n    this.newObserving_ = null;\n    this.isBeingObserved_ = false;\n    this.isPendingUnobservation_ = false;\n    this.observers_ = new Set();\n    this.diffValue_ = 0;\n    this.runId_ = 0;\n    this.lastAccessedBy_ = 0;\n    this.lowestObserverState_ = IDerivationState_.UP_TO_DATE_;\n    this.unboundDepsCount_ = 0;\n    this.value_ = new CaughtException(null);\n    this.name_ = void 0;\n    this.triggeredBy_ = void 0;\n    this.isComputing_ = false;\n    this.isRunningSetter_ = false;\n    this.derivation = void 0;\n    this.setter_ = void 0;\n    this.isTracing_ = TraceMode.NONE;\n    this.scope_ = void 0;\n    this.equals_ = void 0;\n    this.requiresReaction_ = void 0;\n    this.keepAlive_ = void 0;\n    this.onBOL = void 0;\n    this.onBUOL = void 0;\n    if (!options.get) {\n      die(31);\n    }\n    this.derivation = options.get;\n    this.name_ = options.name || ( false ? 0 : "ComputedValue");\n    if (options.set) {\n      this.setter_ = createAction( false ? 0 : "ComputedValue-setter", options.set);\n    }\n    this.equals_ = options.equals || (options.compareStructural || options.struct ? comparer.structural : comparer["default"]);\n    this.scope_ = options.context;\n    this.requiresReaction_ = options.requiresReaction;\n    this.keepAlive_ = !!options.keepAlive;\n  }\n  var _proto = ComputedValue.prototype;\n  _proto.onBecomeStale_ = function onBecomeStale_() {\n    propagateMaybeChanged(this);\n  };\n  _proto.onBO = function onBO() {\n    if (this.onBOL) {\n      this.onBOL.forEach(function (listener) {\n        return listener();\n      });\n    }\n  };\n  _proto.onBUO = function onBUO() {\n    if (this.onBUOL) {\n      this.onBUOL.forEach(function (listener) {\n        return listener();\n      });\n    }\n  }\n  /**\n   * Returns the current value of this computed value.\n   * Will evaluate its computation first if needed.\n   */;\n  _proto.get = function get() {\n    if (this.isComputing_) {\n      die(32, this.name_, this.derivation);\n    }\n    if (globalState.inBatch === 0 &&\n    // !globalState.trackingDerivatpion &&\n    this.observers_.size === 0 && !this.keepAlive_) {\n      if (shouldCompute(this)) {\n        this.warnAboutUntrackedRead_();\n        startBatch(); // See perf test \'computed memoization\'\n        this.value_ = this.computeValue_(false);\n        endBatch();\n      }\n    } else {\n      reportObserved(this);\n      if (shouldCompute(this)) {\n        var prevTrackingContext = globalState.trackingContext;\n        if (this.keepAlive_ && !prevTrackingContext) {\n          globalState.trackingContext = this;\n        }\n        if (this.trackAndCompute()) {\n          propagateChangeConfirmed(this);\n        }\n        globalState.trackingContext = prevTrackingContext;\n      }\n    }\n    var result = this.value_;\n    if (isCaughtException(result)) {\n      throw result.cause;\n    }\n    return result;\n  };\n  _proto.set = function set(value) {\n    if (this.setter_) {\n      if (this.isRunningSetter_) {\n        die(33, this.name_);\n      }\n      this.isRunningSetter_ = true;\n      try {\n        this.setter_.call(this.scope_, value);\n      } finally {\n        this.isRunningSetter_ = false;\n      }\n    } else {\n      die(34, this.name_);\n    }\n  };\n  _proto.trackAndCompute = function trackAndCompute() {\n    // N.B: unminified as it is used by MST\n    var oldValue = this.value_;\n    var wasSuspended = /* see #1208 */this.dependenciesState_ === IDerivationState_.NOT_TRACKING_;\n    var newValue = this.computeValue_(true);\n    var changed = wasSuspended || isCaughtException(oldValue) || isCaughtException(newValue) || !this.equals_(oldValue, newValue);\n    if (changed) {\n      this.value_ = newValue;\n      if (false) {}\n    }\n    return changed;\n  };\n  _proto.computeValue_ = function computeValue_(track) {\n    this.isComputing_ = true;\n    // don\'t allow state changes during computation\n    var prev = allowStateChangesStart(false);\n    var res;\n    if (track) {\n      res = trackDerivedFunction(this, this.derivation, this.scope_);\n    } else {\n      if (globalState.disableErrorBoundaries === true) {\n        res = this.derivation.call(this.scope_);\n      } else {\n        try {\n          res = this.derivation.call(this.scope_);\n        } catch (e) {\n          res = new CaughtException(e);\n        }\n      }\n    }\n    allowStateChangesEnd(prev);\n    this.isComputing_ = false;\n    return res;\n  };\n  _proto.suspend_ = function suspend_() {\n    if (!this.keepAlive_) {\n      clearObserving(this);\n      this.value_ = undefined; // don\'t hold on to computed value!\n      if (false) {}\n    }\n  };\n  _proto.observe_ = function observe_(listener, fireImmediately) {\n    var _this = this;\n    var firstTime = true;\n    var prevValue = undefined;\n    return autorun(function () {\n      // TODO: why is this in a different place than the spyReport() function? in all other observables it\'s called in the same place\n      var newValue = _this.get();\n      if (!firstTime || fireImmediately) {\n        var prevU = untrackedStart();\n        listener({\n          observableKind: "computed",\n          debugObjectName: _this.name_,\n          type: UPDATE,\n          object: _this,\n          newValue: newValue,\n          oldValue: prevValue\n        });\n        untrackedEnd(prevU);\n      }\n      firstTime = false;\n      prevValue = newValue;\n    });\n  };\n  _proto.warnAboutUntrackedRead_ = function warnAboutUntrackedRead_() {\n    if (true) {\n      return;\n    }\n    if (this.isTracing_ !== TraceMode.NONE) {\n      console.log("[mobx.trace] Computed value \'" + this.name_ + "\' is being read outside a reactive context. Doing a full recompute.");\n    }\n    if (typeof this.requiresReaction_ === "boolean" ? this.requiresReaction_ : globalState.computedRequiresReaction) {\n      console.warn("[mobx] Computed value \'" + this.name_ + "\' is being read outside a reactive context. Doing a full recompute.");\n    }\n  };\n  _proto.toString = function toString() {\n    return this.name_ + "[" + this.derivation.toString() + "]";\n  };\n  _proto.valueOf = function valueOf() {\n    return toPrimitive(this.get());\n  };\n  _proto[_Symbol$toPrimitive$1] = function () {\n    return this.valueOf();\n  };\n  return ComputedValue;\n}();\nvar isComputedValue = /*#__PURE__*/createInstanceofPredicate("ComputedValue", ComputedValue);\nvar IDerivationState_;\n(function (IDerivationState_) {\n  // before being run or (outside batch and not being observed)\n  // at this point derivation is not holding any data about dependency tree\n  IDerivationState_[IDerivationState_["NOT_TRACKING_"] = -1] = "NOT_TRACKING_";\n  // no shallow dependency changed since last computation\n  // won\'t recalculate derivation\n  // this is what makes mobx fast\n  IDerivationState_[IDerivationState_["UP_TO_DATE_"] = 0] = "UP_TO_DATE_";\n  // some deep dependency changed, but don\'t know if shallow dependency changed\n  // will require to check first if UP_TO_DATE or POSSIBLY_STALE\n  // currently only ComputedValue will propagate POSSIBLY_STALE\n  //\n  // having this state is second big optimization:\n  // don\'t have to recompute on every dependency change, but only when it\'s needed\n  IDerivationState_[IDerivationState_["POSSIBLY_STALE_"] = 1] = "POSSIBLY_STALE_";\n  // A shallow dependency has changed since last computation and the derivation\n  // will need to recompute when it\'s needed next.\n  IDerivationState_[IDerivationState_["STALE_"] = 2] = "STALE_";\n})(IDerivationState_ || (IDerivationState_ = {}));\nvar TraceMode;\n(function (TraceMode) {\n  TraceMode[TraceMode["NONE"] = 0] = "NONE";\n  TraceMode[TraceMode["LOG"] = 1] = "LOG";\n  TraceMode[TraceMode["BREAK"] = 2] = "BREAK";\n})(TraceMode || (TraceMode = {}));\nvar CaughtException = function CaughtException(cause) {\n  this.cause = void 0;\n  this.cause = cause;\n  // Empty\n};\nfunction isCaughtException(e) {\n  return e instanceof CaughtException;\n}\n/**\n * Finds out whether any dependency of the derivation has actually changed.\n * If dependenciesState is 1 then it will recalculate dependencies,\n * if any dependency changed it will propagate it by changing dependenciesState to 2.\n *\n * By iterating over the dependencies in the same order that they were reported and\n * stopping on the first change, all the recalculations are only called for ComputedValues\n * that will be tracked by derivation. That is because we assume that if the first x\n * dependencies of the derivation doesn\'t change then the derivation should run the same way\n * up until accessing x-th dependency.\n */\nfunction shouldCompute(derivation) {\n  switch (derivation.dependenciesState_) {\n    case IDerivationState_.UP_TO_DATE_:\n      return false;\n    case IDerivationState_.NOT_TRACKING_:\n    case IDerivationState_.STALE_:\n      return true;\n    case IDerivationState_.POSSIBLY_STALE_:\n      {\n        // state propagation can occur outside of action/reactive context #2195\n        var prevAllowStateReads = allowStateReadsStart(true);\n        var prevUntracked = untrackedStart(); // no need for those computeds to be reported, they will be picked up in trackDerivedFunction.\n        var obs = derivation.observing_,\n          l = obs.length;\n        for (var i = 0; i < l; i++) {\n          var obj = obs[i];\n          if (isComputedValue(obj)) {\n            if (globalState.disableErrorBoundaries) {\n              obj.get();\n            } else {\n              try {\n                obj.get();\n              } catch (e) {\n                // we are not interested in the value *or* exception at this moment, but if there is one, notify all\n                untrackedEnd(prevUntracked);\n                allowStateReadsEnd(prevAllowStateReads);\n                return true;\n              }\n            }\n            // if ComputedValue `obj` actually changed it will be computed and propagated to its observers.\n            // and `derivation` is an observer of `obj`\n            // invariantShouldCompute(derivation)\n            if (derivation.dependenciesState_ === IDerivationState_.STALE_) {\n              untrackedEnd(prevUntracked);\n              allowStateReadsEnd(prevAllowStateReads);\n              return true;\n            }\n          }\n        }\n        changeDependenciesStateTo0(derivation);\n        untrackedEnd(prevUntracked);\n        allowStateReadsEnd(prevAllowStateReads);\n        return false;\n      }\n  }\n}\nfunction isComputingDerivation() {\n  return globalState.trackingDerivation !== null; // filter out actions inside computations\n}\nfunction checkIfStateModificationsAreAllowed(atom) {\n  if (true) {\n    return;\n  }\n  var hasObservers = atom.observers_.size > 0;\n  // Should not be possible to change observed state outside strict mode, except during initialization, see #563\n  if (!globalState.allowStateChanges && (hasObservers || globalState.enforceActions === "always")) {\n    console.warn("[MobX] " + (globalState.enforceActions ? "Since strict-mode is enabled, changing (observed) observable values without using an action is not allowed. Tried to modify: " : "Side effects like changing state are not allowed at this point. Are you trying to modify state from, for example, a computed value or the render function of a React component? You can wrap side effects in \'runInAction\' (or decorate functions with \'action\') if needed. Tried to modify: ") + atom.name_);\n  }\n}\nfunction checkIfStateReadsAreAllowed(observable) {\n  if (false) {}\n}\n/**\n * Executes the provided function `f` and tracks which observables are being accessed.\n * The tracking information is stored on the `derivation` object and the derivation is registered\n * as observer of any of the accessed observables.\n */\nfunction trackDerivedFunction(derivation, f, context) {\n  var prevAllowStateReads = allowStateReadsStart(true);\n  changeDependenciesStateTo0(derivation);\n  // Preallocate array; will be trimmed by bindDependencies.\n  derivation.newObserving_ = new Array(\n  // Reserve constant space for initial dependencies, dynamic space otherwise.\n  // See https://github.com/mobxjs/mobx/pull/3833\n  derivation.runId_ === 0 ? 100 : derivation.observing_.length);\n  derivation.unboundDepsCount_ = 0;\n  derivation.runId_ = ++globalState.runId;\n  var prevTracking = globalState.trackingDerivation;\n  globalState.trackingDerivation = derivation;\n  globalState.inBatch++;\n  var result;\n  if (globalState.disableErrorBoundaries === true) {\n    result = f.call(context);\n  } else {\n    try {\n      result = f.call(context);\n    } catch (e) {\n      result = new CaughtException(e);\n    }\n  }\n  globalState.inBatch--;\n  globalState.trackingDerivation = prevTracking;\n  bindDependencies(derivation);\n  warnAboutDerivationWithoutDependencies(derivation);\n  allowStateReadsEnd(prevAllowStateReads);\n  return result;\n}\nfunction warnAboutDerivationWithoutDependencies(derivation) {\n  if (true) {\n    return;\n  }\n  if (derivation.observing_.length !== 0) {\n    return;\n  }\n  if (typeof derivation.requiresObservable_ === "boolean" ? derivation.requiresObservable_ : globalState.reactionRequiresObservable) {\n    console.warn("[mobx] Derivation \'" + derivation.name_ + "\' is created/updated without reading any observable value.");\n  }\n}\n/**\n * diffs newObserving with observing.\n * update observing to be newObserving with unique observables\n * notify observers that become observed/unobserved\n */\nfunction bindDependencies(derivation) {\n  // invariant(derivation.dependenciesState !== IDerivationState.NOT_TRACKING, "INTERNAL ERROR bindDependencies expects derivation.dependenciesState !== -1");\n  var prevObserving = derivation.observing_;\n  var observing = derivation.observing_ = derivation.newObserving_;\n  var lowestNewObservingDerivationState = IDerivationState_.UP_TO_DATE_;\n  // Go through all new observables and check diffValue: (this list can contain duplicates):\n  //   0: first occurrence, change to 1 and keep it\n  //   1: extra occurrence, drop it\n  var i0 = 0,\n    l = derivation.unboundDepsCount_;\n  for (var i = 0; i < l; i++) {\n    var dep = observing[i];\n    if (dep.diffValue_ === 0) {\n      dep.diffValue_ = 1;\n      if (i0 !== i) {\n        observing[i0] = dep;\n      }\n      i0++;\n    }\n    // Upcast is \'safe\' here, because if dep is IObservable, `dependenciesState` will be undefined,\n    // not hitting the condition\n    if (dep.dependenciesState_ > lowestNewObservingDerivationState) {\n      lowestNewObservingDerivationState = dep.dependenciesState_;\n    }\n  }\n  observing.length = i0;\n  derivation.newObserving_ = null; // newObserving shouldn\'t be needed outside tracking (statement moved down to work around FF bug, see #614)\n  // Go through all old observables and check diffValue: (it is unique after last bindDependencies)\n  //   0: it\'s not in new observables, unobserve it\n  //   1: it keeps being observed, don\'t want to notify it. change to 0\n  l = prevObserving.length;\n  while (l--) {\n    var _dep = prevObserving[l];\n    if (_dep.diffValue_ === 0) {\n      removeObserver(_dep, derivation);\n    }\n    _dep.diffValue_ = 0;\n  }\n  // Go through all new observables and check diffValue: (now it should be unique)\n  //   0: it was set to 0 in last loop. don\'t need to do anything.\n  //   1: it wasn\'t observed, let\'s observe it. set back to 0\n  while (i0--) {\n    var _dep2 = observing[i0];\n    if (_dep2.diffValue_ === 1) {\n      _dep2.diffValue_ = 0;\n      addObserver(_dep2, derivation);\n    }\n  }\n  // Some new observed derivations may become stale during this derivation computation\n  // so they have had no chance to propagate staleness (#916)\n  if (lowestNewObservingDerivationState !== IDerivationState_.UP_TO_DATE_) {\n    derivation.dependenciesState_ = lowestNewObservingDerivationState;\n    derivation.onBecomeStale_();\n  }\n}\nfunction clearObserving(derivation) {\n  // invariant(globalState.inBatch > 0, "INTERNAL ERROR clearObserving should be called only inside batch");\n  var obs = derivation.observing_;\n  derivation.observing_ = [];\n  var i = obs.length;\n  while (i--) {\n    removeObserver(obs[i], derivation);\n  }\n  derivation.dependenciesState_ = IDerivationState_.NOT_TRACKING_;\n}\nfunction untracked(action) {\n  var prev = untrackedStart();\n  try {\n    return action();\n  } finally {\n    untrackedEnd(prev);\n  }\n}\nfunction untrackedStart() {\n  var prev = globalState.trackingDerivation;\n  globalState.trackingDerivation = null;\n  return prev;\n}\nfunction untrackedEnd(prev) {\n  globalState.trackingDerivation = prev;\n}\nfunction allowStateReadsStart(allowStateReads) {\n  var prev = globalState.allowStateReads;\n  globalState.allowStateReads = allowStateReads;\n  return prev;\n}\nfunction allowStateReadsEnd(prev) {\n  globalState.allowStateReads = prev;\n}\n/**\n * needed to keep `lowestObserverState` correct. when changing from (2 or 1) to 0\n *\n */\nfunction changeDependenciesStateTo0(derivation) {\n  if (derivation.dependenciesState_ === IDerivationState_.UP_TO_DATE_) {\n    return;\n  }\n  derivation.dependenciesState_ = IDerivationState_.UP_TO_DATE_;\n  var obs = derivation.observing_;\n  var i = obs.length;\n  while (i--) {\n    obs[i].lowestObserverState_ = IDerivationState_.UP_TO_DATE_;\n  }\n}\n\n/**\n * These values will persist if global state is reset\n */\nvar persistentKeys = (/* unused pure expression or super */ null && (["mobxGuid", "spyListeners", "enforceActions", "computedRequiresReaction", "reactionRequiresObservable", "observableRequiresReaction", "allowStateReads", "disableErrorBoundaries", "runId", "UNCHANGED", "useProxies"]));\nvar MobXGlobals = function MobXGlobals() {\n  this.version = 6;\n  this.UNCHANGED = {};\n  this.trackingDerivation = null;\n  this.trackingContext = null;\n  this.runId = 0;\n  this.mobxGuid = 0;\n  this.inBatch = 0;\n  this.pendingUnobservations = [];\n  this.pendingReactions = [];\n  this.isRunningReactions = false;\n  this.allowStateChanges = false;\n  this.allowStateReads = true;\n  this.enforceActions = true;\n  this.spyListeners = [];\n  this.globalReactionErrorHandlers = [];\n  this.computedRequiresReaction = false;\n  this.reactionRequiresObservable = false;\n  this.observableRequiresReaction = false;\n  this.disableErrorBoundaries = false;\n  this.suppressReactionErrors = false;\n  this.useProxies = true;\n  this.verifyProxies = false;\n  this.safeDescriptors = true;\n};\nvar canMergeGlobalState = true;\nvar isolateCalled = false;\nvar globalState = /*#__PURE__*/function () {\n  var global = /*#__PURE__*/getGlobal();\n  if (global.__mobxInstanceCount > 0 && !global.__mobxGlobals) {\n    canMergeGlobalState = false;\n  }\n  if (global.__mobxGlobals && global.__mobxGlobals.version !== new MobXGlobals().version) {\n    canMergeGlobalState = false;\n  }\n  if (!canMergeGlobalState) {\n    // Because this is a IIFE we need to let isolateCalled a chance to change\n    // so we run it after the event loop completed at least 1 iteration\n    setTimeout(function () {\n      if (!isolateCalled) {\n        die(35);\n      }\n    }, 1);\n    return new MobXGlobals();\n  } else if (global.__mobxGlobals) {\n    global.__mobxInstanceCount += 1;\n    if (!global.__mobxGlobals.UNCHANGED) {\n      global.__mobxGlobals.UNCHANGED = {};\n    } // make merge backward compatible\n    return global.__mobxGlobals;\n  } else {\n    global.__mobxInstanceCount = 1;\n    return global.__mobxGlobals = /*#__PURE__*/new MobXGlobals();\n  }\n}();\nfunction isolateGlobalState() {\n  if (globalState.pendingReactions.length || globalState.inBatch || globalState.isRunningReactions) {\n    die(36);\n  }\n  isolateCalled = true;\n  if (canMergeGlobalState) {\n    var global = getGlobal();\n    if (--global.__mobxInstanceCount === 0) {\n      global.__mobxGlobals = undefined;\n    }\n    globalState = new MobXGlobals();\n  }\n}\nfunction getGlobalState() {\n  return globalState;\n}\n/**\n * For testing purposes only; this will break the internal state of existing observables,\n * but can be used to get back at a stable state after throwing errors\n */\nfunction resetGlobalState() {\n  var defaultGlobals = new MobXGlobals();\n  for (var key in defaultGlobals) {\n    if (persistentKeys.indexOf(key) === -1) {\n      globalState[key] = defaultGlobals[key];\n    }\n  }\n  globalState.allowStateChanges = !globalState.enforceActions;\n}\nfunction hasObservers(observable) {\n  return observable.observers_ && observable.observers_.size > 0;\n}\nfunction getObservers(observable) {\n  return observable.observers_;\n}\n// function invariantObservers(observable: IObservable) {\n//     const list = observable.observers\n//     const map = observable.observersIndexes\n//     const l = list.length\n//     for (let i = 0; i < l; i++) {\n//         const id = list[i].__mapid\n//         if (i) {\n//             invariant(map[id] === i, "INTERNAL ERROR maps derivation.__mapid to index in list") // for performance\n//         } else {\n//             invariant(!(id in map), "INTERNAL ERROR observer on index 0 shouldn\'t be held in map.") // for performance\n//         }\n//     }\n//     invariant(\n//         list.length === 0 || Object.keys(map).length === list.length - 1,\n//         "INTERNAL ERROR there is no junk in map"\n//     )\n// }\nfunction addObserver(observable, node) {\n  // invariant(node.dependenciesState !== -1, "INTERNAL ERROR, can add only dependenciesState !== -1");\n  // invariant(observable._observers.indexOf(node) === -1, "INTERNAL ERROR add already added node");\n  // invariantObservers(observable);\n  observable.observers_.add(node);\n  if (observable.lowestObserverState_ > node.dependenciesState_) {\n    observable.lowestObserverState_ = node.dependenciesState_;\n  }\n  // invariantObservers(observable);\n  // invariant(observable._observers.indexOf(node) !== -1, "INTERNAL ERROR didn\'t add node");\n}\nfunction removeObserver(observable, node) {\n  // invariant(globalState.inBatch > 0, "INTERNAL ERROR, remove should be called only inside batch");\n  // invariant(observable._observers.indexOf(node) !== -1, "INTERNAL ERROR remove already removed node");\n  // invariantObservers(observable);\n  observable.observers_["delete"](node);\n  if (observable.observers_.size === 0) {\n    // deleting last observer\n    queueForUnobservation(observable);\n  }\n  // invariantObservers(observable);\n  // invariant(observable._observers.indexOf(node) === -1, "INTERNAL ERROR remove already removed node2");\n}\nfunction queueForUnobservation(observable) {\n  if (observable.isPendingUnobservation_ === false) {\n    // invariant(observable._observers.length === 0, "INTERNAL ERROR, should only queue for unobservation unobserved observables");\n    observable.isPendingUnobservation_ = true;\n    globalState.pendingUnobservations.push(observable);\n  }\n}\n/**\n * Batch starts a transaction, at least for purposes of memoizing ComputedValues when nothing else does.\n * During a batch `onBecomeUnobserved` will be called at most once per observable.\n * Avoids unnecessary recalculations.\n */\nfunction startBatch() {\n  globalState.inBatch++;\n}\nfunction endBatch() {\n  if (--globalState.inBatch === 0) {\n    runReactions();\n    // the batch is actually about to finish, all unobserving should happen here.\n    var list = globalState.pendingUnobservations;\n    for (var i = 0; i < list.length; i++) {\n      var observable = list[i];\n      observable.isPendingUnobservation_ = false;\n      if (observable.observers_.size === 0) {\n        if (observable.isBeingObserved_) {\n          // if this observable had reactive observers, trigger the hooks\n          observable.isBeingObserved_ = false;\n          observable.onBUO();\n        }\n        if (observable instanceof ComputedValue) {\n          // computed values are automatically teared down when the last observer leaves\n          // this process happens recursively, this computed might be the last observabe of another, etc..\n          observable.suspend_();\n        }\n      }\n    }\n    globalState.pendingUnobservations = [];\n  }\n}\nfunction reportObserved(observable) {\n  checkIfStateReadsAreAllowed(observable);\n  var derivation = globalState.trackingDerivation;\n  if (derivation !== null) {\n    /**\n     * Simple optimization, give each derivation run an unique id (runId)\n     * Check if last time this observable was accessed the same runId is used\n     * if this is the case, the relation is already known\n     */\n    if (derivation.runId_ !== observable.lastAccessedBy_) {\n      observable.lastAccessedBy_ = derivation.runId_;\n      // Tried storing newObserving, or observing, or both as Set, but performance didn\'t come close...\n      derivation.newObserving_[derivation.unboundDepsCount_++] = observable;\n      if (!observable.isBeingObserved_ && globalState.trackingContext) {\n        observable.isBeingObserved_ = true;\n        observable.onBO();\n      }\n    }\n    return observable.isBeingObserved_;\n  } else if (observable.observers_.size === 0 && globalState.inBatch > 0) {\n    queueForUnobservation(observable);\n  }\n  return false;\n}\n// function invariantLOS(observable: IObservable, msg: string) {\n//     // it\'s expensive so better not run it in produciton. but temporarily helpful for testing\n//     const min = getObservers(observable).reduce((a, b) => Math.min(a, b.dependenciesState), 2)\n//     if (min >= observable.lowestObserverState) return // <- the only assumption about `lowestObserverState`\n//     throw new Error(\n//         "lowestObserverState is wrong for " +\n//             msg +\n//             " because " +\n//             min +\n//             " < " +\n//             observable.lowestObserverState\n//     )\n// }\n/**\n * NOTE: current propagation mechanism will in case of self reruning autoruns behave unexpectedly\n * It will propagate changes to observers from previous run\n * It\'s hard or maybe impossible (with reasonable perf) to get it right with current approach\n * Hopefully self reruning autoruns aren\'t a feature people should depend on\n * Also most basic use cases should be ok\n */\n// Called by Atom when its value changes\nfunction propagateChanged(observable) {\n  // invariantLOS(observable, "changed start");\n  if (observable.lowestObserverState_ === IDerivationState_.STALE_) {\n    return;\n  }\n  observable.lowestObserverState_ = IDerivationState_.STALE_;\n  // Ideally we use for..of here, but the downcompiled version is really slow...\n  observable.observers_.forEach(function (d) {\n    if (d.dependenciesState_ === IDerivationState_.UP_TO_DATE_) {\n      if (false) {}\n      d.onBecomeStale_();\n    }\n    d.dependenciesState_ = IDerivationState_.STALE_;\n  });\n  // invariantLOS(observable, "changed end");\n}\n// Called by ComputedValue when it recalculate and its value changed\nfunction propagateChangeConfirmed(observable) {\n  // invariantLOS(observable, "confirmed start");\n  if (observable.lowestObserverState_ === IDerivationState_.STALE_) {\n    return;\n  }\n  observable.lowestObserverState_ = IDerivationState_.STALE_;\n  observable.observers_.forEach(function (d) {\n    if (d.dependenciesState_ === IDerivationState_.POSSIBLY_STALE_) {\n      d.dependenciesState_ = IDerivationState_.STALE_;\n      if (false) {}\n    } else if (d.dependenciesState_ === IDerivationState_.UP_TO_DATE_ // this happens during computing of `d`, just keep lowestObserverState up to date.\n    ) {\n      observable.lowestObserverState_ = IDerivationState_.UP_TO_DATE_;\n    }\n  });\n  // invariantLOS(observable, "confirmed end");\n}\n// Used by computed when its dependency changed, but we don\'t wan\'t to immediately recompute.\nfunction propagateMaybeChanged(observable) {\n  // invariantLOS(observable, "maybe start");\n  if (observable.lowestObserverState_ !== IDerivationState_.UP_TO_DATE_) {\n    return;\n  }\n  observable.lowestObserverState_ = IDerivationState_.POSSIBLY_STALE_;\n  observable.observers_.forEach(function (d) {\n    if (d.dependenciesState_ === IDerivationState_.UP_TO_DATE_) {\n      d.dependenciesState_ = IDerivationState_.POSSIBLY_STALE_;\n      d.onBecomeStale_();\n    }\n  });\n  // invariantLOS(observable, "maybe end");\n}\nfunction logTraceInfo(derivation, observable) {\n  console.log("[mobx.trace] \'" + derivation.name_ + "\' is invalidated due to a change in: \'" + observable.name_ + "\'");\n  if (derivation.isTracing_ === TraceMode.BREAK) {\n    var lines = [];\n    printDepTree(getDependencyTree(derivation), lines, 1);\n    // prettier-ignore\n    new Function("debugger;\\n/*\\nTracing \'" + derivation.name_ + "\'\\n\\nYou are entering this break point because derivation \'" + derivation.name_ + "\' is being traced and \'" + observable.name_ + "\' is now forcing it to update.\\nJust follow the stacktrace you should now see in the devtools to see precisely what piece of your code is causing this update\\nThe stackframe you are looking for is at least ~6-8 stack-frames up.\\n\\n" + (derivation instanceof ComputedValue ? derivation.derivation.toString().replace(/[*]\\//g, "/") : "") + "\\n\\nThe dependencies for this derivation are:\\n\\n" + lines.join("\\n") + "\\n*/\\n    ")();\n  }\n}\nfunction printDepTree(tree, lines, depth) {\n  if (lines.length >= 1000) {\n    lines.push("(and many more)");\n    return;\n  }\n  lines.push("" + "\\t".repeat(depth - 1) + tree.name);\n  if (tree.dependencies) {\n    tree.dependencies.forEach(function (child) {\n      return printDepTree(child, lines, depth + 1);\n    });\n  }\n}\nvar Reaction = /*#__PURE__*/function () {\n  // nodes we are looking at. Our value depends on these nodes\n\n  function Reaction(name_, onInvalidate_, errorHandler_, requiresObservable_) {\n    if (name_ === void 0) {\n      name_ =  false ? 0 : "Reaction";\n    }\n    this.name_ = void 0;\n    this.onInvalidate_ = void 0;\n    this.errorHandler_ = void 0;\n    this.requiresObservable_ = void 0;\n    this.observing_ = [];\n    this.newObserving_ = [];\n    this.dependenciesState_ = IDerivationState_.NOT_TRACKING_;\n    this.diffValue_ = 0;\n    this.runId_ = 0;\n    this.unboundDepsCount_ = 0;\n    this.isDisposed_ = false;\n    this.isScheduled_ = false;\n    this.isTrackPending_ = false;\n    this.isRunning_ = false;\n    this.isTracing_ = TraceMode.NONE;\n    this.name_ = name_;\n    this.onInvalidate_ = onInvalidate_;\n    this.errorHandler_ = errorHandler_;\n    this.requiresObservable_ = requiresObservable_;\n  }\n  var _proto = Reaction.prototype;\n  _proto.onBecomeStale_ = function onBecomeStale_() {\n    this.schedule_();\n  };\n  _proto.schedule_ = function schedule_() {\n    if (!this.isScheduled_) {\n      this.isScheduled_ = true;\n      globalState.pendingReactions.push(this);\n      runReactions();\n    }\n  };\n  _proto.isScheduled = function isScheduled() {\n    return this.isScheduled_;\n  }\n  /**\n   * internal, use schedule() if you intend to kick off a reaction\n   */;\n  _proto.runReaction_ = function runReaction_() {\n    if (!this.isDisposed_) {\n      startBatch();\n      this.isScheduled_ = false;\n      var prev = globalState.trackingContext;\n      globalState.trackingContext = this;\n      if (shouldCompute(this)) {\n        this.isTrackPending_ = true;\n        try {\n          this.onInvalidate_();\n          if (false) {}\n        } catch (e) {\n          this.reportExceptionInDerivation_(e);\n        }\n      }\n      globalState.trackingContext = prev;\n      endBatch();\n    }\n  };\n  _proto.track = function track(fn) {\n    if (this.isDisposed_) {\n      return;\n      // console.warn("Reaction already disposed") // Note: Not a warning / error in mobx 4 either\n    }\n    startBatch();\n    var notify = isSpyEnabled();\n    var startTime;\n    if (false) {}\n    this.isRunning_ = true;\n    var prevReaction = globalState.trackingContext; // reactions could create reactions...\n    globalState.trackingContext = this;\n    var result = trackDerivedFunction(this, fn, undefined);\n    globalState.trackingContext = prevReaction;\n    this.isRunning_ = false;\n    this.isTrackPending_ = false;\n    if (this.isDisposed_) {\n      // disposed during last run. Clean up everything that was bound after the dispose call.\n      clearObserving(this);\n    }\n    if (isCaughtException(result)) {\n      this.reportExceptionInDerivation_(result.cause);\n    }\n    if (false) {}\n    endBatch();\n  };\n  _proto.reportExceptionInDerivation_ = function reportExceptionInDerivation_(error) {\n    var _this = this;\n    if (this.errorHandler_) {\n      this.errorHandler_(error, this);\n      return;\n    }\n    if (globalState.disableErrorBoundaries) {\n      throw error;\n    }\n    var message =  false ? 0 : "[mobx] uncaught error in \'" + this + "\'";\n    if (!globalState.suppressReactionErrors) {\n      console.error(message, error);\n      /** If debugging brought you here, please, read the above message :-). Tnx! */\n    } else if (false) {} // prettier-ignore\n    if (false) {}\n    globalState.globalReactionErrorHandlers.forEach(function (f) {\n      return f(error, _this);\n    });\n  };\n  _proto.dispose = function dispose() {\n    if (!this.isDisposed_) {\n      this.isDisposed_ = true;\n      if (!this.isRunning_) {\n        // if disposed while running, clean up later. Maybe not optimal, but rare case\n        startBatch();\n        clearObserving(this);\n        endBatch();\n      }\n    }\n  };\n  _proto.getDisposer_ = function getDisposer_(abortSignal) {\n    var _this2 = this;\n    var dispose = function dispose() {\n      _this2.dispose();\n      abortSignal == null ? void 0 : abortSignal.removeEventListener == null ? void 0 : abortSignal.removeEventListener("abort", dispose);\n    };\n    abortSignal == null ? void 0 : abortSignal.addEventListener == null ? void 0 : abortSignal.addEventListener("abort", dispose);\n    dispose[$mobx] = this;\n    return dispose;\n  };\n  _proto.toString = function toString() {\n    return "Reaction[" + this.name_ + "]";\n  };\n  _proto.trace = function trace$1(enterBreakPoint) {\n    if (enterBreakPoint === void 0) {\n      enterBreakPoint = false;\n    }\n    trace(this, enterBreakPoint);\n  };\n  return Reaction;\n}();\nfunction onReactionError(handler) {\n  globalState.globalReactionErrorHandlers.push(handler);\n  return function () {\n    var idx = globalState.globalReactionErrorHandlers.indexOf(handler);\n    if (idx >= 0) {\n      globalState.globalReactionErrorHandlers.splice(idx, 1);\n    }\n  };\n}\n/**\n * Magic number alert!\n * Defines within how many times a reaction is allowed to re-trigger itself\n * until it is assumed that this is gonna be a never ending loop...\n */\nvar MAX_REACTION_ITERATIONS = 100;\nvar reactionScheduler = function reactionScheduler(f) {\n  return f();\n};\nfunction runReactions() {\n  // Trampolining, if runReactions are already running, new reactions will be picked up\n  if (globalState.inBatch > 0 || globalState.isRunningReactions) {\n    return;\n  }\n  reactionScheduler(runReactionsHelper);\n}\nfunction runReactionsHelper() {\n  globalState.isRunningReactions = true;\n  var allReactions = globalState.pendingReactions;\n  var iterations = 0;\n  // While running reactions, new reactions might be triggered.\n  // Hence we work with two variables and check whether\n  // we converge to no remaining reactions after a while.\n  while (allReactions.length > 0) {\n    if (++iterations === MAX_REACTION_ITERATIONS) {\n      console.error( false ? 0 : "[mobx] cycle in reaction: " + allReactions[0]);\n      allReactions.splice(0); // clear reactions\n    }\n    var remainingReactions = allReactions.splice(0);\n    for (var i = 0, l = remainingReactions.length; i < l; i++) {\n      remainingReactions[i].runReaction_();\n    }\n  }\n  globalState.isRunningReactions = false;\n}\nvar isReaction = /*#__PURE__*/createInstanceofPredicate("Reaction", Reaction);\nfunction setReactionScheduler(fn) {\n  var baseScheduler = reactionScheduler;\n  reactionScheduler = function reactionScheduler(f) {\n    return fn(function () {\n      return baseScheduler(f);\n    });\n  };\n}\nfunction isSpyEnabled() {\n  return  false && 0;\n}\nfunction spyReport(event) {\n  if (true) {\n    return;\n  } // dead code elimination can do the rest\n  if (!globalState.spyListeners.length) {\n    return;\n  }\n  var listeners = globalState.spyListeners;\n  for (var i = 0, l = listeners.length; i < l; i++) {\n    listeners[i](event);\n  }\n}\nfunction spyReportStart(event) {\n  if (true) {\n    return;\n  }\n  var change = _extends({}, event, {\n    spyReportStart: true\n  });\n  spyReport(change);\n}\nvar END_EVENT = {\n  type: "report-end",\n  spyReportEnd: true\n};\nfunction spyReportEnd(change) {\n  if (true) {\n    return;\n  }\n  if (change) {\n    spyReport(_extends({}, change, {\n      type: "report-end",\n      spyReportEnd: true\n    }));\n  } else {\n    spyReport(END_EVENT);\n  }\n}\nfunction spy(listener) {\n  if (true) {\n    console.warn("[mobx.spy] Is a no-op in production builds");\n    return function () {};\n  } else {}\n}\nvar ACTION = "action";\nvar ACTION_BOUND = "action.bound";\nvar AUTOACTION = "autoAction";\nvar AUTOACTION_BOUND = "autoAction.bound";\nvar DEFAULT_ACTION_NAME = "<unnamed action>";\nvar actionAnnotation = /*#__PURE__*/createActionAnnotation(ACTION);\nvar actionBoundAnnotation = /*#__PURE__*/createActionAnnotation(ACTION_BOUND, {\n  bound: true\n});\nvar autoActionAnnotation = /*#__PURE__*/createActionAnnotation(AUTOACTION, {\n  autoAction: true\n});\nvar autoActionBoundAnnotation = /*#__PURE__*/createActionAnnotation(AUTOACTION_BOUND, {\n  autoAction: true,\n  bound: true\n});\nfunction createActionFactory(autoAction) {\n  var res = function action(arg1, arg2) {\n    // action(fn() {})\n    if (isFunction(arg1)) {\n      return createAction(arg1.name || DEFAULT_ACTION_NAME, arg1, autoAction);\n    }\n    // action("name", fn() {})\n    if (isFunction(arg2)) {\n      return createAction(arg1, arg2, autoAction);\n    }\n    // @action (2022.3 Decorators)\n    if (is20223Decorator(arg2)) {\n      return (autoAction ? autoActionAnnotation : actionAnnotation).decorate_20223_(arg1, arg2);\n    }\n    // @action\n    if (isStringish(arg2)) {\n      return storeAnnotation(arg1, arg2, autoAction ? autoActionAnnotation : actionAnnotation);\n    }\n    // action("name") & @action("name")\n    if (isStringish(arg1)) {\n      return createDecoratorAnnotation(createActionAnnotation(autoAction ? AUTOACTION : ACTION, {\n        name: arg1,\n        autoAction: autoAction\n      }));\n    }\n    if (false) {}\n  };\n  return res;\n}\nvar action = /*#__PURE__*/createActionFactory(false);\nObject.assign(action, actionAnnotation);\nvar autoAction = /*#__PURE__*/createActionFactory(true);\nObject.assign(autoAction, autoActionAnnotation);\naction.bound = /*#__PURE__*/createDecoratorAnnotation(actionBoundAnnotation);\nautoAction.bound = /*#__PURE__*/createDecoratorAnnotation(autoActionBoundAnnotation);\nfunction mobx_esm_runInAction(fn) {\n  return executeAction(fn.name || DEFAULT_ACTION_NAME, false, fn, this, undefined);\n}\nfunction isAction(thing) {\n  return isFunction(thing) && thing.isMobxAction === true;\n}\n\n/**\n * Creates a named reactive view and keeps it alive, so that the view is always\n * updated if one of the dependencies changes, even when the view is not further used by something else.\n * @param view The reactive view\n * @returns disposer function, which can be used to stop the view from being updated in the future.\n */\nfunction autorun(view, opts) {\n  var _opts$name, _opts, _opts2, _opts2$signal, _opts3;\n  if (opts === void 0) {\n    opts = EMPTY_OBJECT;\n  }\n  if (false) {}\n  var name = (_opts$name = (_opts = opts) == null ? void 0 : _opts.name) != null ? _opts$name :  false ? 0 : "Autorun";\n  var runSync = !opts.scheduler && !opts.delay;\n  var reaction;\n  if (runSync) {\n    // normal autorun\n    reaction = new Reaction(name, function () {\n      this.track(reactionRunner);\n    }, opts.onError, opts.requiresObservable);\n  } else {\n    var scheduler = createSchedulerFromOptions(opts);\n    // debounced autorun\n    var isScheduled = false;\n    reaction = new Reaction(name, function () {\n      if (!isScheduled) {\n        isScheduled = true;\n        scheduler(function () {\n          isScheduled = false;\n          if (!reaction.isDisposed_) {\n            reaction.track(reactionRunner);\n          }\n        });\n      }\n    }, opts.onError, opts.requiresObservable);\n  }\n  function reactionRunner() {\n    view(reaction);\n  }\n  if (!((_opts2 = opts) != null && (_opts2$signal = _opts2.signal) != null && _opts2$signal.aborted)) {\n    reaction.schedule_();\n  }\n  return reaction.getDisposer_((_opts3 = opts) == null ? void 0 : _opts3.signal);\n}\nvar run = function run(f) {\n  return f();\n};\nfunction createSchedulerFromOptions(opts) {\n  return opts.scheduler ? opts.scheduler : opts.delay ? function (f) {\n    return setTimeout(f, opts.delay);\n  } : run;\n}\nfunction reaction(expression, effect, opts) {\n  var _opts$name2, _opts4, _opts4$signal, _opts5;\n  if (opts === void 0) {\n    opts = EMPTY_OBJECT;\n  }\n  if (false) {}\n  var name = (_opts$name2 = opts.name) != null ? _opts$name2 :  false ? 0 : "Reaction";\n  var effectAction = action(name, opts.onError ? wrapErrorHandler(opts.onError, effect) : effect);\n  var runSync = !opts.scheduler && !opts.delay;\n  var scheduler = createSchedulerFromOptions(opts);\n  var firstTime = true;\n  var isScheduled = false;\n  var value;\n  var equals = opts.compareStructural ? comparer.structural : opts.equals || comparer["default"];\n  var r = new Reaction(name, function () {\n    if (firstTime || runSync) {\n      reactionRunner();\n    } else if (!isScheduled) {\n      isScheduled = true;\n      scheduler(reactionRunner);\n    }\n  }, opts.onError, opts.requiresObservable);\n  function reactionRunner() {\n    isScheduled = false;\n    if (r.isDisposed_) {\n      return;\n    }\n    var changed = false;\n    var oldValue = value;\n    r.track(function () {\n      var nextValue = allowStateChanges(false, function () {\n        return expression(r);\n      });\n      changed = firstTime || !equals(value, nextValue);\n      value = nextValue;\n    });\n    if (firstTime && opts.fireImmediately) {\n      effectAction(value, oldValue, r);\n    } else if (!firstTime && changed) {\n      effectAction(value, oldValue, r);\n    }\n    firstTime = false;\n  }\n  if (!((_opts4 = opts) != null && (_opts4$signal = _opts4.signal) != null && _opts4$signal.aborted)) {\n    r.schedule_();\n  }\n  return r.getDisposer_((_opts5 = opts) == null ? void 0 : _opts5.signal);\n}\nfunction wrapErrorHandler(errorHandler, baseFn) {\n  return function () {\n    try {\n      return baseFn.apply(this, arguments);\n    } catch (e) {\n      errorHandler.call(this, e);\n    }\n  };\n}\nvar ON_BECOME_OBSERVED = "onBO";\nvar ON_BECOME_UNOBSERVED = "onBUO";\nfunction onBecomeObserved(thing, arg2, arg3) {\n  return interceptHook(ON_BECOME_OBSERVED, thing, arg2, arg3);\n}\nfunction onBecomeUnobserved(thing, arg2, arg3) {\n  return interceptHook(ON_BECOME_UNOBSERVED, thing, arg2, arg3);\n}\nfunction interceptHook(hook, thing, arg2, arg3) {\n  var atom = typeof arg3 === "function" ? getAtom(thing, arg2) : getAtom(thing);\n  var cb = isFunction(arg3) ? arg3 : arg2;\n  var listenersKey = hook + "L";\n  if (atom[listenersKey]) {\n    atom[listenersKey].add(cb);\n  } else {\n    atom[listenersKey] = new Set([cb]);\n  }\n  return function () {\n    var hookListeners = atom[listenersKey];\n    if (hookListeners) {\n      hookListeners["delete"](cb);\n      if (hookListeners.size === 0) {\n        delete atom[listenersKey];\n      }\n    }\n  };\n}\nvar NEVER = "never";\nvar ALWAYS = "always";\nvar OBSERVED = "observed";\n// const IF_AVAILABLE = "ifavailable"\nfunction configure(options) {\n  if (options.isolateGlobalState === true) {\n    isolateGlobalState();\n  }\n  var useProxies = options.useProxies,\n    enforceActions = options.enforceActions;\n  if (useProxies !== undefined) {\n    globalState.useProxies = useProxies === ALWAYS ? true : useProxies === NEVER ? false : typeof Proxy !== "undefined";\n  }\n  if (useProxies === "ifavailable") {\n    globalState.verifyProxies = true;\n  }\n  if (enforceActions !== undefined) {\n    var ea = enforceActions === ALWAYS ? ALWAYS : enforceActions === OBSERVED;\n    globalState.enforceActions = ea;\n    globalState.allowStateChanges = ea === true || ea === ALWAYS ? false : true;\n  }\n  ["computedRequiresReaction", "reactionRequiresObservable", "observableRequiresReaction", "disableErrorBoundaries", "safeDescriptors"].forEach(function (key) {\n    if (key in options) {\n      globalState[key] = !!options[key];\n    }\n  });\n  globalState.allowStateReads = !globalState.observableRequiresReaction;\n  if (false) {}\n  if (options.reactionScheduler) {\n    setReactionScheduler(options.reactionScheduler);\n  }\n}\nfunction extendObservable(target, properties, annotations, options) {\n  if (false) {}\n  // Pull descriptors first, so we don\'t have to deal with props added by administration ($mobx)\n  var descriptors = getOwnPropertyDescriptors(properties);\n  initObservable(function () {\n    var adm = asObservableObject(target, options)[$mobx];\n    ownKeys(descriptors).forEach(function (key) {\n      adm.extend_(key, descriptors[key],\n      // must pass "undefined" for { key: undefined }\n      !annotations ? true : key in annotations ? annotations[key] : true);\n    });\n  });\n  return target;\n}\nfunction getDependencyTree(thing, property) {\n  return nodeToDependencyTree(getAtom(thing, property));\n}\nfunction nodeToDependencyTree(node) {\n  var result = {\n    name: node.name_\n  };\n  if (node.observing_ && node.observing_.length > 0) {\n    result.dependencies = unique(node.observing_).map(nodeToDependencyTree);\n  }\n  return result;\n}\nfunction getObserverTree(thing, property) {\n  return nodeToObserverTree(getAtom(thing, property));\n}\nfunction nodeToObserverTree(node) {\n  var result = {\n    name: node.name_\n  };\n  if (hasObservers(node)) {\n    result.observers = Array.from(getObservers(node)).map(nodeToObserverTree);\n  }\n  return result;\n}\nfunction unique(list) {\n  return Array.from(new Set(list));\n}\nvar generatorId = 0;\nfunction FlowCancellationError() {\n  this.message = "FLOW_CANCELLED";\n}\nFlowCancellationError.prototype = /*#__PURE__*/Object.create(Error.prototype);\nfunction isFlowCancellationError(error) {\n  return error instanceof FlowCancellationError;\n}\nvar flowAnnotation = /*#__PURE__*/createFlowAnnotation("flow");\nvar flowBoundAnnotation = /*#__PURE__*/createFlowAnnotation("flow.bound", {\n  bound: true\n});\nvar flow = /*#__PURE__*/Object.assign(function flow(arg1, arg2) {\n  // @flow (2022.3 Decorators)\n  if (is20223Decorator(arg2)) {\n    return flowAnnotation.decorate_20223_(arg1, arg2);\n  }\n  // @flow\n  if (isStringish(arg2)) {\n    return storeAnnotation(arg1, arg2, flowAnnotation);\n  }\n  // flow(fn)\n  if (false) {}\n  var generator = arg1;\n  var name = generator.name || "<unnamed flow>";\n  // Implementation based on https://github.com/tj/co/blob/master/index.js\n  var res = function res() {\n    var ctx = this;\n    var args = arguments;\n    var runId = ++generatorId;\n    var gen = action(name + " - runid: " + runId + " - init", generator).apply(ctx, args);\n    var rejector;\n    var pendingPromise = undefined;\n    var promise = new Promise(function (resolve, reject) {\n      var stepId = 0;\n      rejector = reject;\n      function onFulfilled(res) {\n        pendingPromise = undefined;\n        var ret;\n        try {\n          ret = action(name + " - runid: " + runId + " - yield " + stepId++, gen.next).call(gen, res);\n        } catch (e) {\n          return reject(e);\n        }\n        next(ret);\n      }\n      function onRejected(err) {\n        pendingPromise = undefined;\n        var ret;\n        try {\n          ret = action(name + " - runid: " + runId + " - yield " + stepId++, gen["throw"]).call(gen, err);\n        } catch (e) {\n          return reject(e);\n        }\n        next(ret);\n      }\n      function next(ret) {\n        if (isFunction(ret == null ? void 0 : ret.then)) {\n          // an async iterator\n          ret.then(next, reject);\n          return;\n        }\n        if (ret.done) {\n          return resolve(ret.value);\n        }\n        pendingPromise = Promise.resolve(ret.value);\n        return pendingPromise.then(onFulfilled, onRejected);\n      }\n      onFulfilled(undefined); // kick off the process\n    });\n    promise.cancel = action(name + " - runid: " + runId + " - cancel", function () {\n      try {\n        if (pendingPromise) {\n          cancelPromise(pendingPromise);\n        }\n        // Finally block can return (or yield) stuff..\n        var _res = gen["return"](undefined);\n        // eat anything that promise would do, it\'s cancelled!\n        var yieldedPromise = Promise.resolve(_res.value);\n        yieldedPromise.then(noop, noop);\n        cancelPromise(yieldedPromise); // maybe it can be cancelled :)\n        // reject our original promise\n        rejector(new FlowCancellationError());\n      } catch (e) {\n        rejector(e); // there could be a throwing finally block\n      }\n    });\n    return promise;\n  };\n  res.isMobXFlow = true;\n  return res;\n}, flowAnnotation);\nflow.bound = /*#__PURE__*/createDecoratorAnnotation(flowBoundAnnotation);\nfunction cancelPromise(promise) {\n  if (isFunction(promise.cancel)) {\n    promise.cancel();\n  }\n}\nfunction flowResult(result) {\n  return result; // just tricking TypeScript :)\n}\nfunction isFlow(fn) {\n  return (fn == null ? void 0 : fn.isMobXFlow) === true;\n}\nfunction interceptReads(thing, propOrHandler, handler) {\n  var target;\n  if (isObservableMap(thing) || isObservableArray(thing) || isObservableValue(thing)) {\n    target = getAdministration(thing);\n  } else if (isObservableObject(thing)) {\n    if (false) {}\n    target = getAdministration(thing, propOrHandler);\n  } else if (false) {}\n  if (false) {}\n  target.dehancer = typeof propOrHandler === "function" ? propOrHandler : handler;\n  return function () {\n    target.dehancer = undefined;\n  };\n}\nfunction intercept(thing, propOrHandler, handler) {\n  if (isFunction(handler)) {\n    return interceptProperty(thing, propOrHandler, handler);\n  } else {\n    return interceptInterceptable(thing, propOrHandler);\n  }\n}\nfunction interceptInterceptable(thing, handler) {\n  return getAdministration(thing).intercept_(handler);\n}\nfunction interceptProperty(thing, property, handler) {\n  return getAdministration(thing, property).intercept_(handler);\n}\nfunction _isComputed(value, property) {\n  if (property === undefined) {\n    return isComputedValue(value);\n  }\n  if (isObservableObject(value) === false) {\n    return false;\n  }\n  if (!value[$mobx].values_.has(property)) {\n    return false;\n  }\n  var atom = getAtom(value, property);\n  return isComputedValue(atom);\n}\nfunction isComputed(value) {\n  if (false) {}\n  return _isComputed(value);\n}\nfunction isComputedProp(value, propName) {\n  if (false) {}\n  return _isComputed(value, propName);\n}\nfunction _isObservable(value, property) {\n  if (!value) {\n    return false;\n  }\n  if (property !== undefined) {\n    if (false) {}\n    if (isObservableObject(value)) {\n      return value[$mobx].values_.has(property);\n    }\n    return false;\n  }\n  // For first check, see #701\n  return isObservableObject(value) || !!value[$mobx] || isAtom(value) || isReaction(value) || isComputedValue(value);\n}\nfunction isObservable(value) {\n  if (false) {}\n  return _isObservable(value);\n}\nfunction isObservableProp(value, propName) {\n  if (false) {}\n  return _isObservable(value, propName);\n}\nfunction keys(obj) {\n  if (isObservableObject(obj)) {\n    return obj[$mobx].keys_();\n  }\n  if (isObservableMap(obj) || isObservableSet(obj)) {\n    return Array.from(obj.keys());\n  }\n  if (isObservableArray(obj)) {\n    return obj.map(function (_, index) {\n      return index;\n    });\n  }\n  die(5);\n}\nfunction values(obj) {\n  if (isObservableObject(obj)) {\n    return keys(obj).map(function (key) {\n      return obj[key];\n    });\n  }\n  if (isObservableMap(obj)) {\n    return keys(obj).map(function (key) {\n      return obj.get(key);\n    });\n  }\n  if (isObservableSet(obj)) {\n    return Array.from(obj.values());\n  }\n  if (isObservableArray(obj)) {\n    return obj.slice();\n  }\n  die(6);\n}\nfunction entries(obj) {\n  if (isObservableObject(obj)) {\n    return keys(obj).map(function (key) {\n      return [key, obj[key]];\n    });\n  }\n  if (isObservableMap(obj)) {\n    return keys(obj).map(function (key) {\n      return [key, obj.get(key)];\n    });\n  }\n  if (isObservableSet(obj)) {\n    return Array.from(obj.entries());\n  }\n  if (isObservableArray(obj)) {\n    return obj.map(function (key, index) {\n      return [index, key];\n    });\n  }\n  die(7);\n}\nfunction set(obj, key, value) {\n  if (arguments.length === 2 && !isObservableSet(obj)) {\n    startBatch();\n    var _values = key;\n    try {\n      for (var _key in _values) {\n        set(obj, _key, _values[_key]);\n      }\n    } finally {\n      endBatch();\n    }\n    return;\n  }\n  if (isObservableObject(obj)) {\n    obj[$mobx].set_(key, value);\n  } else if (isObservableMap(obj)) {\n    obj.set(key, value);\n  } else if (isObservableSet(obj)) {\n    obj.add(key);\n  } else if (isObservableArray(obj)) {\n    if (typeof key !== "number") {\n      key = parseInt(key, 10);\n    }\n    if (key < 0) {\n      die("Invalid index: \'" + key + "\'");\n    }\n    startBatch();\n    if (key >= obj.length) {\n      obj.length = key + 1;\n    }\n    obj[key] = value;\n    endBatch();\n  } else {\n    die(8);\n  }\n}\nfunction remove(obj, key) {\n  if (isObservableObject(obj)) {\n    obj[$mobx].delete_(key);\n  } else if (isObservableMap(obj)) {\n    obj["delete"](key);\n  } else if (isObservableSet(obj)) {\n    obj["delete"](key);\n  } else if (isObservableArray(obj)) {\n    if (typeof key !== "number") {\n      key = parseInt(key, 10);\n    }\n    obj.splice(key, 1);\n  } else {\n    die(9);\n  }\n}\nfunction has(obj, key) {\n  if (isObservableObject(obj)) {\n    return obj[$mobx].has_(key);\n  } else if (isObservableMap(obj)) {\n    return obj.has(key);\n  } else if (isObservableSet(obj)) {\n    return obj.has(key);\n  } else if (isObservableArray(obj)) {\n    return key >= 0 && key < obj.length;\n  }\n  die(10);\n}\nfunction get(obj, key) {\n  if (!has(obj, key)) {\n    return undefined;\n  }\n  if (isObservableObject(obj)) {\n    return obj[$mobx].get_(key);\n  } else if (isObservableMap(obj)) {\n    return obj.get(key);\n  } else if (isObservableArray(obj)) {\n    return obj[key];\n  }\n  die(11);\n}\nfunction apiDefineProperty(obj, key, descriptor) {\n  if (isObservableObject(obj)) {\n    return obj[$mobx].defineProperty_(key, descriptor);\n  }\n  die(39);\n}\nfunction apiOwnKeys(obj) {\n  if (isObservableObject(obj)) {\n    return obj[$mobx].ownKeys_();\n  }\n  die(38);\n}\nfunction observe(thing, propOrCb, cbOrFire, fireImmediately) {\n  if (isFunction(cbOrFire)) {\n    return observeObservableProperty(thing, propOrCb, cbOrFire, fireImmediately);\n  } else {\n    return observeObservable(thing, propOrCb, cbOrFire);\n  }\n}\nfunction observeObservable(thing, listener, fireImmediately) {\n  return getAdministration(thing).observe_(listener, fireImmediately);\n}\nfunction observeObservableProperty(thing, property, listener, fireImmediately) {\n  return getAdministration(thing, property).observe_(listener, fireImmediately);\n}\nfunction cache(map, key, value) {\n  map.set(key, value);\n  return value;\n}\nfunction toJSHelper(source, __alreadySeen) {\n  if (source == null || typeof source !== "object" || source instanceof Date || !isObservable(source)) {\n    return source;\n  }\n  if (isObservableValue(source) || isComputedValue(source)) {\n    return toJSHelper(source.get(), __alreadySeen);\n  }\n  if (__alreadySeen.has(source)) {\n    return __alreadySeen.get(source);\n  }\n  if (isObservableArray(source)) {\n    var res = cache(__alreadySeen, source, new Array(source.length));\n    source.forEach(function (value, idx) {\n      res[idx] = toJSHelper(value, __alreadySeen);\n    });\n    return res;\n  }\n  if (isObservableSet(source)) {\n    var _res = cache(__alreadySeen, source, new Set());\n    source.forEach(function (value) {\n      _res.add(toJSHelper(value, __alreadySeen));\n    });\n    return _res;\n  }\n  if (isObservableMap(source)) {\n    var _res2 = cache(__alreadySeen, source, new Map());\n    source.forEach(function (value, key) {\n      _res2.set(key, toJSHelper(value, __alreadySeen));\n    });\n    return _res2;\n  } else {\n    // must be observable object\n    var _res3 = cache(__alreadySeen, source, {});\n    apiOwnKeys(source).forEach(function (key) {\n      if (objectPrototype.propertyIsEnumerable.call(source, key)) {\n        _res3[key] = toJSHelper(source[key], __alreadySeen);\n      }\n    });\n    return _res3;\n  }\n}\n/**\n * Recursively converts an observable to it\'s non-observable native counterpart.\n * It does NOT recurse into non-observables, these are left as they are, even if they contain observables.\n * Computed and other non-enumerable properties are completely ignored.\n * Complex scenarios require custom solution, eg implementing `toJSON` or using `serializr` lib.\n */\nfunction toJS(source, options) {\n  if (false) {}\n  return toJSHelper(source, new Map());\n}\nfunction trace() {\n  if (true) {\n    return;\n  }\n  var enterBreakPoint = false;\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n  if (typeof args[args.length - 1] === "boolean") {\n    enterBreakPoint = args.pop();\n  }\n  var derivation = getAtomFromArgs(args);\n  if (!derivation) {\n    return die("\'trace(break?)\' can only be used inside a tracked computed value or a Reaction. Consider passing in the computed value or reaction explicitly");\n  }\n  if (derivation.isTracing_ === TraceMode.NONE) {\n    console.log("[mobx.trace] \'" + derivation.name_ + "\' tracing enabled");\n  }\n  derivation.isTracing_ = enterBreakPoint ? TraceMode.BREAK : TraceMode.LOG;\n}\nfunction getAtomFromArgs(args) {\n  switch (args.length) {\n    case 0:\n      return globalState.trackingDerivation;\n    case 1:\n      return getAtom(args[0]);\n    case 2:\n      return getAtom(args[0], args[1]);\n  }\n}\n\n/**\n * During a transaction no views are updated until the end of the transaction.\n * The transaction will be run synchronously nonetheless.\n *\n * @param action a function that updates some reactive state\n * @returns any value that was returned by the \'action\' parameter.\n */\nfunction transaction(action, thisArg) {\n  if (thisArg === void 0) {\n    thisArg = undefined;\n  }\n  startBatch();\n  try {\n    return action.apply(thisArg);\n  } finally {\n    endBatch();\n  }\n}\nfunction when(predicate, arg1, arg2) {\n  if (arguments.length === 1 || arg1 && typeof arg1 === "object") {\n    return whenPromise(predicate, arg1);\n  }\n  return _when(predicate, arg1, arg2 || {});\n}\nfunction _when(predicate, effect, opts) {\n  var timeoutHandle;\n  if (typeof opts.timeout === "number") {\n    var error = new Error("WHEN_TIMEOUT");\n    timeoutHandle = setTimeout(function () {\n      if (!disposer[$mobx].isDisposed_) {\n        disposer();\n        if (opts.onError) {\n          opts.onError(error);\n        } else {\n          throw error;\n        }\n      }\n    }, opts.timeout);\n  }\n  opts.name =  false ? 0 : "When";\n  var effectAction = createAction( false ? 0 : "When-effect", effect);\n  // eslint-disable-next-line\n  var disposer = autorun(function (r) {\n    // predicate should not change state\n    var cond = allowStateChanges(false, predicate);\n    if (cond) {\n      r.dispose();\n      if (timeoutHandle) {\n        clearTimeout(timeoutHandle);\n      }\n      effectAction();\n    }\n  }, opts);\n  return disposer;\n}\nfunction whenPromise(predicate, opts) {\n  var _opts$signal;\n  if (false) {}\n  if (opts != null && (_opts$signal = opts.signal) != null && _opts$signal.aborted) {\n    return Object.assign(Promise.reject(new Error("WHEN_ABORTED")), {\n      cancel: function cancel() {\n        return null;\n      }\n    });\n  }\n  var cancel;\n  var abort;\n  var res = new Promise(function (resolve, reject) {\n    var _opts$signal2;\n    var disposer = _when(predicate, resolve, _extends({}, opts, {\n      onError: reject\n    }));\n    cancel = function cancel() {\n      disposer();\n      reject(new Error("WHEN_CANCELLED"));\n    };\n    abort = function abort() {\n      disposer();\n      reject(new Error("WHEN_ABORTED"));\n    };\n    opts == null ? void 0 : (_opts$signal2 = opts.signal) == null ? void 0 : _opts$signal2.addEventListener == null ? void 0 : _opts$signal2.addEventListener("abort", abort);\n  })["finally"](function () {\n    var _opts$signal3;\n    return opts == null ? void 0 : (_opts$signal3 = opts.signal) == null ? void 0 : _opts$signal3.removeEventListener == null ? void 0 : _opts$signal3.removeEventListener("abort", abort);\n  });\n  res.cancel = cancel;\n  return res;\n}\nfunction getAdm(target) {\n  return target[$mobx];\n}\n// Optimization: we don\'t need the intermediate objects and could have a completely custom administration for DynamicObjects,\n// and skip either the internal values map, or the base object with its property descriptors!\nvar objectProxyTraps = {\n  has: function has(target, name) {\n    if (false) {}\n    return getAdm(target).has_(name);\n  },\n  get: function get(target, name) {\n    return getAdm(target).get_(name);\n  },\n  set: function set(target, name, value) {\n    var _getAdm$set_;\n    if (!isStringish(name)) {\n      return false;\n    }\n    if (false) {}\n    // null (intercepted) -> true (success)\n    return (_getAdm$set_ = getAdm(target).set_(name, value, true)) != null ? _getAdm$set_ : true;\n  },\n  deleteProperty: function deleteProperty(target, name) {\n    var _getAdm$delete_;\n    if (false) {}\n    if (!isStringish(name)) {\n      return false;\n    }\n    // null (intercepted) -> true (success)\n    return (_getAdm$delete_ = getAdm(target).delete_(name, true)) != null ? _getAdm$delete_ : true;\n  },\n  defineProperty: function defineProperty(target, name, descriptor) {\n    var _getAdm$definePropert;\n    if (false) {}\n    // null (intercepted) -> true (success)\n    return (_getAdm$definePropert = getAdm(target).defineProperty_(name, descriptor)) != null ? _getAdm$definePropert : true;\n  },\n  ownKeys: function ownKeys(target) {\n    if (false) {}\n    return getAdm(target).ownKeys_();\n  },\n  preventExtensions: function preventExtensions(target) {\n    die(13);\n  }\n};\nfunction asDynamicObservableObject(target, options) {\n  var _target$$mobx, _target$$mobx$proxy_;\n  assertProxies();\n  target = asObservableObject(target, options);\n  return (_target$$mobx$proxy_ = (_target$$mobx = target[$mobx]).proxy_) != null ? _target$$mobx$proxy_ : _target$$mobx.proxy_ = new Proxy(target, objectProxyTraps);\n}\nfunction hasInterceptors(interceptable) {\n  return interceptable.interceptors_ !== undefined && interceptable.interceptors_.length > 0;\n}\nfunction registerInterceptor(interceptable, handler) {\n  var interceptors = interceptable.interceptors_ || (interceptable.interceptors_ = []);\n  interceptors.push(handler);\n  return once(function () {\n    var idx = interceptors.indexOf(handler);\n    if (idx !== -1) {\n      interceptors.splice(idx, 1);\n    }\n  });\n}\nfunction interceptChange(interceptable, change) {\n  var prevU = untrackedStart();\n  try {\n    // Interceptor can modify the array, copy it to avoid concurrent modification, see #1950\n    var interceptors = [].concat(interceptable.interceptors_ || []);\n    for (var i = 0, l = interceptors.length; i < l; i++) {\n      change = interceptors[i](change);\n      if (change && !change.type) {\n        die(14);\n      }\n      if (!change) {\n        break;\n      }\n    }\n    return change;\n  } finally {\n    untrackedEnd(prevU);\n  }\n}\nfunction hasListeners(listenable) {\n  return listenable.changeListeners_ !== undefined && listenable.changeListeners_.length > 0;\n}\nfunction registerListener(listenable, handler) {\n  var listeners = listenable.changeListeners_ || (listenable.changeListeners_ = []);\n  listeners.push(handler);\n  return once(function () {\n    var idx = listeners.indexOf(handler);\n    if (idx !== -1) {\n      listeners.splice(idx, 1);\n    }\n  });\n}\nfunction notifyListeners(listenable, change) {\n  var prevU = untrackedStart();\n  var listeners = listenable.changeListeners_;\n  if (!listeners) {\n    return;\n  }\n  listeners = listeners.slice();\n  for (var i = 0, l = listeners.length; i < l; i++) {\n    listeners[i](change);\n  }\n  untrackedEnd(prevU);\n}\nfunction makeObservable(target, annotations, options) {\n  initObservable(function () {\n    var _annotations;\n    var adm = asObservableObject(target, options)[$mobx];\n    if (false) {}\n    // Default to decorators\n    (_annotations = annotations) != null ? _annotations : annotations = collectStoredAnnotations(target);\n    // Annotate\n    ownKeys(annotations).forEach(function (key) {\n      return adm.make_(key, annotations[key]);\n    });\n  });\n  return target;\n}\n// proto[keysSymbol] = new Set<PropertyKey>()\nvar keysSymbol = /*#__PURE__*/(/* unused pure expression or super */ null && (Symbol("mobx-keys")));\nfunction makeAutoObservable(target, overrides, options) {\n  if (false) {}\n  // Optimization: avoid visiting protos\n  // Assumes that annotation.make_/.extend_ works the same for plain objects\n  if (isPlainObject(target)) {\n    return extendObservable(target, target, overrides, options);\n  }\n  initObservable(function () {\n    var adm = asObservableObject(target, options)[$mobx];\n    // Optimization: cache keys on proto\n    // Assumes makeAutoObservable can be called only once per object and can\'t be used in subclass\n    if (!target[keysSymbol]) {\n      var proto = Object.getPrototypeOf(target);\n      var keys = new Set([].concat(ownKeys(target), ownKeys(proto)));\n      keys["delete"]("constructor");\n      keys["delete"]($mobx);\n      addHiddenProp(proto, keysSymbol, keys);\n    }\n    target[keysSymbol].forEach(function (key) {\n      return adm.make_(key,\n      // must pass "undefined" for { key: undefined }\n      !overrides ? true : key in overrides ? overrides[key] : true);\n    });\n  });\n  return target;\n}\nvar SPLICE = "splice";\nvar UPDATE = "update";\nvar MAX_SPLICE_SIZE = 10000; // See e.g. https://github.com/mobxjs/mobx/issues/859\nvar arrayTraps = {\n  get: function get(target, name) {\n    var adm = target[$mobx];\n    if (name === $mobx) {\n      return adm;\n    }\n    if (name === "length") {\n      return adm.getArrayLength_();\n    }\n    if (typeof name === "string" && !isNaN(name)) {\n      return adm.get_(parseInt(name));\n    }\n    if (hasProp(arrayExtensions, name)) {\n      return arrayExtensions[name];\n    }\n    return target[name];\n  },\n  set: function set(target, name, value) {\n    var adm = target[$mobx];\n    if (name === "length") {\n      adm.setArrayLength_(value);\n    }\n    if (typeof name === "symbol" || isNaN(name)) {\n      target[name] = value;\n    } else {\n      // numeric string\n      adm.set_(parseInt(name), value);\n    }\n    return true;\n  },\n  preventExtensions: function preventExtensions() {\n    die(15);\n  }\n};\nvar ObservableArrayAdministration = /*#__PURE__*/function () {\n  // this is the prop that gets proxied, so can\'t replace it!\n\n  function ObservableArrayAdministration(name, enhancer, owned_, legacyMode_) {\n    if (name === void 0) {\n      name =  false ? 0 : "ObservableArray";\n    }\n    this.owned_ = void 0;\n    this.legacyMode_ = void 0;\n    this.atom_ = void 0;\n    this.values_ = [];\n    this.interceptors_ = void 0;\n    this.changeListeners_ = void 0;\n    this.enhancer_ = void 0;\n    this.dehancer = void 0;\n    this.proxy_ = void 0;\n    this.lastKnownLength_ = 0;\n    this.owned_ = owned_;\n    this.legacyMode_ = legacyMode_;\n    this.atom_ = new Atom(name);\n    this.enhancer_ = function (newV, oldV) {\n      return enhancer(newV, oldV,  false ? 0 : "ObservableArray[..]");\n    };\n  }\n  var _proto = ObservableArrayAdministration.prototype;\n  _proto.dehanceValue_ = function dehanceValue_(value) {\n    if (this.dehancer !== undefined) {\n      return this.dehancer(value);\n    }\n    return value;\n  };\n  _proto.dehanceValues_ = function dehanceValues_(values) {\n    if (this.dehancer !== undefined && values.length > 0) {\n      return values.map(this.dehancer);\n    }\n    return values;\n  };\n  _proto.intercept_ = function intercept_(handler) {\n    return registerInterceptor(this, handler);\n  };\n  _proto.observe_ = function observe_(listener, fireImmediately) {\n    if (fireImmediately === void 0) {\n      fireImmediately = false;\n    }\n    if (fireImmediately) {\n      listener({\n        observableKind: "array",\n        object: this.proxy_,\n        debugObjectName: this.atom_.name_,\n        type: "splice",\n        index: 0,\n        added: this.values_.slice(),\n        addedCount: this.values_.length,\n        removed: [],\n        removedCount: 0\n      });\n    }\n    return registerListener(this, listener);\n  };\n  _proto.getArrayLength_ = function getArrayLength_() {\n    this.atom_.reportObserved();\n    return this.values_.length;\n  };\n  _proto.setArrayLength_ = function setArrayLength_(newLength) {\n    if (typeof newLength !== "number" || isNaN(newLength) || newLength < 0) {\n      die("Out of range: " + newLength);\n    }\n    var currentLength = this.values_.length;\n    if (newLength === currentLength) {\n      return;\n    } else if (newLength > currentLength) {\n      var newItems = new Array(newLength - currentLength);\n      for (var i = 0; i < newLength - currentLength; i++) {\n        newItems[i] = undefined;\n      } // No Array.fill everywhere...\n      this.spliceWithArray_(currentLength, 0, newItems);\n    } else {\n      this.spliceWithArray_(newLength, currentLength - newLength);\n    }\n  };\n  _proto.updateArrayLength_ = function updateArrayLength_(oldLength, delta) {\n    if (oldLength !== this.lastKnownLength_) {\n      die(16);\n    }\n    this.lastKnownLength_ += delta;\n    if (this.legacyMode_ && delta > 0) {\n      reserveArrayBuffer(oldLength + delta + 1);\n    }\n  };\n  _proto.spliceWithArray_ = function spliceWithArray_(index, deleteCount, newItems) {\n    var _this = this;\n    checkIfStateModificationsAreAllowed(this.atom_);\n    var length = this.values_.length;\n    if (index === undefined) {\n      index = 0;\n    } else if (index > length) {\n      index = length;\n    } else if (index < 0) {\n      index = Math.max(0, length + index);\n    }\n    if (arguments.length === 1) {\n      deleteCount = length - index;\n    } else if (deleteCount === undefined || deleteCount === null) {\n      deleteCount = 0;\n    } else {\n      deleteCount = Math.max(0, Math.min(deleteCount, length - index));\n    }\n    if (newItems === undefined) {\n      newItems = EMPTY_ARRAY;\n    }\n    if (hasInterceptors(this)) {\n      var change = interceptChange(this, {\n        object: this.proxy_,\n        type: SPLICE,\n        index: index,\n        removedCount: deleteCount,\n        added: newItems\n      });\n      if (!change) {\n        return EMPTY_ARRAY;\n      }\n      deleteCount = change.removedCount;\n      newItems = change.added;\n    }\n    newItems = newItems.length === 0 ? newItems : newItems.map(function (v) {\n      return _this.enhancer_(v, undefined);\n    });\n    if (this.legacyMode_ || "production" !== "production") {\n      var lengthDelta = newItems.length - deleteCount;\n      this.updateArrayLength_(length, lengthDelta); // checks if internal array wasn\'t modified\n    }\n    var res = this.spliceItemsIntoValues_(index, deleteCount, newItems);\n    if (deleteCount !== 0 || newItems.length !== 0) {\n      this.notifyArraySplice_(index, newItems, res);\n    }\n    return this.dehanceValues_(res);\n  };\n  _proto.spliceItemsIntoValues_ = function spliceItemsIntoValues_(index, deleteCount, newItems) {\n    if (newItems.length < MAX_SPLICE_SIZE) {\n      var _this$values_;\n      return (_this$values_ = this.values_).splice.apply(_this$values_, [index, deleteCount].concat(newItems));\n    } else {\n      // The items removed by the splice\n      var res = this.values_.slice(index, index + deleteCount);\n      // The items that that should remain at the end of the array\n      var oldItems = this.values_.slice(index + deleteCount);\n      // New length is the previous length + addition count - deletion count\n      this.values_.length += newItems.length - deleteCount;\n      for (var i = 0; i < newItems.length; i++) {\n        this.values_[index + i] = newItems[i];\n      }\n      for (var _i = 0; _i < oldItems.length; _i++) {\n        this.values_[index + newItems.length + _i] = oldItems[_i];\n      }\n      return res;\n    }\n  };\n  _proto.notifyArrayChildUpdate_ = function notifyArrayChildUpdate_(index, newValue, oldValue) {\n    var notifySpy = !this.owned_ && isSpyEnabled();\n    var notify = hasListeners(this);\n    var change = notify || notifySpy ? {\n      observableKind: "array",\n      object: this.proxy_,\n      type: UPDATE,\n      debugObjectName: this.atom_.name_,\n      index: index,\n      newValue: newValue,\n      oldValue: oldValue\n    } : null;\n    // The reason why this is on right hand side here (and not above), is this way the uglifier will drop it, but it won\'t\n    // cause any runtime overhead in development mode without NODE_ENV set, unless spying is enabled\n    if (false) {}\n    this.atom_.reportChanged();\n    if (notify) {\n      notifyListeners(this, change);\n    }\n    if (false) {}\n  };\n  _proto.notifyArraySplice_ = function notifyArraySplice_(index, added, removed) {\n    var notifySpy = !this.owned_ && isSpyEnabled();\n    var notify = hasListeners(this);\n    var change = notify || notifySpy ? {\n      observableKind: "array",\n      object: this.proxy_,\n      debugObjectName: this.atom_.name_,\n      type: SPLICE,\n      index: index,\n      removed: removed,\n      added: added,\n      removedCount: removed.length,\n      addedCount: added.length\n    } : null;\n    if (false) {}\n    this.atom_.reportChanged();\n    // conform: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/observe\n    if (notify) {\n      notifyListeners(this, change);\n    }\n    if (false) {}\n  };\n  _proto.get_ = function get_(index) {\n    if (this.legacyMode_ && index >= this.values_.length) {\n      console.warn( false ? 0 : "[mobx] Out of bounds read: " + index);\n      return undefined;\n    }\n    this.atom_.reportObserved();\n    return this.dehanceValue_(this.values_[index]);\n  };\n  _proto.set_ = function set_(index, newValue) {\n    var values = this.values_;\n    if (this.legacyMode_ && index > values.length) {\n      // out of bounds\n      die(17, index, values.length);\n    }\n    if (index < values.length) {\n      // update at index in range\n      checkIfStateModificationsAreAllowed(this.atom_);\n      var oldValue = values[index];\n      if (hasInterceptors(this)) {\n        var change = interceptChange(this, {\n          type: UPDATE,\n          object: this.proxy_,\n          index: index,\n          newValue: newValue\n        });\n        if (!change) {\n          return;\n        }\n        newValue = change.newValue;\n      }\n      newValue = this.enhancer_(newValue, oldValue);\n      var changed = newValue !== oldValue;\n      if (changed) {\n        values[index] = newValue;\n        this.notifyArrayChildUpdate_(index, newValue, oldValue);\n      }\n    } else {\n      // For out of bound index, we don\'t create an actual sparse array,\n      // but rather fill the holes with undefined (same as setArrayLength_).\n      // This could be considered a bug.\n      var newItems = new Array(index + 1 - values.length);\n      for (var i = 0; i < newItems.length - 1; i++) {\n        newItems[i] = undefined;\n      } // No Array.fill everywhere...\n      newItems[newItems.length - 1] = newValue;\n      this.spliceWithArray_(values.length, 0, newItems);\n    }\n  };\n  return ObservableArrayAdministration;\n}();\nfunction createObservableArray(initialValues, enhancer, name, owned) {\n  if (name === void 0) {\n    name =  false ? 0 : "ObservableArray";\n  }\n  if (owned === void 0) {\n    owned = false;\n  }\n  assertProxies();\n  return initObservable(function () {\n    var adm = new ObservableArrayAdministration(name, enhancer, owned, false);\n    addHiddenFinalProp(adm.values_, $mobx, adm);\n    var proxy = new Proxy(adm.values_, arrayTraps);\n    adm.proxy_ = proxy;\n    if (initialValues && initialValues.length) {\n      adm.spliceWithArray_(0, 0, initialValues);\n    }\n    return proxy;\n  });\n}\n// eslint-disable-next-line\nvar arrayExtensions = {\n  clear: function clear() {\n    return this.splice(0);\n  },\n  replace: function replace(newItems) {\n    var adm = this[$mobx];\n    return adm.spliceWithArray_(0, adm.values_.length, newItems);\n  },\n  // Used by JSON.stringify\n  toJSON: function toJSON() {\n    return this.slice();\n  },\n  /*\n   * functions that do alter the internal structure of the array, (based on lib.es6.d.ts)\n   * since these functions alter the inner structure of the array, the have side effects.\n   * Because the have side effects, they should not be used in computed function,\n   * and for that reason the do not call dependencyState.notifyObserved\n   */\n  splice: function splice(index, deleteCount) {\n    for (var _len = arguments.length, newItems = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n      newItems[_key - 2] = arguments[_key];\n    }\n    var adm = this[$mobx];\n    switch (arguments.length) {\n      case 0:\n        return [];\n      case 1:\n        return adm.spliceWithArray_(index);\n      case 2:\n        return adm.spliceWithArray_(index, deleteCount);\n    }\n    return adm.spliceWithArray_(index, deleteCount, newItems);\n  },\n  spliceWithArray: function spliceWithArray(index, deleteCount, newItems) {\n    return this[$mobx].spliceWithArray_(index, deleteCount, newItems);\n  },\n  push: function push() {\n    var adm = this[$mobx];\n    for (var _len2 = arguments.length, items = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      items[_key2] = arguments[_key2];\n    }\n    adm.spliceWithArray_(adm.values_.length, 0, items);\n    return adm.values_.length;\n  },\n  pop: function pop() {\n    return this.splice(Math.max(this[$mobx].values_.length - 1, 0), 1)[0];\n  },\n  shift: function shift() {\n    return this.splice(0, 1)[0];\n  },\n  unshift: function unshift() {\n    var adm = this[$mobx];\n    for (var _len3 = arguments.length, items = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n      items[_key3] = arguments[_key3];\n    }\n    adm.spliceWithArray_(0, 0, items);\n    return adm.values_.length;\n  },\n  reverse: function reverse() {\n    // reverse by default mutates in place before returning the result\n    // which makes it both a \'derivation\' and a \'mutation\'.\n    if (globalState.trackingDerivation) {\n      die(37, "reverse");\n    }\n    this.replace(this.slice().reverse());\n    return this;\n  },\n  sort: function sort() {\n    // sort by default mutates in place before returning the result\n    // which goes against all good practices. Let\'s not change the array in place!\n    if (globalState.trackingDerivation) {\n      die(37, "sort");\n    }\n    var copy = this.slice();\n    copy.sort.apply(copy, arguments);\n    this.replace(copy);\n    return this;\n  },\n  remove: function remove(value) {\n    var adm = this[$mobx];\n    var idx = adm.dehanceValues_(adm.values_).indexOf(value);\n    if (idx > -1) {\n      this.splice(idx, 1);\n      return true;\n    }\n    return false;\n  }\n};\n/**\n * Wrap function from prototype\n * Without this, everything works as well, but this works\n * faster as everything works on unproxied values\n */\naddArrayExtension("at", simpleFunc);\naddArrayExtension("concat", simpleFunc);\naddArrayExtension("flat", simpleFunc);\naddArrayExtension("includes", simpleFunc);\naddArrayExtension("indexOf", simpleFunc);\naddArrayExtension("join", simpleFunc);\naddArrayExtension("lastIndexOf", simpleFunc);\naddArrayExtension("slice", simpleFunc);\naddArrayExtension("toString", simpleFunc);\naddArrayExtension("toLocaleString", simpleFunc);\naddArrayExtension("toSorted", simpleFunc);\naddArrayExtension("toSpliced", simpleFunc);\naddArrayExtension("with", simpleFunc);\n// map\naddArrayExtension("every", mapLikeFunc);\naddArrayExtension("filter", mapLikeFunc);\naddArrayExtension("find", mapLikeFunc);\naddArrayExtension("findIndex", mapLikeFunc);\naddArrayExtension("findLast", mapLikeFunc);\naddArrayExtension("findLastIndex", mapLikeFunc);\naddArrayExtension("flatMap", mapLikeFunc);\naddArrayExtension("forEach", mapLikeFunc);\naddArrayExtension("map", mapLikeFunc);\naddArrayExtension("some", mapLikeFunc);\naddArrayExtension("toReversed", mapLikeFunc);\n// reduce\naddArrayExtension("reduce", reduceLikeFunc);\naddArrayExtension("reduceRight", reduceLikeFunc);\nfunction addArrayExtension(funcName, funcFactory) {\n  if (typeof Array.prototype[funcName] === "function") {\n    arrayExtensions[funcName] = funcFactory(funcName);\n  }\n}\n// Report and delegate to dehanced array\nfunction simpleFunc(funcName) {\n  return function () {\n    var adm = this[$mobx];\n    adm.atom_.reportObserved();\n    var dehancedValues = adm.dehanceValues_(adm.values_);\n    return dehancedValues[funcName].apply(dehancedValues, arguments);\n  };\n}\n// Make sure callbacks receive correct array arg #2326\nfunction mapLikeFunc(funcName) {\n  return function (callback, thisArg) {\n    var _this2 = this;\n    var adm = this[$mobx];\n    adm.atom_.reportObserved();\n    var dehancedValues = adm.dehanceValues_(adm.values_);\n    return dehancedValues[funcName](function (element, index) {\n      return callback.call(thisArg, element, index, _this2);\n    });\n  };\n}\n// Make sure callbacks receive correct array arg #2326\nfunction reduceLikeFunc(funcName) {\n  return function () {\n    var _this3 = this;\n    var adm = this[$mobx];\n    adm.atom_.reportObserved();\n    var dehancedValues = adm.dehanceValues_(adm.values_);\n    // #2432 - reduce behavior depends on arguments.length\n    var callback = arguments[0];\n    arguments[0] = function (accumulator, currentValue, index) {\n      return callback(accumulator, currentValue, index, _this3);\n    };\n    return dehancedValues[funcName].apply(dehancedValues, arguments);\n  };\n}\nvar isObservableArrayAdministration = /*#__PURE__*/createInstanceofPredicate("ObservableArrayAdministration", ObservableArrayAdministration);\nfunction isObservableArray(thing) {\n  return isObject(thing) && isObservableArrayAdministration(thing[$mobx]);\n}\nvar _Symbol$iterator, _Symbol$toStringTag;\nvar ObservableMapMarker = {};\nvar ADD = "add";\nvar DELETE = "delete";\n// just extend Map? See also https://gist.github.com/nestharus/13b4d74f2ef4a2f4357dbd3fc23c1e54\n// But: https://github.com/mobxjs/mobx/issues/1556\n_Symbol$iterator = Symbol.iterator;\n_Symbol$toStringTag = Symbol.toStringTag;\nvar ObservableMap = /*#__PURE__*/function () {\n  // hasMap, not hashMap >-).\n\n  function ObservableMap(initialData, enhancer_, name_) {\n    var _this = this;\n    if (enhancer_ === void 0) {\n      enhancer_ = deepEnhancer;\n    }\n    if (name_ === void 0) {\n      name_ =  false ? 0 : "ObservableMap";\n    }\n    this.enhancer_ = void 0;\n    this.name_ = void 0;\n    this[$mobx] = ObservableMapMarker;\n    this.data_ = void 0;\n    this.hasMap_ = void 0;\n    this.keysAtom_ = void 0;\n    this.interceptors_ = void 0;\n    this.changeListeners_ = void 0;\n    this.dehancer = void 0;\n    this.enhancer_ = enhancer_;\n    this.name_ = name_;\n    if (!isFunction(Map)) {\n      die(18);\n    }\n    initObservable(function () {\n      _this.keysAtom_ = createAtom( false ? 0 : "ObservableMap.keys()");\n      _this.data_ = new Map();\n      _this.hasMap_ = new Map();\n      if (initialData) {\n        _this.merge(initialData);\n      }\n    });\n  }\n  var _proto = ObservableMap.prototype;\n  _proto.has_ = function has_(key) {\n    return this.data_.has(key);\n  };\n  _proto.has = function has(key) {\n    var _this2 = this;\n    if (!globalState.trackingDerivation) {\n      return this.has_(key);\n    }\n    var entry = this.hasMap_.get(key);\n    if (!entry) {\n      var newEntry = entry = new ObservableValue(this.has_(key), referenceEnhancer,  false ? 0 : "ObservableMap.key?", false);\n      this.hasMap_.set(key, newEntry);\n      onBecomeUnobserved(newEntry, function () {\n        return _this2.hasMap_["delete"](key);\n      });\n    }\n    return entry.get();\n  };\n  _proto.set = function set(key, value) {\n    var hasKey = this.has_(key);\n    if (hasInterceptors(this)) {\n      var change = interceptChange(this, {\n        type: hasKey ? UPDATE : ADD,\n        object: this,\n        newValue: value,\n        name: key\n      });\n      if (!change) {\n        return this;\n      }\n      value = change.newValue;\n    }\n    if (hasKey) {\n      this.updateValue_(key, value);\n    } else {\n      this.addValue_(key, value);\n    }\n    return this;\n  };\n  _proto["delete"] = function _delete(key) {\n    var _this3 = this;\n    checkIfStateModificationsAreAllowed(this.keysAtom_);\n    if (hasInterceptors(this)) {\n      var change = interceptChange(this, {\n        type: DELETE,\n        object: this,\n        name: key\n      });\n      if (!change) {\n        return false;\n      }\n    }\n    if (this.has_(key)) {\n      var notifySpy = isSpyEnabled();\n      var notify = hasListeners(this);\n      var _change = notify || notifySpy ? {\n        observableKind: "map",\n        debugObjectName: this.name_,\n        type: DELETE,\n        object: this,\n        oldValue: this.data_.get(key).value_,\n        name: key\n      } : null;\n      if (false) {} // TODO fix type\n      transaction(function () {\n        var _this3$hasMap_$get;\n        _this3.keysAtom_.reportChanged();\n        (_this3$hasMap_$get = _this3.hasMap_.get(key)) == null ? void 0 : _this3$hasMap_$get.setNewValue_(false);\n        var observable = _this3.data_.get(key);\n        observable.setNewValue_(undefined);\n        _this3.data_["delete"](key);\n      });\n      if (notify) {\n        notifyListeners(this, _change);\n      }\n      if (false) {}\n      return true;\n    }\n    return false;\n  };\n  _proto.updateValue_ = function updateValue_(key, newValue) {\n    var observable = this.data_.get(key);\n    newValue = observable.prepareNewValue_(newValue);\n    if (newValue !== globalState.UNCHANGED) {\n      var notifySpy = isSpyEnabled();\n      var notify = hasListeners(this);\n      var change = notify || notifySpy ? {\n        observableKind: "map",\n        debugObjectName: this.name_,\n        type: UPDATE,\n        object: this,\n        oldValue: observable.value_,\n        name: key,\n        newValue: newValue\n      } : null;\n      if (false) {} // TODO fix type\n      observable.setNewValue_(newValue);\n      if (notify) {\n        notifyListeners(this, change);\n      }\n      if (false) {}\n    }\n  };\n  _proto.addValue_ = function addValue_(key, newValue) {\n    var _this4 = this;\n    checkIfStateModificationsAreAllowed(this.keysAtom_);\n    transaction(function () {\n      var _this4$hasMap_$get;\n      var observable = new ObservableValue(newValue, _this4.enhancer_,  false ? 0 : "ObservableMap.key", false);\n      _this4.data_.set(key, observable);\n      newValue = observable.value_; // value might have been changed\n      (_this4$hasMap_$get = _this4.hasMap_.get(key)) == null ? void 0 : _this4$hasMap_$get.setNewValue_(true);\n      _this4.keysAtom_.reportChanged();\n    });\n    var notifySpy = isSpyEnabled();\n    var notify = hasListeners(this);\n    var change = notify || notifySpy ? {\n      observableKind: "map",\n      debugObjectName: this.name_,\n      type: ADD,\n      object: this,\n      name: key,\n      newValue: newValue\n    } : null;\n    if (false) {} // TODO fix type\n    if (notify) {\n      notifyListeners(this, change);\n    }\n    if (false) {}\n  };\n  _proto.get = function get(key) {\n    if (this.has(key)) {\n      return this.dehanceValue_(this.data_.get(key).get());\n    }\n    return this.dehanceValue_(undefined);\n  };\n  _proto.dehanceValue_ = function dehanceValue_(value) {\n    if (this.dehancer !== undefined) {\n      return this.dehancer(value);\n    }\n    return value;\n  };\n  _proto.keys = function keys() {\n    this.keysAtom_.reportObserved();\n    return this.data_.keys();\n  };\n  _proto.values = function values() {\n    var self = this;\n    var keys = this.keys();\n    return makeIterable({\n      next: function next() {\n        var _keys$next = keys.next(),\n          done = _keys$next.done,\n          value = _keys$next.value;\n        return {\n          done: done,\n          value: done ? undefined : self.get(value)\n        };\n      }\n    });\n  };\n  _proto.entries = function entries() {\n    var self = this;\n    var keys = this.keys();\n    return makeIterable({\n      next: function next() {\n        var _keys$next2 = keys.next(),\n          done = _keys$next2.done,\n          value = _keys$next2.value;\n        return {\n          done: done,\n          value: done ? undefined : [value, self.get(value)]\n        };\n      }\n    });\n  };\n  _proto[_Symbol$iterator] = function () {\n    return this.entries();\n  };\n  _proto.forEach = function forEach(callback, thisArg) {\n    for (var _iterator = _createForOfIteratorHelperLoose(this), _step; !(_step = _iterator()).done;) {\n      var _step$value = _step.value,\n        key = _step$value[0],\n        value = _step$value[1];\n      callback.call(thisArg, value, key, this);\n    }\n  }\n  /** Merge another object into this object, returns this. */;\n  _proto.merge = function merge(other) {\n    var _this5 = this;\n    if (isObservableMap(other)) {\n      other = new Map(other);\n    }\n    transaction(function () {\n      if (isPlainObject(other)) {\n        getPlainObjectKeys(other).forEach(function (key) {\n          return _this5.set(key, other[key]);\n        });\n      } else if (Array.isArray(other)) {\n        other.forEach(function (_ref) {\n          var key = _ref[0],\n            value = _ref[1];\n          return _this5.set(key, value);\n        });\n      } else if (isES6Map(other)) {\n        if (other.constructor !== Map) {\n          die(19, other);\n        }\n        other.forEach(function (value, key) {\n          return _this5.set(key, value);\n        });\n      } else if (other !== null && other !== undefined) {\n        die(20, other);\n      }\n    });\n    return this;\n  };\n  _proto.clear = function clear() {\n    var _this6 = this;\n    transaction(function () {\n      untracked(function () {\n        for (var _iterator2 = _createForOfIteratorHelperLoose(_this6.keys()), _step2; !(_step2 = _iterator2()).done;) {\n          var key = _step2.value;\n          _this6["delete"](key);\n        }\n      });\n    });\n  };\n  _proto.replace = function replace(values) {\n    var _this7 = this;\n    // Implementation requirements:\n    // - respect ordering of replacement map\n    // - allow interceptors to run and potentially prevent individual operations\n    // - don\'t recreate observables that already exist in original map (so we don\'t destroy existing subscriptions)\n    // - don\'t _keysAtom.reportChanged if the keys of resulting map are indentical (order matters!)\n    // - note that result map may differ from replacement map due to the interceptors\n    transaction(function () {\n      // Convert to map so we can do quick key lookups\n      var replacementMap = convertToMap(values);\n      var orderedData = new Map();\n      // Used for optimization\n      var keysReportChangedCalled = false;\n      // Delete keys that don\'t exist in replacement map\n      // if the key deletion is prevented by interceptor\n      // add entry at the beginning of the result map\n      for (var _iterator3 = _createForOfIteratorHelperLoose(_this7.data_.keys()), _step3; !(_step3 = _iterator3()).done;) {\n        var key = _step3.value;\n        // Concurrently iterating/deleting keys\n        // iterator should handle this correctly\n        if (!replacementMap.has(key)) {\n          var deleted = _this7["delete"](key);\n          // Was the key removed?\n          if (deleted) {\n            // _keysAtom.reportChanged() was already called\n            keysReportChangedCalled = true;\n          } else {\n            // Delete prevented by interceptor\n            var value = _this7.data_.get(key);\n            orderedData.set(key, value);\n          }\n        }\n      }\n      // Merge entries\n      for (var _iterator4 = _createForOfIteratorHelperLoose(replacementMap.entries()), _step4; !(_step4 = _iterator4()).done;) {\n        var _step4$value = _step4.value,\n          _key = _step4$value[0],\n          _value = _step4$value[1];\n        // We will want to know whether a new key is added\n        var keyExisted = _this7.data_.has(_key);\n        // Add or update value\n        _this7.set(_key, _value);\n        // The addition could have been prevent by interceptor\n        if (_this7.data_.has(_key)) {\n          // The update could have been prevented by interceptor\n          // and also we want to preserve existing values\n          // so use value from _data map (instead of replacement map)\n          var _value2 = _this7.data_.get(_key);\n          orderedData.set(_key, _value2);\n          // Was a new key added?\n          if (!keyExisted) {\n            // _keysAtom.reportChanged() was already called\n            keysReportChangedCalled = true;\n          }\n        }\n      }\n      // Check for possible key order change\n      if (!keysReportChangedCalled) {\n        if (_this7.data_.size !== orderedData.size) {\n          // If size differs, keys are definitely modified\n          _this7.keysAtom_.reportChanged();\n        } else {\n          var iter1 = _this7.data_.keys();\n          var iter2 = orderedData.keys();\n          var next1 = iter1.next();\n          var next2 = iter2.next();\n          while (!next1.done) {\n            if (next1.value !== next2.value) {\n              _this7.keysAtom_.reportChanged();\n              break;\n            }\n            next1 = iter1.next();\n            next2 = iter2.next();\n          }\n        }\n      }\n      // Use correctly ordered map\n      _this7.data_ = orderedData;\n    });\n    return this;\n  };\n  _proto.toString = function toString() {\n    return "[object ObservableMap]";\n  };\n  _proto.toJSON = function toJSON() {\n    return Array.from(this);\n  };\n  /**\n   * Observes this object. Triggers for the events \'add\', \'update\' and \'delete\'.\n   * See: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/observe\n   * for callback details\n   */\n  _proto.observe_ = function observe_(listener, fireImmediately) {\n    if (false) {}\n    return registerListener(this, listener);\n  };\n  _proto.intercept_ = function intercept_(handler) {\n    return registerInterceptor(this, handler);\n  };\n  _createClass(ObservableMap, [{\n    key: "size",\n    get: function get() {\n      this.keysAtom_.reportObserved();\n      return this.data_.size;\n    }\n  }, {\n    key: _Symbol$toStringTag,\n    get: function get() {\n      return "Map";\n    }\n  }]);\n  return ObservableMap;\n}();\n// eslint-disable-next-line\nvar isObservableMap = /*#__PURE__*/createInstanceofPredicate("ObservableMap", ObservableMap);\nfunction convertToMap(dataStructure) {\n  if (isES6Map(dataStructure) || isObservableMap(dataStructure)) {\n    return dataStructure;\n  } else if (Array.isArray(dataStructure)) {\n    return new Map(dataStructure);\n  } else if (isPlainObject(dataStructure)) {\n    var map = new Map();\n    for (var key in dataStructure) {\n      map.set(key, dataStructure[key]);\n    }\n    return map;\n  } else {\n    return die(21, dataStructure);\n  }\n}\nvar _Symbol$iterator$1, _Symbol$toStringTag$1;\nvar ObservableSetMarker = {};\n_Symbol$iterator$1 = Symbol.iterator;\n_Symbol$toStringTag$1 = Symbol.toStringTag;\nvar ObservableSet = /*#__PURE__*/function () {\n  function ObservableSet(initialData, enhancer, name_) {\n    var _this = this;\n    if (enhancer === void 0) {\n      enhancer = deepEnhancer;\n    }\n    if (name_ === void 0) {\n      name_ =  false ? 0 : "ObservableSet";\n    }\n    this.name_ = void 0;\n    this[$mobx] = ObservableSetMarker;\n    this.data_ = new Set();\n    this.atom_ = void 0;\n    this.changeListeners_ = void 0;\n    this.interceptors_ = void 0;\n    this.dehancer = void 0;\n    this.enhancer_ = void 0;\n    this.name_ = name_;\n    if (!isFunction(Set)) {\n      die(22);\n    }\n    this.enhancer_ = function (newV, oldV) {\n      return enhancer(newV, oldV, name_);\n    };\n    initObservable(function () {\n      _this.atom_ = createAtom(_this.name_);\n      if (initialData) {\n        _this.replace(initialData);\n      }\n    });\n  }\n  var _proto = ObservableSet.prototype;\n  _proto.dehanceValue_ = function dehanceValue_(value) {\n    if (this.dehancer !== undefined) {\n      return this.dehancer(value);\n    }\n    return value;\n  };\n  _proto.clear = function clear() {\n    var _this2 = this;\n    transaction(function () {\n      untracked(function () {\n        for (var _iterator = _createForOfIteratorHelperLoose(_this2.data_.values()), _step; !(_step = _iterator()).done;) {\n          var value = _step.value;\n          _this2["delete"](value);\n        }\n      });\n    });\n  };\n  _proto.forEach = function forEach(callbackFn, thisArg) {\n    for (var _iterator2 = _createForOfIteratorHelperLoose(this), _step2; !(_step2 = _iterator2()).done;) {\n      var value = _step2.value;\n      callbackFn.call(thisArg, value, value, this);\n    }\n  };\n  _proto.add = function add(value) {\n    var _this3 = this;\n    checkIfStateModificationsAreAllowed(this.atom_);\n    if (hasInterceptors(this)) {\n      var change = interceptChange(this, {\n        type: ADD,\n        object: this,\n        newValue: value\n      });\n      if (!change) {\n        return this;\n      }\n      // ideally, value = change.value would be done here, so that values can be\n      // changed by interceptor. Same applies for other Set and Map api\'s.\n    }\n    if (!this.has(value)) {\n      transaction(function () {\n        _this3.data_.add(_this3.enhancer_(value, undefined));\n        _this3.atom_.reportChanged();\n      });\n      var notifySpy =  false && 0;\n      var notify = hasListeners(this);\n      var _change = notify || notifySpy ? {\n        observableKind: "set",\n        debugObjectName: this.name_,\n        type: ADD,\n        object: this,\n        newValue: value\n      } : null;\n      if (notifySpy && "production" !== "production") {}\n      if (notify) {\n        notifyListeners(this, _change);\n      }\n      if (notifySpy && "production" !== "production") {}\n    }\n    return this;\n  };\n  _proto["delete"] = function _delete(value) {\n    var _this4 = this;\n    if (hasInterceptors(this)) {\n      var change = interceptChange(this, {\n        type: DELETE,\n        object: this,\n        oldValue: value\n      });\n      if (!change) {\n        return false;\n      }\n    }\n    if (this.has(value)) {\n      var notifySpy =  false && 0;\n      var notify = hasListeners(this);\n      var _change2 = notify || notifySpy ? {\n        observableKind: "set",\n        debugObjectName: this.name_,\n        type: DELETE,\n        object: this,\n        oldValue: value\n      } : null;\n      if (notifySpy && "production" !== "production") {}\n      transaction(function () {\n        _this4.atom_.reportChanged();\n        _this4.data_["delete"](value);\n      });\n      if (notify) {\n        notifyListeners(this, _change2);\n      }\n      if (notifySpy && "production" !== "production") {}\n      return true;\n    }\n    return false;\n  };\n  _proto.has = function has(value) {\n    this.atom_.reportObserved();\n    return this.data_.has(this.dehanceValue_(value));\n  };\n  _proto.entries = function entries() {\n    var nextIndex = 0;\n    var keys = Array.from(this.keys());\n    var values = Array.from(this.values());\n    return makeIterable({\n      next: function next() {\n        var index = nextIndex;\n        nextIndex += 1;\n        return index < values.length ? {\n          value: [keys[index], values[index]],\n          done: false\n        } : {\n          done: true\n        };\n      }\n    });\n  };\n  _proto.keys = function keys() {\n    return this.values();\n  };\n  _proto.values = function values() {\n    this.atom_.reportObserved();\n    var self = this;\n    var nextIndex = 0;\n    var observableValues = Array.from(this.data_.values());\n    return makeIterable({\n      next: function next() {\n        return nextIndex < observableValues.length ? {\n          value: self.dehanceValue_(observableValues[nextIndex++]),\n          done: false\n        } : {\n          done: true\n        };\n      }\n    });\n  };\n  _proto.replace = function replace(other) {\n    var _this5 = this;\n    if (isObservableSet(other)) {\n      other = new Set(other);\n    }\n    transaction(function () {\n      if (Array.isArray(other)) {\n        _this5.clear();\n        other.forEach(function (value) {\n          return _this5.add(value);\n        });\n      } else if (isES6Set(other)) {\n        _this5.clear();\n        other.forEach(function (value) {\n          return _this5.add(value);\n        });\n      } else if (other !== null && other !== undefined) {\n        die("Cannot initialize set from " + other);\n      }\n    });\n    return this;\n  };\n  _proto.observe_ = function observe_(listener, fireImmediately) {\n    // ... \'fireImmediately\' could also be true?\n    if (false) {}\n    return registerListener(this, listener);\n  };\n  _proto.intercept_ = function intercept_(handler) {\n    return registerInterceptor(this, handler);\n  };\n  _proto.toJSON = function toJSON() {\n    return Array.from(this);\n  };\n  _proto.toString = function toString() {\n    return "[object ObservableSet]";\n  };\n  _proto[_Symbol$iterator$1] = function () {\n    return this.values();\n  };\n  _createClass(ObservableSet, [{\n    key: "size",\n    get: function get() {\n      this.atom_.reportObserved();\n      return this.data_.size;\n    }\n  }, {\n    key: _Symbol$toStringTag$1,\n    get: function get() {\n      return "Set";\n    }\n  }]);\n  return ObservableSet;\n}();\n// eslint-disable-next-line\nvar isObservableSet = /*#__PURE__*/createInstanceofPredicate("ObservableSet", ObservableSet);\nvar descriptorCache = /*#__PURE__*/Object.create(null);\nvar REMOVE = "remove";\nvar ObservableObjectAdministration = /*#__PURE__*/function () {\n  function ObservableObjectAdministration(target_, values_, name_,\n  // Used anytime annotation is not explicitely provided\n  defaultAnnotation_) {\n    if (values_ === void 0) {\n      values_ = new Map();\n    }\n    if (defaultAnnotation_ === void 0) {\n      defaultAnnotation_ = autoAnnotation;\n    }\n    this.target_ = void 0;\n    this.values_ = void 0;\n    this.name_ = void 0;\n    this.defaultAnnotation_ = void 0;\n    this.keysAtom_ = void 0;\n    this.changeListeners_ = void 0;\n    this.interceptors_ = void 0;\n    this.proxy_ = void 0;\n    this.isPlainObject_ = void 0;\n    this.appliedAnnotations_ = void 0;\n    this.pendingKeys_ = void 0;\n    this.target_ = target_;\n    this.values_ = values_;\n    this.name_ = name_;\n    this.defaultAnnotation_ = defaultAnnotation_;\n    this.keysAtom_ = new Atom( false ? 0 : "ObservableObject.keys");\n    // Optimization: we use this frequently\n    this.isPlainObject_ = isPlainObject(this.target_);\n    if (false) {}\n    if (false) {}\n  }\n  var _proto = ObservableObjectAdministration.prototype;\n  _proto.getObservablePropValue_ = function getObservablePropValue_(key) {\n    return this.values_.get(key).get();\n  };\n  _proto.setObservablePropValue_ = function setObservablePropValue_(key, newValue) {\n    var observable = this.values_.get(key);\n    if (observable instanceof ComputedValue) {\n      observable.set(newValue);\n      return true;\n    }\n    // intercept\n    if (hasInterceptors(this)) {\n      var change = interceptChange(this, {\n        type: UPDATE,\n        object: this.proxy_ || this.target_,\n        name: key,\n        newValue: newValue\n      });\n      if (!change) {\n        return null;\n      }\n      newValue = change.newValue;\n    }\n    newValue = observable.prepareNewValue_(newValue);\n    // notify spy & observers\n    if (newValue !== globalState.UNCHANGED) {\n      var notify = hasListeners(this);\n      var notifySpy =  false && 0;\n      var _change = notify || notifySpy ? {\n        type: UPDATE,\n        observableKind: "object",\n        debugObjectName: this.name_,\n        object: this.proxy_ || this.target_,\n        oldValue: observable.value_,\n        name: key,\n        newValue: newValue\n      } : null;\n      if (false) {}\n      observable.setNewValue_(newValue);\n      if (notify) {\n        notifyListeners(this, _change);\n      }\n      if (false) {}\n    }\n    return true;\n  };\n  _proto.get_ = function get_(key) {\n    if (globalState.trackingDerivation && !hasProp(this.target_, key)) {\n      // Key doesn\'t exist yet, subscribe for it in case it\'s added later\n      this.has_(key);\n    }\n    return this.target_[key];\n  }\n  /**\n   * @param {PropertyKey} key\n   * @param {any} value\n   * @param {Annotation|boolean} annotation true - use default annotation, false - copy as is\n   * @param {boolean} proxyTrap whether it\'s called from proxy trap\n   * @returns {boolean|null} true on success, false on failure (proxyTrap + non-configurable), null when cancelled by interceptor\n   */;\n  _proto.set_ = function set_(key, value, proxyTrap) {\n    if (proxyTrap === void 0) {\n      proxyTrap = false;\n    }\n    // Don\'t use .has(key) - we care about own\n    if (hasProp(this.target_, key)) {\n      // Existing prop\n      if (this.values_.has(key)) {\n        // Observable (can be intercepted)\n        return this.setObservablePropValue_(key, value);\n      } else if (proxyTrap) {\n        // Non-observable - proxy\n        return Reflect.set(this.target_, key, value);\n      } else {\n        // Non-observable\n        this.target_[key] = value;\n        return true;\n      }\n    } else {\n      // New prop\n      return this.extend_(key, {\n        value: value,\n        enumerable: true,\n        writable: true,\n        configurable: true\n      }, this.defaultAnnotation_, proxyTrap);\n    }\n  }\n  // Trap for "in"\n  ;\n  _proto.has_ = function has_(key) {\n    if (!globalState.trackingDerivation) {\n      // Skip key subscription outside derivation\n      return key in this.target_;\n    }\n    this.pendingKeys_ || (this.pendingKeys_ = new Map());\n    var entry = this.pendingKeys_.get(key);\n    if (!entry) {\n      entry = new ObservableValue(key in this.target_, referenceEnhancer,  false ? 0 : "ObservableObject.key?", false);\n      this.pendingKeys_.set(key, entry);\n    }\n    return entry.get();\n  }\n  /**\n   * @param {PropertyKey} key\n   * @param {Annotation|boolean} annotation true - use default annotation, false - ignore prop\n   */;\n  _proto.make_ = function make_(key, annotation) {\n    if (annotation === true) {\n      annotation = this.defaultAnnotation_;\n    }\n    if (annotation === false) {\n      return;\n    }\n    assertAnnotable(this, annotation, key);\n    if (!(key in this.target_)) {\n      var _this$target_$storedA;\n      // Throw on missing key, except for decorators:\n      // Decorator annotations are collected from whole prototype chain.\n      // When called from super() some props may not exist yet.\n      // However we don\'t have to worry about missing prop,\n      // because the decorator must have been applied to something.\n      if ((_this$target_$storedA = this.target_[storedAnnotationsSymbol]) != null && _this$target_$storedA[key]) {\n        return; // will be annotated by subclass constructor\n      } else {\n        die(1, annotation.annotationType_, this.name_ + "." + key.toString());\n      }\n    }\n    var source = this.target_;\n    while (source && source !== objectPrototype) {\n      var descriptor = getDescriptor(source, key);\n      if (descriptor) {\n        var outcome = annotation.make_(this, key, descriptor, source);\n        if (outcome === 0 /* MakeResult.Cancel */) {\n          return;\n        }\n        if (outcome === 1 /* MakeResult.Break */) {\n          break;\n        }\n      }\n      source = Object.getPrototypeOf(source);\n    }\n    recordAnnotationApplied(this, annotation, key);\n  }\n  /**\n   * @param {PropertyKey} key\n   * @param {PropertyDescriptor} descriptor\n   * @param {Annotation|boolean} annotation true - use default annotation, false - copy as is\n   * @param {boolean} proxyTrap whether it\'s called from proxy trap\n   * @returns {boolean|null} true on success, false on failure (proxyTrap + non-configurable), null when cancelled by interceptor\n   */;\n  _proto.extend_ = function extend_(key, descriptor, annotation, proxyTrap) {\n    if (proxyTrap === void 0) {\n      proxyTrap = false;\n    }\n    if (annotation === true) {\n      annotation = this.defaultAnnotation_;\n    }\n    if (annotation === false) {\n      return this.defineProperty_(key, descriptor, proxyTrap);\n    }\n    assertAnnotable(this, annotation, key);\n    var outcome = annotation.extend_(this, key, descriptor, proxyTrap);\n    if (outcome) {\n      recordAnnotationApplied(this, annotation, key);\n    }\n    return outcome;\n  }\n  /**\n   * @param {PropertyKey} key\n   * @param {PropertyDescriptor} descriptor\n   * @param {boolean} proxyTrap whether it\'s called from proxy trap\n   * @returns {boolean|null} true on success, false on failure (proxyTrap + non-configurable), null when cancelled by interceptor\n   */;\n  _proto.defineProperty_ = function defineProperty_(key, descriptor, proxyTrap) {\n    if (proxyTrap === void 0) {\n      proxyTrap = false;\n    }\n    checkIfStateModificationsAreAllowed(this.keysAtom_);\n    try {\n      startBatch();\n      // Delete\n      var deleteOutcome = this.delete_(key);\n      if (!deleteOutcome) {\n        // Failure or intercepted\n        return deleteOutcome;\n      }\n      // ADD interceptor\n      if (hasInterceptors(this)) {\n        var change = interceptChange(this, {\n          object: this.proxy_ || this.target_,\n          name: key,\n          type: ADD,\n          newValue: descriptor.value\n        });\n        if (!change) {\n          return null;\n        }\n        var newValue = change.newValue;\n        if (descriptor.value !== newValue) {\n          descriptor = _extends({}, descriptor, {\n            value: newValue\n          });\n        }\n      }\n      // Define\n      if (proxyTrap) {\n        if (!Reflect.defineProperty(this.target_, key, descriptor)) {\n          return false;\n        }\n      } else {\n        defineProperty(this.target_, key, descriptor);\n      }\n      // Notify\n      this.notifyPropertyAddition_(key, descriptor.value);\n    } finally {\n      endBatch();\n    }\n    return true;\n  }\n  // If original descriptor becomes relevant, move this to annotation directly\n  ;\n  _proto.defineObservableProperty_ = function defineObservableProperty_(key, value, enhancer, proxyTrap) {\n    if (proxyTrap === void 0) {\n      proxyTrap = false;\n    }\n    checkIfStateModificationsAreAllowed(this.keysAtom_);\n    try {\n      startBatch();\n      // Delete\n      var deleteOutcome = this.delete_(key);\n      if (!deleteOutcome) {\n        // Failure or intercepted\n        return deleteOutcome;\n      }\n      // ADD interceptor\n      if (hasInterceptors(this)) {\n        var change = interceptChange(this, {\n          object: this.proxy_ || this.target_,\n          name: key,\n          type: ADD,\n          newValue: value\n        });\n        if (!change) {\n          return null;\n        }\n        value = change.newValue;\n      }\n      var cachedDescriptor = getCachedObservablePropDescriptor(key);\n      var descriptor = {\n        configurable: globalState.safeDescriptors ? this.isPlainObject_ : true,\n        enumerable: true,\n        get: cachedDescriptor.get,\n        set: cachedDescriptor.set\n      };\n      // Define\n      if (proxyTrap) {\n        if (!Reflect.defineProperty(this.target_, key, descriptor)) {\n          return false;\n        }\n      } else {\n        defineProperty(this.target_, key, descriptor);\n      }\n      var observable = new ObservableValue(value, enhancer,  false ? 0 : "ObservableObject.key", false);\n      this.values_.set(key, observable);\n      // Notify (value possibly changed by ObservableValue)\n      this.notifyPropertyAddition_(key, observable.value_);\n    } finally {\n      endBatch();\n    }\n    return true;\n  }\n  // If original descriptor becomes relevant, move this to annotation directly\n  ;\n  _proto.defineComputedProperty_ = function defineComputedProperty_(key, options, proxyTrap) {\n    if (proxyTrap === void 0) {\n      proxyTrap = false;\n    }\n    checkIfStateModificationsAreAllowed(this.keysAtom_);\n    try {\n      startBatch();\n      // Delete\n      var deleteOutcome = this.delete_(key);\n      if (!deleteOutcome) {\n        // Failure or intercepted\n        return deleteOutcome;\n      }\n      // ADD interceptor\n      if (hasInterceptors(this)) {\n        var change = interceptChange(this, {\n          object: this.proxy_ || this.target_,\n          name: key,\n          type: ADD,\n          newValue: undefined\n        });\n        if (!change) {\n          return null;\n        }\n      }\n      options.name || (options.name =  false ? 0 : "ObservableObject.key");\n      options.context = this.proxy_ || this.target_;\n      var cachedDescriptor = getCachedObservablePropDescriptor(key);\n      var descriptor = {\n        configurable: globalState.safeDescriptors ? this.isPlainObject_ : true,\n        enumerable: false,\n        get: cachedDescriptor.get,\n        set: cachedDescriptor.set\n      };\n      // Define\n      if (proxyTrap) {\n        if (!Reflect.defineProperty(this.target_, key, descriptor)) {\n          return false;\n        }\n      } else {\n        defineProperty(this.target_, key, descriptor);\n      }\n      this.values_.set(key, new ComputedValue(options));\n      // Notify\n      this.notifyPropertyAddition_(key, undefined);\n    } finally {\n      endBatch();\n    }\n    return true;\n  }\n  /**\n   * @param {PropertyKey} key\n   * @param {PropertyDescriptor} descriptor\n   * @param {boolean} proxyTrap whether it\'s called from proxy trap\n   * @returns {boolean|null} true on success, false on failure (proxyTrap + non-configurable), null when cancelled by interceptor\n   */;\n  _proto.delete_ = function delete_(key, proxyTrap) {\n    if (proxyTrap === void 0) {\n      proxyTrap = false;\n    }\n    checkIfStateModificationsAreAllowed(this.keysAtom_);\n    // No such prop\n    if (!hasProp(this.target_, key)) {\n      return true;\n    }\n    // Intercept\n    if (hasInterceptors(this)) {\n      var change = interceptChange(this, {\n        object: this.proxy_ || this.target_,\n        name: key,\n        type: REMOVE\n      });\n      // Cancelled\n      if (!change) {\n        return null;\n      }\n    }\n    // Delete\n    try {\n      var _this$pendingKeys_, _this$pendingKeys_$ge;\n      startBatch();\n      var notify = hasListeners(this);\n      var notifySpy =  false && 0;\n      var observable = this.values_.get(key);\n      // Value needed for spies/listeners\n      var value = undefined;\n      // Optimization: don\'t pull the value unless we will need it\n      if (!observable && (notify || notifySpy)) {\n        var _getDescriptor;\n        value = (_getDescriptor = getDescriptor(this.target_, key)) == null ? void 0 : _getDescriptor.value;\n      }\n      // delete prop (do first, may fail)\n      if (proxyTrap) {\n        if (!Reflect.deleteProperty(this.target_, key)) {\n          return false;\n        }\n      } else {\n        delete this.target_[key];\n      }\n      // Allow re-annotating this field\n      if (false) {}\n      // Clear observable\n      if (observable) {\n        this.values_["delete"](key);\n        // for computed, value is undefined\n        if (observable instanceof ObservableValue) {\n          value = observable.value_;\n        }\n        // Notify: autorun(() => obj[key]), see #1796\n        propagateChanged(observable);\n      }\n      // Notify "keys/entries/values" observers\n      this.keysAtom_.reportChanged();\n      // Notify "has" observers\n      // "in" as it may still exist in proto\n      (_this$pendingKeys_ = this.pendingKeys_) == null ? void 0 : (_this$pendingKeys_$ge = _this$pendingKeys_.get(key)) == null ? void 0 : _this$pendingKeys_$ge.set(key in this.target_);\n      // Notify spies/listeners\n      if (notify || notifySpy) {\n        var _change2 = {\n          type: REMOVE,\n          observableKind: "object",\n          object: this.proxy_ || this.target_,\n          debugObjectName: this.name_,\n          oldValue: value,\n          name: key\n        };\n        if (false) {}\n        if (notify) {\n          notifyListeners(this, _change2);\n        }\n        if (false) {}\n      }\n    } finally {\n      endBatch();\n    }\n    return true;\n  }\n  /**\n   * Observes this object. Triggers for the events \'add\', \'update\' and \'delete\'.\n   * See: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/observe\n   * for callback details\n   */;\n  _proto.observe_ = function observe_(callback, fireImmediately) {\n    if (false) {}\n    return registerListener(this, callback);\n  };\n  _proto.intercept_ = function intercept_(handler) {\n    return registerInterceptor(this, handler);\n  };\n  _proto.notifyPropertyAddition_ = function notifyPropertyAddition_(key, value) {\n    var _this$pendingKeys_2, _this$pendingKeys_2$g;\n    var notify = hasListeners(this);\n    var notifySpy =  false && 0;\n    if (notify || notifySpy) {\n      var change = notify || notifySpy ? {\n        type: ADD,\n        observableKind: "object",\n        debugObjectName: this.name_,\n        object: this.proxy_ || this.target_,\n        name: key,\n        newValue: value\n      } : null;\n      if (false) {}\n      if (notify) {\n        notifyListeners(this, change);\n      }\n      if (false) {}\n    }\n    (_this$pendingKeys_2 = this.pendingKeys_) == null ? void 0 : (_this$pendingKeys_2$g = _this$pendingKeys_2.get(key)) == null ? void 0 : _this$pendingKeys_2$g.set(true);\n    // Notify "keys/entries/values" observers\n    this.keysAtom_.reportChanged();\n  };\n  _proto.ownKeys_ = function ownKeys_() {\n    this.keysAtom_.reportObserved();\n    return ownKeys(this.target_);\n  };\n  _proto.keys_ = function keys_() {\n    // Returns enumerable && own, but unfortunately keysAtom will report on ANY key change.\n    // There is no way to distinguish between Object.keys(object) and Reflect.ownKeys(object) - both are handled by ownKeys trap.\n    // We can either over-report in Object.keys(object) or under-report in Reflect.ownKeys(object)\n    // We choose to over-report in Object.keys(object), because:\n    // - typically it\'s used with simple data objects\n    // - when symbolic/non-enumerable keys are relevant Reflect.ownKeys works as expected\n    this.keysAtom_.reportObserved();\n    return Object.keys(this.target_);\n  };\n  return ObservableObjectAdministration;\n}();\nfunction asObservableObject(target, options) {\n  var _options$name;\n  if (false) {}\n  if (hasProp(target, $mobx)) {\n    if (false) {}\n    return target;\n  }\n  if (false) {}\n  var name = (_options$name = options == null ? void 0 : options.name) != null ? _options$name :  false ? 0 : "ObservableObject";\n  var adm = new ObservableObjectAdministration(target, new Map(), String(name), getAnnotationFromOptions(options));\n  addHiddenProp(target, $mobx, adm);\n  return target;\n}\nvar isObservableObjectAdministration = /*#__PURE__*/createInstanceofPredicate("ObservableObjectAdministration", ObservableObjectAdministration);\nfunction getCachedObservablePropDescriptor(key) {\n  return descriptorCache[key] || (descriptorCache[key] = {\n    get: function get() {\n      return this[$mobx].getObservablePropValue_(key);\n    },\n    set: function set(value) {\n      return this[$mobx].setObservablePropValue_(key, value);\n    }\n  });\n}\nfunction isObservableObject(thing) {\n  if (isObject(thing)) {\n    return isObservableObjectAdministration(thing[$mobx]);\n  }\n  return false;\n}\nfunction recordAnnotationApplied(adm, annotation, key) {\n  var _adm$target_$storedAn;\n  if (false) {}\n  // Remove applied decorator annotation so we don\'t try to apply it again in subclass constructor\n  (_adm$target_$storedAn = adm.target_[storedAnnotationsSymbol]) == null ? true : delete _adm$target_$storedAn[key];\n}\nfunction assertAnnotable(adm, annotation, key) {\n  // Valid annotation\n  if (false) {}\n  /*\n  // Configurable, not sealed, not frozen\n  // Possibly not needed, just a little better error then the one thrown by engine.\n  // Cases where this would be useful the most (subclass field initializer) are not interceptable by this.\n  if (__DEV__) {\n      const configurable = getDescriptor(adm.target_, key)?.configurable\n      const frozen = Object.isFrozen(adm.target_)\n      const sealed = Object.isSealed(adm.target_)\n      if (!configurable || frozen || sealed) {\n          const fieldName = `${adm.name_}.${key.toString()}`\n          const requestedAnnotationType = annotation.annotationType_\n          let error = `Cannot apply \'${requestedAnnotationType}\' to \'${fieldName}\':`\n          if (frozen) {\n              error += `\\nObject is frozen.`\n          }\n          if (sealed) {\n              error += `\\nObject is sealed.`\n          }\n          if (!configurable) {\n              error += `\\nproperty is not configurable.`\n              // Mention only if caused by us to avoid confusion\n              if (hasProp(adm.appliedAnnotations!, key)) {\n                  error += `\\nTo prevent accidental re-definition of a field by a subclass, `\n                  error += `all annotated fields of non-plain objects (classes) are not configurable.`\n              }\n          }\n          die(error)\n      }\n  }\n  */\n  // Not annotated\n  if (false) { var requestedAnnotationType, currentAnnotationType, fieldName; }\n}\n\n// Bug in safari 9.* (or iOS 9 safari mobile). See #364\nvar ENTRY_0 = /*#__PURE__*/createArrayEntryDescriptor(0);\nvar safariPrototypeSetterInheritanceBug = /*#__PURE__*/function () {\n  var v = false;\n  var p = {};\n  Object.defineProperty(p, "0", {\n    set: function set() {\n      v = true;\n    }\n  });\n  /*#__PURE__*/\n  Object.create(p)["0"] = 1;\n  return v === false;\n}();\n/**\n * This array buffer contains two lists of properties, so that all arrays\n * can recycle their property definitions, which significantly improves performance of creating\n * properties on the fly.\n */\nvar OBSERVABLE_ARRAY_BUFFER_SIZE = 0;\n// Typescript workaround to make sure ObservableArray extends Array\nvar StubArray = function StubArray() {};\nfunction inherit(ctor, proto) {\n  if (Object.setPrototypeOf) {\n    Object.setPrototypeOf(ctor.prototype, proto);\n  } else if (ctor.prototype.__proto__ !== undefined) {\n    ctor.prototype.__proto__ = proto;\n  } else {\n    ctor.prototype = proto;\n  }\n}\ninherit(StubArray, Array.prototype);\n// Weex proto freeze protection was here,\n// but it is unclear why the hack is need as MobX never changed the prototype\n// anyway, so removed it in V6\nvar LegacyObservableArray = /*#__PURE__*/function (_StubArray, _Symbol$toStringTag, _Symbol$iterator) {\n  _inheritsLoose(LegacyObservableArray, _StubArray);\n  function LegacyObservableArray(initialValues, enhancer, name, owned) {\n    var _this;\n    if (name === void 0) {\n      name =  false ? 0 : "ObservableArray";\n    }\n    if (owned === void 0) {\n      owned = false;\n    }\n    _this = _StubArray.call(this) || this;\n    initObservable(function () {\n      var adm = new ObservableArrayAdministration(name, enhancer, owned, true);\n      adm.proxy_ = _assertThisInitialized(_this);\n      addHiddenFinalProp(_assertThisInitialized(_this), $mobx, adm);\n      if (initialValues && initialValues.length) {\n        // @ts-ignore\n        _this.spliceWithArray(0, 0, initialValues);\n      }\n      if (safariPrototypeSetterInheritanceBug) {\n        // Seems that Safari won\'t use numeric prototype setter until any * numeric property is\n        // defined on the instance. After that it works fine, even if this property is deleted.\n        Object.defineProperty(_assertThisInitialized(_this), "0", ENTRY_0);\n      }\n    });\n    return _this;\n  }\n  var _proto = LegacyObservableArray.prototype;\n  _proto.concat = function concat() {\n    this[$mobx].atom_.reportObserved();\n    for (var _len = arguments.length, arrays = new Array(_len), _key = 0; _key < _len; _key++) {\n      arrays[_key] = arguments[_key];\n    }\n    return Array.prototype.concat.apply(this.slice(),\n    //@ts-ignore\n    arrays.map(function (a) {\n      return isObservableArray(a) ? a.slice() : a;\n    }));\n  };\n  _proto[_Symbol$iterator] = function () {\n    var self = this;\n    var nextIndex = 0;\n    return makeIterable({\n      next: function next() {\n        return nextIndex < self.length ? {\n          value: self[nextIndex++],\n          done: false\n        } : {\n          done: true,\n          value: undefined\n        };\n      }\n    });\n  };\n  _createClass(LegacyObservableArray, [{\n    key: "length",\n    get: function get() {\n      return this[$mobx].getArrayLength_();\n    },\n    set: function set(newLength) {\n      this[$mobx].setArrayLength_(newLength);\n    }\n  }, {\n    key: _Symbol$toStringTag,\n    get: function get() {\n      return "Array";\n    }\n  }]);\n  return LegacyObservableArray;\n}(StubArray, Symbol.toStringTag, Symbol.iterator);\nObject.entries(arrayExtensions).forEach(function (_ref) {\n  var prop = _ref[0],\n    fn = _ref[1];\n  if (prop !== "concat") {\n    addHiddenProp(LegacyObservableArray.prototype, prop, fn);\n  }\n});\nfunction createArrayEntryDescriptor(index) {\n  return {\n    enumerable: false,\n    configurable: true,\n    get: function get() {\n      return this[$mobx].get_(index);\n    },\n    set: function set(value) {\n      this[$mobx].set_(index, value);\n    }\n  };\n}\nfunction createArrayBufferItem(index) {\n  defineProperty(LegacyObservableArray.prototype, "" + index, createArrayEntryDescriptor(index));\n}\nfunction reserveArrayBuffer(max) {\n  if (max > OBSERVABLE_ARRAY_BUFFER_SIZE) {\n    for (var index = OBSERVABLE_ARRAY_BUFFER_SIZE; index < max + 100; index++) {\n      createArrayBufferItem(index);\n    }\n    OBSERVABLE_ARRAY_BUFFER_SIZE = max;\n  }\n}\nreserveArrayBuffer(1000);\nfunction createLegacyArray(initialValues, enhancer, name) {\n  return new LegacyObservableArray(initialValues, enhancer, name);\n}\nfunction getAtom(thing, property) {\n  if (typeof thing === "object" && thing !== null) {\n    if (isObservableArray(thing)) {\n      if (property !== undefined) {\n        die(23);\n      }\n      return thing[$mobx].atom_;\n    }\n    if (isObservableSet(thing)) {\n      return thing.atom_;\n    }\n    if (isObservableMap(thing)) {\n      if (property === undefined) {\n        return thing.keysAtom_;\n      }\n      var observable = thing.data_.get(property) || thing.hasMap_.get(property);\n      if (!observable) {\n        die(25, property, getDebugName(thing));\n      }\n      return observable;\n    }\n    if (isObservableObject(thing)) {\n      if (!property) {\n        return die(26);\n      }\n      var _observable = thing[$mobx].values_.get(property);\n      if (!_observable) {\n        die(27, property, getDebugName(thing));\n      }\n      return _observable;\n    }\n    if (isAtom(thing) || isComputedValue(thing) || isReaction(thing)) {\n      return thing;\n    }\n  } else if (isFunction(thing)) {\n    if (isReaction(thing[$mobx])) {\n      // disposer function\n      return thing[$mobx];\n    }\n  }\n  die(28);\n}\nfunction getAdministration(thing, property) {\n  if (!thing) {\n    die(29);\n  }\n  if (property !== undefined) {\n    return getAdministration(getAtom(thing, property));\n  }\n  if (isAtom(thing) || isComputedValue(thing) || isReaction(thing)) {\n    return thing;\n  }\n  if (isObservableMap(thing) || isObservableSet(thing)) {\n    return thing;\n  }\n  if (thing[$mobx]) {\n    return thing[$mobx];\n  }\n  die(24, thing);\n}\nfunction getDebugName(thing, property) {\n  var named;\n  if (property !== undefined) {\n    named = getAtom(thing, property);\n  } else if (isAction(thing)) {\n    return thing.name;\n  } else if (isObservableObject(thing) || isObservableMap(thing) || isObservableSet(thing)) {\n    named = getAdministration(thing);\n  } else {\n    // valid for arrays as well\n    named = getAtom(thing);\n  }\n  return named.name_;\n}\n/**\n * Helper function for initializing observable structures, it applies:\n * 1. allowStateChanges so we don\'t violate enforceActions.\n * 2. untracked so we don\'t accidentaly subscribe to anything observable accessed during init in case the observable is created inside derivation.\n * 3. batch to avoid state version updates\n */\nfunction initObservable(cb) {\n  var derivation = untrackedStart();\n  var allowStateChanges = allowStateChangesStart(true);\n  startBatch();\n  try {\n    return cb();\n  } finally {\n    endBatch();\n    allowStateChangesEnd(allowStateChanges);\n    untrackedEnd(derivation);\n  }\n}\nvar mobx_esm_toString = objectPrototype.toString;\nfunction deepEqual(a, b, depth) {\n  if (depth === void 0) {\n    depth = -1;\n  }\n  return eq(a, b, depth);\n}\n// Copied from https://github.com/jashkenas/underscore/blob/5c237a7c682fb68fd5378203f0bf22dce1624854/underscore.js#L1186-L1289\n// Internal recursive comparison function for `isEqual`.\nfunction eq(a, b, depth, aStack, bStack) {\n  // Identical objects are equal. `0 === -0`, but they aren\'t identical.\n  // See the [Harmony `egal` proposal](http://wiki.ecmascript.org/doku.php?id=harmony:egal).\n  if (a === b) {\n    return a !== 0 || 1 / a === 1 / b;\n  }\n  // `null` or `undefined` only equal to itself (strict comparison).\n  if (a == null || b == null) {\n    return false;\n  }\n  // `NaN`s are equivalent, but non-reflexive.\n  if (a !== a) {\n    return b !== b;\n  }\n  // Exhaust primitive checks\n  var type = typeof a;\n  if (type !== "function" && type !== "object" && typeof b != "object") {\n    return false;\n  }\n  // Compare `[[Class]]` names.\n  var className = mobx_esm_toString.call(a);\n  if (className !== mobx_esm_toString.call(b)) {\n    return false;\n  }\n  switch (className) {\n    // Strings, numbers, regular expressions, dates, and booleans are compared by value.\n    case "[object RegExp]":\n    // RegExps are coerced to strings for comparison (Note: \'\' + /a/i === \'/a/i\')\n    case "[object String]":\n      // Primitives and their corresponding object wrappers are equivalent; thus, `"5"` is\n      // equivalent to `new String("5")`.\n      return "" + a === "" + b;\n    case "[object Number]":\n      // `NaN`s are equivalent, but non-reflexive.\n      // Object(NaN) is equivalent to NaN.\n      if (+a !== +a) {\n        return +b !== +b;\n      }\n      // An `egal` comparison is performed for other numeric values.\n      return +a === 0 ? 1 / +a === 1 / b : +a === +b;\n    case "[object Date]":\n    case "[object Boolean]":\n      // Coerce dates and booleans to numeric primitive values. Dates are compared by their\n      // millisecond representations. Note that invalid dates with millisecond representations\n      // of `NaN` are not equivalent.\n      return +a === +b;\n    case "[object Symbol]":\n      return typeof Symbol !== "undefined" && Symbol.valueOf.call(a) === Symbol.valueOf.call(b);\n    case "[object Map]":\n    case "[object Set]":\n      // Maps and Sets are unwrapped to arrays of entry-pairs, adding an incidental level.\n      // Hide this extra level by increasing the depth.\n      if (depth >= 0) {\n        depth++;\n      }\n      break;\n  }\n  // Unwrap any wrapped objects.\n  a = unwrap(a);\n  b = unwrap(b);\n  var areArrays = className === "[object Array]";\n  if (!areArrays) {\n    if (typeof a != "object" || typeof b != "object") {\n      return false;\n    }\n    // Objects with different constructors are not equivalent, but `Object`s or `Array`s\n    // from different frames are.\n    var aCtor = a.constructor,\n      bCtor = b.constructor;\n    if (aCtor !== bCtor && !(isFunction(aCtor) && aCtor instanceof aCtor && isFunction(bCtor) && bCtor instanceof bCtor) && "constructor" in a && "constructor" in b) {\n      return false;\n    }\n  }\n  if (depth === 0) {\n    return false;\n  } else if (depth < 0) {\n    depth = -1;\n  }\n  // Assume equality for cyclic structures. The algorithm for detecting cyclic\n  // structures is adapted from ES 5.1 section 15.12.3, abstract operation `JO`.\n  // Initializing stack of traversed objects.\n  // It\'s done here since we only need them for objects and arrays comparison.\n  aStack = aStack || [];\n  bStack = bStack || [];\n  var length = aStack.length;\n  while (length--) {\n    // Linear search. Performance is inversely proportional to the number of\n    // unique nested structures.\n    if (aStack[length] === a) {\n      return bStack[length] === b;\n    }\n  }\n  // Add the first object to the stack of traversed objects.\n  aStack.push(a);\n  bStack.push(b);\n  // Recursively compare objects and arrays.\n  if (areArrays) {\n    // Compare array lengths to determine if a deep comparison is necessary.\n    length = a.length;\n    if (length !== b.length) {\n      return false;\n    }\n    // Deep compare the contents, ignoring non-numeric properties.\n    while (length--) {\n      if (!eq(a[length], b[length], depth - 1, aStack, bStack)) {\n        return false;\n      }\n    }\n  } else {\n    // Deep compare objects.\n    var keys = Object.keys(a);\n    var key;\n    length = keys.length;\n    // Ensure that both objects contain the same number of properties before comparing deep equality.\n    if (Object.keys(b).length !== length) {\n      return false;\n    }\n    while (length--) {\n      // Deep compare each member\n      key = keys[length];\n      if (!(hasProp(b, key) && eq(a[key], b[key], depth - 1, aStack, bStack))) {\n        return false;\n      }\n    }\n  }\n  // Remove the first object from the stack of traversed objects.\n  aStack.pop();\n  bStack.pop();\n  return true;\n}\nfunction unwrap(a) {\n  if (isObservableArray(a)) {\n    return a.slice();\n  }\n  if (isES6Map(a) || isObservableMap(a)) {\n    return Array.from(a.entries());\n  }\n  if (isES6Set(a) || isObservableSet(a)) {\n    return Array.from(a.entries());\n  }\n  return a;\n}\nfunction makeIterable(iterator) {\n  iterator[Symbol.iterator] = getSelf;\n  return iterator;\n}\nfunction getSelf() {\n  return this;\n}\nfunction isAnnotation(thing) {\n  return (\n    // Can be function\n    thing instanceof Object && typeof thing.annotationType_ === "string" && isFunction(thing.make_) && isFunction(thing.extend_)\n  );\n}\n\n/**\n * (c) Michel Weststrate 2015 - 2020\n * MIT Licensed\n *\n * Welcome to the mobx sources! To get a global overview of how MobX internally works,\n * this is a good place to start:\n * https://medium.com/@mweststrate/becoming-fully-reactive-an-in-depth-explanation-of-mobservable-55995262a254#.xvbh6qd74\n *\n * Source folders:\n * ===============\n *\n * - api/     Most of the public static methods exposed by the module can be found here.\n * - core/    Implementation of the MobX algorithm; atoms, derivations, reactions, dependency trees, optimizations. Cool stuff can be found here.\n * - types/   All the magic that is need to have observable objects, arrays and values is in this folder. Including the modifiers like `asFlat`.\n * - utils/   Utility stuff.\n *\n */\n["Symbol", "Map", "Set"].forEach(function (m) {\n  var g = getGlobal();\n  if (typeof g[m] === "undefined") {\n    die("MobX requires global \'" + m + "\' to be available or polyfilled");\n  }\n});\nif (typeof __MOBX_DEVTOOLS_GLOBAL_HOOK__ === "object") {\n  // See: https://github.com/andykog/mobx-devtools/\n  __MOBX_DEVTOOLS_GLOBAL_HOOK__.injectMobx({\n    spy: spy,\n    extras: {\n      getDebugName: getDebugName\n    },\n    $mobx: $mobx\n  });\n}\n\n;// CONCATENATED MODULE: ./node_modules/mobx-react-lite/es/utils/assertEnvironment.js\n\n\nif (!react.useState) {\n  throw new Error("mobx-react-lite requires React with Hooks support");\n}\nif (!makeObservable) {\n  throw new Error("mobx-react-lite@3 requires mobx at least version 6 to be available");\n}\n// EXTERNAL MODULE: ./node_modules/react-dom/index.js\nvar react_dom = __webpack_require__(9834);\nvar react_dom_namespaceObject = /*#__PURE__*/__webpack_require__.t(react_dom, 2);\n;// CONCATENATED MODULE: ./node_modules/mobx-react-lite/es/utils/reactBatchedUpdates.js\n\n;// CONCATENATED MODULE: ./node_modules/mobx-react-lite/es/utils/observerBatching.js\n\nfunction defaultNoopBatch(callback) {\n  callback();\n}\nfunction observerBatching(reactionScheduler) {\n  if (!reactionScheduler) {\n    reactionScheduler = defaultNoopBatch;\n    if (false) {}\n  }\n  configure({\n    reactionScheduler: reactionScheduler\n  });\n}\nvar isObserverBatched = function () {\n  if (false) {}\n  return true;\n};\n;// CONCATENATED MODULE: ./node_modules/mobx-react-lite/es/utils/printDebugValue.js\n\nfunction printDebugValue(v) {\n  return getDependencyTree(v);\n}\n;// CONCATENATED MODULE: ./node_modules/mobx-react-lite/es/staticRendering.js\nvar globalIsUsingStaticRendering = false;\nfunction staticRendering_enableStaticRendering(enable) {\n  globalIsUsingStaticRendering = enable;\n}\nfunction isUsingStaticRendering() {\n  return globalIsUsingStaticRendering;\n}\n;// CONCATENATED MODULE: ./node_modules/mobx-react-lite/es/utils/UniversalFinalizationRegistry.js\nvar REGISTRY_FINALIZE_AFTER = 10000;\nvar REGISTRY_SWEEP_INTERVAL = 10000;\nvar TimerBasedFinalizationRegistry = /** @class */function () {\n  function TimerBasedFinalizationRegistry(finalize) {\n    var _this = this;\n    Object.defineProperty(this, "finalize", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: finalize\n    });\n    Object.defineProperty(this, "registrations", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: new Map()\n    });\n    Object.defineProperty(this, "sweepTimeout", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    // Bound so it can be used directly as setTimeout callback.\n    Object.defineProperty(this, "sweep", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: function (maxAge) {\n        if (maxAge === void 0) {\n          maxAge = REGISTRY_FINALIZE_AFTER;\n        }\n        // cancel timeout so we can force sweep anytime\n        clearTimeout(_this.sweepTimeout);\n        _this.sweepTimeout = undefined;\n        var now = Date.now();\n        _this.registrations.forEach(function (registration, token) {\n          if (now - registration.registeredAt >= maxAge) {\n            _this.finalize(registration.value);\n            _this.registrations.delete(token);\n          }\n        });\n        if (_this.registrations.size > 0) {\n          _this.scheduleSweep();\n        }\n      }\n    });\n    // Bound so it can be exported directly as clearTimers test utility.\n    Object.defineProperty(this, "finalizeAllImmediately", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: function () {\n        _this.sweep(0);\n      }\n    });\n  }\n  // Token is actually required with this impl\n  Object.defineProperty(TimerBasedFinalizationRegistry.prototype, "register", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (target, value, token) {\n      this.registrations.set(token, {\n        value: value,\n        registeredAt: Date.now()\n      });\n      this.scheduleSweep();\n    }\n  });\n  Object.defineProperty(TimerBasedFinalizationRegistry.prototype, "unregister", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (token) {\n      this.registrations.delete(token);\n    }\n  });\n  Object.defineProperty(TimerBasedFinalizationRegistry.prototype, "scheduleSweep", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      if (this.sweepTimeout === undefined) {\n        this.sweepTimeout = setTimeout(this.sweep, REGISTRY_SWEEP_INTERVAL);\n      }\n    }\n  });\n  return TimerBasedFinalizationRegistry;\n}();\n\nvar UniversalFinalizationRegistry = typeof FinalizationRegistry !== "undefined" ? FinalizationRegistry : TimerBasedFinalizationRegistry;\n;// CONCATENATED MODULE: ./node_modules/mobx-react-lite/es/utils/observerFinalizationRegistry.js\n\nvar observerFinalizationRegistry = new UniversalFinalizationRegistry(function (adm) {\n  var _a;\n  (_a = adm.reaction) === null || _a === void 0 ? void 0 : _a.dispose();\n  adm.reaction = null;\n});\n// EXTERNAL MODULE: ./node_modules/use-sync-external-store/shim/index.js\nvar shim = __webpack_require__(1673);\n;// CONCATENATED MODULE: ./node_modules/mobx-react-lite/es/useObserver.js\n\n\n\n\n\n\nfunction createReaction(adm) {\n  adm.reaction = new Reaction("observer".concat(adm.name), function () {\n    var _a;\n    adm.stateVersion = Symbol();\n    // onStoreChange won\'t be available until the component "mounts".\n    // If state changes in between initial render and mount,\n    // `useSyncExternalStore` should handle that by checking the state version and issuing update.\n    (_a = adm.onStoreChange) === null || _a === void 0 ? void 0 : _a.call(adm);\n  });\n}\nfunction useObserver(render, baseComponentName) {\n  if (baseComponentName === void 0) {\n    baseComponentName = "observed";\n  }\n  if (isUsingStaticRendering()) {\n    return render();\n  }\n  var admRef = react.useRef(null);\n  if (!admRef.current) {\n    // First render\n    var adm_1 = {\n      reaction: null,\n      onStoreChange: null,\n      stateVersion: Symbol(),\n      name: baseComponentName,\n      subscribe: function (onStoreChange) {\n        // Do NOT access admRef here!\n        observerFinalizationRegistry.unregister(adm_1);\n        adm_1.onStoreChange = onStoreChange;\n        if (!adm_1.reaction) {\n          // We\'ve lost our reaction and therefore all subscriptions, occurs when:\n          // 1. Timer based finalization registry disposed reaction before component mounted.\n          // 2. React "re-mounts" same component without calling render in between (typically <StrictMode>).\n          // We have to recreate reaction and schedule re-render to recreate subscriptions,\n          // even if state did not change.\n          createReaction(adm_1);\n          // `onStoreChange` won\'t force update if subsequent `getSnapshot` returns same value.\n          // So we make sure that is not the case\n          adm_1.stateVersion = Symbol();\n        }\n        return function () {\n          var _a;\n          // Do NOT access admRef here!\n          adm_1.onStoreChange = null;\n          (_a = adm_1.reaction) === null || _a === void 0 ? void 0 : _a.dispose();\n          adm_1.reaction = null;\n        };\n      },\n      getSnapshot: function () {\n        // Do NOT access admRef here!\n        return adm_1.stateVersion;\n      }\n    };\n    admRef.current = adm_1;\n  }\n  var adm = admRef.current;\n  if (!adm.reaction) {\n    // First render or reaction was disposed by registry before subscribe\n    createReaction(adm);\n    // StrictMode/ConcurrentMode/Suspense may mean that our component is\n    // rendered and abandoned multiple times, so we need to track leaked\n    // Reactions.\n    observerFinalizationRegistry.register(admRef, adm, adm);\n  }\n  react.useDebugValue(adm.reaction, printDebugValue);\n  (0,shim.useSyncExternalStore)(\n  // Both of these must be stable, otherwise it would keep resubscribing every render.\n  adm.subscribe, adm.getSnapshot, adm.getSnapshot);\n  // render the original component, but have the\n  // reaction track the observables, so that rendering\n  // can be invalidated (see above) once a dependency changes\n  var renderResult;\n  var exception;\n  adm.reaction.track(function () {\n    try {\n      renderResult = render();\n    } catch (e) {\n      exception = e;\n    }\n  });\n  if (exception) {\n    throw exception; // re-throw any exceptions caught during rendering\n  }\n  return renderResult;\n}\n;// CONCATENATED MODULE: ./node_modules/mobx-react-lite/es/observer.js\nvar _a, _b;\n\n\n\nvar warnObserverOptionsDeprecated = true;\nvar hasSymbol = typeof Symbol === "function" && Symbol.for;\nvar observer_isFunctionNameConfigurable = (_b = (_a = Object.getOwnPropertyDescriptor(function () {}, "name")) === null || _a === void 0 ? void 0 : _a.configurable) !== null && _b !== void 0 ? _b : false;\n// Using react-is had some issues (and operates on elements, not on types), see #608 / #609\nvar ReactForwardRefSymbol = hasSymbol ? Symbol.for("react.forward_ref") : typeof react.forwardRef === "function" && /*#__PURE__*/(0,react.forwardRef)(function (props) {\n  return null;\n})["$$typeof"];\nvar ReactMemoSymbol = hasSymbol ? Symbol.for("react.memo") : typeof react.memo === "function" && /*#__PURE__*/(0,react.memo)(function (props) {\n  return null;\n})["$$typeof"];\n// n.b. base case is not used for actual typings or exported in the typing files\nfunction observer(baseComponent,\n// TODO remove in next major\noptions) {\n  var _a;\n  if (false) {}\n  if (ReactMemoSymbol && baseComponent["$$typeof"] === ReactMemoSymbol) {\n    throw new Error("[mobx-react-lite] You are trying to use `observer` on a function component wrapped in either another `observer` or `React.memo`. The observer already applies \'React.memo\' for you.");\n  }\n  // The working of observer is explained step by step in this talk: https://www.youtube.com/watch?v=cPF4iBedoF0&feature=youtu.be&t=1307\n  if (isUsingStaticRendering()) {\n    return baseComponent;\n  }\n  var useForwardRef = (_a = options === null || options === void 0 ? void 0 : options.forwardRef) !== null && _a !== void 0 ? _a : false;\n  var render = baseComponent;\n  var baseComponentName = baseComponent.displayName || baseComponent.name;\n  // If already wrapped with forwardRef, unwrap,\n  // so we can patch render and apply memo\n  if (ReactForwardRefSymbol && baseComponent["$$typeof"] === ReactForwardRefSymbol) {\n    useForwardRef = true;\n    render = baseComponent["render"];\n    if (typeof render !== "function") {\n      throw new Error("[mobx-react-lite] `render` property of ForwardRef was not a function");\n    }\n  }\n  var observerComponent = function (props, ref) {\n    return useObserver(function () {\n      return render(props, ref);\n    }, baseComponentName);\n  };\n  observerComponent.displayName = baseComponent.displayName;\n  if (observer_isFunctionNameConfigurable) {\n    Object.defineProperty(observerComponent, "name", {\n      value: baseComponent.name,\n      writable: true,\n      configurable: true\n    });\n  }\n  // Support legacy context: `contextTypes` must be applied before `memo`\n  if (baseComponent.contextTypes) {\n    ;\n    observerComponent.contextTypes = baseComponent.contextTypes;\n  }\n  if (useForwardRef) {\n    // `forwardRef` must be applied prior `memo`\n    // `forwardRef(observer(cmp))` throws:\n    // "forwardRef requires a render function but received a `memo` component. Instead of forwardRef(memo(...)), use memo(forwardRef(...))"\n    observerComponent = /*#__PURE__*/(0,react.forwardRef)(observerComponent);\n  }\n  // memo; we are not interested in deep updates\n  // in props; we assume that if deep objects are changed,\n  // this is in observables, which would have been tracked anyway\n  observerComponent = /*#__PURE__*/(0,react.memo)(observerComponent);\n  copyStaticProperties(baseComponent, observerComponent);\n  if (false) {}\n  return observerComponent;\n}\n// based on https://github.com/mridgway/hoist-non-react-statics/blob/master/src/index.js\nvar hoistBlackList = {\n  $$typeof: true,\n  render: true,\n  compare: true,\n  type: true,\n  // Don\'t redefine `displayName`,\n  // it\'s defined as getter-setter pair on `memo` (see #3192).\n  displayName: true\n};\nfunction copyStaticProperties(base, target) {\n  Object.keys(base).forEach(function (key) {\n    if (!hoistBlackList[key]) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(base, key));\n    }\n  });\n}\n;// CONCATENATED MODULE: ./node_modules/mobx-react-lite/es/ObserverComponent.js\n\nfunction ObserverComponent(_a) {\n  var children = _a.children,\n    render = _a.render;\n  var component = children || render;\n  if (typeof component !== "function") {\n    return null;\n  }\n  return useObserver(component);\n}\nif (false) {}\nObserverComponent.displayName = "Observer";\n\nfunction ObserverPropsCheck(props, key, componentName, location, propFullName) {\n  var extraKey = key === "children" ? "render" : "children";\n  var hasProp = typeof props[key] === "function";\n  var hasExtraProp = typeof props[extraKey] === "function";\n  if (hasProp && hasExtraProp) {\n    return new Error("MobX Observer: Do not use children and render in the same time in`" + componentName);\n  }\n  if (hasProp || hasExtraProp) {\n    return null;\n  }\n  return new Error("Invalid prop `" + propFullName + "` of type `" + typeof props[key] + "` supplied to" + " `" + componentName + "`, expected `function`.");\n}\n;// CONCATENATED MODULE: ./node_modules/mobx-react-lite/es/useLocalObservable.js\n\n\nfunction useLocalObservable(initializer, annotations) {\n  return useState(function () {\n    return observable(initializer(), annotations, {\n      autoBind: true\n    });\n  })[0];\n}\n;// CONCATENATED MODULE: ./node_modules/mobx-react-lite/es/useAsObservableSource.js\n\n\n\nfunction useAsObservableSource_useAsObservableSource(current) {\n  if (false) {}\n  // We\'re deliberately not using idiomatic destructuring for the hook here.\n  // Accessing the state value as an array element prevents TypeScript from generating unnecessary helpers in the resulting code.\n  // For further details, please refer to mobxjs/mobx#3842.\n  var res = useState(function () {\n    return observable(current, {}, {\n      deep: false\n    });\n  })[0];\n  runInAction(function () {\n    Object.assign(res, current);\n  });\n  return res;\n}\n;// CONCATENATED MODULE: ./node_modules/mobx-react-lite/es/useLocalStore.js\n\n\n\n\nfunction useLocalStore(initializer, current) {\n  if (false) {}\n  var source = current && useAsObservableSource(current);\n  return useState(function () {\n    return observable(initializer(source), undefined, {\n      autoBind: true\n    });\n  })[0];\n}\n;// CONCATENATED MODULE: ./node_modules/mobx-react-lite/es/index.js\nvar es_a;\n\n\n\n\n\n\n\nobserverBatching(react_dom.unstable_batchedUpdates);\n\n\n\n\n\n\n\nvar clearTimers = (es_a = observerFinalizationRegistry["finalizeAllImmediately"]) !== null && es_a !== void 0 ? es_a : function () {};\nfunction es_useObserver(fn, baseComponentName) {\n  if (baseComponentName === void 0) {\n    baseComponentName = "observed";\n  }\n  if (false) {}\n  return useObserverOriginal(fn, baseComponentName);\n}\n\nfunction useStaticRendering(enable) {\n  if (false) {}\n  enableStaticRendering(enable);\n}\n// EXTERNAL MODULE: ./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\nvar injectStylesIntoStyleTag = __webpack_require__(5072);\nvar injectStylesIntoStyleTag_default = /*#__PURE__*/__webpack_require__.n(injectStylesIntoStyleTag);\n// EXTERNAL MODULE: ./node_modules/style-loader/dist/runtime/styleDomAPI.js\nvar styleDomAPI = __webpack_require__(7825);\nvar styleDomAPI_default = /*#__PURE__*/__webpack_require__.n(styleDomAPI);\n// EXTERNAL MODULE: ./node_modules/style-loader/dist/runtime/insertBySelector.js\nvar insertBySelector = __webpack_require__(7659);\nvar insertBySelector_default = /*#__PURE__*/__webpack_require__.n(insertBySelector);\n// EXTERNAL MODULE: ./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js\nvar setAttributesWithoutAttributes = __webpack_require__(5056);\nvar setAttributesWithoutAttributes_default = /*#__PURE__*/__webpack_require__.n(setAttributesWithoutAttributes);\n// EXTERNAL MODULE: ./node_modules/style-loader/dist/runtime/insertStyleElement.js\nvar insertStyleElement = __webpack_require__(540);\nvar insertStyleElement_default = /*#__PURE__*/__webpack_require__.n(insertStyleElement);\n// EXTERNAL MODULE: ./node_modules/style-loader/dist/runtime/styleTagTransform.js\nvar styleTagTransform = __webpack_require__(1113);\nvar styleTagTransform_default = /*#__PURE__*/__webpack_require__.n(styleTagTransform);\n// EXTERNAL MODULE: ./node_modules/css-loader/dist/cjs.js!./node_modules/postcss-loader/dist/cjs.js??ruleSet[1].rules[1].use[2]!./node_modules/sass-loader/dist/cjs.js!./src/styles/styles.scss\nvar styles = __webpack_require__(1592);\n;// CONCATENATED MODULE: ./src/styles/styles.scss\n\n      \n      \n      \n      \n      \n      \n      \n      \n      \n\nvar options = {};\n\noptions.styleTagTransform = (styleTagTransform_default());\noptions.setAttributes = (setAttributesWithoutAttributes_default());\noptions.insert = insertBySelector_default().bind(null, "head");\noptions.domAPI = (styleDomAPI_default());\noptions.insertStyleElement = (insertStyleElement_default());\n\nvar update = injectStylesIntoStyleTag_default()(styles/* default */.A, options);\n\n\n\n\n       /* harmony default export */ const styles_styles = (styles/* default */.A && styles/* default */.A.locals ? styles/* default */.A.locals : undefined);\n\n;// CONCATENATED MODULE: ./node_modules/@remix-run/router/dist/router.js\n/**\n * @remix-run/router v1.15.3\n *\n * Copyright (c) Remix Software Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.md file in the root directory of this source tree.\n *\n * @license MIT\n */\nfunction router_extends() {\n  router_extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return router_extends.apply(this, arguments);\n}\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n/**\n * Actions represent the type of change to a location value.\n */\nvar Action;\n(function (Action) {\n  /**\n   * A POP indicates a change to an arbitrary index in the history stack, such\n   * as a back or forward navigation. It does not describe the direction of the\n   * navigation, only that the current index changed.\n   *\n   * Note: This is the default action for newly created history objects.\n   */\n  Action["Pop"] = "POP";\n  /**\n   * A PUSH indicates a new entry being added to the history stack, such as when\n   * a link is clicked and a new page loads. When this happens, all subsequent\n   * entries in the stack are lost.\n   */\n  Action["Push"] = "PUSH";\n  /**\n   * A REPLACE indicates the entry at the current index in the history stack\n   * being replaced by a new one.\n   */\n  Action["Replace"] = "REPLACE";\n})(Action || (Action = {}));\nconst PopStateEventType = "popstate";\n/**\n * Memory history stores the current location in memory. It is designed for use\n * in stateful non-browser environments like tests and React Native.\n */\nfunction router_createMemoryHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n  let {\n    initialEntries = ["/"],\n    initialIndex,\n    v5Compat = false\n  } = options;\n  let entries; // Declare so we can access from createMemoryLocation\n  entries = initialEntries.map((entry, index) => createMemoryLocation(entry, typeof entry === "string" ? null : entry.state, index === 0 ? "default" : undefined));\n  let index = clampIndex(initialIndex == null ? entries.length - 1 : initialIndex);\n  let action = Action.Pop;\n  let listener = null;\n  function clampIndex(n) {\n    return Math.min(Math.max(n, 0), entries.length - 1);\n  }\n  function getCurrentLocation() {\n    return entries[index];\n  }\n  function createMemoryLocation(to, state, key) {\n    if (state === void 0) {\n      state = null;\n    }\n    let location = createLocation(entries ? getCurrentLocation().pathname : "/", to, state, key);\n    warning(location.pathname.charAt(0) === "/", "relative pathnames are not supported in memory history: " + JSON.stringify(to));\n    return location;\n  }\n  function createHref(to) {\n    return typeof to === "string" ? to : router_createPath(to);\n  }\n  let history = {\n    get index() {\n      return index;\n    },\n    get action() {\n      return action;\n    },\n    get location() {\n      return getCurrentLocation();\n    },\n    createHref,\n    createURL(to) {\n      return new URL(createHref(to), "http://localhost");\n    },\n    encodeLocation(to) {\n      let path = typeof to === "string" ? parsePath(to) : to;\n      return {\n        pathname: path.pathname || "",\n        search: path.search || "",\n        hash: path.hash || ""\n      };\n    },\n    push(to, state) {\n      action = Action.Push;\n      let nextLocation = createMemoryLocation(to, state);\n      index += 1;\n      entries.splice(index, entries.length, nextLocation);\n      if (v5Compat && listener) {\n        listener({\n          action,\n          location: nextLocation,\n          delta: 1\n        });\n      }\n    },\n    replace(to, state) {\n      action = Action.Replace;\n      let nextLocation = createMemoryLocation(to, state);\n      entries[index] = nextLocation;\n      if (v5Compat && listener) {\n        listener({\n          action,\n          location: nextLocation,\n          delta: 0\n        });\n      }\n    },\n    go(delta) {\n      action = Action.Pop;\n      let nextIndex = clampIndex(index + delta);\n      let nextLocation = entries[nextIndex];\n      index = nextIndex;\n      if (listener) {\n        listener({\n          action,\n          location: nextLocation,\n          delta\n        });\n      }\n    },\n    listen(fn) {\n      listener = fn;\n      return () => {\n        listener = null;\n      };\n    }\n  };\n  return history;\n}\n/**\n * Browser history stores the location in regular URLs. This is the standard for\n * most web apps, but it requires some configuration on the server to ensure you\n * serve the same app at multiple URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createbrowserhistory\n */\nfunction router_createBrowserHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n  function createBrowserLocation(window, globalHistory) {\n    let {\n      pathname,\n      search,\n      hash\n    } = window.location;\n    return createLocation("", {\n      pathname,\n      search,\n      hash\n    },\n    // state defaults to `null` because `window.history.state` does\n    globalHistory.state && globalHistory.state.usr || null, globalHistory.state && globalHistory.state.key || "default");\n  }\n  function createBrowserHref(window, to) {\n    return typeof to === "string" ? to : router_createPath(to);\n  }\n  return getUrlBasedHistory(createBrowserLocation, createBrowserHref, null, options);\n}\n/**\n * Hash history stores the location in window.location.hash. This makes it ideal\n * for situations where you don\'t want to send the location to the server for\n * some reason, either because you do cannot configure it or the URL space is\n * reserved for something else.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createhashhistory\n */\nfunction router_createHashHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n  function createHashLocation(window, globalHistory) {\n    let {\n      pathname = "/",\n      search = "",\n      hash = ""\n    } = parsePath(window.location.hash.substr(1));\n    // Hash URL should always have a leading / just like window.location.pathname\n    // does, so if an app ends up at a route like /#something then we add a\n    // leading slash so all of our path-matching behaves the same as if it would\n    // in a browser router.  This is particularly important when there exists a\n    // root splat route (<Route path="*">) since that matches internally against\n    // "/*" and we\'d expect /#something to 404 in a hash router app.\n    if (!pathname.startsWith("/") && !pathname.startsWith(".")) {\n      pathname = "/" + pathname;\n    }\n    return createLocation("", {\n      pathname,\n      search,\n      hash\n    },\n    // state defaults to `null` because `window.history.state` does\n    globalHistory.state && globalHistory.state.usr || null, globalHistory.state && globalHistory.state.key || "default");\n  }\n  function createHashHref(window, to) {\n    let base = window.document.querySelector("base");\n    let href = "";\n    if (base && base.getAttribute("href")) {\n      let url = window.location.href;\n      let hashIndex = url.indexOf("#");\n      href = hashIndex === -1 ? url : url.slice(0, hashIndex);\n    }\n    return href + "#" + (typeof to === "string" ? to : router_createPath(to));\n  }\n  function validateHashLocation(location, to) {\n    warning(location.pathname.charAt(0) === "/", "relative pathnames are not supported in hash history.push(" + JSON.stringify(to) + ")");\n  }\n  return getUrlBasedHistory(createHashLocation, createHashHref, validateHashLocation, options);\n}\nfunction invariant(value, message) {\n  if (value === false || value === null || typeof value === "undefined") {\n    throw new Error(message);\n  }\n}\nfunction warning(cond, message) {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== "undefined") console.warn(message);\n    try {\n      // Welcome to debugging history!\n      //\n      // This error is thrown as a convenience, so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling "pause on exceptions" in your JavaScript debugger.\n      throw new Error(message);\n      // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\nfunction createKey() {\n  return Math.random().toString(36).substr(2, 8);\n}\n/**\n * For browser-based histories, we combine the state and key into an object\n */\nfunction getHistoryState(location, index) {\n  return {\n    usr: location.state,\n    key: location.key,\n    idx: index\n  };\n}\n/**\n * Creates a Location object with a unique key from the given Path\n */\nfunction createLocation(current, to, state, key) {\n  if (state === void 0) {\n    state = null;\n  }\n  let location = router_extends({\n    pathname: typeof current === "string" ? current : current.pathname,\n    search: "",\n    hash: ""\n  }, typeof to === "string" ? parsePath(to) : to, {\n    state,\n    // TODO: This could be cleaned up.  push/replace should probably just take\n    // full Locations now and avoid the need to run through this flow at all\n    // But that\'s a pretty big refactor to the current test suite so going to\n    // keep as is for the time being and just let any incoming keys take precedence\n    key: to && to.key || key || createKey()\n  });\n  return location;\n}\n/**\n * Creates a string URL path from the given pathname, search, and hash components.\n */\nfunction router_createPath(_ref) {\n  let {\n    pathname = "/",\n    search = "",\n    hash = ""\n  } = _ref;\n  if (search && search !== "?") pathname += search.charAt(0) === "?" ? search : "?" + search;\n  if (hash && hash !== "#") pathname += hash.charAt(0) === "#" ? hash : "#" + hash;\n  return pathname;\n}\n/**\n * Parses a string URL path into its separate pathname, search, and hash components.\n */\nfunction parsePath(path) {\n  let parsedPath = {};\n  if (path) {\n    let hashIndex = path.indexOf("#");\n    if (hashIndex >= 0) {\n      parsedPath.hash = path.substr(hashIndex);\n      path = path.substr(0, hashIndex);\n    }\n    let searchIndex = path.indexOf("?");\n    if (searchIndex >= 0) {\n      parsedPath.search = path.substr(searchIndex);\n      path = path.substr(0, searchIndex);\n    }\n    if (path) {\n      parsedPath.pathname = path;\n    }\n  }\n  return parsedPath;\n}\nfunction getUrlBasedHistory(getLocation, createHref, validateLocation, options) {\n  if (options === void 0) {\n    options = {};\n  }\n  let {\n    window = document.defaultView,\n    v5Compat = false\n  } = options;\n  let globalHistory = window.history;\n  let action = Action.Pop;\n  let listener = null;\n  let index = getIndex();\n  // Index should only be null when we initialize. If not, it\'s because the\n  // user called history.pushState or history.replaceState directly, in which\n  // case we should log a warning as it will result in bugs.\n  if (index == null) {\n    index = 0;\n    globalHistory.replaceState(router_extends({}, globalHistory.state, {\n      idx: index\n    }), "");\n  }\n  function getIndex() {\n    let state = globalHistory.state || {\n      idx: null\n    };\n    return state.idx;\n  }\n  function handlePop() {\n    action = Action.Pop;\n    let nextIndex = getIndex();\n    let delta = nextIndex == null ? null : nextIndex - index;\n    index = nextIndex;\n    if (listener) {\n      listener({\n        action,\n        location: history.location,\n        delta\n      });\n    }\n  }\n  function push(to, state) {\n    action = Action.Push;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n    index = getIndex() + 1;\n    let historyState = getHistoryState(location, index);\n    let url = history.createHref(location);\n    // try...catch because iOS limits us to 100 pushState calls :/\n    try {\n      globalHistory.pushState(historyState, "", url);\n    } catch (error) {\n      // If the exception is because `state` can\'t be serialized, let that throw\n      // outwards just like a replace call would so the dev knows the cause\n      // https://html.spec.whatwg.org/multipage/nav-history-apis.html#shared-history-push/replace-state-steps\n      // https://html.spec.whatwg.org/multipage/structured-data.html#structuredserializeinternal\n      if (error instanceof DOMException && error.name === "DataCloneError") {\n        throw error;\n      }\n      // They are going to lose state here, but there is no real\n      // way to warn them about it since the page will refresh...\n      window.location.assign(url);\n    }\n    if (v5Compat && listener) {\n      listener({\n        action,\n        location: history.location,\n        delta: 1\n      });\n    }\n  }\n  function replace(to, state) {\n    action = Action.Replace;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n    index = getIndex();\n    let historyState = getHistoryState(location, index);\n    let url = history.createHref(location);\n    globalHistory.replaceState(historyState, "", url);\n    if (v5Compat && listener) {\n      listener({\n        action,\n        location: history.location,\n        delta: 0\n      });\n    }\n  }\n  function createURL(to) {\n    // window.location.origin is "null" (the literal string value) in Firefox\n    // under certain conditions, notably when serving from a local HTML file\n    // See https://bugzilla.mozilla.org/show_bug.cgi?id=878297\n    let base = window.location.origin !== "null" ? window.location.origin : window.location.href;\n    let href = typeof to === "string" ? to : router_createPath(to);\n    // Treating this as a full URL will strip any trailing spaces so we need to\n    // pre-encode them since they might be part of a matching splat param from\n    // an ancestor route\n    href = href.replace(/ $/, "%20");\n    invariant(base, "No window.location.(origin|href) available to create URL for href: " + href);\n    return new URL(href, base);\n  }\n  let history = {\n    get action() {\n      return action;\n    },\n    get location() {\n      return getLocation(window, globalHistory);\n    },\n    listen(fn) {\n      if (listener) {\n        throw new Error("A history only accepts one active listener");\n      }\n      window.addEventListener(PopStateEventType, handlePop);\n      listener = fn;\n      return () => {\n        window.removeEventListener(PopStateEventType, handlePop);\n        listener = null;\n      };\n    },\n    createHref(to) {\n      return createHref(window, to);\n    },\n    createURL,\n    encodeLocation(to) {\n      // Encode a Location the same way window.location would\n      let url = createURL(to);\n      return {\n        pathname: url.pathname,\n        search: url.search,\n        hash: url.hash\n      };\n    },\n    push,\n    replace,\n    go(n) {\n      return globalHistory.go(n);\n    }\n  };\n  return history;\n}\n//#endregion\n\nvar ResultType;\n(function (ResultType) {\n  ResultType["data"] = "data";\n  ResultType["deferred"] = "deferred";\n  ResultType["redirect"] = "redirect";\n  ResultType["error"] = "error";\n})(ResultType || (ResultType = {}));\nconst immutableRouteKeys = new Set(["lazy", "caseSensitive", "path", "id", "index", "children"]);\nfunction isIndexRoute(route) {\n  return route.index === true;\n}\n// Walk the route tree generating unique IDs where necessary, so we are working\n// solely with AgnosticDataRouteObject\'s within the Router\nfunction convertRoutesToDataRoutes(routes, mapRouteProperties, parentPath, manifest) {\n  if (parentPath === void 0) {\n    parentPath = [];\n  }\n  if (manifest === void 0) {\n    manifest = {};\n  }\n  return routes.map((route, index) => {\n    let treePath = [...parentPath, index];\n    let id = typeof route.id === "string" ? route.id : treePath.join("-");\n    invariant(route.index !== true || !route.children, "Cannot specify children on an index route");\n    invariant(!manifest[id], "Found a route id collision on id \\"" + id + "\\".  Route " + "id\'s must be globally unique within Data Router usages");\n    if (isIndexRoute(route)) {\n      let indexRoute = router_extends({}, route, mapRouteProperties(route), {\n        id\n      });\n      manifest[id] = indexRoute;\n      return indexRoute;\n    } else {\n      let pathOrLayoutRoute = router_extends({}, route, mapRouteProperties(route), {\n        id,\n        children: undefined\n      });\n      manifest[id] = pathOrLayoutRoute;\n      if (route.children) {\n        pathOrLayoutRoute.children = convertRoutesToDataRoutes(route.children, mapRouteProperties, treePath, manifest);\n      }\n      return pathOrLayoutRoute;\n    }\n  });\n}\n/**\n * Matches the given routes to a location and returns the match data.\n *\n * @see https://reactrouter.com/utils/match-routes\n */\nfunction matchRoutes(routes, locationArg, basename) {\n  if (basename === void 0) {\n    basename = "/";\n  }\n  let location = typeof locationArg === "string" ? parsePath(locationArg) : locationArg;\n  let pathname = router_stripBasename(location.pathname || "/", basename);\n  if (pathname == null) {\n    return null;\n  }\n  let branches = flattenRoutes(routes);\n  rankRouteBranches(branches);\n  let matches = null;\n  for (let i = 0; matches == null && i < branches.length; ++i) {\n    // Incoming pathnames are generally encoded from either window.location\n    // or from router.navigate, but we want to match against the unencoded\n    // paths in the route definitions.  Memory router locations won\'t be\n    // encoded here but there also shouldn\'t be anything to decode so this\n    // should be a safe operation.  This avoids needing matchRoutes to be\n    // history-aware.\n    let decoded = decodePath(pathname);\n    matches = matchRouteBranch(branches[i], decoded);\n  }\n  return matches;\n}\nfunction convertRouteMatchToUiMatch(match, loaderData) {\n  let {\n    route,\n    pathname,\n    params\n  } = match;\n  return {\n    id: route.id,\n    pathname,\n    params,\n    data: loaderData[route.id],\n    handle: route.handle\n  };\n}\nfunction flattenRoutes(routes, branches, parentsMeta, parentPath) {\n  if (branches === void 0) {\n    branches = [];\n  }\n  if (parentsMeta === void 0) {\n    parentsMeta = [];\n  }\n  if (parentPath === void 0) {\n    parentPath = "";\n  }\n  let flattenRoute = (route, index, relativePath) => {\n    let meta = {\n      relativePath: relativePath === undefined ? route.path || "" : relativePath,\n      caseSensitive: route.caseSensitive === true,\n      childrenIndex: index,\n      route\n    };\n    if (meta.relativePath.startsWith("/")) {\n      invariant(meta.relativePath.startsWith(parentPath), "Absolute route path \\"" + meta.relativePath + "\\" nested under path " + ("\\"" + parentPath + "\\" is not valid. An absolute child route path ") + "must start with the combined path of all its parent routes.");\n      meta.relativePath = meta.relativePath.slice(parentPath.length);\n    }\n    let path = router_joinPaths([parentPath, meta.relativePath]);\n    let routesMeta = parentsMeta.concat(meta);\n    // Add the children before adding this route to the array, so we traverse the\n    // route tree depth-first and child routes appear before their parents in\n    // the "flattened" version.\n    if (route.children && route.children.length > 0) {\n      invariant(\n      // Our types know better, but runtime JS may not!\n      // @ts-expect-error\n      route.index !== true, "Index routes must not have child routes. Please remove " + ("all child routes from route path \\"" + path + "\\"."));\n      flattenRoutes(route.children, branches, routesMeta, path);\n    }\n    // Routes without a path shouldn\'t ever match by themselves unless they are\n    // index routes, so don\'t add them to the list of possible branches.\n    if (route.path == null && !route.index) {\n      return;\n    }\n    branches.push({\n      path,\n      score: computeScore(path, route.index),\n      routesMeta\n    });\n  };\n  routes.forEach((route, index) => {\n    var _route$path;\n    // coarse-grain check for optional params\n    if (route.path === "" || !((_route$path = route.path) != null && _route$path.includes("?"))) {\n      flattenRoute(route, index);\n    } else {\n      for (let exploded of explodeOptionalSegments(route.path)) {\n        flattenRoute(route, index, exploded);\n      }\n    }\n  });\n  return branches;\n}\n/**\n * Computes all combinations of optional path segments for a given path,\n * excluding combinations that are ambiguous and of lower priority.\n *\n * For example, `/one/:two?/three/:four?/:five?` explodes to:\n * - `/one/three`\n * - `/one/:two/three`\n * - `/one/three/:four`\n * - `/one/three/:five`\n * - `/one/:two/three/:four`\n * - `/one/:two/three/:five`\n * - `/one/three/:four/:five`\n * - `/one/:two/three/:four/:five`\n */\nfunction explodeOptionalSegments(path) {\n  let segments = path.split("/");\n  if (segments.length === 0) return [];\n  let [first, ...rest] = segments;\n  // Optional path segments are denoted by a trailing `?`\n  let isOptional = first.endsWith("?");\n  // Compute the corresponding required segment: `foo?` -> `foo`\n  let required = first.replace(/\\?$/, "");\n  if (rest.length === 0) {\n    // Intepret empty string as omitting an optional segment\n    // `["one", "", "three"]` corresponds to omitting `:two` from `/one/:two?/three` -> `/one/three`\n    return isOptional ? [required, ""] : [required];\n  }\n  let restExploded = explodeOptionalSegments(rest.join("/"));\n  let result = [];\n  // All child paths with the prefix.  Do this for all children before the\n  // optional version for all children, so we get consistent ordering where the\n  // parent optional aspect is preferred as required.  Otherwise, we can get\n  // child sections interspersed where deeper optional segments are higher than\n  // parent optional segments, where for example, /:two would explode _earlier_\n  // then /:one.  By always including the parent as required _for all children_\n  // first, we avoid this issue\n  result.push(...restExploded.map(subpath => subpath === "" ? required : [required, subpath].join("/")));\n  // Then, if this is an optional value, add all child versions without\n  if (isOptional) {\n    result.push(...restExploded);\n  }\n  // for absolute paths, ensure `/` instead of empty segment\n  return result.map(exploded => path.startsWith("/") && exploded === "" ? "/" : exploded);\n}\nfunction rankRouteBranches(branches) {\n  branches.sort((a, b) => a.score !== b.score ? b.score - a.score // Higher score first\n  : compareIndexes(a.routesMeta.map(meta => meta.childrenIndex), b.routesMeta.map(meta => meta.childrenIndex)));\n}\nconst paramRe = /^:[\\w-]+$/;\nconst dynamicSegmentValue = 3;\nconst indexRouteValue = 2;\nconst emptySegmentValue = 1;\nconst staticSegmentValue = 10;\nconst splatPenalty = -2;\nconst isSplat = s => s === "*";\nfunction computeScore(path, index) {\n  let segments = path.split("/");\n  let initialScore = segments.length;\n  if (segments.some(isSplat)) {\n    initialScore += splatPenalty;\n  }\n  if (index) {\n    initialScore += indexRouteValue;\n  }\n  return segments.filter(s => !isSplat(s)).reduce((score, segment) => score + (paramRe.test(segment) ? dynamicSegmentValue : segment === "" ? emptySegmentValue : staticSegmentValue), initialScore);\n}\nfunction compareIndexes(a, b) {\n  let siblings = a.length === b.length && a.slice(0, -1).every((n, i) => n === b[i]);\n  return siblings ?\n  // If two routes are siblings, we should try to match the earlier sibling\n  // first. This allows people to have fine-grained control over the matching\n  // behavior by simply putting routes with identical paths in the order they\n  // want them tried.\n  a[a.length - 1] - b[b.length - 1] :\n  // Otherwise, it doesn\'t really make sense to rank non-siblings by index,\n  // so they sort equally.\n  0;\n}\nfunction matchRouteBranch(branch, pathname) {\n  let {\n    routesMeta\n  } = branch;\n  let matchedParams = {};\n  let matchedPathname = "/";\n  let matches = [];\n  for (let i = 0; i < routesMeta.length; ++i) {\n    let meta = routesMeta[i];\n    let end = i === routesMeta.length - 1;\n    let remainingPathname = matchedPathname === "/" ? pathname : pathname.slice(matchedPathname.length) || "/";\n    let match = router_matchPath({\n      path: meta.relativePath,\n      caseSensitive: meta.caseSensitive,\n      end\n    }, remainingPathname);\n    if (!match) return null;\n    Object.assign(matchedParams, match.params);\n    let route = meta.route;\n    matches.push({\n      // TODO: Can this as be avoided?\n      params: matchedParams,\n      pathname: router_joinPaths([matchedPathname, match.pathname]),\n      pathnameBase: normalizePathname(router_joinPaths([matchedPathname, match.pathnameBase])),\n      route\n    });\n    if (match.pathnameBase !== "/") {\n      matchedPathname = router_joinPaths([matchedPathname, match.pathnameBase]);\n    }\n  }\n  return matches;\n}\n/**\n * Returns a path with params interpolated.\n *\n * @see https://reactrouter.com/utils/generate-path\n */\nfunction generatePath(originalPath, params) {\n  if (params === void 0) {\n    params = {};\n  }\n  let path = originalPath;\n  if (path.endsWith("*") && path !== "*" && !path.endsWith("/*")) {\n    warning(false, "Route path \\"" + path + "\\" will be treated as if it were " + ("\\"" + path.replace(/\\*$/, "/*") + "\\" because the `*` character must ") + "always follow a `/` in the pattern. To get rid of this warning, " + ("please change the route path to \\"" + path.replace(/\\*$/, "/*") + "\\"."));\n    path = path.replace(/\\*$/, "/*");\n  }\n  // ensure `/` is added at the beginning if the path is absolute\n  const prefix = path.startsWith("/") ? "/" : "";\n  const stringify = p => p == null ? "" : typeof p === "string" ? p : String(p);\n  const segments = path.split(/\\/+/).map((segment, index, array) => {\n    const isLastSegment = index === array.length - 1;\n    // only apply the splat if it\'s the last segment\n    if (isLastSegment && segment === "*") {\n      const star = "*";\n      // Apply the splat\n      return stringify(params[star]);\n    }\n    const keyMatch = segment.match(/^:([\\w-]+)(\\??)$/);\n    if (keyMatch) {\n      const [, key, optional] = keyMatch;\n      let param = params[key];\n      invariant(optional === "?" || param != null, "Missing \\":" + key + "\\" param");\n      return stringify(param);\n    }\n    // Remove any optional markers from optional static segments\n    return segment.replace(/\\?$/g, "");\n  })\n  // Remove empty segments\n  .filter(segment => !!segment);\n  return prefix + segments.join("/");\n}\n/**\n * Performs pattern matching on a URL pathname and returns information about\n * the match.\n *\n * @see https://reactrouter.com/utils/match-path\n */\nfunction router_matchPath(pattern, pathname) {\n  if (typeof pattern === "string") {\n    pattern = {\n      path: pattern,\n      caseSensitive: false,\n      end: true\n    };\n  }\n  let [matcher, compiledParams] = compilePath(pattern.path, pattern.caseSensitive, pattern.end);\n  let match = pathname.match(matcher);\n  if (!match) return null;\n  let matchedPathname = match[0];\n  let pathnameBase = matchedPathname.replace(/(.)\\/+$/, "$1");\n  let captureGroups = match.slice(1);\n  let params = compiledParams.reduce((memo, _ref, index) => {\n    let {\n      paramName,\n      isOptional\n    } = _ref;\n    // We need to compute the pathnameBase here using the raw splat value\n    // instead of using params["*"] later because it will be decoded then\n    if (paramName === "*") {\n      let splatValue = captureGroups[index] || "";\n      pathnameBase = matchedPathname.slice(0, matchedPathname.length - splatValue.length).replace(/(.)\\/+$/, "$1");\n    }\n    const value = captureGroups[index];\n    if (isOptional && !value) {\n      memo[paramName] = undefined;\n    } else {\n      memo[paramName] = (value || "").replace(/%2F/g, "/");\n    }\n    return memo;\n  }, {});\n  return {\n    params,\n    pathname: matchedPathname,\n    pathnameBase,\n    pattern\n  };\n}\nfunction compilePath(path, caseSensitive, end) {\n  if (caseSensitive === void 0) {\n    caseSensitive = false;\n  }\n  if (end === void 0) {\n    end = true;\n  }\n  warning(path === "*" || !path.endsWith("*") || path.endsWith("/*"), "Route path \\"" + path + "\\" will be treated as if it were " + ("\\"" + path.replace(/\\*$/, "/*") + "\\" because the `*` character must ") + "always follow a `/` in the pattern. To get rid of this warning, " + ("please change the route path to \\"" + path.replace(/\\*$/, "/*") + "\\"."));\n  let params = [];\n  let regexpSource = "^" + path.replace(/\\/*\\*?$/, "") // Ignore trailing / and /*, we\'ll handle it below\n  .replace(/^\\/*/, "/") // Make sure it has a leading /\n  .replace(/[\\\\.*+^${}|()[\\]]/g, "\\\\$&") // Escape special regex chars\n  .replace(/\\/:([\\w-]+)(\\?)?/g, (_, paramName, isOptional) => {\n    params.push({\n      paramName,\n      isOptional: isOptional != null\n    });\n    return isOptional ? "/?([^\\\\/]+)?" : "/([^\\\\/]+)";\n  });\n  if (path.endsWith("*")) {\n    params.push({\n      paramName: "*"\n    });\n    regexpSource += path === "*" || path === "/*" ? "(.*)$" // Already matched the initial /, just match the rest\n    : "(?:\\\\/(.+)|\\\\/*)$"; // Don\'t include the / in params["*"]\n  } else if (end) {\n    // When matching to the end, ignore trailing slashes\n    regexpSource += "\\\\/*$";\n  } else if (path !== "" && path !== "/") {\n    // If our path is non-empty and contains anything beyond an initial slash,\n    // then we have _some_ form of path in our regex, so we should expect to\n    // match only if we find the end of this path segment.  Look for an optional\n    // non-captured trailing slash (to match a portion of the URL) or the end\n    // of the path (if we\'ve matched to the end).  We used to do this with a\n    // word boundary but that gives false positives on routes like\n    // /user-preferences since `-` counts as a word boundary.\n    regexpSource += "(?:(?=\\\\/|$))";\n  } else ;\n  let matcher = new RegExp(regexpSource, caseSensitive ? undefined : "i");\n  return [matcher, params];\n}\nfunction decodePath(value) {\n  try {\n    return value.split("/").map(v => decodeURIComponent(v).replace(/\\//g, "%2F")).join("/");\n  } catch (error) {\n    warning(false, "The URL path \\"" + value + "\\" could not be decoded because it is is a " + "malformed URL segment. This is probably due to a bad percent " + ("encoding (" + error + ")."));\n    return value;\n  }\n}\n/**\n * @private\n */\nfunction router_stripBasename(pathname, basename) {\n  if (basename === "/") return pathname;\n  if (!pathname.toLowerCase().startsWith(basename.toLowerCase())) {\n    return null;\n  }\n  // We want to leave trailing slash behavior in the user\'s control, so if they\n  // specify a basename with a trailing slash, we should support it\n  let startIndex = basename.endsWith("/") ? basename.length - 1 : basename.length;\n  let nextChar = pathname.charAt(startIndex);\n  if (nextChar && nextChar !== "/") {\n    // pathname does not start with basename/\n    return null;\n  }\n  return pathname.slice(startIndex) || "/";\n}\n/**\n * Returns a resolved path object relative to the given pathname.\n *\n * @see https://reactrouter.com/utils/resolve-path\n */\nfunction resolvePath(to, fromPathname) {\n  if (fromPathname === void 0) {\n    fromPathname = "/";\n  }\n  let {\n    pathname: toPathname,\n    search = "",\n    hash = ""\n  } = typeof to === "string" ? parsePath(to) : to;\n  let pathname = toPathname ? toPathname.startsWith("/") ? toPathname : resolvePathname(toPathname, fromPathname) : fromPathname;\n  return {\n    pathname,\n    search: normalizeSearch(search),\n    hash: normalizeHash(hash)\n  };\n}\nfunction resolvePathname(relativePath, fromPathname) {\n  let segments = fromPathname.replace(/\\/+$/, "").split("/");\n  let relativeSegments = relativePath.split("/");\n  relativeSegments.forEach(segment => {\n    if (segment === "..") {\n      // Keep the root "" segment so the pathname starts at /\n      if (segments.length > 1) segments.pop();\n    } else if (segment !== ".") {\n      segments.push(segment);\n    }\n  });\n  return segments.length > 1 ? segments.join("/") : "/";\n}\nfunction getInvalidPathError(char, field, dest, path) {\n  return "Cannot include a \'" + char + "\' character in a manually specified " + ("`to." + field + "` field [" + JSON.stringify(path) + "].  Please separate it out to the ") + ("`to." + dest + "` field. Alternatively you may provide the full path as ") + "a string in <Link to=\\"...\\"> and the router will parse it for you.";\n}\n/**\n * @private\n *\n * When processing relative navigation we want to ignore ancestor routes that\n * do not contribute to the path, such that index/pathless layout routes don\'t\n * interfere.\n *\n * For example, when moving a route element into an index route and/or a\n * pathless layout route, relative link behavior contained within should stay\n * the same.  Both of the following examples should link back to the root:\n *\n *   <Route path="/">\n *     <Route path="accounts" element={<Link to=".."}>\n *   </Route>\n *\n *   <Route path="/">\n *     <Route path="accounts">\n *       <Route element={<AccountsLayout />}>       // <-- Does not contribute\n *         <Route index element={<Link to=".."} />  // <-- Does not contribute\n *       </Route\n *     </Route>\n *   </Route>\n */\nfunction getPathContributingMatches(matches) {\n  return matches.filter((match, index) => index === 0 || match.route.path && match.route.path.length > 0);\n}\n// Return the array of pathnames for the current route matches - used to\n// generate the routePathnames input for resolveTo()\nfunction getResolveToMatches(matches, v7_relativeSplatPath) {\n  let pathMatches = getPathContributingMatches(matches);\n  // When v7_relativeSplatPath is enabled, use the full pathname for the leaf\n  // match so we include splat values for "." links.  See:\n  // https://github.com/remix-run/react-router/issues/11052#issuecomment-1836589329\n  if (v7_relativeSplatPath) {\n    return pathMatches.map((match, idx) => idx === matches.length - 1 ? match.pathname : match.pathnameBase);\n  }\n  return pathMatches.map(match => match.pathnameBase);\n}\n/**\n * @private\n */\nfunction router_resolveTo(toArg, routePathnames, locationPathname, isPathRelative) {\n  if (isPathRelative === void 0) {\n    isPathRelative = false;\n  }\n  let to;\n  if (typeof toArg === "string") {\n    to = parsePath(toArg);\n  } else {\n    to = router_extends({}, toArg);\n    invariant(!to.pathname || !to.pathname.includes("?"), getInvalidPathError("?", "pathname", "search", to));\n    invariant(!to.pathname || !to.pathname.includes("#"), getInvalidPathError("#", "pathname", "hash", to));\n    invariant(!to.search || !to.search.includes("#"), getInvalidPathError("#", "search", "hash", to));\n  }\n  let isEmptyPath = toArg === "" || to.pathname === "";\n  let toPathname = isEmptyPath ? "/" : to.pathname;\n  let from;\n  // Routing is relative to the current pathname if explicitly requested.\n  //\n  // If a pathname is explicitly provided in `to`, it should be relative to the\n  // route context. This is explained in `Note on `<Link to>` values` in our\n  // migration guide from v5 as a means of disambiguation between `to` values\n  // that begin with `/` and those that do not. However, this is problematic for\n  // `to` values that do not provide a pathname. `to` can simply be a search or\n  // hash string, in which case we should assume that the navigation is relative\n  // to the current location\'s pathname and *not* the route pathname.\n  if (toPathname == null) {\n    from = locationPathname;\n  } else {\n    let routePathnameIndex = routePathnames.length - 1;\n    // With relative="route" (the default), each leading .. segment means\n    // "go up one route" instead of "go up one URL segment".  This is a key\n    // difference from how <a href> works and a major reason we call this a\n    // "to" value instead of a "href".\n    if (!isPathRelative && toPathname.startsWith("..")) {\n      let toSegments = toPathname.split("/");\n      while (toSegments[0] === "..") {\n        toSegments.shift();\n        routePathnameIndex -= 1;\n      }\n      to.pathname = toSegments.join("/");\n    }\n    from = routePathnameIndex >= 0 ? routePathnames[routePathnameIndex] : "/";\n  }\n  let path = resolvePath(to, from);\n  // Ensure the pathname has a trailing slash if the original "to" had one\n  let hasExplicitTrailingSlash = toPathname && toPathname !== "/" && toPathname.endsWith("/");\n  // Or if this was a link to the current path which has a trailing slash\n  let hasCurrentTrailingSlash = (isEmptyPath || toPathname === ".") && locationPathname.endsWith("/");\n  if (!path.pathname.endsWith("/") && (hasExplicitTrailingSlash || hasCurrentTrailingSlash)) {\n    path.pathname += "/";\n  }\n  return path;\n}\n/**\n * @private\n */\nfunction getToPathname(to) {\n  // Empty strings should be treated the same as / paths\n  return to === "" || to.pathname === "" ? "/" : typeof to === "string" ? parsePath(to).pathname : to.pathname;\n}\n/**\n * @private\n */\nconst router_joinPaths = paths => paths.join("/").replace(/\\/\\/+/g, "/");\n/**\n * @private\n */\nconst normalizePathname = pathname => pathname.replace(/\\/+$/, "").replace(/^\\/*/, "/");\n/**\n * @private\n */\nconst normalizeSearch = search => !search || search === "?" ? "" : search.startsWith("?") ? search : "?" + search;\n/**\n * @private\n */\nconst normalizeHash = hash => !hash || hash === "#" ? "" : hash.startsWith("#") ? hash : "#" + hash;\n/**\n * This is a shortcut for creating `application/json` responses. Converts `data`\n * to JSON and sets the `Content-Type` header.\n */\nconst json = function json(data, init) {\n  if (init === void 0) {\n    init = {};\n  }\n  let responseInit = typeof init === "number" ? {\n    status: init\n  } : init;\n  let headers = new Headers(responseInit.headers);\n  if (!headers.has("Content-Type")) {\n    headers.set("Content-Type", "application/json; charset=utf-8");\n  }\n  return new Response(JSON.stringify(data), router_extends({}, responseInit, {\n    headers\n  }));\n};\nclass AbortedDeferredError extends Error {}\nclass DeferredData {\n  constructor(data, responseInit) {\n    this.pendingKeysSet = new Set();\n    this.subscribers = new Set();\n    this.deferredKeys = [];\n    invariant(data && typeof data === "object" && !Array.isArray(data), "defer() only accepts plain objects");\n    // Set up an AbortController + Promise we can race against to exit early\n    // cancellation\n    let reject;\n    this.abortPromise = new Promise((_, r) => reject = r);\n    this.controller = new AbortController();\n    let onAbort = () => reject(new AbortedDeferredError("Deferred data aborted"));\n    this.unlistenAbortSignal = () => this.controller.signal.removeEventListener("abort", onAbort);\n    this.controller.signal.addEventListener("abort", onAbort);\n    this.data = Object.entries(data).reduce((acc, _ref2) => {\n      let [key, value] = _ref2;\n      return Object.assign(acc, {\n        [key]: this.trackPromise(key, value)\n      });\n    }, {});\n    if (this.done) {\n      // All incoming values were resolved\n      this.unlistenAbortSignal();\n    }\n    this.init = responseInit;\n  }\n  trackPromise(key, value) {\n    if (!(value instanceof Promise)) {\n      return value;\n    }\n    this.deferredKeys.push(key);\n    this.pendingKeysSet.add(key);\n    // We store a little wrapper promise that will be extended with\n    // _data/_error props upon resolve/reject\n    let promise = Promise.race([value, this.abortPromise]).then(data => this.onSettle(promise, key, undefined, data), error => this.onSettle(promise, key, error));\n    // Register rejection listeners to avoid uncaught promise rejections on\n    // errors or aborted deferred values\n    promise.catch(() => {});\n    Object.defineProperty(promise, "_tracked", {\n      get: () => true\n    });\n    return promise;\n  }\n  onSettle(promise, key, error, data) {\n    if (this.controller.signal.aborted && error instanceof AbortedDeferredError) {\n      this.unlistenAbortSignal();\n      Object.defineProperty(promise, "_error", {\n        get: () => error\n      });\n      return Promise.reject(error);\n    }\n    this.pendingKeysSet.delete(key);\n    if (this.done) {\n      // Nothing left to abort!\n      this.unlistenAbortSignal();\n    }\n    // If the promise was resolved/rejected with undefined, we\'ll throw an error as you\n    // should always resolve with a value or null\n    if (error === undefined && data === undefined) {\n      let undefinedError = new Error("Deferred data for key \\"" + key + "\\" resolved/rejected with `undefined`, " + "you must resolve/reject with a value or `null`.");\n      Object.defineProperty(promise, "_error", {\n        get: () => undefinedError\n      });\n      this.emit(false, key);\n      return Promise.reject(undefinedError);\n    }\n    if (data === undefined) {\n      Object.defineProperty(promise, "_error", {\n        get: () => error\n      });\n      this.emit(false, key);\n      return Promise.reject(error);\n    }\n    Object.defineProperty(promise, "_data", {\n      get: () => data\n    });\n    this.emit(false, key);\n    return data;\n  }\n  emit(aborted, settledKey) {\n    this.subscribers.forEach(subscriber => subscriber(aborted, settledKey));\n  }\n  subscribe(fn) {\n    this.subscribers.add(fn);\n    return () => this.subscribers.delete(fn);\n  }\n  cancel() {\n    this.controller.abort();\n    this.pendingKeysSet.forEach((v, k) => this.pendingKeysSet.delete(k));\n    this.emit(true);\n  }\n  async resolveData(signal) {\n    let aborted = false;\n    if (!this.done) {\n      let onAbort = () => this.cancel();\n      signal.addEventListener("abort", onAbort);\n      aborted = await new Promise(resolve => {\n        this.subscribe(aborted => {\n          signal.removeEventListener("abort", onAbort);\n          if (aborted || this.done) {\n            resolve(aborted);\n          }\n        });\n      });\n    }\n    return aborted;\n  }\n  get done() {\n    return this.pendingKeysSet.size === 0;\n  }\n  get unwrappedData() {\n    invariant(this.data !== null && this.done, "Can only unwrap data on initialized and settled deferreds");\n    return Object.entries(this.data).reduce((acc, _ref3) => {\n      let [key, value] = _ref3;\n      return Object.assign(acc, {\n        [key]: unwrapTrackedPromise(value)\n      });\n    }, {});\n  }\n  get pendingKeys() {\n    return Array.from(this.pendingKeysSet);\n  }\n}\nfunction isTrackedPromise(value) {\n  return value instanceof Promise && value._tracked === true;\n}\nfunction unwrapTrackedPromise(value) {\n  if (!isTrackedPromise(value)) {\n    return value;\n  }\n  if (value._error) {\n    throw value._error;\n  }\n  return value._data;\n}\nconst defer = function defer(data, init) {\n  if (init === void 0) {\n    init = {};\n  }\n  let responseInit = typeof init === "number" ? {\n    status: init\n  } : init;\n  return new DeferredData(data, responseInit);\n};\n/**\n * A redirect response. Sets the status code and the `Location` header.\n * Defaults to "302 Found".\n */\nconst redirect = function redirect(url, init) {\n  if (init === void 0) {\n    init = 302;\n  }\n  let responseInit = init;\n  if (typeof responseInit === "number") {\n    responseInit = {\n      status: responseInit\n    };\n  } else if (typeof responseInit.status === "undefined") {\n    responseInit.status = 302;\n  }\n  let headers = new Headers(responseInit.headers);\n  headers.set("Location", url);\n  return new Response(null, router_extends({}, responseInit, {\n    headers\n  }));\n};\n/**\n * A redirect response that will force a document reload to the new location.\n * Sets the status code and the `Location` header.\n * Defaults to "302 Found".\n */\nconst redirectDocument = (url, init) => {\n  let response = redirect(url, init);\n  response.headers.set("X-Remix-Reload-Document", "true");\n  return response;\n};\n/**\n * @private\n * Utility class we use to hold auto-unwrapped 4xx/5xx Response bodies\n *\n * We don\'t export the class for public use since it\'s an implementation\n * detail, but we export the interface above so folks can build their own\n * abstractions around instances via isRouteErrorResponse()\n */\nclass ErrorResponseImpl {\n  constructor(status, statusText, data, internal) {\n    if (internal === void 0) {\n      internal = false;\n    }\n    this.status = status;\n    this.statusText = statusText || "";\n    this.internal = internal;\n    if (data instanceof Error) {\n      this.data = data.toString();\n      this.error = data;\n    } else {\n      this.data = data;\n    }\n  }\n}\n/**\n * Check if the given error is an ErrorResponse generated from a 4xx/5xx\n * Response thrown from an action/loader\n */\nfunction isRouteErrorResponse(error) {\n  return error != null && typeof error.status === "number" && typeof error.statusText === "string" && typeof error.internal === "boolean" && "data" in error;\n}\nconst validMutationMethodsArr = ["post", "put", "patch", "delete"];\nconst validMutationMethods = new Set(validMutationMethodsArr);\nconst validRequestMethodsArr = ["get", ...validMutationMethodsArr];\nconst validRequestMethods = new Set(validRequestMethodsArr);\nconst redirectStatusCodes = new Set([301, 302, 303, 307, 308]);\nconst redirectPreserveMethodStatusCodes = new Set([307, 308]);\nconst IDLE_NAVIGATION = {\n  state: "idle",\n  location: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined,\n  json: undefined,\n  text: undefined\n};\nconst router_IDLE_FETCHER = {\n  state: "idle",\n  data: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined,\n  json: undefined,\n  text: undefined\n};\nconst router_IDLE_BLOCKER = {\n  state: "unblocked",\n  proceed: undefined,\n  reset: undefined,\n  location: undefined\n};\nconst ABSOLUTE_URL_REGEX = /^(?:[a-z][a-z0-9+.-]*:|\\/\\/)/i;\nconst defaultMapRouteProperties = route => ({\n  hasErrorBoundary: Boolean(route.hasErrorBoundary)\n});\nconst TRANSITIONS_STORAGE_KEY = "remix-router-transitions";\n//#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region createRouter\n////////////////////////////////////////////////////////////////////////////////\n/**\n * Create a router and listen to history POP navigations\n */\nfunction router_createRouter(init) {\n  const routerWindow = init.window ? init.window : typeof window !== "undefined" ? window : undefined;\n  const isBrowser = typeof routerWindow !== "undefined" && typeof routerWindow.document !== "undefined" && typeof routerWindow.document.createElement !== "undefined";\n  const isServer = !isBrowser;\n  invariant(init.routes.length > 0, "You must provide a non-empty routes array to createRouter");\n  let mapRouteProperties;\n  if (init.mapRouteProperties) {\n    mapRouteProperties = init.mapRouteProperties;\n  } else if (init.detectErrorBoundary) {\n    // If they are still using the deprecated version, wrap it with the new API\n    let detectErrorBoundary = init.detectErrorBoundary;\n    mapRouteProperties = route => ({\n      hasErrorBoundary: detectErrorBoundary(route)\n    });\n  } else {\n    mapRouteProperties = defaultMapRouteProperties;\n  }\n  // Routes keyed by ID\n  let manifest = {};\n  // Routes in tree format for matching\n  let dataRoutes = convertRoutesToDataRoutes(init.routes, mapRouteProperties, undefined, manifest);\n  let inFlightDataRoutes;\n  let basename = init.basename || "/";\n  // Config driven behavior flags\n  let future = router_extends({\n    v7_fetcherPersist: false,\n    v7_normalizeFormMethod: false,\n    v7_partialHydration: false,\n    v7_prependBasename: false,\n    v7_relativeSplatPath: false\n  }, init.future);\n  // Cleanup function for history\n  let unlistenHistory = null;\n  // Externally-provided functions to call on all state changes\n  let subscribers = new Set();\n  // Externally-provided object to hold scroll restoration locations during routing\n  let savedScrollPositions = null;\n  // Externally-provided function to get scroll restoration keys\n  let getScrollRestorationKey = null;\n  // Externally-provided function to get current scroll position\n  let getScrollPosition = null;\n  // One-time flag to control the initial hydration scroll restoration.  Because\n  // we don\'t get the saved positions from <ScrollRestoration /> until _after_\n  // the initial render, we need to manually trigger a separate updateState to\n  // send along the restoreScrollPosition\n  // Set to true if we have `hydrationData` since we assume we were SSR\'d and that\n  // SSR did the initial scroll restoration.\n  let initialScrollRestored = init.hydrationData != null;\n  let initialMatches = matchRoutes(dataRoutes, init.history.location, basename);\n  let initialErrors = null;\n  if (initialMatches == null) {\n    // If we do not match a user-provided-route, fall back to the root\n    // to allow the error boundary to take over\n    let error = getInternalRouterError(404, {\n      pathname: init.history.location.pathname\n    });\n    let {\n      matches,\n      route\n    } = getShortCircuitMatches(dataRoutes);\n    initialMatches = matches;\n    initialErrors = {\n      [route.id]: error\n    };\n  }\n  let initialized;\n  let hasLazyRoutes = initialMatches.some(m => m.route.lazy);\n  let hasLoaders = initialMatches.some(m => m.route.loader);\n  if (hasLazyRoutes) {\n    // All initialMatches need to be loaded before we\'re ready.  If we have lazy\n    // functions around still then we\'ll need to run them in initialize()\n    initialized = false;\n  } else if (!hasLoaders) {\n    // If we\'ve got no loaders to run, then we\'re good to go\n    initialized = true;\n  } else if (future.v7_partialHydration) {\n    // If partial hydration is enabled, we\'re initialized so long as we were\n    // provided with hydrationData for every route with a loader, and no loaders\n    // were marked for explicit hydration\n    let loaderData = init.hydrationData ? init.hydrationData.loaderData : null;\n    let errors = init.hydrationData ? init.hydrationData.errors : null;\n    let isRouteInitialized = m => {\n      // No loader, nothing to initialize\n      if (!m.route.loader) return true;\n      // Explicitly opting-in to running on hydration\n      if (m.route.loader.hydrate === true) return false;\n      // Otherwise, initialized if hydrated with data or an error\n      return loaderData && loaderData[m.route.id] !== undefined || errors && errors[m.route.id] !== undefined;\n    };\n    // If errors exist, don\'t consider routes below the boundary\n    if (errors) {\n      let idx = initialMatches.findIndex(m => errors[m.route.id] !== undefined);\n      initialized = initialMatches.slice(0, idx + 1).every(isRouteInitialized);\n    } else {\n      initialized = initialMatches.every(isRouteInitialized);\n    }\n  } else {\n    // Without partial hydration - we\'re initialized if we were provided any\n    // hydrationData - which is expected to be complete\n    initialized = init.hydrationData != null;\n  }\n  let router;\n  let state = {\n    historyAction: init.history.action,\n    location: init.history.location,\n    matches: initialMatches,\n    initialized,\n    navigation: IDLE_NAVIGATION,\n    // Don\'t restore on initial updateState() if we were SSR\'d\n    restoreScrollPosition: init.hydrationData != null ? false : null,\n    preventScrollReset: false,\n    revalidation: "idle",\n    loaderData: init.hydrationData && init.hydrationData.loaderData || {},\n    actionData: init.hydrationData && init.hydrationData.actionData || null,\n    errors: init.hydrationData && init.hydrationData.errors || initialErrors,\n    fetchers: new Map(),\n    blockers: new Map()\n  };\n  // -- Stateful internal variables to manage navigations --\n  // Current navigation in progress (to be committed in completeNavigation)\n  let pendingAction = Action.Pop;\n  // Should the current navigation prevent the scroll reset if scroll cannot\n  // be restored?\n  let pendingPreventScrollReset = false;\n  // AbortController for the active navigation\n  let pendingNavigationController;\n  // Should the current navigation enable document.startViewTransition?\n  let pendingViewTransitionEnabled = false;\n  // Store applied view transitions so we can apply them on POP\n  let appliedViewTransitions = new Map();\n  // Cleanup function for persisting applied transitions to sessionStorage\n  let removePageHideEventListener = null;\n  // We use this to avoid touching history in completeNavigation if a\n  // revalidation is entirely uninterrupted\n  let isUninterruptedRevalidation = false;\n  // Use this internal flag to force revalidation of all loaders:\n  //  - submissions (completed or interrupted)\n  //  - useRevalidator()\n  //  - X-Remix-Revalidate (from redirect)\n  let isRevalidationRequired = false;\n  // Use this internal array to capture routes that require revalidation due\n  // to a cancelled deferred on action submission\n  let cancelledDeferredRoutes = [];\n  // Use this internal array to capture fetcher loads that were cancelled by an\n  // action navigation and require revalidation\n  let cancelledFetcherLoads = [];\n  // AbortControllers for any in-flight fetchers\n  let fetchControllers = new Map();\n  // Track loads based on the order in which they started\n  let incrementingLoadId = 0;\n  // Track the outstanding pending navigation data load to be compared against\n  // the globally incrementing load when a fetcher load lands after a completed\n  // navigation\n  let pendingNavigationLoadId = -1;\n  // Fetchers that triggered data reloads as a result of their actions\n  let fetchReloadIds = new Map();\n  // Fetchers that triggered redirect navigations\n  let fetchRedirectIds = new Set();\n  // Most recent href/match for fetcher.load calls for fetchers\n  let fetchLoadMatches = new Map();\n  // Ref-count mounted fetchers so we know when it\'s ok to clean them up\n  let activeFetchers = new Map();\n  // Fetchers that have requested a delete when using v7_fetcherPersist,\n  // they\'ll be officially removed after they return to idle\n  let deletedFetchers = new Set();\n  // Store DeferredData instances for active route matches.  When a\n  // route loader returns defer() we stick one in here.  Then, when a nested\n  // promise resolves we update loaderData.  If a new navigation starts we\n  // cancel active deferreds for eliminated routes.\n  let activeDeferreds = new Map();\n  // Store blocker functions in a separate Map outside of router state since\n  // we don\'t need to update UI state if they change\n  let blockerFunctions = new Map();\n  // Flag to ignore the next history update, so we can revert the URL change on\n  // a POP navigation that was blocked by the user without touching router state\n  let ignoreNextHistoryUpdate = false;\n  // Initialize the router, all side effects should be kicked off from here.\n  // Implemented as a Fluent API for ease of:\n  //   let router = createRouter(init).initialize();\n  function initialize() {\n    // If history informs us of a POP navigation, start the navigation but do not update\n    // state.  We\'ll update our own state once the navigation completes\n    unlistenHistory = init.history.listen(_ref => {\n      let {\n        action: historyAction,\n        location,\n        delta\n      } = _ref;\n      // Ignore this event if it was just us resetting the URL from a\n      // blocked POP navigation\n      if (ignoreNextHistoryUpdate) {\n        ignoreNextHistoryUpdate = false;\n        return;\n      }\n      warning(blockerFunctions.size === 0 || delta != null, "You are trying to use a blocker on a POP navigation to a location " + "that was not created by @remix-run/router. This will fail silently in " + "production. This can happen if you are navigating outside the router " + "via `window.history.pushState`/`window.location.hash` instead of using " + "router navigation APIs.  This can also happen if you are using " + "createHashRouter and the user manually changes the URL.");\n      let blockerKey = shouldBlockNavigation({\n        currentLocation: state.location,\n        nextLocation: location,\n        historyAction\n      });\n      if (blockerKey && delta != null) {\n        // Restore the URL to match the current UI, but don\'t update router state\n        ignoreNextHistoryUpdate = true;\n        init.history.go(delta * -1);\n        // Put the blocker into a blocked state\n        updateBlocker(blockerKey, {\n          state: "blocked",\n          location,\n          proceed() {\n            updateBlocker(blockerKey, {\n              state: "proceeding",\n              proceed: undefined,\n              reset: undefined,\n              location\n            });\n            // Re-do the same POP navigation we just blocked\n            init.history.go(delta);\n          },\n          reset() {\n            let blockers = new Map(state.blockers);\n            blockers.set(blockerKey, router_IDLE_BLOCKER);\n            updateState({\n              blockers\n            });\n          }\n        });\n        return;\n      }\n      return startNavigation(historyAction, location);\n    });\n    if (isBrowser) {\n      // FIXME: This feels gross.  How can we cleanup the lines between\n      // scrollRestoration/appliedTransitions persistance?\n      restoreAppliedTransitions(routerWindow, appliedViewTransitions);\n      let _saveAppliedTransitions = () => persistAppliedTransitions(routerWindow, appliedViewTransitions);\n      routerWindow.addEventListener("pagehide", _saveAppliedTransitions);\n      removePageHideEventListener = () => routerWindow.removeEventListener("pagehide", _saveAppliedTransitions);\n    }\n    // Kick off initial data load if needed.  Use Pop to avoid modifying history\n    // Note we don\'t do any handling of lazy here.  For SPA\'s it\'ll get handled\n    // in the normal navigation flow.  For SSR it\'s expected that lazy modules are\n    // resolved prior to router creation since we can\'t go into a fallbackElement\n    // UI for SSR\'d apps\n    if (!state.initialized) {\n      startNavigation(Action.Pop, state.location, {\n        initialHydration: true\n      });\n    }\n    return router;\n  }\n  // Clean up a router and it\'s side effects\n  function dispose() {\n    if (unlistenHistory) {\n      unlistenHistory();\n    }\n    if (removePageHideEventListener) {\n      removePageHideEventListener();\n    }\n    subscribers.clear();\n    pendingNavigationController && pendingNavigationController.abort();\n    state.fetchers.forEach((_, key) => deleteFetcher(key));\n    state.blockers.forEach((_, key) => deleteBlocker(key));\n  }\n  // Subscribe to state updates for the router\n  function subscribe(fn) {\n    subscribers.add(fn);\n    return () => subscribers.delete(fn);\n  }\n  // Update our state and notify the calling context of the change\n  function updateState(newState, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n    state = router_extends({}, state, newState);\n    // Prep fetcher cleanup so we can tell the UI which fetcher data entries\n    // can be removed\n    let completedFetchers = [];\n    let deletedFetchersKeys = [];\n    if (future.v7_fetcherPersist) {\n      state.fetchers.forEach((fetcher, key) => {\n        if (fetcher.state === "idle") {\n          if (deletedFetchers.has(key)) {\n            // Unmounted from the UI and can be totally removed\n            deletedFetchersKeys.push(key);\n          } else {\n            // Returned to idle but still mounted in the UI, so semi-remains for\n            // revalidations and such\n            completedFetchers.push(key);\n          }\n        }\n      });\n    }\n    // Iterate over a local copy so that if flushSync is used and we end up\n    // removing and adding a new subscriber due to the useCallback dependencies,\n    // we don\'t get ourselves into a loop calling the new subscriber immediately\n    [...subscribers].forEach(subscriber => subscriber(state, {\n      deletedFetchers: deletedFetchersKeys,\n      unstable_viewTransitionOpts: opts.viewTransitionOpts,\n      unstable_flushSync: opts.flushSync === true\n    }));\n    // Remove idle fetchers from state since we only care about in-flight fetchers.\n    if (future.v7_fetcherPersist) {\n      completedFetchers.forEach(key => state.fetchers.delete(key));\n      deletedFetchersKeys.forEach(key => deleteFetcher(key));\n    }\n  }\n  // Complete a navigation returning the state.navigation back to the IDLE_NAVIGATION\n  // and setting state.[historyAction/location/matches] to the new route.\n  // - Location is a required param\n  // - Navigation will always be set to IDLE_NAVIGATION\n  // - Can pass any other state in newState\n  function completeNavigation(location, newState, _temp) {\n    var _location$state, _location$state2;\n    let {\n      flushSync\n    } = _temp === void 0 ? {} : _temp;\n    // Deduce if we\'re in a loading/actionReload state:\n    // - We have committed actionData in the store\n    // - The current navigation was a mutation submission\n    // - We\'re past the submitting state and into the loading state\n    // - The location being loaded is not the result of a redirect\n    let isActionReload = state.actionData != null && state.navigation.formMethod != null && isMutationMethod(state.navigation.formMethod) && state.navigation.state === "loading" && ((_location$state = location.state) == null ? void 0 : _location$state._isRedirect) !== true;\n    let actionData;\n    if (newState.actionData) {\n      if (Object.keys(newState.actionData).length > 0) {\n        actionData = newState.actionData;\n      } else {\n        // Empty actionData -> clear prior actionData due to an action error\n        actionData = null;\n      }\n    } else if (isActionReload) {\n      // Keep the current data if we\'re wrapping up the action reload\n      actionData = state.actionData;\n    } else {\n      // Clear actionData on any other completed navigations\n      actionData = null;\n    }\n    // Always preserve any existing loaderData from re-used routes\n    let loaderData = newState.loaderData ? mergeLoaderData(state.loaderData, newState.loaderData, newState.matches || [], newState.errors) : state.loaderData;\n    // On a successful navigation we can assume we got through all blockers\n    // so we can start fresh\n    let blockers = state.blockers;\n    if (blockers.size > 0) {\n      blockers = new Map(blockers);\n      blockers.forEach((_, k) => blockers.set(k, router_IDLE_BLOCKER));\n    }\n    // Always respect the user flag.  Otherwise don\'t reset on mutation\n    // submission navigations unless they redirect\n    let preventScrollReset = pendingPreventScrollReset === true || state.navigation.formMethod != null && isMutationMethod(state.navigation.formMethod) && ((_location$state2 = location.state) == null ? void 0 : _location$state2._isRedirect) !== true;\n    if (inFlightDataRoutes) {\n      dataRoutes = inFlightDataRoutes;\n      inFlightDataRoutes = undefined;\n    }\n    if (isUninterruptedRevalidation) ;else if (pendingAction === Action.Pop) ;else if (pendingAction === Action.Push) {\n      init.history.push(location, location.state);\n    } else if (pendingAction === Action.Replace) {\n      init.history.replace(location, location.state);\n    }\n    let viewTransitionOpts;\n    // On POP, enable transitions if they were enabled on the original navigation\n    if (pendingAction === Action.Pop) {\n      // Forward takes precedence so they behave like the original navigation\n      let priorPaths = appliedViewTransitions.get(state.location.pathname);\n      if (priorPaths && priorPaths.has(location.pathname)) {\n        viewTransitionOpts = {\n          currentLocation: state.location,\n          nextLocation: location\n        };\n      } else if (appliedViewTransitions.has(location.pathname)) {\n        // If we don\'t have a previous forward nav, assume we\'re popping back to\n        // the new location and enable if that location previously enabled\n        viewTransitionOpts = {\n          currentLocation: location,\n          nextLocation: state.location\n        };\n      }\n    } else if (pendingViewTransitionEnabled) {\n      // Store the applied transition on PUSH/REPLACE\n      let toPaths = appliedViewTransitions.get(state.location.pathname);\n      if (toPaths) {\n        toPaths.add(location.pathname);\n      } else {\n        toPaths = new Set([location.pathname]);\n        appliedViewTransitions.set(state.location.pathname, toPaths);\n      }\n      viewTransitionOpts = {\n        currentLocation: state.location,\n        nextLocation: location\n      };\n    }\n    updateState(router_extends({}, newState, {\n      actionData,\n      loaderData,\n      historyAction: pendingAction,\n      location,\n      initialized: true,\n      navigation: IDLE_NAVIGATION,\n      revalidation: "idle",\n      restoreScrollPosition: getSavedScrollPosition(location, newState.matches || state.matches),\n      preventScrollReset,\n      blockers\n    }), {\n      viewTransitionOpts,\n      flushSync: flushSync === true\n    });\n    // Reset stateful navigation vars\n    pendingAction = Action.Pop;\n    pendingPreventScrollReset = false;\n    pendingViewTransitionEnabled = false;\n    isUninterruptedRevalidation = false;\n    isRevalidationRequired = false;\n    cancelledDeferredRoutes = [];\n    cancelledFetcherLoads = [];\n  }\n  // Trigger a navigation event, which can either be a numerical POP or a PUSH\n  // replace with an optional submission\n  async function navigate(to, opts) {\n    if (typeof to === "number") {\n      init.history.go(to);\n      return;\n    }\n    let normalizedPath = normalizeTo(state.location, state.matches, basename, future.v7_prependBasename, to, future.v7_relativeSplatPath, opts == null ? void 0 : opts.fromRouteId, opts == null ? void 0 : opts.relative);\n    let {\n      path,\n      submission,\n      error\n    } = normalizeNavigateOptions(future.v7_normalizeFormMethod, false, normalizedPath, opts);\n    let currentLocation = state.location;\n    let nextLocation = createLocation(state.location, path, opts && opts.state);\n    // When using navigate as a PUSH/REPLACE we aren\'t reading an already-encoded\n    // URL from window.location, so we need to encode it here so the behavior\n    // remains the same as POP and non-data-router usages.  new URL() does all\n    // the same encoding we\'d get from a history.pushState/window.location read\n    // without having to touch history\n    nextLocation = router_extends({}, nextLocation, init.history.encodeLocation(nextLocation));\n    let userReplace = opts && opts.replace != null ? opts.replace : undefined;\n    let historyAction = Action.Push;\n    if (userReplace === true) {\n      historyAction = Action.Replace;\n    } else if (userReplace === false) ;else if (submission != null && isMutationMethod(submission.formMethod) && submission.formAction === state.location.pathname + state.location.search) {\n      // By default on submissions to the current location we REPLACE so that\n      // users don\'t have to double-click the back button to get to the prior\n      // location.  If the user redirects to a different location from the\n      // action/loader this will be ignored and the redirect will be a PUSH\n      historyAction = Action.Replace;\n    }\n    let preventScrollReset = opts && "preventScrollReset" in opts ? opts.preventScrollReset === true : undefined;\n    let flushSync = (opts && opts.unstable_flushSync) === true;\n    let blockerKey = shouldBlockNavigation({\n      currentLocation,\n      nextLocation,\n      historyAction\n    });\n    if (blockerKey) {\n      // Put the blocker into a blocked state\n      updateBlocker(blockerKey, {\n        state: "blocked",\n        location: nextLocation,\n        proceed() {\n          updateBlocker(blockerKey, {\n            state: "proceeding",\n            proceed: undefined,\n            reset: undefined,\n            location: nextLocation\n          });\n          // Send the same navigation through\n          navigate(to, opts);\n        },\n        reset() {\n          let blockers = new Map(state.blockers);\n          blockers.set(blockerKey, router_IDLE_BLOCKER);\n          updateState({\n            blockers\n          });\n        }\n      });\n      return;\n    }\n    return await startNavigation(historyAction, nextLocation, {\n      submission,\n      // Send through the formData serialization error if we have one so we can\n      // render at the right error boundary after we match routes\n      pendingError: error,\n      preventScrollReset,\n      replace: opts && opts.replace,\n      enableViewTransition: opts && opts.unstable_viewTransition,\n      flushSync\n    });\n  }\n  // Revalidate all current loaders.  If a navigation is in progress or if this\n  // is interrupted by a navigation, allow this to "succeed" by calling all\n  // loaders during the next loader round\n  function revalidate() {\n    interruptActiveLoads();\n    updateState({\n      revalidation: "loading"\n    });\n    // If we\'re currently submitting an action, we don\'t need to start a new\n    // navigation, we\'ll just let the follow up loader execution call all loaders\n    if (state.navigation.state === "submitting") {\n      return;\n    }\n    // If we\'re currently in an idle state, start a new navigation for the current\n    // action/location and mark it as uninterrupted, which will skip the history\n    // update in completeNavigation\n    if (state.navigation.state === "idle") {\n      startNavigation(state.historyAction, state.location, {\n        startUninterruptedRevalidation: true\n      });\n      return;\n    }\n    // Otherwise, if we\'re currently in a loading state, just start a new\n    // navigation to the navigation.location but do not trigger an uninterrupted\n    // revalidation so that history correctly updates once the navigation completes\n    startNavigation(pendingAction || state.historyAction, state.navigation.location, {\n      overrideNavigation: state.navigation\n    });\n  }\n  // Start a navigation to the given action/location.  Can optionally provide a\n  // overrideNavigation which will override the normalLoad in the case of a redirect\n  // navigation\n  async function startNavigation(historyAction, location, opts) {\n    // Abort any in-progress navigations and start a new one. Unset any ongoing\n    // uninterrupted revalidations unless told otherwise, since we want this\n    // new navigation to update history normally\n    pendingNavigationController && pendingNavigationController.abort();\n    pendingNavigationController = null;\n    pendingAction = historyAction;\n    isUninterruptedRevalidation = (opts && opts.startUninterruptedRevalidation) === true;\n    // Save the current scroll position every time we start a new navigation,\n    // and track whether we should reset scroll on completion\n    saveScrollPosition(state.location, state.matches);\n    pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n    pendingViewTransitionEnabled = (opts && opts.enableViewTransition) === true;\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let loadingNavigation = opts && opts.overrideNavigation;\n    let matches = matchRoutes(routesToUse, location, basename);\n    let flushSync = (opts && opts.flushSync) === true;\n    // Short circuit with a 404 on the root error boundary if we match nothing\n    if (!matches) {\n      let error = getInternalRouterError(404, {\n        pathname: location.pathname\n      });\n      let {\n        matches: notFoundMatches,\n        route\n      } = getShortCircuitMatches(routesToUse);\n      // Cancel all pending deferred on 404s since we don\'t keep any routes\n      cancelActiveDeferreds();\n      completeNavigation(location, {\n        matches: notFoundMatches,\n        loaderData: {},\n        errors: {\n          [route.id]: error\n        }\n      }, {\n        flushSync\n      });\n      return;\n    }\n    // Short circuit if it\'s only a hash change and not a revalidation or\n    // mutation submission.\n    //\n    // Ignore on initial page loads because since the initial load will always\n    // be "same hash".  For example, on /page#hash and submit a <Form method="post">\n    // which will default to a navigation to /page\n    if (state.initialized && !isRevalidationRequired && isHashChangeOnly(state.location, location) && !(opts && opts.submission && isMutationMethod(opts.submission.formMethod))) {\n      completeNavigation(location, {\n        matches\n      }, {\n        flushSync\n      });\n      return;\n    }\n    // Create a controller/Request for this navigation\n    pendingNavigationController = new AbortController();\n    let request = createClientSideRequest(init.history, location, pendingNavigationController.signal, opts && opts.submission);\n    let pendingActionData;\n    let pendingError;\n    if (opts && opts.pendingError) {\n      // If we have a pendingError, it means the user attempted a GET submission\n      // with binary FormData so assign here and skip to handleLoaders.  That\n      // way we handle calling loaders above the boundary etc.  It\'s not really\n      // different from an actionError in that sense.\n      pendingError = {\n        [findNearestBoundary(matches).route.id]: opts.pendingError\n      };\n    } else if (opts && opts.submission && isMutationMethod(opts.submission.formMethod)) {\n      // Call action if we received an action submission\n      let actionOutput = await handleAction(request, location, opts.submission, matches, {\n        replace: opts.replace,\n        flushSync\n      });\n      if (actionOutput.shortCircuited) {\n        return;\n      }\n      pendingActionData = actionOutput.pendingActionData;\n      pendingError = actionOutput.pendingActionError;\n      loadingNavigation = getLoadingNavigation(location, opts.submission);\n      flushSync = false;\n      // Create a GET request for the loaders\n      request = new Request(request.url, {\n        signal: request.signal\n      });\n    }\n    // Call loaders\n    let {\n      shortCircuited,\n      loaderData,\n      errors\n    } = await handleLoaders(request, location, matches, loadingNavigation, opts && opts.submission, opts && opts.fetcherSubmission, opts && opts.replace, opts && opts.initialHydration === true, flushSync, pendingActionData, pendingError);\n    if (shortCircuited) {\n      return;\n    }\n    // Clean up now that the action/loaders have completed.  Don\'t clean up if\n    // we short circuited because pendingNavigationController will have already\n    // been assigned to a new controller for the next navigation\n    pendingNavigationController = null;\n    completeNavigation(location, router_extends({\n      matches\n    }, pendingActionData ? {\n      actionData: pendingActionData\n    } : {}, {\n      loaderData,\n      errors\n    }));\n  }\n  // Call the action matched by the leaf route for this navigation and handle\n  // redirects/errors\n  async function handleAction(request, location, submission, matches, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n    interruptActiveLoads();\n    // Put us in a submitting state\n    let navigation = getSubmittingNavigation(location, submission);\n    updateState({\n      navigation\n    }, {\n      flushSync: opts.flushSync === true\n    });\n    // Call our action and get the result\n    let result;\n    let actionMatch = getTargetMatch(matches, location);\n    if (!actionMatch.route.action && !actionMatch.route.lazy) {\n      result = {\n        type: ResultType.error,\n        error: getInternalRouterError(405, {\n          method: request.method,\n          pathname: location.pathname,\n          routeId: actionMatch.route.id\n        })\n      };\n    } else {\n      result = await callLoaderOrAction("action", request, actionMatch, matches, manifest, mapRouteProperties, basename, future.v7_relativeSplatPath);\n      if (request.signal.aborted) {\n        return {\n          shortCircuited: true\n        };\n      }\n    }\n    if (isRedirectResult(result)) {\n      let replace;\n      if (opts && opts.replace != null) {\n        replace = opts.replace;\n      } else {\n        // If the user didn\'t explicity indicate replace behavior, replace if\n        // we redirected to the exact same location we\'re currently at to avoid\n        // double back-buttons\n        replace = result.location === state.location.pathname + state.location.search;\n      }\n      await startRedirectNavigation(state, result, {\n        submission,\n        replace\n      });\n      return {\n        shortCircuited: true\n      };\n    }\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n      // By default, all submissions are REPLACE navigations, but if the\n      // action threw an error that\'ll be rendered in an errorElement, we fall\n      // back to PUSH so that the user can use the back button to get back to\n      // the pre-submission form location to try again\n      if ((opts && opts.replace) !== true) {\n        pendingAction = Action.Push;\n      }\n      return {\n        // Send back an empty object we can use to clear out any prior actionData\n        pendingActionData: {},\n        pendingActionError: {\n          [boundaryMatch.route.id]: result.error\n        }\n      };\n    }\n    if (isDeferredResult(result)) {\n      throw getInternalRouterError(400, {\n        type: "defer-action"\n      });\n    }\n    return {\n      pendingActionData: {\n        [actionMatch.route.id]: result.data\n      }\n    };\n  }\n  // Call all applicable loaders for the given matches, handling redirects,\n  // errors, etc.\n  async function handleLoaders(request, location, matches, overrideNavigation, submission, fetcherSubmission, replace, initialHydration, flushSync, pendingActionData, pendingError) {\n    // Figure out the right navigation we want to use for data loading\n    let loadingNavigation = overrideNavigation || getLoadingNavigation(location, submission);\n    // If this was a redirect from an action we don\'t have a "submission" but\n    // we have it on the loading navigation so use that if available\n    let activeSubmission = submission || fetcherSubmission || getSubmissionFromNavigation(loadingNavigation);\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(init.history, state, matches, activeSubmission, location, future.v7_partialHydration && initialHydration === true, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, deletedFetchers, fetchLoadMatches, fetchRedirectIds, routesToUse, basename, pendingActionData, pendingError);\n    // Cancel pending deferreds for no-longer-matched routes or routes we\'re\n    // about to reload.  Note that if this is an action reload we would have\n    // already cancelled all pending deferreds so this would be a no-op\n    cancelActiveDeferreds(routeId => !(matches && matches.some(m => m.route.id === routeId)) || matchesToLoad && matchesToLoad.some(m => m.route.id === routeId));\n    pendingNavigationLoadId = ++incrementingLoadId;\n    // Short circuit if we have no loaders to run\n    if (matchesToLoad.length === 0 && revalidatingFetchers.length === 0) {\n      let updatedFetchers = markFetchRedirectsDone();\n      completeNavigation(location, router_extends({\n        matches,\n        loaderData: {},\n        // Commit pending error if we\'re short circuiting\n        errors: pendingError || null\n      }, pendingActionData ? {\n        actionData: pendingActionData\n      } : {}, updatedFetchers ? {\n        fetchers: new Map(state.fetchers)\n      } : {}), {\n        flushSync\n      });\n      return {\n        shortCircuited: true\n      };\n    }\n    // If this is an uninterrupted revalidation, we remain in our current idle\n    // state.  If not, we need to switch to our loading state and load data,\n    // preserving any new action data or existing action data (in the case of\n    // a revalidation interrupting an actionReload)\n    // If we have partialHydration enabled, then don\'t update the state for the\n    // initial data load since it\'s not a "navigation"\n    if (!isUninterruptedRevalidation && (!future.v7_partialHydration || !initialHydration)) {\n      revalidatingFetchers.forEach(rf => {\n        let fetcher = state.fetchers.get(rf.key);\n        let revalidatingFetcher = getLoadingFetcher(undefined, fetcher ? fetcher.data : undefined);\n        state.fetchers.set(rf.key, revalidatingFetcher);\n      });\n      let actionData = pendingActionData || state.actionData;\n      updateState(router_extends({\n        navigation: loadingNavigation\n      }, actionData ? Object.keys(actionData).length === 0 ? {\n        actionData: null\n      } : {\n        actionData\n      } : {}, revalidatingFetchers.length > 0 ? {\n        fetchers: new Map(state.fetchers)\n      } : {}), {\n        flushSync\n      });\n    }\n    revalidatingFetchers.forEach(rf => {\n      if (fetchControllers.has(rf.key)) {\n        abortFetcher(rf.key);\n      }\n      if (rf.controller) {\n        // Fetchers use an independent AbortController so that aborting a fetcher\n        // (via deleteFetcher) does not abort the triggering navigation that\n        // triggered the revalidation\n        fetchControllers.set(rf.key, rf.controller);\n      }\n    });\n    // Proxy navigation abort through to revalidation fetchers\n    let abortPendingFetchRevalidations = () => revalidatingFetchers.forEach(f => abortFetcher(f.key));\n    if (pendingNavigationController) {\n      pendingNavigationController.signal.addEventListener("abort", abortPendingFetchRevalidations);\n    }\n    let {\n      results,\n      loaderResults,\n      fetcherResults\n    } = await callLoadersAndMaybeResolveData(state.matches, matches, matchesToLoad, revalidatingFetchers, request);\n    if (request.signal.aborted) {\n      return {\n        shortCircuited: true\n      };\n    }\n    // Clean up _after_ loaders have completed.  Don\'t clean up if we short\n    // circuited because fetchControllers would have been aborted and\n    // reassigned to new controllers for the next navigation\n    if (pendingNavigationController) {\n      pendingNavigationController.signal.removeEventListener("abort", abortPendingFetchRevalidations);\n    }\n    revalidatingFetchers.forEach(rf => fetchControllers.delete(rf.key));\n    // If any loaders returned a redirect Response, start a new REPLACE navigation\n    let redirect = findRedirect(results);\n    if (redirect) {\n      if (redirect.idx >= matchesToLoad.length) {\n        // If this redirect came from a fetcher make sure we mark it in\n        // fetchRedirectIds so it doesn\'t get revalidated on the next set of\n        // loader executions\n        let fetcherKey = revalidatingFetchers[redirect.idx - matchesToLoad.length].key;\n        fetchRedirectIds.add(fetcherKey);\n      }\n      await startRedirectNavigation(state, redirect.result, {\n        replace\n      });\n      return {\n        shortCircuited: true\n      };\n    }\n    // Process and commit output from loaders\n    let {\n      loaderData,\n      errors\n    } = processLoaderData(state, matches, matchesToLoad, loaderResults, pendingError, revalidatingFetchers, fetcherResults, activeDeferreds);\n    // Wire up subscribers to update loaderData as promises settle\n    activeDeferreds.forEach((deferredData, routeId) => {\n      deferredData.subscribe(aborted => {\n        // Note: No need to updateState here since the TrackedPromise on\n        // loaderData is stable across resolve/reject\n        // Remove this instance if we were aborted or if promises have settled\n        if (aborted || deferredData.done) {\n          activeDeferreds.delete(routeId);\n        }\n      });\n    });\n    // During partial hydration, preserve SSR errors for routes that don\'t re-run\n    if (future.v7_partialHydration && initialHydration && state.errors) {\n      Object.entries(state.errors).filter(_ref2 => {\n        let [id] = _ref2;\n        return !matchesToLoad.some(m => m.route.id === id);\n      }).forEach(_ref3 => {\n        let [routeId, error] = _ref3;\n        errors = Object.assign(errors || {}, {\n          [routeId]: error\n        });\n      });\n    }\n    let updatedFetchers = markFetchRedirectsDone();\n    let didAbortFetchLoads = abortStaleFetchLoads(pendingNavigationLoadId);\n    let shouldUpdateFetchers = updatedFetchers || didAbortFetchLoads || revalidatingFetchers.length > 0;\n    return router_extends({\n      loaderData,\n      errors\n    }, shouldUpdateFetchers ? {\n      fetchers: new Map(state.fetchers)\n    } : {});\n  }\n  // Trigger a fetcher load/submit for the given fetcher key\n  function fetch(key, routeId, href, opts) {\n    if (isServer) {\n      throw new Error("router.fetch() was called during the server render, but it shouldn\'t be. " + "You are likely calling a useFetcher() method in the body of your component. " + "Try moving it to a useEffect or a callback.");\n    }\n    if (fetchControllers.has(key)) abortFetcher(key);\n    let flushSync = (opts && opts.unstable_flushSync) === true;\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let normalizedPath = normalizeTo(state.location, state.matches, basename, future.v7_prependBasename, href, future.v7_relativeSplatPath, routeId, opts == null ? void 0 : opts.relative);\n    let matches = matchRoutes(routesToUse, normalizedPath, basename);\n    if (!matches) {\n      setFetcherError(key, routeId, getInternalRouterError(404, {\n        pathname: normalizedPath\n      }), {\n        flushSync\n      });\n      return;\n    }\n    let {\n      path,\n      submission,\n      error\n    } = normalizeNavigateOptions(future.v7_normalizeFormMethod, true, normalizedPath, opts);\n    if (error) {\n      setFetcherError(key, routeId, error, {\n        flushSync\n      });\n      return;\n    }\n    let match = getTargetMatch(matches, path);\n    pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n    if (submission && isMutationMethod(submission.formMethod)) {\n      handleFetcherAction(key, routeId, path, match, matches, flushSync, submission);\n      return;\n    }\n    // Store off the match so we can call it\'s shouldRevalidate on subsequent\n    // revalidations\n    fetchLoadMatches.set(key, {\n      routeId,\n      path\n    });\n    handleFetcherLoader(key, routeId, path, match, matches, flushSync, submission);\n  }\n  // Call the action for the matched fetcher.submit(), and then handle redirects,\n  // errors, and revalidation\n  async function handleFetcherAction(key, routeId, path, match, requestMatches, flushSync, submission) {\n    interruptActiveLoads();\n    fetchLoadMatches.delete(key);\n    if (!match.route.action && !match.route.lazy) {\n      let error = getInternalRouterError(405, {\n        method: submission.formMethod,\n        pathname: path,\n        routeId: routeId\n      });\n      setFetcherError(key, routeId, error, {\n        flushSync\n      });\n      return;\n    }\n    // Put this fetcher into it\'s submitting state\n    let existingFetcher = state.fetchers.get(key);\n    updateFetcherState(key, getSubmittingFetcher(submission, existingFetcher), {\n      flushSync\n    });\n    // Call the action for the fetcher\n    let abortController = new AbortController();\n    let fetchRequest = createClientSideRequest(init.history, path, abortController.signal, submission);\n    fetchControllers.set(key, abortController);\n    let originatingLoadId = incrementingLoadId;\n    let actionResult = await callLoaderOrAction("action", fetchRequest, match, requestMatches, manifest, mapRouteProperties, basename, future.v7_relativeSplatPath);\n    if (fetchRequest.signal.aborted) {\n      // We can delete this so long as we weren\'t aborted by our own fetcher\n      // re-submit which would have put _new_ controller is in fetchControllers\n      if (fetchControllers.get(key) === abortController) {\n        fetchControllers.delete(key);\n      }\n      return;\n    }\n    // When using v7_fetcherPersist, we don\'t want errors bubbling up to the UI\n    // or redirects processed for unmounted fetchers so we just revert them to\n    // idle\n    if (future.v7_fetcherPersist && deletedFetchers.has(key)) {\n      if (isRedirectResult(actionResult) || isErrorResult(actionResult)) {\n        updateFetcherState(key, getDoneFetcher(undefined));\n        return;\n      }\n      // Let SuccessResult\'s fall through for revalidation\n    } else {\n      if (isRedirectResult(actionResult)) {\n        fetchControllers.delete(key);\n        if (pendingNavigationLoadId > originatingLoadId) {\n          // A new navigation was kicked off after our action started, so that\n          // should take precedence over this redirect navigation.  We already\n          // set isRevalidationRequired so all loaders for the new route should\n          // fire unless opted out via shouldRevalidate\n          updateFetcherState(key, getDoneFetcher(undefined));\n          return;\n        } else {\n          fetchRedirectIds.add(key);\n          updateFetcherState(key, getLoadingFetcher(submission));\n          return startRedirectNavigation(state, actionResult, {\n            fetcherSubmission: submission\n          });\n        }\n      }\n      // Process any non-redirect errors thrown\n      if (isErrorResult(actionResult)) {\n        setFetcherError(key, routeId, actionResult.error);\n        return;\n      }\n    }\n    if (isDeferredResult(actionResult)) {\n      throw getInternalRouterError(400, {\n        type: "defer-action"\n      });\n    }\n    // Start the data load for current matches, or the next location if we\'re\n    // in the middle of a navigation\n    let nextLocation = state.navigation.location || state.location;\n    let revalidationRequest = createClientSideRequest(init.history, nextLocation, abortController.signal);\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let matches = state.navigation.state !== "idle" ? matchRoutes(routesToUse, state.navigation.location, basename) : state.matches;\n    invariant(matches, "Didn\'t find any matches after fetcher action");\n    let loadId = ++incrementingLoadId;\n    fetchReloadIds.set(key, loadId);\n    let loadFetcher = getLoadingFetcher(submission, actionResult.data);\n    state.fetchers.set(key, loadFetcher);\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(init.history, state, matches, submission, nextLocation, false, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, deletedFetchers, fetchLoadMatches, fetchRedirectIds, routesToUse, basename, {\n      [match.route.id]: actionResult.data\n    }, undefined // No need to send through errors since we short circuit above\n    );\n    // Put all revalidating fetchers into the loading state, except for the\n    // current fetcher which we want to keep in it\'s current loading state which\n    // contains it\'s action submission info + action data\n    revalidatingFetchers.filter(rf => rf.key !== key).forEach(rf => {\n      let staleKey = rf.key;\n      let existingFetcher = state.fetchers.get(staleKey);\n      let revalidatingFetcher = getLoadingFetcher(undefined, existingFetcher ? existingFetcher.data : undefined);\n      state.fetchers.set(staleKey, revalidatingFetcher);\n      if (fetchControllers.has(staleKey)) {\n        abortFetcher(staleKey);\n      }\n      if (rf.controller) {\n        fetchControllers.set(staleKey, rf.controller);\n      }\n    });\n    updateState({\n      fetchers: new Map(state.fetchers)\n    });\n    let abortPendingFetchRevalidations = () => revalidatingFetchers.forEach(rf => abortFetcher(rf.key));\n    abortController.signal.addEventListener("abort", abortPendingFetchRevalidations);\n    let {\n      results,\n      loaderResults,\n      fetcherResults\n    } = await callLoadersAndMaybeResolveData(state.matches, matches, matchesToLoad, revalidatingFetchers, revalidationRequest);\n    if (abortController.signal.aborted) {\n      return;\n    }\n    abortController.signal.removeEventListener("abort", abortPendingFetchRevalidations);\n    fetchReloadIds.delete(key);\n    fetchControllers.delete(key);\n    revalidatingFetchers.forEach(r => fetchControllers.delete(r.key));\n    let redirect = findRedirect(results);\n    if (redirect) {\n      if (redirect.idx >= matchesToLoad.length) {\n        // If this redirect came from a fetcher make sure we mark it in\n        // fetchRedirectIds so it doesn\'t get revalidated on the next set of\n        // loader executions\n        let fetcherKey = revalidatingFetchers[redirect.idx - matchesToLoad.length].key;\n        fetchRedirectIds.add(fetcherKey);\n      }\n      return startRedirectNavigation(state, redirect.result);\n    }\n    // Process and commit output from loaders\n    let {\n      loaderData,\n      errors\n    } = processLoaderData(state, state.matches, matchesToLoad, loaderResults, undefined, revalidatingFetchers, fetcherResults, activeDeferreds);\n    // Since we let revalidations complete even if the submitting fetcher was\n    // deleted, only put it back to idle if it hasn\'t been deleted\n    if (state.fetchers.has(key)) {\n      let doneFetcher = getDoneFetcher(actionResult.data);\n      state.fetchers.set(key, doneFetcher);\n    }\n    abortStaleFetchLoads(loadId);\n    // If we are currently in a navigation loading state and this fetcher is\n    // more recent than the navigation, we want the newer data so abort the\n    // navigation and complete it with the fetcher data\n    if (state.navigation.state === "loading" && loadId > pendingNavigationLoadId) {\n      invariant(pendingAction, "Expected pending action");\n      pendingNavigationController && pendingNavigationController.abort();\n      completeNavigation(state.navigation.location, {\n        matches,\n        loaderData,\n        errors,\n        fetchers: new Map(state.fetchers)\n      });\n    } else {\n      // otherwise just update with the fetcher data, preserving any existing\n      // loaderData for loaders that did not need to reload.  We have to\n      // manually merge here since we aren\'t going through completeNavigation\n      updateState({\n        errors,\n        loaderData: mergeLoaderData(state.loaderData, loaderData, matches, errors),\n        fetchers: new Map(state.fetchers)\n      });\n      isRevalidationRequired = false;\n    }\n  }\n  // Call the matched loader for fetcher.load(), handling redirects, errors, etc.\n  async function handleFetcherLoader(key, routeId, path, match, matches, flushSync, submission) {\n    let existingFetcher = state.fetchers.get(key);\n    updateFetcherState(key, getLoadingFetcher(submission, existingFetcher ? existingFetcher.data : undefined), {\n      flushSync\n    });\n    // Call the loader for this fetcher route match\n    let abortController = new AbortController();\n    let fetchRequest = createClientSideRequest(init.history, path, abortController.signal);\n    fetchControllers.set(key, abortController);\n    let originatingLoadId = incrementingLoadId;\n    let result = await callLoaderOrAction("loader", fetchRequest, match, matches, manifest, mapRouteProperties, basename, future.v7_relativeSplatPath);\n    // Deferred isn\'t supported for fetcher loads, await everything and treat it\n    // as a normal load.  resolveDeferredData will return undefined if this\n    // fetcher gets aborted, so we just leave result untouched and short circuit\n    // below if that happens\n    if (isDeferredResult(result)) {\n      result = (await resolveDeferredData(result, fetchRequest.signal, true)) || result;\n    }\n    // We can delete this so long as we weren\'t aborted by our our own fetcher\n    // re-load which would have put _new_ controller is in fetchControllers\n    if (fetchControllers.get(key) === abortController) {\n      fetchControllers.delete(key);\n    }\n    if (fetchRequest.signal.aborted) {\n      return;\n    }\n    // We don\'t want errors bubbling up or redirects followed for unmounted\n    // fetchers, so short circuit here if it was removed from the UI\n    if (deletedFetchers.has(key)) {\n      updateFetcherState(key, getDoneFetcher(undefined));\n      return;\n    }\n    // If the loader threw a redirect Response, start a new REPLACE navigation\n    if (isRedirectResult(result)) {\n      if (pendingNavigationLoadId > originatingLoadId) {\n        // A new navigation was kicked off after our loader started, so that\n        // should take precedence over this redirect navigation\n        updateFetcherState(key, getDoneFetcher(undefined));\n        return;\n      } else {\n        fetchRedirectIds.add(key);\n        await startRedirectNavigation(state, result);\n        return;\n      }\n    }\n    // Process any non-redirect errors thrown\n    if (isErrorResult(result)) {\n      setFetcherError(key, routeId, result.error);\n      return;\n    }\n    invariant(!isDeferredResult(result), "Unhandled fetcher deferred data");\n    // Put the fetcher back into an idle state\n    updateFetcherState(key, getDoneFetcher(result.data));\n  }\n  /**\n   * Utility function to handle redirects returned from an action or loader.\n   * Normally, a redirect "replaces" the navigation that triggered it.  So, for\n   * example:\n   *\n   *  - user is on /a\n   *  - user clicks a link to /b\n   *  - loader for /b redirects to /c\n   *\n   * In a non-JS app the browser would track the in-flight navigation to /b and\n   * then replace it with /c when it encountered the redirect response.  In\n   * the end it would only ever update the URL bar with /c.\n   *\n   * In client-side routing using pushState/replaceState, we aim to emulate\n   * this behavior and we also do not update history until the end of the\n   * navigation (including processed redirects).  This means that we never\n   * actually touch history until we\'ve processed redirects, so we just use\n   * the history action from the original navigation (PUSH or REPLACE).\n   */\n  async function startRedirectNavigation(state, redirect, _temp2) {\n    let {\n      submission,\n      fetcherSubmission,\n      replace\n    } = _temp2 === void 0 ? {} : _temp2;\n    if (redirect.revalidate) {\n      isRevalidationRequired = true;\n    }\n    let redirectLocation = createLocation(state.location, redirect.location, {\n      _isRedirect: true\n    });\n    invariant(redirectLocation, "Expected a location on the redirect navigation");\n    if (isBrowser) {\n      let isDocumentReload = false;\n      if (redirect.reloadDocument) {\n        // Hard reload if the response contained X-Remix-Reload-Document\n        isDocumentReload = true;\n      } else if (ABSOLUTE_URL_REGEX.test(redirect.location)) {\n        const url = init.history.createURL(redirect.location);\n        isDocumentReload =\n        // Hard reload if it\'s an absolute URL to a new origin\n        url.origin !== routerWindow.location.origin ||\n        // Hard reload if it\'s an absolute URL that does not match our basename\n        router_stripBasename(url.pathname, basename) == null;\n      }\n      if (isDocumentReload) {\n        if (replace) {\n          routerWindow.location.replace(redirect.location);\n        } else {\n          routerWindow.location.assign(redirect.location);\n        }\n        return;\n      }\n    }\n    // There\'s no need to abort on redirects, since we don\'t detect the\n    // redirect until the action/loaders have settled\n    pendingNavigationController = null;\n    let redirectHistoryAction = replace === true ? Action.Replace : Action.Push;\n    // Use the incoming submission if provided, fallback on the active one in\n    // state.navigation\n    let {\n      formMethod,\n      formAction,\n      formEncType\n    } = state.navigation;\n    if (!submission && !fetcherSubmission && formMethod && formAction && formEncType) {\n      submission = getSubmissionFromNavigation(state.navigation);\n    }\n    // If this was a 307/308 submission we want to preserve the HTTP method and\n    // re-submit the GET/POST/PUT/PATCH/DELETE as a submission navigation to the\n    // redirected location\n    let activeSubmission = submission || fetcherSubmission;\n    if (redirectPreserveMethodStatusCodes.has(redirect.status) && activeSubmission && isMutationMethod(activeSubmission.formMethod)) {\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        submission: router_extends({}, activeSubmission, {\n          formAction: redirect.location\n        }),\n        // Preserve this flag across redirects\n        preventScrollReset: pendingPreventScrollReset\n      });\n    } else {\n      // If we have a navigation submission, we will preserve it through the\n      // redirect navigation\n      let overrideNavigation = getLoadingNavigation(redirectLocation, submission);\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        overrideNavigation,\n        // Send fetcher submissions through for shouldRevalidate\n        fetcherSubmission,\n        // Preserve this flag across redirects\n        preventScrollReset: pendingPreventScrollReset\n      });\n    }\n  }\n  async function callLoadersAndMaybeResolveData(currentMatches, matches, matchesToLoad, fetchersToLoad, request) {\n    // Call all navigation loaders and revalidating fetcher loaders in parallel,\n    // then slice off the results into separate arrays so we can handle them\n    // accordingly\n    let results = await Promise.all([...matchesToLoad.map(match => callLoaderOrAction("loader", request, match, matches, manifest, mapRouteProperties, basename, future.v7_relativeSplatPath)), ...fetchersToLoad.map(f => {\n      if (f.matches && f.match && f.controller) {\n        return callLoaderOrAction("loader", createClientSideRequest(init.history, f.path, f.controller.signal), f.match, f.matches, manifest, mapRouteProperties, basename, future.v7_relativeSplatPath);\n      } else {\n        let error = {\n          type: ResultType.error,\n          error: getInternalRouterError(404, {\n            pathname: f.path\n          })\n        };\n        return error;\n      }\n    })]);\n    let loaderResults = results.slice(0, matchesToLoad.length);\n    let fetcherResults = results.slice(matchesToLoad.length);\n    await Promise.all([resolveDeferredResults(currentMatches, matchesToLoad, loaderResults, loaderResults.map(() => request.signal), false, state.loaderData), resolveDeferredResults(currentMatches, fetchersToLoad.map(f => f.match), fetcherResults, fetchersToLoad.map(f => f.controller ? f.controller.signal : null), true)]);\n    return {\n      results,\n      loaderResults,\n      fetcherResults\n    };\n  }\n  function interruptActiveLoads() {\n    // Every interruption triggers a revalidation\n    isRevalidationRequired = true;\n    // Cancel pending route-level deferreds and mark cancelled routes for\n    // revalidation\n    cancelledDeferredRoutes.push(...cancelActiveDeferreds());\n    // Abort in-flight fetcher loads\n    fetchLoadMatches.forEach((_, key) => {\n      if (fetchControllers.has(key)) {\n        cancelledFetcherLoads.push(key);\n        abortFetcher(key);\n      }\n    });\n  }\n  function updateFetcherState(key, fetcher, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n    state.fetchers.set(key, fetcher);\n    updateState({\n      fetchers: new Map(state.fetchers)\n    }, {\n      flushSync: (opts && opts.flushSync) === true\n    });\n  }\n  function setFetcherError(key, routeId, error, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n    let boundaryMatch = findNearestBoundary(state.matches, routeId);\n    deleteFetcher(key);\n    updateState({\n      errors: {\n        [boundaryMatch.route.id]: error\n      },\n      fetchers: new Map(state.fetchers)\n    }, {\n      flushSync: (opts && opts.flushSync) === true\n    });\n  }\n  function getFetcher(key) {\n    if (future.v7_fetcherPersist) {\n      activeFetchers.set(key, (activeFetchers.get(key) || 0) + 1);\n      // If this fetcher was previously marked for deletion, unmark it since we\n      // have a new instance\n      if (deletedFetchers.has(key)) {\n        deletedFetchers.delete(key);\n      }\n    }\n    return state.fetchers.get(key) || router_IDLE_FETCHER;\n  }\n  function deleteFetcher(key) {\n    let fetcher = state.fetchers.get(key);\n    // Don\'t abort the controller if this is a deletion of a fetcher.submit()\n    // in it\'s loading phase since - we don\'t want to abort the corresponding\n    // revalidation and want them to complete and land\n    if (fetchControllers.has(key) && !(fetcher && fetcher.state === "loading" && fetchReloadIds.has(key))) {\n      abortFetcher(key);\n    }\n    fetchLoadMatches.delete(key);\n    fetchReloadIds.delete(key);\n    fetchRedirectIds.delete(key);\n    deletedFetchers.delete(key);\n    state.fetchers.delete(key);\n  }\n  function deleteFetcherAndUpdateState(key) {\n    if (future.v7_fetcherPersist) {\n      let count = (activeFetchers.get(key) || 0) - 1;\n      if (count <= 0) {\n        activeFetchers.delete(key);\n        deletedFetchers.add(key);\n      } else {\n        activeFetchers.set(key, count);\n      }\n    } else {\n      deleteFetcher(key);\n    }\n    updateState({\n      fetchers: new Map(state.fetchers)\n    });\n  }\n  function abortFetcher(key) {\n    let controller = fetchControllers.get(key);\n    invariant(controller, "Expected fetch controller: " + key);\n    controller.abort();\n    fetchControllers.delete(key);\n  }\n  function markFetchersDone(keys) {\n    for (let key of keys) {\n      let fetcher = getFetcher(key);\n      let doneFetcher = getDoneFetcher(fetcher.data);\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n  function markFetchRedirectsDone() {\n    let doneKeys = [];\n    let updatedFetchers = false;\n    for (let key of fetchRedirectIds) {\n      let fetcher = state.fetchers.get(key);\n      invariant(fetcher, "Expected fetcher: " + key);\n      if (fetcher.state === "loading") {\n        fetchRedirectIds.delete(key);\n        doneKeys.push(key);\n        updatedFetchers = true;\n      }\n    }\n    markFetchersDone(doneKeys);\n    return updatedFetchers;\n  }\n  function abortStaleFetchLoads(landedId) {\n    let yeetedKeys = [];\n    for (let [key, id] of fetchReloadIds) {\n      if (id < landedId) {\n        let fetcher = state.fetchers.get(key);\n        invariant(fetcher, "Expected fetcher: " + key);\n        if (fetcher.state === "loading") {\n          abortFetcher(key);\n          fetchReloadIds.delete(key);\n          yeetedKeys.push(key);\n        }\n      }\n    }\n    markFetchersDone(yeetedKeys);\n    return yeetedKeys.length > 0;\n  }\n  function getBlocker(key, fn) {\n    let blocker = state.blockers.get(key) || router_IDLE_BLOCKER;\n    if (blockerFunctions.get(key) !== fn) {\n      blockerFunctions.set(key, fn);\n    }\n    return blocker;\n  }\n  function deleteBlocker(key) {\n    state.blockers.delete(key);\n    blockerFunctions.delete(key);\n  }\n  // Utility function to update blockers, ensuring valid state transitions\n  function updateBlocker(key, newBlocker) {\n    let blocker = state.blockers.get(key) || router_IDLE_BLOCKER;\n    // Poor mans state machine :)\n    // https://mermaid.live/edit#pako:eNqVkc9OwzAMxl8l8nnjAYrEtDIOHEBIgwvKJTReGy3_lDpIqO27k6awMG0XcrLlnz87nwdonESogKXXBuE79rq75XZO3-yHds0RJVuv70YrPlUrCEe2HfrORS3rubqZfuhtpg5C9wk5tZ4VKcRUq88q9Z8RS0-48cE1iHJkL0ugbHuFLus9L6spZy8nX9MP2CNdomVaposqu3fGayT8T8-jJQwhepo_UtpgBQaDEUom04dZhAN1aJBDlUKJBxE1ceB2Smj0Mln-IBW5AFU2dwUiktt_2Qaq2dBfaKdEup85UV7Yd-dKjlnkabl2Pvr0DTkTreM\n    invariant(blocker.state === "unblocked" && newBlocker.state === "blocked" || blocker.state === "blocked" && newBlocker.state === "blocked" || blocker.state === "blocked" && newBlocker.state === "proceeding" || blocker.state === "blocked" && newBlocker.state === "unblocked" || blocker.state === "proceeding" && newBlocker.state === "unblocked", "Invalid blocker state transition: " + blocker.state + " -> " + newBlocker.state);\n    let blockers = new Map(state.blockers);\n    blockers.set(key, newBlocker);\n    updateState({\n      blockers\n    });\n  }\n  function shouldBlockNavigation(_ref4) {\n    let {\n      currentLocation,\n      nextLocation,\n      historyAction\n    } = _ref4;\n    if (blockerFunctions.size === 0) {\n      return;\n    }\n    // We ony support a single active blocker at the moment since we don\'t have\n    // any compelling use cases for multi-blocker yet\n    if (blockerFunctions.size > 1) {\n      warning(false, "A router only supports one blocker at a time");\n    }\n    let entries = Array.from(blockerFunctions.entries());\n    let [blockerKey, blockerFunction] = entries[entries.length - 1];\n    let blocker = state.blockers.get(blockerKey);\n    if (blocker && blocker.state === "proceeding") {\n      // If the blocker is currently proceeding, we don\'t need to re-check\n      // it and can let this navigation continue\n      return;\n    }\n    // At this point, we know we\'re unblocked/blocked so we need to check the\n    // user-provided blocker function\n    if (blockerFunction({\n      currentLocation,\n      nextLocation,\n      historyAction\n    })) {\n      return blockerKey;\n    }\n  }\n  function cancelActiveDeferreds(predicate) {\n    let cancelledRouteIds = [];\n    activeDeferreds.forEach((dfd, routeId) => {\n      if (!predicate || predicate(routeId)) {\n        // Cancel the deferred - but do not remove from activeDeferreds here -\n        // we rely on the subscribers to do that so our tests can assert proper\n        // cleanup via _internalActiveDeferreds\n        dfd.cancel();\n        cancelledRouteIds.push(routeId);\n        activeDeferreds.delete(routeId);\n      }\n    });\n    return cancelledRouteIds;\n  }\n  // Opt in to capturing and reporting scroll positions during navigations,\n  // used by the <ScrollRestoration> component\n  function enableScrollRestoration(positions, getPosition, getKey) {\n    savedScrollPositions = positions;\n    getScrollPosition = getPosition;\n    getScrollRestorationKey = getKey || null;\n    // Perform initial hydration scroll restoration, since we miss the boat on\n    // the initial updateState() because we\'ve not yet rendered <ScrollRestoration/>\n    // and therefore have no savedScrollPositions available\n    if (!initialScrollRestored && state.navigation === IDLE_NAVIGATION) {\n      initialScrollRestored = true;\n      let y = getSavedScrollPosition(state.location, state.matches);\n      if (y != null) {\n        updateState({\n          restoreScrollPosition: y\n        });\n      }\n    }\n    return () => {\n      savedScrollPositions = null;\n      getScrollPosition = null;\n      getScrollRestorationKey = null;\n    };\n  }\n  function getScrollKey(location, matches) {\n    if (getScrollRestorationKey) {\n      let key = getScrollRestorationKey(location, matches.map(m => convertRouteMatchToUiMatch(m, state.loaderData)));\n      return key || location.key;\n    }\n    return location.key;\n  }\n  function saveScrollPosition(location, matches) {\n    if (savedScrollPositions && getScrollPosition) {\n      let key = getScrollKey(location, matches);\n      savedScrollPositions[key] = getScrollPosition();\n    }\n  }\n  function getSavedScrollPosition(location, matches) {\n    if (savedScrollPositions) {\n      let key = getScrollKey(location, matches);\n      let y = savedScrollPositions[key];\n      if (typeof y === "number") {\n        return y;\n      }\n    }\n    return null;\n  }\n  function _internalSetRoutes(newRoutes) {\n    manifest = {};\n    inFlightDataRoutes = convertRoutesToDataRoutes(newRoutes, mapRouteProperties, undefined, manifest);\n  }\n  router = {\n    get basename() {\n      return basename;\n    },\n    get future() {\n      return future;\n    },\n    get state() {\n      return state;\n    },\n    get routes() {\n      return dataRoutes;\n    },\n    get window() {\n      return routerWindow;\n    },\n    initialize,\n    subscribe,\n    enableScrollRestoration,\n    navigate,\n    fetch,\n    revalidate,\n    // Passthrough to history-aware createHref used by useHref so we get proper\n    // hash-aware URLs in DOM paths\n    createHref: to => init.history.createHref(to),\n    encodeLocation: to => init.history.encodeLocation(to),\n    getFetcher,\n    deleteFetcher: deleteFetcherAndUpdateState,\n    dispose,\n    getBlocker,\n    deleteBlocker,\n    _internalFetchControllers: fetchControllers,\n    _internalActiveDeferreds: activeDeferreds,\n    // TODO: Remove setRoutes, it\'s temporary to avoid dealing with\n    // updating the tree while validating the update algorithm.\n    _internalSetRoutes\n  };\n  return router;\n}\n//#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region createStaticHandler\n////////////////////////////////////////////////////////////////////////////////\nconst UNSAFE_DEFERRED_SYMBOL = Symbol("deferred");\nfunction createStaticHandler(routes, opts) {\n  invariant(routes.length > 0, "You must provide a non-empty routes array to createStaticHandler");\n  let manifest = {};\n  let basename = (opts ? opts.basename : null) || "/";\n  let mapRouteProperties;\n  if (opts != null && opts.mapRouteProperties) {\n    mapRouteProperties = opts.mapRouteProperties;\n  } else if (opts != null && opts.detectErrorBoundary) {\n    // If they are still using the deprecated version, wrap it with the new API\n    let detectErrorBoundary = opts.detectErrorBoundary;\n    mapRouteProperties = route => ({\n      hasErrorBoundary: detectErrorBoundary(route)\n    });\n  } else {\n    mapRouteProperties = defaultMapRouteProperties;\n  }\n  // Config driven behavior flags\n  let future = router_extends({\n    v7_relativeSplatPath: false,\n    v7_throwAbortReason: false\n  }, opts ? opts.future : null);\n  let dataRoutes = convertRoutesToDataRoutes(routes, mapRouteProperties, undefined, manifest);\n  /**\n   * The query() method is intended for document requests, in which we want to\n   * call an optional action and potentially multiple loaders for all nested\n   * routes.  It returns a StaticHandlerContext object, which is very similar\n   * to the router state (location, loaderData, actionData, errors, etc.) and\n   * also adds SSR-specific information such as the statusCode and headers\n   * from action/loaders Responses.\n   *\n   * It _should_ never throw and should report all errors through the\n   * returned context.errors object, properly associating errors to their error\n   * boundary.  Additionally, it tracks _deepestRenderedBoundaryId which can be\n   * used to emulate React error boundaries during SSr by performing a second\n   * pass only down to the boundaryId.\n   *\n   * The one exception where we do not return a StaticHandlerContext is when a\n   * redirect response is returned or thrown from any action/loader.  We\n   * propagate that out and return the raw Response so the HTTP server can\n   * return it directly.\n   */\n  async function query(request, _temp3) {\n    let {\n      requestContext\n    } = _temp3 === void 0 ? {} : _temp3;\n    let url = new URL(request.url);\n    let method = request.method;\n    let location = createLocation("", router_createPath(url), null, "default");\n    let matches = matchRoutes(dataRoutes, location, basename);\n    // SSR supports HEAD requests while SPA doesn\'t\n    if (!isValidMethod(method) && method !== "HEAD") {\n      let error = getInternalRouterError(405, {\n        method\n      });\n      let {\n        matches: methodNotAllowedMatches,\n        route\n      } = getShortCircuitMatches(dataRoutes);\n      return {\n        basename,\n        location,\n        matches: methodNotAllowedMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null\n      };\n    } else if (!matches) {\n      let error = getInternalRouterError(404, {\n        pathname: location.pathname\n      });\n      let {\n        matches: notFoundMatches,\n        route\n      } = getShortCircuitMatches(dataRoutes);\n      return {\n        basename,\n        location,\n        matches: notFoundMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null\n      };\n    }\n    let result = await queryImpl(request, location, matches, requestContext);\n    if (isResponse(result)) {\n      return result;\n    }\n    // When returning StaticHandlerContext, we patch back in the location here\n    // since we need it for React Context.  But this helps keep our submit and\n    // loadRouteData operating on a Request instead of a Location\n    return router_extends({\n      location,\n      basename\n    }, result);\n  }\n  /**\n   * The queryRoute() method is intended for targeted route requests, either\n   * for fetch ?_data requests or resource route requests.  In this case, we\n   * are only ever calling a single action or loader, and we are returning the\n   * returned value directly.  In most cases, this will be a Response returned\n   * from the action/loader, but it may be a primitive or other value as well -\n   * and in such cases the calling context should handle that accordingly.\n   *\n   * We do respect the throw/return differentiation, so if an action/loader\n   * throws, then this method will throw the value.  This is important so we\n   * can do proper boundary identification in Remix where a thrown Response\n   * must go to the Catch Boundary but a returned Response is happy-path.\n   *\n   * One thing to note is that any Router-initiated Errors that make sense\n   * to associate with a status code will be thrown as an ErrorResponse\n   * instance which include the raw Error, such that the calling context can\n   * serialize the error as they see fit while including the proper response\n   * code.  Examples here are 404 and 405 errors that occur prior to reaching\n   * any user-defined loaders.\n   */\n  async function queryRoute(request, _temp4) {\n    let {\n      routeId,\n      requestContext\n    } = _temp4 === void 0 ? {} : _temp4;\n    let url = new URL(request.url);\n    let method = request.method;\n    let location = createLocation("", router_createPath(url), null, "default");\n    let matches = matchRoutes(dataRoutes, location, basename);\n    // SSR supports HEAD requests while SPA doesn\'t\n    if (!isValidMethod(method) && method !== "HEAD" && method !== "OPTIONS") {\n      throw getInternalRouterError(405, {\n        method\n      });\n    } else if (!matches) {\n      throw getInternalRouterError(404, {\n        pathname: location.pathname\n      });\n    }\n    let match = routeId ? matches.find(m => m.route.id === routeId) : getTargetMatch(matches, location);\n    if (routeId && !match) {\n      throw getInternalRouterError(403, {\n        pathname: location.pathname,\n        routeId\n      });\n    } else if (!match) {\n      // This should never hit I don\'t think?\n      throw getInternalRouterError(404, {\n        pathname: location.pathname\n      });\n    }\n    let result = await queryImpl(request, location, matches, requestContext, match);\n    if (isResponse(result)) {\n      return result;\n    }\n    let error = result.errors ? Object.values(result.errors)[0] : undefined;\n    if (error !== undefined) {\n      // If we got back result.errors, that means the loader/action threw\n      // _something_ that wasn\'t a Response, but it\'s not guaranteed/required\n      // to be an `instanceof Error` either, so we have to use throw here to\n      // preserve the "error" state outside of queryImpl.\n      throw error;\n    }\n    // Pick off the right state value to return\n    if (result.actionData) {\n      return Object.values(result.actionData)[0];\n    }\n    if (result.loaderData) {\n      var _result$activeDeferre;\n      let data = Object.values(result.loaderData)[0];\n      if ((_result$activeDeferre = result.activeDeferreds) != null && _result$activeDeferre[match.route.id]) {\n        data[UNSAFE_DEFERRED_SYMBOL] = result.activeDeferreds[match.route.id];\n      }\n      return data;\n    }\n    return undefined;\n  }\n  async function queryImpl(request, location, matches, requestContext, routeMatch) {\n    invariant(request.signal, "query()/queryRoute() requests must contain an AbortController signal");\n    try {\n      if (isMutationMethod(request.method.toLowerCase())) {\n        let result = await submit(request, matches, routeMatch || getTargetMatch(matches, location), requestContext, routeMatch != null);\n        return result;\n      }\n      let result = await loadRouteData(request, matches, requestContext, routeMatch);\n      return isResponse(result) ? result : router_extends({}, result, {\n        actionData: null,\n        actionHeaders: {}\n      });\n    } catch (e) {\n      // If the user threw/returned a Response in callLoaderOrAction, we throw\n      // it to bail out and then return or throw here based on whether the user\n      // returned or threw\n      if (isQueryRouteResponse(e)) {\n        if (e.type === ResultType.error) {\n          throw e.response;\n        }\n        return e.response;\n      }\n      // Redirects are always returned since they don\'t propagate to catch\n      // boundaries\n      if (isRedirectResponse(e)) {\n        return e;\n      }\n      throw e;\n    }\n  }\n  async function submit(request, matches, actionMatch, requestContext, isRouteRequest) {\n    let result;\n    if (!actionMatch.route.action && !actionMatch.route.lazy) {\n      let error = getInternalRouterError(405, {\n        method: request.method,\n        pathname: new URL(request.url).pathname,\n        routeId: actionMatch.route.id\n      });\n      if (isRouteRequest) {\n        throw error;\n      }\n      result = {\n        type: ResultType.error,\n        error\n      };\n    } else {\n      result = await callLoaderOrAction("action", request, actionMatch, matches, manifest, mapRouteProperties, basename, future.v7_relativeSplatPath, {\n        isStaticRequest: true,\n        isRouteRequest,\n        requestContext\n      });\n      if (request.signal.aborted) {\n        throwStaticHandlerAbortedError(request, isRouteRequest, future);\n      }\n    }\n    if (isRedirectResult(result)) {\n      // Uhhhh - this should never happen, we should always throw these from\n      // callLoaderOrAction, but the type narrowing here keeps TS happy and we\n      // can get back on the "throw all redirect responses" train here should\n      // this ever happen :/\n      throw new Response(null, {\n        status: result.status,\n        headers: {\n          Location: result.location\n        }\n      });\n    }\n    if (isDeferredResult(result)) {\n      let error = getInternalRouterError(400, {\n        type: "defer-action"\n      });\n      if (isRouteRequest) {\n        throw error;\n      }\n      result = {\n        type: ResultType.error,\n        error\n      };\n    }\n    if (isRouteRequest) {\n      // Note: This should only be non-Response values if we get here, since\n      // isRouteRequest should throw any Response received in callLoaderOrAction\n      if (isErrorResult(result)) {\n        throw result.error;\n      }\n      return {\n        matches: [actionMatch],\n        loaderData: {},\n        actionData: {\n          [actionMatch.route.id]: result.data\n        },\n        errors: null,\n        // Note: statusCode + headers are unused here since queryRoute will\n        // return the raw Response or value\n        statusCode: 200,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null\n      };\n    }\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n      let context = await loadRouteData(request, matches, requestContext, undefined, {\n        [boundaryMatch.route.id]: result.error\n      });\n      // action status codes take precedence over loader status codes\n      return router_extends({}, context, {\n        statusCode: isRouteErrorResponse(result.error) ? result.error.status : 500,\n        actionData: null,\n        actionHeaders: router_extends({}, result.headers ? {\n          [actionMatch.route.id]: result.headers\n        } : {})\n      });\n    }\n    // Create a GET request for the loaders\n    let loaderRequest = new Request(request.url, {\n      headers: request.headers,\n      redirect: request.redirect,\n      signal: request.signal\n    });\n    let context = await loadRouteData(loaderRequest, matches, requestContext);\n    return router_extends({}, context, result.statusCode ? {\n      statusCode: result.statusCode\n    } : {}, {\n      actionData: {\n        [actionMatch.route.id]: result.data\n      },\n      actionHeaders: router_extends({}, result.headers ? {\n        [actionMatch.route.id]: result.headers\n      } : {})\n    });\n  }\n  async function loadRouteData(request, matches, requestContext, routeMatch, pendingActionError) {\n    let isRouteRequest = routeMatch != null;\n    // Short circuit if we have no loaders to run (queryRoute())\n    if (isRouteRequest && !(routeMatch != null && routeMatch.route.loader) && !(routeMatch != null && routeMatch.route.lazy)) {\n      throw getInternalRouterError(400, {\n        method: request.method,\n        pathname: new URL(request.url).pathname,\n        routeId: routeMatch == null ? void 0 : routeMatch.route.id\n      });\n    }\n    let requestMatches = routeMatch ? [routeMatch] : getLoaderMatchesUntilBoundary(matches, Object.keys(pendingActionError || {})[0]);\n    let matchesToLoad = requestMatches.filter(m => m.route.loader || m.route.lazy);\n    // Short circuit if we have no loaders to run (query())\n    if (matchesToLoad.length === 0) {\n      return {\n        matches,\n        // Add a null for all matched routes for proper revalidation on the client\n        loaderData: matches.reduce((acc, m) => Object.assign(acc, {\n          [m.route.id]: null\n        }), {}),\n        errors: pendingActionError || null,\n        statusCode: 200,\n        loaderHeaders: {},\n        activeDeferreds: null\n      };\n    }\n    let results = await Promise.all([...matchesToLoad.map(match => callLoaderOrAction("loader", request, match, matches, manifest, mapRouteProperties, basename, future.v7_relativeSplatPath, {\n      isStaticRequest: true,\n      isRouteRequest,\n      requestContext\n    }))]);\n    if (request.signal.aborted) {\n      throwStaticHandlerAbortedError(request, isRouteRequest, future);\n    }\n    // Process and commit output from loaders\n    let activeDeferreds = new Map();\n    let context = processRouteLoaderData(matches, matchesToLoad, results, pendingActionError, activeDeferreds);\n    // Add a null for any non-loader matches for proper revalidation on the client\n    let executedLoaders = new Set(matchesToLoad.map(match => match.route.id));\n    matches.forEach(match => {\n      if (!executedLoaders.has(match.route.id)) {\n        context.loaderData[match.route.id] = null;\n      }\n    });\n    return router_extends({}, context, {\n      matches,\n      activeDeferreds: activeDeferreds.size > 0 ? Object.fromEntries(activeDeferreds.entries()) : null\n    });\n  }\n  return {\n    dataRoutes,\n    query,\n    queryRoute\n  };\n}\n//#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region Helpers\n////////////////////////////////////////////////////////////////////////////////\n/**\n * Given an existing StaticHandlerContext and an error thrown at render time,\n * provide an updated StaticHandlerContext suitable for a second SSR render\n */\nfunction getStaticContextFromError(routes, context, error) {\n  let newContext = router_extends({}, context, {\n    statusCode: isRouteErrorResponse(error) ? error.status : 500,\n    errors: {\n      [context._deepestRenderedBoundaryId || routes[0].id]: error\n    }\n  });\n  return newContext;\n}\nfunction throwStaticHandlerAbortedError(request, isRouteRequest, future) {\n  if (future.v7_throwAbortReason && request.signal.reason !== undefined) {\n    throw request.signal.reason;\n  }\n  let method = isRouteRequest ? "queryRoute" : "query";\n  throw new Error(method + "() call aborted: " + request.method + " " + request.url);\n}\nfunction isSubmissionNavigation(opts) {\n  return opts != null && ("formData" in opts && opts.formData != null || "body" in opts && opts.body !== undefined);\n}\nfunction normalizeTo(location, matches, basename, prependBasename, to, v7_relativeSplatPath, fromRouteId, relative) {\n  let contextualMatches;\n  let activeRouteMatch;\n  if (fromRouteId) {\n    // Grab matches up to the calling route so our route-relative logic is\n    // relative to the correct source route\n    contextualMatches = [];\n    for (let match of matches) {\n      contextualMatches.push(match);\n      if (match.route.id === fromRouteId) {\n        activeRouteMatch = match;\n        break;\n      }\n    }\n  } else {\n    contextualMatches = matches;\n    activeRouteMatch = matches[matches.length - 1];\n  }\n  // Resolve the relative path\n  let path = router_resolveTo(to ? to : ".", getResolveToMatches(contextualMatches, v7_relativeSplatPath), router_stripBasename(location.pathname, basename) || location.pathname, relative === "path");\n  // When `to` is not specified we inherit search/hash from the current\n  // location, unlike when to="." and we just inherit the path.\n  // See https://github.com/remix-run/remix/issues/927\n  if (to == null) {\n    path.search = location.search;\n    path.hash = location.hash;\n  }\n  // Add an ?index param for matched index routes if we don\'t already have one\n  if ((to == null || to === "" || to === ".") && activeRouteMatch && activeRouteMatch.route.index && !hasNakedIndexQuery(path.search)) {\n    path.search = path.search ? path.search.replace(/^\\?/, "?index&") : "?index";\n  }\n  // If we\'re operating within a basename, prepend it to the pathname.  If\n  // this is a root navigation, then just use the raw basename which allows\n  // the basename to have full control over the presence of a trailing slash\n  // on root actions\n  if (prependBasename && basename !== "/") {\n    path.pathname = path.pathname === "/" ? basename : router_joinPaths([basename, path.pathname]);\n  }\n  return router_createPath(path);\n}\n// Normalize navigation options by converting formMethod=GET formData objects to\n// URLSearchParams so they behave identically to links with query params\nfunction normalizeNavigateOptions(normalizeFormMethod, isFetcher, path, opts) {\n  // Return location verbatim on non-submission navigations\n  if (!opts || !isSubmissionNavigation(opts)) {\n    return {\n      path\n    };\n  }\n  if (opts.formMethod && !isValidMethod(opts.formMethod)) {\n    return {\n      path,\n      error: getInternalRouterError(405, {\n        method: opts.formMethod\n      })\n    };\n  }\n  let getInvalidBodyError = () => ({\n    path,\n    error: getInternalRouterError(400, {\n      type: "invalid-body"\n    })\n  });\n  // Create a Submission on non-GET navigations\n  let rawFormMethod = opts.formMethod || "get";\n  let formMethod = normalizeFormMethod ? rawFormMethod.toUpperCase() : rawFormMethod.toLowerCase();\n  let formAction = stripHashFromPath(path);\n  if (opts.body !== undefined) {\n    if (opts.formEncType === "text/plain") {\n      // text only support POST/PUT/PATCH/DELETE submissions\n      if (!isMutationMethod(formMethod)) {\n        return getInvalidBodyError();\n      }\n      let text = typeof opts.body === "string" ? opts.body : opts.body instanceof FormData || opts.body instanceof URLSearchParams ?\n      // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#plain-text-form-data\n      Array.from(opts.body.entries()).reduce((acc, _ref5) => {\n        let [name, value] = _ref5;\n        return "" + acc + name + "=" + value + "\\n";\n      }, "") : String(opts.body);\n      return {\n        path,\n        submission: {\n          formMethod,\n          formAction,\n          formEncType: opts.formEncType,\n          formData: undefined,\n          json: undefined,\n          text\n        }\n      };\n    } else if (opts.formEncType === "application/json") {\n      // json only supports POST/PUT/PATCH/DELETE submissions\n      if (!isMutationMethod(formMethod)) {\n        return getInvalidBodyError();\n      }\n      try {\n        let json = typeof opts.body === "string" ? JSON.parse(opts.body) : opts.body;\n        return {\n          path,\n          submission: {\n            formMethod,\n            formAction,\n            formEncType: opts.formEncType,\n            formData: undefined,\n            json,\n            text: undefined\n          }\n        };\n      } catch (e) {\n        return getInvalidBodyError();\n      }\n    }\n  }\n  invariant(typeof FormData === "function", "FormData is not available in this environment");\n  let searchParams;\n  let formData;\n  if (opts.formData) {\n    searchParams = convertFormDataToSearchParams(opts.formData);\n    formData = opts.formData;\n  } else if (opts.body instanceof FormData) {\n    searchParams = convertFormDataToSearchParams(opts.body);\n    formData = opts.body;\n  } else if (opts.body instanceof URLSearchParams) {\n    searchParams = opts.body;\n    formData = convertSearchParamsToFormData(searchParams);\n  } else if (opts.body == null) {\n    searchParams = new URLSearchParams();\n    formData = new FormData();\n  } else {\n    try {\n      searchParams = new URLSearchParams(opts.body);\n      formData = convertSearchParamsToFormData(searchParams);\n    } catch (e) {\n      return getInvalidBodyError();\n    }\n  }\n  let submission = {\n    formMethod,\n    formAction,\n    formEncType: opts && opts.formEncType || "application/x-www-form-urlencoded",\n    formData,\n    json: undefined,\n    text: undefined\n  };\n  if (isMutationMethod(submission.formMethod)) {\n    return {\n      path,\n      submission\n    };\n  }\n  // Flatten submission onto URLSearchParams for GET submissions\n  let parsedPath = parsePath(path);\n  // On GET navigation submissions we can drop the ?index param from the\n  // resulting location since all loaders will run.  But fetcher GET submissions\n  // only run a single loader so we need to preserve any incoming ?index params\n  if (isFetcher && parsedPath.search && hasNakedIndexQuery(parsedPath.search)) {\n    searchParams.append("index", "");\n  }\n  parsedPath.search = "?" + searchParams;\n  return {\n    path: router_createPath(parsedPath),\n    submission\n  };\n}\n// Filter out all routes below any caught error as they aren\'t going to\n// render so we don\'t need to load them\nfunction getLoaderMatchesUntilBoundary(matches, boundaryId) {\n  let boundaryMatches = matches;\n  if (boundaryId) {\n    let index = matches.findIndex(m => m.route.id === boundaryId);\n    if (index >= 0) {\n      boundaryMatches = matches.slice(0, index);\n    }\n  }\n  return boundaryMatches;\n}\nfunction getMatchesToLoad(history, state, matches, submission, location, isInitialLoad, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, deletedFetchers, fetchLoadMatches, fetchRedirectIds, routesToUse, basename, pendingActionData, pendingError) {\n  let actionResult = pendingError ? Object.values(pendingError)[0] : pendingActionData ? Object.values(pendingActionData)[0] : undefined;\n  let currentUrl = history.createURL(state.location);\n  let nextUrl = history.createURL(location);\n  // Pick navigation matches that are net-new or qualify for revalidation\n  let boundaryId = pendingError ? Object.keys(pendingError)[0] : undefined;\n  let boundaryMatches = getLoaderMatchesUntilBoundary(matches, boundaryId);\n  let navigationMatches = boundaryMatches.filter((match, index) => {\n    let {\n      route\n    } = match;\n    if (route.lazy) {\n      // We haven\'t loaded this route yet so we don\'t know if it\'s got a loader!\n      return true;\n    }\n    if (route.loader == null) {\n      return false;\n    }\n    if (isInitialLoad) {\n      if (route.loader.hydrate) {\n        return true;\n      }\n      return state.loaderData[route.id] === undefined && (\n      // Don\'t re-run if the loader ran and threw an error\n      !state.errors || state.errors[route.id] === undefined);\n    }\n    // Always call the loader on new route instances and pending defer cancellations\n    if (isNewLoader(state.loaderData, state.matches[index], match) || cancelledDeferredRoutes.some(id => id === match.route.id)) {\n      return true;\n    }\n    // This is the default implementation for when we revalidate.  If the route\n    // provides it\'s own implementation, then we give them full control but\n    // provide this value so they can leverage it if needed after they check\n    // their own specific use cases\n    let currentRouteMatch = state.matches[index];\n    let nextRouteMatch = match;\n    return shouldRevalidateLoader(match, router_extends({\n      currentUrl,\n      currentParams: currentRouteMatch.params,\n      nextUrl,\n      nextParams: nextRouteMatch.params\n    }, submission, {\n      actionResult,\n      defaultShouldRevalidate:\n      // Forced revalidation due to submission, useRevalidator, or X-Remix-Revalidate\n      isRevalidationRequired ||\n      // Clicked the same link, resubmitted a GET form\n      currentUrl.pathname + currentUrl.search === nextUrl.pathname + nextUrl.search ||\n      // Search params affect all loaders\n      currentUrl.search !== nextUrl.search || isNewRouteInstance(currentRouteMatch, nextRouteMatch)\n    }));\n  });\n  // Pick fetcher.loads that need to be revalidated\n  let revalidatingFetchers = [];\n  fetchLoadMatches.forEach((f, key) => {\n    // Don\'t revalidate:\n    //  - on initial load (shouldn\'t be any fetchers then anyway)\n    //  - if fetcher won\'t be present in the subsequent render\n    //    - no longer matches the URL (v7_fetcherPersist=false)\n    //    - was unmounted but persisted due to v7_fetcherPersist=true\n    if (isInitialLoad || !matches.some(m => m.route.id === f.routeId) || deletedFetchers.has(key)) {\n      return;\n    }\n    let fetcherMatches = matchRoutes(routesToUse, f.path, basename);\n    // If the fetcher path no longer matches, push it in with null matches so\n    // we can trigger a 404 in callLoadersAndMaybeResolveData.  Note this is\n    // currently only a use-case for Remix HMR where the route tree can change\n    // at runtime and remove a route previously loaded via a fetcher\n    if (!fetcherMatches) {\n      revalidatingFetchers.push({\n        key,\n        routeId: f.routeId,\n        path: f.path,\n        matches: null,\n        match: null,\n        controller: null\n      });\n      return;\n    }\n    // Revalidating fetchers are decoupled from the route matches since they\n    // load from a static href.  They revalidate based on explicit revalidation\n    // (submission, useRevalidator, or X-Remix-Revalidate)\n    let fetcher = state.fetchers.get(key);\n    let fetcherMatch = getTargetMatch(fetcherMatches, f.path);\n    let shouldRevalidate = false;\n    if (fetchRedirectIds.has(key)) {\n      // Never trigger a revalidation of an actively redirecting fetcher\n      shouldRevalidate = false;\n    } else if (cancelledFetcherLoads.includes(key)) {\n      // Always revalidate if the fetcher was cancelled\n      shouldRevalidate = true;\n    } else if (fetcher && fetcher.state !== "idle" && fetcher.data === undefined) {\n      // If the fetcher hasn\'t ever completed loading yet, then this isn\'t a\n      // revalidation, it would just be a brand new load if an explicit\n      // revalidation is required\n      shouldRevalidate = isRevalidationRequired;\n    } else {\n      // Otherwise fall back on any user-defined shouldRevalidate, defaulting\n      // to explicit revalidations only\n      shouldRevalidate = shouldRevalidateLoader(fetcherMatch, router_extends({\n        currentUrl,\n        currentParams: state.matches[state.matches.length - 1].params,\n        nextUrl,\n        nextParams: matches[matches.length - 1].params\n      }, submission, {\n        actionResult,\n        defaultShouldRevalidate: isRevalidationRequired\n      }));\n    }\n    if (shouldRevalidate) {\n      revalidatingFetchers.push({\n        key,\n        routeId: f.routeId,\n        path: f.path,\n        matches: fetcherMatches,\n        match: fetcherMatch,\n        controller: new AbortController()\n      });\n    }\n  });\n  return [navigationMatches, revalidatingFetchers];\n}\nfunction isNewLoader(currentLoaderData, currentMatch, match) {\n  let isNew =\n  // [a] -> [a, b]\n  !currentMatch ||\n  // [a, b] -> [a, c]\n  match.route.id !== currentMatch.route.id;\n  // Handle the case that we don\'t have data for a re-used route, potentially\n  // from a prior error or from a cancelled pending deferred\n  let isMissingData = currentLoaderData[match.route.id] === undefined;\n  // Always load if this is a net-new route or we don\'t yet have data\n  return isNew || isMissingData;\n}\nfunction isNewRouteInstance(currentMatch, match) {\n  let currentPath = currentMatch.route.path;\n  return (\n    // param change for this match, /users/123 -> /users/456\n    currentMatch.pathname !== match.pathname ||\n    // splat param changed, which is not present in match.path\n    // e.g. /files/images/avatar.jpg -> files/finances.xls\n    currentPath != null && currentPath.endsWith("*") && currentMatch.params["*"] !== match.params["*"]\n  );\n}\nfunction shouldRevalidateLoader(loaderMatch, arg) {\n  if (loaderMatch.route.shouldRevalidate) {\n    let routeChoice = loaderMatch.route.shouldRevalidate(arg);\n    if (typeof routeChoice === "boolean") {\n      return routeChoice;\n    }\n  }\n  return arg.defaultShouldRevalidate;\n}\n/**\n * Execute route.lazy() methods to lazily load route modules (loader, action,\n * shouldRevalidate) and update the routeManifest in place which shares objects\n * with dataRoutes so those get updated as well.\n */\nasync function loadLazyRouteModule(route, mapRouteProperties, manifest) {\n  if (!route.lazy) {\n    return;\n  }\n  let lazyRoute = await route.lazy();\n  // If the lazy route function was executed and removed by another parallel\n  // call then we can return - first lazy() to finish wins because the return\n  // value of lazy is expected to be static\n  if (!route.lazy) {\n    return;\n  }\n  let routeToUpdate = manifest[route.id];\n  invariant(routeToUpdate, "No route found in manifest");\n  // Update the route in place.  This should be safe because there\'s no way\n  // we could yet be sitting on this route as we can\'t get there without\n  // resolving lazy() first.\n  //\n  // This is different than the HMR "update" use-case where we may actively be\n  // on the route being updated.  The main concern boils down to "does this\n  // mutation affect any ongoing navigations or any current state.matches\n  // values?".  If not, it should be safe to update in place.\n  let routeUpdates = {};\n  for (let lazyRouteProperty in lazyRoute) {\n    let staticRouteValue = routeToUpdate[lazyRouteProperty];\n    let isPropertyStaticallyDefined = staticRouteValue !== undefined &&\n    // This property isn\'t static since it should always be updated based\n    // on the route updates\n    lazyRouteProperty !== "hasErrorBoundary";\n    warning(!isPropertyStaticallyDefined, "Route \\"" + routeToUpdate.id + "\\" has a static property \\"" + lazyRouteProperty + "\\" " + "defined but its lazy function is also returning a value for this property. " + ("The lazy route property \\"" + lazyRouteProperty + "\\" will be ignored."));\n    if (!isPropertyStaticallyDefined && !immutableRouteKeys.has(lazyRouteProperty)) {\n      routeUpdates[lazyRouteProperty] = lazyRoute[lazyRouteProperty];\n    }\n  }\n  // Mutate the route with the provided updates.  Do this first so we pass\n  // the updated version to mapRouteProperties\n  Object.assign(routeToUpdate, routeUpdates);\n  // Mutate the `hasErrorBoundary` property on the route based on the route\n  // updates and remove the `lazy` function so we don\'t resolve the lazy\n  // route again.\n  Object.assign(routeToUpdate, router_extends({}, mapRouteProperties(routeToUpdate), {\n    lazy: undefined\n  }));\n}\nasync function callLoaderOrAction(type, request, match, matches, manifest, mapRouteProperties, basename, v7_relativeSplatPath, opts) {\n  if (opts === void 0) {\n    opts = {};\n  }\n  let resultType;\n  let result;\n  let onReject;\n  let runHandler = handler => {\n    // Setup a promise we can race against so that abort signals short circuit\n    let reject;\n    let abortPromise = new Promise((_, r) => reject = r);\n    onReject = () => reject();\n    request.signal.addEventListener("abort", onReject);\n    return Promise.race([handler({\n      request,\n      params: match.params,\n      context: opts.requestContext\n    }), abortPromise]);\n  };\n  try {\n    let handler = match.route[type];\n    if (match.route.lazy) {\n      if (handler) {\n        // Run statically defined handler in parallel with lazy()\n        let handlerError;\n        let values = await Promise.all([\n        // If the handler throws, don\'t let it immediately bubble out,\n        // since we need to let the lazy() execution finish so we know if this\n        // route has a boundary that can handle the error\n        runHandler(handler).catch(e => {\n          handlerError = e;\n        }), loadLazyRouteModule(match.route, mapRouteProperties, manifest)]);\n        if (handlerError) {\n          throw handlerError;\n        }\n        result = values[0];\n      } else {\n        // Load lazy route module, then run any returned handler\n        await loadLazyRouteModule(match.route, mapRouteProperties, manifest);\n        handler = match.route[type];\n        if (handler) {\n          // Handler still run even if we got interrupted to maintain consistency\n          // with un-abortable behavior of handler execution on non-lazy or\n          // previously-lazy-loaded routes\n          result = await runHandler(handler);\n        } else if (type === "action") {\n          let url = new URL(request.url);\n          let pathname = url.pathname + url.search;\n          throw getInternalRouterError(405, {\n            method: request.method,\n            pathname,\n            routeId: match.route.id\n          });\n        } else {\n          // lazy() route has no loader to run.  Short circuit here so we don\'t\n          // hit the invariant below that errors on returning undefined.\n          return {\n            type: ResultType.data,\n            data: undefined\n          };\n        }\n      }\n    } else if (!handler) {\n      let url = new URL(request.url);\n      let pathname = url.pathname + url.search;\n      throw getInternalRouterError(404, {\n        pathname\n      });\n    } else {\n      result = await runHandler(handler);\n    }\n    invariant(result !== undefined, "You defined " + (type === "action" ? "an action" : "a loader") + " for route " + ("\\"" + match.route.id + "\\" but didn\'t return anything from your `" + type + "` ") + "function. Please return a value or `null`.");\n  } catch (e) {\n    resultType = ResultType.error;\n    result = e;\n  } finally {\n    if (onReject) {\n      request.signal.removeEventListener("abort", onReject);\n    }\n  }\n  if (isResponse(result)) {\n    let status = result.status;\n    // Process redirects\n    if (redirectStatusCodes.has(status)) {\n      let location = result.headers.get("Location");\n      invariant(location, "Redirects returned/thrown from loaders/actions must have a Location header");\n      // Support relative routing in internal redirects\n      if (!ABSOLUTE_URL_REGEX.test(location)) {\n        location = normalizeTo(new URL(request.url), matches.slice(0, matches.indexOf(match) + 1), basename, true, location, v7_relativeSplatPath);\n      } else if (!opts.isStaticRequest) {\n        // Strip off the protocol+origin for same-origin + same-basename absolute\n        // redirects. If this is a static request, we can let it go back to the\n        // browser as-is\n        let currentUrl = new URL(request.url);\n        let url = location.startsWith("//") ? new URL(currentUrl.protocol + location) : new URL(location);\n        let isSameBasename = router_stripBasename(url.pathname, basename) != null;\n        if (url.origin === currentUrl.origin && isSameBasename) {\n          location = url.pathname + url.search + url.hash;\n        }\n      }\n      // Don\'t process redirects in the router during static requests requests.\n      // Instead, throw the Response and let the server handle it with an HTTP\n      // redirect.  We also update the Location header in place in this flow so\n      // basename and relative routing is taken into account\n      if (opts.isStaticRequest) {\n        result.headers.set("Location", location);\n        throw result;\n      }\n      return {\n        type: ResultType.redirect,\n        status,\n        location,\n        revalidate: result.headers.get("X-Remix-Revalidate") !== null,\n        reloadDocument: result.headers.get("X-Remix-Reload-Document") !== null\n      };\n    }\n    // For SSR single-route requests, we want to hand Responses back directly\n    // without unwrapping.  We do this with the QueryRouteResponse wrapper\n    // interface so we can know whether it was returned or thrown\n    if (opts.isRouteRequest) {\n      let queryRouteResponse = {\n        type: resultType === ResultType.error ? ResultType.error : ResultType.data,\n        response: result\n      };\n      throw queryRouteResponse;\n    }\n    let data;\n    try {\n      let contentType = result.headers.get("Content-Type");\n      // Check between word boundaries instead of startsWith() due to the last\n      // paragraph of https://httpwg.org/specs/rfc9110.html#field.content-type\n      if (contentType && /\\bapplication\\/json\\b/.test(contentType)) {\n        if (result.body == null) {\n          data = null;\n        } else {\n          data = await result.json();\n        }\n      } else {\n        data = await result.text();\n      }\n    } catch (e) {\n      return {\n        type: ResultType.error,\n        error: e\n      };\n    }\n    if (resultType === ResultType.error) {\n      return {\n        type: resultType,\n        error: new ErrorResponseImpl(status, result.statusText, data),\n        headers: result.headers\n      };\n    }\n    return {\n      type: ResultType.data,\n      data,\n      statusCode: result.status,\n      headers: result.headers\n    };\n  }\n  if (resultType === ResultType.error) {\n    return {\n      type: resultType,\n      error: result\n    };\n  }\n  if (isDeferredData(result)) {\n    var _result$init, _result$init2;\n    return {\n      type: ResultType.deferred,\n      deferredData: result,\n      statusCode: (_result$init = result.init) == null ? void 0 : _result$init.status,\n      headers: ((_result$init2 = result.init) == null ? void 0 : _result$init2.headers) && new Headers(result.init.headers)\n    };\n  }\n  return {\n    type: ResultType.data,\n    data: result\n  };\n}\n// Utility method for creating the Request instances for loaders/actions during\n// client-side navigations and fetches.  During SSR we will always have a\n// Request instance from the static handler (query/queryRoute)\nfunction createClientSideRequest(history, location, signal, submission) {\n  let url = history.createURL(stripHashFromPath(location)).toString();\n  let init = {\n    signal\n  };\n  if (submission && isMutationMethod(submission.formMethod)) {\n    let {\n      formMethod,\n      formEncType\n    } = submission;\n    // Didn\'t think we needed this but it turns out unlike other methods, patch\n    // won\'t be properly normalized to uppercase and results in a 405 error.\n    // See: https://fetch.spec.whatwg.org/#concept-method\n    init.method = formMethod.toUpperCase();\n    if (formEncType === "application/json") {\n      init.headers = new Headers({\n        "Content-Type": formEncType\n      });\n      init.body = JSON.stringify(submission.json);\n    } else if (formEncType === "text/plain") {\n      // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n      init.body = submission.text;\n    } else if (formEncType === "application/x-www-form-urlencoded" && submission.formData) {\n      // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n      init.body = convertFormDataToSearchParams(submission.formData);\n    } else {\n      // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n      init.body = submission.formData;\n    }\n  }\n  return new Request(url, init);\n}\nfunction convertFormDataToSearchParams(formData) {\n  let searchParams = new URLSearchParams();\n  for (let [key, value] of formData.entries()) {\n    // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#converting-an-entry-list-to-a-list-of-name-value-pairs\n    searchParams.append(key, typeof value === "string" ? value : value.name);\n  }\n  return searchParams;\n}\nfunction convertSearchParamsToFormData(searchParams) {\n  let formData = new FormData();\n  for (let [key, value] of searchParams.entries()) {\n    formData.append(key, value);\n  }\n  return formData;\n}\nfunction processRouteLoaderData(matches, matchesToLoad, results, pendingError, activeDeferreds) {\n  // Fill in loaderData/errors from our loaders\n  let loaderData = {};\n  let errors = null;\n  let statusCode;\n  let foundError = false;\n  let loaderHeaders = {};\n  // Process loader results into state.loaderData/state.errors\n  results.forEach((result, index) => {\n    let id = matchesToLoad[index].route.id;\n    invariant(!isRedirectResult(result), "Cannot handle redirect results in processLoaderData");\n    if (isErrorResult(result)) {\n      // Look upwards from the matched route for the closest ancestor\n      // error boundary, defaulting to the root match\n      let boundaryMatch = findNearestBoundary(matches, id);\n      let error = result.error;\n      // If we have a pending action error, we report it at the highest-route\n      // that throws a loader error, and then clear it out to indicate that\n      // it was consumed\n      if (pendingError) {\n        error = Object.values(pendingError)[0];\n        pendingError = undefined;\n      }\n      errors = errors || {};\n      // Prefer higher error values if lower errors bubble to the same boundary\n      if (errors[boundaryMatch.route.id] == null) {\n        errors[boundaryMatch.route.id] = error;\n      }\n      // Clear our any prior loaderData for the throwing route\n      loaderData[id] = undefined;\n      // Once we find our first (highest) error, we set the status code and\n      // prevent deeper status codes from overriding\n      if (!foundError) {\n        foundError = true;\n        statusCode = isRouteErrorResponse(result.error) ? result.error.status : 500;\n      }\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    } else {\n      if (isDeferredResult(result)) {\n        activeDeferreds.set(id, result.deferredData);\n        loaderData[id] = result.deferredData.data;\n      } else {\n        loaderData[id] = result.data;\n      }\n      // Error status codes always override success status codes, but if all\n      // loaders are successful we take the deepest status code.\n      if (result.statusCode != null && result.statusCode !== 200 && !foundError) {\n        statusCode = result.statusCode;\n      }\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    }\n  });\n  // If we didn\'t consume the pending action error (i.e., all loaders\n  // resolved), then consume it here.  Also clear out any loaderData for the\n  // throwing route\n  if (pendingError) {\n    errors = pendingError;\n    loaderData[Object.keys(pendingError)[0]] = undefined;\n  }\n  return {\n    loaderData,\n    errors,\n    statusCode: statusCode || 200,\n    loaderHeaders\n  };\n}\nfunction processLoaderData(state, matches, matchesToLoad, results, pendingError, revalidatingFetchers, fetcherResults, activeDeferreds) {\n  let {\n    loaderData,\n    errors\n  } = processRouteLoaderData(matches, matchesToLoad, results, pendingError, activeDeferreds);\n  // Process results from our revalidating fetchers\n  for (let index = 0; index < revalidatingFetchers.length; index++) {\n    let {\n      key,\n      match,\n      controller\n    } = revalidatingFetchers[index];\n    invariant(fetcherResults !== undefined && fetcherResults[index] !== undefined, "Did not find corresponding fetcher result");\n    let result = fetcherResults[index];\n    // Process fetcher non-redirect errors\n    if (controller && controller.signal.aborted) {\n      // Nothing to do for aborted fetchers\n      continue;\n    } else if (isErrorResult(result)) {\n      let boundaryMatch = findNearestBoundary(state.matches, match == null ? void 0 : match.route.id);\n      if (!(errors && errors[boundaryMatch.route.id])) {\n        errors = router_extends({}, errors, {\n          [boundaryMatch.route.id]: result.error\n        });\n      }\n      state.fetchers.delete(key);\n    } else if (isRedirectResult(result)) {\n      // Should never get here, redirects should get processed above, but we\n      // keep this to type narrow to a success result in the else\n      invariant(false, "Unhandled fetcher revalidation redirect");\n    } else if (isDeferredResult(result)) {\n      // Should never get here, deferred data should be awaited for fetchers\n      // in resolveDeferredResults\n      invariant(false, "Unhandled fetcher deferred data");\n    } else {\n      let doneFetcher = getDoneFetcher(result.data);\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n  return {\n    loaderData,\n    errors\n  };\n}\nfunction mergeLoaderData(loaderData, newLoaderData, matches, errors) {\n  let mergedLoaderData = router_extends({}, newLoaderData);\n  for (let match of matches) {\n    let id = match.route.id;\n    if (newLoaderData.hasOwnProperty(id)) {\n      if (newLoaderData[id] !== undefined) {\n        mergedLoaderData[id] = newLoaderData[id];\n      }\n    } else if (loaderData[id] !== undefined && match.route.loader) {\n      // Preserve existing keys not included in newLoaderData and where a loader\n      // wasn\'t removed by HMR\n      mergedLoaderData[id] = loaderData[id];\n    }\n    if (errors && errors.hasOwnProperty(id)) {\n      // Don\'t keep any loader data below the boundary\n      break;\n    }\n  }\n  return mergedLoaderData;\n}\n// Find the nearest error boundary, looking upwards from the leaf route (or the\n// route specified by routeId) for the closest ancestor error boundary,\n// defaulting to the root match\nfunction findNearestBoundary(matches, routeId) {\n  let eligibleMatches = routeId ? matches.slice(0, matches.findIndex(m => m.route.id === routeId) + 1) : [...matches];\n  return eligibleMatches.reverse().find(m => m.route.hasErrorBoundary === true) || matches[0];\n}\nfunction getShortCircuitMatches(routes) {\n  // Prefer a root layout route if present, otherwise shim in a route object\n  let route = routes.length === 1 ? routes[0] : routes.find(r => r.index || !r.path || r.path === "/") || {\n    id: "__shim-error-route__"\n  };\n  return {\n    matches: [{\n      params: {},\n      pathname: "",\n      pathnameBase: "",\n      route\n    }],\n    route\n  };\n}\nfunction getInternalRouterError(status, _temp5) {\n  let {\n    pathname,\n    routeId,\n    method,\n    type\n  } = _temp5 === void 0 ? {} : _temp5;\n  let statusText = "Unknown Server Error";\n  let errorMessage = "Unknown @remix-run/router error";\n  if (status === 400) {\n    statusText = "Bad Request";\n    if (method && pathname && routeId) {\n      errorMessage = "You made a " + method + " request to \\"" + pathname + "\\" but " + ("did not provide a `loader` for route \\"" + routeId + "\\", ") + "so there is no way to handle the request.";\n    } else if (type === "defer-action") {\n      errorMessage = "defer() is not supported in actions";\n    } else if (type === "invalid-body") {\n      errorMessage = "Unable to encode submission body";\n    }\n  } else if (status === 403) {\n    statusText = "Forbidden";\n    errorMessage = "Route \\"" + routeId + "\\" does not match URL \\"" + pathname + "\\"";\n  } else if (status === 404) {\n    statusText = "Not Found";\n    errorMessage = "No route matches URL \\"" + pathname + "\\"";\n  } else if (status === 405) {\n    statusText = "Method Not Allowed";\n    if (method && pathname && routeId) {\n      errorMessage = "You made a " + method.toUpperCase() + " request to \\"" + pathname + "\\" but " + ("did not provide an `action` for route \\"" + routeId + "\\", ") + "so there is no way to handle the request.";\n    } else if (method) {\n      errorMessage = "Invalid request method \\"" + method.toUpperCase() + "\\"";\n    }\n  }\n  return new ErrorResponseImpl(status || 500, statusText, new Error(errorMessage), true);\n}\n// Find any returned redirect errors, starting from the lowest match\nfunction findRedirect(results) {\n  for (let i = results.length - 1; i >= 0; i--) {\n    let result = results[i];\n    if (isRedirectResult(result)) {\n      return {\n        result,\n        idx: i\n      };\n    }\n  }\n}\nfunction stripHashFromPath(path) {\n  let parsedPath = typeof path === "string" ? parsePath(path) : path;\n  return router_createPath(router_extends({}, parsedPath, {\n    hash: ""\n  }));\n}\nfunction isHashChangeOnly(a, b) {\n  if (a.pathname !== b.pathname || a.search !== b.search) {\n    return false;\n  }\n  if (a.hash === "") {\n    // /page -> /page#hash\n    return b.hash !== "";\n  } else if (a.hash === b.hash) {\n    // /page#hash -> /page#hash\n    return true;\n  } else if (b.hash !== "") {\n    // /page#hash -> /page#other\n    return true;\n  }\n  // If the hash is removed the browser will re-perform a request to the server\n  // /page#hash -> /page\n  return false;\n}\nfunction isDeferredResult(result) {\n  return result.type === ResultType.deferred;\n}\nfunction isErrorResult(result) {\n  return result.type === ResultType.error;\n}\nfunction isRedirectResult(result) {\n  return (result && result.type) === ResultType.redirect;\n}\nfunction isDeferredData(value) {\n  let deferred = value;\n  return deferred && typeof deferred === "object" && typeof deferred.data === "object" && typeof deferred.subscribe === "function" && typeof deferred.cancel === "function" && typeof deferred.resolveData === "function";\n}\nfunction isResponse(value) {\n  return value != null && typeof value.status === "number" && typeof value.statusText === "string" && typeof value.headers === "object" && typeof value.body !== "undefined";\n}\nfunction isRedirectResponse(result) {\n  if (!isResponse(result)) {\n    return false;\n  }\n  let status = result.status;\n  let location = result.headers.get("Location");\n  return status >= 300 && status <= 399 && location != null;\n}\nfunction isQueryRouteResponse(obj) {\n  return obj && isResponse(obj.response) && (obj.type === ResultType.data || obj.type === ResultType.error);\n}\nfunction isValidMethod(method) {\n  return validRequestMethods.has(method.toLowerCase());\n}\nfunction isMutationMethod(method) {\n  return validMutationMethods.has(method.toLowerCase());\n}\nasync function resolveDeferredResults(currentMatches, matchesToLoad, results, signals, isFetcher, currentLoaderData) {\n  for (let index = 0; index < results.length; index++) {\n    let result = results[index];\n    let match = matchesToLoad[index];\n    // If we don\'t have a match, then we can have a deferred result to do\n    // anything with.  This is for revalidating fetchers where the route was\n    // removed during HMR\n    if (!match) {\n      continue;\n    }\n    let currentMatch = currentMatches.find(m => m.route.id === match.route.id);\n    let isRevalidatingLoader = currentMatch != null && !isNewRouteInstance(currentMatch, match) && (currentLoaderData && currentLoaderData[match.route.id]) !== undefined;\n    if (isDeferredResult(result) && (isFetcher || isRevalidatingLoader)) {\n      // Note: we do not have to touch activeDeferreds here since we race them\n      // against the signal in resolveDeferredData and they\'ll get aborted\n      // there if needed\n      let signal = signals[index];\n      invariant(signal, "Expected an AbortSignal for revalidating fetcher deferred result");\n      await resolveDeferredData(result, signal, isFetcher).then(result => {\n        if (result) {\n          results[index] = result || results[index];\n        }\n      });\n    }\n  }\n}\nasync function resolveDeferredData(result, signal, unwrap) {\n  if (unwrap === void 0) {\n    unwrap = false;\n  }\n  let aborted = await result.deferredData.resolveData(signal);\n  if (aborted) {\n    return;\n  }\n  if (unwrap) {\n    try {\n      return {\n        type: ResultType.data,\n        data: result.deferredData.unwrappedData\n      };\n    } catch (e) {\n      // Handle any TrackedPromise._error values encountered while unwrapping\n      return {\n        type: ResultType.error,\n        error: e\n      };\n    }\n  }\n  return {\n    type: ResultType.data,\n    data: result.deferredData.data\n  };\n}\nfunction hasNakedIndexQuery(search) {\n  return new URLSearchParams(search).getAll("index").some(v => v === "");\n}\nfunction getTargetMatch(matches, location) {\n  let search = typeof location === "string" ? parsePath(location).search : location.search;\n  if (matches[matches.length - 1].route.index && hasNakedIndexQuery(search || "")) {\n    // Return the leaf index route when index is present\n    return matches[matches.length - 1];\n  }\n  // Otherwise grab the deepest "path contributing" match (ignoring index and\n  // pathless layout routes)\n  let pathMatches = getPathContributingMatches(matches);\n  return pathMatches[pathMatches.length - 1];\n}\nfunction getSubmissionFromNavigation(navigation) {\n  let {\n    formMethod,\n    formAction,\n    formEncType,\n    text,\n    formData,\n    json\n  } = navigation;\n  if (!formMethod || !formAction || !formEncType) {\n    return;\n  }\n  if (text != null) {\n    return {\n      formMethod,\n      formAction,\n      formEncType,\n      formData: undefined,\n      json: undefined,\n      text\n    };\n  } else if (formData != null) {\n    return {\n      formMethod,\n      formAction,\n      formEncType,\n      formData,\n      json: undefined,\n      text: undefined\n    };\n  } else if (json !== undefined) {\n    return {\n      formMethod,\n      formAction,\n      formEncType,\n      formData: undefined,\n      json,\n      text: undefined\n    };\n  }\n}\nfunction getLoadingNavigation(location, submission) {\n  if (submission) {\n    let navigation = {\n      state: "loading",\n      location,\n      formMethod: submission.formMethod,\n      formAction: submission.formAction,\n      formEncType: submission.formEncType,\n      formData: submission.formData,\n      json: submission.json,\n      text: submission.text\n    };\n    return navigation;\n  } else {\n    let navigation = {\n      state: "loading",\n      location,\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      json: undefined,\n      text: undefined\n    };\n    return navigation;\n  }\n}\nfunction getSubmittingNavigation(location, submission) {\n  let navigation = {\n    state: "submitting",\n    location,\n    formMethod: submission.formMethod,\n    formAction: submission.formAction,\n    formEncType: submission.formEncType,\n    formData: submission.formData,\n    json: submission.json,\n    text: submission.text\n  };\n  return navigation;\n}\nfunction getLoadingFetcher(submission, data) {\n  if (submission) {\n    let fetcher = {\n      state: "loading",\n      formMethod: submission.formMethod,\n      formAction: submission.formAction,\n      formEncType: submission.formEncType,\n      formData: submission.formData,\n      json: submission.json,\n      text: submission.text,\n      data\n    };\n    return fetcher;\n  } else {\n    let fetcher = {\n      state: "loading",\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      json: undefined,\n      text: undefined,\n      data\n    };\n    return fetcher;\n  }\n}\nfunction getSubmittingFetcher(submission, existingFetcher) {\n  let fetcher = {\n    state: "submitting",\n    formMethod: submission.formMethod,\n    formAction: submission.formAction,\n    formEncType: submission.formEncType,\n    formData: submission.formData,\n    json: submission.json,\n    text: submission.text,\n    data: existingFetcher ? existingFetcher.data : undefined\n  };\n  return fetcher;\n}\nfunction getDoneFetcher(data) {\n  let fetcher = {\n    state: "idle",\n    formMethod: undefined,\n    formAction: undefined,\n    formEncType: undefined,\n    formData: undefined,\n    json: undefined,\n    text: undefined,\n    data\n  };\n  return fetcher;\n}\nfunction restoreAppliedTransitions(_window, transitions) {\n  try {\n    let sessionPositions = _window.sessionStorage.getItem(TRANSITIONS_STORAGE_KEY);\n    if (sessionPositions) {\n      let json = JSON.parse(sessionPositions);\n      for (let [k, v] of Object.entries(json || {})) {\n        if (v && Array.isArray(v)) {\n          transitions.set(k, new Set(v || []));\n        }\n      }\n    }\n  } catch (e) {\n    // no-op, use default empty object\n  }\n}\nfunction persistAppliedTransitions(_window, transitions) {\n  if (transitions.size > 0) {\n    let json = {};\n    for (let [k, v] of transitions) {\n      json[k] = [...v];\n    }\n    try {\n      _window.sessionStorage.setItem(TRANSITIONS_STORAGE_KEY, JSON.stringify(json));\n    } catch (error) {\n      warning(false, "Failed to save applied view transitions in sessionStorage (" + error + ").");\n    }\n  }\n}\n//#endregion\n\n\n;// CONCATENATED MODULE: ./node_modules/react-router/dist/index.js\n/**\n * React Router v6.22.3\n *\n * Copyright (c) Remix Software Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.md file in the root directory of this source tree.\n *\n * @license MIT\n */\n\n\n\nfunction dist_extends() {\n  dist_extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return dist_extends.apply(this, arguments);\n}\n\n// Create react-specific types from the agnostic types in @remix-run/router to\n// export from react-router\nconst DataRouterContext = /*#__PURE__*/react.createContext(null);\nif (false) {}\nconst DataRouterStateContext = /*#__PURE__*/react.createContext(null);\nif (false) {}\nconst AwaitContext = /*#__PURE__*/react.createContext(null);\nif (false) {}\n\n/**\n * A Navigator is a "location changer"; it\'s how you get to different locations.\n *\n * Every history instance conforms to the Navigator interface, but the\n * distinction is useful primarily when it comes to the low-level `<Router>` API\n * where both the location and a navigator must be provided separately in order\n * to avoid "tearing" that may occur in a suspense-enabled app if the action\n * and/or location were to be read directly from the history instance.\n */\n\nconst NavigationContext = /*#__PURE__*/react.createContext(null);\nif (false) {}\nconst LocationContext = /*#__PURE__*/react.createContext(null);\nif (false) {}\nconst RouteContext = /*#__PURE__*/react.createContext({\n  outlet: null,\n  matches: [],\n  isDataRoute: false\n});\nif (false) {}\nconst RouteErrorContext = /*#__PURE__*/react.createContext(null);\nif (false) {}\n\n/**\n * Returns the full href for the given "to" value. This is useful for building\n * custom links that are also accessible and preserve right-click behavior.\n *\n * @see https://reactrouter.com/hooks/use-href\n */\nfunction dist_useHref(to, _temp) {\n  let {\n    relative\n  } = _temp === void 0 ? {} : _temp;\n  !useInRouterContext() ?  false ? 0 : UNSAFE_invariant(false) : void 0;\n  let {\n    basename,\n    navigator\n  } = React.useContext(NavigationContext);\n  let {\n    hash,\n    pathname,\n    search\n  } = dist_useResolvedPath(to, {\n    relative\n  });\n  let joinedPathname = pathname;\n\n  // If we\'re operating within a basename, prepend it to the pathname prior\n  // to creating the href.  If this is a root navigation, then just use the raw\n  // basename which allows the basename to have full control over the presence\n  // of a trailing slash on root links\n  if (basename !== "/") {\n    joinedPathname = pathname === "/" ? basename : joinPaths([basename, pathname]);\n  }\n  return navigator.createHref({\n    pathname: joinedPathname,\n    search,\n    hash\n  });\n}\n\n/**\n * Returns true if this component is a descendant of a `<Router>`.\n *\n * @see https://reactrouter.com/hooks/use-in-router-context\n */\nfunction useInRouterContext() {\n  return react.useContext(LocationContext) != null;\n}\n\n/**\n * Returns the current location object, which represents the current URL in web\n * browsers.\n *\n * Note: If you\'re using this it may mean you\'re doing some of your own\n * "routing" in your app, and we\'d like to know what your use case is. We may\n * be able to provide something higher-level to better suit your needs.\n *\n * @see https://reactrouter.com/hooks/use-location\n */\nfunction dist_useLocation() {\n  !useInRouterContext() ?  false ? 0 : invariant(false) : void 0;\n  return react.useContext(LocationContext).location;\n}\n\n/**\n * Returns the current navigation action which describes how the router came to\n * the current location, either by a pop, push, or replace on the history stack.\n *\n * @see https://reactrouter.com/hooks/use-navigation-type\n */\nfunction useNavigationType() {\n  return React.useContext(LocationContext).navigationType;\n}\n\n/**\n * Returns a PathMatch object if the given pattern matches the current URL.\n * This is useful for components that need to know "active" state, e.g.\n * `<NavLink>`.\n *\n * @see https://reactrouter.com/hooks/use-match\n */\nfunction useMatch(pattern) {\n  !useInRouterContext() ?  false ? 0 : UNSAFE_invariant(false) : void 0;\n  let {\n    pathname\n  } = dist_useLocation();\n  return React.useMemo(() => matchPath(pattern, pathname), [pathname, pattern]);\n}\n\n/**\n * The interface for the navigate() function returned from useNavigate().\n */\n\nconst navigateEffectWarning = (/* unused pure expression or super */ null && ("You should call navigate() in a React.useEffect(), not when " + "your component is first rendered."));\n\n// Mute warnings for calls to useNavigate in SSR environments\nfunction useIsomorphicLayoutEffect(cb) {\n  let isStatic = react.useContext(NavigationContext).static;\n  if (!isStatic) {\n    // We should be able to get rid of this once react 18.3 is released\n    // See: https://github.com/facebook/react/pull/26395\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    react.useLayoutEffect(cb);\n  }\n}\n\n/**\n * Returns an imperative method for changing the location. Used by `<Link>`s, but\n * may also be used by other elements to change the location.\n *\n * @see https://reactrouter.com/hooks/use-navigate\n */\nfunction dist_useNavigate() {\n  let {\n    isDataRoute\n  } = react.useContext(RouteContext);\n  // Conditional usage is OK here because the usage of a data router is static\n  // eslint-disable-next-line react-hooks/rules-of-hooks\n  return isDataRoute ? useNavigateStable() : useNavigateUnstable();\n}\nfunction useNavigateUnstable() {\n  !useInRouterContext() ?  false ? 0 : invariant(false) : void 0;\n  let dataRouterContext = react.useContext(DataRouterContext);\n  let {\n    basename,\n    future,\n    navigator\n  } = react.useContext(NavigationContext);\n  let {\n    matches\n  } = react.useContext(RouteContext);\n  let {\n    pathname: locationPathname\n  } = dist_useLocation();\n  let routePathnamesJson = JSON.stringify(getResolveToMatches(matches, future.v7_relativeSplatPath));\n  let activeRef = react.useRef(false);\n  useIsomorphicLayoutEffect(() => {\n    activeRef.current = true;\n  });\n  let navigate = react.useCallback(function (to, options) {\n    if (options === void 0) {\n      options = {};\n    }\n     false ? 0 : void 0;\n\n    // Short circuit here since if this happens on first render the navigate\n    // is useless because we haven\'t wired up our history listener yet\n    if (!activeRef.current) return;\n    if (typeof to === "number") {\n      navigator.go(to);\n      return;\n    }\n    let path = router_resolveTo(to, JSON.parse(routePathnamesJson), locationPathname, options.relative === "path");\n\n    // If we\'re operating within a basename, prepend it to the pathname prior\n    // to handing off to history (but only if we\'re not in a data router,\n    // otherwise it\'ll prepend the basename inside of the router).\n    // If this is a root navigation, then we navigate to the raw basename\n    // which allows the basename to have full control over the presence of a\n    // trailing slash on root links\n    if (dataRouterContext == null && basename !== "/") {\n      path.pathname = path.pathname === "/" ? basename : router_joinPaths([basename, path.pathname]);\n    }\n    (!!options.replace ? navigator.replace : navigator.push)(path, options.state, options);\n  }, [basename, navigator, routePathnamesJson, locationPathname, dataRouterContext]);\n  return navigate;\n}\nconst OutletContext = /*#__PURE__*/react.createContext(null);\n\n/**\n * Returns the context (if provided) for the child route at this level of the route\n * hierarchy.\n * @see https://reactrouter.com/hooks/use-outlet-context\n */\nfunction useOutletContext() {\n  return React.useContext(OutletContext);\n}\n\n/**\n * Returns the element for the child route at this level of the route\n * hierarchy. Used internally by `<Outlet>` to render child routes.\n *\n * @see https://reactrouter.com/hooks/use-outlet\n */\nfunction useOutlet(context) {\n  let outlet = react.useContext(RouteContext).outlet;\n  if (outlet) {\n    return /*#__PURE__*/react.createElement(OutletContext.Provider, {\n      value: context\n    }, outlet);\n  }\n  return outlet;\n}\n\n/**\n * Returns an object of key/value pairs of the dynamic params from the current\n * URL that were matched by the route path.\n *\n * @see https://reactrouter.com/hooks/use-params\n */\nfunction useParams() {\n  let {\n    matches\n  } = react.useContext(RouteContext);\n  let routeMatch = matches[matches.length - 1];\n  return routeMatch ? routeMatch.params : {};\n}\n\n/**\n * Resolves the pathname of the given `to` value against the current location.\n *\n * @see https://reactrouter.com/hooks/use-resolved-path\n */\nfunction dist_useResolvedPath(to, _temp2) {\n  let {\n    relative\n  } = _temp2 === void 0 ? {} : _temp2;\n  let {\n    future\n  } = React.useContext(NavigationContext);\n  let {\n    matches\n  } = React.useContext(RouteContext);\n  let {\n    pathname: locationPathname\n  } = dist_useLocation();\n  let routePathnamesJson = JSON.stringify(UNSAFE_getResolveToMatches(matches, future.v7_relativeSplatPath));\n  return React.useMemo(() => resolveTo(to, JSON.parse(routePathnamesJson), locationPathname, relative === "path"), [to, routePathnamesJson, locationPathname, relative]);\n}\n\n/**\n * Returns the element of the route that matched the current location, prepared\n * with the correct context to render the remainder of the route tree. Route\n * elements in the tree must render an `<Outlet>` to render their child route\'s\n * element.\n *\n * @see https://reactrouter.com/hooks/use-routes\n */\nfunction useRoutes(routes, locationArg) {\n  return useRoutesImpl(routes, locationArg);\n}\n\n// Internal implementation with accept optional param for RouterProvider usage\nfunction useRoutesImpl(routes, locationArg, dataRouterState, future) {\n  !useInRouterContext() ?  false ? 0 : invariant(false) : void 0;\n  let {\n    navigator\n  } = react.useContext(NavigationContext);\n  let {\n    matches: parentMatches\n  } = react.useContext(RouteContext);\n  let routeMatch = parentMatches[parentMatches.length - 1];\n  let parentParams = routeMatch ? routeMatch.params : {};\n  let parentPathname = routeMatch ? routeMatch.pathname : "/";\n  let parentPathnameBase = routeMatch ? routeMatch.pathnameBase : "/";\n  let parentRoute = routeMatch && routeMatch.route;\n  if (false) {}\n  let locationFromContext = dist_useLocation();\n  let location;\n  if (locationArg) {\n    var _parsedLocationArg$pa;\n    let parsedLocationArg = typeof locationArg === "string" ? parsePath(locationArg) : locationArg;\n    !(parentPathnameBase === "/" || ((_parsedLocationArg$pa = parsedLocationArg.pathname) == null ? void 0 : _parsedLocationArg$pa.startsWith(parentPathnameBase))) ?  false ? 0 : invariant(false) : void 0;\n    location = parsedLocationArg;\n  } else {\n    location = locationFromContext;\n  }\n  let pathname = location.pathname || "/";\n  let remainingPathname = pathname;\n  if (parentPathnameBase !== "/") {\n    // Determine the remaining pathname by removing the # of URL segments the\n    // parentPathnameBase has, instead of removing based on character count.\n    // This is because we can\'t guarantee that incoming/outgoing encodings/\n    // decodings will match exactly.\n    // We decode paths before matching on a per-segment basis with\n    // decodeURIComponent(), but we re-encode pathnames via `new URL()` so they\n    // match what `window.location.pathname` would reflect.  Those don\'t 100%\n    // align when it comes to encoded URI characters such as % and &.\n    //\n    // So we may end up with:\n    //   pathname:           "/descendant/a%25b/match"\n    //   parentPathnameBase: "/descendant/a%b"\n    //\n    // And the direct substring removal approach won\'t work :/\n    let parentSegments = parentPathnameBase.replace(/^\\//, "").split("/");\n    let segments = pathname.replace(/^\\//, "").split("/");\n    remainingPathname = "/" + segments.slice(parentSegments.length).join("/");\n  }\n  let matches = matchRoutes(routes, {\n    pathname: remainingPathname\n  });\n  if (false) {}\n  let renderedMatches = _renderMatches(matches && matches.map(match => Object.assign({}, match, {\n    params: Object.assign({}, parentParams, match.params),\n    pathname: router_joinPaths([parentPathnameBase,\n    // Re-encode pathnames that were decoded inside matchRoutes\n    navigator.encodeLocation ? navigator.encodeLocation(match.pathname).pathname : match.pathname]),\n    pathnameBase: match.pathnameBase === "/" ? parentPathnameBase : router_joinPaths([parentPathnameBase,\n    // Re-encode pathnames that were decoded inside matchRoutes\n    navigator.encodeLocation ? navigator.encodeLocation(match.pathnameBase).pathname : match.pathnameBase])\n  })), parentMatches, dataRouterState, future);\n\n  // When a user passes in a `locationArg`, the associated routes need to\n  // be wrapped in a new `LocationContext.Provider` in order for `useLocation`\n  // to use the scoped location instead of the global location.\n  if (locationArg && renderedMatches) {\n    return /*#__PURE__*/react.createElement(LocationContext.Provider, {\n      value: {\n        location: dist_extends({\n          pathname: "/",\n          search: "",\n          hash: "",\n          state: null,\n          key: "default"\n        }, location),\n        navigationType: Action.Pop\n      }\n    }, renderedMatches);\n  }\n  return renderedMatches;\n}\nfunction DefaultErrorComponent() {\n  let error = useRouteError();\n  let message = isRouteErrorResponse(error) ? error.status + " " + error.statusText : error instanceof Error ? error.message : JSON.stringify(error);\n  let stack = error instanceof Error ? error.stack : null;\n  let lightgrey = "rgba(200,200,200, 0.5)";\n  let preStyles = {\n    padding: "0.5rem",\n    backgroundColor: lightgrey\n  };\n  let codeStyles = {\n    padding: "2px 4px",\n    backgroundColor: lightgrey\n  };\n  let devInfo = null;\n  if (false) {}\n  return /*#__PURE__*/react.createElement(react.Fragment, null, /*#__PURE__*/react.createElement("h2", null, "Unexpected Application Error!"), /*#__PURE__*/react.createElement("h3", {\n    style: {\n      fontStyle: "italic"\n    }\n  }, message), stack ? /*#__PURE__*/react.createElement("pre", {\n    style: preStyles\n  }, stack) : null, devInfo);\n}\nconst defaultErrorElement = /*#__PURE__*/react.createElement(DefaultErrorComponent, null);\nclass RenderErrorBoundary extends react.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      location: props.location,\n      revalidation: props.revalidation,\n      error: props.error\n    };\n  }\n  static getDerivedStateFromError(error) {\n    return {\n      error: error\n    };\n  }\n  static getDerivedStateFromProps(props, state) {\n    // When we get into an error state, the user will likely click "back" to the\n    // previous page that didn\'t have an error. Because this wraps the entire\n    // application, that will have no effect--the error page continues to display.\n    // This gives us a mechanism to recover from the error when the location changes.\n    //\n    // Whether we\'re in an error state or not, we update the location in state\n    // so that when we are in an error state, it gets reset when a new location\n    // comes in and the user recovers from the error.\n    if (state.location !== props.location || state.revalidation !== "idle" && props.revalidation === "idle") {\n      return {\n        error: props.error,\n        location: props.location,\n        revalidation: props.revalidation\n      };\n    }\n\n    // If we\'re not changing locations, preserve the location but still surface\n    // any new errors that may come through. We retain the existing error, we do\n    // this because the error provided from the app state may be cleared without\n    // the location changing.\n    return {\n      error: props.error !== undefined ? props.error : state.error,\n      location: state.location,\n      revalidation: props.revalidation || state.revalidation\n    };\n  }\n  componentDidCatch(error, errorInfo) {\n    console.error("React Router caught the following error during render", error, errorInfo);\n  }\n  render() {\n    return this.state.error !== undefined ? /*#__PURE__*/react.createElement(RouteContext.Provider, {\n      value: this.props.routeContext\n    }, /*#__PURE__*/react.createElement(RouteErrorContext.Provider, {\n      value: this.state.error,\n      children: this.props.component\n    })) : this.props.children;\n  }\n}\nfunction RenderedRoute(_ref) {\n  let {\n    routeContext,\n    match,\n    children\n  } = _ref;\n  let dataRouterContext = react.useContext(DataRouterContext);\n\n  // Track how deep we got in our render pass to emulate SSR componentDidCatch\n  // in a DataStaticRouter\n  if (dataRouterContext && dataRouterContext.static && dataRouterContext.staticContext && (match.route.errorElement || match.route.ErrorBoundary)) {\n    dataRouterContext.staticContext._deepestRenderedBoundaryId = match.route.id;\n  }\n  return /*#__PURE__*/react.createElement(RouteContext.Provider, {\n    value: routeContext\n  }, children);\n}\nfunction _renderMatches(matches, parentMatches, dataRouterState, future) {\n  var _dataRouterState2;\n  if (parentMatches === void 0) {\n    parentMatches = [];\n  }\n  if (dataRouterState === void 0) {\n    dataRouterState = null;\n  }\n  if (future === void 0) {\n    future = null;\n  }\n  if (matches == null) {\n    var _dataRouterState;\n    if ((_dataRouterState = dataRouterState) != null && _dataRouterState.errors) {\n      // Don\'t bail if we have data router errors so we can render them in the\n      // boundary.  Use the pre-matched (or shimmed) matches\n      matches = dataRouterState.matches;\n    } else {\n      return null;\n    }\n  }\n  let renderedMatches = matches;\n\n  // If we have data errors, trim matches to the highest error boundary\n  let errors = (_dataRouterState2 = dataRouterState) == null ? void 0 : _dataRouterState2.errors;\n  if (errors != null) {\n    let errorIndex = renderedMatches.findIndex(m => m.route.id && (errors == null ? void 0 : errors[m.route.id]));\n    !(errorIndex >= 0) ?  false ? 0 : invariant(false) : void 0;\n    renderedMatches = renderedMatches.slice(0, Math.min(renderedMatches.length, errorIndex + 1));\n  }\n\n  // If we\'re in a partial hydration mode, detect if we need to render down to\n  // a given HydrateFallback while we load the rest of the hydration data\n  let renderFallback = false;\n  let fallbackIndex = -1;\n  if (dataRouterState && future && future.v7_partialHydration) {\n    for (let i = 0; i < renderedMatches.length; i++) {\n      let match = renderedMatches[i];\n      // Track the deepest fallback up until the first route without data\n      if (match.route.HydrateFallback || match.route.hydrateFallbackElement) {\n        fallbackIndex = i;\n      }\n      if (match.route.id) {\n        let {\n          loaderData,\n          errors\n        } = dataRouterState;\n        let needsToRunLoader = match.route.loader && loaderData[match.route.id] === undefined && (!errors || errors[match.route.id] === undefined);\n        if (match.route.lazy || needsToRunLoader) {\n          // We found the first route that\'s not ready to render (waiting on\n          // lazy, or has a loader that hasn\'t run yet).  Flag that we need to\n          // render a fallback and render up until the appropriate fallback\n          renderFallback = true;\n          if (fallbackIndex >= 0) {\n            renderedMatches = renderedMatches.slice(0, fallbackIndex + 1);\n          } else {\n            renderedMatches = [renderedMatches[0]];\n          }\n          break;\n        }\n      }\n    }\n  }\n  return renderedMatches.reduceRight((outlet, match, index) => {\n    // Only data routers handle errors/fallbacks\n    let error;\n    let shouldRenderHydrateFallback = false;\n    let errorElement = null;\n    let hydrateFallbackElement = null;\n    if (dataRouterState) {\n      error = errors && match.route.id ? errors[match.route.id] : undefined;\n      errorElement = match.route.errorElement || defaultErrorElement;\n      if (renderFallback) {\n        if (fallbackIndex < 0 && index === 0) {\n          warningOnce("route-fallback", false, "No `HydrateFallback` element provided to render during initial hydration");\n          shouldRenderHydrateFallback = true;\n          hydrateFallbackElement = null;\n        } else if (fallbackIndex === index) {\n          shouldRenderHydrateFallback = true;\n          hydrateFallbackElement = match.route.hydrateFallbackElement || null;\n        }\n      }\n    }\n    let matches = parentMatches.concat(renderedMatches.slice(0, index + 1));\n    let getChildren = () => {\n      let children;\n      if (error) {\n        children = errorElement;\n      } else if (shouldRenderHydrateFallback) {\n        children = hydrateFallbackElement;\n      } else if (match.route.Component) {\n        // Note: This is a de-optimized path since React won\'t re-use the\n        // ReactElement since it\'s identity changes with each new\n        // React.createElement call.  We keep this so folks can use\n        // `<Route Component={...}>` in `<Routes>` but generally `Component`\n        // usage is only advised in `RouterProvider` when we can convert it to\n        // `element` ahead of time.\n        children = /*#__PURE__*/react.createElement(match.route.Component, null);\n      } else if (match.route.element) {\n        children = match.route.element;\n      } else {\n        children = outlet;\n      }\n      return /*#__PURE__*/react.createElement(RenderedRoute, {\n        match: match,\n        routeContext: {\n          outlet,\n          matches,\n          isDataRoute: dataRouterState != null\n        },\n        children: children\n      });\n    };\n    // Only wrap in an error boundary within data router usages when we have an\n    // ErrorBoundary/errorElement on this route.  Otherwise let it bubble up to\n    // an ancestor ErrorBoundary/errorElement\n    return dataRouterState && (match.route.ErrorBoundary || match.route.errorElement || index === 0) ? /*#__PURE__*/react.createElement(RenderErrorBoundary, {\n      location: dataRouterState.location,\n      revalidation: dataRouterState.revalidation,\n      component: errorElement,\n      error: error,\n      children: getChildren(),\n      routeContext: {\n        outlet: null,\n        matches,\n        isDataRoute: true\n      }\n    }) : getChildren();\n  }, null);\n}\nvar DataRouterHook = /*#__PURE__*/function (DataRouterHook) {\n  DataRouterHook["UseBlocker"] = "useBlocker";\n  DataRouterHook["UseRevalidator"] = "useRevalidator";\n  DataRouterHook["UseNavigateStable"] = "useNavigate";\n  return DataRouterHook;\n}(DataRouterHook || {});\nvar DataRouterStateHook = /*#__PURE__*/function (DataRouterStateHook) {\n  DataRouterStateHook["UseBlocker"] = "useBlocker";\n  DataRouterStateHook["UseLoaderData"] = "useLoaderData";\n  DataRouterStateHook["UseActionData"] = "useActionData";\n  DataRouterStateHook["UseRouteError"] = "useRouteError";\n  DataRouterStateHook["UseNavigation"] = "useNavigation";\n  DataRouterStateHook["UseRouteLoaderData"] = "useRouteLoaderData";\n  DataRouterStateHook["UseMatches"] = "useMatches";\n  DataRouterStateHook["UseRevalidator"] = "useRevalidator";\n  DataRouterStateHook["UseNavigateStable"] = "useNavigate";\n  DataRouterStateHook["UseRouteId"] = "useRouteId";\n  return DataRouterStateHook;\n}(DataRouterStateHook || {});\nfunction getDataRouterConsoleError(hookName) {\n  return hookName + " must be used within a data router.  See https://reactrouter.com/routers/picking-a-router.";\n}\nfunction useDataRouterContext(hookName) {\n  let ctx = react.useContext(DataRouterContext);\n  !ctx ?  false ? 0 : invariant(false) : void 0;\n  return ctx;\n}\nfunction useDataRouterState(hookName) {\n  let state = react.useContext(DataRouterStateContext);\n  !state ?  false ? 0 : invariant(false) : void 0;\n  return state;\n}\nfunction useRouteContext(hookName) {\n  let route = react.useContext(RouteContext);\n  !route ?  false ? 0 : invariant(false) : void 0;\n  return route;\n}\n\n// Internal version with hookName-aware debugging\nfunction useCurrentRouteId(hookName) {\n  let route = useRouteContext(hookName);\n  let thisRoute = route.matches[route.matches.length - 1];\n  !thisRoute.route.id ?  false ? 0 : invariant(false) : void 0;\n  return thisRoute.route.id;\n}\n\n/**\n * Returns the ID for the nearest contextual route\n */\nfunction useRouteId() {\n  return useCurrentRouteId(DataRouterStateHook.UseRouteId);\n}\n\n/**\n * Returns the current navigation, defaulting to an "idle" navigation when\n * no navigation is in progress\n */\nfunction dist_useNavigation() {\n  let state = useDataRouterState(DataRouterStateHook.UseNavigation);\n  return state.navigation;\n}\n\n/**\n * Returns a revalidate function for manually triggering revalidation, as well\n * as the current state of any manual revalidations\n */\nfunction useRevalidator() {\n  let dataRouterContext = useDataRouterContext(DataRouterHook.UseRevalidator);\n  let state = useDataRouterState(DataRouterStateHook.UseRevalidator);\n  return React.useMemo(() => ({\n    revalidate: dataRouterContext.router.revalidate,\n    state: state.revalidation\n  }), [dataRouterContext.router.revalidate, state.revalidation]);\n}\n\n/**\n * Returns the active route matches, useful for accessing loaderData for\n * parent/child routes or the route "handle" property\n */\nfunction dist_useMatches() {\n  let {\n    matches,\n    loaderData\n  } = useDataRouterState(DataRouterStateHook.UseMatches);\n  return React.useMemo(() => matches.map(m => UNSAFE_convertRouteMatchToUiMatch(m, loaderData)), [matches, loaderData]);\n}\n\n/**\n * Returns the loader data for the nearest ancestor Route loader\n */\nfunction useLoaderData() {\n  let state = useDataRouterState(DataRouterStateHook.UseLoaderData);\n  let routeId = useCurrentRouteId(DataRouterStateHook.UseLoaderData);\n  if (state.errors && state.errors[routeId] != null) {\n    console.error("You cannot `useLoaderData` in an errorElement (routeId: " + routeId + ")");\n    return undefined;\n  }\n  return state.loaderData[routeId];\n}\n\n/**\n * Returns the loaderData for the given routeId\n */\nfunction useRouteLoaderData(routeId) {\n  let state = useDataRouterState(DataRouterStateHook.UseRouteLoaderData);\n  return state.loaderData[routeId];\n}\n\n/**\n * Returns the action data for the nearest ancestor Route action\n */\nfunction useActionData() {\n  let state = useDataRouterState(DataRouterStateHook.UseActionData);\n  let routeId = useCurrentRouteId(DataRouterStateHook.UseLoaderData);\n  return state.actionData ? state.actionData[routeId] : undefined;\n}\n\n/**\n * Returns the nearest ancestor Route error, which could be a loader/action\n * error or a render error.  This is intended to be called from your\n * ErrorBoundary/errorElement to display a proper error message.\n */\nfunction useRouteError() {\n  var _state$errors;\n  let error = react.useContext(RouteErrorContext);\n  let state = useDataRouterState(DataRouterStateHook.UseRouteError);\n  let routeId = useCurrentRouteId(DataRouterStateHook.UseRouteError);\n\n  // If this was a render error, we put it in a RouteError context inside\n  // of RenderErrorBoundary\n  if (error !== undefined) {\n    return error;\n  }\n\n  // Otherwise look for errors from our data router state\n  return (_state$errors = state.errors) == null ? void 0 : _state$errors[routeId];\n}\n\n/**\n * Returns the happy-path data from the nearest ancestor `<Await />` value\n */\nfunction useAsyncValue() {\n  let value = React.useContext(AwaitContext);\n  return value == null ? void 0 : value._data;\n}\n\n/**\n * Returns the error from the nearest ancestor `<Await />` value\n */\nfunction useAsyncError() {\n  let value = React.useContext(AwaitContext);\n  return value == null ? void 0 : value._error;\n}\nlet blockerId = 0;\n\n/**\n * Allow the application to block navigations within the SPA and present the\n * user a confirmation dialog to confirm the navigation.  Mostly used to avoid\n * using half-filled form data.  This does not handle hard-reloads or\n * cross-origin navigations.\n */\nfunction dist_useBlocker(shouldBlock) {\n  let {\n    router,\n    basename\n  } = useDataRouterContext(DataRouterHook.UseBlocker);\n  let state = useDataRouterState(DataRouterStateHook.UseBlocker);\n  let [blockerKey, setBlockerKey] = React.useState("");\n  let blockerFunction = React.useCallback(arg => {\n    if (typeof shouldBlock !== "function") {\n      return !!shouldBlock;\n    }\n    if (basename === "/") {\n      return shouldBlock(arg);\n    }\n\n    // If they provided us a function and we\'ve got an active basename, strip\n    // it from the locations we expose to the user to match the behavior of\n    // useLocation\n    let {\n      currentLocation,\n      nextLocation,\n      historyAction\n    } = arg;\n    return shouldBlock({\n      currentLocation: dist_extends({}, currentLocation, {\n        pathname: stripBasename(currentLocation.pathname, basename) || currentLocation.pathname\n      }),\n      nextLocation: dist_extends({}, nextLocation, {\n        pathname: stripBasename(nextLocation.pathname, basename) || nextLocation.pathname\n      }),\n      historyAction\n    });\n  }, [basename, shouldBlock]);\n\n  // This effect is in charge of blocker key assignment and deletion (which is\n  // tightly coupled to the key)\n  React.useEffect(() => {\n    let key = String(++blockerId);\n    setBlockerKey(key);\n    return () => router.deleteBlocker(key);\n  }, [router]);\n\n  // This effect handles assigning the blockerFunction.  This is to handle\n  // unstable blocker function identities, and happens only after the prior\n  // effect so we don\'t get an orphaned blockerFunction in the router with a\n  // key of "".  Until then we just have the IDLE_BLOCKER.\n  React.useEffect(() => {\n    if (blockerKey !== "") {\n      router.getBlocker(blockerKey, blockerFunction);\n    }\n  }, [router, blockerKey, blockerFunction]);\n\n  // Prefer the blocker from `state` not `router.state` since DataRouterContext\n  // is memoized so this ensures we update on blocker state updates\n  return blockerKey && state.blockers.has(blockerKey) ? state.blockers.get(blockerKey) : IDLE_BLOCKER;\n}\n\n/**\n * Stable version of useNavigate that is used when we are in the context of\n * a RouterProvider.\n */\nfunction useNavigateStable() {\n  let {\n    router\n  } = useDataRouterContext(DataRouterHook.UseNavigateStable);\n  let id = useCurrentRouteId(DataRouterStateHook.UseNavigateStable);\n  let activeRef = react.useRef(false);\n  useIsomorphicLayoutEffect(() => {\n    activeRef.current = true;\n  });\n  let navigate = react.useCallback(function (to, options) {\n    if (options === void 0) {\n      options = {};\n    }\n     false ? 0 : void 0;\n\n    // Short circuit here since if this happens on first render the navigate\n    // is useless because we haven\'t wired up our router subscriber yet\n    if (!activeRef.current) return;\n    if (typeof to === "number") {\n      router.navigate(to);\n    } else {\n      router.navigate(to, dist_extends({\n        fromRouteId: id\n      }, options));\n    }\n  }, [router, id]);\n  return navigate;\n}\nconst alreadyWarned = {};\nfunction warningOnce(key, cond, message) {\n  if (!cond && !alreadyWarned[key]) {\n    alreadyWarned[key] = true;\n     false ? 0 : void 0;\n  }\n}\n\n/**\n  Webpack + React 17 fails to compile on any of the following because webpack\n  complains that `startTransition` doesn\'t exist in `React`:\n  * import { startTransition } from "react"\n  * import * as React from from "react";\n    "startTransition" in React ? React.startTransition(() => setState()) : setState()\n  * import * as React from from "react";\n    "startTransition" in React ? React["startTransition"](() => setState()) : setState()\n\n  Moving it to a constant such as the following solves the Webpack/React 17 issue:\n  * import * as React from from "react";\n    const START_TRANSITION = "startTransition";\n    START_TRANSITION in React ? React[START_TRANSITION](() => setState()) : setState()\n\n  However, that introduces webpack/terser minification issues in production builds\n  in React 18 where minification/obfuscation ends up removing the call of\n  React.startTransition entirely from the first half of the ternary.  Grabbing\n  this exported reference once up front resolves that issue.\n\n  See https://github.com/remix-run/react-router/issues/10579\n*/\nconst START_TRANSITION = "startTransition";\nconst startTransitionImpl = react_namespaceObject[START_TRANSITION];\n\n/**\n * Given a Remix Router instance, render the appropriate UI\n */\nfunction RouterProvider(_ref) {\n  let {\n    fallbackElement,\n    router,\n    future\n  } = _ref;\n  let [state, setStateImpl] = React.useState(router.state);\n  let {\n    v7_startTransition\n  } = future || {};\n  let setState = React.useCallback(newState => {\n    if (v7_startTransition && startTransitionImpl) {\n      startTransitionImpl(() => setStateImpl(newState));\n    } else {\n      setStateImpl(newState);\n    }\n  }, [setStateImpl, v7_startTransition]);\n\n  // Need to use a layout effect here so we are subscribed early enough to\n  // pick up on any render-driven redirects/navigations (useEffect/<Navigate>)\n  React.useLayoutEffect(() => router.subscribe(setState), [router, setState]);\n  React.useEffect(() => {\n     false ? 0 : void 0;\n    // Only log this once on initial mount\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  let navigator = React.useMemo(() => {\n    return {\n      createHref: router.createHref,\n      encodeLocation: router.encodeLocation,\n      go: n => router.navigate(n),\n      push: (to, state, opts) => router.navigate(to, {\n        state,\n        preventScrollReset: opts == null ? void 0 : opts.preventScrollReset\n      }),\n      replace: (to, state, opts) => router.navigate(to, {\n        replace: true,\n        state,\n        preventScrollReset: opts == null ? void 0 : opts.preventScrollReset\n      })\n    };\n  }, [router]);\n  let basename = router.basename || "/";\n  let dataRouterContext = React.useMemo(() => ({\n    router,\n    navigator,\n    static: false,\n    basename\n  }), [router, navigator, basename]);\n\n  // The fragment and {null} here are important!  We need them to keep React 18\'s\n  // useId happy when we are server-rendering since we may have a <script> here\n  // containing the hydrated server-side staticContext (from StaticRouterProvider).\n  // useId relies on the component tree structure to generate deterministic id\'s\n  // so we need to ensure it remains the same on the client even though\n  // we don\'t need the <script> tag\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(DataRouterContext.Provider, {\n    value: dataRouterContext\n  }, /*#__PURE__*/React.createElement(DataRouterStateContext.Provider, {\n    value: state\n  }, /*#__PURE__*/React.createElement(dist_Router, {\n    basename: basename,\n    location: state.location,\n    navigationType: state.historyAction,\n    navigator: navigator,\n    future: {\n      v7_relativeSplatPath: router.future.v7_relativeSplatPath\n    }\n  }, state.initialized || router.future.v7_partialHydration ? /*#__PURE__*/React.createElement(DataRoutes, {\n    routes: router.routes,\n    future: router.future,\n    state: state\n  }) : fallbackElement))), null);\n}\nfunction DataRoutes(_ref2) {\n  let {\n    routes,\n    future,\n    state\n  } = _ref2;\n  return useRoutesImpl(routes, undefined, state, future);\n}\n/**\n * A `<Router>` that stores all entries in memory.\n *\n * @see https://reactrouter.com/router-components/memory-router\n */\nfunction MemoryRouter(_ref3) {\n  let {\n    basename,\n    children,\n    initialEntries,\n    initialIndex,\n    future\n  } = _ref3;\n  let historyRef = React.useRef();\n  if (historyRef.current == null) {\n    historyRef.current = createMemoryHistory({\n      initialEntries,\n      initialIndex,\n      v5Compat: true\n    });\n  }\n  let history = historyRef.current;\n  let [state, setStateImpl] = React.useState({\n    action: history.action,\n    location: history.location\n  });\n  let {\n    v7_startTransition\n  } = future || {};\n  let setState = React.useCallback(newState => {\n    v7_startTransition && startTransitionImpl ? startTransitionImpl(() => setStateImpl(newState)) : setStateImpl(newState);\n  }, [setStateImpl, v7_startTransition]);\n  React.useLayoutEffect(() => history.listen(setState), [history, setState]);\n  return /*#__PURE__*/React.createElement(dist_Router, {\n    basename: basename,\n    children: children,\n    location: state.location,\n    navigationType: state.action,\n    navigator: history,\n    future: future\n  });\n}\n/**\n * Changes the current location.\n *\n * Note: This API is mostly useful in React.Component subclasses that are not\n * able to use hooks. In functional components, we recommend you use the\n * `useNavigate` hook instead.\n *\n * @see https://reactrouter.com/components/navigate\n */\nfunction Navigate(_ref4) {\n  let {\n    to,\n    replace,\n    state,\n    relative\n  } = _ref4;\n  !useInRouterContext() ?  false ? 0 : invariant(false) : void 0;\n  let {\n    future,\n    static: isStatic\n  } = react.useContext(NavigationContext);\n   false ? 0 : void 0;\n  let {\n    matches\n  } = react.useContext(RouteContext);\n  let {\n    pathname: locationPathname\n  } = dist_useLocation();\n  let navigate = dist_useNavigate();\n\n  // Resolve the path outside of the effect so that when effects run twice in\n  // StrictMode they navigate to the same place\n  let path = router_resolveTo(to, getResolveToMatches(matches, future.v7_relativeSplatPath), locationPathname, relative === "path");\n  let jsonPath = JSON.stringify(path);\n  react.useEffect(() => navigate(JSON.parse(jsonPath), {\n    replace,\n    state,\n    relative\n  }), [navigate, jsonPath, relative, replace, state]);\n  return null;\n}\n/**\n * Renders the child route\'s element, if there is one.\n *\n * @see https://reactrouter.com/components/outlet\n */\nfunction Outlet(props) {\n  return useOutlet(props.context);\n}\n/**\n * Declares an element that should be rendered at a certain URL path.\n *\n * @see https://reactrouter.com/components/route\n */\nfunction Route(_props) {\n   false ? 0 : invariant(false);\n}\n/**\n * Provides location context for the rest of the app.\n *\n * Note: You usually won\'t render a `<Router>` directly. Instead, you\'ll render a\n * router that is more specific to your environment such as a `<BrowserRouter>`\n * in web browsers or a `<StaticRouter>` for server rendering.\n *\n * @see https://reactrouter.com/router-components/router\n */\nfunction dist_Router(_ref5) {\n  let {\n    basename: basenameProp = "/",\n    children = null,\n    location: locationProp,\n    navigationType = Action.Pop,\n    navigator,\n    static: staticProp = false,\n    future\n  } = _ref5;\n  !!useInRouterContext() ?  false ? 0 : invariant(false) : void 0;\n\n  // Preserve trailing slashes on basename, so we can let the user control\n  // the enforcement of trailing slashes throughout the app\n  let basename = basenameProp.replace(/^\\/*/, "/");\n  let navigationContext = react.useMemo(() => ({\n    basename,\n    navigator,\n    static: staticProp,\n    future: dist_extends({\n      v7_relativeSplatPath: false\n    }, future)\n  }), [basename, future, navigator, staticProp]);\n  if (typeof locationProp === "string") {\n    locationProp = parsePath(locationProp);\n  }\n  let {\n    pathname = "/",\n    search = "",\n    hash = "",\n    state = null,\n    key = "default"\n  } = locationProp;\n  let locationContext = react.useMemo(() => {\n    let trailingPathname = router_stripBasename(pathname, basename);\n    if (trailingPathname == null) {\n      return null;\n    }\n    return {\n      location: {\n        pathname: trailingPathname,\n        search,\n        hash,\n        state,\n        key\n      },\n      navigationType\n    };\n  }, [basename, pathname, search, hash, state, key, navigationType]);\n   false ? 0 : void 0;\n  if (locationContext == null) {\n    return null;\n  }\n  return /*#__PURE__*/react.createElement(NavigationContext.Provider, {\n    value: navigationContext\n  }, /*#__PURE__*/react.createElement(LocationContext.Provider, {\n    children: children,\n    value: locationContext\n  }));\n}\n/**\n * A container for a nested tree of `<Route>` elements that renders the branch\n * that best matches the current location.\n *\n * @see https://reactrouter.com/components/routes\n */\nfunction Routes(_ref6) {\n  let {\n    children,\n    location\n  } = _ref6;\n  return useRoutes(createRoutesFromChildren(children), location);\n}\n/**\n * Component to use for rendering lazily loaded data from returning defer()\n * in a loader function\n */\nfunction Await(_ref7) {\n  let {\n    children,\n    errorElement,\n    resolve\n  } = _ref7;\n  return /*#__PURE__*/React.createElement(AwaitErrorBoundary, {\n    resolve: resolve,\n    errorElement: errorElement\n  }, /*#__PURE__*/React.createElement(ResolveAwait, null, children));\n}\nvar AwaitRenderStatus = /*#__PURE__*/function (AwaitRenderStatus) {\n  AwaitRenderStatus[AwaitRenderStatus["pending"] = 0] = "pending";\n  AwaitRenderStatus[AwaitRenderStatus["success"] = 1] = "success";\n  AwaitRenderStatus[AwaitRenderStatus["error"] = 2] = "error";\n  return AwaitRenderStatus;\n}(AwaitRenderStatus || {});\nconst neverSettledPromise = new Promise(() => {});\nclass AwaitErrorBoundary extends react.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      error: null\n    };\n  }\n  static getDerivedStateFromError(error) {\n    return {\n      error\n    };\n  }\n  componentDidCatch(error, errorInfo) {\n    console.error("<Await> caught the following error during render", error, errorInfo);\n  }\n  render() {\n    let {\n      children,\n      errorElement,\n      resolve\n    } = this.props;\n    let promise = null;\n    let status = AwaitRenderStatus.pending;\n    if (!(resolve instanceof Promise)) {\n      // Didn\'t get a promise - provide as a resolved promise\n      status = AwaitRenderStatus.success;\n      promise = Promise.resolve();\n      Object.defineProperty(promise, "_tracked", {\n        get: () => true\n      });\n      Object.defineProperty(promise, "_data", {\n        get: () => resolve\n      });\n    } else if (this.state.error) {\n      // Caught a render error, provide it as a rejected promise\n      status = AwaitRenderStatus.error;\n      let renderError = this.state.error;\n      promise = Promise.reject().catch(() => {}); // Avoid unhandled rejection warnings\n      Object.defineProperty(promise, "_tracked", {\n        get: () => true\n      });\n      Object.defineProperty(promise, "_error", {\n        get: () => renderError\n      });\n    } else if (resolve._tracked) {\n      // Already tracked promise - check contents\n      promise = resolve;\n      status = promise._error !== undefined ? AwaitRenderStatus.error : promise._data !== undefined ? AwaitRenderStatus.success : AwaitRenderStatus.pending;\n    } else {\n      // Raw (untracked) promise - track it\n      status = AwaitRenderStatus.pending;\n      Object.defineProperty(resolve, "_tracked", {\n        get: () => true\n      });\n      promise = resolve.then(data => Object.defineProperty(resolve, "_data", {\n        get: () => data\n      }), error => Object.defineProperty(resolve, "_error", {\n        get: () => error\n      }));\n    }\n    if (status === AwaitRenderStatus.error && promise._error instanceof AbortedDeferredError) {\n      // Freeze the UI by throwing a never resolved promise\n      throw neverSettledPromise;\n    }\n    if (status === AwaitRenderStatus.error && !errorElement) {\n      // No errorElement, throw to the nearest route-level error boundary\n      throw promise._error;\n    }\n    if (status === AwaitRenderStatus.error) {\n      // Render via our errorElement\n      return /*#__PURE__*/react.createElement(AwaitContext.Provider, {\n        value: promise,\n        children: errorElement\n      });\n    }\n    if (status === AwaitRenderStatus.success) {\n      // Render children with resolved value\n      return /*#__PURE__*/react.createElement(AwaitContext.Provider, {\n        value: promise,\n        children: children\n      });\n    }\n\n    // Throw to the suspense boundary\n    throw promise;\n  }\n}\n\n/**\n * @private\n * Indirection to leverage useAsyncValue for a render-prop API on `<Await>`\n */\nfunction ResolveAwait(_ref8) {\n  let {\n    children\n  } = _ref8;\n  let data = useAsyncValue();\n  let toRender = typeof children === "function" ? children(data) : children;\n  return /*#__PURE__*/React.createElement(React.Fragment, null, toRender);\n}\n\n///////////////////////////////////////////////////////////////////////////////\n// UTILS\n///////////////////////////////////////////////////////////////////////////////\n\n/**\n * Creates a route config from a React "children" object, which is usually\n * either a `<Route>` element or an array of them. Used internally by\n * `<Routes>` to create a route config from its children.\n *\n * @see https://reactrouter.com/utils/create-routes-from-children\n */\nfunction createRoutesFromChildren(children, parentPath) {\n  if (parentPath === void 0) {\n    parentPath = [];\n  }\n  let routes = [];\n  react.Children.forEach(children, (element, index) => {\n    if (! /*#__PURE__*/react.isValidElement(element)) {\n      // Ignore non-elements. This allows people to more easily inline\n      // conditionals in their route config.\n      return;\n    }\n    let treePath = [...parentPath, index];\n    if (element.type === react.Fragment) {\n      // Transparently support React.Fragment and its children.\n      routes.push.apply(routes, createRoutesFromChildren(element.props.children, treePath));\n      return;\n    }\n    !(element.type === Route) ?  false ? 0 : invariant(false) : void 0;\n    !(!element.props.index || !element.props.children) ?  false ? 0 : invariant(false) : void 0;\n    let route = {\n      id: element.props.id || treePath.join("-"),\n      caseSensitive: element.props.caseSensitive,\n      element: element.props.element,\n      Component: element.props.Component,\n      index: element.props.index,\n      path: element.props.path,\n      loader: element.props.loader,\n      action: element.props.action,\n      errorElement: element.props.errorElement,\n      ErrorBoundary: element.props.ErrorBoundary,\n      hasErrorBoundary: element.props.ErrorBoundary != null || element.props.errorElement != null,\n      shouldRevalidate: element.props.shouldRevalidate,\n      handle: element.props.handle,\n      lazy: element.props.lazy\n    };\n    if (element.props.children) {\n      route.children = createRoutesFromChildren(element.props.children, treePath);\n    }\n    routes.push(route);\n  });\n  return routes;\n}\n\n/**\n * Renders the result of `matchRoutes()` into a React element.\n */\nfunction renderMatches(matches) {\n  return _renderMatches(matches);\n}\nfunction mapRouteProperties(route) {\n  let updates = {\n    // Note: this check also occurs in createRoutesFromChildren so update\n    // there if you change this -- please and thank you!\n    hasErrorBoundary: route.ErrorBoundary != null || route.errorElement != null\n  };\n  if (route.Component) {\n    if (false) {}\n    Object.assign(updates, {\n      element: /*#__PURE__*/React.createElement(route.Component),\n      Component: undefined\n    });\n  }\n  if (route.HydrateFallback) {\n    if (false) {}\n    Object.assign(updates, {\n      hydrateFallbackElement: /*#__PURE__*/React.createElement(route.HydrateFallback),\n      HydrateFallback: undefined\n    });\n  }\n  if (route.ErrorBoundary) {\n    if (false) {}\n    Object.assign(updates, {\n      errorElement: /*#__PURE__*/React.createElement(route.ErrorBoundary),\n      ErrorBoundary: undefined\n    });\n  }\n  return updates;\n}\nfunction createMemoryRouter(routes, opts) {\n  return createRouter({\n    basename: opts == null ? void 0 : opts.basename,\n    future: dist_extends({}, opts == null ? void 0 : opts.future, {\n      v7_prependBasename: true\n    }),\n    history: createMemoryHistory({\n      initialEntries: opts == null ? void 0 : opts.initialEntries,\n      initialIndex: opts == null ? void 0 : opts.initialIndex\n    }),\n    hydrationData: opts == null ? void 0 : opts.hydrationData,\n    routes,\n    mapRouteProperties\n  }).initialize();\n}\n\n;// CONCATENATED MODULE: ./node_modules/react-router-dom/dist/index.js\n/**\n * React Router DOM v6.22.3\n *\n * Copyright (c) Remix Software Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.md file in the root directory of this source tree.\n *\n * @license MIT\n */\n\n\n\n\n\nfunction react_router_dom_dist_extends() {\n  react_router_dom_dist_extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return react_router_dom_dist_extends.apply(this, arguments);\n}\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}\nconst defaultMethod = "get";\nconst defaultEncType = "application/x-www-form-urlencoded";\nfunction isHtmlElement(object) {\n  return object != null && typeof object.tagName === "string";\n}\nfunction isButtonElement(object) {\n  return isHtmlElement(object) && object.tagName.toLowerCase() === "button";\n}\nfunction isFormElement(object) {\n  return isHtmlElement(object) && object.tagName.toLowerCase() === "form";\n}\nfunction isInputElement(object) {\n  return isHtmlElement(object) && object.tagName.toLowerCase() === "input";\n}\nfunction isModifiedEvent(event) {\n  return !!(event.metaKey || event.altKey || event.ctrlKey || event.shiftKey);\n}\nfunction shouldProcessLinkClick(event, target) {\n  return event.button === 0 && (\n  // Ignore everything but left clicks\n  !target || target === "_self") &&\n  // Let browser handle "target=_blank" etc.\n  !isModifiedEvent(event) // Ignore clicks with modifier keys\n  ;\n}\n/**\n * Creates a URLSearchParams object using the given initializer.\n *\n * This is identical to `new URLSearchParams(init)` except it also\n * supports arrays as values in the object form of the initializer\n * instead of just strings. This is convenient when you need multiple\n * values for a given key, but don\'t want to use an array initializer.\n *\n * For example, instead of:\n *\n *   let searchParams = new URLSearchParams([\n *     [\'sort\', \'name\'],\n *     [\'sort\', \'price\']\n *   ]);\n *\n * you can do:\n *\n *   let searchParams = createSearchParams({\n *     sort: [\'name\', \'price\']\n *   });\n */\nfunction createSearchParams(init) {\n  if (init === void 0) {\n    init = "";\n  }\n  return new URLSearchParams(typeof init === "string" || Array.isArray(init) || init instanceof URLSearchParams ? init : Object.keys(init).reduce((memo, key) => {\n    let value = init[key];\n    return memo.concat(Array.isArray(value) ? value.map(v => [key, v]) : [[key, value]]);\n  }, []));\n}\nfunction getSearchParamsForLocation(locationSearch, defaultSearchParams) {\n  let searchParams = createSearchParams(locationSearch);\n  if (defaultSearchParams) {\n    // Use `defaultSearchParams.forEach(...)` here instead of iterating of\n    // `defaultSearchParams.keys()` to work-around a bug in Firefox related to\n    // web extensions. Relevant Bugzilla tickets:\n    // https://bugzilla.mozilla.org/show_bug.cgi?id=1414602\n    // https://bugzilla.mozilla.org/show_bug.cgi?id=1023984\n    defaultSearchParams.forEach((_, key) => {\n      if (!searchParams.has(key)) {\n        defaultSearchParams.getAll(key).forEach(value => {\n          searchParams.append(key, value);\n        });\n      }\n    });\n  }\n  return searchParams;\n}\n// One-time check for submitter support\nlet _formDataSupportsSubmitter = null;\nfunction isFormDataSubmitterSupported() {\n  if (_formDataSupportsSubmitter === null) {\n    try {\n      new FormData(document.createElement("form"),\n      // @ts-expect-error if FormData supports the submitter parameter, this will throw\n      0);\n      _formDataSupportsSubmitter = false;\n    } catch (e) {\n      _formDataSupportsSubmitter = true;\n    }\n  }\n  return _formDataSupportsSubmitter;\n}\nconst supportedFormEncTypes = new Set(["application/x-www-form-urlencoded", "multipart/form-data", "text/plain"]);\nfunction getFormEncType(encType) {\n  if (encType != null && !supportedFormEncTypes.has(encType)) {\n     false ? 0 : void 0;\n    return null;\n  }\n  return encType;\n}\nfunction getFormSubmissionInfo(target, basename) {\n  let method;\n  let action;\n  let encType;\n  let formData;\n  let body;\n  if (isFormElement(target)) {\n    // When grabbing the action from the element, it will have had the basename\n    // prefixed to ensure non-JS scenarios work, so strip it since we\'ll\n    // re-prefix in the router\n    let attr = target.getAttribute("action");\n    action = attr ? stripBasename(attr, basename) : null;\n    method = target.getAttribute("method") || defaultMethod;\n    encType = getFormEncType(target.getAttribute("enctype")) || defaultEncType;\n    formData = new FormData(target);\n  } else if (isButtonElement(target) || isInputElement(target) && (target.type === "submit" || target.type === "image")) {\n    let form = target.form;\n    if (form == null) {\n      throw new Error("Cannot submit a <button> or <input type=\\"submit\\"> without a <form>");\n    }\n    // <button>/<input type="submit"> may override attributes of <form>\n    // When grabbing the action from the element, it will have had the basename\n    // prefixed to ensure non-JS scenarios work, so strip it since we\'ll\n    // re-prefix in the router\n    let attr = target.getAttribute("formaction") || form.getAttribute("action");\n    action = attr ? stripBasename(attr, basename) : null;\n    method = target.getAttribute("formmethod") || form.getAttribute("method") || defaultMethod;\n    encType = getFormEncType(target.getAttribute("formenctype")) || getFormEncType(form.getAttribute("enctype")) || defaultEncType;\n    // Build a FormData object populated from a form and submitter\n    formData = new FormData(form, target);\n    // If this browser doesn\'t support the `FormData(el, submitter)` format,\n    // then tack on the submitter value at the end.  This is a lightweight\n    // solution that is not 100% spec compliant.  For complete support in older\n    // browsers, consider using the `formdata-submitter-polyfill` package\n    if (!isFormDataSubmitterSupported()) {\n      let {\n        name,\n        type,\n        value\n      } = target;\n      if (type === "image") {\n        let prefix = name ? name + "." : "";\n        formData.append(prefix + "x", "0");\n        formData.append(prefix + "y", "0");\n      } else if (name) {\n        formData.append(name, value);\n      }\n    }\n  } else if (isHtmlElement(target)) {\n    throw new Error("Cannot submit element that is not <form>, <button>, or " + "<input type=\\"submit|image\\">");\n  } else {\n    method = defaultMethod;\n    action = null;\n    encType = defaultEncType;\n    body = target;\n  }\n  // Send body for <Form encType="text/plain" so we encode it into text\n  if (formData && encType === "text/plain") {\n    body = formData;\n    formData = undefined;\n  }\n  return {\n    action,\n    method: method.toLowerCase(),\n    encType,\n    formData,\n    body\n  };\n}\nconst _excluded = (/* unused pure expression or super */ null && (["onClick", "relative", "reloadDocument", "replace", "state", "target", "to", "preventScrollReset", "unstable_viewTransition"])),\n  _excluded2 = (/* unused pure expression or super */ null && (["aria-current", "caseSensitive", "className", "end", "style", "to", "unstable_viewTransition", "children"])),\n  _excluded3 = (/* unused pure expression or super */ null && (["fetcherKey", "navigate", "reloadDocument", "replace", "state", "method", "action", "onSubmit", "relative", "preventScrollReset", "unstable_viewTransition"]));\n// HEY YOU! DON\'T TOUCH THIS VARIABLE!\n//\n// It is replaced with the proper version at build time via a babel plugin in\n// the rollup config.\n//\n// Export a global property onto the window for React Router detection by the\n// Core Web Vitals Technology Report.  This way they can configure the `wappalyzer`\n// to detect and properly classify live websites as being built with React Router:\n// https://github.com/HTTPArchive/wappalyzer/blob/main/src/technologies/r.json\nconst REACT_ROUTER_VERSION = "6";\ntry {\n  window.__reactRouterVersion = REACT_ROUTER_VERSION;\n} catch (e) {\n  // no-op\n}\nfunction createBrowserRouter(routes, opts) {\n  return createRouter({\n    basename: opts == null ? void 0 : opts.basename,\n    future: react_router_dom_dist_extends({}, opts == null ? void 0 : opts.future, {\n      v7_prependBasename: true\n    }),\n    history: createBrowserHistory({\n      window: opts == null ? void 0 : opts.window\n    }),\n    hydrationData: (opts == null ? void 0 : opts.hydrationData) || parseHydrationData(),\n    routes,\n    mapRouteProperties: UNSAFE_mapRouteProperties,\n    window: opts == null ? void 0 : opts.window\n  }).initialize();\n}\nfunction createHashRouter(routes, opts) {\n  return createRouter({\n    basename: opts == null ? void 0 : opts.basename,\n    future: react_router_dom_dist_extends({}, opts == null ? void 0 : opts.future, {\n      v7_prependBasename: true\n    }),\n    history: createHashHistory({\n      window: opts == null ? void 0 : opts.window\n    }),\n    hydrationData: (opts == null ? void 0 : opts.hydrationData) || parseHydrationData(),\n    routes,\n    mapRouteProperties: UNSAFE_mapRouteProperties,\n    window: opts == null ? void 0 : opts.window\n  }).initialize();\n}\nfunction parseHydrationData() {\n  var _window;\n  let state = (_window = window) == null ? void 0 : _window.__staticRouterHydrationData;\n  if (state && state.errors) {\n    state = react_router_dom_dist_extends({}, state, {\n      errors: deserializeErrors(state.errors)\n    });\n  }\n  return state;\n}\nfunction deserializeErrors(errors) {\n  if (!errors) return null;\n  let entries = Object.entries(errors);\n  let serialized = {};\n  for (let [key, val] of entries) {\n    // Hey you!  If you change this, please change the corresponding logic in\n    // serializeErrors in react-router-dom/server.tsx :)\n    if (val && val.__type === "RouteErrorResponse") {\n      serialized[key] = new UNSAFE_ErrorResponseImpl(val.status, val.statusText, val.data, val.internal === true);\n    } else if (val && val.__type === "Error") {\n      // Attempt to reconstruct the right type of Error (i.e., ReferenceError)\n      if (val.__subType) {\n        let ErrorConstructor = window[val.__subType];\n        if (typeof ErrorConstructor === "function") {\n          try {\n            // @ts-expect-error\n            let error = new ErrorConstructor(val.message);\n            // Wipe away the client-side stack trace.  Nothing to fill it in with\n            // because we don\'t serialize SSR stack traces for security reasons\n            error.stack = "";\n            serialized[key] = error;\n          } catch (e) {\n            // no-op - fall through and create a normal Error\n          }\n        }\n      }\n      if (serialized[key] == null) {\n        let error = new Error(val.message);\n        // Wipe away the client-side stack trace.  Nothing to fill it in with\n        // because we don\'t serialize SSR stack traces for security reasons\n        error.stack = "";\n        serialized[key] = error;\n      }\n    } else {\n      serialized[key] = val;\n    }\n  }\n  return serialized;\n}\nconst ViewTransitionContext = /*#__PURE__*/react.createContext({\n  isTransitioning: false\n});\nif (false) {}\nconst FetchersContext = /*#__PURE__*/react.createContext(new Map());\nif (false) {}\n//#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region Components\n////////////////////////////////////////////////////////////////////////////////\n/**\n  Webpack + React 17 fails to compile on any of the following because webpack\n  complains that `startTransition` doesn\'t exist in `React`:\n  * import { startTransition } from "react"\n  * import * as React from from "react";\n    "startTransition" in React ? React.startTransition(() => setState()) : setState()\n  * import * as React from from "react";\n    "startTransition" in React ? React["startTransition"](() => setState()) : setState()\n\n  Moving it to a constant such as the following solves the Webpack/React 17 issue:\n  * import * as React from from "react";\n    const START_TRANSITION = "startTransition";\n    START_TRANSITION in React ? React[START_TRANSITION](() => setState()) : setState()\n\n  However, that introduces webpack/terser minification issues in production builds\n  in React 18 where minification/obfuscation ends up removing the call of\n  React.startTransition entirely from the first half of the ternary.  Grabbing\n  this exported reference once up front resolves that issue.\n\n  See https://github.com/remix-run/react-router/issues/10579\n*/\nconst dist_START_TRANSITION = "startTransition";\nconst dist_startTransitionImpl = react_namespaceObject[dist_START_TRANSITION];\nconst FLUSH_SYNC = "flushSync";\nconst flushSyncImpl = react_dom_namespaceObject[FLUSH_SYNC];\nconst USE_ID = "useId";\nconst useIdImpl = react_namespaceObject[USE_ID];\nfunction startTransitionSafe(cb) {\n  if (dist_startTransitionImpl) {\n    dist_startTransitionImpl(cb);\n  } else {\n    cb();\n  }\n}\nfunction flushSyncSafe(cb) {\n  if (flushSyncImpl) {\n    flushSyncImpl(cb);\n  } else {\n    cb();\n  }\n}\nclass Deferred {\n  constructor() {\n    this.status = "pending";\n    this.promise = new Promise((resolve, reject) => {\n      this.resolve = value => {\n        if (this.status === "pending") {\n          this.status = "resolved";\n          resolve(value);\n        }\n      };\n      this.reject = reason => {\n        if (this.status === "pending") {\n          this.status = "rejected";\n          reject(reason);\n        }\n      };\n    });\n  }\n}\n/**\n * Given a Remix Router instance, render the appropriate UI\n */\nfunction dist_RouterProvider(_ref) {\n  let {\n    fallbackElement,\n    router,\n    future\n  } = _ref;\n  let [state, setStateImpl] = React.useState(router.state);\n  let [pendingState, setPendingState] = React.useState();\n  let [vtContext, setVtContext] = React.useState({\n    isTransitioning: false\n  });\n  let [renderDfd, setRenderDfd] = React.useState();\n  let [transition, setTransition] = React.useState();\n  let [interruption, setInterruption] = React.useState();\n  let fetcherData = React.useRef(new Map());\n  let {\n    v7_startTransition\n  } = future || {};\n  let optInStartTransition = React.useCallback(cb => {\n    if (v7_startTransition) {\n      startTransitionSafe(cb);\n    } else {\n      cb();\n    }\n  }, [v7_startTransition]);\n  let setState = React.useCallback((newState, _ref2) => {\n    let {\n      deletedFetchers,\n      unstable_flushSync: flushSync,\n      unstable_viewTransitionOpts: viewTransitionOpts\n    } = _ref2;\n    deletedFetchers.forEach(key => fetcherData.current.delete(key));\n    newState.fetchers.forEach((fetcher, key) => {\n      if (fetcher.data !== undefined) {\n        fetcherData.current.set(key, fetcher.data);\n      }\n    });\n    let isViewTransitionUnavailable = router.window == null || typeof router.window.document.startViewTransition !== "function";\n    // If this isn\'t a view transition or it\'s not available in this browser,\n    // just update and be done with it\n    if (!viewTransitionOpts || isViewTransitionUnavailable) {\n      if (flushSync) {\n        flushSyncSafe(() => setStateImpl(newState));\n      } else {\n        optInStartTransition(() => setStateImpl(newState));\n      }\n      return;\n    }\n    // flushSync + startViewTransition\n    if (flushSync) {\n      // Flush through the context to mark DOM elements as transition=ing\n      flushSyncSafe(() => {\n        // Cancel any pending transitions\n        if (transition) {\n          renderDfd && renderDfd.resolve();\n          transition.skipTransition();\n        }\n        setVtContext({\n          isTransitioning: true,\n          flushSync: true,\n          currentLocation: viewTransitionOpts.currentLocation,\n          nextLocation: viewTransitionOpts.nextLocation\n        });\n      });\n      // Update the DOM\n      let t = router.window.document.startViewTransition(() => {\n        flushSyncSafe(() => setStateImpl(newState));\n      });\n      // Clean up after the animation completes\n      t.finished.finally(() => {\n        flushSyncSafe(() => {\n          setRenderDfd(undefined);\n          setTransition(undefined);\n          setPendingState(undefined);\n          setVtContext({\n            isTransitioning: false\n          });\n        });\n      });\n      flushSyncSafe(() => setTransition(t));\n      return;\n    }\n    // startTransition + startViewTransition\n    if (transition) {\n      // Interrupting an in-progress transition, cancel and let everything flush\n      // out, and then kick off a new transition from the interruption state\n      renderDfd && renderDfd.resolve();\n      transition.skipTransition();\n      setInterruption({\n        state: newState,\n        currentLocation: viewTransitionOpts.currentLocation,\n        nextLocation: viewTransitionOpts.nextLocation\n      });\n    } else {\n      // Completed navigation update with opted-in view transitions, let \'er rip\n      setPendingState(newState);\n      setVtContext({\n        isTransitioning: true,\n        flushSync: false,\n        currentLocation: viewTransitionOpts.currentLocation,\n        nextLocation: viewTransitionOpts.nextLocation\n      });\n    }\n  }, [router.window, transition, renderDfd, fetcherData, optInStartTransition]);\n  // Need to use a layout effect here so we are subscribed early enough to\n  // pick up on any render-driven redirects/navigations (useEffect/<Navigate>)\n  React.useLayoutEffect(() => router.subscribe(setState), [router, setState]);\n  // When we start a view transition, create a Deferred we can use for the\n  // eventual "completed" render\n  React.useEffect(() => {\n    if (vtContext.isTransitioning && !vtContext.flushSync) {\n      setRenderDfd(new Deferred());\n    }\n  }, [vtContext]);\n  // Once the deferred is created, kick off startViewTransition() to update the\n  // DOM and then wait on the Deferred to resolve (indicating the DOM update has\n  // happened)\n  React.useEffect(() => {\n    if (renderDfd && pendingState && router.window) {\n      let newState = pendingState;\n      let renderPromise = renderDfd.promise;\n      let transition = router.window.document.startViewTransition(async () => {\n        optInStartTransition(() => setStateImpl(newState));\n        await renderPromise;\n      });\n      transition.finished.finally(() => {\n        setRenderDfd(undefined);\n        setTransition(undefined);\n        setPendingState(undefined);\n        setVtContext({\n          isTransitioning: false\n        });\n      });\n      setTransition(transition);\n    }\n  }, [optInStartTransition, pendingState, renderDfd, router.window]);\n  // When the new location finally renders and is committed to the DOM, this\n  // effect will run to resolve the transition\n  React.useEffect(() => {\n    if (renderDfd && pendingState && state.location.key === pendingState.location.key) {\n      renderDfd.resolve();\n    }\n  }, [renderDfd, transition, state.location, pendingState]);\n  // If we get interrupted with a new navigation during a transition, we skip\n  // the active transition, let it cleanup, then kick it off again here\n  React.useEffect(() => {\n    if (!vtContext.isTransitioning && interruption) {\n      setPendingState(interruption.state);\n      setVtContext({\n        isTransitioning: true,\n        flushSync: false,\n        currentLocation: interruption.currentLocation,\n        nextLocation: interruption.nextLocation\n      });\n      setInterruption(undefined);\n    }\n  }, [vtContext.isTransitioning, interruption]);\n  React.useEffect(() => {\n     false ? 0 : void 0;\n    // Only log this once on initial mount\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  let navigator = React.useMemo(() => {\n    return {\n      createHref: router.createHref,\n      encodeLocation: router.encodeLocation,\n      go: n => router.navigate(n),\n      push: (to, state, opts) => router.navigate(to, {\n        state,\n        preventScrollReset: opts == null ? void 0 : opts.preventScrollReset\n      }),\n      replace: (to, state, opts) => router.navigate(to, {\n        replace: true,\n        state,\n        preventScrollReset: opts == null ? void 0 : opts.preventScrollReset\n      })\n    };\n  }, [router]);\n  let basename = router.basename || "/";\n  let dataRouterContext = React.useMemo(() => ({\n    router,\n    navigator,\n    static: false,\n    basename\n  }), [router, navigator, basename]);\n  // The fragment and {null} here are important!  We need them to keep React 18\'s\n  // useId happy when we are server-rendering since we may have a <script> here\n  // containing the hydrated server-side staticContext (from StaticRouterProvider).\n  // useId relies on the component tree structure to generate deterministic id\'s\n  // so we need to ensure it remains the same on the client even though\n  // we don\'t need the <script> tag\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(UNSAFE_DataRouterContext.Provider, {\n    value: dataRouterContext\n  }, /*#__PURE__*/React.createElement(UNSAFE_DataRouterStateContext.Provider, {\n    value: state\n  }, /*#__PURE__*/React.createElement(FetchersContext.Provider, {\n    value: fetcherData.current\n  }, /*#__PURE__*/React.createElement(ViewTransitionContext.Provider, {\n    value: vtContext\n  }, /*#__PURE__*/React.createElement(Router, {\n    basename: basename,\n    location: state.location,\n    navigationType: state.historyAction,\n    navigator: navigator,\n    future: {\n      v7_relativeSplatPath: router.future.v7_relativeSplatPath\n    }\n  }, state.initialized || router.future.v7_partialHydration ? /*#__PURE__*/React.createElement(dist_DataRoutes, {\n    routes: router.routes,\n    future: router.future,\n    state: state\n  }) : fallbackElement))))), null);\n}\nfunction dist_DataRoutes(_ref3) {\n  let {\n    routes,\n    future,\n    state\n  } = _ref3;\n  return UNSAFE_useRoutesImpl(routes, undefined, state, future);\n}\n/**\n * A `<Router>` for use in web browsers. Provides the cleanest URLs.\n */\nfunction BrowserRouter(_ref4) {\n  let {\n    basename,\n    children,\n    future,\n    window\n  } = _ref4;\n  let historyRef = React.useRef();\n  if (historyRef.current == null) {\n    historyRef.current = createBrowserHistory({\n      window,\n      v5Compat: true\n    });\n  }\n  let history = historyRef.current;\n  let [state, setStateImpl] = React.useState({\n    action: history.action,\n    location: history.location\n  });\n  let {\n    v7_startTransition\n  } = future || {};\n  let setState = React.useCallback(newState => {\n    v7_startTransition && dist_startTransitionImpl ? dist_startTransitionImpl(() => setStateImpl(newState)) : setStateImpl(newState);\n  }, [setStateImpl, v7_startTransition]);\n  React.useLayoutEffect(() => history.listen(setState), [history, setState]);\n  return /*#__PURE__*/React.createElement(Router, {\n    basename: basename,\n    children: children,\n    location: state.location,\n    navigationType: state.action,\n    navigator: history,\n    future: future\n  });\n}\n/**\n * A `<Router>` for use in web browsers. Stores the location in the hash\n * portion of the URL so it is not sent to the server.\n */\nfunction HashRouter(_ref5) {\n  let {\n    basename,\n    children,\n    future,\n    window\n  } = _ref5;\n  let historyRef = react.useRef();\n  if (historyRef.current == null) {\n    historyRef.current = router_createHashHistory({\n      window,\n      v5Compat: true\n    });\n  }\n  let history = historyRef.current;\n  let [state, setStateImpl] = react.useState({\n    action: history.action,\n    location: history.location\n  });\n  let {\n    v7_startTransition\n  } = future || {};\n  let setState = react.useCallback(newState => {\n    v7_startTransition && dist_startTransitionImpl ? dist_startTransitionImpl(() => setStateImpl(newState)) : setStateImpl(newState);\n  }, [setStateImpl, v7_startTransition]);\n  react.useLayoutEffect(() => history.listen(setState), [history, setState]);\n  return /*#__PURE__*/react.createElement(dist_Router, {\n    basename: basename,\n    children: children,\n    location: state.location,\n    navigationType: state.action,\n    navigator: history,\n    future: future\n  });\n}\n/**\n * A `<Router>` that accepts a pre-instantiated history object. It\'s important\n * to note that using your own history object is highly discouraged and may add\n * two versions of the history library to your bundles unless you use the same\n * version of the history library that React Router uses internally.\n */\nfunction HistoryRouter(_ref6) {\n  let {\n    basename,\n    children,\n    future,\n    history\n  } = _ref6;\n  let [state, setStateImpl] = React.useState({\n    action: history.action,\n    location: history.location\n  });\n  let {\n    v7_startTransition\n  } = future || {};\n  let setState = React.useCallback(newState => {\n    v7_startTransition && dist_startTransitionImpl ? dist_startTransitionImpl(() => setStateImpl(newState)) : setStateImpl(newState);\n  }, [setStateImpl, v7_startTransition]);\n  React.useLayoutEffect(() => history.listen(setState), [history, setState]);\n  return /*#__PURE__*/React.createElement(Router, {\n    basename: basename,\n    children: children,\n    location: state.location,\n    navigationType: state.action,\n    navigator: history,\n    future: future\n  });\n}\nif (false) {}\nconst isBrowser = typeof window !== "undefined" && typeof window.document !== "undefined" && typeof window.document.createElement !== "undefined";\nconst dist_ABSOLUTE_URL_REGEX = /^(?:[a-z][a-z0-9+.-]*:|\\/\\/)/i;\n/**\n * The public API for rendering a history-aware `<a>`.\n */\nconst Link = /*#__PURE__*/(/* unused pure expression or super */ null && (React.forwardRef(function LinkWithRef(_ref7, ref) {\n  let {\n      onClick,\n      relative,\n      reloadDocument,\n      replace,\n      state,\n      target,\n      to,\n      preventScrollReset,\n      unstable_viewTransition\n    } = _ref7,\n    rest = _objectWithoutPropertiesLoose(_ref7, _excluded);\n  let {\n    basename\n  } = React.useContext(UNSAFE_NavigationContext);\n  // Rendered into <a href> for absolute URLs\n  let absoluteHref;\n  let isExternal = false;\n  if (typeof to === "string" && dist_ABSOLUTE_URL_REGEX.test(to)) {\n    // Render the absolute href server- and client-side\n    absoluteHref = to;\n    // Only check for external origins client-side\n    if (isBrowser) {\n      try {\n        let currentUrl = new URL(window.location.href);\n        let targetUrl = to.startsWith("//") ? new URL(currentUrl.protocol + to) : new URL(to);\n        let path = stripBasename(targetUrl.pathname, basename);\n        if (targetUrl.origin === currentUrl.origin && path != null) {\n          // Strip the protocol/origin/basename for same-origin absolute URLs\n          to = path + targetUrl.search + targetUrl.hash;\n        } else {\n          isExternal = true;\n        }\n      } catch (e) {\n        // We can\'t do external URL detection without a valid URL\n         false ? 0 : void 0;\n      }\n    }\n  }\n  // Rendered into <a href> for relative URLs\n  let href = useHref(to, {\n    relative\n  });\n  let internalOnClick = useLinkClickHandler(to, {\n    replace,\n    state,\n    target,\n    preventScrollReset,\n    relative,\n    unstable_viewTransition\n  });\n  function handleClick(event) {\n    if (onClick) onClick(event);\n    if (!event.defaultPrevented) {\n      internalOnClick(event);\n    }\n  }\n  return /*#__PURE__*/(\n    // eslint-disable-next-line jsx-a11y/anchor-has-content\n    React.createElement("a", react_router_dom_dist_extends({}, rest, {\n      href: absoluteHref || href,\n      onClick: isExternal || reloadDocument ? onClick : handleClick,\n      ref: ref,\n      target: target\n    }))\n  );\n})));\nif (false) {}\n/**\n * A `<Link>` wrapper that knows if it\'s "active" or not.\n */\nconst NavLink = /*#__PURE__*/(/* unused pure expression or super */ null && (React.forwardRef(function NavLinkWithRef(_ref8, ref) {\n  let {\n      "aria-current": ariaCurrentProp = "page",\n      caseSensitive = false,\n      className: classNameProp = "",\n      end = false,\n      style: styleProp,\n      to,\n      unstable_viewTransition,\n      children\n    } = _ref8,\n    rest = _objectWithoutPropertiesLoose(_ref8, _excluded2);\n  let path = useResolvedPath(to, {\n    relative: rest.relative\n  });\n  let location = useLocation();\n  let routerState = React.useContext(UNSAFE_DataRouterStateContext);\n  let {\n    navigator,\n    basename\n  } = React.useContext(UNSAFE_NavigationContext);\n  let isTransitioning = routerState != null &&\n  // Conditional usage is OK here because the usage of a data router is static\n  // eslint-disable-next-line react-hooks/rules-of-hooks\n  useViewTransitionState(path) && unstable_viewTransition === true;\n  let toPathname = navigator.encodeLocation ? navigator.encodeLocation(path).pathname : path.pathname;\n  let locationPathname = location.pathname;\n  let nextLocationPathname = routerState && routerState.navigation && routerState.navigation.location ? routerState.navigation.location.pathname : null;\n  if (!caseSensitive) {\n    locationPathname = locationPathname.toLowerCase();\n    nextLocationPathname = nextLocationPathname ? nextLocationPathname.toLowerCase() : null;\n    toPathname = toPathname.toLowerCase();\n  }\n  if (nextLocationPathname && basename) {\n    nextLocationPathname = stripBasename(nextLocationPathname, basename) || nextLocationPathname;\n  }\n  // If the `to` has a trailing slash, look at that exact spot.  Otherwise,\n  // we\'re looking for a slash _after_ what\'s in `to`.  For example:\n  //\n  // <NavLink to="/users"> and <NavLink to="/users/">\n  // both want to look for a / at index 6 to match URL `/users/matt`\n  const endSlashPosition = toPathname !== "/" && toPathname.endsWith("/") ? toPathname.length - 1 : toPathname.length;\n  let isActive = locationPathname === toPathname || !end && locationPathname.startsWith(toPathname) && locationPathname.charAt(endSlashPosition) === "/";\n  let isPending = nextLocationPathname != null && (nextLocationPathname === toPathname || !end && nextLocationPathname.startsWith(toPathname) && nextLocationPathname.charAt(toPathname.length) === "/");\n  let renderProps = {\n    isActive,\n    isPending,\n    isTransitioning\n  };\n  let ariaCurrent = isActive ? ariaCurrentProp : undefined;\n  let className;\n  if (typeof classNameProp === "function") {\n    className = classNameProp(renderProps);\n  } else {\n    // If the className prop is not a function, we use a default `active`\n    // class for <NavLink />s that are active. In v5 `active` was the default\n    // value for `activeClassName`, but we are removing that API and can still\n    // use the old default behavior for a cleaner upgrade path and keep the\n    // simple styling rules working as they currently do.\n    className = [classNameProp, isActive ? "active" : null, isPending ? "pending" : null, isTransitioning ? "transitioning" : null].filter(Boolean).join(" ");\n  }\n  let style = typeof styleProp === "function" ? styleProp(renderProps) : styleProp;\n  return /*#__PURE__*/React.createElement(Link, react_router_dom_dist_extends({}, rest, {\n    "aria-current": ariaCurrent,\n    className: className,\n    ref: ref,\n    style: style,\n    to: to,\n    unstable_viewTransition: unstable_viewTransition\n  }), typeof children === "function" ? children(renderProps) : children);\n})));\nif (false) {}\n/**\n * A `@remix-run/router`-aware `<form>`. It behaves like a normal form except\n * that the interaction with the server is with `fetch` instead of new document\n * requests, allowing components to add nicer UX to the page as the form is\n * submitted and returns with data.\n */\nconst Form = /*#__PURE__*/(/* unused pure expression or super */ null && (React.forwardRef((_ref9, forwardedRef) => {\n  let {\n      fetcherKey,\n      navigate,\n      reloadDocument,\n      replace,\n      state,\n      method = defaultMethod,\n      action,\n      onSubmit,\n      relative,\n      preventScrollReset,\n      unstable_viewTransition\n    } = _ref9,\n    props = _objectWithoutPropertiesLoose(_ref9, _excluded3);\n  let submit = useSubmit();\n  let formAction = useFormAction(action, {\n    relative\n  });\n  let formMethod = method.toLowerCase() === "get" ? "get" : "post";\n  let submitHandler = event => {\n    onSubmit && onSubmit(event);\n    if (event.defaultPrevented) return;\n    event.preventDefault();\n    let submitter = event.nativeEvent.submitter;\n    let submitMethod = (submitter == null ? void 0 : submitter.getAttribute("formmethod")) || method;\n    submit(submitter || event.currentTarget, {\n      fetcherKey,\n      method: submitMethod,\n      navigate,\n      replace,\n      state,\n      relative,\n      preventScrollReset,\n      unstable_viewTransition\n    });\n  };\n  return /*#__PURE__*/React.createElement("form", react_router_dom_dist_extends({\n    ref: forwardedRef,\n    method: formMethod,\n    action: formAction,\n    onSubmit: reloadDocument ? onSubmit : submitHandler\n  }, props));\n})));\nif (false) {}\n/**\n * This component will emulate the browser\'s scroll restoration on location\n * changes.\n */\nfunction ScrollRestoration(_ref10) {\n  let {\n    getKey,\n    storageKey\n  } = _ref10;\n  useScrollRestoration({\n    getKey,\n    storageKey\n  });\n  return null;\n}\nif (false) {}\n//#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region Hooks\n////////////////////////////////////////////////////////////////////////////////\nvar dist_DataRouterHook;\n(function (DataRouterHook) {\n  DataRouterHook["UseScrollRestoration"] = "useScrollRestoration";\n  DataRouterHook["UseSubmit"] = "useSubmit";\n  DataRouterHook["UseSubmitFetcher"] = "useSubmitFetcher";\n  DataRouterHook["UseFetcher"] = "useFetcher";\n  DataRouterHook["useViewTransitionState"] = "useViewTransitionState";\n})(dist_DataRouterHook || (dist_DataRouterHook = {}));\nvar dist_DataRouterStateHook;\n(function (DataRouterStateHook) {\n  DataRouterStateHook["UseFetcher"] = "useFetcher";\n  DataRouterStateHook["UseFetchers"] = "useFetchers";\n  DataRouterStateHook["UseScrollRestoration"] = "useScrollRestoration";\n})(dist_DataRouterStateHook || (dist_DataRouterStateHook = {}));\n// Internal hooks\nfunction dist_getDataRouterConsoleError(hookName) {\n  return hookName + " must be used within a data router.  See https://reactrouter.com/routers/picking-a-router.";\n}\nfunction dist_useDataRouterContext(hookName) {\n  let ctx = React.useContext(UNSAFE_DataRouterContext);\n  !ctx ?  false ? 0 : UNSAFE_invariant(false) : void 0;\n  return ctx;\n}\nfunction dist_useDataRouterState(hookName) {\n  let state = React.useContext(UNSAFE_DataRouterStateContext);\n  !state ?  false ? 0 : UNSAFE_invariant(false) : void 0;\n  return state;\n}\n// External hooks\n/**\n * Handles the click behavior for router `<Link>` components. This is useful if\n * you need to create custom `<Link>` components with the same click behavior we\n * use in our exported `<Link>`.\n */\nfunction useLinkClickHandler(to, _temp) {\n  let {\n    target,\n    replace: replaceProp,\n    state,\n    preventScrollReset,\n    relative,\n    unstable_viewTransition\n  } = _temp === void 0 ? {} : _temp;\n  let navigate = useNavigate();\n  let location = useLocation();\n  let path = useResolvedPath(to, {\n    relative\n  });\n  return React.useCallback(event => {\n    if (shouldProcessLinkClick(event, target)) {\n      event.preventDefault();\n      // If the URL hasn\'t changed, a regular <a> will do a replace instead of\n      // a push, so do the same here unless the replace prop is explicitly set\n      let replace = replaceProp !== undefined ? replaceProp : createPath(location) === createPath(path);\n      navigate(to, {\n        replace,\n        state,\n        preventScrollReset,\n        relative,\n        unstable_viewTransition\n      });\n    }\n  }, [location, navigate, path, replaceProp, state, target, to, preventScrollReset, relative, unstable_viewTransition]);\n}\n/**\n * A convenient wrapper for reading and writing search parameters via the\n * URLSearchParams interface.\n */\nfunction useSearchParams(defaultInit) {\n   false ? 0 : void 0;\n  let defaultSearchParamsRef = react.useRef(createSearchParams(defaultInit));\n  let hasSetSearchParamsRef = react.useRef(false);\n  let location = dist_useLocation();\n  let searchParams = react.useMemo(() =>\n  // Only merge in the defaults if we haven\'t yet called setSearchParams.\n  // Once we call that we want those to take precedence, otherwise you can\'t\n  // remove a param with setSearchParams({}) if it has an initial value\n  getSearchParamsForLocation(location.search, hasSetSearchParamsRef.current ? null : defaultSearchParamsRef.current), [location.search]);\n  let navigate = dist_useNavigate();\n  let setSearchParams = react.useCallback((nextInit, navigateOptions) => {\n    const newSearchParams = createSearchParams(typeof nextInit === "function" ? nextInit(searchParams) : nextInit);\n    hasSetSearchParamsRef.current = true;\n    navigate("?" + newSearchParams, navigateOptions);\n  }, [navigate, searchParams]);\n  return [searchParams, setSearchParams];\n}\nfunction validateClientSideSubmission() {\n  if (typeof document === "undefined") {\n    throw new Error("You are calling submit during the server render. " + "Try calling submit within a `useEffect` or callback instead.");\n  }\n}\nlet fetcherId = 0;\nlet getUniqueFetcherId = () => "__" + String(++fetcherId) + "__";\n/**\n * Returns a function that may be used to programmatically submit a form (or\n * some arbitrary data) to the server.\n */\nfunction useSubmit() {\n  let {\n    router\n  } = dist_useDataRouterContext(dist_DataRouterHook.UseSubmit);\n  let {\n    basename\n  } = React.useContext(UNSAFE_NavigationContext);\n  let currentRouteId = UNSAFE_useRouteId();\n  return React.useCallback(function (target, options) {\n    if (options === void 0) {\n      options = {};\n    }\n    validateClientSideSubmission();\n    let {\n      action,\n      method,\n      encType,\n      formData,\n      body\n    } = getFormSubmissionInfo(target, basename);\n    if (options.navigate === false) {\n      let key = options.fetcherKey || getUniqueFetcherId();\n      router.fetch(key, currentRouteId, options.action || action, {\n        preventScrollReset: options.preventScrollReset,\n        formData,\n        body,\n        formMethod: options.method || method,\n        formEncType: options.encType || encType,\n        unstable_flushSync: options.unstable_flushSync\n      });\n    } else {\n      router.navigate(options.action || action, {\n        preventScrollReset: options.preventScrollReset,\n        formData,\n        body,\n        formMethod: options.method || method,\n        formEncType: options.encType || encType,\n        replace: options.replace,\n        state: options.state,\n        fromRouteId: currentRouteId,\n        unstable_flushSync: options.unstable_flushSync,\n        unstable_viewTransition: options.unstable_viewTransition\n      });\n    }\n  }, [router, basename, currentRouteId]);\n}\n// v7: Eventually we should deprecate this entirely in favor of using the\n// router method directly?\nfunction useFormAction(action, _temp2) {\n  let {\n    relative\n  } = _temp2 === void 0 ? {} : _temp2;\n  let {\n    basename\n  } = React.useContext(UNSAFE_NavigationContext);\n  let routeContext = React.useContext(UNSAFE_RouteContext);\n  !routeContext ?  false ? 0 : UNSAFE_invariant(false) : void 0;\n  let [match] = routeContext.matches.slice(-1);\n  // Shallow clone path so we can modify it below, otherwise we modify the\n  // object referenced by useMemo inside useResolvedPath\n  let path = react_router_dom_dist_extends({}, useResolvedPath(action ? action : ".", {\n    relative\n  }));\n  // If no action was specified, browsers will persist current search params\n  // when determining the path, so match that behavior\n  // https://github.com/remix-run/remix/issues/927\n  let location = useLocation();\n  if (action == null) {\n    // Safe to write to this directly here since if action was undefined, we\n    // would have called useResolvedPath(".") which will never include a search\n    path.search = location.search;\n    // When grabbing search params from the URL, remove any included ?index param\n    // since it might not apply to our contextual route.  We add it back based\n    // on match.route.index below\n    let params = new URLSearchParams(path.search);\n    if (params.has("index") && params.get("index") === "") {\n      params.delete("index");\n      path.search = params.toString() ? "?" + params.toString() : "";\n    }\n  }\n  if ((!action || action === ".") && match.route.index) {\n    path.search = path.search ? path.search.replace(/^\\?/, "?index&") : "?index";\n  }\n  // If we\'re operating within a basename, prepend it to the pathname prior\n  // to creating the form action.  If this is a root navigation, then just use\n  // the raw basename which allows the basename to have full control over the\n  // presence of a trailing slash on root actions\n  if (basename !== "/") {\n    path.pathname = path.pathname === "/" ? basename : joinPaths([basename, path.pathname]);\n  }\n  return createPath(path);\n}\n// TODO: (v7) Change the useFetcher generic default from `any` to `unknown`\n/**\n * Interacts with route loaders and actions without causing a navigation. Great\n * for any interaction that stays on the same page.\n */\nfunction useFetcher(_temp3) {\n  var _route$matches;\n  let {\n    key\n  } = _temp3 === void 0 ? {} : _temp3;\n  let {\n    router\n  } = dist_useDataRouterContext(dist_DataRouterHook.UseFetcher);\n  let state = dist_useDataRouterState(dist_DataRouterStateHook.UseFetcher);\n  let fetcherData = React.useContext(FetchersContext);\n  let route = React.useContext(UNSAFE_RouteContext);\n  let routeId = (_route$matches = route.matches[route.matches.length - 1]) == null ? void 0 : _route$matches.route.id;\n  !fetcherData ?  false ? 0 : UNSAFE_invariant(false) : void 0;\n  !route ?  false ? 0 : UNSAFE_invariant(false) : void 0;\n  !(routeId != null) ?  false ? 0 : UNSAFE_invariant(false) : void 0;\n  // Fetcher key handling\n  // OK to call conditionally to feature detect `useId`\n  // eslint-disable-next-line react-hooks/rules-of-hooks\n  let defaultKey = useIdImpl ? useIdImpl() : "";\n  let [fetcherKey, setFetcherKey] = React.useState(key || defaultKey);\n  if (key && key !== fetcherKey) {\n    setFetcherKey(key);\n  } else if (!fetcherKey) {\n    // We will only fall through here when `useId` is not available\n    setFetcherKey(getUniqueFetcherId());\n  }\n  // Registration/cleanup\n  React.useEffect(() => {\n    router.getFetcher(fetcherKey);\n    return () => {\n      // Tell the router we\'ve unmounted - if v7_fetcherPersist is enabled this\n      // will not delete immediately but instead queue up a delete after the\n      // fetcher returns to an `idle` state\n      router.deleteFetcher(fetcherKey);\n    };\n  }, [router, fetcherKey]);\n  // Fetcher additions\n  let load = React.useCallback((href, opts) => {\n    !routeId ?  false ? 0 : UNSAFE_invariant(false) : void 0;\n    router.fetch(fetcherKey, routeId, href, opts);\n  }, [fetcherKey, routeId, router]);\n  let submitImpl = useSubmit();\n  let submit = React.useCallback((target, opts) => {\n    submitImpl(target, react_router_dom_dist_extends({}, opts, {\n      navigate: false,\n      fetcherKey\n    }));\n  }, [fetcherKey, submitImpl]);\n  let FetcherForm = React.useMemo(() => {\n    let FetcherForm = /*#__PURE__*/React.forwardRef((props, ref) => {\n      return /*#__PURE__*/React.createElement(Form, react_router_dom_dist_extends({}, props, {\n        navigate: false,\n        fetcherKey: fetcherKey,\n        ref: ref\n      }));\n    });\n    if (false) {}\n    return FetcherForm;\n  }, [fetcherKey]);\n  // Exposed FetcherWithComponents\n  let fetcher = state.fetchers.get(fetcherKey) || IDLE_FETCHER;\n  let data = fetcherData.get(fetcherKey);\n  let fetcherWithComponents = React.useMemo(() => react_router_dom_dist_extends({\n    Form: FetcherForm,\n    submit,\n    load\n  }, fetcher, {\n    data\n  }), [FetcherForm, submit, load, fetcher, data]);\n  return fetcherWithComponents;\n}\n/**\n * Provides all fetchers currently on the page. Useful for layouts and parent\n * routes that need to provide pending/optimistic UI regarding the fetch.\n */\nfunction useFetchers() {\n  let state = dist_useDataRouterState(dist_DataRouterStateHook.UseFetchers);\n  return Array.from(state.fetchers.entries()).map(_ref11 => {\n    let [key, fetcher] = _ref11;\n    return react_router_dom_dist_extends({}, fetcher, {\n      key\n    });\n  });\n}\nconst SCROLL_RESTORATION_STORAGE_KEY = "react-router-scroll-positions";\nlet savedScrollPositions = {};\n/**\n * When rendered inside a RouterProvider, will restore scroll positions on navigations\n */\nfunction useScrollRestoration(_temp4) {\n  let {\n    getKey,\n    storageKey\n  } = _temp4 === void 0 ? {} : _temp4;\n  let {\n    router\n  } = dist_useDataRouterContext(dist_DataRouterHook.UseScrollRestoration);\n  let {\n    restoreScrollPosition,\n    preventScrollReset\n  } = dist_useDataRouterState(dist_DataRouterStateHook.UseScrollRestoration);\n  let {\n    basename\n  } = React.useContext(UNSAFE_NavigationContext);\n  let location = useLocation();\n  let matches = useMatches();\n  let navigation = useNavigation();\n  // Trigger manual scroll restoration while we\'re active\n  React.useEffect(() => {\n    window.history.scrollRestoration = "manual";\n    return () => {\n      window.history.scrollRestoration = "auto";\n    };\n  }, []);\n  // Save positions on pagehide\n  usePageHide(React.useCallback(() => {\n    if (navigation.state === "idle") {\n      let key = (getKey ? getKey(location, matches) : null) || location.key;\n      savedScrollPositions[key] = window.scrollY;\n    }\n    try {\n      sessionStorage.setItem(storageKey || SCROLL_RESTORATION_STORAGE_KEY, JSON.stringify(savedScrollPositions));\n    } catch (error) {\n       false ? 0 : void 0;\n    }\n    window.history.scrollRestoration = "auto";\n  }, [storageKey, getKey, navigation.state, location, matches]));\n  // Read in any saved scroll locations\n  if (typeof document !== "undefined") {\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    React.useLayoutEffect(() => {\n      try {\n        let sessionPositions = sessionStorage.getItem(storageKey || SCROLL_RESTORATION_STORAGE_KEY);\n        if (sessionPositions) {\n          savedScrollPositions = JSON.parse(sessionPositions);\n        }\n      } catch (e) {\n        // no-op, use default empty object\n      }\n    }, [storageKey]);\n    // Enable scroll restoration in the router\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    React.useLayoutEffect(() => {\n      let getKeyWithoutBasename = getKey && basename !== "/" ? (location, matches) => getKey(\n      // Strip the basename to match useLocation()\n      react_router_dom_dist_extends({}, location, {\n        pathname: stripBasename(location.pathname, basename) || location.pathname\n      }), matches) : getKey;\n      let disableScrollRestoration = router == null ? void 0 : router.enableScrollRestoration(savedScrollPositions, () => window.scrollY, getKeyWithoutBasename);\n      return () => disableScrollRestoration && disableScrollRestoration();\n    }, [router, basename, getKey]);\n    // Restore scrolling when state.restoreScrollPosition changes\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    React.useLayoutEffect(() => {\n      // Explicit false means don\'t do anything (used for submissions)\n      if (restoreScrollPosition === false) {\n        return;\n      }\n      // been here before, scroll to it\n      if (typeof restoreScrollPosition === "number") {\n        window.scrollTo(0, restoreScrollPosition);\n        return;\n      }\n      // try to scroll to the hash\n      if (location.hash) {\n        let el = document.getElementById(decodeURIComponent(location.hash.slice(1)));\n        if (el) {\n          el.scrollIntoView();\n          return;\n        }\n      }\n      // Don\'t reset if this navigation opted out\n      if (preventScrollReset === true) {\n        return;\n      }\n      // otherwise go to the top on new locations\n      window.scrollTo(0, 0);\n    }, [location, restoreScrollPosition, preventScrollReset]);\n  }\n}\n/**\n * Setup a callback to be fired on the window\'s `beforeunload` event. This is\n * useful for saving some data to `window.localStorage` just before the page\n * refreshes.\n *\n * Note: The `callback` argument should be a function created with\n * `React.useCallback()`.\n */\nfunction useBeforeUnload(callback, options) {\n  let {\n    capture\n  } = options || {};\n  React.useEffect(() => {\n    let opts = capture != null ? {\n      capture\n    } : undefined;\n    window.addEventListener("beforeunload", callback, opts);\n    return () => {\n      window.removeEventListener("beforeunload", callback, opts);\n    };\n  }, [callback, capture]);\n}\n/**\n * Setup a callback to be fired on the window\'s `pagehide` event. This is\n * useful for saving some data to `window.localStorage` just before the page\n * refreshes.  This event is better supported than beforeunload across browsers.\n *\n * Note: The `callback` argument should be a function created with\n * `React.useCallback()`.\n */\nfunction usePageHide(callback, options) {\n  let {\n    capture\n  } = options || {};\n  React.useEffect(() => {\n    let opts = capture != null ? {\n      capture\n    } : undefined;\n    window.addEventListener("pagehide", callback, opts);\n    return () => {\n      window.removeEventListener("pagehide", callback, opts);\n    };\n  }, [callback, capture]);\n}\n/**\n * Wrapper around useBlocker to show a window.confirm prompt to users instead\n * of building a custom UI with useBlocker.\n *\n * Warning: This has *a lot of rough edges* and behaves very differently (and\n * very incorrectly in some cases) across browsers if user click addition\n * back/forward navigations while the confirm is open.  Use at your own risk.\n */\nfunction usePrompt(_ref12) {\n  let {\n    when,\n    message\n  } = _ref12;\n  let blocker = useBlocker(when);\n  React.useEffect(() => {\n    if (blocker.state === "blocked") {\n      let proceed = window.confirm(message);\n      if (proceed) {\n        // This timeout is needed to avoid a weird "race" on POP navigations\n        // between the `window.history` revert navigation and the result of\n        // `window.confirm`\n        setTimeout(blocker.proceed, 0);\n      } else {\n        blocker.reset();\n      }\n    }\n  }, [blocker, message]);\n  React.useEffect(() => {\n    if (blocker.state === "blocked" && !when) {\n      blocker.reset();\n    }\n  }, [blocker, when]);\n}\n/**\n * Return a boolean indicating if there is an active view transition to the\n * given href.  You can use this value to render CSS classes or viewTransitionName\n * styles onto your elements\n *\n * @param href The destination href\n * @param [opts.relative] Relative routing type ("route" | "path")\n */\nfunction useViewTransitionState(to, opts) {\n  if (opts === void 0) {\n    opts = {};\n  }\n  let vtContext = React.useContext(ViewTransitionContext);\n  !(vtContext != null) ?  false ? 0 : UNSAFE_invariant(false) : void 0;\n  let {\n    basename\n  } = dist_useDataRouterContext(dist_DataRouterHook.useViewTransitionState);\n  let path = useResolvedPath(to, {\n    relative: opts.relative\n  });\n  if (!vtContext.isTransitioning) {\n    return false;\n  }\n  let currentPath = stripBasename(vtContext.currentLocation.pathname, basename) || vtContext.currentLocation.pathname;\n  let nextPath = stripBasename(vtContext.nextLocation.pathname, basename) || vtContext.nextLocation.pathname;\n  // Transition is active if we\'re going to or coming from the indicated\n  // destination.  This ensures that other PUSH navigations that reverse\n  // an indicated transition apply.  I.e., on the list view you have:\n  //\n  //   <NavLink to="/details/1" unstable_viewTransition>\n  //\n  // If you click the breadcrumb back to the list view:\n  //\n  //   <NavLink to="/list" unstable_viewTransition>\n  //\n  // We should apply the transition because it\'s indicated as active going\n  // from /list -> /details/1 and therefore should be active on the reverse\n  // (even though this isn\'t strictly a POP reverse)\n  return matchPath(path.pathname, nextPath) != null || matchPath(path.pathname, currentPath) != null;\n}\n//#endregion\n\n\n// EXTERNAL MODULE: ./node_modules/classnames/index.js\nvar classnames = __webpack_require__(7073);\nvar classnames_default = /*#__PURE__*/__webpack_require__.n(classnames);\n// EXTERNAL MODULE: ./node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[0].use[1]!./node_modules/postcss-loader/dist/cjs.js??ruleSet[1].rules[0].use[2]!./node_modules/sass-loader/dist/cjs.js!./src/components/Text/Text.module.scss\nvar Text_module = __webpack_require__(4834);\n;// CONCATENATED MODULE: ./src/components/Text/Text.module.scss\n\n      \n      \n      \n      \n      \n      \n      \n      \n      \n\nvar Text_module_options = {};\n\nText_module_options.styleTagTransform = (styleTagTransform_default());\nText_module_options.setAttributes = (setAttributesWithoutAttributes_default());\nText_module_options.insert = insertBySelector_default().bind(null, "head");\nText_module_options.domAPI = (styleDomAPI_default());\nText_module_options.insertStyleElement = (insertStyleElement_default());\n\nvar Text_module_update = injectStylesIntoStyleTag_default()(Text_module/* default */.A, Text_module_options);\n\n\n\n\n       /* harmony default export */ const Text_Text_module = (Text_module/* default */.A && Text_module/* default */.A.locals ? Text_module/* default */.A.locals : undefined);\n\n;// CONCATENATED MODULE: ./src/components/Text/Text.tsx\n\n\n\n\nconst Text = ({\n  ...props\n}) => {\n  const Tag = props.tag ? props.tag : \'p\';\n  return /*#__PURE__*/react.createElement(Tag, {\n    style: {\n      maxLines: props.maxLines || \'none\'\n    },\n    className: classnames_default()({\n      [props.className || \'\']: true,\n      [Text_Text_module[\'text_view_\' + (props.view || \'p-14\')]]: props.view,\n      [Text_Text_module[\'text_color_\' + (props.color || \'inherit\')]]: true,\n      [Text_Text_module[\'text_weight_\' + (props.weight || \'normal\')]]: true\n    }),\n    onClick: props.onCLick\n  }, props.children);\n};\n/* harmony default export */ const Text_Text = (/*#__PURE__*/(0,react.memo)(Text));\n;// CONCATENATED MODULE: ./src/components/Text/index.ts\n\n\n;// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/extends.js\nfunction extends_extends() {\n  extends_extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return extends_extends.apply(this, arguments);\n}\n;// CONCATENATED MODULE: ./src/components/icons/Icon/Icon.tsx\n\n\n\n\nconst Icon = ({\n  className,\n  color,\n  ...props\n}) => {\n  const iconWidth = props.width || \'24\';\n  const iconHeight = props.height || \'24\';\n  return /*#__PURE__*/react.createElement("svg", extends_extends({\n    fill: "none",\n    width: iconWidth,\n    height: iconHeight,\n    viewBox: "0 0 24 24",\n    className: classnames_default()({\n      className,\n      color\n    })\n  }, props));\n};\n/* harmony default export */ const Icon_Icon = (/*#__PURE__*/(0,react.memo)(Icon));\n;// CONCATENATED MODULE: ./src/components/icons/Icon/index.ts\n\n\n;// CONCATENATED MODULE: ./src/components/icons/LogoIcon/LogoIcon.tsx\n\n\n\nconst LogoIcon = props => {\n  return /*#__PURE__*/react.createElement(Icon_Icon, extends_extends({}, props, {\n    width: "36",\n    height: "36",\n    viewBox: "0 0 36 36"\n  }), /*#__PURE__*/react.createElement("g", {\n    clipPath: "url(#clip0_508_1449)"\n  }, /*#__PURE__*/react.createElement("path", {\n    d: "M17.8585 0.506165C27.5209 0.506165 35.352 8.33833 35.352 18C35.352 27.6628 27.5209 35.4938 17.8585 35.4938C8.19684 35.4938 0.364685 27.6628 0.364685 18C0.364685 8.33833 8.19684 0.506165 17.8585 0.506165Z",\n    fill: "white"\n  }), /*#__PURE__*/react.createElement("path", {\n    d: "M17.7689 33.4343C26.4389 33.4343 33.4674 26.4058 33.4674 17.7358C33.4674 9.0657 26.4389 2.03723 17.7689 2.03723C9.09884 2.03723 2.07037 9.0657 2.07037 17.7358C2.07037 26.4058 9.09884 33.4343 17.7689 33.4343Z",\n    fill: "url(#paint0_linear_508_1449)"\n  }), /*#__PURE__*/react.createElement("path", {\n    d: "M18.1897 30.3613C16.3901 28.1578 15.4422 27.0086 15.3479 26.915C14.9918 26.4884 14.3878 25.8966 13.5356 25.1388C13.9144 23.1008 14.4119 21.5143 15.0282 20.3767C15.2647 19.9739 16.2479 18.6473 17.9773 16.3969C18.9252 18.3629 20.2046 19.6895 21.8149 20.3767C22.1695 20.5189 23.6977 20.839 26.3974 21.3368C28.3882 21.7382 29.9876 22.4852 31.1947 23.5753C32.9004 25.114 34.3804 27.6728 35.6357 31.2494C30.5431 28.3831 26.9068 27.3769 24.7284 28.2294C23.7092 28.8457 22.8326 29.331 22.099 29.6863C20.9858 30.2544 19.6826 30.4798 18.1897 30.3613Z",\n    fill: "white"\n  }), /*#__PURE__*/react.createElement("path", {\n    d: "M18.7585 12.5953C18.5451 13.9457 18.0839 15.0477 17.3729 15.8998C16.9697 16.3973 16.1881 17.0845 15.0275 17.9608C12.7055 19.6657 11.0243 21.8689 9.9821 24.5693C8.96366 27.1278 8.70302 29.722 9.2009 32.3518L8.45498 32.4216C7.88582 29.7699 8.12342 27.1516 9.16526 24.5697C10.2312 21.8218 12.0316 19.5232 14.566 17.6767C15.9639 16.6342 16.8761 15.2485 17.3023 13.5198C17.6339 12.0989 17.5979 10.5466 17.1954 8.86466C16.888 7.41962 16.3779 6.34178 15.6683 5.6315C14.9807 4.94462 14.2938 4.69622 13.6066 4.88558C11.9959 5.31182 11.3796 7.34942 11.7594 10.9969C12.1147 14.4555 12.7782 16.6349 13.7488 17.5345C12.7779 17.6062 11.9373 16.2796 11.2263 13.5551C10.539 10.8547 10.444 8.50934 10.9415 6.51998C11.155 5.5253 11.6169 4.77902 12.3271 4.2815C13.4169 3.52334 14.6844 3.61838 16.1298 4.56554C17.077 5.18186 17.7757 6.1409 18.225 7.44374C18.7704 8.86466 18.949 10.5822 18.7585 12.5953ZM11.8656 32.6041C10.5156 26.532 11.4275 22.149 14.602 19.4523C12.4463 24.1395 11.8779 28.5473 12.8963 32.6769L11.8656 32.6041Z",\n    fill: "white"\n  })), /*#__PURE__*/react.createElement("defs", null, /*#__PURE__*/react.createElement("linearGradient", {\n    id: "paint0_linear_508_1449",\n    x1: "15.0425",\n    y1: "2.27336",\n    x2: "20.4954",\n    y2: "33.1986",\n    gradientUnits: "userSpaceOnUse"\n  }, /*#__PURE__*/react.createElement("stop", {\n    stopColor: "#B5460F"\n  }), /*#__PURE__*/react.createElement("stop", {\n    offset: "1",\n    stopColor: "#B5460F"\n  })), /*#__PURE__*/react.createElement("clipPath", {\n    id: "clip0_508_1449"\n  }, /*#__PURE__*/react.createElement("rect", {\n    width: "36",\n    height: "36",\n    fill: "white"\n  }))));\n};\n/* harmony default export */ const LogoIcon_LogoIcon = (LogoIcon);\n;// CONCATENATED MODULE: ./src/components/icons/LogoIcon/index.ts\n\n// EXTERNAL MODULE: ./node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[0].use[1]!./node_modules/postcss-loader/dist/cjs.js??ruleSet[1].rules[0].use[2]!./node_modules/sass-loader/dist/cjs.js!./src/components/Header/components/LogoBlock/LogoBlock.module.scss\nvar LogoBlock_module = __webpack_require__(7341);\n;// CONCATENATED MODULE: ./src/components/Header/components/LogoBlock/LogoBlock.module.scss\n\n      \n      \n      \n      \n      \n      \n      \n      \n      \n\nvar LogoBlock_module_options = {};\n\nLogoBlock_module_options.styleTagTransform = (styleTagTransform_default());\nLogoBlock_module_options.setAttributes = (setAttributesWithoutAttributes_default());\nLogoBlock_module_options.insert = insertBySelector_default().bind(null, "head");\nLogoBlock_module_options.domAPI = (styleDomAPI_default());\nLogoBlock_module_options.insertStyleElement = (insertStyleElement_default());\n\nvar LogoBlock_module_update = injectStylesIntoStyleTag_default()(LogoBlock_module/* default */.A, LogoBlock_module_options);\n\n\n\n\n       /* harmony default export */ const LogoBlock_LogoBlock_module = (LogoBlock_module/* default */.A && LogoBlock_module/* default */.A.locals ? LogoBlock_module/* default */.A.locals : undefined);\n\n;// CONCATENATED MODULE: ./src/components/Header/components/LogoBlock/LogoBlock.tsx\n\n\n\n\n\nconst LogoBlock = () => {\n  return /*#__PURE__*/react.createElement("div", {\n    className: LogoBlock_LogoBlock_module["logo-block"]\n  }, /*#__PURE__*/react.createElement(LogoIcon_LogoIcon, null), /*#__PURE__*/react.createElement(Text_Text, {\n    view: "p-20",\n    weight: "bold"\n  }, "Food Client"));\n};\n/* harmony default export */ const LogoBlock_LogoBlock = (/*#__PURE__*/(0,react.memo)(LogoBlock));\n;// CONCATENATED MODULE: ./src/components/Header/components/LogoBlock/index.ts\n\n;// CONCATENATED MODULE: ./src/config/paths.tsx\nconst paths = [{\n  name: \'Recipes\',\n  url: \'/recipes\',\n  authRequired: false\n}, {\n  name: \'Ingredients\',\n  url: \'/ingredients\',\n  authRequired: false\n}, {\n  name: \'Products\',\n  url: \'/products\',\n  authRequired: false\n}, {\n  name: \'Menu Items\',\n  url: \'/menuItems\',\n  authRequired: false\n}, {\n  name: \'Meal planning\',\n  url: \'/planning\',\n  authRequired: true\n}];\n/* harmony default export */ const config_paths = (paths);\n;// CONCATENATED MODULE: ./node_modules/axios/lib/helpers/bind.js\n\n\nfunction bind(fn, thisArg) {\n  return function wrap() {\n    return fn.apply(thisArg, arguments);\n  };\n}\n;// CONCATENATED MODULE: ./node_modules/axios/lib/utils.js\n\n\n\n\n// utils is a library of generic helper functions non-specific to axios\n\nconst {\n  toString: utils_toString\n} = Object.prototype;\nconst {\n  getPrototypeOf\n} = Object;\nconst kindOf = (cache => thing => {\n  const str = utils_toString.call(thing);\n  return cache[str] || (cache[str] = str.slice(8, -1).toLowerCase());\n})(Object.create(null));\nconst kindOfTest = type => {\n  type = type.toLowerCase();\n  return thing => kindOf(thing) === type;\n};\nconst typeOfTest = type => thing => typeof thing === type;\n\n/**\n * Determine if a value is an Array\n *\n * @param {Object} val The value to test\n *\n * @returns {boolean} True if value is an Array, otherwise false\n */\nconst {\n  isArray\n} = Array;\n\n/**\n * Determine if a value is undefined\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if the value is undefined, otherwise false\n */\nconst isUndefined = typeOfTest(\'undefined\');\n\n/**\n * Determine if a value is a Buffer\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a Buffer, otherwise false\n */\nfunction isBuffer(val) {\n  return val !== null && !isUndefined(val) && val.constructor !== null && !isUndefined(val.constructor) && utils_isFunction(val.constructor.isBuffer) && val.constructor.isBuffer(val);\n}\n\n/**\n * Determine if a value is an ArrayBuffer\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is an ArrayBuffer, otherwise false\n */\nconst isArrayBuffer = kindOfTest(\'ArrayBuffer\');\n\n/**\n * Determine if a value is a view on an ArrayBuffer\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a view on an ArrayBuffer, otherwise false\n */\nfunction isArrayBufferView(val) {\n  let result;\n  if (typeof ArrayBuffer !== \'undefined\' && ArrayBuffer.isView) {\n    result = ArrayBuffer.isView(val);\n  } else {\n    result = val && val.buffer && isArrayBuffer(val.buffer);\n  }\n  return result;\n}\n\n/**\n * Determine if a value is a String\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a String, otherwise false\n */\nconst isString = typeOfTest(\'string\');\n\n/**\n * Determine if a value is a Function\n *\n * @param {*} val The value to test\n * @returns {boolean} True if value is a Function, otherwise false\n */\nconst utils_isFunction = typeOfTest(\'function\');\n\n/**\n * Determine if a value is a Number\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a Number, otherwise false\n */\nconst isNumber = typeOfTest(\'number\');\n\n/**\n * Determine if a value is an Object\n *\n * @param {*} thing The value to test\n *\n * @returns {boolean} True if value is an Object, otherwise false\n */\nconst utils_isObject = thing => thing !== null && typeof thing === \'object\';\n\n/**\n * Determine if a value is a Boolean\n *\n * @param {*} thing The value to test\n * @returns {boolean} True if value is a Boolean, otherwise false\n */\nconst isBoolean = thing => thing === true || thing === false;\n\n/**\n * Determine if a value is a plain Object\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a plain Object, otherwise false\n */\nconst utils_isPlainObject = val => {\n  if (kindOf(val) !== \'object\') {\n    return false;\n  }\n  const prototype = getPrototypeOf(val);\n  return (prototype === null || prototype === Object.prototype || Object.getPrototypeOf(prototype) === null) && !(Symbol.toStringTag in val) && !(Symbol.iterator in val);\n};\n\n/**\n * Determine if a value is a Date\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a Date, otherwise false\n */\nconst isDate = kindOfTest(\'Date\');\n\n/**\n * Determine if a value is a File\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a File, otherwise false\n */\nconst isFile = kindOfTest(\'File\');\n\n/**\n * Determine if a value is a Blob\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a Blob, otherwise false\n */\nconst isBlob = kindOfTest(\'Blob\');\n\n/**\n * Determine if a value is a FileList\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a File, otherwise false\n */\nconst isFileList = kindOfTest(\'FileList\');\n\n/**\n * Determine if a value is a Stream\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a Stream, otherwise false\n */\nconst isStream = val => utils_isObject(val) && utils_isFunction(val.pipe);\n\n/**\n * Determine if a value is a FormData\n *\n * @param {*} thing The value to test\n *\n * @returns {boolean} True if value is an FormData, otherwise false\n */\nconst isFormData = thing => {\n  let kind;\n  return thing && (typeof FormData === \'function\' && thing instanceof FormData || utils_isFunction(thing.append) && ((kind = kindOf(thing)) === \'formdata\' ||\n  // detect form-data instance\n  kind === \'object\' && utils_isFunction(thing.toString) && thing.toString() === \'[object FormData]\'));\n};\n\n/**\n * Determine if a value is a URLSearchParams object\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a URLSearchParams object, otherwise false\n */\nconst isURLSearchParams = kindOfTest(\'URLSearchParams\');\n\n/**\n * Trim excess whitespace off the beginning and end of a string\n *\n * @param {String} str The String to trim\n *\n * @returns {String} The String freed of excess whitespace\n */\nconst trim = str => str.trim ? str.trim() : str.replace(/^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g, \'\');\n\n/**\n * Iterate over an Array or an Object invoking a function for each item.\n *\n * If `obj` is an Array callback will be called passing\n * the value, index, and complete array for each item.\n *\n * If \'obj\' is an Object callback will be called passing\n * the value, key, and complete object for each property.\n *\n * @param {Object|Array} obj The object to iterate\n * @param {Function} fn The callback to invoke for each item\n *\n * @param {Boolean} [allOwnKeys = false]\n * @returns {any}\n */\nfunction forEach(obj, fn, {\n  allOwnKeys = false\n} = {}) {\n  // Don\'t bother if no value provided\n  if (obj === null || typeof obj === \'undefined\') {\n    return;\n  }\n  let i;\n  let l;\n\n  // Force an array if not already something iterable\n  if (typeof obj !== \'object\') {\n    /*eslint no-param-reassign:0*/\n    obj = [obj];\n  }\n  if (isArray(obj)) {\n    // Iterate over array values\n    for (i = 0, l = obj.length; i < l; i++) {\n      fn.call(null, obj[i], i, obj);\n    }\n  } else {\n    // Iterate over object keys\n    const keys = allOwnKeys ? Object.getOwnPropertyNames(obj) : Object.keys(obj);\n    const len = keys.length;\n    let key;\n    for (i = 0; i < len; i++) {\n      key = keys[i];\n      fn.call(null, obj[key], key, obj);\n    }\n  }\n}\nfunction findKey(obj, key) {\n  key = key.toLowerCase();\n  const keys = Object.keys(obj);\n  let i = keys.length;\n  let _key;\n  while (i-- > 0) {\n    _key = keys[i];\n    if (key === _key.toLowerCase()) {\n      return _key;\n    }\n  }\n  return null;\n}\nconst _global = (() => {\n  /*eslint no-undef:0*/\n  if (typeof globalThis !== "undefined") return globalThis;\n  return typeof self !== "undefined" ? self : typeof window !== \'undefined\' ? window : global;\n})();\nconst isContextDefined = context => !isUndefined(context) && context !== _global;\n\n/**\n * Accepts varargs expecting each argument to be an object, then\n * immutably merges the properties of each object and returns result.\n *\n * When multiple objects contain the same key the later object in\n * the arguments list will take precedence.\n *\n * Example:\n *\n * ```js\n * var result = merge({foo: 123}, {foo: 456});\n * console.log(result.foo); // outputs 456\n * ```\n *\n * @param {Object} obj1 Object to merge\n *\n * @returns {Object} Result of all merge properties\n */\nfunction merge( /* obj1, obj2, obj3, ... */\n) {\n  const {\n    caseless\n  } = isContextDefined(this) && this || {};\n  const result = {};\n  const assignValue = (val, key) => {\n    const targetKey = caseless && findKey(result, key) || key;\n    if (utils_isPlainObject(result[targetKey]) && utils_isPlainObject(val)) {\n      result[targetKey] = merge(result[targetKey], val);\n    } else if (utils_isPlainObject(val)) {\n      result[targetKey] = merge({}, val);\n    } else if (isArray(val)) {\n      result[targetKey] = val.slice();\n    } else {\n      result[targetKey] = val;\n    }\n  };\n  for (let i = 0, l = arguments.length; i < l; i++) {\n    arguments[i] && forEach(arguments[i], assignValue);\n  }\n  return result;\n}\n\n/**\n * Extends object a by mutably adding to it the properties of object b.\n *\n * @param {Object} a The object to be extended\n * @param {Object} b The object to copy properties from\n * @param {Object} thisArg The object to bind function to\n *\n * @param {Boolean} [allOwnKeys]\n * @returns {Object} The resulting value of object a\n */\nconst extend = (a, b, thisArg, {\n  allOwnKeys\n} = {}) => {\n  forEach(b, (val, key) => {\n    if (thisArg && utils_isFunction(val)) {\n      a[key] = bind(val, thisArg);\n    } else {\n      a[key] = val;\n    }\n  }, {\n    allOwnKeys\n  });\n  return a;\n};\n\n/**\n * Remove byte order marker. This catches EF BB BF (the UTF-8 BOM)\n *\n * @param {string} content with BOM\n *\n * @returns {string} content value without BOM\n */\nconst stripBOM = content => {\n  if (content.charCodeAt(0) === 0xFEFF) {\n    content = content.slice(1);\n  }\n  return content;\n};\n\n/**\n * Inherit the prototype methods from one constructor into another\n * @param {function} constructor\n * @param {function} superConstructor\n * @param {object} [props]\n * @param {object} [descriptors]\n *\n * @returns {void}\n */\nconst inherits = (constructor, superConstructor, props, descriptors) => {\n  constructor.prototype = Object.create(superConstructor.prototype, descriptors);\n  constructor.prototype.constructor = constructor;\n  Object.defineProperty(constructor, \'super\', {\n    value: superConstructor.prototype\n  });\n  props && Object.assign(constructor.prototype, props);\n};\n\n/**\n * Resolve object with deep prototype chain to a flat object\n * @param {Object} sourceObj source object\n * @param {Object} [destObj]\n * @param {Function|Boolean} [filter]\n * @param {Function} [propFilter]\n *\n * @returns {Object}\n */\nconst toFlatObject = (sourceObj, destObj, filter, propFilter) => {\n  let props;\n  let i;\n  let prop;\n  const merged = {};\n  destObj = destObj || {};\n  // eslint-disable-next-line no-eq-null,eqeqeq\n  if (sourceObj == null) return destObj;\n  do {\n    props = Object.getOwnPropertyNames(sourceObj);\n    i = props.length;\n    while (i-- > 0) {\n      prop = props[i];\n      if ((!propFilter || propFilter(prop, sourceObj, destObj)) && !merged[prop]) {\n        destObj[prop] = sourceObj[prop];\n        merged[prop] = true;\n      }\n    }\n    sourceObj = filter !== false && getPrototypeOf(sourceObj);\n  } while (sourceObj && (!filter || filter(sourceObj, destObj)) && sourceObj !== Object.prototype);\n  return destObj;\n};\n\n/**\n * Determines whether a string ends with the characters of a specified string\n *\n * @param {String} str\n * @param {String} searchString\n * @param {Number} [position= 0]\n *\n * @returns {boolean}\n */\nconst endsWith = (str, searchString, position) => {\n  str = String(str);\n  if (position === undefined || position > str.length) {\n    position = str.length;\n  }\n  position -= searchString.length;\n  const lastIndex = str.indexOf(searchString, position);\n  return lastIndex !== -1 && lastIndex === position;\n};\n\n/**\n * Returns new array from array like object or null if failed\n *\n * @param {*} [thing]\n *\n * @returns {?Array}\n */\nconst toArray = thing => {\n  if (!thing) return null;\n  if (isArray(thing)) return thing;\n  let i = thing.length;\n  if (!isNumber(i)) return null;\n  const arr = new Array(i);\n  while (i-- > 0) {\n    arr[i] = thing[i];\n  }\n  return arr;\n};\n\n/**\n * Checking if the Uint8Array exists and if it does, it returns a function that checks if the\n * thing passed in is an instance of Uint8Array\n *\n * @param {TypedArray}\n *\n * @returns {Array}\n */\n// eslint-disable-next-line func-names\nconst isTypedArray = (TypedArray => {\n  // eslint-disable-next-line func-names\n  return thing => {\n    return TypedArray && thing instanceof TypedArray;\n  };\n})(typeof Uint8Array !== \'undefined\' && getPrototypeOf(Uint8Array));\n\n/**\n * For each entry in the object, call the function with the key and value.\n *\n * @param {Object<any, any>} obj - The object to iterate over.\n * @param {Function} fn - The function to call for each entry.\n *\n * @returns {void}\n */\nconst forEachEntry = (obj, fn) => {\n  const generator = obj && obj[Symbol.iterator];\n  const iterator = generator.call(obj);\n  let result;\n  while ((result = iterator.next()) && !result.done) {\n    const pair = result.value;\n    fn.call(obj, pair[0], pair[1]);\n  }\n};\n\n/**\n * It takes a regular expression and a string, and returns an array of all the matches\n *\n * @param {string} regExp - The regular expression to match against.\n * @param {string} str - The string to search.\n *\n * @returns {Array<boolean>}\n */\nconst matchAll = (regExp, str) => {\n  let matches;\n  const arr = [];\n  while ((matches = regExp.exec(str)) !== null) {\n    arr.push(matches);\n  }\n  return arr;\n};\n\n/* Checking if the kindOfTest function returns true when passed an HTMLFormElement. */\nconst isHTMLForm = kindOfTest(\'HTMLFormElement\');\nconst toCamelCase = str => {\n  return str.toLowerCase().replace(/[-_\\s]([a-z\\d])(\\w*)/g, function replacer(m, p1, p2) {\n    return p1.toUpperCase() + p2;\n  });\n};\n\n/* Creating a function that will check if an object has a property. */\nconst utils_hasOwnProperty = (({\n  hasOwnProperty\n}) => (obj, prop) => hasOwnProperty.call(obj, prop))(Object.prototype);\n\n/**\n * Determine if a value is a RegExp object\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a RegExp object, otherwise false\n */\nconst isRegExp = kindOfTest(\'RegExp\');\nconst reduceDescriptors = (obj, reducer) => {\n  const descriptors = Object.getOwnPropertyDescriptors(obj);\n  const reducedDescriptors = {};\n  forEach(descriptors, (descriptor, name) => {\n    let ret;\n    if ((ret = reducer(descriptor, name, obj)) !== false) {\n      reducedDescriptors[name] = ret || descriptor;\n    }\n  });\n  Object.defineProperties(obj, reducedDescriptors);\n};\n\n/**\n * Makes all methods read-only\n * @param {Object} obj\n */\n\nconst freezeMethods = obj => {\n  reduceDescriptors(obj, (descriptor, name) => {\n    // skip restricted props in strict mode\n    if (utils_isFunction(obj) && [\'arguments\', \'caller\', \'callee\'].indexOf(name) !== -1) {\n      return false;\n    }\n    const value = obj[name];\n    if (!utils_isFunction(value)) return;\n    descriptor.enumerable = false;\n    if (\'writable\' in descriptor) {\n      descriptor.writable = false;\n      return;\n    }\n    if (!descriptor.set) {\n      descriptor.set = () => {\n        throw Error(\'Can not rewrite read-only method \\\'\' + name + \'\\\'\');\n      };\n    }\n  });\n};\nconst toObjectSet = (arrayOrString, delimiter) => {\n  const obj = {};\n  const define = arr => {\n    arr.forEach(value => {\n      obj[value] = true;\n    });\n  };\n  isArray(arrayOrString) ? define(arrayOrString) : define(String(arrayOrString).split(delimiter));\n  return obj;\n};\nconst utils_noop = () => {};\nconst toFiniteNumber = (value, defaultValue) => {\n  value = +value;\n  return Number.isFinite(value) ? value : defaultValue;\n};\nconst ALPHA = \'abcdefghijklmnopqrstuvwxyz\';\nconst DIGIT = \'0123456789\';\nconst ALPHABET = {\n  DIGIT,\n  ALPHA,\n  ALPHA_DIGIT: ALPHA + ALPHA.toUpperCase() + DIGIT\n};\nconst generateString = (size = 16, alphabet = ALPHABET.ALPHA_DIGIT) => {\n  let str = \'\';\n  const {\n    length\n  } = alphabet;\n  while (size--) {\n    str += alphabet[Math.random() * length | 0];\n  }\n  return str;\n};\n\n/**\n * If the thing is a FormData object, return true, otherwise return false.\n *\n * @param {unknown} thing - The thing to check.\n *\n * @returns {boolean}\n */\nfunction isSpecCompliantForm(thing) {\n  return !!(thing && utils_isFunction(thing.append) && thing[Symbol.toStringTag] === \'FormData\' && thing[Symbol.iterator]);\n}\nconst toJSONObject = obj => {\n  const stack = new Array(10);\n  const visit = (source, i) => {\n    if (utils_isObject(source)) {\n      if (stack.indexOf(source) >= 0) {\n        return;\n      }\n      if (!(\'toJSON\' in source)) {\n        stack[i] = source;\n        const target = isArray(source) ? [] : {};\n        forEach(source, (value, key) => {\n          const reducedValue = visit(value, i + 1);\n          !isUndefined(reducedValue) && (target[key] = reducedValue);\n        });\n        stack[i] = undefined;\n        return target;\n      }\n    }\n    return source;\n  };\n  return visit(obj, 0);\n};\nconst isAsyncFn = kindOfTest(\'AsyncFunction\');\nconst isThenable = thing => thing && (utils_isObject(thing) || utils_isFunction(thing)) && utils_isFunction(thing.then) && utils_isFunction(thing.catch);\n/* harmony default export */ const utils = ({\n  isArray,\n  isArrayBuffer,\n  isBuffer,\n  isFormData,\n  isArrayBufferView,\n  isString,\n  isNumber,\n  isBoolean,\n  isObject: utils_isObject,\n  isPlainObject: utils_isPlainObject,\n  isUndefined,\n  isDate,\n  isFile,\n  isBlob,\n  isRegExp,\n  isFunction: utils_isFunction,\n  isStream,\n  isURLSearchParams,\n  isTypedArray,\n  isFileList,\n  forEach,\n  merge,\n  extend,\n  trim,\n  stripBOM,\n  inherits,\n  toFlatObject,\n  kindOf,\n  kindOfTest,\n  endsWith,\n  toArray,\n  forEachEntry,\n  matchAll,\n  isHTMLForm,\n  hasOwnProperty: utils_hasOwnProperty,\n  hasOwnProp: utils_hasOwnProperty,\n  // an alias to avoid ESLint no-prototype-builtins detection\n  reduceDescriptors,\n  freezeMethods,\n  toObjectSet,\n  toCamelCase,\n  noop: utils_noop,\n  toFiniteNumber,\n  findKey,\n  global: _global,\n  isContextDefined,\n  ALPHABET,\n  generateString,\n  isSpecCompliantForm,\n  toJSONObject,\n  isAsyncFn,\n  isThenable\n});\n;// CONCATENATED MODULE: ./node_modules/axios/lib/core/AxiosError.js\n\n\n\n\n/**\n * Create an Error with the specified message, config, error code, request and response.\n *\n * @param {string} message The error message.\n * @param {string} [code] The error code (for example, \'ECONNABORTED\').\n * @param {Object} [config] The config.\n * @param {Object} [request] The request.\n * @param {Object} [response] The response.\n *\n * @returns {Error} The created error.\n */\nfunction AxiosError(message, code, config, request, response) {\n  Error.call(this);\n  if (Error.captureStackTrace) {\n    Error.captureStackTrace(this, this.constructor);\n  } else {\n    this.stack = new Error().stack;\n  }\n  this.message = message;\n  this.name = \'AxiosError\';\n  code && (this.code = code);\n  config && (this.config = config);\n  request && (this.request = request);\n  response && (this.response = response);\n}\nutils.inherits(AxiosError, Error, {\n  toJSON: function toJSON() {\n    return {\n      // Standard\n      message: this.message,\n      name: this.name,\n      // Microsoft\n      description: this.description,\n      number: this.number,\n      // Mozilla\n      fileName: this.fileName,\n      lineNumber: this.lineNumber,\n      columnNumber: this.columnNumber,\n      stack: this.stack,\n      // Axios\n      config: utils.toJSONObject(this.config),\n      code: this.code,\n      status: this.response && this.response.status ? this.response.status : null\n    };\n  }\n});\nconst AxiosError_prototype = AxiosError.prototype;\nconst descriptors = {};\n[\'ERR_BAD_OPTION_VALUE\', \'ERR_BAD_OPTION\', \'ECONNABORTED\', \'ETIMEDOUT\', \'ERR_NETWORK\', \'ERR_FR_TOO_MANY_REDIRECTS\', \'ERR_DEPRECATED\', \'ERR_BAD_RESPONSE\', \'ERR_BAD_REQUEST\', \'ERR_CANCELED\', \'ERR_NOT_SUPPORT\', \'ERR_INVALID_URL\'\n// eslint-disable-next-line func-names\n].forEach(code => {\n  descriptors[code] = {\n    value: code\n  };\n});\nObject.defineProperties(AxiosError, descriptors);\nObject.defineProperty(AxiosError_prototype, \'isAxiosError\', {\n  value: true\n});\n\n// eslint-disable-next-line func-names\nAxiosError.from = (error, code, config, request, response, customProps) => {\n  const axiosError = Object.create(AxiosError_prototype);\n  utils.toFlatObject(error, axiosError, function filter(obj) {\n    return obj !== Error.prototype;\n  }, prop => {\n    return prop !== \'isAxiosError\';\n  });\n  AxiosError.call(axiosError, error.message, code, config, request, response);\n  axiosError.cause = error;\n  axiosError.name = error.name;\n  customProps && Object.assign(axiosError, customProps);\n  return axiosError;\n};\n/* harmony default export */ const core_AxiosError = (AxiosError);\n;// CONCATENATED MODULE: ./node_modules/axios/lib/helpers/null.js\n// eslint-disable-next-line strict\n/* harmony default export */ const helpers_null = (null);\n;// CONCATENATED MODULE: ./node_modules/axios/lib/helpers/toFormData.js\n\n\n\n\n// temporary hotfix to avoid circular references until AxiosURLSearchParams is refactored\n\n\n/**\n * Determines if the given thing is a array or js object.\n *\n * @param {string} thing - The object or array to be visited.\n *\n * @returns {boolean}\n */\nfunction isVisitable(thing) {\n  return utils.isPlainObject(thing) || utils.isArray(thing);\n}\n\n/**\n * It removes the brackets from the end of a string\n *\n * @param {string} key - The key of the parameter.\n *\n * @returns {string} the key without the brackets.\n */\nfunction removeBrackets(key) {\n  return utils.endsWith(key, \'[]\') ? key.slice(0, -2) : key;\n}\n\n/**\n * It takes a path, a key, and a boolean, and returns a string\n *\n * @param {string} path - The path to the current key.\n * @param {string} key - The key of the current object being iterated over.\n * @param {string} dots - If true, the key will be rendered with dots instead of brackets.\n *\n * @returns {string} The path to the current key.\n */\nfunction renderKey(path, key, dots) {\n  if (!path) return key;\n  return path.concat(key).map(function each(token, i) {\n    // eslint-disable-next-line no-param-reassign\n    token = removeBrackets(token);\n    return !dots && i ? \'[\' + token + \']\' : token;\n  }).join(dots ? \'.\' : \'\');\n}\n\n/**\n * If the array is an array and none of its elements are visitable, then it\'s a flat array.\n *\n * @param {Array<any>} arr - The array to check\n *\n * @returns {boolean}\n */\nfunction isFlatArray(arr) {\n  return utils.isArray(arr) && !arr.some(isVisitable);\n}\nconst predicates = utils.toFlatObject(utils, {}, null, function filter(prop) {\n  return /^is[A-Z]/.test(prop);\n});\n\n/**\n * Convert a data object to FormData\n *\n * @param {Object} obj\n * @param {?Object} [formData]\n * @param {?Object} [options]\n * @param {Function} [options.visitor]\n * @param {Boolean} [options.metaTokens = true]\n * @param {Boolean} [options.dots = false]\n * @param {?Boolean} [options.indexes = false]\n *\n * @returns {Object}\n **/\n\n/**\n * It converts an object into a FormData object\n *\n * @param {Object<any, any>} obj - The object to convert to form data.\n * @param {string} formData - The FormData object to append to.\n * @param {Object<string, any>} options\n *\n * @returns\n */\nfunction toFormData(obj, formData, options) {\n  if (!utils.isObject(obj)) {\n    throw new TypeError(\'target must be an object\');\n  }\n\n  // eslint-disable-next-line no-param-reassign\n  formData = formData || new (helpers_null || FormData)();\n\n  // eslint-disable-next-line no-param-reassign\n  options = utils.toFlatObject(options, {\n    metaTokens: true,\n    dots: false,\n    indexes: false\n  }, false, function defined(option, source) {\n    // eslint-disable-next-line no-eq-null,eqeqeq\n    return !utils.isUndefined(source[option]);\n  });\n  const metaTokens = options.metaTokens;\n  // eslint-disable-next-line no-use-before-define\n  const visitor = options.visitor || defaultVisitor;\n  const dots = options.dots;\n  const indexes = options.indexes;\n  const _Blob = options.Blob || typeof Blob !== \'undefined\' && Blob;\n  const useBlob = _Blob && utils.isSpecCompliantForm(formData);\n  if (!utils.isFunction(visitor)) {\n    throw new TypeError(\'visitor must be a function\');\n  }\n  function convertValue(value) {\n    if (value === null) return \'\';\n    if (utils.isDate(value)) {\n      return value.toISOString();\n    }\n    if (!useBlob && utils.isBlob(value)) {\n      throw new core_AxiosError(\'Blob is not supported. Use a Buffer instead.\');\n    }\n    if (utils.isArrayBuffer(value) || utils.isTypedArray(value)) {\n      return useBlob && typeof Blob === \'function\' ? new Blob([value]) : Buffer.from(value);\n    }\n    return value;\n  }\n\n  /**\n   * Default visitor.\n   *\n   * @param {*} value\n   * @param {String|Number} key\n   * @param {Array<String|Number>} path\n   * @this {FormData}\n   *\n   * @returns {boolean} return true to visit the each prop of the value recursively\n   */\n  function defaultVisitor(value, key, path) {\n    let arr = value;\n    if (value && !path && typeof value === \'object\') {\n      if (utils.endsWith(key, \'{}\')) {\n        // eslint-disable-next-line no-param-reassign\n        key = metaTokens ? key : key.slice(0, -2);\n        // eslint-disable-next-line no-param-reassign\n        value = JSON.stringify(value);\n      } else if (utils.isArray(value) && isFlatArray(value) || (utils.isFileList(value) || utils.endsWith(key, \'[]\')) && (arr = utils.toArray(value))) {\n        // eslint-disable-next-line no-param-reassign\n        key = removeBrackets(key);\n        arr.forEach(function each(el, index) {\n          !(utils.isUndefined(el) || el === null) && formData.append(\n          // eslint-disable-next-line no-nested-ternary\n          indexes === true ? renderKey([key], index, dots) : indexes === null ? key : key + \'[]\', convertValue(el));\n        });\n        return false;\n      }\n    }\n    if (isVisitable(value)) {\n      return true;\n    }\n    formData.append(renderKey(path, key, dots), convertValue(value));\n    return false;\n  }\n  const stack = [];\n  const exposedHelpers = Object.assign(predicates, {\n    defaultVisitor,\n    convertValue,\n    isVisitable\n  });\n  function build(value, path) {\n    if (utils.isUndefined(value)) return;\n    if (stack.indexOf(value) !== -1) {\n      throw Error(\'Circular reference detected in \' + path.join(\'.\'));\n    }\n    stack.push(value);\n    utils.forEach(value, function each(el, key) {\n      const result = !(utils.isUndefined(el) || el === null) && visitor.call(formData, el, utils.isString(key) ? key.trim() : key, path, exposedHelpers);\n      if (result === true) {\n        build(el, path ? path.concat(key) : [key]);\n      }\n    });\n    stack.pop();\n  }\n  if (!utils.isObject(obj)) {\n    throw new TypeError(\'data must be an object\');\n  }\n  build(obj);\n  return formData;\n}\n/* harmony default export */ const helpers_toFormData = (toFormData);\n;// CONCATENATED MODULE: ./node_modules/axios/lib/helpers/AxiosURLSearchParams.js\n\n\n\n\n/**\n * It encodes a string by replacing all characters that are not in the unreserved set with\n * their percent-encoded equivalents\n *\n * @param {string} str - The string to encode.\n *\n * @returns {string} The encoded string.\n */\nfunction encode(str) {\n  const charMap = {\n    \'!\': \'%21\',\n    "\'": \'%27\',\n    \'(\': \'%28\',\n    \')\': \'%29\',\n    \'~\': \'%7E\',\n    \'%20\': \'+\',\n    \'%00\': \'\\x00\'\n  };\n  return encodeURIComponent(str).replace(/[!\'()~]|%20|%00/g, function replacer(match) {\n    return charMap[match];\n  });\n}\n\n/**\n * It takes a params object and converts it to a FormData object\n *\n * @param {Object<string, any>} params - The parameters to be converted to a FormData object.\n * @param {Object<string, any>} options - The options object passed to the Axios constructor.\n *\n * @returns {void}\n */\nfunction AxiosURLSearchParams(params, options) {\n  this._pairs = [];\n  params && helpers_toFormData(params, this, options);\n}\nconst AxiosURLSearchParams_prototype = AxiosURLSearchParams.prototype;\nAxiosURLSearchParams_prototype.append = function append(name, value) {\n  this._pairs.push([name, value]);\n};\nAxiosURLSearchParams_prototype.toString = function toString(encoder) {\n  const _encode = encoder ? function (value) {\n    return encoder.call(this, value, encode);\n  } : encode;\n  return this._pairs.map(function each(pair) {\n    return _encode(pair[0]) + \'=\' + _encode(pair[1]);\n  }, \'\').join(\'&\');\n};\n/* harmony default export */ const helpers_AxiosURLSearchParams = (AxiosURLSearchParams);\n;// CONCATENATED MODULE: ./node_modules/axios/lib/helpers/buildURL.js\n\n\n\n\n\n/**\n * It replaces all instances of the characters `:`, `$`, `,`, `+`, `[`, and `]` with their\n * URI encoded counterparts\n *\n * @param {string} val The value to be encoded.\n *\n * @returns {string} The encoded value.\n */\nfunction buildURL_encode(val) {\n  return encodeURIComponent(val).replace(/%3A/gi, \':\').replace(/%24/g, \'$\').replace(/%2C/gi, \',\').replace(/%20/g, \'+\').replace(/%5B/gi, \'[\').replace(/%5D/gi, \']\');\n}\n\n/**\n * Build a URL by appending params to the end\n *\n * @param {string} url The base of the url (e.g., http://www.google.com)\n * @param {object} [params] The params to be appended\n * @param {?object} options\n *\n * @returns {string} The formatted url\n */\nfunction buildURL(url, params, options) {\n  /*eslint no-param-reassign:0*/\n  if (!params) {\n    return url;\n  }\n  const _encode = options && options.encode || buildURL_encode;\n  const serializeFn = options && options.serialize;\n  let serializedParams;\n  if (serializeFn) {\n    serializedParams = serializeFn(params, options);\n  } else {\n    serializedParams = utils.isURLSearchParams(params) ? params.toString() : new helpers_AxiosURLSearchParams(params, options).toString(_encode);\n  }\n  if (serializedParams) {\n    const hashmarkIndex = url.indexOf("#");\n    if (hashmarkIndex !== -1) {\n      url = url.slice(0, hashmarkIndex);\n    }\n    url += (url.indexOf(\'?\') === -1 ? \'?\' : \'&\') + serializedParams;\n  }\n  return url;\n}\n;// CONCATENATED MODULE: ./node_modules/axios/lib/core/InterceptorManager.js\n\n\n\nclass InterceptorManager {\n  constructor() {\n    this.handlers = [];\n  }\n\n  /**\n   * Add a new interceptor to the stack\n   *\n   * @param {Function} fulfilled The function to handle `then` for a `Promise`\n   * @param {Function} rejected The function to handle `reject` for a `Promise`\n   *\n   * @return {Number} An ID used to remove interceptor later\n   */\n  use(fulfilled, rejected, options) {\n    this.handlers.push({\n      fulfilled,\n      rejected,\n      synchronous: options ? options.synchronous : false,\n      runWhen: options ? options.runWhen : null\n    });\n    return this.handlers.length - 1;\n  }\n\n  /**\n   * Remove an interceptor from the stack\n   *\n   * @param {Number} id The ID that was returned by `use`\n   *\n   * @returns {Boolean} `true` if the interceptor was removed, `false` otherwise\n   */\n  eject(id) {\n    if (this.handlers[id]) {\n      this.handlers[id] = null;\n    }\n  }\n\n  /**\n   * Clear all interceptors from the stack\n   *\n   * @returns {void}\n   */\n  clear() {\n    if (this.handlers) {\n      this.handlers = [];\n    }\n  }\n\n  /**\n   * Iterate over all the registered interceptors\n   *\n   * This method is particularly useful for skipping over any\n   * interceptors that may have become `null` calling `eject`.\n   *\n   * @param {Function} fn The function to call for each interceptor\n   *\n   * @returns {void}\n   */\n  forEach(fn) {\n    utils.forEach(this.handlers, function forEachHandler(h) {\n      if (h !== null) {\n        fn(h);\n      }\n    });\n  }\n}\n/* harmony default export */ const core_InterceptorManager = (InterceptorManager);\n;// CONCATENATED MODULE: ./node_modules/axios/lib/defaults/transitional.js\n\n\n/* harmony default export */ const defaults_transitional = ({\n  silentJSONParsing: true,\n  forcedJSONParsing: true,\n  clarifyTimeoutError: false\n});\n;// CONCATENATED MODULE: ./node_modules/axios/lib/platform/browser/classes/URLSearchParams.js\n\n\n\n/* harmony default export */ const classes_URLSearchParams = (typeof URLSearchParams !== \'undefined\' ? URLSearchParams : helpers_AxiosURLSearchParams);\n;// CONCATENATED MODULE: ./node_modules/axios/lib/platform/browser/classes/FormData.js\n\n\n/* harmony default export */ const classes_FormData = (typeof FormData !== \'undefined\' ? FormData : null);\n;// CONCATENATED MODULE: ./node_modules/axios/lib/platform/browser/classes/Blob.js\n\n\n/* harmony default export */ const classes_Blob = (typeof Blob !== \'undefined\' ? Blob : null);\n;// CONCATENATED MODULE: ./node_modules/axios/lib/platform/browser/index.js\n\n\n\n/* harmony default export */ const browser = ({\n  isBrowser: true,\n  classes: {\n    URLSearchParams: classes_URLSearchParams,\n    FormData: classes_FormData,\n    Blob: classes_Blob\n  },\n  protocols: [\'http\', \'https\', \'file\', \'blob\', \'url\', \'data\']\n});\n;// CONCATENATED MODULE: ./node_modules/axios/lib/platform/common/utils.js\nconst hasBrowserEnv = typeof window !== \'undefined\' && typeof document !== \'undefined\';\n\n/**\n * Determine if we\'re running in a standard browser environment\n *\n * This allows axios to run in a web worker, and react-native.\n * Both environments support XMLHttpRequest, but not fully standard globals.\n *\n * web workers:\n *  typeof window -> undefined\n *  typeof document -> undefined\n *\n * react-native:\n *  navigator.product -> \'ReactNative\'\n * nativescript\n *  navigator.product -> \'NativeScript\' or \'NS\'\n *\n * @returns {boolean}\n */\nconst hasStandardBrowserEnv = (product => {\n  return hasBrowserEnv && [\'ReactNative\', \'NativeScript\', \'NS\'].indexOf(product) < 0;\n})(typeof navigator !== \'undefined\' && navigator.product);\n\n/**\n * Determine if we\'re running in a standard browser webWorker environment\n *\n * Although the `isStandardBrowserEnv` method indicates that\n * `allows axios to run in a web worker`, the WebWorker will still be\n * filtered out due to its judgment standard\n * `typeof window !== \'undefined\' && typeof document !== \'undefined\'`.\n * This leads to a problem when axios post `FormData` in webWorker\n */\nconst hasStandardBrowserWebWorkerEnv = (() => {\n  return typeof WorkerGlobalScope !== \'undefined\' &&\n  // eslint-disable-next-line no-undef\n  self instanceof WorkerGlobalScope && typeof self.importScripts === \'function\';\n})();\n\n;// CONCATENATED MODULE: ./node_modules/axios/lib/platform/index.js\n\n\n/* harmony default export */ const platform = ({\n  ...common_utils_namespaceObject,\n  ...browser\n});\n;// CONCATENATED MODULE: ./node_modules/axios/lib/helpers/toURLEncodedForm.js\n\n\n\n\n\nfunction toURLEncodedForm(data, options) {\n  return helpers_toFormData(data, new platform.classes.URLSearchParams(), Object.assign({\n    visitor: function (value, key, path, helpers) {\n      if (platform.isNode && utils.isBuffer(value)) {\n        this.append(key, value.toString(\'base64\'));\n        return false;\n      }\n      return helpers.defaultVisitor.apply(this, arguments);\n    }\n  }, options));\n}\n;// CONCATENATED MODULE: ./node_modules/axios/lib/helpers/formDataToJSON.js\n\n\n\n\n/**\n * It takes a string like `foo[x][y][z]` and returns an array like `[\'foo\', \'x\', \'y\', \'z\']\n *\n * @param {string} name - The name of the property to get.\n *\n * @returns An array of strings.\n */\nfunction parsePropPath(name) {\n  // foo[x][y][z]\n  // foo.x.y.z\n  // foo-x-y-z\n  // foo x y z\n  return utils.matchAll(/\\w+|\\[(\\w*)]/g, name).map(match => {\n    return match[0] === \'[]\' ? \'\' : match[1] || match[0];\n  });\n}\n\n/**\n * Convert an array to an object.\n *\n * @param {Array<any>} arr - The array to convert to an object.\n *\n * @returns An object with the same keys and values as the array.\n */\nfunction arrayToObject(arr) {\n  const obj = {};\n  const keys = Object.keys(arr);\n  let i;\n  const len = keys.length;\n  let key;\n  for (i = 0; i < len; i++) {\n    key = keys[i];\n    obj[key] = arr[key];\n  }\n  return obj;\n}\n\n/**\n * It takes a FormData object and returns a JavaScript object\n *\n * @param {string} formData The FormData object to convert to JSON.\n *\n * @returns {Object<string, any> | null} The converted object.\n */\nfunction formDataToJSON(formData) {\n  function buildPath(path, value, target, index) {\n    let name = path[index++];\n    if (name === \'__proto__\') return true;\n    const isNumericKey = Number.isFinite(+name);\n    const isLast = index >= path.length;\n    name = !name && utils.isArray(target) ? target.length : name;\n    if (isLast) {\n      if (utils.hasOwnProp(target, name)) {\n        target[name] = [target[name], value];\n      } else {\n        target[name] = value;\n      }\n      return !isNumericKey;\n    }\n    if (!target[name] || !utils.isObject(target[name])) {\n      target[name] = [];\n    }\n    const result = buildPath(path, value, target[name], index);\n    if (result && utils.isArray(target[name])) {\n      target[name] = arrayToObject(target[name]);\n    }\n    return !isNumericKey;\n  }\n  if (utils.isFormData(formData) && utils.isFunction(formData.entries)) {\n    const obj = {};\n    utils.forEachEntry(formData, (name, value) => {\n      buildPath(parsePropPath(name), value, obj, 0);\n    });\n    return obj;\n  }\n  return null;\n}\n/* harmony default export */ const helpers_formDataToJSON = (formDataToJSON);\n;// CONCATENATED MODULE: ./node_modules/axios/lib/defaults/index.js\n\n\n\n\n\n\n\n\n\n\n/**\n * It takes a string, tries to parse it, and if it fails, it returns the stringified version\n * of the input\n *\n * @param {any} rawValue - The value to be stringified.\n * @param {Function} parser - A function that parses a string into a JavaScript object.\n * @param {Function} encoder - A function that takes a value and returns a string.\n *\n * @returns {string} A stringified version of the rawValue.\n */\nfunction stringifySafely(rawValue, parser, encoder) {\n  if (utils.isString(rawValue)) {\n    try {\n      (parser || JSON.parse)(rawValue);\n      return utils.trim(rawValue);\n    } catch (e) {\n      if (e.name !== \'SyntaxError\') {\n        throw e;\n      }\n    }\n  }\n  return (encoder || JSON.stringify)(rawValue);\n}\nconst defaults = {\n  transitional: defaults_transitional,\n  adapter: [\'xhr\', \'http\'],\n  transformRequest: [function transformRequest(data, headers) {\n    const contentType = headers.getContentType() || \'\';\n    const hasJSONContentType = contentType.indexOf(\'application/json\') > -1;\n    const isObjectPayload = utils.isObject(data);\n    if (isObjectPayload && utils.isHTMLForm(data)) {\n      data = new FormData(data);\n    }\n    const isFormData = utils.isFormData(data);\n    if (isFormData) {\n      return hasJSONContentType ? JSON.stringify(helpers_formDataToJSON(data)) : data;\n    }\n    if (utils.isArrayBuffer(data) || utils.isBuffer(data) || utils.isStream(data) || utils.isFile(data) || utils.isBlob(data)) {\n      return data;\n    }\n    if (utils.isArrayBufferView(data)) {\n      return data.buffer;\n    }\n    if (utils.isURLSearchParams(data)) {\n      headers.setContentType(\'application/x-www-form-urlencoded;charset=utf-8\', false);\n      return data.toString();\n    }\n    let isFileList;\n    if (isObjectPayload) {\n      if (contentType.indexOf(\'application/x-www-form-urlencoded\') > -1) {\n        return toURLEncodedForm(data, this.formSerializer).toString();\n      }\n      if ((isFileList = utils.isFileList(data)) || contentType.indexOf(\'multipart/form-data\') > -1) {\n        const _FormData = this.env && this.env.FormData;\n        return helpers_toFormData(isFileList ? {\n          \'files[]\': data\n        } : data, _FormData && new _FormData(), this.formSerializer);\n      }\n    }\n    if (isObjectPayload || hasJSONContentType) {\n      headers.setContentType(\'application/json\', false);\n      return stringifySafely(data);\n    }\n    return data;\n  }],\n  transformResponse: [function transformResponse(data) {\n    const transitional = this.transitional || defaults.transitional;\n    const forcedJSONParsing = transitional && transitional.forcedJSONParsing;\n    const JSONRequested = this.responseType === \'json\';\n    if (data && utils.isString(data) && (forcedJSONParsing && !this.responseType || JSONRequested)) {\n      const silentJSONParsing = transitional && transitional.silentJSONParsing;\n      const strictJSONParsing = !silentJSONParsing && JSONRequested;\n      try {\n        return JSON.parse(data);\n      } catch (e) {\n        if (strictJSONParsing) {\n          if (e.name === \'SyntaxError\') {\n            throw core_AxiosError.from(e, core_AxiosError.ERR_BAD_RESPONSE, this, null, this.response);\n          }\n          throw e;\n        }\n      }\n    }\n    return data;\n  }],\n  /**\n   * A timeout in milliseconds to abort a request. If set to 0 (default) a\n   * timeout is not created.\n   */\n  timeout: 0,\n  xsrfCookieName: \'XSRF-TOKEN\',\n  xsrfHeaderName: \'X-XSRF-TOKEN\',\n  maxContentLength: -1,\n  maxBodyLength: -1,\n  env: {\n    FormData: platform.classes.FormData,\n    Blob: platform.classes.Blob\n  },\n  validateStatus: function validateStatus(status) {\n    return status >= 200 && status < 300;\n  },\n  headers: {\n    common: {\n      \'Accept\': \'application/json, text/plain, */*\',\n      \'Content-Type\': undefined\n    }\n  }\n};\nutils.forEach([\'delete\', \'get\', \'head\', \'post\', \'put\', \'patch\'], method => {\n  defaults.headers[method] = {};\n});\n/* harmony default export */ const lib_defaults = (defaults);\n;// CONCATENATED MODULE: ./node_modules/axios/lib/helpers/parseHeaders.js\n\n\n\n\n// RawAxiosHeaders whose duplicates are ignored by node\n// c.f. https://nodejs.org/api/http.html#http_message_headers\nconst ignoreDuplicateOf = utils.toObjectSet([\'age\', \'authorization\', \'content-length\', \'content-type\', \'etag\', \'expires\', \'from\', \'host\', \'if-modified-since\', \'if-unmodified-since\', \'last-modified\', \'location\', \'max-forwards\', \'proxy-authorization\', \'referer\', \'retry-after\', \'user-agent\']);\n\n/**\n * Parse headers into an object\n *\n * ```\n * Date: Wed, 27 Aug 2014 08:58:49 GMT\n * Content-Type: application/json\n * Connection: keep-alive\n * Transfer-Encoding: chunked\n * ```\n *\n * @param {String} rawHeaders Headers needing to be parsed\n *\n * @returns {Object} Headers parsed into an object\n */\n/* harmony default export */ const parseHeaders = (rawHeaders => {\n  const parsed = {};\n  let key;\n  let val;\n  let i;\n  rawHeaders && rawHeaders.split(\'\\n\').forEach(function parser(line) {\n    i = line.indexOf(\':\');\n    key = line.substring(0, i).trim().toLowerCase();\n    val = line.substring(i + 1).trim();\n    if (!key || parsed[key] && ignoreDuplicateOf[key]) {\n      return;\n    }\n    if (key === \'set-cookie\') {\n      if (parsed[key]) {\n        parsed[key].push(val);\n      } else {\n        parsed[key] = [val];\n      }\n    } else {\n      parsed[key] = parsed[key] ? parsed[key] + \', \' + val : val;\n    }\n  });\n  return parsed;\n});\n;// CONCATENATED MODULE: ./node_modules/axios/lib/core/AxiosHeaders.js\n\n\n\n\nconst $internals = Symbol(\'internals\');\nfunction normalizeHeader(header) {\n  return header && String(header).trim().toLowerCase();\n}\nfunction normalizeValue(value) {\n  if (value === false || value == null) {\n    return value;\n  }\n  return utils.isArray(value) ? value.map(normalizeValue) : String(value);\n}\nfunction parseTokens(str) {\n  const tokens = Object.create(null);\n  const tokensRE = /([^\\s,;=]+)\\s*(?:=\\s*([^,;]+))?/g;\n  let match;\n  while (match = tokensRE.exec(str)) {\n    tokens[match[1]] = match[2];\n  }\n  return tokens;\n}\nconst isValidHeaderName = str => /^[-_a-zA-Z0-9^`|~,!#$%&\'*+.]+$/.test(str.trim());\nfunction matchHeaderValue(context, value, header, filter, isHeaderNameFilter) {\n  if (utils.isFunction(filter)) {\n    return filter.call(this, value, header);\n  }\n  if (isHeaderNameFilter) {\n    value = header;\n  }\n  if (!utils.isString(value)) return;\n  if (utils.isString(filter)) {\n    return value.indexOf(filter) !== -1;\n  }\n  if (utils.isRegExp(filter)) {\n    return filter.test(value);\n  }\n}\nfunction formatHeader(header) {\n  return header.trim().toLowerCase().replace(/([a-z\\d])(\\w*)/g, (w, char, str) => {\n    return char.toUpperCase() + str;\n  });\n}\nfunction buildAccessors(obj, header) {\n  const accessorName = utils.toCamelCase(\' \' + header);\n  [\'get\', \'set\', \'has\'].forEach(methodName => {\n    Object.defineProperty(obj, methodName + accessorName, {\n      value: function (arg1, arg2, arg3) {\n        return this[methodName].call(this, header, arg1, arg2, arg3);\n      },\n      configurable: true\n    });\n  });\n}\nclass AxiosHeaders {\n  constructor(headers) {\n    headers && this.set(headers);\n  }\n  set(header, valueOrRewrite, rewrite) {\n    const self = this;\n    function setHeader(_value, _header, _rewrite) {\n      const lHeader = normalizeHeader(_header);\n      if (!lHeader) {\n        throw new Error(\'header name must be a non-empty string\');\n      }\n      const key = utils.findKey(self, lHeader);\n      if (!key || self[key] === undefined || _rewrite === true || _rewrite === undefined && self[key] !== false) {\n        self[key || _header] = normalizeValue(_value);\n      }\n    }\n    const setHeaders = (headers, _rewrite) => utils.forEach(headers, (_value, _header) => setHeader(_value, _header, _rewrite));\n    if (utils.isPlainObject(header) || header instanceof this.constructor) {\n      setHeaders(header, valueOrRewrite);\n    } else if (utils.isString(header) && (header = header.trim()) && !isValidHeaderName(header)) {\n      setHeaders(parseHeaders(header), valueOrRewrite);\n    } else {\n      header != null && setHeader(valueOrRewrite, header, rewrite);\n    }\n    return this;\n  }\n  get(header, parser) {\n    header = normalizeHeader(header);\n    if (header) {\n      const key = utils.findKey(this, header);\n      if (key) {\n        const value = this[key];\n        if (!parser) {\n          return value;\n        }\n        if (parser === true) {\n          return parseTokens(value);\n        }\n        if (utils.isFunction(parser)) {\n          return parser.call(this, value, key);\n        }\n        if (utils.isRegExp(parser)) {\n          return parser.exec(value);\n        }\n        throw new TypeError(\'parser must be boolean|regexp|function\');\n      }\n    }\n  }\n  has(header, matcher) {\n    header = normalizeHeader(header);\n    if (header) {\n      const key = utils.findKey(this, header);\n      return !!(key && this[key] !== undefined && (!matcher || matchHeaderValue(this, this[key], key, matcher)));\n    }\n    return false;\n  }\n  delete(header, matcher) {\n    const self = this;\n    let deleted = false;\n    function deleteHeader(_header) {\n      _header = normalizeHeader(_header);\n      if (_header) {\n        const key = utils.findKey(self, _header);\n        if (key && (!matcher || matchHeaderValue(self, self[key], key, matcher))) {\n          delete self[key];\n          deleted = true;\n        }\n      }\n    }\n    if (utils.isArray(header)) {\n      header.forEach(deleteHeader);\n    } else {\n      deleteHeader(header);\n    }\n    return deleted;\n  }\n  clear(matcher) {\n    const keys = Object.keys(this);\n    let i = keys.length;\n    let deleted = false;\n    while (i--) {\n      const key = keys[i];\n      if (!matcher || matchHeaderValue(this, this[key], key, matcher, true)) {\n        delete this[key];\n        deleted = true;\n      }\n    }\n    return deleted;\n  }\n  normalize(format) {\n    const self = this;\n    const headers = {};\n    utils.forEach(this, (value, header) => {\n      const key = utils.findKey(headers, header);\n      if (key) {\n        self[key] = normalizeValue(value);\n        delete self[header];\n        return;\n      }\n      const normalized = format ? formatHeader(header) : String(header).trim();\n      if (normalized !== header) {\n        delete self[header];\n      }\n      self[normalized] = normalizeValue(value);\n      headers[normalized] = true;\n    });\n    return this;\n  }\n  concat(...targets) {\n    return this.constructor.concat(this, ...targets);\n  }\n  toJSON(asStrings) {\n    const obj = Object.create(null);\n    utils.forEach(this, (value, header) => {\n      value != null && value !== false && (obj[header] = asStrings && utils.isArray(value) ? value.join(\', \') : value);\n    });\n    return obj;\n  }\n  [Symbol.iterator]() {\n    return Object.entries(this.toJSON())[Symbol.iterator]();\n  }\n  toString() {\n    return Object.entries(this.toJSON()).map(([header, value]) => header + \': \' + value).join(\'\\n\');\n  }\n  get [Symbol.toStringTag]() {\n    return \'AxiosHeaders\';\n  }\n  static from(thing) {\n    return thing instanceof this ? thing : new this(thing);\n  }\n  static concat(first, ...targets) {\n    const computed = new this(first);\n    targets.forEach(target => computed.set(target));\n    return computed;\n  }\n  static accessor(header) {\n    const internals = this[$internals] = this[$internals] = {\n      accessors: {}\n    };\n    const accessors = internals.accessors;\n    const prototype = this.prototype;\n    function defineAccessor(_header) {\n      const lHeader = normalizeHeader(_header);\n      if (!accessors[lHeader]) {\n        buildAccessors(prototype, _header);\n        accessors[lHeader] = true;\n      }\n    }\n    utils.isArray(header) ? header.forEach(defineAccessor) : defineAccessor(header);\n    return this;\n  }\n}\nAxiosHeaders.accessor([\'Content-Type\', \'Content-Length\', \'Accept\', \'Accept-Encoding\', \'User-Agent\', \'Authorization\']);\n\n// reserved names hotfix\nutils.reduceDescriptors(AxiosHeaders.prototype, ({\n  value\n}, key) => {\n  let mapped = key[0].toUpperCase() + key.slice(1); // map `set` => `Set`\n  return {\n    get: () => value,\n    set(headerValue) {\n      this[mapped] = headerValue;\n    }\n  };\n});\nutils.freezeMethods(AxiosHeaders);\n/* harmony default export */ const core_AxiosHeaders = (AxiosHeaders);\n;// CONCATENATED MODULE: ./node_modules/axios/lib/core/transformData.js\n\n\n\n\n\n\n/**\n * Transform the data for a request or a response\n *\n * @param {Array|Function} fns A single function or Array of functions\n * @param {?Object} response The response object\n *\n * @returns {*} The resulting transformed data\n */\nfunction transformData(fns, response) {\n  const config = this || lib_defaults;\n  const context = response || config;\n  const headers = core_AxiosHeaders.from(context.headers);\n  let data = context.data;\n  utils.forEach(fns, function transform(fn) {\n    data = fn.call(config, data, headers.normalize(), response ? response.status : undefined);\n  });\n  headers.normalize();\n  return data;\n}\n;// CONCATENATED MODULE: ./node_modules/axios/lib/cancel/isCancel.js\n\n\nfunction isCancel(value) {\n  return !!(value && value.__CANCEL__);\n}\n;// CONCATENATED MODULE: ./node_modules/axios/lib/cancel/CanceledError.js\n\n\n\n\n\n/**\n * A `CanceledError` is an object that is thrown when an operation is canceled.\n *\n * @param {string=} message The message.\n * @param {Object=} config The config.\n * @param {Object=} request The request.\n *\n * @returns {CanceledError} The created error.\n */\nfunction CanceledError(message, config, request) {\n  // eslint-disable-next-line no-eq-null,eqeqeq\n  core_AxiosError.call(this, message == null ? \'canceled\' : message, core_AxiosError.ERR_CANCELED, config, request);\n  this.name = \'CanceledError\';\n}\nutils.inherits(CanceledError, core_AxiosError, {\n  __CANCEL__: true\n});\n/* harmony default export */ const cancel_CanceledError = (CanceledError);\n;// CONCATENATED MODULE: ./node_modules/axios/lib/core/settle.js\n\n\n\n\n/**\n * Resolve or reject a Promise based on response status.\n *\n * @param {Function} resolve A function that resolves the promise.\n * @param {Function} reject A function that rejects the promise.\n * @param {object} response The response.\n *\n * @returns {object} The response.\n */\nfunction settle(resolve, reject, response) {\n  const validateStatus = response.config.validateStatus;\n  if (!response.status || !validateStatus || validateStatus(response.status)) {\n    resolve(response);\n  } else {\n    reject(new core_AxiosError(\'Request failed with status code \' + response.status, [core_AxiosError.ERR_BAD_REQUEST, core_AxiosError.ERR_BAD_RESPONSE][Math.floor(response.status / 100) - 4], response.config, response.request, response));\n  }\n}\n;// CONCATENATED MODULE: ./node_modules/axios/lib/helpers/cookies.js\n\n\n/* harmony default export */ const cookies = (platform.hasStandardBrowserEnv ?\n// Standard browser envs support document.cookie\n{\n  write(name, value, expires, path, domain, secure) {\n    const cookie = [name + \'=\' + encodeURIComponent(value)];\n    utils.isNumber(expires) && cookie.push(\'expires=\' + new Date(expires).toGMTString());\n    utils.isString(path) && cookie.push(\'path=\' + path);\n    utils.isString(domain) && cookie.push(\'domain=\' + domain);\n    secure === true && cookie.push(\'secure\');\n    document.cookie = cookie.join(\'; \');\n  },\n  read(name) {\n    const match = document.cookie.match(new RegExp(\'(^|;\\\\s*)(\' + name + \')=([^;]*)\'));\n    return match ? decodeURIComponent(match[3]) : null;\n  },\n  remove(name) {\n    this.write(name, \'\', Date.now() - 86400000);\n  }\n} :\n// Non-standard browser env (web workers, react-native) lack needed support.\n{\n  write() {},\n  read() {\n    return null;\n  },\n  remove() {}\n});\n;// CONCATENATED MODULE: ./node_modules/axios/lib/helpers/isAbsoluteURL.js\n\n\n/**\n * Determines whether the specified URL is absolute\n *\n * @param {string} url The URL to test\n *\n * @returns {boolean} True if the specified URL is absolute, otherwise false\n */\nfunction isAbsoluteURL(url) {\n  // A URL is considered absolute if it begins with "<scheme>://" or "//" (protocol-relative URL).\n  // RFC 3986 defines scheme name as a sequence of characters beginning with a letter and followed\n  // by any combination of letters, digits, plus, period, or hyphen.\n  return /^([a-z][a-z\\d+\\-.]*:)?\\/\\//i.test(url);\n}\n;// CONCATENATED MODULE: ./node_modules/axios/lib/helpers/combineURLs.js\n\n\n/**\n * Creates a new URL by combining the specified URLs\n *\n * @param {string} baseURL The base URL\n * @param {string} relativeURL The relative URL\n *\n * @returns {string} The combined URL\n */\nfunction combineURLs(baseURL, relativeURL) {\n  return relativeURL ? baseURL.replace(/\\/?\\/$/, \'\') + \'/\' + relativeURL.replace(/^\\/+/, \'\') : baseURL;\n}\n;// CONCATENATED MODULE: ./node_modules/axios/lib/core/buildFullPath.js\n\n\n\n\n\n/**\n * Creates a new URL by combining the baseURL with the requestedURL,\n * only when the requestedURL is not already an absolute URL.\n * If the requestURL is absolute, this function returns the requestedURL untouched.\n *\n * @param {string} baseURL The base URL\n * @param {string} requestedURL Absolute or relative URL to combine\n *\n * @returns {string} The combined full path\n */\nfunction buildFullPath(baseURL, requestedURL) {\n  if (baseURL && !isAbsoluteURL(requestedURL)) {\n    return combineURLs(baseURL, requestedURL);\n  }\n  return requestedURL;\n}\n;// CONCATENATED MODULE: ./node_modules/axios/lib/helpers/isURLSameOrigin.js\n\n\n\n\n/* harmony default export */ const isURLSameOrigin = (platform.hasStandardBrowserEnv ?\n// Standard browser envs have full support of the APIs needed to test\n// whether the request URL is of the same origin as current location.\nfunction standardBrowserEnv() {\n  const msie = /(msie|trident)/i.test(navigator.userAgent);\n  const urlParsingNode = document.createElement(\'a\');\n  let originURL;\n\n  /**\n  * Parse a URL to discover its components\n  *\n  * @param {String} url The URL to be parsed\n  * @returns {Object}\n  */\n  function resolveURL(url) {\n    let href = url;\n    if (msie) {\n      // IE needs attribute set twice to normalize properties\n      urlParsingNode.setAttribute(\'href\', href);\n      href = urlParsingNode.href;\n    }\n    urlParsingNode.setAttribute(\'href\', href);\n\n    // urlParsingNode provides the UrlUtils interface - http://url.spec.whatwg.org/#urlutils\n    return {\n      href: urlParsingNode.href,\n      protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, \'\') : \'\',\n      host: urlParsingNode.host,\n      search: urlParsingNode.search ? urlParsingNode.search.replace(/^\\?/, \'\') : \'\',\n      hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, \'\') : \'\',\n      hostname: urlParsingNode.hostname,\n      port: urlParsingNode.port,\n      pathname: urlParsingNode.pathname.charAt(0) === \'/\' ? urlParsingNode.pathname : \'/\' + urlParsingNode.pathname\n    };\n  }\n  originURL = resolveURL(window.location.href);\n\n  /**\n  * Determine if a URL shares the same origin as the current location\n  *\n  * @param {String} requestURL The URL to test\n  * @returns {boolean} True if URL shares the same origin, otherwise false\n  */\n  return function isURLSameOrigin(requestURL) {\n    const parsed = utils.isString(requestURL) ? resolveURL(requestURL) : requestURL;\n    return parsed.protocol === originURL.protocol && parsed.host === originURL.host;\n  };\n}() :\n// Non standard browser envs (web workers, react-native) lack needed support.\nfunction nonStandardBrowserEnv() {\n  return function isURLSameOrigin() {\n    return true;\n  };\n}());\n;// CONCATENATED MODULE: ./node_modules/axios/lib/helpers/parseProtocol.js\n\n\nfunction parseProtocol(url) {\n  const match = /^([-+\\w]{1,25})(:?\\/\\/|:)/.exec(url);\n  return match && match[1] || \'\';\n}\n;// CONCATENATED MODULE: ./node_modules/axios/lib/helpers/speedometer.js\n\n\n/**\n * Calculate data maxRate\n * @param {Number} [samplesCount= 10]\n * @param {Number} [min= 1000]\n * @returns {Function}\n */\nfunction speedometer(samplesCount, min) {\n  samplesCount = samplesCount || 10;\n  const bytes = new Array(samplesCount);\n  const timestamps = new Array(samplesCount);\n  let head = 0;\n  let tail = 0;\n  let firstSampleTS;\n  min = min !== undefined ? min : 1000;\n  return function push(chunkLength) {\n    const now = Date.now();\n    const startedAt = timestamps[tail];\n    if (!firstSampleTS) {\n      firstSampleTS = now;\n    }\n    bytes[head] = chunkLength;\n    timestamps[head] = now;\n    let i = tail;\n    let bytesCount = 0;\n    while (i !== head) {\n      bytesCount += bytes[i++];\n      i = i % samplesCount;\n    }\n    head = (head + 1) % samplesCount;\n    if (head === tail) {\n      tail = (tail + 1) % samplesCount;\n    }\n    if (now - firstSampleTS < min) {\n      return;\n    }\n    const passed = startedAt && now - startedAt;\n    return passed ? Math.round(bytesCount * 1000 / passed) : undefined;\n  };\n}\n/* harmony default export */ const helpers_speedometer = (speedometer);\n;// CONCATENATED MODULE: ./node_modules/axios/lib/adapters/xhr.js\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfunction progressEventReducer(listener, isDownloadStream) {\n  let bytesNotified = 0;\n  const _speedometer = helpers_speedometer(50, 250);\n  return e => {\n    const loaded = e.loaded;\n    const total = e.lengthComputable ? e.total : undefined;\n    const progressBytes = loaded - bytesNotified;\n    const rate = _speedometer(progressBytes);\n    const inRange = loaded <= total;\n    bytesNotified = loaded;\n    const data = {\n      loaded,\n      total,\n      progress: total ? loaded / total : undefined,\n      bytes: progressBytes,\n      rate: rate ? rate : undefined,\n      estimated: rate && total && inRange ? (total - loaded) / rate : undefined,\n      event: e\n    };\n    data[isDownloadStream ? \'download\' : \'upload\'] = true;\n    listener(data);\n  };\n}\nconst isXHRAdapterSupported = typeof XMLHttpRequest !== \'undefined\';\n/* harmony default export */ const xhr = (isXHRAdapterSupported && function (config) {\n  return new Promise(function dispatchXhrRequest(resolve, reject) {\n    let requestData = config.data;\n    const requestHeaders = core_AxiosHeaders.from(config.headers).normalize();\n    let {\n      responseType,\n      withXSRFToken\n    } = config;\n    let onCanceled;\n    function done() {\n      if (config.cancelToken) {\n        config.cancelToken.unsubscribe(onCanceled);\n      }\n      if (config.signal) {\n        config.signal.removeEventListener(\'abort\', onCanceled);\n      }\n    }\n    let contentType;\n    if (utils.isFormData(requestData)) {\n      if (platform.hasStandardBrowserEnv || platform.hasStandardBrowserWebWorkerEnv) {\n        requestHeaders.setContentType(false); // Let the browser set it\n      } else if ((contentType = requestHeaders.getContentType()) !== false) {\n        // fix semicolon duplication issue for ReactNative FormData implementation\n        const [type, ...tokens] = contentType ? contentType.split(\';\').map(token => token.trim()).filter(Boolean) : [];\n        requestHeaders.setContentType([type || \'multipart/form-data\', ...tokens].join(\'; \'));\n      }\n    }\n    let request = new XMLHttpRequest();\n\n    // HTTP basic authentication\n    if (config.auth) {\n      const username = config.auth.username || \'\';\n      const password = config.auth.password ? unescape(encodeURIComponent(config.auth.password)) : \'\';\n      requestHeaders.set(\'Authorization\', \'Basic \' + btoa(username + \':\' + password));\n    }\n    const fullPath = buildFullPath(config.baseURL, config.url);\n    request.open(config.method.toUpperCase(), buildURL(fullPath, config.params, config.paramsSerializer), true);\n\n    // Set the request timeout in MS\n    request.timeout = config.timeout;\n    function onloadend() {\n      if (!request) {\n        return;\n      }\n      // Prepare the response\n      const responseHeaders = core_AxiosHeaders.from(\'getAllResponseHeaders\' in request && request.getAllResponseHeaders());\n      const responseData = !responseType || responseType === \'text\' || responseType === \'json\' ? request.responseText : request.response;\n      const response = {\n        data: responseData,\n        status: request.status,\n        statusText: request.statusText,\n        headers: responseHeaders,\n        config,\n        request\n      };\n      settle(function _resolve(value) {\n        resolve(value);\n        done();\n      }, function _reject(err) {\n        reject(err);\n        done();\n      }, response);\n\n      // Clean up request\n      request = null;\n    }\n    if (\'onloadend\' in request) {\n      // Use onloadend if available\n      request.onloadend = onloadend;\n    } else {\n      // Listen for ready state to emulate onloadend\n      request.onreadystatechange = function handleLoad() {\n        if (!request || request.readyState !== 4) {\n          return;\n        }\n\n        // The request errored out and we didn\'t get a response, this will be\n        // handled by onerror instead\n        // With one exception: request that using file: protocol, most browsers\n        // will return status as 0 even though it\'s a successful request\n        if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf(\'file:\') === 0)) {\n          return;\n        }\n        // readystate handler is calling before onerror or ontimeout handlers,\n        // so we should call onloadend on the next \'tick\'\n        setTimeout(onloadend);\n      };\n    }\n\n    // Handle browser request cancellation (as opposed to a manual cancellation)\n    request.onabort = function handleAbort() {\n      if (!request) {\n        return;\n      }\n      reject(new core_AxiosError(\'Request aborted\', core_AxiosError.ECONNABORTED, config, request));\n\n      // Clean up request\n      request = null;\n    };\n\n    // Handle low level network errors\n    request.onerror = function handleError() {\n      // Real errors are hidden from us by the browser\n      // onerror should only fire if it\'s a network error\n      reject(new core_AxiosError(\'Network Error\', core_AxiosError.ERR_NETWORK, config, request));\n\n      // Clean up request\n      request = null;\n    };\n\n    // Handle timeout\n    request.ontimeout = function handleTimeout() {\n      let timeoutErrorMessage = config.timeout ? \'timeout of \' + config.timeout + \'ms exceeded\' : \'timeout exceeded\';\n      const transitional = config.transitional || defaults_transitional;\n      if (config.timeoutErrorMessage) {\n        timeoutErrorMessage = config.timeoutErrorMessage;\n      }\n      reject(new core_AxiosError(timeoutErrorMessage, transitional.clarifyTimeoutError ? core_AxiosError.ETIMEDOUT : core_AxiosError.ECONNABORTED, config, request));\n\n      // Clean up request\n      request = null;\n    };\n\n    // Add xsrf header\n    // This is only done if running in a standard browser environment.\n    // Specifically not if we\'re in a web worker, or react-native.\n    if (platform.hasStandardBrowserEnv) {\n      withXSRFToken && utils.isFunction(withXSRFToken) && (withXSRFToken = withXSRFToken(config));\n      if (withXSRFToken || withXSRFToken !== false && isURLSameOrigin(fullPath)) {\n        // Add xsrf header\n        const xsrfValue = config.xsrfHeaderName && config.xsrfCookieName && cookies.read(config.xsrfCookieName);\n        if (xsrfValue) {\n          requestHeaders.set(config.xsrfHeaderName, xsrfValue);\n        }\n      }\n    }\n\n    // Remove Content-Type if data is undefined\n    requestData === undefined && requestHeaders.setContentType(null);\n\n    // Add headers to the request\n    if (\'setRequestHeader\' in request) {\n      utils.forEach(requestHeaders.toJSON(), function setRequestHeader(val, key) {\n        request.setRequestHeader(key, val);\n      });\n    }\n\n    // Add withCredentials to request if needed\n    if (!utils.isUndefined(config.withCredentials)) {\n      request.withCredentials = !!config.withCredentials;\n    }\n\n    // Add responseType to request if needed\n    if (responseType && responseType !== \'json\') {\n      request.responseType = config.responseType;\n    }\n\n    // Handle progress if needed\n    if (typeof config.onDownloadProgress === \'function\') {\n      request.addEventListener(\'progress\', progressEventReducer(config.onDownloadProgress, true));\n    }\n\n    // Not all browsers support upload events\n    if (typeof config.onUploadProgress === \'function\' && request.upload) {\n      request.upload.addEventListener(\'progress\', progressEventReducer(config.onUploadProgress));\n    }\n    if (config.cancelToken || config.signal) {\n      // Handle cancellation\n      // eslint-disable-next-line func-names\n      onCanceled = cancel => {\n        if (!request) {\n          return;\n        }\n        reject(!cancel || cancel.type ? new cancel_CanceledError(null, config, request) : cancel);\n        request.abort();\n        request = null;\n      };\n      config.cancelToken && config.cancelToken.subscribe(onCanceled);\n      if (config.signal) {\n        config.signal.aborted ? onCanceled() : config.signal.addEventListener(\'abort\', onCanceled);\n      }\n    }\n    const protocol = parseProtocol(fullPath);\n    if (protocol && platform.protocols.indexOf(protocol) === -1) {\n      reject(new core_AxiosError(\'Unsupported protocol \' + protocol + \':\', core_AxiosError.ERR_BAD_REQUEST, config));\n      return;\n    }\n\n    // Send the request\n    request.send(requestData || null);\n  });\n});\n;// CONCATENATED MODULE: ./node_modules/axios/lib/adapters/adapters.js\n\n\n\n\nconst knownAdapters = {\n  http: helpers_null,\n  xhr: xhr\n};\nutils.forEach(knownAdapters, (fn, value) => {\n  if (fn) {\n    try {\n      Object.defineProperty(fn, \'name\', {\n        value\n      });\n    } catch (e) {\n      // eslint-disable-next-line no-empty\n    }\n    Object.defineProperty(fn, \'adapterName\', {\n      value\n    });\n  }\n});\nconst renderReason = reason => `- ${reason}`;\nconst isResolvedHandle = adapter => utils.isFunction(adapter) || adapter === null || adapter === false;\n/* harmony default export */ const adapters = ({\n  getAdapter: adapters => {\n    adapters = utils.isArray(adapters) ? adapters : [adapters];\n    const {\n      length\n    } = adapters;\n    let nameOrAdapter;\n    let adapter;\n    const rejectedReasons = {};\n    for (let i = 0; i < length; i++) {\n      nameOrAdapter = adapters[i];\n      let id;\n      adapter = nameOrAdapter;\n      if (!isResolvedHandle(nameOrAdapter)) {\n        adapter = knownAdapters[(id = String(nameOrAdapter)).toLowerCase()];\n        if (adapter === undefined) {\n          throw new core_AxiosError(`Unknown adapter \'${id}\'`);\n        }\n      }\n      if (adapter) {\n        break;\n      }\n      rejectedReasons[id || \'#\' + i] = adapter;\n    }\n    if (!adapter) {\n      const reasons = Object.entries(rejectedReasons).map(([id, state]) => `adapter ${id} ` + (state === false ? \'is not supported by the environment\' : \'is not available in the build\'));\n      let s = length ? reasons.length > 1 ? \'since :\\n\' + reasons.map(renderReason).join(\'\\n\') : \' \' + renderReason(reasons[0]) : \'as no adapter specified\';\n      throw new core_AxiosError(`There is no suitable adapter to dispatch the request ` + s, \'ERR_NOT_SUPPORT\');\n    }\n    return adapter;\n  },\n  adapters: knownAdapters\n});\n;// CONCATENATED MODULE: ./node_modules/axios/lib/core/dispatchRequest.js\n\n\n\n\n\n\n\n\n\n/**\n * Throws a `CanceledError` if cancellation has been requested.\n *\n * @param {Object} config The config that is to be used for the request\n *\n * @returns {void}\n */\nfunction throwIfCancellationRequested(config) {\n  if (config.cancelToken) {\n    config.cancelToken.throwIfRequested();\n  }\n  if (config.signal && config.signal.aborted) {\n    throw new cancel_CanceledError(null, config);\n  }\n}\n\n/**\n * Dispatch a request to the server using the configured adapter.\n *\n * @param {object} config The config that is to be used for the request\n *\n * @returns {Promise} The Promise to be fulfilled\n */\nfunction dispatchRequest(config) {\n  throwIfCancellationRequested(config);\n  config.headers = core_AxiosHeaders.from(config.headers);\n\n  // Transform request data\n  config.data = transformData.call(config, config.transformRequest);\n  if ([\'post\', \'put\', \'patch\'].indexOf(config.method) !== -1) {\n    config.headers.setContentType(\'application/x-www-form-urlencoded\', false);\n  }\n  const adapter = adapters.getAdapter(config.adapter || lib_defaults.adapter);\n  return adapter(config).then(function onAdapterResolution(response) {\n    throwIfCancellationRequested(config);\n\n    // Transform response data\n    response.data = transformData.call(config, config.transformResponse, response);\n    response.headers = core_AxiosHeaders.from(response.headers);\n    return response;\n  }, function onAdapterRejection(reason) {\n    if (!isCancel(reason)) {\n      throwIfCancellationRequested(config);\n\n      // Transform response data\n      if (reason && reason.response) {\n        reason.response.data = transformData.call(config, config.transformResponse, reason.response);\n        reason.response.headers = core_AxiosHeaders.from(reason.response.headers);\n      }\n    }\n    return Promise.reject(reason);\n  });\n}\n;// CONCATENATED MODULE: ./node_modules/axios/lib/core/mergeConfig.js\n\n\n\n\nconst headersToObject = thing => thing instanceof core_AxiosHeaders ? {\n  ...thing\n} : thing;\n\n/**\n * Config-specific merge-function which creates a new config-object\n * by merging two configuration objects together.\n *\n * @param {Object} config1\n * @param {Object} config2\n *\n * @returns {Object} New object resulting from merging config2 to config1\n */\nfunction mergeConfig(config1, config2) {\n  // eslint-disable-next-line no-param-reassign\n  config2 = config2 || {};\n  const config = {};\n  function getMergedValue(target, source, caseless) {\n    if (utils.isPlainObject(target) && utils.isPlainObject(source)) {\n      return utils.merge.call({\n        caseless\n      }, target, source);\n    } else if (utils.isPlainObject(source)) {\n      return utils.merge({}, source);\n    } else if (utils.isArray(source)) {\n      return source.slice();\n    }\n    return source;\n  }\n\n  // eslint-disable-next-line consistent-return\n  function mergeDeepProperties(a, b, caseless) {\n    if (!utils.isUndefined(b)) {\n      return getMergedValue(a, b, caseless);\n    } else if (!utils.isUndefined(a)) {\n      return getMergedValue(undefined, a, caseless);\n    }\n  }\n\n  // eslint-disable-next-line consistent-return\n  function valueFromConfig2(a, b) {\n    if (!utils.isUndefined(b)) {\n      return getMergedValue(undefined, b);\n    }\n  }\n\n  // eslint-disable-next-line consistent-return\n  function defaultToConfig2(a, b) {\n    if (!utils.isUndefined(b)) {\n      return getMergedValue(undefined, b);\n    } else if (!utils.isUndefined(a)) {\n      return getMergedValue(undefined, a);\n    }\n  }\n\n  // eslint-disable-next-line consistent-return\n  function mergeDirectKeys(a, b, prop) {\n    if (prop in config2) {\n      return getMergedValue(a, b);\n    } else if (prop in config1) {\n      return getMergedValue(undefined, a);\n    }\n  }\n  const mergeMap = {\n    url: valueFromConfig2,\n    method: valueFromConfig2,\n    data: valueFromConfig2,\n    baseURL: defaultToConfig2,\n    transformRequest: defaultToConfig2,\n    transformResponse: defaultToConfig2,\n    paramsSerializer: defaultToConfig2,\n    timeout: defaultToConfig2,\n    timeoutMessage: defaultToConfig2,\n    withCredentials: defaultToConfig2,\n    withXSRFToken: defaultToConfig2,\n    adapter: defaultToConfig2,\n    responseType: defaultToConfig2,\n    xsrfCookieName: defaultToConfig2,\n    xsrfHeaderName: defaultToConfig2,\n    onUploadProgress: defaultToConfig2,\n    onDownloadProgress: defaultToConfig2,\n    decompress: defaultToConfig2,\n    maxContentLength: defaultToConfig2,\n    maxBodyLength: defaultToConfig2,\n    beforeRedirect: defaultToConfig2,\n    transport: defaultToConfig2,\n    httpAgent: defaultToConfig2,\n    httpsAgent: defaultToConfig2,\n    cancelToken: defaultToConfig2,\n    socketPath: defaultToConfig2,\n    responseEncoding: defaultToConfig2,\n    validateStatus: mergeDirectKeys,\n    headers: (a, b) => mergeDeepProperties(headersToObject(a), headersToObject(b), true)\n  };\n  utils.forEach(Object.keys(Object.assign({}, config1, config2)), function computeConfigValue(prop) {\n    const merge = mergeMap[prop] || mergeDeepProperties;\n    const configValue = merge(config1[prop], config2[prop], prop);\n    utils.isUndefined(configValue) && merge !== mergeDirectKeys || (config[prop] = configValue);\n  });\n  return config;\n}\n;// CONCATENATED MODULE: ./node_modules/axios/lib/env/data.js\nconst VERSION = "1.6.8";\n;// CONCATENATED MODULE: ./node_modules/axios/lib/helpers/validator.js\n\n\n\n\nconst validators = {};\n\n// eslint-disable-next-line func-names\n[\'object\', \'boolean\', \'number\', \'function\', \'string\', \'symbol\'].forEach((type, i) => {\n  validators[type] = function validator(thing) {\n    return typeof thing === type || \'a\' + (i < 1 ? \'n \' : \' \') + type;\n  };\n});\nconst deprecatedWarnings = {};\n\n/**\n * Transitional option validator\n *\n * @param {function|boolean?} validator - set to false if the transitional option has been removed\n * @param {string?} version - deprecated version / removed since version\n * @param {string?} message - some message with additional info\n *\n * @returns {function}\n */\nvalidators.transitional = function transitional(validator, version, message) {\n  function formatMessage(opt, desc) {\n    return \'[Axios v\' + VERSION + \'] Transitional option \\\'\' + opt + \'\\\'\' + desc + (message ? \'. \' + message : \'\');\n  }\n\n  // eslint-disable-next-line func-names\n  return (value, opt, opts) => {\n    if (validator === false) {\n      throw new core_AxiosError(formatMessage(opt, \' has been removed\' + (version ? \' in \' + version : \'\')), core_AxiosError.ERR_DEPRECATED);\n    }\n    if (version && !deprecatedWarnings[opt]) {\n      deprecatedWarnings[opt] = true;\n      // eslint-disable-next-line no-console\n      console.warn(formatMessage(opt, \' has been deprecated since v\' + version + \' and will be removed in the near future\'));\n    }\n    return validator ? validator(value, opt, opts) : true;\n  };\n};\n\n/**\n * Assert object\'s properties type\n *\n * @param {object} options\n * @param {object} schema\n * @param {boolean?} allowUnknown\n *\n * @returns {object}\n */\n\nfunction assertOptions(options, schema, allowUnknown) {\n  if (typeof options !== \'object\') {\n    throw new core_AxiosError(\'options must be an object\', core_AxiosError.ERR_BAD_OPTION_VALUE);\n  }\n  const keys = Object.keys(options);\n  let i = keys.length;\n  while (i-- > 0) {\n    const opt = keys[i];\n    const validator = schema[opt];\n    if (validator) {\n      const value = options[opt];\n      const result = value === undefined || validator(value, opt, options);\n      if (result !== true) {\n        throw new core_AxiosError(\'option \' + opt + \' must be \' + result, core_AxiosError.ERR_BAD_OPTION_VALUE);\n      }\n      continue;\n    }\n    if (allowUnknown !== true) {\n      throw new core_AxiosError(\'Unknown option \' + opt, core_AxiosError.ERR_BAD_OPTION);\n    }\n  }\n}\n/* harmony default export */ const validator = ({\n  assertOptions,\n  validators\n});\n;// CONCATENATED MODULE: ./node_modules/axios/lib/core/Axios.js\n\n\n\n\n\n\n\n\n\n\nconst Axios_validators = validator.validators;\n\n/**\n * Create a new instance of Axios\n *\n * @param {Object} instanceConfig The default config for the instance\n *\n * @return {Axios} A new instance of Axios\n */\nclass Axios {\n  constructor(instanceConfig) {\n    this.defaults = instanceConfig;\n    this.interceptors = {\n      request: new core_InterceptorManager(),\n      response: new core_InterceptorManager()\n    };\n  }\n\n  /**\n   * Dispatch a request\n   *\n   * @param {String|Object} configOrUrl The config specific for this request (merged with this.defaults)\n   * @param {?Object} config\n   *\n   * @returns {Promise} The Promise to be fulfilled\n   */\n  async request(configOrUrl, config) {\n    try {\n      return await this._request(configOrUrl, config);\n    } catch (err) {\n      if (err instanceof Error) {\n        let dummy;\n        Error.captureStackTrace ? Error.captureStackTrace(dummy = {}) : dummy = new Error();\n\n        // slice off the Error: ... line\n        const stack = dummy.stack ? dummy.stack.replace(/^.+\\n/, \'\') : \'\';\n        if (!err.stack) {\n          err.stack = stack;\n          // match without the 2 top stack lines\n        } else if (stack && !String(err.stack).endsWith(stack.replace(/^.+\\n.+\\n/, \'\'))) {\n          err.stack += \'\\n\' + stack;\n        }\n      }\n      throw err;\n    }\n  }\n  _request(configOrUrl, config) {\n    /*eslint no-param-reassign:0*/\n    // Allow for axios(\'example/url\'[, config]) a la fetch API\n    if (typeof configOrUrl === \'string\') {\n      config = config || {};\n      config.url = configOrUrl;\n    } else {\n      config = configOrUrl || {};\n    }\n    config = mergeConfig(this.defaults, config);\n    const {\n      transitional,\n      paramsSerializer,\n      headers\n    } = config;\n    if (transitional !== undefined) {\n      validator.assertOptions(transitional, {\n        silentJSONParsing: Axios_validators.transitional(Axios_validators.boolean),\n        forcedJSONParsing: Axios_validators.transitional(Axios_validators.boolean),\n        clarifyTimeoutError: Axios_validators.transitional(Axios_validators.boolean)\n      }, false);\n    }\n    if (paramsSerializer != null) {\n      if (utils.isFunction(paramsSerializer)) {\n        config.paramsSerializer = {\n          serialize: paramsSerializer\n        };\n      } else {\n        validator.assertOptions(paramsSerializer, {\n          encode: Axios_validators.function,\n          serialize: Axios_validators.function\n        }, true);\n      }\n    }\n\n    // Set config.method\n    config.method = (config.method || this.defaults.method || \'get\').toLowerCase();\n\n    // Flatten headers\n    let contextHeaders = headers && utils.merge(headers.common, headers[config.method]);\n    headers && utils.forEach([\'delete\', \'get\', \'head\', \'post\', \'put\', \'patch\', \'common\'], method => {\n      delete headers[method];\n    });\n    config.headers = core_AxiosHeaders.concat(contextHeaders, headers);\n\n    // filter out skipped interceptors\n    const requestInterceptorChain = [];\n    let synchronousRequestInterceptors = true;\n    this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {\n      if (typeof interceptor.runWhen === \'function\' && interceptor.runWhen(config) === false) {\n        return;\n      }\n      synchronousRequestInterceptors = synchronousRequestInterceptors && interceptor.synchronous;\n      requestInterceptorChain.unshift(interceptor.fulfilled, interceptor.rejected);\n    });\n    const responseInterceptorChain = [];\n    this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {\n      responseInterceptorChain.push(interceptor.fulfilled, interceptor.rejected);\n    });\n    let promise;\n    let i = 0;\n    let len;\n    if (!synchronousRequestInterceptors) {\n      const chain = [dispatchRequest.bind(this), undefined];\n      chain.unshift.apply(chain, requestInterceptorChain);\n      chain.push.apply(chain, responseInterceptorChain);\n      len = chain.length;\n      promise = Promise.resolve(config);\n      while (i < len) {\n        promise = promise.then(chain[i++], chain[i++]);\n      }\n      return promise;\n    }\n    len = requestInterceptorChain.length;\n    let newConfig = config;\n    i = 0;\n    while (i < len) {\n      const onFulfilled = requestInterceptorChain[i++];\n      const onRejected = requestInterceptorChain[i++];\n      try {\n        newConfig = onFulfilled(newConfig);\n      } catch (error) {\n        onRejected.call(this, error);\n        break;\n      }\n    }\n    try {\n      promise = dispatchRequest.call(this, newConfig);\n    } catch (error) {\n      return Promise.reject(error);\n    }\n    i = 0;\n    len = responseInterceptorChain.length;\n    while (i < len) {\n      promise = promise.then(responseInterceptorChain[i++], responseInterceptorChain[i++]);\n    }\n    return promise;\n  }\n  getUri(config) {\n    config = mergeConfig(this.defaults, config);\n    const fullPath = buildFullPath(config.baseURL, config.url);\n    return buildURL(fullPath, config.params, config.paramsSerializer);\n  }\n}\n\n// Provide aliases for supported request methods\nutils.forEach([\'delete\', \'get\', \'head\', \'options\'], function forEachMethodNoData(method) {\n  /*eslint func-names:0*/\n  Axios.prototype[method] = function (url, config) {\n    return this.request(mergeConfig(config || {}, {\n      method,\n      url,\n      data: (config || {}).data\n    }));\n  };\n});\nutils.forEach([\'post\', \'put\', \'patch\'], function forEachMethodWithData(method) {\n  /*eslint func-names:0*/\n\n  function generateHTTPMethod(isForm) {\n    return function httpMethod(url, data, config) {\n      return this.request(mergeConfig(config || {}, {\n        method,\n        headers: isForm ? {\n          \'Content-Type\': \'multipart/form-data\'\n        } : {},\n        url,\n        data\n      }));\n    };\n  }\n  Axios.prototype[method] = generateHTTPMethod();\n  Axios.prototype[method + \'Form\'] = generateHTTPMethod(true);\n});\n/* harmony default export */ const core_Axios = (Axios);\n;// CONCATENATED MODULE: ./node_modules/axios/lib/cancel/CancelToken.js\n\n\n\n\n/**\n * A `CancelToken` is an object that can be used to request cancellation of an operation.\n *\n * @param {Function} executor The executor function.\n *\n * @returns {CancelToken}\n */\nclass CancelToken {\n  constructor(executor) {\n    if (typeof executor !== \'function\') {\n      throw new TypeError(\'executor must be a function.\');\n    }\n    let resolvePromise;\n    this.promise = new Promise(function promiseExecutor(resolve) {\n      resolvePromise = resolve;\n    });\n    const token = this;\n\n    // eslint-disable-next-line func-names\n    this.promise.then(cancel => {\n      if (!token._listeners) return;\n      let i = token._listeners.length;\n      while (i-- > 0) {\n        token._listeners[i](cancel);\n      }\n      token._listeners = null;\n    });\n\n    // eslint-disable-next-line func-names\n    this.promise.then = onfulfilled => {\n      let _resolve;\n      // eslint-disable-next-line func-names\n      const promise = new Promise(resolve => {\n        token.subscribe(resolve);\n        _resolve = resolve;\n      }).then(onfulfilled);\n      promise.cancel = function reject() {\n        token.unsubscribe(_resolve);\n      };\n      return promise;\n    };\n    executor(function cancel(message, config, request) {\n      if (token.reason) {\n        // Cancellation has already been requested\n        return;\n      }\n      token.reason = new cancel_CanceledError(message, config, request);\n      resolvePromise(token.reason);\n    });\n  }\n\n  /**\n   * Throws a `CanceledError` if cancellation has been requested.\n   */\n  throwIfRequested() {\n    if (this.reason) {\n      throw this.reason;\n    }\n  }\n\n  /**\n   * Subscribe to the cancel signal\n   */\n\n  subscribe(listener) {\n    if (this.reason) {\n      listener(this.reason);\n      return;\n    }\n    if (this._listeners) {\n      this._listeners.push(listener);\n    } else {\n      this._listeners = [listener];\n    }\n  }\n\n  /**\n   * Unsubscribe from the cancel signal\n   */\n\n  unsubscribe(listener) {\n    if (!this._listeners) {\n      return;\n    }\n    const index = this._listeners.indexOf(listener);\n    if (index !== -1) {\n      this._listeners.splice(index, 1);\n    }\n  }\n\n  /**\n   * Returns an object that contains a new `CancelToken` and a function that, when called,\n   * cancels the `CancelToken`.\n   */\n  static source() {\n    let cancel;\n    const token = new CancelToken(function executor(c) {\n      cancel = c;\n    });\n    return {\n      token,\n      cancel\n    };\n  }\n}\n/* harmony default export */ const cancel_CancelToken = (CancelToken);\n;// CONCATENATED MODULE: ./node_modules/axios/lib/helpers/spread.js\n\n\n/**\n * Syntactic sugar for invoking a function and expanding an array for arguments.\n *\n * Common use case would be to use `Function.prototype.apply`.\n *\n *  ```js\n *  function f(x, y, z) {}\n *  var args = [1, 2, 3];\n *  f.apply(null, args);\n *  ```\n *\n * With `spread` this example can be re-written.\n *\n *  ```js\n *  spread(function(x, y, z) {})([1, 2, 3]);\n *  ```\n *\n * @param {Function} callback\n *\n * @returns {Function}\n */\nfunction spread(callback) {\n  return function wrap(arr) {\n    return callback.apply(null, arr);\n  };\n}\n;// CONCATENATED MODULE: ./node_modules/axios/lib/helpers/isAxiosError.js\n\n\n\n\n/**\n * Determines whether the payload is an error thrown by Axios\n *\n * @param {*} payload The value to test\n *\n * @returns {boolean} True if the payload is an error thrown by Axios, otherwise false\n */\nfunction isAxiosError(payload) {\n  return utils.isObject(payload) && payload.isAxiosError === true;\n}\n;// CONCATENATED MODULE: ./node_modules/axios/lib/helpers/HttpStatusCode.js\nconst HttpStatusCode = {\n  Continue: 100,\n  SwitchingProtocols: 101,\n  Processing: 102,\n  EarlyHints: 103,\n  Ok: 200,\n  Created: 201,\n  Accepted: 202,\n  NonAuthoritativeInformation: 203,\n  NoContent: 204,\n  ResetContent: 205,\n  PartialContent: 206,\n  MultiStatus: 207,\n  AlreadyReported: 208,\n  ImUsed: 226,\n  MultipleChoices: 300,\n  MovedPermanently: 301,\n  Found: 302,\n  SeeOther: 303,\n  NotModified: 304,\n  UseProxy: 305,\n  Unused: 306,\n  TemporaryRedirect: 307,\n  PermanentRedirect: 308,\n  BadRequest: 400,\n  Unauthorized: 401,\n  PaymentRequired: 402,\n  Forbidden: 403,\n  NotFound: 404,\n  MethodNotAllowed: 405,\n  NotAcceptable: 406,\n  ProxyAuthenticationRequired: 407,\n  RequestTimeout: 408,\n  Conflict: 409,\n  Gone: 410,\n  LengthRequired: 411,\n  PreconditionFailed: 412,\n  PayloadTooLarge: 413,\n  UriTooLong: 414,\n  UnsupportedMediaType: 415,\n  RangeNotSatisfiable: 416,\n  ExpectationFailed: 417,\n  ImATeapot: 418,\n  MisdirectedRequest: 421,\n  UnprocessableEntity: 422,\n  Locked: 423,\n  FailedDependency: 424,\n  TooEarly: 425,\n  UpgradeRequired: 426,\n  PreconditionRequired: 428,\n  TooManyRequests: 429,\n  RequestHeaderFieldsTooLarge: 431,\n  UnavailableForLegalReasons: 451,\n  InternalServerError: 500,\n  NotImplemented: 501,\n  BadGateway: 502,\n  ServiceUnavailable: 503,\n  GatewayTimeout: 504,\n  HttpVersionNotSupported: 505,\n  VariantAlsoNegotiates: 506,\n  InsufficientStorage: 507,\n  LoopDetected: 508,\n  NotExtended: 510,\n  NetworkAuthenticationRequired: 511\n};\nObject.entries(HttpStatusCode).forEach(([key, value]) => {\n  HttpStatusCode[value] = key;\n});\n/* harmony default export */ const helpers_HttpStatusCode = (HttpStatusCode);\n;// CONCATENATED MODULE: ./node_modules/axios/lib/axios.js\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/**\n * Create an instance of Axios\n *\n * @param {Object} defaultConfig The default config for the instance\n *\n * @returns {Axios} A new instance of Axios\n */\nfunction createInstance(defaultConfig) {\n  const context = new core_Axios(defaultConfig);\n  const instance = bind(core_Axios.prototype.request, context);\n\n  // Copy axios.prototype to instance\n  utils.extend(instance, core_Axios.prototype, context, {\n    allOwnKeys: true\n  });\n\n  // Copy context to instance\n  utils.extend(instance, context, null, {\n    allOwnKeys: true\n  });\n\n  // Factory for creating new instances\n  instance.create = function create(instanceConfig) {\n    return createInstance(mergeConfig(defaultConfig, instanceConfig));\n  };\n  return instance;\n}\n\n// Create the default instance to be exported\nconst axios = createInstance(lib_defaults);\n\n// Expose Axios class to allow class inheritance\naxios.Axios = core_Axios;\n\n// Expose Cancel & CancelToken\naxios.CanceledError = cancel_CanceledError;\naxios.CancelToken = cancel_CancelToken;\naxios.isCancel = isCancel;\naxios.VERSION = VERSION;\naxios.toFormData = helpers_toFormData;\n\n// Expose AxiosError class\naxios.AxiosError = core_AxiosError;\n\n// alias for CanceledError for backward compatibility\naxios.Cancel = axios.CanceledError;\n\n// Expose all/spread\naxios.all = function all(promises) {\n  return Promise.all(promises);\n};\naxios.spread = spread;\n\n// Expose isAxiosError\naxios.isAxiosError = isAxiosError;\n\n// Expose mergeConfig\naxios.mergeConfig = mergeConfig;\naxios.AxiosHeaders = core_AxiosHeaders;\naxios.formToJSON = thing => helpers_formDataToJSON(utils.isHTMLForm(thing) ? new FormData(thing) : thing);\naxios.getAdapter = adapters.getAdapter;\naxios.HttpStatusCode = helpers_HttpStatusCode;\naxios.default = axios;\n\n// this module should only have a default export\n/* harmony default export */ const lib_axios = (axios);\n;// CONCATENATED MODULE: ./src/config/api.ts\nconst apiKey = \'66e4df47862c4978bfafa99ce991e16d\';\n// 66e4df47862c4978bfafa99ce991e16d\n// 40532b3e701c465bb20134983ac0f837\nconst pageElementCount = 9;\nconst urlPrefix = \'https://api.spoonacular.com/\';\nconst imagePrefix = \'https://img.spoonacular.com/\';\nconst mealTypes = [\'main course\', \'side dish\', \'dessert\', \'appetizer\', \'salad\', \'bread\', \'breakfast\', \'soup\', \'beverage\', \'sauce\', \'marinade\', \'fingerfood\', \'snack\', \'drink\'];\nconst cuisineList = [\'African\', \'Asian\', \'American\', \'British\', \'Cajun\', \'Caribbean\', \'Chinese\', \'Eastern European\', \'European\', \'French\', \'German\', \'Greek\', \'Indian\', \'Irish\', \'Italian\', \'Japanese\', \'Jewish\', \'Korean\', \'Latin American\', \'Mediterranean\', \'Mexican\', \'Middle Eastern\', \'Nordic\', \'Sothern\', \'Spanish\', \'Thai\', \'Vietnamese\'];\nconst dietList = [\'Gluten Free\', \'Ketogenic\', \'Vegetarian\', \'Lacto-Vegetarian\', \'Ovo-Vegetarian\', \'Vegan\', \'Pescetarian\', \'Paleo\', \'Primal\', \'Low FODMAP\', \'Whole30\'];\nconst intoleranceList = [\'Dairy\', \'Egg\', \'Gluten\', \'Grain\', \'Peanut\', \'Seafood\', \'Sesame\', \'Shellfish\', \'Soy\', \'Sulfite\', \'Tree Nut\', \'Wheat\'];\nconst sortList = [\'meta-score\', \'popularity\', \'healthiness\', \'price\', \'time\', \'random\', \'max-used-ingredients\', \'min-missing-ingredients\', \'alcohol\', \'caffeine\', \'copper\', \'energy\', \'calories\', \'calcium\', \'carbohydrates\', \'carbs\', \'choline\', \'cholesterol\', \'total-fat\', \'fluoride\', \'trans-fat\', \'saturated-fat\', \'mono-unsaturated-fat\', \'poly-unsaturated-fat\', \'fiber\', \'folate\', \'folic-acid\', \'iodine\', \'iron\', \'magnesium\', \'manganese\', \'vitamin-b3\', \'niacin\', \'vitamin-b5\', \'pantothenic-acid\', \'phosphorus\', \'potassium\', \'protein\', \'vitamin-b2\', \'riboflavin\', \'selenium\', \'sodium\', \'vitamin-b1\', \'thiamin\', \'vitamin-a\', \'vitamin-b6\', \'vitamin-b12\', \'vitamin-c\', \'vitamin-d\', \'vitamin-e\', \'vitamin-k\', \'sugar\', \'zinc\'];\nconst sortDirectionList = [\'asc\', \'desc\'];\nconst stringFilters = (/* unused pure expression or super */ null && ([\'author\', \'tags\', \'titleMatch\', \'equipment\']));\nconst booleanFilters = (/* unused pure expression or super */ null && ([\'ignorePantry\']));\nconst minMaxFilters = [\'Servings\', \'Carbs\', \'Protein\', \'Calories\', \'Fat\', \'Alcohol\', \'Caffeine\', \'Copper\', \'Calcium\', \'Choline\', \'Cholesterol\', \'Fluoride\', \'SaturatedFat\', \'VitaminA\', \'VitaminC\', \'VitaminD\', \'VitaminE\', \'VitaminK\', \'VitaminB1\', \'VitaminB2\', \'VitaminB5\', \'VitaminB3\', \'VitaminB6\', \'VitaminB12\', \'Fiber\', \'Folate\', \'FolicAcid\', \'Iodine\', \'Iron\', \'Magnesium\', \'Manganese\', \'Phosphorus\', \'Potassium\', \'Selenium\', \'Sodium\', \'Sugar\', \'Zinc\'];\nconst numberFilters = (/* unused pure expression or super */ null && ([\'maxReadyTime\']));\nconst mealTypesOptions = mealTypes.map((type, index) => ({\n  key: index.toString(),\n  value: type\n}));\nconst cuisineTypesOptions = cuisineList.map((type, index) => ({\n  key: index.toString(),\n  value: type.toLowerCase()\n}));\nconst dietTypesOptions = dietList.map((type, index) => ({\n  key: index.toString(),\n  value: type.toLowerCase()\n}));\nconst intoleranceTypesOptions = intoleranceList.map((type, index) => ({\n  key: index.toString(),\n  value: type.toLowerCase()\n}));\nconst minMaxTypesOptions = minMaxFilters.map((type, index) => ({\n  key: index.toString(),\n  value: type\n}));\nconst sortTypesOptions = sortList.map((type, index) => ({\n  key: index.toString(),\n  value: type\n}));\nconst sortdirectTypesOptions = sortDirectionList.map((type, index) => ({\n  key: index.toString(),\n  value: type\n}));\nconst publicTemplates = [{\n  key: \'37\',\n  value: "Busy Work Week"\n}, {\n  key: \'480\',\n  value: "Keto Meal Plan"\n}, {\n  key: \'120\',\n  value: "Not-So-Strict Paleo Meal Plan"\n}, {\n  key: \'451\',\n  value: "Week 1 Meal Plan"\n}, {\n  key: \'581\',\n  value: "Whole30 Meal Plan"\n}];\nconst ingredientFilters = {\n  sort: {\n    type: \'OPTION\',\n    placeholder: \'sort\',\n    options: sortTypesOptions,\n    selectMode: \'ONE\'\n  },\n  sortDirection: {\n    type: \'OPTION\',\n    placeholder: \'sort direction\',\n    options: sortdirectTypesOptions,\n    selectMode: \'ONE\'\n  },\n  language: {\n    type: \'STRING\',\n    placeholder: \'en or de\'\n  }\n};\nconst recipesFilters = {\n  cuisine: {\n    type: \'OPTION\',\n    placeholder: \'cuisine\',\n    options: cuisineTypesOptions\n  },\n  excludeCuisine: {\n    type: \'OPTION\',\n    placeholder: \'excludeCuisine\',\n    options: cuisineTypesOptions\n  },\n  diet: {\n    type: \'OPTION\',\n    placeholder: \'diet\',\n    options: dietTypesOptions\n  },\n  intolerances: {\n    type: \'OPTION\',\n    placeholder: \'intolerances\',\n    options: intoleranceTypesOptions\n  },\n  equipment: {\n    type: \'STRING\',\n    placeholder: \'equipment\'\n  },\n  includeIngredients: {\n    type: \'STRING\',\n    placeholder: \'tomato,cheese\'\n  },\n  excludeIngredients: {\n    type: \'STRING\',\n    placeholder: \'eggs,tomato\'\n  },\n  author: {\n    type: \'STRING\',\n    placeholder: \'author\'\n  },\n  tags: {\n    type: \'STRING\',\n    placeholder: \'tag1,tag2,...\'\n  },\n  titlteMatch: {\n    type: \'STRING\',\n    placeholder: \'Title\'\n  },\n  maxReadyTime: {\n    type: \'NUMBER\',\n    placeholder: \'max ready time\'\n  },\n  ignorePantry: {\n    type: \'BOOLEAN\',\n    placeholder: \'...\'\n  },\n  other: {\n    type: \'MINMAX\',\n    minMaxValues: minMaxTypesOptions\n  },\n  sort: {\n    type: \'OPTION\',\n    placeholder: \'sort\',\n    options: sortTypesOptions,\n    selectMode: \'ONE\'\n  },\n  sortDirection: {\n    type: \'OPTION\',\n    placeholder: \'sort direction\',\n    options: sortdirectTypesOptions,\n    selectMode: \'ONE\'\n  }\n};\n;// CONCATENATED MODULE: ./src/config/initValues.ts\nconst RecipeInit = {\n  id: 0,\n  title: \'...\',\n  image: \'\',\n  preparationMinutes: 0,\n  cookingMinutes: 0,\n  readyInMinutes: 0,\n  servings: 0,\n  summary: \'...\',\n  aggregateLikes: 0,\n  extendedIngredients: [],\n  analyzedInstructions: [{\n    steps: []\n  }]\n};\nconst NotStartedStatus = {\n  statusName: \'NOT_STARTED\',\n  statusMessage: \'загрузка данных не началась\'\n};\nconst LoadingStatus = {\n  statusName: \'LOADING\',\n  statusMessage: \'\'\n};\nconst SuccessfulStatus = {\n  statusName: \'SUCCESS\',\n  statusMessage: \'\'\n};\nconst errorStatus = errorMes => ({\n  statusName: \'ERROR\',\n  statusMessage: errorMes\n});\n;// CONCATENATED MODULE: ./src/store/UserStore/UserStore.tsx\n\n\n\n\nconst initUser = {\n  username: \'\',\n  firstName: \'\',\n  lastName: \'\',\n  email: \'\',\n  spoonacularPassword: \'\',\n  hash: \'\'\n};\nclass UserStore {\n  _user = initUser;\n  _userStatus = \'none\';\n  _status = NotStartedStatus;\n  constructor() {\n    makeObservable(this, {\n      _user: mobx_esm_observable.ref,\n      _userStatus: mobx_esm_observable,\n      _status: mobx_esm_observable.ref,\n      setStatus: action.bound,\n      setUserData: action.bound,\n      deleteUserData: action.bound,\n      login: action.bound,\n      getCookies: action.bound,\n      logout: action.bound,\n      user: computed,\n      status: computed,\n      userStatus: computed\n    });\n  }\n  setCookie(key, value, months = 3) {\n    const cookieKey = encodeURIComponent(key);\n    const cookieValue = encodeURIComponent(value);\n    const cookieData = [cookieKey, cookieValue].join(\'=\');\n    const date = new Date();\n    date.setMonth(date.getMonth() + months);\n    const cookieExpires = [\'expires\', date.toUTCString()].join(\'=\');\n    document.cookie = [cookieData, cookieExpires, \'secure\', \'samesite=lax\'].join(\'; \');\n  }\n  deleteCookie(key) {\n    this.setCookie(key, \'\', 0);\n  }\n  parseCookie() {\n    const cookieObj = {};\n    document.cookie.split(\'; \').forEach(cookie => {\n      const cookiePair = cookie.split(\'=\').map(pairUnit => decodeURIComponent(pairUnit));\n      Object.assign(cookieObj, {\n        [cookiePair[0]]: cookiePair[1]\n      });\n    });\n    return cookieObj;\n  }\n  getCookieProperty(cookieObj, name) {\n    return cookieObj[name] || \'\';\n  }\n  setUserData(user) {\n    Object.entries(user).forEach(([key, value]) => {\n      this.setCookie(\'_\' + key, value);\n    });\n    this._user = {\n      ...user\n    };\n    this._userStatus = \'auth\';\n  }\n  deleteUserData() {\n    Object.keys(this._user).forEach(key => {\n      this.deleteCookie(\'_\' + key);\n    });\n    this._userStatus = \'none\';\n    this._user = initUser;\n    this.setStatus(NotStartedStatus);\n  }\n  setStatus(newStatus) {\n    this._status = {\n      ...newStatus\n    };\n  }\n  login(user) {\n    this._user = initUser;\n    this._userStatus = \'none\';\n    this.setStatus(LoadingStatus);\n    lib_axios.post(urlPrefix + \'users/connect?apiKey=\' + apiKey, {\n      ...user\n    }).then(resp => {\n      const {\n        status,\n        ...userResp\n      } = resp.data;\n      if (status === \'success\') {\n        this.setStatus(SuccessfulStatus);\n        const userResponse = userResp;\n        this.setUserData({\n          ...user,\n          ...userResponse\n        });\n        this._user = {\n          ...this._user\n        };\n        this._userStatus = this._userStatus;\n      } else {\n        this.setStatus(errorStatus(resp.data[\'message\']));\n      }\n    }).catch(err => {\n      this.setStatus(errorStatus(err.message));\n      this._user = {\n        ...this._user\n      };\n      this._userStatus = this._userStatus;\n    });\n    this._user = {\n      ...this._user\n    };\n    this._userStatus = this._userStatus;\n  }\n  getCookies() {\n    this._userStatus = \'none\';\n    const cookieObj = this.parseCookie();\n    Object.keys(this._user).forEach(key => {\n      this._user[key] = this.getCookieProperty(cookieObj, \'_\' + key);\n    });\n    if (this._user.hash !== \'\') {\n      this._userStatus = \'auth\';\n    }\n  }\n  logout() {\n    this.deleteUserData();\n  }\n  get user() {\n    return this._user;\n  }\n  get status() {\n    return this._status;\n  }\n  get userStatus() {\n    return this._userStatus;\n  }\n  destroy() {\n    this._user = initUser;\n    this._userStatus = \'none\';\n    this._status = NotStartedStatus;\n  }\n}\n/* harmony default export */ const UserStore_UserStore = (new UserStore());\n;// CONCATENATED MODULE: ./src/store/UserStore/index.ts\n\n// EXTERNAL MODULE: ./node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[0].use[1]!./node_modules/postcss-loader/dist/cjs.js??ruleSet[1].rules[0].use[2]!./node_modules/sass-loader/dist/cjs.js!./src/components/Header/components/Menu/Menu.module.scss\nvar Menu_module = __webpack_require__(5725);\n;// CONCATENATED MODULE: ./src/components/Header/components/Menu/Menu.module.scss\n\n      \n      \n      \n      \n      \n      \n      \n      \n      \n\nvar Menu_module_options = {};\n\nMenu_module_options.styleTagTransform = (styleTagTransform_default());\nMenu_module_options.setAttributes = (setAttributesWithoutAttributes_default());\nMenu_module_options.insert = insertBySelector_default().bind(null, "head");\nMenu_module_options.domAPI = (styleDomAPI_default());\nMenu_module_options.insertStyleElement = (insertStyleElement_default());\n\nvar Menu_module_update = injectStylesIntoStyleTag_default()(Menu_module/* default */.A, Menu_module_options);\n\n\n\n\n       /* harmony default export */ const Menu_Menu_module = (Menu_module/* default */.A && Menu_module/* default */.A.locals ? Menu_module/* default */.A.locals : undefined);\n\n;// CONCATENATED MODULE: ./src/components/Header/components/Menu/Menu.tsx\n\n\n\n\n\n\n\n\nconst Menu = () => {\n  const navigate = dist_useNavigate();\n  const location = dist_useLocation();\n  const [selectedUrl, setUrl] = (0,react.useState)(0);\n  const {\n    userStatus\n  } = UserStore_UserStore;\n  (0,react.useEffect)(() => {\n    const index = config_paths.map(path => path.url).indexOf(location.pathname);\n    setUrl(index);\n  }, [location.pathname]);\n  const goToPath = (index, url, authRequired = false) => {\n    if (!authRequired || userStatus === \'auth\') {\n      setUrl(index);\n      navigate(url);\n    } else {\n      navigate(\'/login\');\n    }\n  };\n  return /*#__PURE__*/react.createElement("div", {\n    className: Menu_Menu_module["menu"]\n  }, config_paths.map((path, index) => {\n    const handleClick = () => {\n      goToPath(index, path.url, path.authRequired);\n    };\n    return /*#__PURE__*/react.createElement(Text_Text, {\n      key: path.name,\n      className: classnames_default()({\n        [Menu_Menu_module[\'menu__option\']]: true,\n        [Menu_Menu_module[\'menu__option_selected\']]: selectedUrl === index\n      }),\n      view: "p-16",\n      tag: "div",\n      onCLick: handleClick\n    }, path.name);\n  }));\n};\n/* harmony default export */ const Menu_Menu = (Menu);\n;// CONCATENATED MODULE: ./src/components/Header/components/Menu/index.ts\n\n;// CONCATENATED MODULE: ./src/components/icons/HeartIcon/HeartIcon.tsx\n\n\n\nconst HeartIcon = props => {\n  return /*#__PURE__*/react.createElement(Icon_Icon, extends_extends({}, props, {\n    width: "19",\n    height: "19",\n    viewBox: "0 0 19 19"\n  }), /*#__PURE__*/react.createElement("path", {\n    fillRule: "evenodd",\n    clipRule: "evenodd",\n    d: "M9.50001 3.09586C7.80057 0.863387 4.96079 0.173456 2.8315 2.21773C0.702197 4.26201 0.402421 7.67991 2.07457 10.0977C3.46485 12.1079 7.67232 16.3476 9.0513 17.7199C9.20553 17.8734 9.28269 17.9502 9.3727 17.9803C9.45118 18.0066 9.53712 18.0066 9.6157 17.9803C9.70571 17.9502 9.78277 17.8734 9.9371 17.7199C11.3161 16.3476 15.5235 12.1079 16.9138 10.0977C18.586 7.67991 18.3227 4.2405 16.1568 2.21773C13.9909 0.19496 11.1994 0.863387 9.50001 3.09586Z",\n    stroke: "#B5460F",\n    strokeWidth: "2",\n    strokeLinecap: "round",\n    strokeLinejoin: "round"\n  }));\n};\n/* harmony default export */ const HeartIcon_HeartIcon = (HeartIcon);\n;// CONCATENATED MODULE: ./src/components/icons/HeartIcon/index.ts\n\n;// CONCATENATED MODULE: ./src/components/icons/UserIcon/UserIcon.tsx\n\n\nconst UserIcon = props => {\n  return /*#__PURE__*/react.createElement(Icon_Icon, props, /*#__PURE__*/react.createElement("g", {\n    clipPath: "url(#clip0_505_651)"\n  }, /*#__PURE__*/react.createElement("path", {\n    fillRule: "evenodd",\n    clipRule: "evenodd",\n    d: "M12 13C14.3955 13 16.5753 13.6937 18.1777 14.6715C18.9786 15.1602 19.6621 15.7363 20.156 16.3615C20.642 16.9767 21 17.713 21 18.5C21 19.3449 20.5889 20.0111 19.9973 20.4859C19.4368 20.9359 18.6982 21.2336 17.9128 21.4416C16.3353 21.8593 14.229 22 12 22C9.77101 22 7.66466 21.8593 6.08716 21.4416C5.30182 21.2336 4.56324 20.9359 4.00266 20.4859C3.41114 20.0111 3 19.3449 3 18.5C3 17.713 3.35805 16.9767 3.84397 16.3615C4.33788 15.7363 5.02143 15.1602 5.82227 14.6715C7.42467 13.6937 9.60453 13 12 13ZM12 15C9.97719 15 8.15705 15.5898 6.86402 16.3788C6.21714 16.7735 5.72913 17.2015 5.41339 17.6013C5.08967 18.0111 5 18.3206 5 18.5C5 18.6216 5.03657 18.7512 5.2547 18.9263C5.50376 19.1262 5.93676 19.3328 6.59914 19.5082C7.91706 19.8572 9.81071 20 12 20C14.1893 20 16.0829 19.8572 17.4009 19.5082C18.0632 19.3328 18.4962 19.1262 18.7453 18.9263C18.9634 18.7512 19 18.6216 19 18.5C19 18.3206 18.9103 18.0111 18.5866 17.6013C18.2709 17.2015 17.7829 16.7735 17.136 16.3788C15.8429 15.5898 14.0228 15 12 15ZM12 2C14.7614 2 17 4.23858 17 7C17 9.76142 14.7614 12 12 12C9.23858 12 7 9.76142 7 7C7 4.23858 9.23858 2 12 2ZM12 4C10.3431 4 9 5.34315 9 7C9 8.65685 10.3431 10 12 10C13.6569 10 15 8.65685 15 7C15 5.34315 13.6569 4 12 4Z",\n    fill: "#B5460F"\n  })), /*#__PURE__*/react.createElement("defs", null, /*#__PURE__*/react.createElement("clipPath", {\n    id: "clip0_505_651"\n  }, /*#__PURE__*/react.createElement("rect", {\n    width: "24",\n    height: "24",\n    fill: "white"\n  }))));\n};\n/* harmony default export */ const UserIcon_UserIcon = (UserIcon);\n;// CONCATENATED MODULE: ./src/components/icons/UserIcon/index.ts\n\n// EXTERNAL MODULE: ./node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[0].use[1]!./node_modules/postcss-loader/dist/cjs.js??ruleSet[1].rules[0].use[2]!./node_modules/sass-loader/dist/cjs.js!./src/components/Header/components/RightBlock/RightBlock.module.scss\nvar RightBlock_module = __webpack_require__(1293);\n;// CONCATENATED MODULE: ./src/components/Header/components/RightBlock/RightBlock.module.scss\n\n      \n      \n      \n      \n      \n      \n      \n      \n      \n\nvar RightBlock_module_options = {};\n\nRightBlock_module_options.styleTagTransform = (styleTagTransform_default());\nRightBlock_module_options.setAttributes = (setAttributesWithoutAttributes_default());\nRightBlock_module_options.insert = insertBySelector_default().bind(null, "head");\nRightBlock_module_options.domAPI = (styleDomAPI_default());\nRightBlock_module_options.insertStyleElement = (insertStyleElement_default());\n\nvar RightBlock_module_update = injectStylesIntoStyleTag_default()(RightBlock_module/* default */.A, RightBlock_module_options);\n\n\n\n\n       /* harmony default export */ const RightBlock_RightBlock_module = (RightBlock_module/* default */.A && RightBlock_module/* default */.A.locals ? RightBlock_module/* default */.A.locals : undefined);\n\n;// CONCATENATED MODULE: ./src/components/Header/components/RightBlock/RightBlock.tsx\n\n\n\n\n\n\n\nconst RightBlock = () => {\n  const navigate = dist_useNavigate();\n  const {\n    userStatus\n  } = UserStore_UserStore;\n  const goToSaved = (0,react.useCallback)(() => {\n    navigate(\'/saved\');\n  }, [navigate]);\n  const goToProfile = (0,react.useCallback)(() => {\n    if (userStatus === \'auth\') {\n      navigate(\'/user\');\n    } else {\n      navigate(\'/login\');\n    }\n  }, [navigate, userStatus]);\n  return /*#__PURE__*/react.createElement("div", {\n    className: RightBlock_RightBlock_module["right-block"]\n  }, /*#__PURE__*/react.createElement(HeartIcon_HeartIcon, {\n    onClick: goToSaved\n  }), /*#__PURE__*/react.createElement(UserIcon_UserIcon, {\n    onClick: goToProfile\n  }));\n};\n/* harmony default export */ const RightBlock_RightBlock = (/*#__PURE__*/(0,react.memo)(RightBlock));\n;// CONCATENATED MODULE: ./src/components/Header/components/RightBlock/index.ts\n\n// EXTERNAL MODULE: ./node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[0].use[1]!./node_modules/postcss-loader/dist/cjs.js??ruleSet[1].rules[0].use[2]!./node_modules/sass-loader/dist/cjs.js!./src/components/Header/Header.module.scss\nvar Header_module = __webpack_require__(86);\n;// CONCATENATED MODULE: ./src/components/Header/Header.module.scss\n\n      \n      \n      \n      \n      \n      \n      \n      \n      \n\nvar Header_module_options = {};\n\nHeader_module_options.styleTagTransform = (styleTagTransform_default());\nHeader_module_options.setAttributes = (setAttributesWithoutAttributes_default());\nHeader_module_options.insert = insertBySelector_default().bind(null, "head");\nHeader_module_options.domAPI = (styleDomAPI_default());\nHeader_module_options.insertStyleElement = (insertStyleElement_default());\n\nvar Header_module_update = injectStylesIntoStyleTag_default()(Header_module/* default */.A, Header_module_options);\n\n\n\n\n       /* harmony default export */ const Header_Header_module = (Header_module/* default */.A && Header_module/* default */.A.locals ? Header_module/* default */.A.locals : undefined);\n\n;// CONCATENATED MODULE: ./src/components/Header/Header.tsx\n\n\n\n\n\nconst Header = () => {\n  return /*#__PURE__*/react.createElement("nav", {\n    className: Header_Header_module["header"]\n  }, /*#__PURE__*/react.createElement("div", {\n    className: Header_Header_module["header__left"]\n  }, /*#__PURE__*/react.createElement(LogoBlock_LogoBlock, null), /*#__PURE__*/react.createElement(Menu_Menu, null)), /*#__PURE__*/react.createElement("div", {\n    className: Header_Header_module["header__right"]\n  }, /*#__PURE__*/react.createElement(RightBlock_RightBlock, null)));\n};\n/* harmony default export */ const Header_Header = (Header);\n;// CONCATENATED MODULE: ./src/components/Header/index.ts\n\n// EXTERNAL MODULE: ./node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[0].use[1]!./node_modules/postcss-loader/dist/cjs.js??ruleSet[1].rules[0].use[2]!./node_modules/sass-loader/dist/cjs.js!./src/components/Main/Main.module.scss\nvar Main_module = __webpack_require__(7374);\n;// CONCATENATED MODULE: ./src/components/Main/Main.module.scss\n\n      \n      \n      \n      \n      \n      \n      \n      \n      \n\nvar Main_module_options = {};\n\nMain_module_options.styleTagTransform = (styleTagTransform_default());\nMain_module_options.setAttributes = (setAttributesWithoutAttributes_default());\nMain_module_options.insert = insertBySelector_default().bind(null, "head");\nMain_module_options.domAPI = (styleDomAPI_default());\nMain_module_options.insertStyleElement = (insertStyleElement_default());\n\nvar Main_module_update = injectStylesIntoStyleTag_default()(Main_module/* default */.A, Main_module_options);\n\n\n\n\n       /* harmony default export */ const Main_Main_module = (Main_module/* default */.A && Main_module/* default */.A.locals ? Main_module/* default */.A.locals : undefined);\n\n;// CONCATENATED MODULE: ./src/components/Main/Main.tsx\n\n\n\n\nconst Main = () => {\n  return /*#__PURE__*/react.createElement("div", {\n    className: Main_Main_module.main\n  }, /*#__PURE__*/react.createElement(Header_Header, null), /*#__PURE__*/react.createElement(Outlet, null));\n};\n/* harmony default export */ const Main_Main = (Main);\n;// CONCATENATED MODULE: ./src/components/Main/index.ts\n\n;// CONCATENATED MODULE: ./src/store/LocalStorage/LocalStorage.tsx\n\nclass LocalStorage {\n  _prefix = \'recipe\';\n  _fullPrefix = \'recipes\';\n  _savedCardRecipes = [];\n  constructor() {\n    makeObservable(this, {\n      _savedCardRecipes: mobx_esm_observable.ref,\n      _fullPrefix: mobx_esm_observable,\n      deleteRecipe: action.bound,\n      addSavedRecipe: action.bound,\n      checkRecipeInSaved: action.bound,\n      loadingSaved: action.bound,\n      cards: computed\n    });\n  }\n  getItemName(id, ...args) {\n    return [this._prefix, id, ...args].join(\'-\');\n  }\n  addRecipeValues(recipe) {\n    localStorage.setItem(this.getItemName(recipe.id, \'readyInMinutes\'), recipe.readyInMinutes.toString());\n    localStorage.setItem(this.getItemName(recipe.id, \'title\'), recipe.title);\n    localStorage.setItem(this.getItemName(recipe.id, \'describe\'), recipe.describe);\n    localStorage.setItem(this.getItemName(recipe.id, \'kcal\'), recipe.kcal);\n    localStorage.setItem(this.getItemName(recipe.id, \'image\'), recipe.image);\n  }\n  getSavedRecipe(id) {\n    const cardRecipe = {};\n    cardRecipe.id = Number(id);\n    cardRecipe.readyInMinutes = Number(localStorage.getItem(this.getItemName(id, \'readyInMinutes\')) || \'0\');\n    cardRecipe.title = localStorage.getItem(this.getItemName(id, \'title\')) || \'\';\n    cardRecipe.describe = localStorage.getItem(this.getItemName(id, \'describe\')) || \'\';\n    cardRecipe.kcal = localStorage.getItem(this.getItemName(id, \'kcal\')) || \'\';\n    cardRecipe.image = localStorage.getItem(this.getItemName(id, \'image\')) || \'\';\n    return cardRecipe;\n  }\n  getAllRecipes() {\n    const recipeList = localStorage.getItem(this._fullPrefix) || \'\';\n    if (recipeList !== \'\') {\n      const idList = recipeList.split(\',\');\n      return idList.map(strId => {\n        return this.getSavedRecipe(strId);\n      });\n    }\n    return [];\n  }\n  checkRecipeInSaved(id) {\n    const index = this._savedCardRecipes.map(card => card.id).indexOf(id);\n    return index !== -1;\n  }\n  deleteRecipe(id) {\n    const recipeList = localStorage.getItem(this._fullPrefix) || \'\';\n    const idList = recipeList.split(\',\');\n    const index = idList.indexOf(id.toString());\n    if (index !== -1) {\n      idList.splice(index, 1);\n    }\n    localStorage.setItem(this._fullPrefix, [...idList].join(\',\'));\n    this.loadingSaved();\n  }\n  addSavedRecipe(recipe) {\n    const recipeList = localStorage.getItem(this._fullPrefix);\n    if (!recipeList) {\n      localStorage.setItem(this._fullPrefix, recipe.id.toString());\n    } else {\n      localStorage.setItem(this._fullPrefix, [recipeList, recipe.id.toString()].join(\',\'));\n    }\n    this.addRecipeValues(recipe);\n    this.loadingSaved();\n  }\n  loadingSaved() {\n    this._savedCardRecipes = this.getAllRecipes();\n  }\n  get cards() {\n    return this._savedCardRecipes;\n  }\n  destroy() {\n    this._savedCardRecipes = [];\n  }\n}\n/* harmony default export */ const LocalStorage_LocalStorage = (new LocalStorage());\n;// CONCATENATED MODULE: ./src/store/LocalStorage/index.ts\n\n;// CONCATENATED MODULE: ./src/store/SearchParamsStore/SearchParamsStore.ts\n\nclass SearchParamsStore {\n  _searchParams = {};\n  constructor() {\n    makeObservable(this, {\n      _searchParams: mobx_esm_observable.ref,\n      setSearchParam: action.bound,\n      getSearchParams: action.bound,\n      setMultiParam: action.bound,\n      deleteSearchParam: action.bound,\n      changeSearchParamsForFilters: action.bound,\n      searchParams: computed,\n      searchParamsString: computed,\n      searchParamURL: computed\n    });\n  }\n  getSearchParams(searchParams) {\n    this._searchParams = {};\n    const paramArray = Array.from(searchParams.entries());\n    paramArray.forEach(([key, value]) => {\n      Object.assign(this._searchParams, {\n        [key]: decodeURIComponent(value)\n      });\n    });\n  }\n  setSearchParam(key, value) {\n    if (value) {\n      Object.assign(this._searchParams, {\n        [key]: value\n      });\n      this._searchParams = {\n        ...this._searchParams\n      };\n    }\n  }\n  deleteSearchParam(key) {\n    if (key in this._searchParams) {\n      this._searchParams[key] = null;\n    }\n  }\n  setMultiParam(key, values, prefix = \',\') {\n    const valueStr = values.join(prefix);\n    if (valueStr !== \'\') {\n      Object.assign(this._searchParams, {\n        [key]: valueStr\n      });\n      this._searchParams = {\n        ...this._searchParams\n      };\n    }\n  }\n  changeSearchParamsForFilters(search, categoryTag, category, otherTags) {\n    this.deleteSearchParam(\'query\');\n    this.deleteSearchParam(\'page\');\n    if (search !== \'\') {\n      this.setSearchParam(\'query\', search);\n    }\n    if (categoryTag && category) {\n      this.deleteSearchParam(categoryTag);\n      this.setMultiParam(categoryTag, category.map(cat => cat.value), \',\');\n    }\n    if (otherTags) {\n      otherTags.forEach(([key, value]) => {\n        if (key !== \'\') {\n          this.deleteSearchParam(key);\n        }\n        if (key !== \'\' && value !== \'\') {\n          this.setSearchParam(key, value);\n        }\n      });\n    }\n    this._searchParams = {\n      ...this._searchParams\n    };\n  }\n  getParam(key) {\n    return this._searchParams[key] || \'\';\n  }\n  getNumberParam(key, init = 1) {\n    const value = Number(this._searchParams[key]);\n    return !isNaN(value) ? value : init;\n  }\n  getParamPair(key) {\n    return [key, this._searchParams[key] || \'\'];\n  }\n  getOffset() {\n    return ((Number(this._searchParams[\'page\'] || \'1\') - 1) * 9).toString();\n  }\n  getMultipleParam(key, options, prefix = \',\') {\n    const valueStr = this._searchParams[key] || \'\';\n    if (valueStr === \'\') {\n      return [];\n    }\n    const valueArray = valueStr.split(prefix);\n    return options.filter(opt => {\n      const index = valueArray.indexOf(opt.value.toLowerCase());\n      return index !== -1;\n    });\n  }\n  get searchParamsString() {\n    let result = [];\n    Object.entries(this._searchParams).forEach(([key, value]) => {\n      if (value) {\n        result.push([key, value].join(\'=\'));\n      }\n    });\n    return result.join(\'&\');\n  }\n  get searchParamURL() {\n    return new URLSearchParams(this.searchParamsString);\n  }\n  get searchParams() {\n    return this._searchParams;\n  }\n  destroy() {\n    this._searchParams = {};\n  }\n}\n/* harmony default export */ const SearchParamsStore_SearchParamsStore = (new SearchParamsStore());\n;// CONCATENATED MODULE: ./src/store/SearchParamsStore/index.ts\n\n// EXTERNAL MODULE: ./node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[0].use[1]!./node_modules/postcss-loader/dist/cjs.js??ruleSet[1].rules[0].use[2]!./node_modules/sass-loader/dist/cjs.js!./src/components/Card/Card.module.scss\nvar Card_module = __webpack_require__(2652);\n;// CONCATENATED MODULE: ./src/components/Card/Card.module.scss\n\n      \n      \n      \n      \n      \n      \n      \n      \n      \n\nvar Card_module_options = {};\n\nCard_module_options.styleTagTransform = (styleTagTransform_default());\nCard_module_options.setAttributes = (setAttributesWithoutAttributes_default());\nCard_module_options.insert = insertBySelector_default().bind(null, "head");\nCard_module_options.domAPI = (styleDomAPI_default());\nCard_module_options.insertStyleElement = (insertStyleElement_default());\n\nvar Card_module_update = injectStylesIntoStyleTag_default()(Card_module/* default */.A, Card_module_options);\n\n\n\n\n       /* harmony default export */ const Card_Card_module = (Card_module/* default */.A && Card_module/* default */.A.locals ? Card_module/* default */.A.locals : undefined);\n\n;// CONCATENATED MODULE: ./src/components/Card/Card.tsx\n\n\n\n\n\nconst Card = props => {\n  return /*#__PURE__*/react.createElement("div", {\n    className: classnames_default()({\n      [props.className || \'\']: true,\n      [Card_Card_module.card]: true\n    }),\n    onClick: props.onClick\n  }, /*#__PURE__*/react.createElement("img", {\n    className: Card_Card_module[\'card__img\'],\n    alt: "\\u0442\\u043E\\u0432\\u0430\\u0440",\n    src: props.image\n  }), /*#__PURE__*/react.createElement("div", {\n    className: Card_Card_module[\'card__info\']\n  }, /*#__PURE__*/react.createElement("div", {\n    className: Card_Card_module[\'card__info__text\']\n  }, props.captionSlot && /*#__PURE__*/react.createElement(Text_Text, {\n    tag: "p",\n    view: "p-14",\n    weight: "medium",\n    color: "secondary"\n  }, props.captionSlot), /*#__PURE__*/react.createElement(Text_Text, {\n    className: Card_Card_module[\'card__info__text__title\'],\n    tag: "p",\n    view: "p-20",\n    weight: "medium"\n  }, props.title), /*#__PURE__*/react.createElement(Text_Text, {\n    className: Card_Card_module[\'card__info__text__subtitle\'],\n    tag: "p",\n    view: "p-16",\n    color: "secondary"\n  }, props.subtitle)), /*#__PURE__*/react.createElement("div", {\n    className: Card_Card_module[\'card__info__slot\']\n  }, props.contentSlot && /*#__PURE__*/react.createElement(Text_Text, {\n    className: Card_Card_module[\'card__info__slot__content\'],\n    tag: "div",\n    view: "p-18",\n    weight: "bold"\n  }, props.contentSlot), props.actionSlot)));\n};\n/* harmony default export */ const Card_Card = (/*#__PURE__*/(0,react.memo)(Card));\n;// CONCATENATED MODULE: ./src/components/Card/index.ts\n\n\n// EXTERNAL MODULE: ./node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[0].use[1]!./node_modules/postcss-loader/dist/cjs.js??ruleSet[1].rules[0].use[2]!./node_modules/sass-loader/dist/cjs.js!./src/components/Loader/Loader.module.scss\nvar Loader_module = __webpack_require__(8618);\n;// CONCATENATED MODULE: ./src/components/Loader/Loader.module.scss\n\n      \n      \n      \n      \n      \n      \n      \n      \n      \n\nvar Loader_module_options = {};\n\nLoader_module_options.styleTagTransform = (styleTagTransform_default());\nLoader_module_options.setAttributes = (setAttributesWithoutAttributes_default());\nLoader_module_options.insert = insertBySelector_default().bind(null, "head");\nLoader_module_options.domAPI = (styleDomAPI_default());\nLoader_module_options.insertStyleElement = (insertStyleElement_default());\n\nvar Loader_module_update = injectStylesIntoStyleTag_default()(Loader_module/* default */.A, Loader_module_options);\n\n\n\n\n       /* harmony default export */ const Loader_Loader_module = (Loader_module/* default */.A && Loader_module/* default */.A.locals ? Loader_module/* default */.A.locals : undefined);\n\n;// CONCATENATED MODULE: ./src/components/Loader/Loader.tsx\n\n\n\n\nconst Loader = ({\n  size = \'l\',\n  className\n}) => {\n  return /*#__PURE__*/react.createElement("div", {\n    className: classnames_default()({\n      className,\n      [Loader_Loader_module[\'loader\']]: true,\n      [Loader_Loader_module[\'loader_size_\' + size]]: true\n    })\n  });\n};\n/* harmony default export */ const Loader_Loader = (/*#__PURE__*/(0,react.memo)(Loader));\n;// CONCATENATED MODULE: ./src/components/Loader/index.ts\n\n\n// EXTERNAL MODULE: ./node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[0].use[1]!./node_modules/postcss-loader/dist/cjs.js??ruleSet[1].rules[0].use[2]!./node_modules/sass-loader/dist/cjs.js!./src/components/Button/Button.module.scss\nvar Button_module = __webpack_require__(3600);\n;// CONCATENATED MODULE: ./src/components/Button/Button.module.scss\n\n      \n      \n      \n      \n      \n      \n      \n      \n      \n\nvar Button_module_options = {};\n\nButton_module_options.styleTagTransform = (styleTagTransform_default());\nButton_module_options.setAttributes = (setAttributesWithoutAttributes_default());\nButton_module_options.insert = insertBySelector_default().bind(null, "head");\nButton_module_options.domAPI = (styleDomAPI_default());\nButton_module_options.insertStyleElement = (insertStyleElement_default());\n\nvar Button_module_update = injectStylesIntoStyleTag_default()(Button_module/* default */.A, Button_module_options);\n\n\n\n\n       /* harmony default export */ const Button_Button_module = (Button_module/* default */.A && Button_module/* default */.A.locals ? Button_module/* default */.A.locals : undefined);\n\n;// CONCATENATED MODULE: ./src/components/Button/Button.tsx\n\n\n\n\n\n\nconst Button = ({\n  loading,\n  children,\n  disabled = false,\n  className = \'\',\n  ...props\n}) => {\n  return /*#__PURE__*/react.createElement("button", extends_extends({}, props, {\n    className: classnames_default()({\n      [className]: true,\n      [Button_Button_module.button]: true,\n      [Button_Button_module[\'button_loading\']]: loading,\n      [Button_Button_module[\'button_unloading\']]: !loading,\n      [Button_Button_module[\'button_loading_disabled\']]: loading && disabled\n    }),\n    disabled: disabled || loading\n  }), loading && /*#__PURE__*/react.createElement(Loader_Loader, {\n    size: "s"\n  }), children);\n};\n/* harmony default export */ const Button_Button = (/*#__PURE__*/(0,react.memo)(Button));\n;// CONCATENATED MODULE: ./src/components/Button/index.ts\n\n\n// EXTERNAL MODULE: ./node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[0].use[1]!./node_modules/postcss-loader/dist/cjs.js??ruleSet[1].rules[0].use[2]!./node_modules/sass-loader/dist/cjs.js!./src/components/Input/Input.module.scss\nvar Input_module = __webpack_require__(6742);\n;// CONCATENATED MODULE: ./src/components/Input/Input.module.scss\n\n      \n      \n      \n      \n      \n      \n      \n      \n      \n\nvar Input_module_options = {};\n\nInput_module_options.styleTagTransform = (styleTagTransform_default());\nInput_module_options.setAttributes = (setAttributesWithoutAttributes_default());\nInput_module_options.insert = insertBySelector_default().bind(null, "head");\nInput_module_options.domAPI = (styleDomAPI_default());\nInput_module_options.insertStyleElement = (insertStyleElement_default());\n\nvar Input_module_update = injectStylesIntoStyleTag_default()(Input_module/* default */.A, Input_module_options);\n\n\n\n\n       /* harmony default export */ const Input_Input_module = (Input_module/* default */.A && Input_module/* default */.A.locals ? Input_module/* default */.A.locals : undefined);\n\n;// CONCATENATED MODULE: ./src/components/Input/Input.tsx\n\n\n\n\n\nconst Input = /*#__PURE__*/react.forwardRef(({\n  value,\n  onChange,\n  afterSlot,\n  ...props\n}) => {\n  const onChangeFunction = e => {\n    onChange(e.target.value);\n  };\n  return /*#__PURE__*/react.createElement("div", {\n    className: classnames_default()({\n      [props.className || \'\']: true,\n      [Input_Input_module[\'inputblock\']]: true,\n      [Input_Input_module[\'inputblock_disabled\']]: props.disabled\n    })\n  }, /*#__PURE__*/react.createElement("input", extends_extends({}, props, {\n    value: value,\n    onChange: onChangeFunction,\n    type: "text",\n    className: Input_Input_module[\'inputblock__element\']\n  })), afterSlot);\n});\n/* harmony default export */ const Input_Input = (/*#__PURE__*/(0,react.memo)(Input));\n;// CONCATENATED MODULE: ./src/components/Input/index.ts\n\n\n// EXTERNAL MODULE: ./node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[0].use[1]!./node_modules/postcss-loader/dist/cjs.js??ruleSet[1].rules[0].use[2]!./node_modules/sass-loader/dist/cjs.js!./src/styles/customStyles.module.scss\nvar customStyles_module = __webpack_require__(7180);\n;// CONCATENATED MODULE: ./src/styles/customStyles.module.scss\n\n      \n      \n      \n      \n      \n      \n      \n      \n      \n\nvar customStyles_module_options = {};\n\ncustomStyles_module_options.styleTagTransform = (styleTagTransform_default());\ncustomStyles_module_options.setAttributes = (setAttributesWithoutAttributes_default());\ncustomStyles_module_options.insert = insertBySelector_default().bind(null, "head");\ncustomStyles_module_options.domAPI = (styleDomAPI_default());\ncustomStyles_module_options.insertStyleElement = (insertStyleElement_default());\n\nvar customStyles_module_update = injectStylesIntoStyleTag_default()(customStyles_module/* default */.A, customStyles_module_options);\n\n\n\n\n       /* harmony default export */ const styles_customStyles_module = (customStyles_module/* default */.A && customStyles_module/* default */.A.locals ? customStyles_module/* default */.A.locals : undefined);\n\n;// CONCATENATED MODULE: ./src/components/icons/ArrowDownIcon/ArrowDownIcon.tsx\n\n\n\n\nconst ArrowDownIcon = props => {\n  return /*#__PURE__*/react.createElement(Icon_Icon, extends_extends({\n    style: {\n      cursor: \'pointer\'\n    }\n  }, props), /*#__PURE__*/react.createElement("path", {\n    className: styles_customStyles_module[\'icon_fill_color_\' + (props.color || \'inherit\')],\n    fillRule: "evenodd",\n    clipRule: "evenodd",\n    d: "M2.33563 8.74741L3.66436 7.25259L12 14.662L20.3356 7.25259L21.6644 8.74741L12 17.338L2.33563 8.74741Z"\n  }));\n};\n/* harmony default export */ const ArrowDownIcon_ArrowDownIcon = (ArrowDownIcon);\n;// CONCATENATED MODULE: ./src/components/icons/ArrowDownIcon/index.ts\n\n// EXTERNAL MODULE: ./node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[0].use[1]!./node_modules/postcss-loader/dist/cjs.js??ruleSet[1].rules[0].use[2]!./node_modules/sass-loader/dist/cjs.js!./src/components/MultiDropdown/MultiDropdown.module.scss\nvar MultiDropdown_module = __webpack_require__(1562);\n;// CONCATENATED MODULE: ./src/components/MultiDropdown/MultiDropdown.module.scss\n\n      \n      \n      \n      \n      \n      \n      \n      \n      \n\nvar MultiDropdown_module_options = {};\n\nMultiDropdown_module_options.styleTagTransform = (styleTagTransform_default());\nMultiDropdown_module_options.setAttributes = (setAttributesWithoutAttributes_default());\nMultiDropdown_module_options.insert = insertBySelector_default().bind(null, "head");\nMultiDropdown_module_options.domAPI = (styleDomAPI_default());\nMultiDropdown_module_options.insertStyleElement = (insertStyleElement_default());\n\nvar MultiDropdown_module_update = injectStylesIntoStyleTag_default()(MultiDropdown_module/* default */.A, MultiDropdown_module_options);\n\n\n\n\n       /* harmony default export */ const MultiDropdown_MultiDropdown_module = (MultiDropdown_module/* default */.A && MultiDropdown_module/* default */.A.locals ? MultiDropdown_module/* default */.A.locals : undefined);\n\n;// CONCATENATED MODULE: ./src/components/MultiDropdown/MultiDropdown.tsx\n\n\n\n\n\n\n\n\n/** Пропсы, которые принимает компонент Dropdown */\n\nconst MultiDropdown = props => {\n  const [opened, setOpened] = (0,react.useState)(false);\n  const [title, setTitle] = (0,react.useState)(props.value && props.value.length ? props.getTitle(props.value) : \'\');\n  const [optionList, setOptionList] = (0,react.useState)(props.options);\n  const ref = (0,react.useRef)(null);\n  const selectMode = props.selectMode ? props.selectMode : \'MULTI\';\n  const handleOutsideClick = e => {\n    if (ref.current && !ref.current.contains(e.target)) {\n      setOpened(false);\n    }\n  };\n  (0,react.useEffect)(() => {\n    document.addEventListener(\'mousedown\', handleOutsideClick);\n    return () => document.removeEventListener(\'mousedown\', handleOutsideClick);\n  }, []);\n  (0,react.useEffect)(() => {\n    setTitle(props.value && props.value.length ? props.getTitle(props.value) : \'\');\n  }, [props.value, props]);\n  (0,react.useEffect)(() => {\n    setOptionList(props.options);\n  }, [props.options, props]);\n  const getOptionList = (0,react.useCallback)(clickValue => {\n    if (!props.value.map(el => el.key).includes(clickValue.key)) {\n      if (selectMode === \'MULTI\') {\n        props.onChange([...props.value, clickValue]);\n      } else {\n        props.onChange([clickValue]);\n      }\n    } else {\n      props.onChange(props.value.filter(el => el.key !== clickValue.key));\n    }\n  }, [props, selectMode]);\n  const getFilterList = (0,react.useCallback)(title => {\n    if (title !== \'\') {\n      setOptionList(optionList.filter(option => option.value.startsWith(title)));\n    } else {\n      setOptionList(props.options);\n    }\n  }, [optionList, props.options]);\n  return /*#__PURE__*/react.createElement("div", {\n    ref: ref,\n    className: classnames_default()({\n      [props.className || \'\']: true,\n      [MultiDropdown_MultiDropdown_module[\'multidropdown\']]: true\n    })\n  }, /*#__PURE__*/react.createElement(Input_Input, {\n    onClick: () => {\n      if (!props.disabled) {\n        setOpened(true);\n      }\n    },\n    placeholder: props.value.length === 0 ? props.getTitle(props.value) : \'\',\n    value: title,\n    onChange: currValue => {\n      setTitle(currValue);\n      getFilterList(currValue);\n    },\n    afterSlot: /*#__PURE__*/react.createElement(ArrowDownIcon_ArrowDownIcon, {\n      color: "secondary",\n      onClick: () => {\n        if (!props.disabled) {\n          setOpened(!opened);\n        }\n      }\n    })\n  }), opened && !props.disabled && /*#__PURE__*/react.createElement("div", {\n    className: MultiDropdown_MultiDropdown_module[\'multidropdown__options\']\n  }, optionList.map(option => {\n    const handleChange = () => {\n      getOptionList(option);\n    };\n    return /*#__PURE__*/react.createElement("div", {\n      key: option.key,\n      onClick: handleChange,\n      className: classnames_default()({\n        [MultiDropdown_MultiDropdown_module[\'multidropdown__options__option\']]: true,\n        [MultiDropdown_MultiDropdown_module[\'multidropdown__options__option_selected\']]: props.value.map(el => el.key).includes(option.key)\n      })\n    }, /*#__PURE__*/react.createElement(Text_Text, {\n      tag: "span",\n      view: "p-16"\n    }, option.value));\n  })));\n};\n/* harmony default export */ const MultiDropdown_MultiDropdown = (/*#__PURE__*/(0,react.memo)(MultiDropdown));\n;// CONCATENATED MODULE: ./src/components/MultiDropdown/index.ts\n\n\n;// CONCATENATED MODULE: ./src/components/icons/SearchIcon/SearchIcon.tsx\n\n\n\nconst SearchIcon = props => {\n  return /*#__PURE__*/react.createElement(Icon_Icon, extends_extends({}, props, {\n    viewBox: "0 0 25 24"\n  }), /*#__PURE__*/react.createElement("g", {\n    clipPath: "url(#clip0_505_662)"\n  }, /*#__PURE__*/react.createElement("path", {\n    d: "M16 14H15.21L14.93 13.73C15.91 12.59 16.5 11.11 16.5 9.5C16.5 5.91 13.59 3 10 3C6.41 3 3.5 5.91 3.5 9.5C3.5 13.09 6.41 16 10 16C11.61 16 13.09 15.41 14.23 14.43L14.5 14.71V15.5L19.5 20.49L20.99 19L16 14ZM10 14C7.51 14 5.5 11.99 5.5 9.5C5.5 7.01 7.51 5 10 5C12.49 5 14.5 7.01 14.5 9.5C14.5 11.99 12.49 14 10 14Z",\n    fill: "white"\n  })), /*#__PURE__*/react.createElement("defs", null, /*#__PURE__*/react.createElement("clipPath", {\n    id: "clip0_505_662"\n  }, /*#__PURE__*/react.createElement("rect", {\n    width: "24",\n    height: "24",\n    fill: "white",\n    transform: "translate(0.5)"\n  }))));\n};\n/* harmony default export */ const SearchIcon_SearchIcon = (SearchIcon);\n;// CONCATENATED MODULE: ./src/components/icons/SearchIcon/index.ts\n\n;// CONCATENATED MODULE: ./src/hooks/useLocalStore.tsx\n\nconst useLocalStore_useLocalStore = creator => {\n  const container = react.useRef(null);\n  if (container.current === null) {\n    container.current = creator();\n  }\n  react.useEffect(() => {\n    return () => container.current?.destroy();\n  }, []);\n  return container.current;\n};\n;// CONCATENATED MODULE: ./src/store/FilterStore/FilterStore.tsx\n\nclass FilterStore {\n  _searchField = \'\';\n  _category = [];\n  _visibility = false;\n  _itemIndexList = {};\n  _itemSingleList = [];\n  _itemMinMaxList = [];\n  _itemOptionList = [];\n  constructor() {\n    makeObservable(this, {\n      _searchField: mobx_esm_observable,\n      _category: mobx_esm_observable.ref,\n      _visibility: mobx_esm_observable.ref,\n      _itemIndexList: mobx_esm_observable.ref,\n      _itemSingleList: mobx_esm_observable.ref,\n      _itemMinMaxList: mobx_esm_observable.ref,\n      _itemOptionList: mobx_esm_observable.ref,\n      setSearch: action.bound,\n      setCategory: action.bound,\n      setVisibility: action.bound,\n      setSingleItemValue: action.bound,\n      setMinMaxItemValue: action.bound,\n      setOptionItemValue: action.bound,\n      addMinMaxItem: action.bound,\n      configFilters: action.bound,\n      searchField: computed,\n      category: computed,\n      visibility: computed,\n      isEmpty: computed,\n      options: computed,\n      minMaxes: computed\n    });\n  }\n  configFilters(filters) {\n    Object.entries(filters).forEach(([key, value]) => {\n      if (value !== \'OPTION\' && value !== \'MINMAX\') {\n        this._itemSingleList.push(\'\');\n        Object.assign(this._itemIndexList, {\n          [key]: {\n            point: this._itemSingleList.length - 1,\n            type: value\n          }\n        });\n      } else if (value !== \'MINMAX\') {\n        this._itemOptionList.push([]);\n        Object.assign(this._itemIndexList, {\n          [key]: {\n            point: this._itemOptionList.length - 1,\n            type: value\n          }\n        });\n      }\n    });\n  }\n  setSearch(newValue) {\n    this._searchField = newValue;\n  }\n  setCategory(newValue) {\n    this._category = newValue;\n  }\n  setVisibility(newValue) {\n    this._visibility = newValue;\n  }\n  get searchField() {\n    return this._searchField;\n  }\n  get category() {\n    return this._category;\n  }\n  get visibility() {\n    return this._visibility;\n  }\n  get isEmpty() {\n    return Object.keys(this._itemIndexList).length === 0;\n  }\n  get options() {\n    return this._itemOptionList;\n  }\n  get minMaxes() {\n    return this._itemMinMaxList;\n  }\n  getSingleItemValue(name) {\n    return this._itemSingleList[this._itemIndexList[name].point] || \'\';\n  }\n  getMinMaxItemValue(name) {\n    return this._itemMinMaxList[this._itemIndexList[name].point] || [\'\', \'\'];\n  }\n  getOptionItemValue(name) {\n    return this._itemOptionList[this._itemIndexList[name].point] || [];\n  }\n  isSingle(name) {\n    return this._itemIndexList[name].type !== \'OPTION\' && this._itemIndexList[name].type !== \'MINMAX\';\n  }\n  setSingleItemValue(name, value) {\n    if (name in this._itemIndexList) {\n      const itemPoint = this._itemIndexList[name].point;\n      if (this.isSingle(name)) {\n        this._itemSingleList[itemPoint] = value;\n        this._itemSingleList = [...this._itemSingleList];\n      }\n    }\n    this._itemSingleList = [...this._itemSingleList];\n  }\n  setMinMaxItemValue(name, value, position) {\n    if (name in this._itemIndexList) {\n      const itemPoint = this._itemIndexList[name].point;\n      if (this._itemIndexList[name].type === \'MINMAX\') {\n        this._itemMinMaxList[itemPoint][position] = value;\n        this._itemMinMaxList = [...this._itemMinMaxList];\n      }\n    }\n    this._itemMinMaxList = [...this._itemMinMaxList];\n  }\n  addMinMaxItem(name) {\n    this._itemMinMaxList.push([\'\', \'\']);\n    Object.assign(this._itemIndexList, {\n      [name]: {\n        point: this._itemMinMaxList.length - 1,\n        type: \'MINMAX\'\n      }\n    });\n    this._itemMinMaxList = [...this._itemMinMaxList];\n    this._itemIndexList = {\n      ...this._itemIndexList\n    };\n  }\n  setOptionItemValue(name, value) {\n    if (name in this._itemIndexList) {\n      const itemPoint = this._itemIndexList[name].point;\n      if (this._itemIndexList[name].type === \'OPTION\') {\n        this._itemOptionList[itemPoint] = [...value];\n        this._itemOptionList = [...this._itemOptionList];\n      }\n    }\n    this._itemOptionList = [...this._itemOptionList];\n  }\n  destroy() {\n    this._searchField = \'\';\n    this._category = [];\n    this._visibility = false;\n    this._itemSingleList = [];\n    this._itemMinMaxList = [];\n    this._itemOptionList = [];\n    this._itemIndexList = {};\n  }\n}\n// EXTERNAL MODULE: ./node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[0].use[1]!./node_modules/postcss-loader/dist/cjs.js??ruleSet[1].rules[0].use[2]!./node_modules/sass-loader/dist/cjs.js!./src/components/ContentFilters/ContentFilters.module.scss\nvar ContentFilters_module = __webpack_require__(348);\n;// CONCATENATED MODULE: ./src/components/ContentFilters/ContentFilters.module.scss\n\n      \n      \n      \n      \n      \n      \n      \n      \n      \n\nvar ContentFilters_module_options = {};\n\nContentFilters_module_options.styleTagTransform = (styleTagTransform_default());\nContentFilters_module_options.setAttributes = (setAttributesWithoutAttributes_default());\nContentFilters_module_options.insert = insertBySelector_default().bind(null, "head");\nContentFilters_module_options.domAPI = (styleDomAPI_default());\nContentFilters_module_options.insertStyleElement = (insertStyleElement_default());\n\nvar ContentFilters_module_update = injectStylesIntoStyleTag_default()(ContentFilters_module/* default */.A, ContentFilters_module_options);\n\n\n\n\n       /* harmony default export */ const ContentFilters_ContentFilters_module = (ContentFilters_module/* default */.A && ContentFilters_module/* default */.A.locals ? ContentFilters_module/* default */.A.locals : undefined);\n\n// EXTERNAL MODULE: ./node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[0].use[1]!./node_modules/postcss-loader/dist/cjs.js??ruleSet[1].rules[0].use[2]!./node_modules/sass-loader/dist/cjs.js!./src/components/filters/Filter/Filter.module.scss\nvar Filter_module = __webpack_require__(5172);\n;// CONCATENATED MODULE: ./src/components/filters/Filter/Filter.module.scss\n\n      \n      \n      \n      \n      \n      \n      \n      \n      \n\nvar Filter_module_options = {};\n\nFilter_module_options.styleTagTransform = (styleTagTransform_default());\nFilter_module_options.setAttributes = (setAttributesWithoutAttributes_default());\nFilter_module_options.insert = insertBySelector_default().bind(null, "head");\nFilter_module_options.domAPI = (styleDomAPI_default());\nFilter_module_options.insertStyleElement = (insertStyleElement_default());\n\nvar Filter_module_update = injectStylesIntoStyleTag_default()(Filter_module/* default */.A, Filter_module_options);\n\n\n\n\n       /* harmony default export */ const Filter_Filter_module = (Filter_module/* default */.A && Filter_module/* default */.A.locals ? Filter_module/* default */.A.locals : undefined);\n\n;// CONCATENATED MODULE: ./src/components/filters/Filter/Filter.tsx\n\n\n\nconst Filter = props => {\n  return /*#__PURE__*/react.createElement("div", {\n    className: Filter_Filter_module[\'filter\']\n  }, /*#__PURE__*/react.createElement(Text_Text, {\n    view: "p-16",\n    weight: "bold"\n  }, props.name), /*#__PURE__*/react.createElement("div", {\n    className: Filter_Filter_module[\'filter__form\']\n  }, props.children));\n};\n/* harmony default export */ const Filter_Filter = (Filter);\n;// CONCATENATED MODULE: ./src/components/filters/Filter/index.ts\n\n;// CONCATENATED MODULE: ./src/components/filters/MultiStringFilter/MultiStringFilter.tsx\n\n\n\nconst MultiStringFilter = props => {\n  const {\n    filterName,\n    ...multiProps\n  } = props;\n  return /*#__PURE__*/react.createElement(Filter_Filter, {\n    name: filterName\n  }, /*#__PURE__*/react.createElement(MultiDropdown_MultiDropdown, multiProps));\n};\n/* harmony default export */ const MultiStringFilter_MultiStringFilter = (MultiStringFilter);\n;// CONCATENATED MODULE: ./src/components/filters/MultiStringFilter/index.ts\n\n;// CONCATENATED MODULE: ./src/components/filters/StringFilter/StringFilter.tsx\n\n\n\n\nconst StringFilter = props => {\n  const {\n    filterName,\n    filterSettings,\n    ...inputProps\n  } = props;\n  return /*#__PURE__*/react.createElement(Filter_Filter, {\n    name: filterName\n  }, /*#__PURE__*/react.createElement("div", {\n    className: "filter-string"\n  }, /*#__PURE__*/react.createElement(Input_Input, inputProps), /*#__PURE__*/react.createElement(Text_Text, {\n    color: "secondary"\n  }, filterSettings.help)));\n};\n/* harmony default export */ const StringFilter_StringFilter = (StringFilter);\n;// CONCATENATED MODULE: ./src/components/filters/StringFilter/index.ts\n\n;// CONCATENATED MODULE: ./src/components/filters/NumberFilter/NumberFilter.tsx\n\n\n\n\n\nconst NumberFilter = props => {\n  const {\n    filterName,\n    filterSettings,\n    ...inputProps\n  } = props;\n  return /*#__PURE__*/react.createElement(Filter_Filter, {\n    name: filterName\n  }, /*#__PURE__*/react.createElement("div", {\n    className: "filter-number"\n  }, /*#__PURE__*/react.createElement(Input_Input, extends_extends({}, inputProps, {\n    type: "number"\n  })), /*#__PURE__*/react.createElement(Text_Text, {\n    color: "secondary"\n  }, filterSettings.unit)));\n};\n/* harmony default export */ const NumberFilter_NumberFilter = (NumberFilter);\n;// CONCATENATED MODULE: ./src/components/filters/NumberFilter/index.ts\n\n;// CONCATENATED MODULE: ./src/components/icons/CheckIcon/CheckIcon.tsx\n\n\n\nconst CheckIcon = props => {\n  return /*#__PURE__*/react.createElement(Icon_Icon, props, /*#__PURE__*/react.createElement("path", {\n    className: styles_customStyles_module[\'icon_stroke_color_\' + (props.color || \'inherit\')],\n    d: "M4 11.6129L9.87755 18L20 7",\n    strokeWidth: "2"\n  }));\n};\n/* harmony default export */ const CheckIcon_CheckIcon = (CheckIcon);\n;// CONCATENATED MODULE: ./src/components/icons/CheckIcon/index.ts\n\n// EXTERNAL MODULE: ./node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[0].use[1]!./node_modules/postcss-loader/dist/cjs.js??ruleSet[1].rules[0].use[2]!./node_modules/sass-loader/dist/cjs.js!./src/components/CheckBox/CheckBox.module.scss\nvar CheckBox_module = __webpack_require__(5566);\n;// CONCATENATED MODULE: ./src/components/CheckBox/CheckBox.module.scss\n\n      \n      \n      \n      \n      \n      \n      \n      \n      \n\nvar CheckBox_module_options = {};\n\nCheckBox_module_options.styleTagTransform = (styleTagTransform_default());\nCheckBox_module_options.setAttributes = (setAttributesWithoutAttributes_default());\nCheckBox_module_options.insert = insertBySelector_default().bind(null, "head");\nCheckBox_module_options.domAPI = (styleDomAPI_default());\nCheckBox_module_options.insertStyleElement = (insertStyleElement_default());\n\nvar CheckBox_module_update = injectStylesIntoStyleTag_default()(CheckBox_module/* default */.A, CheckBox_module_options);\n\n\n\n\n       /* harmony default export */ const CheckBox_CheckBox_module = (CheckBox_module/* default */.A && CheckBox_module/* default */.A.locals ? CheckBox_module/* default */.A.locals : undefined);\n\n;// CONCATENATED MODULE: ./src/components/CheckBox/CheckBox.tsx\n\n\n\n\n\n\nconst CheckBox = props => {\n  const onChangeCheckbox = e => {\n    props.onChange(e.target.checked);\n  };\n  const idName = \'customcheckbox\';\n  return /*#__PURE__*/react.createElement("div", {\n    className: CheckBox_CheckBox_module[\'cdiv\']\n  }, /*#__PURE__*/react.createElement("input", extends_extends({}, props, {\n    checked: props.checked,\n    onChange: onChangeCheckbox,\n    className: CheckBox_CheckBox_module[\'cdiv__checkbox\'],\n    type: "checkbox",\n    id: idName\n  })), /*#__PURE__*/react.createElement("label", {\n    htmlFor: idName,\n    className: classnames_default()({\n      [props.className || \'\']: true,\n      [CheckBox_CheckBox_module[\'cdiv__label\']]: true,\n      [CheckBox_CheckBox_module[\'cdiv__label_disabled\']]: props.disabled\n    })\n  }, props.checked && /*#__PURE__*/react.createElement(CheckIcon_CheckIcon, {\n    color: props.disabled ? \'secondary\' : \'accent\'\n  })));\n};\n/* harmony default export */ const CheckBox_CheckBox = (/*#__PURE__*/(0,react.memo)(CheckBox));\n;// CONCATENATED MODULE: ./src/components/CheckBox/index.ts\n\n\n;// CONCATENATED MODULE: ./src/components/filters/BooleanFilter/BooleanFilter.tsx\n\n\n\nconst BooleanFilter = props => {\n  const {\n    filterName,\n    ...checkboxProps\n  } = props;\n  return /*#__PURE__*/react.createElement(Filter_Filter, {\n    name: filterName\n  }, /*#__PURE__*/react.createElement(CheckBox_CheckBox, checkboxProps));\n};\n/* harmony default export */ const BooleanFilter_BooleanFilter = (BooleanFilter);\n;// CONCATENATED MODULE: ./src/components/filters/BooleanFilter/index.ts\n\n;// CONCATENATED MODULE: ./src/components/ContentFilters/ContentFilters.tsx\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nconst ContentFilters = props => {\n  const filter = useLocalStore_useLocalStore(() => new FilterStore());\n  const [searchParams, setSearchParam] = useSearchParams();\n  const getFiltersForStore = (0,react.useCallback)(() => {\n    if (props.otherFilters) {\n      let filterObj = {};\n      Object.entries(props.otherFilters).forEach(([key, value]) => {\n        Object.assign(filterObj, {\n          [key]: value.type\n        });\n      });\n      return filterObj;\n    }\n    return {};\n  }, [props.otherFilters]);\n  const generateOtherFilters = () => {\n    if (props.otherFilters) {\n      return Object.entries(props.otherFilters).map(([key, filt]) => {\n        if (filt.type === \'OPTION\') {\n          const values = filter.getOptionItemValue(key);\n          const valueStr = encodeURIComponent(values.map(opt => opt.value).join(\',\'));\n          return [key, valueStr];\n        }\n        if (filt.type !== \'MINMAX\') {\n          const value = filter.getSingleItemValue(key);\n          return [key, value];\n        }\n        return [\'\', \'\'];\n      });\n    }\n    return [];\n  };\n  (0,react.useEffect)(() => {\n    if (props.otherFilters) {\n      filter.configFilters(getFiltersForStore());\n    }\n  }, [props.otherFilters, filter]);\n  (0,react.useEffect)(() => {\n    SearchParamsStore_SearchParamsStore.getSearchParams(searchParams);\n    filter.setSearch(SearchParamsStore_SearchParamsStore.getParam(\'query\'));\n    if (props.categoryTag && props.categoryOptions) {\n      filter.setCategory(SearchParamsStore_SearchParamsStore.getMultipleParam(props.categoryTag, props.categoryOptions));\n    }\n    if (props.otherFilters) {\n      Object.entries(props.otherFilters).map(([key, value]) => {\n        if (value.type === \'OPTION\') {\n          filter.setOptionItemValue(key, SearchParamsStore_SearchParamsStore.getMultipleParam(key, value.options));\n        } else if (value.type !== \'MINMAX\') {\n          filter.setSingleItemValue(key, SearchParamsStore_SearchParamsStore.getParam(key));\n        }\n      });\n    }\n  }, [searchParams, filter, props.categoryOptions, props.categoryTag, props.otherFilters]);\n  const changeSearchParams = () => {\n    SearchParamsStore_SearchParamsStore.changeSearchParamsForFilters(filter.searchField, props.categoryTag, filter.category, generateOtherFilters());\n    setSearchParam(SearchParamsStore_SearchParamsStore.searchParamURL);\n  };\n  const onChangeInputHandle = value => {\n    filter.setSearch(value);\n  };\n  const onChangeCategory = value => {\n    filter.setCategory(value);\n  };\n  const getTitleWithInit = (value, initValue) => {\n    if (value.length > 0) {\n      return value.map(elem => elem.value).join(\', \');\n    }\n    return initValue;\n  };\n  const getTitleCategory = value => {\n    if (props.categoryPlaceholder) {\n      return getTitleWithInit(value, props.categoryPlaceholder);\n    }\n    return \'\';\n  };\n  const showMoreFilters = () => {\n    filter.setVisibility(true);\n  };\n  const hideMoreFilters = () => {\n    filter.setVisibility(false);\n  };\n  return /*#__PURE__*/react.createElement("div", {\n    className: ContentFilters_ContentFilters_module["content-filters"]\n  }, /*#__PURE__*/react.createElement("div", {\n    className: ContentFilters_ContentFilters_module["content-filters__search"]\n  }, /*#__PURE__*/react.createElement(Input_Input, {\n    className: ContentFilters_ContentFilters_module["content-filters__search__input"],\n    value: filter.searchField,\n    onChange: onChangeInputHandle,\n    placeholder: props.inputPlaceholder || \'Enter dishes\'\n  }), /*#__PURE__*/react.createElement(Button_Button, {\n    onClick: changeSearchParams\n  }, /*#__PURE__*/react.createElement(SearchIcon_SearchIcon, {\n    width: "25",\n    height: "24"\n  }))), /*#__PURE__*/react.createElement("div", {\n    className: ContentFilters_ContentFilters_module["content-filters__category"]\n  }, props.otherFilters ? /*#__PURE__*/react.createElement(Text_Text, {\n    color: "accent",\n    view: "p-16",\n    tag: "div",\n    className: ContentFilters_ContentFilters_module["content-filters__category__shower"],\n    onCLick: showMoreFilters\n  }, /*#__PURE__*/react.createElement("u", null, "Show more filters")) : /*#__PURE__*/react.createElement("span", null), props.categoryOptions && props.categoryPlaceholder && props.categoryTag && /*#__PURE__*/react.createElement(MultiDropdown_MultiDropdown, {\n    className: ContentFilters_ContentFilters_module["content-filters__category__block"],\n    options: props.categoryOptions,\n    value: filter.category,\n    onChange: onChangeCategory,\n    getTitle: getTitleCategory\n  })), props.otherFilters && filter.visibility && !filter.isEmpty && /*#__PURE__*/react.createElement("div", {\n    className: ContentFilters_ContentFilters_module["content-filters__other"]\n  }, /*#__PURE__*/react.createElement(Text_Text, {\n    tag: "div",\n    view: "p-20",\n    className: ContentFilters_ContentFilters_module["content-filters__other__header"]\n  }, "Other Filters"), /*#__PURE__*/react.createElement("div", {\n    className: ContentFilters_ContentFilters_module["content-filters__other__multi"]\n  }, Object.entries(props.otherFilters).filter(([_, val]) => val.type === \'OPTION\').map(([key, value]) => {\n    if (value.type === \'OPTION\') {\n      return /*#__PURE__*/react.createElement(MultiStringFilter_MultiStringFilter, {\n        key: key,\n        filterName: key,\n        options: value.options,\n        value: filter.getOptionItemValue(key),\n        onChange: newVal => {\n          filter.setOptionItemValue(key, newVal);\n        },\n        getTitle: newVal => {\n          return getTitleWithInit(newVal, value.placeholder);\n        },\n        selectMode: value.selectMode\n      });\n    }\n  })), /*#__PURE__*/react.createElement("div", {\n    className: ContentFilters_ContentFilters_module["content-filters__other__string"]\n  }, Object.entries(props.otherFilters).filter(([_, val]) => val.type === \'STRING\').map(([key, value]) => {\n    if (value.type === \'STRING\') {\n      return /*#__PURE__*/react.createElement(StringFilter_StringFilter, {\n        key: key,\n        filterName: key,\n        filterSettings: {\n          help: \'\'\n        },\n        placeholder: value.placeholder,\n        value: filter.getSingleItemValue(key),\n        onChange: value => {\n          filter.setSingleItemValue(key, value);\n        }\n      });\n    }\n  })), /*#__PURE__*/react.createElement("div", {\n    className: ContentFilters_ContentFilters_module["content-filters__other__number"]\n  }, Object.entries(props.otherFilters).filter(([_, val]) => val.type === \'NUMBER\').map(([key, value]) => {\n    if (value.type === \'NUMBER\') {\n      return /*#__PURE__*/react.createElement(NumberFilter_NumberFilter, {\n        key: key,\n        filterName: key,\n        filterSettings: {\n          unit: \'\'\n        },\n        placeholder: value.placeholder,\n        value: filter.getSingleItemValue(key),\n        onChange: value => {\n          filter.setSingleItemValue(key, value);\n        }\n      });\n    }\n  })), /*#__PURE__*/react.createElement("div", {\n    className: ContentFilters_ContentFilters_module["content-filters__other__boolean"]\n  }, Object.entries(props.otherFilters).filter(([_, val]) => val.type === \'BOOLEAN\').map(([key, value]) => {\n    if (value.type === \'BOOLEAN\') {\n      return /*#__PURE__*/react.createElement(BooleanFilter_BooleanFilter, {\n        key: key,\n        filterName: key,\n        checked: filter.getSingleItemValue(key) === \'true\',\n        onChange: checked => {\n          filter.setSingleItemValue(key, checked.toString());\n        }\n      });\n    }\n  })), /*#__PURE__*/react.createElement("div", {\n    className: ContentFilters_ContentFilters_module["content-filters__other__hide"]\n  }, /*#__PURE__*/react.createElement(Button_Button, {\n    onClick: () => {\n      hideMoreFilters();\n    }\n  }, "hide filters"))));\n};\n/* harmony default export */ const ContentFilters_ContentFilters = (observer(ContentFilters));\n;// CONCATENATED MODULE: ./src/components/ContentFilters/index.ts\n\n// EXTERNAL MODULE: ./node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[0].use[1]!./node_modules/postcss-loader/dist/cjs.js??ruleSet[1].rules[0].use[2]!./node_modules/sass-loader/dist/cjs.js!./src/components/ErrorBox/ErrorBox.module.scss\nvar ErrorBox_module = __webpack_require__(4762);\n;// CONCATENATED MODULE: ./src/components/ErrorBox/ErrorBox.module.scss\n\n      \n      \n      \n      \n      \n      \n      \n      \n      \n\nvar ErrorBox_module_options = {};\n\nErrorBox_module_options.styleTagTransform = (styleTagTransform_default());\nErrorBox_module_options.setAttributes = (setAttributesWithoutAttributes_default());\nErrorBox_module_options.insert = insertBySelector_default().bind(null, "head");\nErrorBox_module_options.domAPI = (styleDomAPI_default());\nErrorBox_module_options.insertStyleElement = (insertStyleElement_default());\n\nvar ErrorBox_module_update = injectStylesIntoStyleTag_default()(ErrorBox_module/* default */.A, ErrorBox_module_options);\n\n\n\n\n       /* harmony default export */ const ErrorBox_ErrorBox_module = (ErrorBox_module/* default */.A && ErrorBox_module/* default */.A.locals ? ErrorBox_module/* default */.A.locals : undefined);\n\n;// CONCATENATED MODULE: ./src/components/ErrorBox/ErrorBox.tsx\n\n\n\n\nconst ErrorBox = props => {\n  return /*#__PURE__*/react.createElement("div", {\n    className: ErrorBox_ErrorBox_module["error-box"]\n  }, /*#__PURE__*/react.createElement(Text_Text, {\n    view: "title",\n    tag: "div"\n  }, "Error ", props.code || \'\'), /*#__PURE__*/react.createElement(Text_Text, {\n    view: "p-20",\n    tag: "div",\n    className: ErrorBox_ErrorBox_module["error-box__message"]\n  }, props.children), props.errorSlot);\n};\n/* harmony default export */ const ErrorBox_ErrorBox = (/*#__PURE__*/(0,react.memo)(ErrorBox));\n;// CONCATENATED MODULE: ./src/components/ErrorBox/index.ts\n\n;// CONCATENATED MODULE: ./src/components/icons/ArrowLeftIcon/ArrowLeftIcon.tsx\n\n\n\n\nconst ArrowLeftIcon = props => {\n  return /*#__PURE__*/react.createElement(Icon_Icon, extends_extends({\n    style: {\n      cursor: \'pointer\'\n    }\n  }, props, {\n    viewBox: "0 0 32 32",\n    width: "32",\n    height: "32"\n  }), /*#__PURE__*/react.createElement("path", {\n    className: styles_customStyles_module[\'icon_stroke_color_\' + (props.color || \'inherit\')],\n    d: "M20.12 26.5599L11.4267 17.8666C10.4 16.8399 10.4 15.1599 11.4267 14.1333L20.12 5.43994",\n    strokeWidth: "1.5",\n    strokeMiterlimit: "10",\n    strokeLinecap: "round",\n    strokeLinejoin: "round"\n  }));\n};\n/* harmony default export */ const ArrowLeftIcon_ArrowLeftIcon = (ArrowLeftIcon);\n;// CONCATENATED MODULE: ./src/components/icons/ArrowLeftIcon/index.ts\n\n;// CONCATENATED MODULE: ./src/components/icons/ArrowRightIcon/ArrowRightIcon.tsx\n\n\n\n\nconst ArrowRightIcon = props => {\n  return /*#__PURE__*/react.createElement(Icon_Icon, extends_extends({\n    style: {\n      cursor: \'pointer\'\n    }\n  }, props, {\n    viewBox: "0 0 32 32",\n    width: "32",\n    height: "32"\n  }), /*#__PURE__*/react.createElement("path", {\n    className: styles_customStyles_module[\'icon_stroke_color_\' + (props.color || \'inherit\')],\n    d: "M11.88 26.5599L20.5733 17.8666C21.6 16.8399 21.6 15.1599 20.5733 14.1333L11.88 5.43994",\n    strokeWidth: "1.5",\n    strokeMiterlimit: "10",\n    strokeLinecap: "round",\n    strokeLinejoin: "round"\n  }));\n};\n/* harmony default export */ const ArrowRightIcon_ArrowRightIcon = (ArrowRightIcon);\n;// CONCATENATED MODULE: ./src/components/icons/ArrowRightIcon/index.ts\n\n;// CONCATENATED MODULE: ./src/store/PageControllerStore/PageControllerStore.tsx\n\nclass PageControllerStore {\n  _pages = 9;\n  _total = 0;\n  constructor(totalResults) {\n    makeObservable(this, {\n      _total: mobx_esm_observable,\n      _pages: mobx_esm_observable,\n      getPointsArray: action.bound,\n      pages: computed,\n      total: computed\n    });\n    this._total = Math.floor(totalResults / this._pages + (totalResults % this._pages !== 0 ? 1 : 0));\n    ;\n  }\n  getPointsArray(selectedPage) {\n    if (this._total < this._pages) {\n      return Array.from({\n        length: this._total\n      }, (_, index) => index + 1);\n    } else {\n      const endItem = Math.min(this._pages + selectedPage - (selectedPage % 3 !== 0 ? selectedPage % 3 : 3), this._total);\n      let firstItem = selectedPage;\n      if (selectedPage % 3 === 1) {\n        firstItem = selectedPage;\n      } else if (selectedPage % 3 === 2) {\n        firstItem = selectedPage - 1;\n      } else {\n        firstItem = selectedPage - 2;\n      }\n      if (endItem - firstItem + 1 >= this._pages) {\n        return [firstItem, firstItem + 1, firstItem + 2, 0, endItem];\n      }\n      return Array.from({\n        length: endItem - firstItem + 1\n      }, (_, index) => index + firstItem);\n    }\n  }\n  get pages() {\n    return this._pages;\n  }\n  get total() {\n    return this._total;\n  }\n  destroy() {\n    this._pages = 9;\n  }\n}\n// EXTERNAL MODULE: ./node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[0].use[1]!./node_modules/postcss-loader/dist/cjs.js??ruleSet[1].rules[0].use[2]!./node_modules/sass-loader/dist/cjs.js!./src/components/PageController/PageController.module.scss\nvar PageController_module = __webpack_require__(1078);\n;// CONCATENATED MODULE: ./src/components/PageController/PageController.module.scss\n\n      \n      \n      \n      \n      \n      \n      \n      \n      \n\nvar PageController_module_options = {};\n\nPageController_module_options.styleTagTransform = (styleTagTransform_default());\nPageController_module_options.setAttributes = (setAttributesWithoutAttributes_default());\nPageController_module_options.insert = insertBySelector_default().bind(null, "head");\nPageController_module_options.domAPI = (styleDomAPI_default());\nPageController_module_options.insertStyleElement = (insertStyleElement_default());\n\nvar PageController_module_update = injectStylesIntoStyleTag_default()(PageController_module/* default */.A, PageController_module_options);\n\n\n\n\n       /* harmony default export */ const PageController_PageController_module = (PageController_module/* default */.A && PageController_module/* default */.A.locals ? PageController_module/* default */.A.locals : undefined);\n\n;// CONCATENATED MODULE: ./src/components/PageController/PageController.tsx\n\n\n\n\n\n\n\n\n\nconst PageController = ({\n  selectedPage,\n  totalResults,\n  onClick\n}) => {\n  const {\n    getPointsArray,\n    total\n  } = useLocalStore_useLocalStore(() => new PageControllerStore(totalResults));\n  const goBack = () => {\n    if (selectedPage > 1) {\n      onClick(selectedPage - 1);\n    }\n  };\n  const goNext = () => {\n    if (selectedPage < total) {\n      onClick(selectedPage + 1);\n    }\n  };\n  const selectPage = pageNumber => {\n    onClick(pageNumber);\n  };\n  return /*#__PURE__*/react.createElement("div", {\n    className: PageController_PageController_module["page-controller"]\n  }, /*#__PURE__*/react.createElement(ArrowLeftIcon_ArrowLeftIcon, {\n    color: selectedPage > 1 ? \'primary\' : \'secondary\',\n    onClick: goBack\n  }), /*#__PURE__*/react.createElement("div", {\n    className: PageController_PageController_module["page-controller__numbers"]\n  }, getPointsArray(selectedPage).map(number => {\n    if (number === 0) {\n      return /*#__PURE__*/react.createElement(Text_Text, {\n        key: number,\n        tag: "div",\n        view: "p-18",\n        className: PageController_PageController_module[\'page-controller__numbers__points\']\n      }, "...");\n    }\n    return /*#__PURE__*/react.createElement(Text_Text, {\n      key: number,\n      tag: "div",\n      view: "p-18",\n      className: classnames_default()({\n        [PageController_PageController_module["page-controller__numbers__number"]]: true,\n        [PageController_PageController_module["page-controller__numbers__number_selected"]]: selectedPage === number\n      }),\n      onCLick: () => {\n        selectPage(number);\n      }\n    }, number);\n  })), /*#__PURE__*/react.createElement(ArrowRightIcon_ArrowRightIcon, {\n    color: selectedPage < total ? \'primary\' : \'secondary\',\n    onClick: goNext\n  }));\n};\n/* harmony default export */ const PageController_PageController = (observer(PageController));\n;// CONCATENATED MODULE: ./src/components/PageController/index.ts\n\n// EXTERNAL MODULE: ./node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[0].use[1]!./node_modules/postcss-loader/dist/cjs.js??ruleSet[1].rules[0].use[2]!./node_modules/sass-loader/dist/cjs.js!./src/components/ListShower/ListShower.module.scss\nvar ListShower_module = __webpack_require__(4088);\n;// CONCATENATED MODULE: ./src/components/ListShower/ListShower.module.scss\n\n      \n      \n      \n      \n      \n      \n      \n      \n      \n\nvar ListShower_module_options = {};\n\nListShower_module_options.styleTagTransform = (styleTagTransform_default());\nListShower_module_options.setAttributes = (setAttributesWithoutAttributes_default());\nListShower_module_options.insert = insertBySelector_default().bind(null, "head");\nListShower_module_options.domAPI = (styleDomAPI_default());\nListShower_module_options.insertStyleElement = (insertStyleElement_default());\n\nvar ListShower_module_update = injectStylesIntoStyleTag_default()(ListShower_module/* default */.A, ListShower_module_options);\n\n\n\n\n       /* harmony default export */ const ListShower_ListShower_module = (ListShower_module/* default */.A && ListShower_module/* default */.A.locals ? ListShower_module/* default */.A.locals : undefined);\n\n;// CONCATENATED MODULE: ./src/components/ListShower/ListShower.tsx\n\n\n\n\n\n\n\n\nconst ListShower = ({\n  status,\n  totalCount = 0,\n  children\n}) => {\n  const [_, setSearchParams] = useSearchParams();\n  const pageControllerClick = page => {\n    SearchParamsStore_SearchParamsStore.setSearchParam(\'page\', page.toString());\n    setSearchParams(SearchParamsStore_SearchParamsStore.searchParamURL);\n  };\n  return /*#__PURE__*/react.createElement(react.Fragment, null, status.statusName === \'NOT_STARTED\' ? /*#__PURE__*/react.createElement(Text_Text, {\n    tag: "div",\n    view: "p-20",\n    color: "secondary"\n  }, "Try searching!") : status.statusName === \'ERROR\' ? /*#__PURE__*/react.createElement(ErrorBox_ErrorBox, null, status.statusMessage) : status.statusName === \'LOADING\' ? /*#__PURE__*/react.createElement(Loader_Loader, null) : /*#__PURE__*/react.createElement(react.Fragment, null, /*#__PURE__*/react.createElement("div", {\n    className: ListShower_ListShower_module[\'list-shower\']\n  }, children), totalCount > 0 && /*#__PURE__*/react.createElement(PageController_PageController, {\n    selectedPage: Number(SearchParamsStore_SearchParamsStore.getNumberParam(\'page\')),\n    totalResults: totalCount,\n    onClick: pageControllerClick\n  })));\n};\n/* harmony default export */ const ListShower_ListShower = (ListShower);\n;// CONCATENATED MODULE: ./src/components/ListShower/index.ts\n\n// EXTERNAL MODULE: ./node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[0].use[1]!./node_modules/postcss-loader/dist/cjs.js??ruleSet[1].rules[0].use[2]!./node_modules/sass-loader/dist/cjs.js!./src/components/PageTemplate/PageTemplate.module.scss\nvar PageTemplate_module = __webpack_require__(8526);\n;// CONCATENATED MODULE: ./src/components/PageTemplate/PageTemplate.module.scss\n\n      \n      \n      \n      \n      \n      \n      \n      \n      \n\nvar PageTemplate_module_options = {};\n\nPageTemplate_module_options.styleTagTransform = (styleTagTransform_default());\nPageTemplate_module_options.setAttributes = (setAttributesWithoutAttributes_default());\nPageTemplate_module_options.insert = insertBySelector_default().bind(null, "head");\nPageTemplate_module_options.domAPI = (styleDomAPI_default());\nPageTemplate_module_options.insertStyleElement = (insertStyleElement_default());\n\nvar PageTemplate_module_update = injectStylesIntoStyleTag_default()(PageTemplate_module/* default */.A, PageTemplate_module_options);\n\n\n\n\n       /* harmony default export */ const PageTemplate_PageTemplate_module = (PageTemplate_module/* default */.A && PageTemplate_module/* default */.A.locals ? PageTemplate_module/* default */.A.locals : undefined);\n\n;// CONCATENATED MODULE: ./src/components/PageTemplate/PageTemplate.tsx\n\n\n\nconst PageTemplate = props => {\n  return /*#__PURE__*/react.createElement("div", {\n    className: PageTemplate_PageTemplate_module[\'page-template\']\n  }, /*#__PURE__*/react.createElement(Text_Text, {\n    view: "title",\n    className: PageTemplate_PageTemplate_module[\'page-template__name\']\n  }, props.headerName), /*#__PURE__*/react.createElement("div", {\n    className: PageTemplate_PageTemplate_module[\'page-template__content\']\n  }, props.children));\n};\n/* harmony default export */ const PageTemplate_PageTemplate = (PageTemplate);\n;// CONCATENATED MODULE: ./src/components/PageTemplate/index.ts\n\n;// CONCATENATED MODULE: ./src/utils/collection.ts\nconst getInitialCollectionModel = () => ({\n  order: [],\n  entities: {}\n});\nconst normalizeCollection = (elements, getKeyForElement) => {\n  const collection = getInitialCollectionModel();\n  elements.forEach(el => {\n    const id = getKeyForElement(el);\n    collection.order.push(id);\n    collection.entities[id] = el;\n  });\n  return collection;\n};\nconst linearizeCollection = elements => elements.order.map(el => elements.entities[el]);\n;// CONCATENATED MODULE: ./src/store/BaseListStore/BaseListStore.tsx\n\n\n\n\nclass BaseListStore {\n  _status = NotStartedStatus;\n  _results = getInitialCollectionModel();\n  _total = 0;\n  constructor() {\n    makeObservable(this, {\n      _status: mobx_esm_observable.ref,\n      _results: mobx_esm_observable.ref,\n      _total: mobx_esm_observable,\n      setStatus: action.bound,\n      setResultRequest: action.bound,\n      loadingList: action.bound,\n      status: computed,\n      results: computed,\n      total: computed\n    });\n  }\n  setStatus(newStatus) {\n    this._status = {\n      ...newStatus\n    };\n  }\n  setResultRequest(newResultList, newTotal) {\n    this._results = normalizeCollection(newResultList, element => element.id);\n    this._total = newTotal;\n  }\n  loadingList(url, resultsName = \'results\', totalName = \'totalResults\') {\n    this.setStatus(LoadingStatus);\n    lib_axios.get(url).then(resp => {\n      this.setStatus(SuccessfulStatus);\n      this.setResultRequest(resp.data[resultsName], resp.data[totalName]);\n    }).catch(err => {\n      this.setStatus(errorStatus(err.message));\n    });\n  }\n  get status() {\n    return this._status;\n  }\n  get results() {\n    return linearizeCollection(this._results);\n  }\n  get total() {\n    return this._total;\n  }\n  destroy() {\n    this._results = getInitialCollectionModel();\n    this._total = 0;\n    this._status = NotStartedStatus;\n  }\n}\n;\n;// CONCATENATED MODULE: ./src/store/BaseListStore/index.ts\n\n;// CONCATENATED MODULE: ./src/store/IngredientListStore/IngredientListStore.tsx\n\n\nclass IngredientListStore extends BaseListStore {\n  getUrl(offset, query, ...other) {\n    const params = {\n      number: pageElementCount,\n      offset: offset,\n      query: query\n    };\n    const pathUrl = \'search?\';\n    const pathParams = Object.entries(params).map(param => param.join(\'=\'));\n    other.forEach(element => {\n      if (element[1] !== null) {\n        pathParams.push(element.join(\'=\'));\n      }\n    });\n    pathParams.push([\'apiKey\', apiKey].join(\'=\'));\n    const url = urlPrefix + \'food/ingredients/\' + pathUrl + [...pathParams].join(\'&\');\n    return url;\n  }\n  getImageUrl(url, size = 500) {\n    return `${imagePrefix}ingredients_${size}x${size}/${url}`;\n  }\n}\n;\n;// CONCATENATED MODULE: ./src/store/IngredientListStore/index.ts\n\n;// CONCATENATED MODULE: ./src/App/pages/Ingredients/Ingredients.tsx\n\n\n\n\n\n\n\n\n\n\n\nconst Ingredients = () => {\n  const ingredientStore = useLocalStore_useLocalStore(() => new IngredientListStore());\n  (0,react.useEffect)(() => {\n    const queryStr = SearchParamsStore_SearchParamsStore.getParam(\'query\');\n    if (queryStr !== \'\') {\n      ingredientStore.loadingList(ingredientStore.getUrl(SearchParamsStore_SearchParamsStore.getOffset(), SearchParamsStore_SearchParamsStore.getParam(\'query\'), SearchParamsStore_SearchParamsStore.getParamPair(\'intolerances\')));\n    }\n  }, [SearchParamsStore_SearchParamsStore.searchParams, ingredientStore]);\n  return /*#__PURE__*/react.createElement(PageTemplate_PageTemplate, {\n    headerName: "Ingredients"\n  }, /*#__PURE__*/react.createElement(ContentFilters_ContentFilters, {\n    inputPlaceholder: "Enter ingredients",\n    categoryTag: "intolerances",\n    categoryPlaceholder: "Intolerances",\n    categoryOptions: intoleranceTypesOptions,\n    otherFilters: ingredientFilters\n  }), /*#__PURE__*/react.createElement(ListShower_ListShower, {\n    status: ingredientStore.status,\n    totalCount: ingredientStore.total\n  }, ingredientStore.results.map(ingredient => {\n    return /*#__PURE__*/react.createElement(Card_Card, {\n      key: ingredient.id,\n      image: ingredientStore.getImageUrl(ingredient.image),\n      title: ingredient.name,\n      subtitle: \'\'\n    });\n  })));\n};\n/* harmony default export */ const Ingredients_Ingredients = (observer(Ingredients));\n;// CONCATENATED MODULE: ./src/App/pages/Ingredients/index.tsx\n\n// EXTERNAL MODULE: ./node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[0].use[1]!./node_modules/postcss-loader/dist/cjs.js??ruleSet[1].rules[0].use[2]!./node_modules/sass-loader/dist/cjs.js!./src/App/pages/Login/Login.module.scss\nvar Login_module = __webpack_require__(4066);\n;// CONCATENATED MODULE: ./src/App/pages/Login/Login.module.scss\n\n      \n      \n      \n      \n      \n      \n      \n      \n      \n\nvar Login_module_options = {};\n\nLogin_module_options.styleTagTransform = (styleTagTransform_default());\nLogin_module_options.setAttributes = (setAttributesWithoutAttributes_default());\nLogin_module_options.insert = insertBySelector_default().bind(null, "head");\nLogin_module_options.domAPI = (styleDomAPI_default());\nLogin_module_options.insertStyleElement = (insertStyleElement_default());\n\nvar Login_module_update = injectStylesIntoStyleTag_default()(Login_module/* default */.A, Login_module_options);\n\n\n\n\n       /* harmony default export */ const Login_Login_module = (Login_module/* default */.A && Login_module/* default */.A.locals ? Login_module/* default */.A.locals : undefined);\n\n;// CONCATENATED MODULE: ./src/App/pages/Login/Login.tsx\n\n\n\n\n\n\n\n\n\nconst initRequestValue = {\n  username: \'\',\n  firstName: \'\',\n  lastName: \'\',\n  email: \'\'\n};\nconst Login = () => {\n  const [user, setUser] = (0,react.useState)(initRequestValue);\n  const navigate = dist_useNavigate();\n  (0,react.useEffect)(() => {\n    if (UserStore_UserStore.userStatus === \'auth\') {\n      navigate(\'/user\');\n    }\n  }, [navigate]);\n  return /*#__PURE__*/react.createElement("div", {\n    className: Login_Login_module["login-page"]\n  }, /*#__PURE__*/react.createElement(Text_Text, {\n    view: "title",\n    tag: "div"\n  }, "Login"), /*#__PURE__*/react.createElement("div", {\n    className: Login_Login_module["login-page__form"]\n  }, Object.entries(user).map(([key, value]) => {\n    return /*#__PURE__*/react.createElement(Input_Input, {\n      key: key,\n      value: value,\n      placeholder: key,\n      onChange: newValue => {\n        user[key] = newValue;\n        setUser({\n          ...user\n        });\n      }\n    });\n  }), /*#__PURE__*/react.createElement(Button_Button, {\n    onClick: () => {\n      UserStore_UserStore.login(user);\n    }\n  }, "login"), UserStore_UserStore.status.statusName === \'ERROR\' && /*#__PURE__*/react.createElement(Text_Text, {\n    color: "accent",\n    view: "p-16",\n    tag: "div"\n  }, UserStore_UserStore.status.statusMessage)));\n};\n/* harmony default export */ const Login_Login = (observer(Login));\n;// CONCATENATED MODULE: ./src/App/pages/Login/index.ts\n\n;// CONCATENATED MODULE: ./src/store/MealPlanningStore/MealPlanningStore.tsx\n\n\n\n\nclass MealPlanningStore {\n  _status = NotStartedStatus;\n  _plan = {};\n  constructor() {\n    makeObservable(this, {\n      _status: mobx_esm_observable.ref,\n      _plan: mobx_esm_observable.ref,\n      setStatus: action.bound,\n      setPlan: action.bound,\n      loadingPlan: action.bound,\n      generatePlan: action.bound,\n      addInPlan: action.bound,\n      deleteFromPlan: action.bound,\n      clearPlan: action.bound,\n      status: computed,\n      plan: computed,\n      weekStart: computed\n    });\n  }\n  setStatus(newStatus) {\n    this._status = {\n      ...newStatus\n    };\n  }\n  setPlan(weekPlan) {\n    this._plan = {\n      ...weekPlan\n    };\n  }\n  getDateForm(dateObj) {\n    const date = dateObj.toLocaleDateString(\'fr-CA\', {\n      year: \'numeric\',\n      month: \'2-digit\',\n      day: \'2-digit\'\n    });\n    return date;\n  }\n  getStartOfWeek(dateObj) {\n    const date = new Date(dateObj);\n    const day = date.getDay();\n    const diff = date.getDate() - day + (day === 0 ? -6 : 1);\n    return this.getDateForm(new Date(date.setDate(diff)));\n  }\n  loadingPlan(username, hash) {\n    const date = this.getStartOfWeek(new Date());\n    const url = urlPrefix + \'mealplanner/\' + username + \'/week/\' + date + \'?hash=\' + hash + \'&apiKey=\' + apiKey;\n    this.setStatus(LoadingStatus);\n    lib_axios.get(url).then(resp => {\n      this.setPlan(resp.data);\n      this.setStatus(SuccessfulStatus);\n    }).catch(err => {\n      this.setStatus(errorStatus(err.message));\n    });\n  }\n  generatePlan(id, username, hash) {\n    const nowPrev = this.getStartOfWeek(new Date());\n    const now = new Date(nowPrev).getTime() / 1000;\n    const url = urlPrefix + \'mealplanner/\' + username + \'/items?apiKey=\' + apiKey + \'&hash=\' + hash;\n    lib_axios.post(url, {\n      mealPlanTemplateId: id,\n      startDate: now\n    }).then(() => {\n      this.loadingPlan(username, hash);\n    });\n  }\n  addInPlan() {}\n  deleteFromPlan() {}\n  clearPlan() {}\n  get status() {\n    return this._status;\n  }\n  get plan() {\n    return this._plan;\n  }\n  get weekStart() {\n    return this.getStartOfWeek(new Date());\n  }\n  destroy() {\n    this._plan = {};\n    this._status = NotStartedStatus;\n  }\n}\n;\n;// CONCATENATED MODULE: ./src/store/MealPlanningStore/index.ts\n\n// EXTERNAL MODULE: ./node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[0].use[1]!./node_modules/postcss-loader/dist/cjs.js??ruleSet[1].rules[0].use[2]!./node_modules/sass-loader/dist/cjs.js!./src/App/pages/MealPlanning/components/SlotInfo/SlotInfo.module.scss\nvar SlotInfo_module = __webpack_require__(3748);\n;// CONCATENATED MODULE: ./src/App/pages/MealPlanning/components/SlotInfo/SlotInfo.module.scss\n\n      \n      \n      \n      \n      \n      \n      \n      \n      \n\nvar SlotInfo_module_options = {};\n\nSlotInfo_module_options.styleTagTransform = (styleTagTransform_default());\nSlotInfo_module_options.setAttributes = (setAttributesWithoutAttributes_default());\nSlotInfo_module_options.insert = insertBySelector_default().bind(null, "head");\nSlotInfo_module_options.domAPI = (styleDomAPI_default());\nSlotInfo_module_options.insertStyleElement = (insertStyleElement_default());\n\nvar SlotInfo_module_update = injectStylesIntoStyleTag_default()(SlotInfo_module/* default */.A, SlotInfo_module_options);\n\n\n\n\n       /* harmony default export */ const SlotInfo_SlotInfo_module = (SlotInfo_module/* default */.A && SlotInfo_module/* default */.A.locals ? SlotInfo_module/* default */.A.locals : undefined);\n\n;// CONCATENATED MODULE: ./src/App/pages/MealPlanning/components/SlotInfo/SlotInfo.tsx\n\n\n\n\n\nconst SlotInfo = props => {\n  const elements = props.slots.sort((a, b) => {\n    return a.position < b.position ? -1 : 0;\n  });\n  const getItemElementByType = item => {\n    if (item.type !== \'INGREDIENTS\') {\n      let imgUrl = imagePrefix;\n      switch (item.type) {\n        case \'PRODUCT\':\n          imgUrl += \'products/\' + item.value.id + \'-90x90.\' + item.value.imageType;\n          break;\n        case \'MENU_ITEM\':\n          imgUrl += \'menu-items/\' + item.value.id + \'-90x90.\' + item.value.imageType;\n          break;\n        case \'RECIPE\':\n          imgUrl += \'recipes/\' + item.value.id + \'-240x150.\' + item.value.imageType;\n          break;\n        case \'CUSTOM_FOOD\':\n          break;\n        default:\n          break;\n      }\n      return /*#__PURE__*/react.createElement(react.Fragment, null, /*#__PURE__*/react.createElement("img", {\n        src: imgUrl,\n        alt: item.value.title\n      }), /*#__PURE__*/react.createElement(Text_Text, null, item.value.title));\n    } else {\n      if (\'ingredients\' in item.value) {\n        return /*#__PURE__*/react.createElement(react.Fragment, null, item.value.ingredients.map((ing, index) => {\n          return /*#__PURE__*/react.createElement("div", {\n            className: SlotInfo_SlotInfo_module["slot-info__item__ingr"],\n            key: index\n          }, /*#__PURE__*/react.createElement("img", {\n            src: ing.image,\n            alt: ing.name\n          }), /*#__PURE__*/react.createElement(Text_Text, null, ing.amount, \' \', ing.name, \' \', ing.unit));\n        }));\n      } else if (\'title\' in item.value) {\n        return /*#__PURE__*/react.createElement("div", {\n          className: SlotInfo_SlotInfo_module["slot-info__item__ingr"],\n          key: item.value.title\n        }, /*#__PURE__*/react.createElement(Text_Text, null, item.value.title), /*#__PURE__*/react.createElement(Text_Text, null, item.value.servings, " minutes"));\n      }\n    }\n  };\n  return /*#__PURE__*/react.createElement("div", {\n    className: SlotInfo_SlotInfo_module["slot-info"]\n  }, elements.map((slot, index) => {\n    return /*#__PURE__*/react.createElement("div", {\n      className: SlotInfo_SlotInfo_module["slot-info__item"],\n      key: slot.type + index\n    }, getItemElementByType(slot));\n  }));\n};\n/* harmony default export */ const SlotInfo_SlotInfo = (/*#__PURE__*/(0,react.memo)(SlotInfo));\n;// CONCATENATED MODULE: ./src/App/pages/MealPlanning/components/SlotInfo/index.ts\n\n// EXTERNAL MODULE: ./node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[0].use[1]!./node_modules/postcss-loader/dist/cjs.js??ruleSet[1].rules[0].use[2]!./node_modules/sass-loader/dist/cjs.js!./src/App/pages/MealPlanning/components/DayInfo/DayInfo.module.scss\nvar DayInfo_module = __webpack_require__(1158);\n;// CONCATENATED MODULE: ./src/App/pages/MealPlanning/components/DayInfo/DayInfo.module.scss\n\n      \n      \n      \n      \n      \n      \n      \n      \n      \n\nvar DayInfo_module_options = {};\n\nDayInfo_module_options.styleTagTransform = (styleTagTransform_default());\nDayInfo_module_options.setAttributes = (setAttributesWithoutAttributes_default());\nDayInfo_module_options.insert = insertBySelector_default().bind(null, "head");\nDayInfo_module_options.domAPI = (styleDomAPI_default());\nDayInfo_module_options.insertStyleElement = (insertStyleElement_default());\n\nvar DayInfo_module_update = injectStylesIntoStyleTag_default()(DayInfo_module/* default */.A, DayInfo_module_options);\n\n\n\n\n       /* harmony default export */ const DayInfo_DayInfo_module = (DayInfo_module/* default */.A && DayInfo_module/* default */.A.locals ? DayInfo_module/* default */.A.locals : undefined);\n\n;// CONCATENATED MODULE: ./src/App/pages/MealPlanning/components/DayInfo/DayInfo.tsx\n\n\n\n\n\nconst DayInfo = props => {\n  const breakfastItems = props.items.filter(item => item.slot === 1);\n  const lunchItems = props.items.filter(item => item.slot === 2);\n  const dinnerItems = props.items.filter(item => item.slot === 3);\n  const getNutritionByName = name => {\n    const nut = props.nutritionSummary.nutrients.find(nutr => nutr.name === name);\n    if (!nut) {\n      return \'\';\n    }\n    return nut.name + \': \' + nut.amount + \' \' + nut.unit;\n  };\n  return /*#__PURE__*/react.createElement(react.Fragment, null, /*#__PURE__*/react.createElement(Text_Text, {\n    className: DayInfo_DayInfo_module["day-info__name"],\n    tag: "div",\n    view: "p-16",\n    weight: "bold"\n  }, props.dayName), /*#__PURE__*/react.createElement(SlotInfo_SlotInfo, {\n    slots: breakfastItems\n  }), /*#__PURE__*/react.createElement(SlotInfo_SlotInfo, {\n    slots: lunchItems\n  }), /*#__PURE__*/react.createElement(SlotInfo_SlotInfo, {\n    slots: dinnerItems\n  }), /*#__PURE__*/react.createElement("div", {\n    className: DayInfo_DayInfo_module["day-info__summary"]\n  }, /*#__PURE__*/react.createElement(Text_Text, null, getNutritionByName(\'Calories\')), /*#__PURE__*/react.createElement(Text_Text, null, getNutritionByName(\'Fat\')), /*#__PURE__*/react.createElement(Text_Text, null, getNutritionByName(\'Protein\')), /*#__PURE__*/react.createElement(Text_Text, null, getNutritionByName(\'Carbs\'))));\n};\n/* harmony default export */ const DayInfo_DayInfo = (/*#__PURE__*/(0,react.memo)(DayInfo));\n;// CONCATENATED MODULE: ./src/App/pages/MealPlanning/components/DayInfo/index.ts\n\n// EXTERNAL MODULE: ./node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[0].use[1]!./node_modules/postcss-loader/dist/cjs.js??ruleSet[1].rules[0].use[2]!./node_modules/sass-loader/dist/cjs.js!./src/App/pages/MealPlanning/components/WeekInfo/WeekInfo.module.scss\nvar WeekInfo_module = __webpack_require__(2040);\n;// CONCATENATED MODULE: ./src/App/pages/MealPlanning/components/WeekInfo/WeekInfo.module.scss\n\n      \n      \n      \n      \n      \n      \n      \n      \n      \n\nvar WeekInfo_module_options = {};\n\nWeekInfo_module_options.styleTagTransform = (styleTagTransform_default());\nWeekInfo_module_options.setAttributes = (setAttributesWithoutAttributes_default());\nWeekInfo_module_options.insert = insertBySelector_default().bind(null, "head");\nWeekInfo_module_options.domAPI = (styleDomAPI_default());\nWeekInfo_module_options.insertStyleElement = (insertStyleElement_default());\n\nvar WeekInfo_module_update = injectStylesIntoStyleTag_default()(WeekInfo_module/* default */.A, WeekInfo_module_options);\n\n\n\n\n       /* harmony default export */ const WeekInfo_WeekInfo_module = (WeekInfo_module/* default */.A && WeekInfo_module/* default */.A.locals ? WeekInfo_module/* default */.A.locals : undefined);\n\n;// CONCATENATED MODULE: ./src/App/pages/MealPlanning/components/WeekInfo/WeekInfo.tsx\n\n\n\n\n\n\nconst weekDays = [\'Monday\', \'Tuesday\', \'Wednesday\', \'Thursday\', \'Friday\', \'Saturday\', \'Sunday\'];\nconst WeekInfo = props => {\n  return /*#__PURE__*/react.createElement("div", {\n    className: WeekInfo_WeekInfo_module["week-info"]\n  }, /*#__PURE__*/react.createElement(Text_Text, {\n    className: WeekInfo_WeekInfo_module["week-info__header"],\n    tag: "div",\n    view: "p-18",\n    weight: "bold"\n  }, "Current week"), /*#__PURE__*/react.createElement("div", {\n    className: WeekInfo_WeekInfo_module["week-info__days"]\n  }, props.plan.days.map((day, index) => {\n    return /*#__PURE__*/react.createElement(DayInfo_DayInfo, extends_extends({\n      key: day.date,\n      dayName: weekDays[index]\n    }, day));\n  })));\n};\n/* harmony default export */ const WeekInfo_WeekInfo = (/*#__PURE__*/(0,react.memo)(WeekInfo));\n;// CONCATENATED MODULE: ./src/App/pages/MealPlanning/components/WeekInfo/index.ts\n\n// EXTERNAL MODULE: ./node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[0].use[1]!./node_modules/postcss-loader/dist/cjs.js??ruleSet[1].rules[0].use[2]!./node_modules/sass-loader/dist/cjs.js!./src/App/pages/MealPlanning/MealPlanning.module.scss\nvar MealPlanning_module = __webpack_require__(8252);\n;// CONCATENATED MODULE: ./src/App/pages/MealPlanning/MealPlanning.module.scss\n\n      \n      \n      \n      \n      \n      \n      \n      \n      \n\nvar MealPlanning_module_options = {};\n\nMealPlanning_module_options.styleTagTransform = (styleTagTransform_default());\nMealPlanning_module_options.setAttributes = (setAttributesWithoutAttributes_default());\nMealPlanning_module_options.insert = insertBySelector_default().bind(null, "head");\nMealPlanning_module_options.domAPI = (styleDomAPI_default());\nMealPlanning_module_options.insertStyleElement = (insertStyleElement_default());\n\nvar MealPlanning_module_update = injectStylesIntoStyleTag_default()(MealPlanning_module/* default */.A, MealPlanning_module_options);\n\n\n\n\n       /* harmony default export */ const MealPlanning_MealPlanning_module = (MealPlanning_module/* default */.A && MealPlanning_module/* default */.A.locals ? MealPlanning_module/* default */.A.locals : undefined);\n\n;// CONCATENATED MODULE: ./src/App/pages/MealPlanning/MealPlanning.tsx\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nconst MealPlanning = () => {\n  const {\n    plan,\n    status,\n    loadingPlan,\n    generatePlan\n  } = useLocalStore_useLocalStore(() => new MealPlanningStore());\n  const [templates, setTemplates] = (0,react.useState)([]);\n  const {\n    user,\n    userStatus\n  } = UserStore_UserStore;\n  const navigate = dist_useNavigate();\n  (0,react.useEffect)(() => {\n    if (userStatus !== \'none\') {\n      loadingPlan(user.username, user.hash);\n    }\n  }, [userStatus, loadingPlan, user.hash, user.username]);\n  return /*#__PURE__*/react.createElement("div", {\n    className: MealPlanning_MealPlanning_module["mealplanning-page"]\n  }, /*#__PURE__*/react.createElement(Text_Text, {\n    tag: "div",\n    view: "title"\n  }, "Meal plans"), userStatus === \'none\' ? /*#__PURE__*/react.createElement(Button_Button, {\n    onClick: () => {\n      navigate(\'/login\');\n    }\n  }, "Login") : /*#__PURE__*/react.createElement(react.Fragment, null, /*#__PURE__*/react.createElement("div", {\n    className: MealPlanning_MealPlanning_module["mealplanning-page__form"]\n  }, /*#__PURE__*/react.createElement(MultiDropdown_MultiDropdown, {\n    value: templates,\n    options: publicTemplates,\n    onChange: value => {\n      setTemplates(value);\n    },\n    getTitle: value => {\n      if (value.length === 1) {\n        return value[0].value;\n      }\n      return \'Template\';\n    },\n    selectMode: "ONE"\n  }), /*#__PURE__*/react.createElement(Button_Button, {\n    onClick: () => {\n      generatePlan(Number(templates.length === 1 ? templates[0].key : \'37\'), user.username, user.hash);\n    }\n  }, "Generate Meal Plan")), status.statusName === \'LOADING\' ? /*#__PURE__*/react.createElement(Text_Text, null, "...Loading") : status.statusName === \'ERROR\' ? /*#__PURE__*/react.createElement(ErrorBox_ErrorBox, null, status.statusMessage) : /*#__PURE__*/react.createElement(react.Fragment, null, plan.days && /*#__PURE__*/react.createElement(WeekInfo_WeekInfo, {\n    plan: plan\n  }))));\n};\n/* harmony default export */ const MealPlanning_MealPlanning = (observer(MealPlanning));\n;// CONCATENATED MODULE: ./src/App/pages/MealPlanning/index.ts\n\n;// CONCATENATED MODULE: ./src/store/MenuItemListStore/MenuItemListStore.tsx\n\n\nclass MenuItemListStore extends BaseListStore {\n  getUrl(offset, query, ...other) {\n    const params = {\n      number: pageElementCount,\n      offset: offset,\n      query: query\n    };\n    const pathUrl = \'search?\';\n    const pathParams = Object.entries(params).map(param => param.join(\'=\'));\n    other.forEach(element => {\n      if (element[1] !== null) {\n        pathParams.push(element.join(\'=\'));\n      }\n    });\n    pathParams.push([\'apiKey\', apiKey].join(\'=\'));\n    const url = urlPrefix + \'food/menuItems/\' + pathUrl + [...pathParams].join(\'&\');\n    return url;\n  }\n}\n;\n;// CONCATENATED MODULE: ./src/store/MenuItemListStore/index.ts\n\n;// CONCATENATED MODULE: ./src/App/pages/MenuItems/MenuItems.tsx\n\n\n\n\n\n\n\n\n\n\nconst MenuItems = () => {\n  const menuItemsStore = useLocalStore_useLocalStore(() => new MenuItemListStore());\n  (0,react.useEffect)(() => {\n    const queryStr = SearchParamsStore_SearchParamsStore.getParam(\'query\');\n    if (queryStr !== \'\') {\n      menuItemsStore.loadingList(menuItemsStore.getUrl(SearchParamsStore_SearchParamsStore.getOffset(), SearchParamsStore_SearchParamsStore.getParam(\'query\')), \'menuItems\', \'totalMenuItems\');\n    }\n  }, [SearchParamsStore_SearchParamsStore.searchParams, menuItemsStore]);\n  return /*#__PURE__*/react.createElement(PageTemplate_PageTemplate, {\n    headerName: "Menu Items"\n  }, /*#__PURE__*/react.createElement(ContentFilters_ContentFilters, {\n    inputPlaceholder: "Enter menu items"\n  }), /*#__PURE__*/react.createElement(ListShower_ListShower, {\n    status: menuItemsStore.status,\n    totalCount: menuItemsStore.total\n  }, menuItemsStore.results.map(menuItem => {\n    return /*#__PURE__*/react.createElement(Card_Card, {\n      key: menuItem.id,\n      image: menuItem.image,\n      title: [menuItem.title, menuItem.restaurantChain].join(\' - \'),\n      subtitle: `${menuItem.servings.number}x${menuItem.servings.size} ${menuItem.servings.unit}`\n    });\n  })));\n};\n/* harmony default export */ const MenuItems_MenuItems = (observer(MenuItems));\n;// CONCATENATED MODULE: ./src/App/pages/MenuItems/index.ts\n\n;// CONCATENATED MODULE: ./src/store/ProductListStore/ProductListStore.tsx\n\n\nclass ProductListStore extends BaseListStore {\n  getUrl(offset, query, ...other) {\n    const params = {\n      number: pageElementCount,\n      offset: offset,\n      query: query\n    };\n    const pathUrl = \'search?\';\n    const pathParams = Object.entries(params).map(param => param.join(\'=\'));\n    other.forEach(element => {\n      if (element[1] !== null) {\n        pathParams.push(element.join(\'=\'));\n      }\n    });\n    pathParams.push([\'apiKey\', apiKey].join(\'=\'));\n    const url = urlPrefix + \'food/products/\' + pathUrl + [...pathParams].join(\'&\');\n    return url;\n  }\n}\n;\n;// CONCATENATED MODULE: ./src/store/ProductListStore/index.ts\n\n;// CONCATENATED MODULE: ./src/App/pages/Products/Products.tsx\n\n\n\n\n\n\n\n\n\n\nconst Products = () => {\n  const productStore = useLocalStore_useLocalStore(() => new ProductListStore());\n  (0,react.useEffect)(() => {\n    const queryStr = SearchParamsStore_SearchParamsStore.getParam(\'query\');\n    if (queryStr !== \'\') {\n      productStore.loadingList(productStore.getUrl(SearchParamsStore_SearchParamsStore.getOffset(), SearchParamsStore_SearchParamsStore.getParam(\'query\')), \'products\', \'totalProducts\');\n    }\n  }, [SearchParamsStore_SearchParamsStore.searchParams, productStore]);\n  return /*#__PURE__*/react.createElement(PageTemplate_PageTemplate, {\n    headerName: "Products"\n  }, /*#__PURE__*/react.createElement(ContentFilters_ContentFilters, {\n    inputPlaceholder: "Enter products"\n  }), /*#__PURE__*/react.createElement(ListShower_ListShower, {\n    status: productStore.status,\n    totalCount: productStore.total\n  }, productStore.results.map(product => {\n    return /*#__PURE__*/react.createElement(Card_Card, {\n      key: product.id,\n      image: product.image,\n      title: product.title,\n      subtitle: \'\'\n    });\n  })));\n};\n/* harmony default export */ const Products_Products = (observer(Products));\n;// CONCATENATED MODULE: ./src/App/pages/Products/index.ts\n\n;// CONCATENATED MODULE: ./src/components/icons/EqIcon/EqIcon.tsx\n\n\nconst EqIcon = props => {\n  return /*#__PURE__*/react.createElement(Icon_Icon, props, /*#__PURE__*/react.createElement("path", {\n    fillRule: "evenodd",\n    clipRule: "evenodd",\n    d: "M4.94982 1.67442C3.14086 1.67442 1.67442 3.14086 1.67442 4.94982C1.67442 5.41219 1.29958 5.78702 0.837209 5.78702C0.374835 5.78702 0 5.41219 0 4.94982C0 2.2161 2.2161 0 4.94982 0C7.68353 0 9.89963 2.2161 9.89963 4.94982V12.6657C10.3089 12.422 10.7776 12.2108 11.2725 12.0306C12.7604 11.4892 14.6721 11.1628 16.4651 11.1628C18.2598 11.1628 20.0432 11.4899 21.4063 12.0413C22.0855 12.316 22.7023 12.6634 23.1637 13.0894C23.6229 13.5135 24 14.0872 24 14.7907V16.1126C24 20.4687 20.4687 24 16.1126 24C11.7565 24 8.22521 20.4687 8.22521 16.1126V4.94982C8.22521 3.14086 6.75877 1.67442 4.94982 1.67442ZM22.2402 17.1452C21.7485 20.085 19.1922 22.3256 16.1126 22.3256C12.9647 22.3256 10.3636 19.9845 9.95537 16.9484C10.3513 17.1784 10.7998 17.3788 11.2725 17.5508C12.7604 18.0922 14.6721 18.4186 16.4651 18.4186C18.2598 18.4186 20.0432 18.0916 21.4063 17.5401C21.6982 17.422 21.9786 17.2905 22.2402 17.1452ZM22.3256 14.7907C22.3256 14.7235 22.2915 14.5632 22.0278 14.3195C21.7659 14.0777 21.3475 13.8238 20.7783 13.5935C19.6448 13.1349 18.0795 12.8372 16.4651 12.8372C14.8491 12.8372 13.1329 13.1355 11.8451 13.6041C11.198 13.8396 10.7044 14.1018 10.3893 14.356C10.0594 14.6221 10.0465 14.7747 10.0465 14.7907C10.0465 14.8067 10.0594 14.9593 10.3893 15.2254C10.7044 15.4796 11.198 15.7418 11.8452 15.9773C13.1329 16.4459 14.8491 16.7442 16.4651 16.7442C18.0795 16.7442 19.6448 16.4466 20.7783 15.9879C21.3475 15.7577 21.7659 15.5037 22.0278 15.2619C22.2915 15.0182 22.3256 14.8579 22.3256 14.7907Z",\n    fill: "#B5460F"\n  }));\n};\n/* harmony default export */ const EqIcon_EqIcon = (EqIcon);\n;// CONCATENATED MODULE: ./src/components/icons/EqIcon/index.ts\n\n;// CONCATENATED MODULE: ./src/components/icons/IngIcon/IngIcon.tsx\n\n\nconst IngIcon = props => {\n  return /*#__PURE__*/react.createElement(Icon_Icon, props, /*#__PURE__*/react.createElement("g", {\n    clipPath: "url(#clip0_512_2048)"\n  }, /*#__PURE__*/react.createElement("path", {\n    d: "M23.1605 17.189C23.0466 14.3792 21.8991 11.7539 19.8988 9.75367C18.5148 8.36964 16.8316 7.39356 14.995 6.88571C14.8783 5.33494 13.5801 4.10855 12 4.10855C10.4199 4.10855 9.12175 5.3349 9.00503 6.88571C7.16847 7.39356 5.48523 8.36964 4.10124 9.75367C2.10094 11.7539 0.953486 14.3792 0.839533 17.189C0.364126 17.2677 0 17.6805 0 18.1778V18.8881C0 19.4413 0.450142 19.8914 1.00336 19.8914H22.9966C23.5499 19.8914 24 19.4413 24 18.8881V18.1778C24 17.6805 23.6359 17.2677 23.1605 17.189ZM12 5.06476C12.9736 5.06476 13.79 5.74768 13.997 6.6594C13.3445 6.54226 12.6769 6.48184 12 6.48184C11.3231 6.48184 10.6555 6.54226 10.003 6.6594C10.21 5.74768 11.0265 5.06476 12 5.06476ZM12 7.43804C17.4721 7.43804 21.953 11.7632 22.2034 17.1744H1.79663C2.04704 11.7632 6.52792 7.43804 12 7.43804ZM23.0439 18.8881C23.0439 18.9141 23.0227 18.9353 22.9967 18.9353H1.00336C0.977346 18.9353 0.956158 18.9141 0.956158 18.8881V18.1778C0.956158 18.1518 0.977346 18.1306 1.00336 18.1306H22.9967C23.0227 18.1306 23.0439 18.1518 23.0439 18.1778V18.8881Z",\n    fill: "#B5460F"\n  }), /*#__PURE__*/react.createElement("path", {\n    d: "M21.4198 15.8536C21.1562 14.4656 20.5736 13.1279 19.735 11.9851C19.5787 11.7722 19.2795 11.7263 19.0666 11.8825C18.8537 12.0387 18.8078 12.3379 18.964 12.5508C19.7297 13.5941 20.2399 14.7654 20.4804 16.0319C20.5239 16.2612 20.7245 16.4209 20.9495 16.4209C20.9791 16.4209 21.0091 16.4181 21.0392 16.4123C21.2988 16.3632 21.4691 16.1129 21.4198 15.8536Z",\n    fill: "#B5460F"\n  }), /*#__PURE__*/react.createElement("path", {\n    d: "M18.7107 10.8038C18.6075 10.7026 18.5004 10.6023 18.3924 10.5057C18.1958 10.3297 17.8934 10.3463 17.7174 10.543C17.5412 10.7398 17.5579 11.042 17.7547 11.2181C17.852 11.3052 17.9485 11.3956 18.0413 11.4867C18.1344 11.5779 18.2552 11.6233 18.3759 11.6233C18.4999 11.6233 18.6238 11.5754 18.7174 11.4799C18.9023 11.2913 18.8993 10.9886 18.7107 10.8038Z",\n    fill: "#B5460F"\n  })), /*#__PURE__*/react.createElement("defs", null, /*#__PURE__*/react.createElement("clipPath", {\n    id: "clip0_512_2048"\n  }, /*#__PURE__*/react.createElement("rect", {\n    width: "24",\n    height: "24",\n    fill: "white"\n  }))));\n};\n/* harmony default export */ const IngIcon_IngIcon = (IngIcon);\n;// CONCATENATED MODULE: ./src/components/icons/IngIcon/index.ts\n\n;// CONCATENATED MODULE: ./src/store/RecipeStore/RecipeStore.tsx\n\n\n\n\nclass RecipeStore {\n  _status = NotStartedStatus;\n  _recipe = RecipeInit;\n  constructor() {\n    makeObservable(this, {\n      _status: mobx_esm_observable.ref,\n      _recipe: mobx_esm_observable.ref,\n      setStatus: action.bound,\n      setRecipe: action.bound,\n      loadingRecipe: action.bound,\n      recipe: computed,\n      status: computed\n    });\n  }\n  setStatus(newStatus) {\n    this._status = {\n      ...newStatus\n    };\n  }\n  setRecipe(newRecipe) {\n    this._recipe = {\n      ...newRecipe\n    };\n  }\n  loadingRecipe(id) {\n    const url = urlPrefix + \'recipes/\' + id + \'/information?apiKey=\' + apiKey;\n    this.setStatus(LoadingStatus);\n    lib_axios.get(url).then(resp => {\n      this.setStatus(SuccessfulStatus);\n      this.setRecipe(resp.data);\n    }).catch(err => {\n      this.setStatus(errorStatus(err.message));\n    });\n  }\n  get recipe() {\n    return this._recipe;\n  }\n  get status() {\n    return this._status;\n  }\n  destroy() {\n    this._recipe = RecipeInit;\n    this._status = NotStartedStatus;\n  }\n}\n;// CONCATENATED MODULE: ./src/store/RecipeStore/index.ts\n\n;// CONCATENATED MODULE: ./src/App/pages/Recipe/components/PreviewBlock/PreviewBlock.tsx\n\n\n\nconst PreviewBlock = props => {\n  return /*#__PURE__*/react.createElement("div", null, /*#__PURE__*/react.createElement(Text_Text, {\n    view: "p-16"\n  }, props.name), /*#__PURE__*/react.createElement(Text_Text, {\n    weight: "bold",\n    color: "accent",\n    view: "p-16"\n  }, props.children, " ", props.unit));\n};\n/* harmony default export */ const PreviewBlock_PreviewBlock = (/*#__PURE__*/(0,react.memo)(PreviewBlock));\n;// CONCATENATED MODULE: ./src/App/pages/Recipe/components/PreviewBlock/index.ts\n\n// EXTERNAL MODULE: ./node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[0].use[1]!./node_modules/postcss-loader/dist/cjs.js??ruleSet[1].rules[0].use[2]!./node_modules/sass-loader/dist/cjs.js!./src/App/pages/Recipe/components/RecipeNeed/RecipeNeed.module.scss\nvar RecipeNeed_module = __webpack_require__(6820);\n;// CONCATENATED MODULE: ./src/App/pages/Recipe/components/RecipeNeed/RecipeNeed.module.scss\n\n      \n      \n      \n      \n      \n      \n      \n      \n      \n\nvar RecipeNeed_module_options = {};\n\nRecipeNeed_module_options.styleTagTransform = (styleTagTransform_default());\nRecipeNeed_module_options.setAttributes = (setAttributesWithoutAttributes_default());\nRecipeNeed_module_options.insert = insertBySelector_default().bind(null, "head");\nRecipeNeed_module_options.domAPI = (styleDomAPI_default());\nRecipeNeed_module_options.insertStyleElement = (insertStyleElement_default());\n\nvar RecipeNeed_module_update = injectStylesIntoStyleTag_default()(RecipeNeed_module/* default */.A, RecipeNeed_module_options);\n\n\n\n\n       /* harmony default export */ const RecipeNeed_RecipeNeed_module = (RecipeNeed_module/* default */.A && RecipeNeed_module/* default */.A.locals ? RecipeNeed_module/* default */.A.locals : undefined);\n\n;// CONCATENATED MODULE: ./src/App/pages/Recipe/components/RecipeNeed/RecipeNeed.tsx\n\n\n\n\nconst RecipeNeed = props => {\n  return /*#__PURE__*/react.createElement("div", {\n    className: RecipeNeed_RecipeNeed_module["recipe__box__needs__block"]\n  }, /*#__PURE__*/react.createElement(Text_Text, {\n    view: "p-20",\n    weight: "bold"\n  }, props.name), /*#__PURE__*/react.createElement("div", {\n    className: RecipeNeed_RecipeNeed_module["recipe__box__needs__block__elems"]\n  }, props.elements.map((element, index) => {\n    return /*#__PURE__*/react.createElement("div", {\n      key: [element, index].join(\' \')\n    }, props.icon, /*#__PURE__*/react.createElement(Text_Text, {\n      view: "p-16"\n    }, element));\n  })));\n};\n/* harmony default export */ const RecipeNeed_RecipeNeed = (/*#__PURE__*/(0,react.memo)(RecipeNeed));\n;// CONCATENATED MODULE: ./src/App/pages/Recipe/components/RecipeNeed/index.ts\n\n// EXTERNAL MODULE: ./node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[0].use[1]!./node_modules/postcss-loader/dist/cjs.js??ruleSet[1].rules[0].use[2]!./node_modules/sass-loader/dist/cjs.js!./src/App/pages/Recipe/Recipe.module.scss\nvar Recipe_module = __webpack_require__(5308);\n;// CONCATENATED MODULE: ./src/App/pages/Recipe/Recipe.module.scss\n\n      \n      \n      \n      \n      \n      \n      \n      \n      \n\nvar Recipe_module_options = {};\n\nRecipe_module_options.styleTagTransform = (styleTagTransform_default());\nRecipe_module_options.setAttributes = (setAttributesWithoutAttributes_default());\nRecipe_module_options.insert = insertBySelector_default().bind(null, "head");\nRecipe_module_options.domAPI = (styleDomAPI_default());\nRecipe_module_options.insertStyleElement = (insertStyleElement_default());\n\nvar Recipe_module_update = injectStylesIntoStyleTag_default()(Recipe_module/* default */.A, Recipe_module_options);\n\n\n\n\n       /* harmony default export */ const Recipe_Recipe_module = (Recipe_module/* default */.A && Recipe_module/* default */.A.locals ? Recipe_module/* default */.A.locals : undefined);\n\n;// CONCATENATED MODULE: ./src/App/pages/Recipe/Recipe.tsx\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nconst Recipe = () => {\n  const {\n    id\n  } = useParams();\n  const {\n    recipe: recipeObj,\n    status,\n    loadingRecipe\n  } = useLocalStore_useLocalStore(() => new RecipeStore());\n  const navigate = dist_useNavigate();\n  (0,react.useEffect)(() => {\n    loadingRecipe(Number(id));\n  }, [id, loadingRecipe]);\n  const getEquipment = recipeObj => {\n    const uniqEq = new Set();\n    recipeObj.analyzedInstructions[0].steps.forEach(step => {\n      step.equipment.forEach(eq => {\n        uniqEq.add(eq.name);\n      });\n    });\n    return Array.from(uniqEq);\n  };\n  const getIngredients = recipeObj => {\n    return recipeObj.extendedIngredients.map(({\n      amount,\n      unit,\n      name\n    }) => [amount, unit, name].join(\' \'));\n  };\n  return /*#__PURE__*/react.createElement("div", {\n    className: Recipe_Recipe_module["recipe"]\n  }, /*#__PURE__*/react.createElement("div", {\n    className: Recipe_Recipe_module["recipe__header"]\n  }, /*#__PURE__*/react.createElement(ArrowLeftIcon_ArrowLeftIcon, {\n    color: "accent",\n    onClick: () => {\n      navigate(\'/recipes\');\n    }\n  }), /*#__PURE__*/react.createElement(Text_Text, {\n    weight: "bold",\n    view: "title"\n  }, recipeObj.title)), status.statusName === \'ERROR\' ? /*#__PURE__*/react.createElement(ErrorBox_ErrorBox, {\n    errorSlot: /*#__PURE__*/react.createElement(Button_Button, {\n      onClick: () => navigate(\'/recipes\')\n    }, "Go to main page")\n  }, status.statusMessage) : /*#__PURE__*/react.createElement("div", {\n    className: Recipe_Recipe_module["recipe__box"]\n  }, /*#__PURE__*/react.createElement("div", {\n    className: Recipe_Recipe_module["recipe__box__preview"]\n  }, /*#__PURE__*/react.createElement("img", {\n    src: recipeObj.image,\n    alt: "recipe photo"\n  }), /*#__PURE__*/react.createElement("div", {\n    className: Recipe_Recipe_module["recipe__box__preview__info"]\n  }, /*#__PURE__*/react.createElement(PreviewBlock_PreviewBlock, {\n    name: "Preparation",\n    unit: "minutes",\n    key: "Preparation"\n  }, recipeObj.preparationMinutes), /*#__PURE__*/react.createElement(PreviewBlock_PreviewBlock, {\n    name: "Cooking",\n    unit: "minutes",\n    key: "Cooking"\n  }, recipeObj.cookingMinutes), /*#__PURE__*/react.createElement(PreviewBlock_PreviewBlock, {\n    name: "Total",\n    unit: "minutes",\n    key: "Total"\n  }, recipeObj.readyInMinutes), /*#__PURE__*/react.createElement(PreviewBlock_PreviewBlock, {\n    name: "Servings",\n    unit: "servings",\n    key: "Servings"\n  }, recipeObj.servings), /*#__PURE__*/react.createElement(PreviewBlock_PreviewBlock, {\n    name: "Rating",\n    unit: "likes",\n    key: "Rating"\n  }, recipeObj.aggregateLikes))), /*#__PURE__*/react.createElement("div", {\n    className: Recipe_Recipe_module["recipe__box__description"]\n  }, /*#__PURE__*/react.createElement(Text_Text, {\n    view: "p-16"\n  }, /*#__PURE__*/react.createElement("span", {\n    dangerouslySetInnerHTML: {\n      __html: recipeObj.summary\n    }\n  }))), /*#__PURE__*/react.createElement("div", {\n    className: Recipe_Recipe_module["recipe__box__needs"]\n  }, /*#__PURE__*/react.createElement(RecipeNeed_RecipeNeed, {\n    name: "Ingredients",\n    elements: getIngredients(recipeObj),\n    icon: /*#__PURE__*/react.createElement(IngIcon_IngIcon, null)\n  }), /*#__PURE__*/react.createElement("div", {\n    className: Recipe_Recipe_module["recipe__box__needs__line"]\n  }, /*#__PURE__*/react.createElement("div", {\n    className: Recipe_Recipe_module["circle"]\n  }), /*#__PURE__*/react.createElement("div", {\n    className: Recipe_Recipe_module["bottom-line"]\n  })), /*#__PURE__*/react.createElement(RecipeNeed_RecipeNeed, {\n    name: "Equipment",\n    elements: getEquipment(recipeObj),\n    icon: /*#__PURE__*/react.createElement(EqIcon_EqIcon, null)\n  })), /*#__PURE__*/react.createElement("div", {\n    className: Recipe_Recipe_module[\'recipe__box__directions\']\n  }, /*#__PURE__*/react.createElement(Text_Text, {\n    tag: "div",\n    view: "p-20",\n    weight: "bold"\n  }, "Directions"), /*#__PURE__*/react.createElement("div", {\n    className: Recipe_Recipe_module["recipe__box__directions__steps"]\n  }, recipeObj.analyzedInstructions[0].steps.map(elem => {\n    return /*#__PURE__*/react.createElement("div", {\n      key: elem.number\n    }, /*#__PURE__*/react.createElement(Text_Text, {\n      view: "p-16",\n      weight: "bold"\n    }, "Step ", elem.number), /*#__PURE__*/react.createElement(Text_Text, {\n      view: "p-14"\n    }, elem.step));\n  })))));\n};\n/* harmony default export */ const Recipe_Recipe = (observer(Recipe));\n;// CONCATENATED MODULE: ./src/App/pages/Recipe/index.ts\n\n;// CONCATENATED MODULE: ./src/components/icons/TimeIcon/TimeIcon.tsx\n\n\n\nconst TimeIcon = props => {\n  return /*#__PURE__*/react.createElement(Icon_Icon, extends_extends({}, props, {\n    viewBox: "0 0 14 14",\n    width: "14",\n    height: "14"\n  }), /*#__PURE__*/react.createElement("path", {\n    d: "M11.1818 1L13 2.81818M10.8182 10.8182L12.2727 13M2.81818 1L1 2.81818M3.18182 10.8182L1.72727 13M6.81818 3.90909V7.18182H8.63636M12.2727 7C12.2727 9.91207 9.91207 12.2727 7 12.2727C4.08795 12.2727 1.72727 9.91207 1.72727 7C1.72727 4.08796 4.08795 1.72727 7 1.72727C9.91207 1.72727 12.2727 4.08796 12.2727 7Z",\n    stroke: "#B5460F",\n    strokeWidth: "1.5",\n    strokeLinecap: "round",\n    strokeLinejoin: "round"\n  }));\n};\n/* harmony default export */ const TimeIcon_TimeIcon = (TimeIcon);\n;// CONCATENATED MODULE: ./src/components/icons/TimeIcon/index.ts\n\n// EXTERNAL MODULE: ./node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[0].use[1]!./node_modules/postcss-loader/dist/cjs.js??ruleSet[1].rules[0].use[2]!./node_modules/sass-loader/dist/cjs.js!./src/components/RecipeCard/components/RecipeCardCaption/RecipeCardCaption.module.scss\nvar RecipeCardCaption_module = __webpack_require__(9676);\n;// CONCATENATED MODULE: ./src/components/RecipeCard/components/RecipeCardCaption/RecipeCardCaption.module.scss\n\n      \n      \n      \n      \n      \n      \n      \n      \n      \n\nvar RecipeCardCaption_module_options = {};\n\nRecipeCardCaption_module_options.styleTagTransform = (styleTagTransform_default());\nRecipeCardCaption_module_options.setAttributes = (setAttributesWithoutAttributes_default());\nRecipeCardCaption_module_options.insert = insertBySelector_default().bind(null, "head");\nRecipeCardCaption_module_options.domAPI = (styleDomAPI_default());\nRecipeCardCaption_module_options.insertStyleElement = (insertStyleElement_default());\n\nvar RecipeCardCaption_module_update = injectStylesIntoStyleTag_default()(RecipeCardCaption_module/* default */.A, RecipeCardCaption_module_options);\n\n\n\n\n       /* harmony default export */ const RecipeCardCaption_RecipeCardCaption_module = (RecipeCardCaption_module/* default */.A && RecipeCardCaption_module/* default */.A.locals ? RecipeCardCaption_module/* default */.A.locals : undefined);\n\n;// CONCATENATED MODULE: ./src/components/RecipeCard/components/RecipeCardCaption/RecipeCardCaption.tsx\n\n\n\nconst RecipeCardCaption = ({\n  readyInMinutes\n}) => {\n  return /*#__PURE__*/react.createElement("span", {\n    className: RecipeCardCaption_RecipeCardCaption_module["recipe-card-caption"]\n  }, /*#__PURE__*/react.createElement(TimeIcon_TimeIcon, null), /*#__PURE__*/react.createElement("span", null, readyInMinutes, " minutes"));\n};\n/* harmony default export */ const RecipeCardCaption_RecipeCardCaption = (RecipeCardCaption);\n;// CONCATENATED MODULE: ./src/components/RecipeCard/components/RecipeCardCaption/index.ts\n\n;// CONCATENATED MODULE: ./src/components/RecipeCard/RecipeCard.tsx\n\n\n\n\n\n\n\n\nconst RecipeCard = ({\n  mode = \'RECIPES\',\n  recipe\n}) => {\n  const navigate = dist_useNavigate();\n  const {\n    addSavedRecipe,\n    checkRecipeInSaved,\n    deleteRecipe,\n    cards\n  } = LocalStorage_LocalStorage;\n  const [isSaved, setIsSaved] = (0,react.useState)(checkRecipeInSaved(recipe.id));\n  (0,react.useEffect)(() => {\n    setIsSaved(checkRecipeInSaved(recipe.id));\n  }, [cards, checkRecipeInSaved, recipe.id]);\n  const navigateToRecipePage = id => {\n    navigate(\'/recipe/\' + id);\n  };\n  const getButtonWithCallBack = (text, callback) => {\n    return /*#__PURE__*/react.createElement(Button_Button, {\n      onClick: e => {\n        e.stopPropagation();\n        callback();\n      }\n    }, text);\n  };\n  const getButtonInRecipeList = recipe => {\n    if (!isSaved) {\n      return getButtonWithCallBack(\'Save\', () => {\n        addSavedRecipe(recipe);\n      });\n    }\n    return getButtonWithCallBack(\'In saves\', () => {\n      navigate(\'/saved\');\n    });\n  };\n  const getActionSlotByMode = recipe => {\n    switch (mode) {\n      case \'RECIPES\':\n        return getButtonInRecipeList(recipe);\n      case \'SAVED\':\n        return getButtonWithCallBack(\'Delete\', () => {\n          deleteRecipe(recipe.id);\n        });\n    }\n  };\n  return /*#__PURE__*/react.createElement(Card_Card, {\n    image: recipe.image,\n    title: recipe.title,\n    subtitle: recipe.describe,\n    contentSlot: recipe.kcal,\n    onClick: () => {\n      navigateToRecipePage(recipe.id);\n    },\n    captionSlot: /*#__PURE__*/react.createElement(RecipeCardCaption_RecipeCardCaption, {\n      readyInMinutes: recipe.readyInMinutes\n    }),\n    actionSlot: getActionSlotByMode(recipe)\n  });\n};\n/* harmony default export */ const RecipeCard_RecipeCard = (observer(RecipeCard));\n;// CONCATENATED MODULE: ./src/components/RecipeCard/index.ts\n\n;// CONCATENATED MODULE: ./src/store/RecipeListStore/RecipeListStore.tsx\n\n\n\nclass RecipeListStore extends BaseListStore {\n  setResultRequest(newResultList, newTotal) {\n    this._results = normalizeCollection(newResultList.map(recipe => {\n      const recipeKcal = recipe.nutrition.nutrients.filter(obj => obj.name === \'Calories\')[0];\n      const kcalStr = [Math.ceil(recipeKcal.amount), recipeKcal.unit].join(\' \');\n      const describeStr = recipe.nutrition.ingredients.map(ing => ing.name).join(\' + \');\n      return {\n        kcal: kcalStr,\n        describe: describeStr,\n        ...recipe\n      };\n    }), element => element.id);\n    this._total = newTotal;\n  }\n  getUrl(offset, ...other) {\n    const params = {\n      addRecipeNutrition: true,\n      number: pageElementCount,\n      offset: offset\n    };\n    const pathUrl = \'complexSearch?\';\n    const pathParams = Object.entries(params).map(param => param.join(\'=\'));\n    other.forEach(element => {\n      if (element[1] !== null) {\n        if (element[1] !== \'\') {\n          pathParams.push(element.join(\'=\'));\n        }\n      }\n    });\n    pathParams.push([\'apiKey\', apiKey].join(\'=\'));\n    const url = urlPrefix + \'recipes/\' + pathUrl + [...pathParams].join(\'&\');\n    return url;\n  }\n}\n;// CONCATENATED MODULE: ./src/store/RecipeListStore/index.ts\n\n;// CONCATENATED MODULE: ./src/App/pages/Recipes/components/Content/ContentHeader/ContentHeader.tsx\n\n\n\n\nconst ContentHeader = () => {\n  return /*#__PURE__*/react.createElement(Text_Text, {\n    className: styles_customStyles_module[\'text-align-center\'],\n    view: "p-20",\n    tag: "div"\n  }, "Find the perfect food and", \' \', /*#__PURE__*/react.createElement("u", null, "drink ideas"), \' \', "for every occasion, from", \' \', /*#__PURE__*/react.createElement("u", null, "weeknight dinners"), " to", \' \', /*#__PURE__*/react.createElement("u", null, "holiday feasts"), ".");\n};\n/* harmony default export */ const ContentHeader_ContentHeader = (/*#__PURE__*/(0,react.memo)(ContentHeader));\n;// CONCATENATED MODULE: ./src/App/pages/Recipes/components/Content/ContentHeader/index.ts\n\n// EXTERNAL MODULE: ./node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[0].use[1]!./node_modules/postcss-loader/dist/cjs.js??ruleSet[1].rules[0].use[2]!./node_modules/sass-loader/dist/cjs.js!./src/App/pages/Recipes/components/Content/Content.module.scss\nvar Content_module = __webpack_require__(5181);\n;// CONCATENATED MODULE: ./src/App/pages/Recipes/components/Content/Content.module.scss\n\n      \n      \n      \n      \n      \n      \n      \n      \n      \n\nvar Content_module_options = {};\n\nContent_module_options.styleTagTransform = (styleTagTransform_default());\nContent_module_options.setAttributes = (setAttributesWithoutAttributes_default());\nContent_module_options.insert = insertBySelector_default().bind(null, "head");\nContent_module_options.domAPI = (styleDomAPI_default());\nContent_module_options.insertStyleElement = (insertStyleElement_default());\n\nvar Content_module_update = injectStylesIntoStyleTag_default()(Content_module/* default */.A, Content_module_options);\n\n\n\n\n       /* harmony default export */ const Content_Content_module = (Content_module/* default */.A && Content_module/* default */.A.locals ? Content_module/* default */.A.locals : undefined);\n\n;// CONCATENATED MODULE: ./src/App/pages/Recipes/components/Content/Content.tsx\n\n\n\n\n\n\n\n\n\n\n\n\nconst Content = () => {\n  const recipesStore = useLocalStore_useLocalStore(() => new RecipeListStore());\n  (0,react.useEffect)(() => {\n    recipesStore.loadingList(recipesStore.getUrl(SearchParamsStore_SearchParamsStore.getOffset(), SearchParamsStore_SearchParamsStore.getParamPair(\'query\'), SearchParamsStore_SearchParamsStore.getParamPair(\'type\'), ...Object.keys(recipesFilters).map(key => {\n      return SearchParamsStore_SearchParamsStore.getParamPair(key);\n    })));\n  }, [SearchParamsStore_SearchParamsStore.searchParams, recipesStore]);\n  return /*#__PURE__*/react.createElement("div", {\n    className: Content_Content_module["content"]\n  }, /*#__PURE__*/react.createElement(ContentHeader_ContentHeader, null), /*#__PURE__*/react.createElement(ContentFilters_ContentFilters, {\n    categoryTag: "type",\n    categoryOptions: mealTypesOptions,\n    categoryPlaceholder: "Categories",\n    otherFilters: recipesFilters\n  }), /*#__PURE__*/react.createElement(ListShower_ListShower, {\n    status: recipesStore.status,\n    totalCount: recipesStore.total\n  }, recipesStore.results.map(recipe => {\n    return /*#__PURE__*/react.createElement(RecipeCard_RecipeCard, {\n      key: recipe.id,\n      recipe: recipe\n    });\n  })));\n};\n/* harmony default export */ const Content_Content = (observer(Content));\n;// CONCATENATED MODULE: ./src/App/pages/Recipes/components/Content/index.ts\n\n;// CONCATENATED MODULE: ./src/assets/PreviewImage.svg\nconst PreviewImage_namespaceObject = __webpack_require__.p + "efa59303053309290c71.svg";\n// EXTERNAL MODULE: ./node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[0].use[1]!./node_modules/postcss-loader/dist/cjs.js??ruleSet[1].rules[0].use[2]!./node_modules/sass-loader/dist/cjs.js!./src/App/pages/Recipes/components/Preview/Preview.module.scss\nvar Preview_module = __webpack_require__(337);\n;// CONCATENATED MODULE: ./src/App/pages/Recipes/components/Preview/Preview.module.scss\n\n      \n      \n      \n      \n      \n      \n      \n      \n      \n\nvar Preview_module_options = {};\n\nPreview_module_options.styleTagTransform = (styleTagTransform_default());\nPreview_module_options.setAttributes = (setAttributesWithoutAttributes_default());\nPreview_module_options.insert = insertBySelector_default().bind(null, "head");\nPreview_module_options.domAPI = (styleDomAPI_default());\nPreview_module_options.insertStyleElement = (insertStyleElement_default());\n\nvar Preview_module_update = injectStylesIntoStyleTag_default()(Preview_module/* default */.A, Preview_module_options);\n\n\n\n\n       /* harmony default export */ const Preview_Preview_module = (Preview_module/* default */.A && Preview_module/* default */.A.locals ? Preview_module/* default */.A.locals : undefined);\n\n;// CONCATENATED MODULE: ./src/App/pages/Recipes/components/Preview/Preview.tsx\n\n\n\n\nconst Preview = () => {\n  return /*#__PURE__*/react.createElement("div", {\n    className: Preview_Preview_module.preview\n  }, /*#__PURE__*/react.createElement("img", {\n    src: PreviewImage_namespaceObject,\n    alt: "preview"\n  }));\n};\n/* harmony default export */ const Preview_Preview = (/*#__PURE__*/(0,react.memo)(Preview));\n;// CONCATENATED MODULE: ./src/App/pages/Recipes/components/Preview/index.ts\n\n// EXTERNAL MODULE: ./node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[0].use[1]!./node_modules/postcss-loader/dist/cjs.js??ruleSet[1].rules[0].use[2]!./node_modules/sass-loader/dist/cjs.js!./src/App/pages/Recipes/Recipes.module.scss\nvar Recipes_module = __webpack_require__(7726);\n;// CONCATENATED MODULE: ./src/App/pages/Recipes/Recipes.module.scss\n\n      \n      \n      \n      \n      \n      \n      \n      \n      \n\nvar Recipes_module_options = {};\n\nRecipes_module_options.styleTagTransform = (styleTagTransform_default());\nRecipes_module_options.setAttributes = (setAttributesWithoutAttributes_default());\nRecipes_module_options.insert = insertBySelector_default().bind(null, "head");\nRecipes_module_options.domAPI = (styleDomAPI_default());\nRecipes_module_options.insertStyleElement = (insertStyleElement_default());\n\nvar Recipes_module_update = injectStylesIntoStyleTag_default()(Recipes_module/* default */.A, Recipes_module_options);\n\n\n\n\n       /* harmony default export */ const Recipes_Recipes_module = (Recipes_module/* default */.A && Recipes_module/* default */.A.locals ? Recipes_module/* default */.A.locals : undefined);\n\n;// CONCATENATED MODULE: ./src/App/pages/Recipes/Recipes.tsx\n\n\n\n\nconst Recipes = () => {\n  return /*#__PURE__*/react.createElement("div", {\n    className: Recipes_Recipes_module.recipes\n  }, /*#__PURE__*/react.createElement(Preview_Preview, null), /*#__PURE__*/react.createElement(Content_Content, null));\n};\n/* harmony default export */ const Recipes_Recipes = (Recipes);\n;// CONCATENATED MODULE: ./src/App/pages/Recipes/index.ts\n\n;// CONCATENATED MODULE: ./src/App/pages/Saved/Saved.tsx\n\n\n\n\n\n\n\nconst Saved = () => {\n  const {\n    cards\n  } = LocalStorage_LocalStorage;\n  return /*#__PURE__*/react.createElement(PageTemplate_PageTemplate, {\n    headerName: "Saved"\n  }, /*#__PURE__*/react.createElement(ListShower_ListShower, {\n    status: SuccessfulStatus\n  }, cards.map(recipe => {\n    return /*#__PURE__*/react.createElement(RecipeCard_RecipeCard, {\n      key: recipe.id,\n      mode: "SAVED",\n      recipe: recipe\n    });\n  })));\n};\n/* harmony default export */ const Saved_Saved = (observer(Saved));\n;// CONCATENATED MODULE: ./src/App/pages/Saved/index.ts\n\n// EXTERNAL MODULE: ./node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[0].use[1]!./node_modules/postcss-loader/dist/cjs.js??ruleSet[1].rules[0].use[2]!./node_modules/sass-loader/dist/cjs.js!./src/App/pages/User/User.module.scss\nvar User_module = __webpack_require__(8674);\n;// CONCATENATED MODULE: ./src/App/pages/User/User.module.scss\n\n      \n      \n      \n      \n      \n      \n      \n      \n      \n\nvar User_module_options = {};\n\nUser_module_options.styleTagTransform = (styleTagTransform_default());\nUser_module_options.setAttributes = (setAttributesWithoutAttributes_default());\nUser_module_options.insert = insertBySelector_default().bind(null, "head");\nUser_module_options.domAPI = (styleDomAPI_default());\nUser_module_options.insertStyleElement = (insertStyleElement_default());\n\nvar User_module_update = injectStylesIntoStyleTag_default()(User_module/* default */.A, User_module_options);\n\n\n\n\n       /* harmony default export */ const User_User_module = (User_module/* default */.A && User_module/* default */.A.locals ? User_module/* default */.A.locals : undefined);\n\n;// CONCATENATED MODULE: ./src/App/pages/User/User.tsx\n\n\n\n\n\n\n\n\nconst User = () => {\n  const {\n    user,\n    userStatus,\n    logout\n  } = UserStore_UserStore;\n  const navigate = dist_useNavigate();\n  (0,react.useEffect)(() => {\n    if (userStatus === \'none\') {\n      navigate(\'/login\');\n    }\n  }, [userStatus, navigate]);\n  return /*#__PURE__*/react.createElement("div", {\n    className: User_User_module["user-page"]\n  }, /*#__PURE__*/react.createElement(Text_Text, {\n    view: "title"\n  }, "User Page"), /*#__PURE__*/react.createElement("div", {\n    className: User_User_module["user-page__info"]\n  }, Object.entries(user).map(([key, value]) => {\n    return /*#__PURE__*/react.createElement("div", {\n      className: User_User_module["user-page__info__unit"],\n      key: key\n    }, /*#__PURE__*/react.createElement(Text_Text, {\n      weight: "bold",\n      view: "p-16"\n    }, key, ":"), /*#__PURE__*/react.createElement(Text_Text, {\n      view: "p-16"\n    }, value));\n  })), /*#__PURE__*/react.createElement(Button_Button, {\n    className: User_User_module["user-page__logout"],\n    onClick: () => {\n      logout();\n    }\n  }, "Logout"));\n};\n/* harmony default export */ const User_User = (observer(User));\n;// CONCATENATED MODULE: ./src/App/pages/User/index.ts\n\n;// CONCATENATED MODULE: ./src/App/App.tsx\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nconst App = () => {\n  (0,react.useEffect)(() => {\n    UserStore_UserStore.getCookies();\n    return () => {\n      LocalStorage_LocalStorage.destroy();\n      UserStore_UserStore.destroy();\n      SearchParamsStore_SearchParamsStore.destroy();\n    };\n  }, []);\n  return /*#__PURE__*/react.createElement(HashRouter, {\n    basename: "/"\n  }, /*#__PURE__*/react.createElement(Routes, null, /*#__PURE__*/react.createElement(Route, {\n    path: "/",\n    element: /*#__PURE__*/react.createElement(Main_Main, null)\n  }, /*#__PURE__*/react.createElement(Route, {\n    path: "/recipes",\n    element: /*#__PURE__*/react.createElement(Recipes_Recipes, null)\n  }), /*#__PURE__*/react.createElement(Route, {\n    path: "/",\n    element: /*#__PURE__*/react.createElement(Recipes_Recipes, null)\n  }), /*#__PURE__*/react.createElement(Route, {\n    path: "/recipe/:id",\n    element: /*#__PURE__*/react.createElement(Recipe_Recipe, null)\n  }), /*#__PURE__*/react.createElement(Route, {\n    path: "/ingredients",\n    element: /*#__PURE__*/react.createElement(Ingredients_Ingredients, null)\n  }), /*#__PURE__*/react.createElement(Route, {\n    path: "/products",\n    element: /*#__PURE__*/react.createElement(Products_Products, null)\n  }), /*#__PURE__*/react.createElement(Route, {\n    path: "/menuItems",\n    element: /*#__PURE__*/react.createElement(MenuItems_MenuItems, null)\n  }), /*#__PURE__*/react.createElement(Route, {\n    path: "/saved",\n    element: /*#__PURE__*/react.createElement(Saved_Saved, null)\n  }), /*#__PURE__*/react.createElement(Route, {\n    path: "/login",\n    element: /*#__PURE__*/react.createElement(Login_Login, null)\n  }), /*#__PURE__*/react.createElement(Route, {\n    path: "/user",\n    element: /*#__PURE__*/react.createElement(User_User, null)\n  }), /*#__PURE__*/react.createElement(Route, {\n    path: "/planning",\n    element: /*#__PURE__*/react.createElement(MealPlanning_MealPlanning, null)\n  }), /*#__PURE__*/react.createElement(Route, {\n    path: "*",\n    element: /*#__PURE__*/react.createElement(Navigate, {\n      to: "/recipes",\n      replace: true\n    })\n  }))));\n};\n/* harmony default export */ const App_App = (observer(App));\n;// CONCATENATED MODULE: ./src/App/index.ts\n\n;// CONCATENATED MODULE: ./src/config/configureMobX.ts\n\nconfigure({\n  useProxies: "ifavailable",\n  computedRequiresReaction: true,\n  reactionRequiresObservable: true,\n  observableRequiresReaction: true\n});\n// EXTERNAL MODULE: ./node_modules/css-loader/dist/cjs.js!./node_modules/postcss-loader/dist/cjs.js??ruleSet[1].rules[1].use[2]!./node_modules/sass-loader/dist/cjs.js!./src/styles/Roboto/fonts.css\nvar fonts = __webpack_require__(8111);\n;// CONCATENATED MODULE: ./src/styles/Roboto/fonts.css\n\n      \n      \n      \n      \n      \n      \n      \n      \n      \n\nvar fonts_options = {};\n\nfonts_options.styleTagTransform = (styleTagTransform_default());\nfonts_options.setAttributes = (setAttributesWithoutAttributes_default());\nfonts_options.insert = insertBySelector_default().bind(null, "head");\nfonts_options.domAPI = (styleDomAPI_default());\nfonts_options.insertStyleElement = (insertStyleElement_default());\n\nvar fonts_update = injectStylesIntoStyleTag_default()(fonts/* default */.A, fonts_options);\n\n\n\n\n       /* harmony default export */ const Roboto_fonts = (fonts/* default */.A && fonts/* default */.A.locals ? fonts/* default */.A.locals : undefined);\n\n;// CONCATENATED MODULE: ./src/index.tsx\n\n\n\n\n\n\n(0,client/* createRoot */.H)(document.getElementById(\'root\')).render( /*#__PURE__*/react.createElement(react.StrictMode, null, /*#__PURE__*/react.createElement(App_App, null)));\nif (false) {}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///6986\n')},8111:(module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   A: () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(963);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(9089);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(6492);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2__);\n// Imports\n\n\n\nvar ___CSS_LOADER_URL_IMPORT_0___ = new URL(/* asset import */ __webpack_require__(499), __webpack_require__.b);\nvar ___CSS_LOADER_URL_IMPORT_1___ = new URL(/* asset import */ __webpack_require__(7664), __webpack_require__.b);\nvar ___CSS_LOADER_URL_IMPORT_2___ = new URL(/* asset import */ __webpack_require__(8336), __webpack_require__.b);\nvar ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));\nvar ___CSS_LOADER_URL_REPLACEMENT_0___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_0___);\nvar ___CSS_LOADER_URL_REPLACEMENT_1___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_1___);\nvar ___CSS_LOADER_URL_REPLACEMENT_2___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_2___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, `@font-face{font-family:"Roboto";src:url(${___CSS_LOADER_URL_REPLACEMENT_0___}) format("woff2");font-weight:400;font-style:normal;font-display:swap}@font-face{font-family:"Roboto";src:url(${___CSS_LOADER_URL_REPLACEMENT_1___}) format("woff2");font-weight:500;font-style:normal;font-display:swap}@font-face{font-family:"Roboto";src:url(${___CSS_LOADER_URL_REPLACEMENT_2___}) format("woff2");font-weight:700;font-style:normal;font-display:swap}`, "",{"version":3,"sources":["webpack://./src/styles/Roboto/fonts.css"],"names":[],"mappings":"AAAA,WACE,oBAAA,CACA,2DAAA,CACA,eAAA,CACA,iBAAA,CACA,iBAAA,CAGF,WACE,oBAAA,CACA,2DAAA,CACA,eAAA,CACA,iBAAA,CACA,iBAAA,CAGF,WACE,oBAAA,CACA,2DAAA,CACA,eAAA,CACA,iBAAA,CACA,iBAAA","sourcesContent":["@font-face {\\r\\n  font-family: \'Roboto\';\\r\\n  src: url(\'Roboto-Regular.woff2\') format(\'woff2\'),;\\r\\n  font-weight: 400;\\r\\n  font-style: normal;\\r\\n  font-display: swap;\\r\\n}\\r\\n\\r\\n@font-face {\\r\\n  font-family: \'Roboto\';\\r\\n  src: url(\'Roboto-Medium.woff2\') format(\'woff2\'),;\\r\\n  font-weight: 500;\\r\\n  font-style: normal;\\r\\n  font-display: swap;\\r\\n}\\r\\n\\r\\n@font-face {\\r\\n  font-family: \'Roboto\';\\r\\n  src: url(\'Roboto-Bold.woff2\') format(\'woff2\'),;\\r\\n  font-weight: 700;\\r\\n  font-style: normal;\\r\\n  font-display: swap;\\r\\n}\\r\\n"],"sourceRoot":""}]);\n// Exports\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiODExMS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBQTtBQUNnSDtBQUNqQjtBQUNPO0FBQ3RHLDRDQUE0QyxrRUFBdUM7QUFDbkYsNENBQTRDLG1FQUFzQztBQUNsRiw0Q0FBNEMsbUVBQW9DO0FBQ2hGLDhCQUE4QixtRkFBMkIsQ0FBQyw0RkFBcUM7QUFDL0YseUNBQXlDLHNGQUErQjtBQUN4RSx5Q0FBeUMsc0ZBQStCO0FBQ3hFLHlDQUF5QyxzRkFBK0I7QUFDeEU7QUFDQSxxREFBcUQscUJBQXFCLFVBQVUsbUNBQW1DLGtCQUFrQixnQkFBZ0Isa0JBQWtCLGtCQUFrQixXQUFXLHFCQUFxQixVQUFVLG1DQUFtQyxrQkFBa0IsZ0JBQWdCLGtCQUFrQixrQkFBa0IsV0FBVyxxQkFBcUIsVUFBVSxtQ0FBbUMsa0JBQWtCLGdCQUFnQixrQkFBa0Isa0JBQWtCLE9BQU8sMFNBQTBTLDRCQUE0Qix3REFBd0QsdUJBQXVCLHlCQUF5Qix5QkFBeUIsS0FBSyxvQkFBb0IsNEJBQTRCLHVEQUF1RCx1QkFBdUIseUJBQXlCLHlCQUF5QixLQUFLLG9CQUFvQiw0QkFBNEIscURBQXFELHVCQUF1Qix5QkFBeUIseUJBQXlCLEtBQUssdUJBQXVCO0FBQ3J6QztBQUNBLGlFQUFlLHVCQUF1QixFQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vMjAyNC1rdHNzdHVkaW8taG9tZXdvcmtzLy4vc3JjL3N0eWxlcy9Sb2JvdG8vZm9udHMuY3NzPzdlODciXSwic291cmNlc0NvbnRlbnQiOlsiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9HRVRfVVJMX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2dldFVybC5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF8wX19fID0gbmV3IFVSTChcIlJvYm90by1SZWd1bGFyLndvZmYyXCIsIGltcG9ydC5tZXRhLnVybCk7XG52YXIgX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzFfX18gPSBuZXcgVVJMKFwiUm9ib3RvLU1lZGl1bS53b2ZmMlwiLCBpbXBvcnQubWV0YS51cmwpO1xudmFyIF9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF8yX19fID0gbmV3IFVSTChcIlJvYm90by1Cb2xkLndvZmYyXCIsIGltcG9ydC5tZXRhLnVybCk7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG52YXIgX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfMF9fXyA9IF9fX0NTU19MT0FERVJfR0VUX1VSTF9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzBfX18pO1xudmFyIF9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzFfX18gPSBfX19DU1NfTE9BREVSX0dFVF9VUkxfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF8xX19fKTtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF8yX19fID0gX19fQ1NTX0xPQURFUl9HRVRfVVJMX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfMl9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgYEBmb250LWZhY2V7Zm9udC1mYW1pbHk6XCJSb2JvdG9cIjtzcmM6dXJsKCR7X19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfMF9fX30pIGZvcm1hdChcIndvZmYyXCIpO2ZvbnQtd2VpZ2h0OjQwMDtmb250LXN0eWxlOm5vcm1hbDtmb250LWRpc3BsYXk6c3dhcH1AZm9udC1mYWNle2ZvbnQtZmFtaWx5OlwiUm9ib3RvXCI7c3JjOnVybCgke19fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzFfX199KSBmb3JtYXQoXCJ3b2ZmMlwiKTtmb250LXdlaWdodDo1MDA7Zm9udC1zdHlsZTpub3JtYWw7Zm9udC1kaXNwbGF5OnN3YXB9QGZvbnQtZmFjZXtmb250LWZhbWlseTpcIlJvYm90b1wiO3NyYzp1cmwoJHtfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF8yX19ffSkgZm9ybWF0KFwid29mZjJcIik7Zm9udC13ZWlnaHQ6NzAwO2ZvbnQtc3R5bGU6bm9ybWFsO2ZvbnQtZGlzcGxheTpzd2FwfWAsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vc3JjL3N0eWxlcy9Sb2JvdG8vZm9udHMuY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUFBLFdBQ0Usb0JBQUEsQ0FDQSwyREFBQSxDQUNBLGVBQUEsQ0FDQSxpQkFBQSxDQUNBLGlCQUFBLENBR0YsV0FDRSxvQkFBQSxDQUNBLDJEQUFBLENBQ0EsZUFBQSxDQUNBLGlCQUFBLENBQ0EsaUJBQUEsQ0FHRixXQUNFLG9CQUFBLENBQ0EsMkRBQUEsQ0FDQSxlQUFBLENBQ0EsaUJBQUEsQ0FDQSxpQkFBQVwiLFwic291cmNlc0NvbnRlbnRcIjpbXCJAZm9udC1mYWNlIHtcXHJcXG4gIGZvbnQtZmFtaWx5OiAnUm9ib3RvJztcXHJcXG4gIHNyYzogdXJsKCdSb2JvdG8tUmVndWxhci53b2ZmMicpIGZvcm1hdCgnd29mZjInKSw7XFxyXFxuICBmb250LXdlaWdodDogNDAwO1xcclxcbiAgZm9udC1zdHlsZTogbm9ybWFsO1xcclxcbiAgZm9udC1kaXNwbGF5OiBzd2FwO1xcclxcbn1cXHJcXG5cXHJcXG5AZm9udC1mYWNlIHtcXHJcXG4gIGZvbnQtZmFtaWx5OiAnUm9ib3RvJztcXHJcXG4gIHNyYzogdXJsKCdSb2JvdG8tTWVkaXVtLndvZmYyJykgZm9ybWF0KCd3b2ZmMicpLDtcXHJcXG4gIGZvbnQtd2VpZ2h0OiA1MDA7XFxyXFxuICBmb250LXN0eWxlOiBub3JtYWw7XFxyXFxuICBmb250LWRpc3BsYXk6IHN3YXA7XFxyXFxufVxcclxcblxcclxcbkBmb250LWZhY2Uge1xcclxcbiAgZm9udC1mYW1pbHk6ICdSb2JvdG8nO1xcclxcbiAgc3JjOiB1cmwoJ1JvYm90by1Cb2xkLndvZmYyJykgZm9ybWF0KCd3b2ZmMicpLDtcXHJcXG4gIGZvbnQtd2VpZ2h0OiA3MDA7XFxyXFxuICBmb250LXN0eWxlOiBub3JtYWw7XFxyXFxuICBmb250LWRpc3BsYXk6IHN3YXA7XFxyXFxufVxcclxcblwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///8111\n')},1592:(module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   A: () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(963);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(9089);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _node_modules_css_loader_dist_cjs_js_Roboto_fonts_css__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(3898);\n// Imports\n\n\n\nvar ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));\n___CSS_LOADER_EXPORT___.i(_node_modules_css_loader_dist_cjs_js_Roboto_fonts_css__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .A);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, `html,body{font-family:"Roboto";margin:0;padding:0}*{box-sizing:border-box}* a{text-decoration:underline;color:#000}* a:active,* a:link,* a:visited,* a:hover{color:#000}h1,h2,h3,h4,h5,h6,p,blockquote,figure,pre{margin:0}`, "",{"version":3,"sources":["webpack://./src/styles/styles.scss"],"names":[],"mappings":"AAEA,UACE,oBAAA,CACA,QAAA,CACA,SAAA,CAGF,EACE,qBAAA,CAEA,IACE,yBAAA,CACA,UAAA,CAGF,0CACE,UAAA,CAIJ,0CAUE,QAAA","sourcesContent":["@import \'./Roboto/fonts.css\';\\r\\n\\r\\nhtml, body {\\r\\n  font-family: \'Roboto\';\\r\\n  margin: 0;\\r\\n  padding: 0;\\r\\n}\\r\\n\\r\\n* {\\r\\n  box-sizing: border-box;\\r\\n\\r\\n  a {\\r\\n    text-decoration: underline;\\r\\n    color: black;\\r\\n  }\\r\\n  \\r\\n  a:active, a:link, a:visited, a:hover {  \\r\\n    color: black;   \\r\\n  }\\r\\n}\\r\\n\\r\\nh1,\\r\\nh2,\\r\\nh3,\\r\\nh4,\\r\\nh5,\\r\\nh6,\\r\\np,\\r\\nblockquote,\\r\\nfigure,\\r\\npre {\\r\\n  margin: 0;\\r\\n}"],"sourceRoot":""}]);\n// Exports\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTU5Mi5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFBO0FBQzZHO0FBQ2pCO0FBQ21CO0FBQy9HLDhCQUE4QixtRkFBMkIsQ0FBQyw0RkFBcUM7QUFDL0YsMEJBQTBCLHNHQUFpQztBQUMzRDtBQUNBLG9EQUFvRCxxQkFBcUIsU0FBUyxVQUFVLEVBQUUsc0JBQXNCLElBQUksMEJBQTBCLFdBQVcsMENBQTBDLFdBQVcsMENBQTBDLFNBQVMsT0FBTyxtUEFBbVAsb0JBQW9CLDRCQUE0QixnQkFBZ0IsaUJBQWlCLEtBQUssV0FBVyw2QkFBNkIsYUFBYSxtQ0FBbUMscUJBQXFCLE9BQU8sb0RBQW9ELHdCQUF3QixPQUFPLEtBQUssdUZBQXVGLGdCQUFnQixLQUFLLG1CQUFtQjtBQUNoNkI7QUFDQSxpRUFBZSx1QkFBdUIsRUFBQyIsInNvdXJjZXMiOlsid2VicGFjazovLzIwMjQta3Rzc3R1ZGlvLWhvbWV3b3Jrcy8uL3NyYy9zdHlsZXMvc3R5bGVzLnNjc3M/YzAyNyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FUX1JVTEVfSU1QT1JUXzBfX18gZnJvbSBcIi0hLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9Sb2JvdG8vZm9udHMuY3NzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5pKF9fX0NTU19MT0FERVJfQVRfUlVMRV9JTVBPUlRfMF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgYGh0bWwsYm9keXtmb250LWZhbWlseTpcIlJvYm90b1wiO21hcmdpbjowO3BhZGRpbmc6MH0qe2JveC1zaXppbmc6Ym9yZGVyLWJveH0qIGF7dGV4dC1kZWNvcmF0aW9uOnVuZGVybGluZTtjb2xvcjojMDAwfSogYTphY3RpdmUsKiBhOmxpbmssKiBhOnZpc2l0ZWQsKiBhOmhvdmVye2NvbG9yOiMwMDB9aDEsaDIsaDMsaDQsaDUsaDYscCxibG9ja3F1b3RlLGZpZ3VyZSxwcmV7bWFyZ2luOjB9YCwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9zcmMvc3R5bGVzL3N0eWxlcy5zY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUVBLFVBQ0Usb0JBQUEsQ0FDQSxRQUFBLENBQ0EsU0FBQSxDQUdGLEVBQ0UscUJBQUEsQ0FFQSxJQUNFLHlCQUFBLENBQ0EsVUFBQSxDQUdGLDBDQUNFLFVBQUEsQ0FJSiwwQ0FVRSxRQUFBXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIkBpbXBvcnQgJy4vUm9ib3RvL2ZvbnRzLmNzcyc7XFxyXFxuXFxyXFxuaHRtbCwgYm9keSB7XFxyXFxuICBmb250LWZhbWlseTogJ1JvYm90byc7XFxyXFxuICBtYXJnaW46IDA7XFxyXFxuICBwYWRkaW5nOiAwO1xcclxcbn1cXHJcXG5cXHJcXG4qIHtcXHJcXG4gIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XFxyXFxuXFxyXFxuICBhIHtcXHJcXG4gICAgdGV4dC1kZWNvcmF0aW9uOiB1bmRlcmxpbmU7XFxyXFxuICAgIGNvbG9yOiBibGFjaztcXHJcXG4gIH1cXHJcXG4gIFxcclxcbiAgYTphY3RpdmUsIGE6bGluaywgYTp2aXNpdGVkLCBhOmhvdmVyIHsgIFxcclxcbiAgICBjb2xvcjogYmxhY2s7ICAgXFxyXFxuICB9XFxyXFxufVxcclxcblxcclxcbmgxLFxcclxcbmgyLFxcclxcbmgzLFxcclxcbmg0LFxcclxcbmg1LFxcclxcbmg2LFxcclxcbnAsXFxyXFxuYmxvY2txdW90ZSxcXHJcXG5maWd1cmUsXFxyXFxucHJlIHtcXHJcXG4gIG1hcmdpbjogMDtcXHJcXG59XCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///1592\n')},3898:(module,__webpack_exports__,__webpack_require__)=>{"use strict";eval("/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   A: () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(963);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(9089);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(6492);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2__);\n// Imports\n\n\n\nvar ___CSS_LOADER_URL_IMPORT_0___ = new URL(/* asset import */ __webpack_require__(499), __webpack_require__.b);\nvar ___CSS_LOADER_URL_IMPORT_1___ = new URL(/* asset import */ __webpack_require__(7664), __webpack_require__.b);\nvar ___CSS_LOADER_URL_IMPORT_2___ = new URL(/* asset import */ __webpack_require__(8336), __webpack_require__.b);\nvar ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));\nvar ___CSS_LOADER_URL_REPLACEMENT_0___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_0___);\nvar ___CSS_LOADER_URL_REPLACEMENT_1___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_1___);\nvar ___CSS_LOADER_URL_REPLACEMENT_2___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_2___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, `@font-face {\r\n  font-family: 'Roboto';\r\n  src: url(${___CSS_LOADER_URL_REPLACEMENT_0___}) format('woff2'),;\r\n  font-weight: 400;\r\n  font-style: normal;\r\n  font-display: swap;\r\n}\r\n\r\n@font-face {\r\n  font-family: 'Roboto';\r\n  src: url(${___CSS_LOADER_URL_REPLACEMENT_1___}) format('woff2'),;\r\n  font-weight: 500;\r\n  font-style: normal;\r\n  font-display: swap;\r\n}\r\n\r\n@font-face {\r\n  font-family: 'Roboto';\r\n  src: url(${___CSS_LOADER_URL_REPLACEMENT_2___}) format('woff2'),;\r\n  font-weight: 700;\r\n  font-style: normal;\r\n  font-display: swap;\r\n}\r\n`, \"\",{\"version\":3,\"sources\":[\"webpack://./src/styles/Roboto/fonts.css\"],\"names\":[],\"mappings\":\"AAAA;EACE,qBAAqB;EACrB,6DAAiD;EACjD,gBAAgB;EAChB,kBAAkB;EAClB,kBAAkB;AACpB;;AAEA;EACE,qBAAqB;EACrB,6DAAgD;EAChD,gBAAgB;EAChB,kBAAkB;EAClB,kBAAkB;AACpB;;AAEA;EACE,qBAAqB;EACrB,6DAA8C;EAC9C,gBAAgB;EAChB,kBAAkB;EAClB,kBAAkB;AACpB\",\"sourcesContent\":[\"@font-face {\\r\\n  font-family: 'Roboto';\\r\\n  src: url('Roboto-Regular.woff2') format('woff2'),;\\r\\n  font-weight: 400;\\r\\n  font-style: normal;\\r\\n  font-display: swap;\\r\\n}\\r\\n\\r\\n@font-face {\\r\\n  font-family: 'Roboto';\\r\\n  src: url('Roboto-Medium.woff2') format('woff2'),;\\r\\n  font-weight: 500;\\r\\n  font-style: normal;\\r\\n  font-display: swap;\\r\\n}\\r\\n\\r\\n@font-face {\\r\\n  font-family: 'Roboto';\\r\\n  src: url('Roboto-Bold.woff2') format('woff2'),;\\r\\n  font-weight: 700;\\r\\n  font-style: normal;\\r\\n  font-display: swap;\\r\\n}\\r\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzg5OC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBQTtBQUNnSDtBQUNqQjtBQUNPO0FBQ3RHLDRDQUE0QyxrRUFBdUM7QUFDbkYsNENBQTRDLG1FQUFzQztBQUNsRiw0Q0FBNEMsbUVBQW9DO0FBQ2hGLDhCQUE4QixtRkFBMkIsQ0FBQyw0RkFBcUM7QUFDL0YseUNBQXlDLHNGQUErQjtBQUN4RSx5Q0FBeUMsc0ZBQStCO0FBQ3hFLHlDQUF5QyxzRkFBK0I7QUFDeEU7QUFDQTtBQUNBO0FBQ0EsYUFBYSxtQ0FBbUM7QUFDaEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLG1DQUFtQztBQUNoRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsbUNBQW1DO0FBQ2hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTyw4RkFBOEYsWUFBWSxhQUFhLGFBQWEsYUFBYSxhQUFhLE9BQU8sS0FBSyxZQUFZLGFBQWEsYUFBYSxhQUFhLGFBQWEsT0FBTyxLQUFLLFlBQVksYUFBYSxhQUFhLGFBQWEsYUFBYSxzQ0FBc0MsNEJBQTRCLHdEQUF3RCx1QkFBdUIseUJBQXlCLHlCQUF5QixLQUFLLG9CQUFvQiw0QkFBNEIsdURBQXVELHVCQUF1Qix5QkFBeUIseUJBQXlCLEtBQUssb0JBQW9CLDRCQUE0QixxREFBcUQsdUJBQXVCLHlCQUF5Qix5QkFBeUIsS0FBSyx1QkFBdUI7QUFDcDRCO0FBQ0EsaUVBQWUsdUJBQXVCLEVBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8yMDI0LWt0c3N0dWRpby1ob21ld29ya3MvLi9zcmMvc3R5bGVzL1JvYm90by9mb250cy5jc3M/MWRjMCJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0dFVF9VUkxfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvZ2V0VXJsLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzBfX18gPSBuZXcgVVJMKFwiUm9ib3RvLVJlZ3VsYXIud29mZjJcIiwgaW1wb3J0Lm1ldGEudXJsKTtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfMV9fXyA9IG5ldyBVUkwoXCJSb2JvdG8tTWVkaXVtLndvZmYyXCIsIGltcG9ydC5tZXRhLnVybCk7XG52YXIgX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzJfX18gPSBuZXcgVVJMKFwiUm9ib3RvLUJvbGQud29mZjJcIiwgaW1wb3J0Lm1ldGEudXJsKTtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF8wX19fID0gX19fQ1NTX0xPQURFUl9HRVRfVVJMX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfMF9fXyk7XG52YXIgX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfMV9fXyA9IF9fX0NTU19MT0FERVJfR0VUX1VSTF9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzFfX18pO1xudmFyIF9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzJfX18gPSBfX19DU1NfTE9BREVSX0dFVF9VUkxfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF8yX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBgQGZvbnQtZmFjZSB7XHJcbiAgZm9udC1mYW1pbHk6ICdSb2JvdG8nO1xyXG4gIHNyYzogdXJsKCR7X19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfMF9fX30pIGZvcm1hdCgnd29mZjInKSw7XHJcbiAgZm9udC13ZWlnaHQ6IDQwMDtcclxuICBmb250LXN0eWxlOiBub3JtYWw7XHJcbiAgZm9udC1kaXNwbGF5OiBzd2FwO1xyXG59XHJcblxyXG5AZm9udC1mYWNlIHtcclxuICBmb250LWZhbWlseTogJ1JvYm90byc7XHJcbiAgc3JjOiB1cmwoJHtfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF8xX19ffSkgZm9ybWF0KCd3b2ZmMicpLDtcclxuICBmb250LXdlaWdodDogNTAwO1xyXG4gIGZvbnQtc3R5bGU6IG5vcm1hbDtcclxuICBmb250LWRpc3BsYXk6IHN3YXA7XHJcbn1cclxuXHJcbkBmb250LWZhY2Uge1xyXG4gIGZvbnQtZmFtaWx5OiAnUm9ib3RvJztcclxuICBzcmM6IHVybCgke19fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzJfX199KSBmb3JtYXQoJ3dvZmYyJyksO1xyXG4gIGZvbnQtd2VpZ2h0OiA3MDA7XHJcbiAgZm9udC1zdHlsZTogbm9ybWFsO1xyXG4gIGZvbnQtZGlzcGxheTogc3dhcDtcclxufVxyXG5gLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL3NyYy9zdHlsZXMvUm9ib3RvL2ZvbnRzLmNzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFBQTtFQUNFLHFCQUFxQjtFQUNyQiw2REFBaUQ7RUFDakQsZ0JBQWdCO0VBQ2hCLGtCQUFrQjtFQUNsQixrQkFBa0I7QUFDcEI7O0FBRUE7RUFDRSxxQkFBcUI7RUFDckIsNkRBQWdEO0VBQ2hELGdCQUFnQjtFQUNoQixrQkFBa0I7RUFDbEIsa0JBQWtCO0FBQ3BCOztBQUVBO0VBQ0UscUJBQXFCO0VBQ3JCLDZEQUE4QztFQUM5QyxnQkFBZ0I7RUFDaEIsa0JBQWtCO0VBQ2xCLGtCQUFrQjtBQUNwQlwiLFwic291cmNlc0NvbnRlbnRcIjpbXCJAZm9udC1mYWNlIHtcXHJcXG4gIGZvbnQtZmFtaWx5OiAnUm9ib3RvJztcXHJcXG4gIHNyYzogdXJsKCdSb2JvdG8tUmVndWxhci53b2ZmMicpIGZvcm1hdCgnd29mZjInKSw7XFxyXFxuICBmb250LXdlaWdodDogNDAwO1xcclxcbiAgZm9udC1zdHlsZTogbm9ybWFsO1xcclxcbiAgZm9udC1kaXNwbGF5OiBzd2FwO1xcclxcbn1cXHJcXG5cXHJcXG5AZm9udC1mYWNlIHtcXHJcXG4gIGZvbnQtZmFtaWx5OiAnUm9ib3RvJztcXHJcXG4gIHNyYzogdXJsKCdSb2JvdG8tTWVkaXVtLndvZmYyJykgZm9ybWF0KCd3b2ZmMicpLDtcXHJcXG4gIGZvbnQtd2VpZ2h0OiA1MDA7XFxyXFxuICBmb250LXN0eWxlOiBub3JtYWw7XFxyXFxuICBmb250LWRpc3BsYXk6IHN3YXA7XFxyXFxufVxcclxcblxcclxcbkBmb250LWZhY2Uge1xcclxcbiAgZm9udC1mYW1pbHk6ICdSb2JvdG8nO1xcclxcbiAgc3JjOiB1cmwoJ1JvYm90by1Cb2xkLndvZmYyJykgZm9ybWF0KCd3b2ZmMicpLDtcXHJcXG4gIGZvbnQtd2VpZ2h0OiA3MDA7XFxyXFxuICBmb250LXN0eWxlOiBub3JtYWw7XFxyXFxuICBmb250LWRpc3BsYXk6IHN3YXA7XFxyXFxufVxcclxcblwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///3898\n")},4066:(module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   A: () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(963);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(9089);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);\n// Imports\n\n\nvar ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, `.Login-module__login-page{margin:50px 100px 0 100px;display:flex;flex-direction:column;gap:24px;max-width:600px}.Login-module__login-page__form{display:flex;flex-direction:column;gap:12px}.Login-module__login-page__form__unit{display:flex;justify-content:start;gap:6px}.Login-module__login-page>button{width:fit-content}`, "",{"version":3,"sources":["webpack://./src/App/pages/Login/Login.module.scss"],"names":[],"mappings":"AAEA,0BAEI,yBAJgB,CAKhB,YAAA,CACA,qBAAA,CACA,QAAA,CACA,eAAA,CAEA,gCACI,YAAA,CACA,qBAAA,CACA,QAAA,CAEA,sCACI,YAAA,CACA,qBAAA,CACA,OAAA,CAIR,iCACI,iBAAA","sourcesContent":["$login-page-margin: 50px 100px 0 100px;\\r\\n\\r\\n.login-page {\\r\\n\\r\\n    margin: $login-page-margin;\\r\\n    display: flex;\\r\\n    flex-direction: column;\\r\\n    gap: 24px;\\r\\n    max-width: 600px;\\r\\n\\r\\n    &__form {\\r\\n        display: flex;\\r\\n        flex-direction: column;\\r\\n        gap: 12px;\\r\\n\\r\\n        &__unit {\\r\\n            display: flex;\\r\\n            justify-content: start;\\r\\n            gap: 6px;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    > button {\\r\\n        width: fit-content;\\r\\n    }\\r\\n}"],"sourceRoot":""}]);\n// Exports\n___CSS_LOADER_EXPORT___.locals = {\n\t"login-page": `Login-module__login-page`,\n\t"login-page__form": `Login-module__login-page__form`,\n\t"login-page__form__unit": `Login-module__login-page__form__unit`\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDA2Ni5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7QUFDbUg7QUFDakI7QUFDbEcsOEJBQThCLG1GQUEyQixDQUFDLDRGQUFxQztBQUMvRjtBQUNBLG9FQUFvRSwwQkFBMEIsYUFBYSxzQkFBc0IsU0FBUyxnQkFBZ0IsZ0NBQWdDLGFBQWEsc0JBQXNCLFNBQVMsc0NBQXNDLGFBQWEsc0JBQXNCLFFBQVEsaUNBQWlDLGtCQUFrQixPQUFPLHFUQUFxVCxxQkFBcUIsdUNBQXVDLHNCQUFzQiwrQkFBK0Isa0JBQWtCLHlCQUF5QixxQkFBcUIsMEJBQTBCLG1DQUFtQyxzQkFBc0IseUJBQXlCLDhCQUE4Qix1Q0FBdUMseUJBQXlCLGFBQWEsU0FBUyxzQkFBc0IsK0JBQStCLFNBQVMsS0FBSyxtQkFBbUI7QUFDN29DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlFQUFlLHVCQUF1QixFQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vMjAyNC1rdHNzdHVkaW8taG9tZXdvcmtzLy4vc3JjL0FwcC9wYWdlcy9Mb2dpbi9Mb2dpbi5tb2R1bGUuc2Nzcz9lOGVjIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIGAuTG9naW4tbW9kdWxlX19sb2dpbi1wYWdle21hcmdpbjo1MHB4IDEwMHB4IDAgMTAwcHg7ZGlzcGxheTpmbGV4O2ZsZXgtZGlyZWN0aW9uOmNvbHVtbjtnYXA6MjRweDttYXgtd2lkdGg6NjAwcHh9LkxvZ2luLW1vZHVsZV9fbG9naW4tcGFnZV9fZm9ybXtkaXNwbGF5OmZsZXg7ZmxleC1kaXJlY3Rpb246Y29sdW1uO2dhcDoxMnB4fS5Mb2dpbi1tb2R1bGVfX2xvZ2luLXBhZ2VfX2Zvcm1fX3VuaXR7ZGlzcGxheTpmbGV4O2p1c3RpZnktY29udGVudDpzdGFydDtnYXA6NnB4fS5Mb2dpbi1tb2R1bGVfX2xvZ2luLXBhZ2U+YnV0dG9ue3dpZHRoOmZpdC1jb250ZW50fWAsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vc3JjL0FwcC9wYWdlcy9Mb2dpbi9Mb2dpbi5tb2R1bGUuc2Nzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFFQSwwQkFFSSx5QkFKZ0IsQ0FLaEIsWUFBQSxDQUNBLHFCQUFBLENBQ0EsUUFBQSxDQUNBLGVBQUEsQ0FFQSxnQ0FDSSxZQUFBLENBQ0EscUJBQUEsQ0FDQSxRQUFBLENBRUEsc0NBQ0ksWUFBQSxDQUNBLHFCQUFBLENBQ0EsT0FBQSxDQUlSLGlDQUNJLGlCQUFBXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIiRsb2dpbi1wYWdlLW1hcmdpbjogNTBweCAxMDBweCAwIDEwMHB4O1xcclxcblxcclxcbi5sb2dpbi1wYWdlIHtcXHJcXG5cXHJcXG4gICAgbWFyZ2luOiAkbG9naW4tcGFnZS1tYXJnaW47XFxyXFxuICAgIGRpc3BsYXk6IGZsZXg7XFxyXFxuICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxyXFxuICAgIGdhcDogMjRweDtcXHJcXG4gICAgbWF4LXdpZHRoOiA2MDBweDtcXHJcXG5cXHJcXG4gICAgJl9fZm9ybSB7XFxyXFxuICAgICAgICBkaXNwbGF5OiBmbGV4O1xcclxcbiAgICAgICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXHJcXG4gICAgICAgIGdhcDogMTJweDtcXHJcXG5cXHJcXG4gICAgICAgICZfX3VuaXQge1xcclxcbiAgICAgICAgICAgIGRpc3BsYXk6IGZsZXg7XFxyXFxuICAgICAgICAgICAganVzdGlmeS1jb250ZW50OiBzdGFydDtcXHJcXG4gICAgICAgICAgICBnYXA6IDZweDtcXHJcXG4gICAgICAgIH1cXHJcXG4gICAgfVxcclxcblxcclxcbiAgICA+IGJ1dHRvbiB7XFxyXFxuICAgICAgICB3aWR0aDogZml0LWNvbnRlbnQ7XFxyXFxuICAgIH1cXHJcXG59XCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5sb2NhbHMgPSB7XG5cdFwibG9naW4tcGFnZVwiOiBgTG9naW4tbW9kdWxlX19sb2dpbi1wYWdlYCxcblx0XCJsb2dpbi1wYWdlX19mb3JtXCI6IGBMb2dpbi1tb2R1bGVfX2xvZ2luLXBhZ2VfX2Zvcm1gLFxuXHRcImxvZ2luLXBhZ2VfX2Zvcm1fX3VuaXRcIjogYExvZ2luLW1vZHVsZV9fbG9naW4tcGFnZV9fZm9ybV9fdW5pdGBcbn07XG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///4066\n')},8252:(module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   A: () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(963);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(9089);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);\n// Imports\n\n\nvar ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, `.MealPlanning-module__mealplanning-page{display:flex;flex-direction:column;justify-content:center;align-items:center;align-content:center;gap:50px;margin-top:70px}.MealPlanning-module__mealplanning-page button{width:fit-content}.MealPlanning-module__mealplanning-page__form{display:flex;justify-content:center;gap:12px}`, "",{"version":3,"sources":["webpack://./src/App/pages/MealPlanning/MealPlanning.module.scss"],"names":[],"mappings":"AAAA,wCACI,YAAA,CACA,qBAAA,CACA,sBAAA,CACA,kBAAA,CACA,oBAAA,CACA,QAAA,CACA,eAAA,CAEA,+CACI,iBAAA,CAGJ,8CACI,YAAA,CACA,sBAAA,CACA,QAAA","sourcesContent":[".mealplanning-page {\\r\\n    display: flex;\\r\\n    flex-direction: column;\\r\\n    justify-content: center;\\r\\n    align-items: center;\\r\\n    align-content: center;\\r\\n    gap: 50px;\\r\\n    margin-top: 70px;\\r\\n\\r\\n    button {\\r\\n        width: fit-content;\\r\\n    }\\r\\n\\r\\n    &__form {\\r\\n        display: flex;\\r\\n        justify-content: center;\\r\\n        gap: 12px;\\r\\n    }\\r\\n}"],"sourceRoot":""}]);\n// Exports\n___CSS_LOADER_EXPORT___.locals = {\n\t"mealplanning-page": `MealPlanning-module__mealplanning-page`,\n\t"mealplanning-page__form": `MealPlanning-module__mealplanning-page__form`\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiODI1Mi5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7QUFDbUg7QUFDakI7QUFDbEcsOEJBQThCLG1GQUEyQixDQUFDLDRGQUFxQztBQUMvRjtBQUNBLGtGQUFrRixhQUFhLHNCQUFzQix1QkFBdUIsbUJBQW1CLHFCQUFxQixTQUFTLGdCQUFnQiwrQ0FBK0Msa0JBQWtCLDhDQUE4QyxhQUFhLHVCQUF1QixTQUFTLE9BQU8sK1JBQStSLHNCQUFzQiwrQkFBK0IsZ0NBQWdDLDRCQUE0Qiw4QkFBOEIsa0JBQWtCLHlCQUF5QixvQkFBb0IsK0JBQStCLFNBQVMscUJBQXFCLDBCQUEwQixvQ0FBb0Msc0JBQXNCLFNBQVMsS0FBSyxtQkFBbUI7QUFDL2dDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpRUFBZSx1QkFBdUIsRUFBQyIsInNvdXJjZXMiOlsid2VicGFjazovLzIwMjQta3Rzc3R1ZGlvLWhvbWV3b3Jrcy8uL3NyYy9BcHAvcGFnZXMvTWVhbFBsYW5uaW5nL01lYWxQbGFubmluZy5tb2R1bGUuc2Nzcz9iMzg4Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIGAuTWVhbFBsYW5uaW5nLW1vZHVsZV9fbWVhbHBsYW5uaW5nLXBhZ2V7ZGlzcGxheTpmbGV4O2ZsZXgtZGlyZWN0aW9uOmNvbHVtbjtqdXN0aWZ5LWNvbnRlbnQ6Y2VudGVyO2FsaWduLWl0ZW1zOmNlbnRlcjthbGlnbi1jb250ZW50OmNlbnRlcjtnYXA6NTBweDttYXJnaW4tdG9wOjcwcHh9Lk1lYWxQbGFubmluZy1tb2R1bGVfX21lYWxwbGFubmluZy1wYWdlIGJ1dHRvbnt3aWR0aDpmaXQtY29udGVudH0uTWVhbFBsYW5uaW5nLW1vZHVsZV9fbWVhbHBsYW5uaW5nLXBhZ2VfX2Zvcm17ZGlzcGxheTpmbGV4O2p1c3RpZnktY29udGVudDpjZW50ZXI7Z2FwOjEycHh9YCwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9zcmMvQXBwL3BhZ2VzL01lYWxQbGFubmluZy9NZWFsUGxhbm5pbmcubW9kdWxlLnNjc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBQUEsd0NBQ0ksWUFBQSxDQUNBLHFCQUFBLENBQ0Esc0JBQUEsQ0FDQSxrQkFBQSxDQUNBLG9CQUFBLENBQ0EsUUFBQSxDQUNBLGVBQUEsQ0FFQSwrQ0FDSSxpQkFBQSxDQUdKLDhDQUNJLFlBQUEsQ0FDQSxzQkFBQSxDQUNBLFFBQUFcIixcInNvdXJjZXNDb250ZW50XCI6W1wiLm1lYWxwbGFubmluZy1wYWdlIHtcXHJcXG4gICAgZGlzcGxheTogZmxleDtcXHJcXG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXHJcXG4gICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxyXFxuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxyXFxuICAgIGFsaWduLWNvbnRlbnQ6IGNlbnRlcjtcXHJcXG4gICAgZ2FwOiA1MHB4O1xcclxcbiAgICBtYXJnaW4tdG9wOiA3MHB4O1xcclxcblxcclxcbiAgICBidXR0b24ge1xcclxcbiAgICAgICAgd2lkdGg6IGZpdC1jb250ZW50O1xcclxcbiAgICB9XFxyXFxuXFxyXFxuICAgICZfX2Zvcm0ge1xcclxcbiAgICAgICAgZGlzcGxheTogZmxleDtcXHJcXG4gICAgICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xcclxcbiAgICAgICAgZ2FwOiAxMnB4O1xcclxcbiAgICB9XFxyXFxufVwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ubG9jYWxzID0ge1xuXHRcIm1lYWxwbGFubmluZy1wYWdlXCI6IGBNZWFsUGxhbm5pbmctbW9kdWxlX19tZWFscGxhbm5pbmctcGFnZWAsXG5cdFwibWVhbHBsYW5uaW5nLXBhZ2VfX2Zvcm1cIjogYE1lYWxQbGFubmluZy1tb2R1bGVfX21lYWxwbGFubmluZy1wYWdlX19mb3JtYFxufTtcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///8252\n')},1158:(module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   A: () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(963);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(9089);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);\n// Imports\n\n\nvar ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, `.DayInfo-module__day-info{width:100%;text-align:center}.DayInfo-module__day-info__name{padding:6px}.DayInfo-module__day-info__slots{background-color:#fff;padding:6px}.DayInfo-module__day-info__summary{text-align:left;bottom:0;background-color:#afadb5;color:#fff;padding:6px}`, "",{"version":3,"sources":["webpack://./src/App/pages/MealPlanning/components/DayInfo/DayInfo.module.scss","webpack://./src/styles/variables.scss"],"names":[],"mappings":"AAIA,0BAEI,UAAA,CACA,iBAAA,CAEA,gCACI,WARM,CAWV,iCACI,qBCTA,CDUA,WAbM,CAgBV,mCACI,eAAA,CACA,QAAA,CACA,wBCfD,CDgBC,UCjBA,CDkBA,WArBM","sourcesContent":["@use \'styles/variables.scss\' as var;\\r\\n\\r\\n$day-padding: 6px;\\r\\n\\r\\n.day-info {\\r\\n\\r\\n    width: 100%;\\r\\n    text-align: center;\\r\\n\\r\\n    &__name {\\r\\n        padding: $day-padding;\\r\\n    }\\r\\n\\r\\n    &__slots {\\r\\n        background-color: var.$light;\\r\\n        padding: $day-padding;\\r\\n    }\\r\\n\\r\\n    &__summary {\\r\\n        text-align: left;\\r\\n        bottom: 0;\\r\\n        background-color: var.$gray;\\r\\n        color: var.$light;\\r\\n        padding: $day-padding;\\r\\n    }\\r\\n}","$brand: #B5460F;\\r\\n$brand-hover: rgba(181, 70, 15, 0.7);\\r\\n$brand-active: #872D01;\\r\\n\\r\\n$dark: black; \\r\\n$light: white;\\r\\n$gray: #AFADB5;\\r\\n\\r\\n$border-radius: 10px;\\r\\n\\r\\n$space-xl: 24px;\\r\\n$space-l: 20px;\\r\\n$space-m: 16px;\\r\\n$space-s: 14px;\\r\\n$space-xs: 12px;\\r\\n$space-xxs: 8px;"],"sourceRoot":""}]);\n// Exports\n___CSS_LOADER_EXPORT___.locals = {\n\t"day-info": `DayInfo-module__day-info`,\n\t"day-info__name": `DayInfo-module__day-info__name`,\n\t"day-info__slots": `DayInfo-module__day-info__slots`,\n\t"day-info__summary": `DayInfo-module__day-info__summary`\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTE1OC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7QUFDeUg7QUFDakI7QUFDeEcsOEJBQThCLG1GQUEyQixDQUFDLDRGQUFxQztBQUMvRjtBQUNBLG9FQUFvRSxXQUFXLGtCQUFrQixnQ0FBZ0MsWUFBWSxpQ0FBaUMsc0JBQXNCLFlBQVksbUNBQW1DLGdCQUFnQixTQUFTLHlCQUF5QixXQUFXLFlBQVksT0FBTyxtV0FBbVcsMEJBQTBCLG1CQUFtQix3QkFBd0IsMkJBQTJCLHFCQUFxQixrQ0FBa0MsU0FBUyxzQkFBc0IseUNBQXlDLGtDQUFrQyxTQUFTLHdCQUF3Qiw2QkFBNkIsc0JBQXNCLHdDQUF3Qyw4QkFBOEIsa0NBQWtDLFNBQVMsS0FBSyxtQkFBbUIseUNBQXlDLDJCQUEyQixzQkFBc0Isa0JBQWtCLG1CQUFtQiw2QkFBNkIsd0JBQXdCLG1CQUFtQixtQkFBbUIsbUJBQW1CLG9CQUFvQixvQkFBb0IsbUJBQW1CO0FBQzU2QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlFQUFlLHVCQUF1QixFQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vMjAyNC1rdHNzdHVkaW8taG9tZXdvcmtzLy4vc3JjL0FwcC9wYWdlcy9NZWFsUGxhbm5pbmcvY29tcG9uZW50cy9EYXlJbmZvL0RheUluZm8ubW9kdWxlLnNjc3M/ZjRmZiJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBgLkRheUluZm8tbW9kdWxlX19kYXktaW5mb3t3aWR0aDoxMDAlO3RleHQtYWxpZ246Y2VudGVyfS5EYXlJbmZvLW1vZHVsZV9fZGF5LWluZm9fX25hbWV7cGFkZGluZzo2cHh9LkRheUluZm8tbW9kdWxlX19kYXktaW5mb19fc2xvdHN7YmFja2dyb3VuZC1jb2xvcjojZmZmO3BhZGRpbmc6NnB4fS5EYXlJbmZvLW1vZHVsZV9fZGF5LWluZm9fX3N1bW1hcnl7dGV4dC1hbGlnbjpsZWZ0O2JvdHRvbTowO2JhY2tncm91bmQtY29sb3I6I2FmYWRiNTtjb2xvcjojZmZmO3BhZGRpbmc6NnB4fWAsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vc3JjL0FwcC9wYWdlcy9NZWFsUGxhbm5pbmcvY29tcG9uZW50cy9EYXlJbmZvL0RheUluZm8ubW9kdWxlLnNjc3NcIixcIndlYnBhY2s6Ly8uL3NyYy9zdHlsZXMvdmFyaWFibGVzLnNjc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBSUEsMEJBRUksVUFBQSxDQUNBLGlCQUFBLENBRUEsZ0NBQ0ksV0FSTSxDQVdWLGlDQUNJLHFCQ1RBLENEVUEsV0FiTSxDQWdCVixtQ0FDSSxlQUFBLENBQ0EsUUFBQSxDQUNBLHdCQ2ZELENEZ0JDLFVDakJBLENEa0JBLFdBckJNXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIkB1c2UgJ3N0eWxlcy92YXJpYWJsZXMuc2NzcycgYXMgdmFyO1xcclxcblxcclxcbiRkYXktcGFkZGluZzogNnB4O1xcclxcblxcclxcbi5kYXktaW5mbyB7XFxyXFxuXFxyXFxuICAgIHdpZHRoOiAxMDAlO1xcclxcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxyXFxuXFxyXFxuICAgICZfX25hbWUge1xcclxcbiAgICAgICAgcGFkZGluZzogJGRheS1wYWRkaW5nO1xcclxcbiAgICB9XFxyXFxuXFxyXFxuICAgICZfX3Nsb3RzIHtcXHJcXG4gICAgICAgIGJhY2tncm91bmQtY29sb3I6IHZhci4kbGlnaHQ7XFxyXFxuICAgICAgICBwYWRkaW5nOiAkZGF5LXBhZGRpbmc7XFxyXFxuICAgIH1cXHJcXG5cXHJcXG4gICAgJl9fc3VtbWFyeSB7XFxyXFxuICAgICAgICB0ZXh0LWFsaWduOiBsZWZ0O1xcclxcbiAgICAgICAgYm90dG9tOiAwO1xcclxcbiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogdmFyLiRncmF5O1xcclxcbiAgICAgICAgY29sb3I6IHZhci4kbGlnaHQ7XFxyXFxuICAgICAgICBwYWRkaW5nOiAkZGF5LXBhZGRpbmc7XFxyXFxuICAgIH1cXHJcXG59XCIsXCIkYnJhbmQ6ICNCNTQ2MEY7XFxyXFxuJGJyYW5kLWhvdmVyOiByZ2JhKDE4MSwgNzAsIDE1LCAwLjcpO1xcclxcbiRicmFuZC1hY3RpdmU6ICM4NzJEMDE7XFxyXFxuXFxyXFxuJGRhcms6IGJsYWNrOyBcXHJcXG4kbGlnaHQ6IHdoaXRlO1xcclxcbiRncmF5OiAjQUZBREI1O1xcclxcblxcclxcbiRib3JkZXItcmFkaXVzOiAxMHB4O1xcclxcblxcclxcbiRzcGFjZS14bDogMjRweDtcXHJcXG4kc3BhY2UtbDogMjBweDtcXHJcXG4kc3BhY2UtbTogMTZweDtcXHJcXG4kc3BhY2UtczogMTRweDtcXHJcXG4kc3BhY2UteHM6IDEycHg7XFxyXFxuJHNwYWNlLXh4czogOHB4O1wiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ubG9jYWxzID0ge1xuXHRcImRheS1pbmZvXCI6IGBEYXlJbmZvLW1vZHVsZV9fZGF5LWluZm9gLFxuXHRcImRheS1pbmZvX19uYW1lXCI6IGBEYXlJbmZvLW1vZHVsZV9fZGF5LWluZm9fX25hbWVgLFxuXHRcImRheS1pbmZvX19zbG90c1wiOiBgRGF5SW5mby1tb2R1bGVfX2RheS1pbmZvX19zbG90c2AsXG5cdFwiZGF5LWluZm9fX3N1bW1hcnlcIjogYERheUluZm8tbW9kdWxlX19kYXktaW5mb19fc3VtbWFyeWBcbn07XG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///1158\n')},3748:(module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   A: () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(963);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(9089);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);\n// Imports\n\n\nvar ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, `.SlotInfo-module__slot-info{background-color:#fff;padding:6px}.SlotInfo-module__slot-info__item img{max-width:100%}.SlotInfo-module__slot-info__item__ingr img{max-width:100%}`, "",{"version":3,"sources":["webpack://./src/App/pages/MealPlanning/components/SlotInfo/SlotInfo.module.scss","webpack://./src/styles/variables.scss"],"names":[],"mappings":"AAEA,4BACI,qBCEI,CDDJ,WAAA,CAGI,sCACI,cAAA,CAIA,4CACI,cAAA","sourcesContent":["@use \'styles/variables.scss\' as var;\\r\\n\\r\\n.slot-info {\\r\\n    background-color: var.$light;\\r\\n    padding: 6px;\\r\\n\\r\\n    &__item {\\r\\n        img {\\r\\n            max-width: 100%;\\r\\n        }\\r\\n\\r\\n        &__ingr {\\r\\n            img {\\r\\n                max-width: 100%;\\r\\n            }\\r\\n        }    \\r\\n    }\\r\\n}","$brand: #B5460F;\\r\\n$brand-hover: rgba(181, 70, 15, 0.7);\\r\\n$brand-active: #872D01;\\r\\n\\r\\n$dark: black; \\r\\n$light: white;\\r\\n$gray: #AFADB5;\\r\\n\\r\\n$border-radius: 10px;\\r\\n\\r\\n$space-xl: 24px;\\r\\n$space-l: 20px;\\r\\n$space-m: 16px;\\r\\n$space-s: 14px;\\r\\n$space-xs: 12px;\\r\\n$space-xxs: 8px;"],"sourceRoot":""}]);\n// Exports\n___CSS_LOADER_EXPORT___.locals = {\n\t"slot-info": `SlotInfo-module__slot-info`,\n\t"slot-info__item": `SlotInfo-module__slot-info__item`,\n\t"slot-info__item__ingr": `SlotInfo-module__slot-info__item__ingr`\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzc0OC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7QUFDeUg7QUFDakI7QUFDeEcsOEJBQThCLG1GQUEyQixDQUFDLDRGQUFxQztBQUMvRjtBQUNBLHNFQUFzRSxzQkFBc0IsWUFBWSxzQ0FBc0MsZUFBZSw0Q0FBNEMsZUFBZSxPQUFPLDRSQUE0UixvQkFBb0IscUNBQXFDLHFCQUFxQixxQkFBcUIsaUJBQWlCLGdDQUFnQyxhQUFhLHlCQUF5QixxQkFBcUIsb0NBQW9DLGlCQUFpQixpQkFBaUIsU0FBUyxLQUFLLG1CQUFtQix5Q0FBeUMsMkJBQTJCLHNCQUFzQixrQkFBa0IsbUJBQW1CLDZCQUE2Qix3QkFBd0IsbUJBQW1CLG1CQUFtQixtQkFBbUIsb0JBQW9CLG9CQUFvQixtQkFBbUI7QUFDemxDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlFQUFlLHVCQUF1QixFQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vMjAyNC1rdHNzdHVkaW8taG9tZXdvcmtzLy4vc3JjL0FwcC9wYWdlcy9NZWFsUGxhbm5pbmcvY29tcG9uZW50cy9TbG90SW5mby9TbG90SW5mby5tb2R1bGUuc2Nzcz8zODBjIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIGAuU2xvdEluZm8tbW9kdWxlX19zbG90LWluZm97YmFja2dyb3VuZC1jb2xvcjojZmZmO3BhZGRpbmc6NnB4fS5TbG90SW5mby1tb2R1bGVfX3Nsb3QtaW5mb19faXRlbSBpbWd7bWF4LXdpZHRoOjEwMCV9LlNsb3RJbmZvLW1vZHVsZV9fc2xvdC1pbmZvX19pdGVtX19pbmdyIGltZ3ttYXgtd2lkdGg6MTAwJX1gLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL3NyYy9BcHAvcGFnZXMvTWVhbFBsYW5uaW5nL2NvbXBvbmVudHMvU2xvdEluZm8vU2xvdEluZm8ubW9kdWxlLnNjc3NcIixcIndlYnBhY2s6Ly8uL3NyYy9zdHlsZXMvdmFyaWFibGVzLnNjc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBRUEsNEJBQ0kscUJDRUksQ0RESixXQUFBLENBR0ksc0NBQ0ksY0FBQSxDQUlBLDRDQUNJLGNBQUFcIixcInNvdXJjZXNDb250ZW50XCI6W1wiQHVzZSAnc3R5bGVzL3ZhcmlhYmxlcy5zY3NzJyBhcyB2YXI7XFxyXFxuXFxyXFxuLnNsb3QtaW5mbyB7XFxyXFxuICAgIGJhY2tncm91bmQtY29sb3I6IHZhci4kbGlnaHQ7XFxyXFxuICAgIHBhZGRpbmc6IDZweDtcXHJcXG5cXHJcXG4gICAgJl9faXRlbSB7XFxyXFxuICAgICAgICBpbWcge1xcclxcbiAgICAgICAgICAgIG1heC13aWR0aDogMTAwJTtcXHJcXG4gICAgICAgIH1cXHJcXG5cXHJcXG4gICAgICAgICZfX2luZ3Ige1xcclxcbiAgICAgICAgICAgIGltZyB7XFxyXFxuICAgICAgICAgICAgICAgIG1heC13aWR0aDogMTAwJTtcXHJcXG4gICAgICAgICAgICB9XFxyXFxuICAgICAgICB9ICAgIFxcclxcbiAgICB9XFxyXFxufVwiLFwiJGJyYW5kOiAjQjU0NjBGO1xcclxcbiRicmFuZC1ob3ZlcjogcmdiYSgxODEsIDcwLCAxNSwgMC43KTtcXHJcXG4kYnJhbmQtYWN0aXZlOiAjODcyRDAxO1xcclxcblxcclxcbiRkYXJrOiBibGFjazsgXFxyXFxuJGxpZ2h0OiB3aGl0ZTtcXHJcXG4kZ3JheTogI0FGQURCNTtcXHJcXG5cXHJcXG4kYm9yZGVyLXJhZGl1czogMTBweDtcXHJcXG5cXHJcXG4kc3BhY2UteGw6IDI0cHg7XFxyXFxuJHNwYWNlLWw6IDIwcHg7XFxyXFxuJHNwYWNlLW06IDE2cHg7XFxyXFxuJHNwYWNlLXM6IDE0cHg7XFxyXFxuJHNwYWNlLXhzOiAxMnB4O1xcclxcbiRzcGFjZS14eHM6IDhweDtcIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLmxvY2FscyA9IHtcblx0XCJzbG90LWluZm9cIjogYFNsb3RJbmZvLW1vZHVsZV9fc2xvdC1pbmZvYCxcblx0XCJzbG90LWluZm9fX2l0ZW1cIjogYFNsb3RJbmZvLW1vZHVsZV9fc2xvdC1pbmZvX19pdGVtYCxcblx0XCJzbG90LWluZm9fX2l0ZW1fX2luZ3JcIjogYFNsb3RJbmZvLW1vZHVsZV9fc2xvdC1pbmZvX19pdGVtX19pbmdyYFxufTtcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///3748\n')},2040:(module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   A: () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(963);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(9089);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);\n// Imports\n\n\nvar ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, `.WeekInfo-module__week-info{width:80%;background-color:#fff;position:relative;margin:0 auto;margin-bottom:50px}.WeekInfo-module__week-info__header{width:100%;background-color:#b5460f;padding:8px;text-align:center;color:#fff}.WeekInfo-module__week-info__days{width:100%;display:grid;grid-template-rows:repeat(4, min-content) 100px;grid-auto-flow:column;grid-auto-rows:max-content;align-items:stretch;border-left:1px dashed #b5460f;border-top:1px dashed #b5460f}.WeekInfo-module__week-info__days>div{border-right:1px dashed #b5460f;border-bottom:1px dashed #b5460f}`, "",{"version":3,"sources":["webpack://./src/App/pages/MealPlanning/components/WeekInfo/WeekInfo.module.scss","webpack://./src/styles/variables.scss"],"names":[],"mappings":"AAIA,4BACI,SAAA,CACA,qBCDI,CDEJ,iBAAA,CACA,aAAA,CACA,kBAAA,CAEA,oCACI,UAAA,CACA,wBCbA,CDcA,WAAA,CACA,iBAAA,CACA,UCXA,CDcJ,kCACI,UAAA,CACA,YAAA,CACA,+CAAA,CACA,qBAAA,CACA,0BAAA,CACA,mBAAA,CAEA,8BAzBC,CA0BD,6BA1BC,CA4BD,sCACI,+BA7BH,CA8BG,gCA9BH","sourcesContent":["@use \'styles/variables.scss\' as var;\\r\\n\\r\\n$border: 1px dashed var.$brand;\\r\\n\\r\\n.week-info {\\r\\n    width: 80%;\\r\\n    background-color: var.$light;\\r\\n    position: relative;\\r\\n    margin: 0 auto;\\r\\n    margin-bottom: 50px;\\r\\n\\r\\n    &__header {\\r\\n        width: 100%;\\r\\n        background-color: var.$brand;\\r\\n        padding: 8px;\\r\\n        text-align: center;\\r\\n        color: var.$light;\\r\\n    }\\r\\n\\r\\n    &__days {\\r\\n        width: 100%;\\r\\n        display: grid;\\r\\n        grid-template-rows: repeat(4, min-content) 100px;\\r\\n        grid-auto-flow: column;\\r\\n        grid-auto-rows: max-content;\\r\\n        align-items: stretch;\\r\\n\\r\\n        border-left: $border;\\r\\n        border-top: $border;\\r\\n\\r\\n        > div {\\r\\n            border-right: $border;\\r\\n            border-bottom: $border;\\r\\n        }\\r\\n    }\\r\\n}","$brand: #B5460F;\\r\\n$brand-hover: rgba(181, 70, 15, 0.7);\\r\\n$brand-active: #872D01;\\r\\n\\r\\n$dark: black; \\r\\n$light: white;\\r\\n$gray: #AFADB5;\\r\\n\\r\\n$border-radius: 10px;\\r\\n\\r\\n$space-xl: 24px;\\r\\n$space-l: 20px;\\r\\n$space-m: 16px;\\r\\n$space-s: 14px;\\r\\n$space-xs: 12px;\\r\\n$space-xxs: 8px;"],"sourceRoot":""}]);\n// Exports\n___CSS_LOADER_EXPORT___.locals = {\n\t"week-info": `WeekInfo-module__week-info`,\n\t"week-info__header": `WeekInfo-module__week-info__header`,\n\t"week-info__days": `WeekInfo-module__week-info__days`\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjA0MC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7QUFDeUg7QUFDakI7QUFDeEcsOEJBQThCLG1GQUEyQixDQUFDLDRGQUFxQztBQUMvRjtBQUNBLHNFQUFzRSxVQUFVLHNCQUFzQixrQkFBa0IsY0FBYyxtQkFBbUIsb0NBQW9DLFdBQVcseUJBQXlCLFlBQVksa0JBQWtCLFdBQVcsa0NBQWtDLFdBQVcsYUFBYSxnREFBZ0Qsc0JBQXNCLDJCQUEyQixvQkFBb0IsK0JBQStCLDhCQUE4QixzQ0FBc0MsZ0NBQWdDLGlDQUFpQyxPQUFPLHFkQUFxZCx1Q0FBdUMsb0JBQW9CLG1CQUFtQixxQ0FBcUMsMkJBQTJCLHVCQUF1Qiw0QkFBNEIsdUJBQXVCLHdCQUF3Qix5Q0FBeUMseUJBQXlCLCtCQUErQiw4QkFBOEIsU0FBUyxxQkFBcUIsd0JBQXdCLDBCQUEwQiw2REFBNkQsbUNBQW1DLHdDQUF3QyxpQ0FBaUMscUNBQXFDLGdDQUFnQyx1QkFBdUIsc0NBQXNDLHVDQUF1QyxhQUFhLFNBQVMsS0FBSyxtQkFBbUIseUNBQXlDLDJCQUEyQixzQkFBc0Isa0JBQWtCLG1CQUFtQiw2QkFBNkIsd0JBQXdCLG1CQUFtQixtQkFBbUIsbUJBQW1CLG9CQUFvQixvQkFBb0IsbUJBQW1CO0FBQ2hxRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpRUFBZSx1QkFBdUIsRUFBQyIsInNvdXJjZXMiOlsid2VicGFjazovLzIwMjQta3Rzc3R1ZGlvLWhvbWV3b3Jrcy8uL3NyYy9BcHAvcGFnZXMvTWVhbFBsYW5uaW5nL2NvbXBvbmVudHMvV2Vla0luZm8vV2Vla0luZm8ubW9kdWxlLnNjc3M/OGY3ZSJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBgLldlZWtJbmZvLW1vZHVsZV9fd2Vlay1pbmZve3dpZHRoOjgwJTtiYWNrZ3JvdW5kLWNvbG9yOiNmZmY7cG9zaXRpb246cmVsYXRpdmU7bWFyZ2luOjAgYXV0bzttYXJnaW4tYm90dG9tOjUwcHh9LldlZWtJbmZvLW1vZHVsZV9fd2Vlay1pbmZvX19oZWFkZXJ7d2lkdGg6MTAwJTtiYWNrZ3JvdW5kLWNvbG9yOiNiNTQ2MGY7cGFkZGluZzo4cHg7dGV4dC1hbGlnbjpjZW50ZXI7Y29sb3I6I2ZmZn0uV2Vla0luZm8tbW9kdWxlX193ZWVrLWluZm9fX2RheXN7d2lkdGg6MTAwJTtkaXNwbGF5OmdyaWQ7Z3JpZC10ZW1wbGF0ZS1yb3dzOnJlcGVhdCg0LCBtaW4tY29udGVudCkgMTAwcHg7Z3JpZC1hdXRvLWZsb3c6Y29sdW1uO2dyaWQtYXV0by1yb3dzOm1heC1jb250ZW50O2FsaWduLWl0ZW1zOnN0cmV0Y2g7Ym9yZGVyLWxlZnQ6MXB4IGRhc2hlZCAjYjU0NjBmO2JvcmRlci10b3A6MXB4IGRhc2hlZCAjYjU0NjBmfS5XZWVrSW5mby1tb2R1bGVfX3dlZWstaW5mb19fZGF5cz5kaXZ7Ym9yZGVyLXJpZ2h0OjFweCBkYXNoZWQgI2I1NDYwZjtib3JkZXItYm90dG9tOjFweCBkYXNoZWQgI2I1NDYwZn1gLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL3NyYy9BcHAvcGFnZXMvTWVhbFBsYW5uaW5nL2NvbXBvbmVudHMvV2Vla0luZm8vV2Vla0luZm8ubW9kdWxlLnNjc3NcIixcIndlYnBhY2s6Ly8uL3NyYy9zdHlsZXMvdmFyaWFibGVzLnNjc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBSUEsNEJBQ0ksU0FBQSxDQUNBLHFCQ0RJLENERUosaUJBQUEsQ0FDQSxhQUFBLENBQ0Esa0JBQUEsQ0FFQSxvQ0FDSSxVQUFBLENBQ0Esd0JDYkEsQ0RjQSxXQUFBLENBQ0EsaUJBQUEsQ0FDQSxVQ1hBLENEY0osa0NBQ0ksVUFBQSxDQUNBLFlBQUEsQ0FDQSwrQ0FBQSxDQUNBLHFCQUFBLENBQ0EsMEJBQUEsQ0FDQSxtQkFBQSxDQUVBLDhCQXpCQyxDQTBCRCw2QkExQkMsQ0E0QkQsc0NBQ0ksK0JBN0JILENBOEJHLGdDQTlCSFwiLFwic291cmNlc0NvbnRlbnRcIjpbXCJAdXNlICdzdHlsZXMvdmFyaWFibGVzLnNjc3MnIGFzIHZhcjtcXHJcXG5cXHJcXG4kYm9yZGVyOiAxcHggZGFzaGVkIHZhci4kYnJhbmQ7XFxyXFxuXFxyXFxuLndlZWstaW5mbyB7XFxyXFxuICAgIHdpZHRoOiA4MCU7XFxyXFxuICAgIGJhY2tncm91bmQtY29sb3I6IHZhci4kbGlnaHQ7XFxyXFxuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcXHJcXG4gICAgbWFyZ2luOiAwIGF1dG87XFxyXFxuICAgIG1hcmdpbi1ib3R0b206IDUwcHg7XFxyXFxuXFxyXFxuICAgICZfX2hlYWRlciB7XFxyXFxuICAgICAgICB3aWR0aDogMTAwJTtcXHJcXG4gICAgICAgIGJhY2tncm91bmQtY29sb3I6IHZhci4kYnJhbmQ7XFxyXFxuICAgICAgICBwYWRkaW5nOiA4cHg7XFxyXFxuICAgICAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxyXFxuICAgICAgICBjb2xvcjogdmFyLiRsaWdodDtcXHJcXG4gICAgfVxcclxcblxcclxcbiAgICAmX19kYXlzIHtcXHJcXG4gICAgICAgIHdpZHRoOiAxMDAlO1xcclxcbiAgICAgICAgZGlzcGxheTogZ3JpZDtcXHJcXG4gICAgICAgIGdyaWQtdGVtcGxhdGUtcm93czogcmVwZWF0KDQsIG1pbi1jb250ZW50KSAxMDBweDtcXHJcXG4gICAgICAgIGdyaWQtYXV0by1mbG93OiBjb2x1bW47XFxyXFxuICAgICAgICBncmlkLWF1dG8tcm93czogbWF4LWNvbnRlbnQ7XFxyXFxuICAgICAgICBhbGlnbi1pdGVtczogc3RyZXRjaDtcXHJcXG5cXHJcXG4gICAgICAgIGJvcmRlci1sZWZ0OiAkYm9yZGVyO1xcclxcbiAgICAgICAgYm9yZGVyLXRvcDogJGJvcmRlcjtcXHJcXG5cXHJcXG4gICAgICAgID4gZGl2IHtcXHJcXG4gICAgICAgICAgICBib3JkZXItcmlnaHQ6ICRib3JkZXI7XFxyXFxuICAgICAgICAgICAgYm9yZGVyLWJvdHRvbTogJGJvcmRlcjtcXHJcXG4gICAgICAgIH1cXHJcXG4gICAgfVxcclxcbn1cIixcIiRicmFuZDogI0I1NDYwRjtcXHJcXG4kYnJhbmQtaG92ZXI6IHJnYmEoMTgxLCA3MCwgMTUsIDAuNyk7XFxyXFxuJGJyYW5kLWFjdGl2ZTogIzg3MkQwMTtcXHJcXG5cXHJcXG4kZGFyazogYmxhY2s7IFxcclxcbiRsaWdodDogd2hpdGU7XFxyXFxuJGdyYXk6ICNBRkFEQjU7XFxyXFxuXFxyXFxuJGJvcmRlci1yYWRpdXM6IDEwcHg7XFxyXFxuXFxyXFxuJHNwYWNlLXhsOiAyNHB4O1xcclxcbiRzcGFjZS1sOiAyMHB4O1xcclxcbiRzcGFjZS1tOiAxNnB4O1xcclxcbiRzcGFjZS1zOiAxNHB4O1xcclxcbiRzcGFjZS14czogMTJweDtcXHJcXG4kc3BhY2UteHhzOiA4cHg7XCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5sb2NhbHMgPSB7XG5cdFwid2Vlay1pbmZvXCI6IGBXZWVrSW5mby1tb2R1bGVfX3dlZWstaW5mb2AsXG5cdFwid2Vlay1pbmZvX19oZWFkZXJcIjogYFdlZWtJbmZvLW1vZHVsZV9fd2Vlay1pbmZvX19oZWFkZXJgLFxuXHRcIndlZWstaW5mb19fZGF5c1wiOiBgV2Vla0luZm8tbW9kdWxlX193ZWVrLWluZm9fX2RheXNgXG59O1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///2040\n')},5308:(module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   A: () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(963);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(9089);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);\n// Imports\n\n\nvar ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, `.Recipe-module__recipe{margin:0 100px 0 100px}.Recipe-module__recipe__header{margin-top:49px;display:flex;align-content:center;align-items:center;gap:16px;margin-bottom:37px}.Recipe-module__recipe__box{display:flex;flex-direction:column;gap:48px}.Recipe-module__recipe__box__description{width:100%;border-radius:10px;padding:36px;background-color:rgba(181,70,15,.33)}.Recipe-module__recipe__box__needs{width:100%;display:flex;align-items:flex-start;justify-content:space-between}.Recipe-module__recipe__box__needs__line{display:flex;flex-direction:column;justify-content:center;align-items:center;grid-template-rows:7px 1fr;gap:5px;height:100%;margin-left:53px;margin-right:53px;position:relative}.Recipe-module__recipe__box__needs__line .Recipe-module__circle{width:7px;height:7px;border-radius:50%;background-color:#b5460f}.Recipe-module__recipe__box__needs__line .Recipe-module__bottom-line{width:1px;height:231px;background-color:#b5460f}.Recipe-module__recipe__box__directions{display:flex;flex-direction:column;gap:24px;width:50%;padding-bottom:28px}.Recipe-module__recipe__box__directions__steps{display:flex;flex-direction:column;gap:16px}.Recipe-module__recipe__box__directions__steps div{display:flex;flex-direction:column;gap:4px}.Recipe-module__recipe__box__preview{display:flex;align-items:center;align-content:center;gap:166px}.Recipe-module__recipe__box__preview img{border-radius:10px;width:448px;height:298px;background-color:#afadb5;object-fit:cover}.Recipe-module__recipe__box__preview__info{width:100%;display:grid;grid-template-columns:repeat(3, 1fr);column-gap:100px;row-gap:50px}`, "",{"version":3,"sources":["webpack://./src/App/pages/Recipe/Recipe.module.scss","webpack://./src/styles/variables.scss"],"names":[],"mappings":"AAIA,uBACI,sBAHY,CAKZ,+BACI,eAAA,CACA,YAAA,CACA,oBAAA,CACA,kBAAA,CACA,QAAA,CACA,kBAAA,CAGJ,4BACI,YAAA,CACA,qBAAA,CACA,QAAA,CAEA,yCACI,UAAA,CACA,kBCfI,CDgBJ,YAAA,CACA,oCAAA,CAGJ,mCACI,UAAA,CACA,YAAA,CACA,sBAAA,CACA,6BAAA,CAEA,yCACI,YAAA,CACA,qBAAA,CACA,sBAAA,CACA,kBAAA,CACA,0BAAA,CACA,OAAA,CACA,WAAA,CACA,gBAAA,CACA,iBAAA,CAEA,iBAAA,CAEA,gEACI,SAAA,CACA,UAAA,CACA,iBAAA,CACA,wBCnDZ,CDsDQ,qEACI,SAAA,CACA,YAAA,CACA,wBCzDZ,CD8DA,wCACI,YAAA,CACA,qBAAA,CACA,QAAA,CACA,SAAA,CACA,mBAAA,CAEA,+CACI,YAAA,CACA,qBAAA,CACA,QAAA,CAEA,mDACI,YAAA,CACA,qBAAA,CACA,OAAA,CAKZ,qCACI,YAAA,CACA,kBAAA,CACA,oBAAA,CACA,SAAA,CAEA,yCACI,kBCjFA,CDkFA,WAAA,CACA,YAAA,CACA,wBCtFT,CDuFS,gBAAA,CAGJ,2CACI,UAAA,CACA,YAAA,CACA,oCAAA,CACA,gBAAA,CACA,YAAA","sourcesContent":["@use \'styles/variables.scss\' as var;\\r\\n\\r\\n$recipe-margin: 0 100px 0 100px;\\r\\n\\r\\n.recipe {\\r\\n    margin: $recipe-margin;\\r\\n\\r\\n    &__header {\\r\\n        margin-top: 49px;\\r\\n        display: flex;\\r\\n        align-content: center;\\r\\n        align-items: center;\\r\\n        gap: 16px;\\r\\n        margin-bottom: 37px;\\r\\n    }\\r\\n\\r\\n    &__box {\\r\\n        display: flex;\\r\\n        flex-direction: column;\\r\\n        gap: 48px;\\r\\n\\r\\n        &__description {\\r\\n            width: 100%;\\r\\n            border-radius: var.$border-radius;\\r\\n            padding: 36px;\\r\\n            background-color: rgba(181, 70, 15, 0.33);\\r\\n        }\\r\\n\\r\\n        &__needs {\\r\\n            width: 100%;\\r\\n            display: flex;\\r\\n            align-items: flex-start;\\r\\n            justify-content: space-between;\\r\\n    \\r\\n            &__line {\\r\\n                display: flex;\\r\\n                flex-direction: column;\\r\\n                justify-content: center;\\r\\n                align-items: center;\\r\\n                grid-template-rows: 7px 1fr;\\r\\n                gap: 5px;\\r\\n                height: 100%;\\r\\n                margin-left: 53px;\\r\\n                margin-right: 53px;\\r\\n    \\r\\n                position: relative;\\r\\n    \\r\\n                .circle {\\r\\n                    width: 7px;\\r\\n                    height: 7px;\\r\\n                    border-radius: 50%;\\r\\n                    background-color: var.$brand;\\r\\n                }\\r\\n    \\r\\n                .bottom-line {\\r\\n                    width: 1px;\\r\\n                    height: 231px;\\r\\n                    background-color: var.$brand;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    \\r\\n        &__directions {\\r\\n            display: flex;\\r\\n            flex-direction: column;\\r\\n            gap: 24px;\\r\\n            width: 50%;\\r\\n            padding-bottom: 28px;\\r\\n    \\r\\n            &__steps {\\r\\n                display: flex;\\r\\n                flex-direction: column;\\r\\n                gap: 16px;\\r\\n                \\r\\n                div {\\r\\n                    display: flex;\\r\\n                    flex-direction: column;\\r\\n                    gap: 4px;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    \\r\\n        &__preview {\\r\\n            display: flex;\\r\\n            align-items: center;\\r\\n            align-content: center;\\r\\n            gap: 166px;\\r\\n    \\r\\n            img {\\r\\n                border-radius: var.$border-radius;\\r\\n                width: 448px;\\r\\n                height: 298px;\\r\\n                background-color: var.$gray;\\r\\n                object-fit: cover;\\r\\n            }\\r\\n    \\r\\n            &__info {\\r\\n                width: 100%;\\r\\n                display: grid;\\r\\n                grid-template-columns: repeat(3, 1fr);\\r\\n                column-gap: 100px;\\r\\n                row-gap: 50px;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}","$brand: #B5460F;\\r\\n$brand-hover: rgba(181, 70, 15, 0.7);\\r\\n$brand-active: #872D01;\\r\\n\\r\\n$dark: black; \\r\\n$light: white;\\r\\n$gray: #AFADB5;\\r\\n\\r\\n$border-radius: 10px;\\r\\n\\r\\n$space-xl: 24px;\\r\\n$space-l: 20px;\\r\\n$space-m: 16px;\\r\\n$space-s: 14px;\\r\\n$space-xs: 12px;\\r\\n$space-xxs: 8px;"],"sourceRoot":""}]);\n// Exports\n___CSS_LOADER_EXPORT___.locals = {\n\t"recipe": `Recipe-module__recipe`,\n\t"recipe__header": `Recipe-module__recipe__header`,\n\t"recipe__box": `Recipe-module__recipe__box`,\n\t"recipe__box__description": `Recipe-module__recipe__box__description`,\n\t"recipe__box__needs": `Recipe-module__recipe__box__needs`,\n\t"recipe__box__needs__line": `Recipe-module__recipe__box__needs__line`,\n\t"circle": `Recipe-module__circle`,\n\t"bottom-line": `Recipe-module__bottom-line`,\n\t"recipe__box__directions": `Recipe-module__recipe__box__directions`,\n\t"recipe__box__directions__steps": `Recipe-module__recipe__box__directions__steps`,\n\t"recipe__box__preview": `Recipe-module__recipe__box__preview`,\n\t"recipe__box__preview__info": `Recipe-module__recipe__box__preview__info`\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///5308\n')},6820:(module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   A: () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(963);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(9089);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);\n// Imports\n\n\nvar ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, `.RecipeNeed-module__recipe__box__needs__block{display:flex;flex-direction:column;gap:24px;width:100%}.RecipeNeed-module__recipe__box__needs__block__elems{display:grid;row-gap:8px;column-gap:29px;grid-template-columns:1fr 1fr;justify-content:start}.RecipeNeed-module__recipe__box__needs__block__elems div{display:flex;gap:8px;align-items:center;align-content:center}`, "",{"version":3,"sources":["webpack://./src/App/pages/Recipe/components/RecipeNeed/RecipeNeed.module.scss"],"names":[],"mappings":"AAAA,8CACI,YAAA,CACA,qBAAA,CACA,QAAA,CACA,UAAA,CAEA,qDACI,YAAA,CACA,WAAA,CACA,eAAA,CACA,6BAAA,CACA,qBAAA,CAEA,yDACI,YAAA,CACA,OAAA,CACA,kBAAA,CACA,oBAAA","sourcesContent":[".recipe__box__needs__block {\\r\\n    display: flex;\\r\\n    flex-direction: column;\\r\\n    gap: 24px;\\r\\n    width: 100%;\\r\\n\\r\\n    &__elems {\\r\\n        display: grid;\\r\\n        row-gap: 8px;\\r\\n        column-gap: 29px;\\r\\n        grid-template-columns: 1fr 1fr;\\r\\n        justify-content: start;\\r\\n\\r\\n        div {\\r\\n            display: flex;\\r\\n            gap: 8px;\\r\\n            align-items: center;\\r\\n            align-content: center;\\r\\n        }\\r\\n    }\\r\\n}"],"sourceRoot":""}]);\n// Exports\n___CSS_LOADER_EXPORT___.locals = {\n\t"recipe__box__needs__block": `RecipeNeed-module__recipe__box__needs__block`,\n\t"recipe__box__needs__block__elems": `RecipeNeed-module__recipe__box__needs__block__elems`\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNjgyMC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7QUFDeUg7QUFDakI7QUFDeEcsOEJBQThCLG1GQUEyQixDQUFDLDRGQUFxQztBQUMvRjtBQUNBLHdGQUF3RixhQUFhLHNCQUFzQixTQUFTLFdBQVcscURBQXFELGFBQWEsWUFBWSxnQkFBZ0IsOEJBQThCLHNCQUFzQix5REFBeUQsYUFBYSxRQUFRLG1CQUFtQixxQkFBcUIsT0FBTyx3VUFBd1Usc0JBQXNCLCtCQUErQixrQkFBa0Isb0JBQW9CLHNCQUFzQiwwQkFBMEIseUJBQXlCLDZCQUE2QiwyQ0FBMkMsbUNBQW1DLHFCQUFxQiw4QkFBOEIseUJBQXlCLG9DQUFvQyxzQ0FBc0MsYUFBYSxTQUFTLEtBQUssbUJBQW1CO0FBQ3pyQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUVBQWUsdUJBQXVCLEVBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8yMDI0LWt0c3N0dWRpby1ob21ld29ya3MvLi9zcmMvQXBwL3BhZ2VzL1JlY2lwZS9jb21wb25lbnRzL1JlY2lwZU5lZWQvUmVjaXBlTmVlZC5tb2R1bGUuc2Nzcz8wNTUyIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIGAuUmVjaXBlTmVlZC1tb2R1bGVfX3JlY2lwZV9fYm94X19uZWVkc19fYmxvY2t7ZGlzcGxheTpmbGV4O2ZsZXgtZGlyZWN0aW9uOmNvbHVtbjtnYXA6MjRweDt3aWR0aDoxMDAlfS5SZWNpcGVOZWVkLW1vZHVsZV9fcmVjaXBlX19ib3hfX25lZWRzX19ibG9ja19fZWxlbXN7ZGlzcGxheTpncmlkO3Jvdy1nYXA6OHB4O2NvbHVtbi1nYXA6MjlweDtncmlkLXRlbXBsYXRlLWNvbHVtbnM6MWZyIDFmcjtqdXN0aWZ5LWNvbnRlbnQ6c3RhcnR9LlJlY2lwZU5lZWQtbW9kdWxlX19yZWNpcGVfX2JveF9fbmVlZHNfX2Jsb2NrX19lbGVtcyBkaXZ7ZGlzcGxheTpmbGV4O2dhcDo4cHg7YWxpZ24taXRlbXM6Y2VudGVyO2FsaWduLWNvbnRlbnQ6Y2VudGVyfWAsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vc3JjL0FwcC9wYWdlcy9SZWNpcGUvY29tcG9uZW50cy9SZWNpcGVOZWVkL1JlY2lwZU5lZWQubW9kdWxlLnNjc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBQUEsOENBQ0ksWUFBQSxDQUNBLHFCQUFBLENBQ0EsUUFBQSxDQUNBLFVBQUEsQ0FFQSxxREFDSSxZQUFBLENBQ0EsV0FBQSxDQUNBLGVBQUEsQ0FDQSw2QkFBQSxDQUNBLHFCQUFBLENBRUEseURBQ0ksWUFBQSxDQUNBLE9BQUEsQ0FDQSxrQkFBQSxDQUNBLG9CQUFBXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIi5yZWNpcGVfX2JveF9fbmVlZHNfX2Jsb2NrIHtcXHJcXG4gICAgZGlzcGxheTogZmxleDtcXHJcXG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXHJcXG4gICAgZ2FwOiAyNHB4O1xcclxcbiAgICB3aWR0aDogMTAwJTtcXHJcXG5cXHJcXG4gICAgJl9fZWxlbXMge1xcclxcbiAgICAgICAgZGlzcGxheTogZ3JpZDtcXHJcXG4gICAgICAgIHJvdy1nYXA6IDhweDtcXHJcXG4gICAgICAgIGNvbHVtbi1nYXA6IDI5cHg7XFxyXFxuICAgICAgICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IDFmciAxZnI7XFxyXFxuICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IHN0YXJ0O1xcclxcblxcclxcbiAgICAgICAgZGl2IHtcXHJcXG4gICAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xcclxcbiAgICAgICAgICAgIGdhcDogOHB4O1xcclxcbiAgICAgICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxyXFxuICAgICAgICAgICAgYWxpZ24tY29udGVudDogY2VudGVyO1xcclxcbiAgICAgICAgfVxcclxcbiAgICB9XFxyXFxufVwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ubG9jYWxzID0ge1xuXHRcInJlY2lwZV9fYm94X19uZWVkc19fYmxvY2tcIjogYFJlY2lwZU5lZWQtbW9kdWxlX19yZWNpcGVfX2JveF9fbmVlZHNfX2Jsb2NrYCxcblx0XCJyZWNpcGVfX2JveF9fbmVlZHNfX2Jsb2NrX19lbGVtc1wiOiBgUmVjaXBlTmVlZC1tb2R1bGVfX3JlY2lwZV9fYm94X19uZWVkc19fYmxvY2tfX2VsZW1zYFxufTtcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///6820\n')},7726:(module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   A: () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(963);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(9089);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);\n// Imports\n\n\nvar ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, `.Recipes-module__recipes{display:flex;flex-direction:column;gap:36px;padding-bottom:28px}`, "",{"version":3,"sources":["webpack://./src/App/pages/Recipes/Recipes.module.scss"],"names":[],"mappings":"AAGA,yBACI,YAAA,CACA,qBAAA,CACA,QANU,CAOV,mBANa","sourcesContent":["$recipes-gap: 36px;\\r\\n$recipes-bottom: 28px;\\r\\n\\r\\n.recipes {\\r\\n    display: flex;\\r\\n    flex-direction: column;\\r\\n    gap: $recipes-gap;\\r\\n    padding-bottom: $recipes-bottom;\\r\\n}"],"sourceRoot":""}]);\n// Exports\n___CSS_LOADER_EXPORT___.locals = {\n\t"recipes": `Recipes-module__recipes`\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNzcyNi5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7QUFDbUg7QUFDakI7QUFDbEcsOEJBQThCLG1GQUEyQixDQUFDLDRGQUFxQztBQUMvRjtBQUNBLG1FQUFtRSxhQUFhLHNCQUFzQixTQUFTLG9CQUFvQixPQUFPLDhMQUE4TCwwQkFBMEIsa0JBQWtCLHNCQUFzQiwrQkFBK0IsMEJBQTBCLHdDQUF3QyxLQUFLLG1CQUFtQjtBQUNuZ0I7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpRUFBZSx1QkFBdUIsRUFBQyIsInNvdXJjZXMiOlsid2VicGFjazovLzIwMjQta3Rzc3R1ZGlvLWhvbWV3b3Jrcy8uL3NyYy9BcHAvcGFnZXMvUmVjaXBlcy9SZWNpcGVzLm1vZHVsZS5zY3NzP2Q2YzAiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgYC5SZWNpcGVzLW1vZHVsZV9fcmVjaXBlc3tkaXNwbGF5OmZsZXg7ZmxleC1kaXJlY3Rpb246Y29sdW1uO2dhcDozNnB4O3BhZGRpbmctYm90dG9tOjI4cHh9YCwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9zcmMvQXBwL3BhZ2VzL1JlY2lwZXMvUmVjaXBlcy5tb2R1bGUuc2Nzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFHQSx5QkFDSSxZQUFBLENBQ0EscUJBQUEsQ0FDQSxRQU5VLENBT1YsbUJBTmFcIixcInNvdXJjZXNDb250ZW50XCI6W1wiJHJlY2lwZXMtZ2FwOiAzNnB4O1xcclxcbiRyZWNpcGVzLWJvdHRvbTogMjhweDtcXHJcXG5cXHJcXG4ucmVjaXBlcyB7XFxyXFxuICAgIGRpc3BsYXk6IGZsZXg7XFxyXFxuICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxyXFxuICAgIGdhcDogJHJlY2lwZXMtZ2FwO1xcclxcbiAgICBwYWRkaW5nLWJvdHRvbTogJHJlY2lwZXMtYm90dG9tO1xcclxcbn1cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLmxvY2FscyA9IHtcblx0XCJyZWNpcGVzXCI6IGBSZWNpcGVzLW1vZHVsZV9fcmVjaXBlc2Bcbn07XG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///7726\n')},5181:(module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   A: () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(963);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(9089);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);\n// Imports\n\n\nvar ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, `.Content-module__content{display:flex;flex-direction:column;gap:48px;margin:0 100px 0 100px}.Content-module__content__header{text-align:center}`, "",{"version":3,"sources":["webpack://./src/App/pages/Recipes/components/Content/Content.module.scss"],"names":[],"mappings":"AAGA,yBACI,YAAA,CACA,qBAAA,CACA,QALU,CAMV,sBAPa,CASb,iCACI,iBAAA","sourcesContent":["$content-margin: 0 100px 0 100px;\\r\\n$content-gap: 48px;\\r\\n\\r\\n.content {\\r\\n    display: flex;\\r\\n    flex-direction: column;\\r\\n    gap: $content-gap;\\r\\n    margin: $content-margin;\\r\\n\\r\\n    &__header {\\r\\n        text-align: center;\\r\\n    }\\r\\n}"],"sourceRoot":""}]);\n// Exports\n___CSS_LOADER_EXPORT___.locals = {\n\t"content": `Content-module__content`,\n\t"content__header": `Content-module__content__header`\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTE4MS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7QUFDeUg7QUFDakI7QUFDeEcsOEJBQThCLG1GQUEyQixDQUFDLDRGQUFxQztBQUMvRjtBQUNBLG1FQUFtRSxhQUFhLHNCQUFzQixTQUFTLHVCQUF1QixpQ0FBaUMsa0JBQWtCLE9BQU8sZ1BBQWdQLHVCQUF1QixrQkFBa0Isc0JBQXNCLCtCQUErQiwwQkFBMEIsZ0NBQWdDLHVCQUF1QiwrQkFBK0IsU0FBUyxLQUFLLG1CQUFtQjtBQUMvcEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlFQUFlLHVCQUF1QixFQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vMjAyNC1rdHNzdHVkaW8taG9tZXdvcmtzLy4vc3JjL0FwcC9wYWdlcy9SZWNpcGVzL2NvbXBvbmVudHMvQ29udGVudC9Db250ZW50Lm1vZHVsZS5zY3NzPzVkMjQiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgYC5Db250ZW50LW1vZHVsZV9fY29udGVudHtkaXNwbGF5OmZsZXg7ZmxleC1kaXJlY3Rpb246Y29sdW1uO2dhcDo0OHB4O21hcmdpbjowIDEwMHB4IDAgMTAwcHh9LkNvbnRlbnQtbW9kdWxlX19jb250ZW50X19oZWFkZXJ7dGV4dC1hbGlnbjpjZW50ZXJ9YCwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9zcmMvQXBwL3BhZ2VzL1JlY2lwZXMvY29tcG9uZW50cy9Db250ZW50L0NvbnRlbnQubW9kdWxlLnNjc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBR0EseUJBQ0ksWUFBQSxDQUNBLHFCQUFBLENBQ0EsUUFMVSxDQU1WLHNCQVBhLENBU2IsaUNBQ0ksaUJBQUFcIixcInNvdXJjZXNDb250ZW50XCI6W1wiJGNvbnRlbnQtbWFyZ2luOiAwIDEwMHB4IDAgMTAwcHg7XFxyXFxuJGNvbnRlbnQtZ2FwOiA0OHB4O1xcclxcblxcclxcbi5jb250ZW50IHtcXHJcXG4gICAgZGlzcGxheTogZmxleDtcXHJcXG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXHJcXG4gICAgZ2FwOiAkY29udGVudC1nYXA7XFxyXFxuICAgIG1hcmdpbjogJGNvbnRlbnQtbWFyZ2luO1xcclxcblxcclxcbiAgICAmX19oZWFkZXIge1xcclxcbiAgICAgICAgdGV4dC1hbGlnbjogY2VudGVyO1xcclxcbiAgICB9XFxyXFxufVwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ubG9jYWxzID0ge1xuXHRcImNvbnRlbnRcIjogYENvbnRlbnQtbW9kdWxlX19jb250ZW50YCxcblx0XCJjb250ZW50X19oZWFkZXJcIjogYENvbnRlbnQtbW9kdWxlX19jb250ZW50X19oZWFkZXJgXG59O1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///5181\n')},337:(module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   A: () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(963);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(9089);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);\n// Imports\n\n\nvar ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, `.Preview-module__preview{width:100%}.Preview-module__preview img{width:100%}`, "",{"version":3,"sources":["webpack://./src/App/pages/Recipes/components/Preview/Preview.module.scss"],"names":[],"mappings":"AAAA,yBACI,UAAA,CAEA,6BACI,UAAA","sourcesContent":[".preview {\\r\\n    width: 100%;\\r\\n\\r\\n    img {\\r\\n        width: 100%;\\r\\n    }\\r\\n}"],"sourceRoot":""}]);\n// Exports\n___CSS_LOADER_EXPORT___.locals = {\n\t"preview": `Preview-module__preview`\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzM3LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTtBQUN5SDtBQUNqQjtBQUN4Ryw4QkFBOEIsbUZBQTJCLENBQUMsNEZBQXFDO0FBQy9GO0FBQ0EsbUVBQW1FLFdBQVcsNkJBQTZCLFdBQVcsT0FBTyx3TEFBd0wsb0JBQW9CLGlCQUFpQix3QkFBd0IsU0FBUyxLQUFLLG1CQUFtQjtBQUNuWjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlFQUFlLHVCQUF1QixFQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vMjAyNC1rdHNzdHVkaW8taG9tZXdvcmtzLy4vc3JjL0FwcC9wYWdlcy9SZWNpcGVzL2NvbXBvbmVudHMvUHJldmlldy9QcmV2aWV3Lm1vZHVsZS5zY3NzP2RmYWUiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgYC5QcmV2aWV3LW1vZHVsZV9fcHJldmlld3t3aWR0aDoxMDAlfS5QcmV2aWV3LW1vZHVsZV9fcHJldmlldyBpbWd7d2lkdGg6MTAwJX1gLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL3NyYy9BcHAvcGFnZXMvUmVjaXBlcy9jb21wb25lbnRzL1ByZXZpZXcvUHJldmlldy5tb2R1bGUuc2Nzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFBQSx5QkFDSSxVQUFBLENBRUEsNkJBQ0ksVUFBQVwiLFwic291cmNlc0NvbnRlbnRcIjpbXCIucHJldmlldyB7XFxyXFxuICAgIHdpZHRoOiAxMDAlO1xcclxcblxcclxcbiAgICBpbWcge1xcclxcbiAgICAgICAgd2lkdGg6IDEwMCU7XFxyXFxuICAgIH1cXHJcXG59XCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5sb2NhbHMgPSB7XG5cdFwicHJldmlld1wiOiBgUHJldmlldy1tb2R1bGVfX3ByZXZpZXdgXG59O1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///337\n')},8674:(module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   A: () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(963);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(9089);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);\n// Imports\n\n\nvar ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, `.User-module__user-page{margin:50px 100px 0 100px;display:flex;flex-direction:column;gap:24px}.User-module__user-page__info{display:flex;flex-direction:column;gap:12px}.User-module__user-page__info__unit{display:flex;justify-content:start;gap:6px}.User-module__user-page__logout{width:fit-content}`, "",{"version":3,"sources":["webpack://./src/App/pages/User/User.module.scss"],"names":[],"mappings":"AAEA,wBAEI,yBAJe,CAKf,YAAA,CACA,qBAAA,CACA,QAAA,CAEA,8BACI,YAAA,CACA,qBAAA,CACA,QAAA,CAEA,oCACI,YAAA,CACA,qBAAA,CACA,OAAA,CAIR,gCACI,iBAAA","sourcesContent":["$user-page-margin: 50px 100px 0 100px;\\r\\n\\r\\n.user-page {\\r\\n\\r\\n    margin: $user-page-margin;\\r\\n    display: flex;\\r\\n    flex-direction: column;\\r\\n    gap: 24px;\\r\\n\\r\\n    &__info {\\r\\n        display: flex;\\r\\n        flex-direction: column;\\r\\n        gap: 12px;\\r\\n\\r\\n        &__unit {\\r\\n            display: flex;\\r\\n            justify-content: start;\\r\\n            gap: 6px;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    &__logout {\\r\\n        width: fit-content;\\r\\n    }\\r\\n}"],"sourceRoot":""}]);\n// Exports\n___CSS_LOADER_EXPORT___.locals = {\n\t"user-page": `User-module__user-page`,\n\t"user-page__info": `User-module__user-page__info`,\n\t"user-page__info__unit": `User-module__user-page__info__unit`,\n\t"user-page__logout": `User-module__user-page__logout`\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiODY3NC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7QUFDbUg7QUFDakI7QUFDbEcsOEJBQThCLG1GQUEyQixDQUFDLDRGQUFxQztBQUMvRjtBQUNBLGtFQUFrRSwwQkFBMEIsYUFBYSxzQkFBc0IsU0FBUyw4QkFBOEIsYUFBYSxzQkFBc0IsU0FBUyxvQ0FBb0MsYUFBYSxzQkFBc0IsUUFBUSxnQ0FBZ0Msa0JBQWtCLE9BQU8sc1NBQXNTLG9CQUFvQixzQ0FBc0Msc0JBQXNCLCtCQUErQixrQkFBa0IscUJBQXFCLDBCQUEwQixtQ0FBbUMsc0JBQXNCLHlCQUF5Qiw4QkFBOEIsdUNBQXVDLHlCQUF5QixhQUFhLFNBQVMsdUJBQXVCLCtCQUErQixTQUFTLEtBQUssbUJBQW1CO0FBQzdrQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlFQUFlLHVCQUF1QixFQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vMjAyNC1rdHNzdHVkaW8taG9tZXdvcmtzLy4vc3JjL0FwcC9wYWdlcy9Vc2VyL1VzZXIubW9kdWxlLnNjc3M/ZGZjNiJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBgLlVzZXItbW9kdWxlX191c2VyLXBhZ2V7bWFyZ2luOjUwcHggMTAwcHggMCAxMDBweDtkaXNwbGF5OmZsZXg7ZmxleC1kaXJlY3Rpb246Y29sdW1uO2dhcDoyNHB4fS5Vc2VyLW1vZHVsZV9fdXNlci1wYWdlX19pbmZve2Rpc3BsYXk6ZmxleDtmbGV4LWRpcmVjdGlvbjpjb2x1bW47Z2FwOjEycHh9LlVzZXItbW9kdWxlX191c2VyLXBhZ2VfX2luZm9fX3VuaXR7ZGlzcGxheTpmbGV4O2p1c3RpZnktY29udGVudDpzdGFydDtnYXA6NnB4fS5Vc2VyLW1vZHVsZV9fdXNlci1wYWdlX19sb2dvdXR7d2lkdGg6Zml0LWNvbnRlbnR9YCwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9zcmMvQXBwL3BhZ2VzL1VzZXIvVXNlci5tb2R1bGUuc2Nzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFFQSx3QkFFSSx5QkFKZSxDQUtmLFlBQUEsQ0FDQSxxQkFBQSxDQUNBLFFBQUEsQ0FFQSw4QkFDSSxZQUFBLENBQ0EscUJBQUEsQ0FDQSxRQUFBLENBRUEsb0NBQ0ksWUFBQSxDQUNBLHFCQUFBLENBQ0EsT0FBQSxDQUlSLGdDQUNJLGlCQUFBXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIiR1c2VyLXBhZ2UtbWFyZ2luOiA1MHB4IDEwMHB4IDAgMTAwcHg7XFxyXFxuXFxyXFxuLnVzZXItcGFnZSB7XFxyXFxuXFxyXFxuICAgIG1hcmdpbjogJHVzZXItcGFnZS1tYXJnaW47XFxyXFxuICAgIGRpc3BsYXk6IGZsZXg7XFxyXFxuICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxyXFxuICAgIGdhcDogMjRweDtcXHJcXG5cXHJcXG4gICAgJl9faW5mbyB7XFxyXFxuICAgICAgICBkaXNwbGF5OiBmbGV4O1xcclxcbiAgICAgICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXHJcXG4gICAgICAgIGdhcDogMTJweDtcXHJcXG5cXHJcXG4gICAgICAgICZfX3VuaXQge1xcclxcbiAgICAgICAgICAgIGRpc3BsYXk6IGZsZXg7XFxyXFxuICAgICAgICAgICAganVzdGlmeS1jb250ZW50OiBzdGFydDtcXHJcXG4gICAgICAgICAgICBnYXA6IDZweDtcXHJcXG4gICAgICAgIH1cXHJcXG4gICAgfVxcclxcblxcclxcbiAgICAmX19sb2dvdXQge1xcclxcbiAgICAgICAgd2lkdGg6IGZpdC1jb250ZW50O1xcclxcbiAgICB9XFxyXFxufVwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ubG9jYWxzID0ge1xuXHRcInVzZXItcGFnZVwiOiBgVXNlci1tb2R1bGVfX3VzZXItcGFnZWAsXG5cdFwidXNlci1wYWdlX19pbmZvXCI6IGBVc2VyLW1vZHVsZV9fdXNlci1wYWdlX19pbmZvYCxcblx0XCJ1c2VyLXBhZ2VfX2luZm9fX3VuaXRcIjogYFVzZXItbW9kdWxlX191c2VyLXBhZ2VfX2luZm9fX3VuaXRgLFxuXHRcInVzZXItcGFnZV9fbG9nb3V0XCI6IGBVc2VyLW1vZHVsZV9fdXNlci1wYWdlX19sb2dvdXRgXG59O1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///8674\n')},3600:(module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   A: () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(963);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(9089);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);\n// Imports\n\n\nvar ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, `button{background:none;border:none;outline:none;box-shadow:none}.Button-module__button{background-color:#b5460f;color:#fff;font-size:18px;height:52px;border-radius:10px;padding:14px 20px}.Button-module__button_unloading:hover:enabled{background-color:rgba(181,70,15,.7)}.Button-module__button_unloading:disabled{background-color:#d9d9d9}.Button-module__button_unloading:active:enabled{background-color:#872d01}.Button-module__button_loading{display:flex;gap:8px;align-items:center;align-content:center;justify-content:center}.Button-module__button_loading .Button-module__loader{border-color:#fff;border-top-color:rgba(0,0,0,0)}.Button-module__button_loading:disabled{background-color:#b5460f}.Button-module__button_loading_disabled:disabled{background-color:#d9d9d9}`, "",{"version":3,"sources":["webpack://./src/components/Button/Button.module.scss","webpack://./src/styles/variables.scss"],"names":[],"mappings":"AAOA,OACI,eAAA,CACA,WAAA,CACA,YAAA,CACA,eAAA,CAGJ,uBACI,wBCfI,CDgBJ,UCXI,CDYJ,cAfe,CAgBf,WAfY,CAgBZ,kBCXY,CDaZ,iBAAA,CAGI,+CACI,mCCxBE,CD2BN,0CACI,wBAzBY,CA4BhB,gDACI,wBC/BG,CDmCX,+BACI,YAAA,CACA,OAAA,CACA,kBAAA,CACA,oBAAA,CACA,sBAAA,CAEA,sDACI,iBCxCJ,CDyCI,8BAAA,CAGJ,wCACI,wBClDJ,CDqDA,iDACI,wBAlDY","sourcesContent":["@use \'styles/variables.scss\' as var;\\r\\n\\r\\n$button-font-size: 18px;\\r\\n$button-height: 52px;\\r\\n$buttom-color-disabled: #D9D9D9;\\r\\n$buttom-border: var.$border-radius;\\r\\n\\r\\nbutton {\\r\\n    background: none;\\r\\n    border: none;\\r\\n    outline: none;\\r\\n    box-shadow: none;\\r\\n}\\r\\n\\r\\n.button {\\r\\n    background-color: var.$brand;\\r\\n    color: var.$light;\\r\\n    font-size: $button-font-size;\\r\\n    height: $button-height;\\r\\n    border-radius: $buttom-border;\\r\\n\\r\\n    padding: var.$space-s var.$space-l;\\r\\n\\r\\n    &_unloading {\\r\\n        &:hover:enabled {\\r\\n            background-color: var.$brand-hover;\\r\\n        }\\r\\n    \\r\\n        &:disabled {\\r\\n            background-color: $buttom-color-disabled;        \\r\\n        }\\r\\n    \\r\\n        &:active:enabled {\\r\\n            background-color: var.$brand-active;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    &_loading {\\r\\n        display: flex;\\r\\n        gap: 8px;\\r\\n        align-items: center;\\r\\n        align-content: center;\\r\\n        justify-content: center;\\r\\n\\r\\n        .loader {\\r\\n            border-color: var.$light;\\r\\n            border-top-color: transparent;\\r\\n        }\\r\\n\\r\\n        &:disabled {\\r\\n            background-color: var.$brand;\\r\\n        }\\r\\n\\r\\n        &_disabled:disabled {\\r\\n            background-color: $buttom-color-disabled;\\r\\n        }\\r\\n    }\\r\\n}","$brand: #B5460F;\\r\\n$brand-hover: rgba(181, 70, 15, 0.7);\\r\\n$brand-active: #872D01;\\r\\n\\r\\n$dark: black; \\r\\n$light: white;\\r\\n$gray: #AFADB5;\\r\\n\\r\\n$border-radius: 10px;\\r\\n\\r\\n$space-xl: 24px;\\r\\n$space-l: 20px;\\r\\n$space-m: 16px;\\r\\n$space-s: 14px;\\r\\n$space-xs: 12px;\\r\\n$space-xxs: 8px;"],"sourceRoot":""}]);\n// Exports\n___CSS_LOADER_EXPORT___.locals = {\n\t"button": `Button-module__button`,\n\t"button_unloading": `Button-module__button_unloading`,\n\t"button_loading": `Button-module__button_loading`,\n\t"loader": `Button-module__loader`,\n\t"button_loading_disabled": `Button-module__button_loading_disabled`\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzYwMC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7QUFDZ0g7QUFDakI7QUFDL0YsOEJBQThCLG1GQUEyQixDQUFDLDRGQUFxQztBQUMvRjtBQUNBLGlEQUFpRCxnQkFBZ0IsWUFBWSxhQUFhLGdCQUFnQix1QkFBdUIseUJBQXlCLFdBQVcsZUFBZSxZQUFZLG1CQUFtQixrQkFBa0IsK0NBQStDLG9DQUFvQywwQ0FBMEMseUJBQXlCLGdEQUFnRCx5QkFBeUIsK0JBQStCLGFBQWEsUUFBUSxtQkFBbUIscUJBQXFCLHVCQUF1QixzREFBc0Qsa0JBQWtCLCtCQUErQix3Q0FBd0MseUJBQXlCLGlEQUFpRCx5QkFBeUIsT0FBTyxtZkFBbWYsZ0NBQWdDLHlCQUF5QixvQ0FBb0MsdUNBQXVDLGdCQUFnQix5QkFBeUIscUJBQXFCLHNCQUFzQix5QkFBeUIsS0FBSyxpQkFBaUIscUNBQXFDLDBCQUEwQixxQ0FBcUMsK0JBQStCLHNDQUFzQywrQ0FBK0MseUJBQXlCLDZCQUE2QixtREFBbUQsYUFBYSxnQ0FBZ0MsaUVBQWlFLGFBQWEsc0NBQXNDLG9EQUFvRCxhQUFhLFNBQVMsdUJBQXVCLDBCQUEwQixxQkFBcUIsZ0NBQWdDLGtDQUFrQyxvQ0FBb0MseUJBQXlCLHlDQUF5Qyw4Q0FBOEMsYUFBYSw0QkFBNEIsNkNBQTZDLGFBQWEscUNBQXFDLHlEQUF5RCxhQUFhLFNBQVMsS0FBSyxtQkFBbUIseUNBQXlDLDJCQUEyQixzQkFBc0Isa0JBQWtCLG1CQUFtQiw2QkFBNkIsd0JBQXdCLG1CQUFtQixtQkFBbUIsbUJBQW1CLG9CQUFvQixvQkFBb0IsbUJBQW1CO0FBQ3o0RjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUVBQWUsdUJBQXVCLEVBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8yMDI0LWt0c3N0dWRpby1ob21ld29ya3MvLi9zcmMvY29tcG9uZW50cy9CdXR0b24vQnV0dG9uLm1vZHVsZS5zY3NzP2ZiZWIiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgYGJ1dHRvbntiYWNrZ3JvdW5kOm5vbmU7Ym9yZGVyOm5vbmU7b3V0bGluZTpub25lO2JveC1zaGFkb3c6bm9uZX0uQnV0dG9uLW1vZHVsZV9fYnV0dG9ue2JhY2tncm91bmQtY29sb3I6I2I1NDYwZjtjb2xvcjojZmZmO2ZvbnQtc2l6ZToxOHB4O2hlaWdodDo1MnB4O2JvcmRlci1yYWRpdXM6MTBweDtwYWRkaW5nOjE0cHggMjBweH0uQnV0dG9uLW1vZHVsZV9fYnV0dG9uX3VubG9hZGluZzpob3ZlcjplbmFibGVke2JhY2tncm91bmQtY29sb3I6cmdiYSgxODEsNzAsMTUsLjcpfS5CdXR0b24tbW9kdWxlX19idXR0b25fdW5sb2FkaW5nOmRpc2FibGVke2JhY2tncm91bmQtY29sb3I6I2Q5ZDlkOX0uQnV0dG9uLW1vZHVsZV9fYnV0dG9uX3VubG9hZGluZzphY3RpdmU6ZW5hYmxlZHtiYWNrZ3JvdW5kLWNvbG9yOiM4NzJkMDF9LkJ1dHRvbi1tb2R1bGVfX2J1dHRvbl9sb2FkaW5ne2Rpc3BsYXk6ZmxleDtnYXA6OHB4O2FsaWduLWl0ZW1zOmNlbnRlcjthbGlnbi1jb250ZW50OmNlbnRlcjtqdXN0aWZ5LWNvbnRlbnQ6Y2VudGVyfS5CdXR0b24tbW9kdWxlX19idXR0b25fbG9hZGluZyAuQnV0dG9uLW1vZHVsZV9fbG9hZGVye2JvcmRlci1jb2xvcjojZmZmO2JvcmRlci10b3AtY29sb3I6cmdiYSgwLDAsMCwwKX0uQnV0dG9uLW1vZHVsZV9fYnV0dG9uX2xvYWRpbmc6ZGlzYWJsZWR7YmFja2dyb3VuZC1jb2xvcjojYjU0NjBmfS5CdXR0b24tbW9kdWxlX19idXR0b25fbG9hZGluZ19kaXNhYmxlZDpkaXNhYmxlZHtiYWNrZ3JvdW5kLWNvbG9yOiNkOWQ5ZDl9YCwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9zcmMvY29tcG9uZW50cy9CdXR0b24vQnV0dG9uLm1vZHVsZS5zY3NzXCIsXCJ3ZWJwYWNrOi8vLi9zcmMvc3R5bGVzL3ZhcmlhYmxlcy5zY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQU9BLE9BQ0ksZUFBQSxDQUNBLFdBQUEsQ0FDQSxZQUFBLENBQ0EsZUFBQSxDQUdKLHVCQUNJLHdCQ2ZJLENEZ0JKLFVDWEksQ0RZSixjQWZlLENBZ0JmLFdBZlksQ0FnQlosa0JDWFksQ0RhWixpQkFBQSxDQUdJLCtDQUNJLG1DQ3hCRSxDRDJCTiwwQ0FDSSx3QkF6QlksQ0E0QmhCLGdEQUNJLHdCQy9CRyxDRG1DWCwrQkFDSSxZQUFBLENBQ0EsT0FBQSxDQUNBLGtCQUFBLENBQ0Esb0JBQUEsQ0FDQSxzQkFBQSxDQUVBLHNEQUNJLGlCQ3hDSixDRHlDSSw4QkFBQSxDQUdKLHdDQUNJLHdCQ2xESixDRHFEQSxpREFDSSx3QkFsRFlcIixcInNvdXJjZXNDb250ZW50XCI6W1wiQHVzZSAnc3R5bGVzL3ZhcmlhYmxlcy5zY3NzJyBhcyB2YXI7XFxyXFxuXFxyXFxuJGJ1dHRvbi1mb250LXNpemU6IDE4cHg7XFxyXFxuJGJ1dHRvbi1oZWlnaHQ6IDUycHg7XFxyXFxuJGJ1dHRvbS1jb2xvci1kaXNhYmxlZDogI0Q5RDlEOTtcXHJcXG4kYnV0dG9tLWJvcmRlcjogdmFyLiRib3JkZXItcmFkaXVzO1xcclxcblxcclxcbmJ1dHRvbiB7XFxyXFxuICAgIGJhY2tncm91bmQ6IG5vbmU7XFxyXFxuICAgIGJvcmRlcjogbm9uZTtcXHJcXG4gICAgb3V0bGluZTogbm9uZTtcXHJcXG4gICAgYm94LXNoYWRvdzogbm9uZTtcXHJcXG59XFxyXFxuXFxyXFxuLmJ1dHRvbiB7XFxyXFxuICAgIGJhY2tncm91bmQtY29sb3I6IHZhci4kYnJhbmQ7XFxyXFxuICAgIGNvbG9yOiB2YXIuJGxpZ2h0O1xcclxcbiAgICBmb250LXNpemU6ICRidXR0b24tZm9udC1zaXplO1xcclxcbiAgICBoZWlnaHQ6ICRidXR0b24taGVpZ2h0O1xcclxcbiAgICBib3JkZXItcmFkaXVzOiAkYnV0dG9tLWJvcmRlcjtcXHJcXG5cXHJcXG4gICAgcGFkZGluZzogdmFyLiRzcGFjZS1zIHZhci4kc3BhY2UtbDtcXHJcXG5cXHJcXG4gICAgJl91bmxvYWRpbmcge1xcclxcbiAgICAgICAgJjpob3ZlcjplbmFibGVkIHtcXHJcXG4gICAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIuJGJyYW5kLWhvdmVyO1xcclxcbiAgICAgICAgfVxcclxcbiAgICBcXHJcXG4gICAgICAgICY6ZGlzYWJsZWQge1xcclxcbiAgICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6ICRidXR0b20tY29sb3ItZGlzYWJsZWQ7ICAgICAgICBcXHJcXG4gICAgICAgIH1cXHJcXG4gICAgXFxyXFxuICAgICAgICAmOmFjdGl2ZTplbmFibGVkIHtcXHJcXG4gICAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIuJGJyYW5kLWFjdGl2ZTtcXHJcXG4gICAgICAgIH1cXHJcXG4gICAgfVxcclxcblxcclxcbiAgICAmX2xvYWRpbmcge1xcclxcbiAgICAgICAgZGlzcGxheTogZmxleDtcXHJcXG4gICAgICAgIGdhcDogOHB4O1xcclxcbiAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXHJcXG4gICAgICAgIGFsaWduLWNvbnRlbnQ6IGNlbnRlcjtcXHJcXG4gICAgICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xcclxcblxcclxcbiAgICAgICAgLmxvYWRlciB7XFxyXFxuICAgICAgICAgICAgYm9yZGVyLWNvbG9yOiB2YXIuJGxpZ2h0O1xcclxcbiAgICAgICAgICAgIGJvcmRlci10b3AtY29sb3I6IHRyYW5zcGFyZW50O1xcclxcbiAgICAgICAgfVxcclxcblxcclxcbiAgICAgICAgJjpkaXNhYmxlZCB7XFxyXFxuICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogdmFyLiRicmFuZDtcXHJcXG4gICAgICAgIH1cXHJcXG5cXHJcXG4gICAgICAgICZfZGlzYWJsZWQ6ZGlzYWJsZWQge1xcclxcbiAgICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6ICRidXR0b20tY29sb3ItZGlzYWJsZWQ7XFxyXFxuICAgICAgICB9XFxyXFxuICAgIH1cXHJcXG59XCIsXCIkYnJhbmQ6ICNCNTQ2MEY7XFxyXFxuJGJyYW5kLWhvdmVyOiByZ2JhKDE4MSwgNzAsIDE1LCAwLjcpO1xcclxcbiRicmFuZC1hY3RpdmU6ICM4NzJEMDE7XFxyXFxuXFxyXFxuJGRhcms6IGJsYWNrOyBcXHJcXG4kbGlnaHQ6IHdoaXRlO1xcclxcbiRncmF5OiAjQUZBREI1O1xcclxcblxcclxcbiRib3JkZXItcmFkaXVzOiAxMHB4O1xcclxcblxcclxcbiRzcGFjZS14bDogMjRweDtcXHJcXG4kc3BhY2UtbDogMjBweDtcXHJcXG4kc3BhY2UtbTogMTZweDtcXHJcXG4kc3BhY2UtczogMTRweDtcXHJcXG4kc3BhY2UteHM6IDEycHg7XFxyXFxuJHNwYWNlLXh4czogOHB4O1wiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ubG9jYWxzID0ge1xuXHRcImJ1dHRvblwiOiBgQnV0dG9uLW1vZHVsZV9fYnV0dG9uYCxcblx0XCJidXR0b25fdW5sb2FkaW5nXCI6IGBCdXR0b24tbW9kdWxlX19idXR0b25fdW5sb2FkaW5nYCxcblx0XCJidXR0b25fbG9hZGluZ1wiOiBgQnV0dG9uLW1vZHVsZV9fYnV0dG9uX2xvYWRpbmdgLFxuXHRcImxvYWRlclwiOiBgQnV0dG9uLW1vZHVsZV9fbG9hZGVyYCxcblx0XCJidXR0b25fbG9hZGluZ19kaXNhYmxlZFwiOiBgQnV0dG9uLW1vZHVsZV9fYnV0dG9uX2xvYWRpbmdfZGlzYWJsZWRgXG59O1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///3600\n')},2652:(module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   A: () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(963);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(9089);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);\n// Imports\n\n\nvar ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, `.Card-module__card{font-family:"Roboto";display:grid;width:348px;padding:0;padding-bottom:24px;gap:24px;grid-template-rows:348px 1fr;background-color:#fff;border-radius:10px}.Card-module__card:hover{box-shadow:0px 4px 10px 0px rgba(0,0,0,.25)}.Card-module__card__img{background-color:#d9d9d9;object-fit:cover;width:100%;height:348px;border-radius:10px 10px 0 0}.Card-module__card__info{display:grid;padding:0 12px;gap:20px;align-content:space-between}.Card-module__card__info__text{height:100%;display:grid;gap:8px}.Card-module__card__info__text__title,.Card-module__card__info__text__subtitle{overflow:hidden;text-overflow:ellipsis;display:-webkit-box;-webkit-box-orient:vertical}.Card-module__card__info__text__title{-webkit-line-clamp:2}.Card-module__card__info__text__subtitle{-webkit-line-clamp:3}.Card-module__card__info__slot{height:fit-content;display:flex;justify-content:space-between;align-content:center;align-items:center;gap:8px}.Card-module__card__info__slot__content{color:#b5460f}`, "",{"version":3,"sources":["webpack://./src/components/Card/Card.module.scss","webpack://./src/styles/variables.scss"],"names":[],"mappings":"AAcA,mBACI,oBAAA,CACA,YAAA,CACA,WAfS,CAgBT,SAAA,CACA,mBCTO,CDUP,QCVO,CDWP,4BAAA,CACA,qBCjBI,CDkBJ,kBCfY,CDiBZ,yBACI,2CAvBM,CA0BV,wBACI,wBAzBQ,CA0BR,gBAAA,CACA,UAAA,CACA,YA/BK,CAgCL,2BAAA,CAGJ,yBACI,YAAA,CACA,cA/BY,CAgCZ,QC7BE,CD8BF,2BAAA,CAEA,+BACI,WAAA,CACA,YAAA,CACA,OC/BA,CDiCA,+EACI,eAAA,CACA,sBAAA,CACA,mBAAA,CACA,2BAAA,CAGJ,sCACI,oBAAA,CAGJ,yCACI,oBAAA,CAIR,+BACI,kBAAA,CACA,YAAA,CACA,6BAAA,CACA,oBAAA,CACA,kBAAA,CACA,OCvDA,CDyDA,wCACI,aCzER","sourcesContent":["@use \'styles/variables.scss\' as var;\\r\\n\\r\\n$card-width: 348px;\\r\\n$card-shadow: 0px 4px 10px 0px rgba(0, 0, 0, 0.25);\\r\\n$card-bg: var.$light;\\r\\n$card-image-bg: #D9D9D9;\\r\\n$card-padding-bottom: var.$space-xl;\\r\\n$card-gap: var.$space-xl;\\r\\n$card-info-padding: 0 var.$space-xs;\\r\\n$card-info-gap: var.$space-l;\\r\\n$card-info-text-gap: var.$space-xxs;\\r\\n$card-info-slot-gap: var.$space-xxs;\\r\\n$card-border: var.$border-radius;\\r\\n\\r\\n.card {\\r\\n    font-family: \'Roboto\';\\r\\n    display: grid;\\r\\n    width: $card-width;\\r\\n    padding: 0;\\r\\n    padding-bottom: $card-padding-bottom;\\r\\n    gap: $card-gap;\\r\\n    grid-template-rows: $card-width 1fr;\\r\\n    background-color: $card-bg;\\r\\n    border-radius: $card-border;\\r\\n\\r\\n    &:hover {\\r\\n        box-shadow: $card-shadow;\\r\\n    }\\r\\n\\r\\n    &__img {\\r\\n        background-color: $card-image-bg;\\r\\n        object-fit: cover;\\r\\n        width: 100%;\\r\\n        height: $card-width;\\r\\n        border-radius: $card-border $card-border 0 0;\\r\\n    }\\r\\n\\r\\n    &__info {\\r\\n        display: grid;\\r\\n        padding: $card-info-padding;\\r\\n        gap: $card-info-gap;\\r\\n        align-content: space-between;\\r\\n        \\r\\n        &__text {\\r\\n            height: 100%;\\r\\n            display: grid;\\r\\n            gap: $card-info-text-gap;\\r\\n\\r\\n            &__title, &__subtitle {\\r\\n                overflow: hidden;\\r\\n                text-overflow: ellipsis;\\r\\n                display: -webkit-box;\\r\\n                -webkit-box-orient: vertical;\\r\\n            }\\r\\n\\r\\n            &__title {\\r\\n                -webkit-line-clamp: 2;\\r\\n            }\\r\\n\\r\\n            &__subtitle {\\r\\n                -webkit-line-clamp: 3;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        &__slot {\\r\\n            height: fit-content;\\r\\n            display: flex;\\r\\n            justify-content: space-between;\\r\\n            align-content: center;\\r\\n            align-items: center;\\r\\n            gap: $card-info-slot-gap;\\r\\n\\r\\n            &__content {\\r\\n                color: var.$brand;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}","$brand: #B5460F;\\r\\n$brand-hover: rgba(181, 70, 15, 0.7);\\r\\n$brand-active: #872D01;\\r\\n\\r\\n$dark: black; \\r\\n$light: white;\\r\\n$gray: #AFADB5;\\r\\n\\r\\n$border-radius: 10px;\\r\\n\\r\\n$space-xl: 24px;\\r\\n$space-l: 20px;\\r\\n$space-m: 16px;\\r\\n$space-s: 14px;\\r\\n$space-xs: 12px;\\r\\n$space-xxs: 8px;"],"sourceRoot":""}]);\n// Exports\n___CSS_LOADER_EXPORT___.locals = {\n\t"card": `Card-module__card`,\n\t"card__img": `Card-module__card__img`,\n\t"card__info": `Card-module__card__info`,\n\t"card__info__text": `Card-module__card__info__text`,\n\t"card__info__text__title": `Card-module__card__info__text__title`,\n\t"card__info__text__subtitle": `Card-module__card__info__text__subtitle`,\n\t"card__info__slot": `Card-module__card__info__slot`,\n\t"card__info__slot__content": `Card-module__card__info__slot__content`\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///2652\n')},5566:(module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   A: () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(963);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(9089);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);\n// Imports\n\n\nvar ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, `.CheckBox-module__cdiv{margin:0;padding:0;width:0;height:0}.CheckBox-module__cdiv__checkbox{display:none;position:absolute;left:0;top:0;width:40px;height:40px;margin:0;padding:0}.CheckBox-module__cdiv__label{display:block;padding:0;margin:0;position:relative;width:40px;height:40px;background-color:#fff;border:1px solid 10px;border-radius:10px}.CheckBox-module__cdiv__label svg{margin-top:-1px;margin-left:-1px;width:40px;height:40px}.CheckBox-module__cdiv__label:hover{background-color:#fff;border:1px solid #b5460f}.CheckBox-module__cdiv__label_disabled{background-color:rgba(255,255,255,.5);border:1px solid rgba(255,255,255,.5);pointer-events:none}.CheckBox-module__cdiv__label_disabled path{stroke:rgba(0,0,0,.2)}`, "",{"version":3,"sources":["webpack://./src/components/CheckBox/CheckBox.module.scss","webpack://./src/styles/variables.scss"],"names":[],"mappings":"AAeA,uBACI,QAAA,CACA,SAAA,CACA,OAAA,CACA,QAAA,CAEA,iCACI,YAAA,CACA,iBAAA,CACA,MAAA,CACA,KAAA,CACA,UAbQ,CAcR,WAdQ,CAeR,QAAA,CACA,SAAA,CAGJ,8BACI,aAAA,CACA,SAAA,CACA,QAAA,CAEA,iBAAA,CACA,UAzBQ,CA0BR,WA1BQ,CA4BR,qBCpCA,CDqCA,qBAAA,CACA,kBCnCQ,CDqCR,kCACI,eAAA,CACA,gBAAA,CACA,UAnCI,CAoCJ,WApCI,CAuCR,oCACI,qBChDJ,CDiDI,wBAAA,CAGJ,uCACI,qCAjDW,CAkDX,qCAAA,CACA,mBAAA,CAEA,4CACI,qBApDgB","sourcesContent":["@use \'styles/variables.scss\' as var;\\r\\n\\r\\n$checkbox-bg: var.$light;\\r\\n$checkbox-border: var.$light;\\r\\n\\r\\n$checkbox-bg-hover: var.$light;\\r\\n$checkbox-border-hover: var.$brand;\\r\\n$checkbox-border: var.$border-radius;\\r\\n\\r\\n$checkbox-bg-disabled: rgba(255, 255, 255, 0.5);\\r\\n$checkbox-border-disabled: rgba(255, 255, 255, 0.5);\\r\\n$checkbox-check-color-disabled: rgba(0, 0, 0, 0.2);\\r\\n\\r\\n$checkbox-size: 40px;\\r\\n\\r\\n.cdiv {\\r\\n    margin: 0;\\r\\n    padding: 0;\\r\\n    width: 0;\\r\\n    height: 0;\\r\\n\\r\\n    &__checkbox {\\r\\n        display: none;\\r\\n        position: absolute;\\r\\n        left: 0;\\r\\n        top: 0;\\r\\n        width: $checkbox-size;\\r\\n        height: $checkbox-size;\\r\\n        margin: 0;\\r\\n        padding: 0;\\r\\n    }\\r\\n\\r\\n    &__label {\\r\\n        display: block;\\r\\n        padding: 0;\\r\\n        margin: 0;\\r\\n\\r\\n        position: relative;\\r\\n        width: $checkbox-size;\\r\\n        height: $checkbox-size;\\r\\n\\r\\n        background-color: $checkbox-bg;\\r\\n        border: 1px solid $checkbox-border;\\r\\n        border-radius: $checkbox-border;\\r\\n\\r\\n        svg {\\r\\n            margin-top: -1px;\\r\\n            margin-left: -1px;\\r\\n            width: $checkbox-size;\\r\\n            height: $checkbox-size;\\r\\n        }\\r\\n\\r\\n        &:hover {\\r\\n            background-color: $checkbox-bg-hover;\\r\\n            border: 1px solid $checkbox-border-hover;\\r\\n        }\\r\\n\\r\\n        &_disabled {\\r\\n            background-color: $checkbox-bg-disabled;\\r\\n            border: 1px solid $checkbox-border-disabled;\\r\\n            pointer-events: none;\\r\\n\\r\\n            path {\\r\\n                stroke: $checkbox-check-color-disabled;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}","$brand: #B5460F;\\r\\n$brand-hover: rgba(181, 70, 15, 0.7);\\r\\n$brand-active: #872D01;\\r\\n\\r\\n$dark: black; \\r\\n$light: white;\\r\\n$gray: #AFADB5;\\r\\n\\r\\n$border-radius: 10px;\\r\\n\\r\\n$space-xl: 24px;\\r\\n$space-l: 20px;\\r\\n$space-m: 16px;\\r\\n$space-s: 14px;\\r\\n$space-xs: 12px;\\r\\n$space-xxs: 8px;"],"sourceRoot":""}]);\n// Exports\n___CSS_LOADER_EXPORT___.locals = {\n\t"cdiv": `CheckBox-module__cdiv`,\n\t"cdiv__checkbox": `CheckBox-module__cdiv__checkbox`,\n\t"cdiv__label": `CheckBox-module__cdiv__label`,\n\t"cdiv__label_disabled": `CheckBox-module__cdiv__label_disabled`\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTU2Ni5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7QUFDZ0g7QUFDakI7QUFDL0YsOEJBQThCLG1GQUEyQixDQUFDLDRGQUFxQztBQUMvRjtBQUNBLGlFQUFpRSxTQUFTLFVBQVUsUUFBUSxTQUFTLGlDQUFpQyxhQUFhLGtCQUFrQixPQUFPLE1BQU0sV0FBVyxZQUFZLFNBQVMsVUFBVSw4QkFBOEIsY0FBYyxVQUFVLFNBQVMsa0JBQWtCLFdBQVcsWUFBWSxzQkFBc0Isc0JBQXNCLG1CQUFtQixrQ0FBa0MsZ0JBQWdCLGlCQUFpQixXQUFXLFlBQVksb0NBQW9DLHNCQUFzQix5QkFBeUIsdUNBQXVDLHNDQUFzQyxzQ0FBc0Msb0JBQW9CLDRDQUE0QyxzQkFBc0IsT0FBTyx3a0JBQXdrQixpQ0FBaUMsaUNBQWlDLHVDQUF1Qyx1Q0FBdUMseUNBQXlDLHdEQUF3RCx3REFBd0QsdURBQXVELDZCQUE2QixlQUFlLGtCQUFrQixtQkFBbUIsaUJBQWlCLGtCQUFrQix5QkFBeUIsMEJBQTBCLCtCQUErQixvQkFBb0IsbUJBQW1CLGtDQUFrQyxtQ0FBbUMsc0JBQXNCLHVCQUF1QixTQUFTLHNCQUFzQiwyQkFBMkIsdUJBQXVCLHNCQUFzQixtQ0FBbUMsa0NBQWtDLG1DQUFtQywrQ0FBK0MsK0NBQStDLDRDQUE0QyxxQkFBcUIsaUNBQWlDLGtDQUFrQyxzQ0FBc0MsdUNBQXVDLGFBQWEseUJBQXlCLHFEQUFxRCx5REFBeUQsYUFBYSw0QkFBNEIsd0RBQXdELDREQUE0RCxxQ0FBcUMsMEJBQTBCLDJEQUEyRCxpQkFBaUIsYUFBYSxTQUFTLEtBQUssbUJBQW1CLHlDQUF5QywyQkFBMkIsc0JBQXNCLGtCQUFrQixtQkFBbUIsNkJBQTZCLHdCQUF3QixtQkFBbUIsbUJBQW1CLG1CQUFtQixvQkFBb0Isb0JBQW9CLG1CQUFtQjtBQUN2eEc7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpRUFBZSx1QkFBdUIsRUFBQyIsInNvdXJjZXMiOlsid2VicGFjazovLzIwMjQta3Rzc3R1ZGlvLWhvbWV3b3Jrcy8uL3NyYy9jb21wb25lbnRzL0NoZWNrQm94L0NoZWNrQm94Lm1vZHVsZS5zY3NzPzdhYzkiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgYC5DaGVja0JveC1tb2R1bGVfX2NkaXZ7bWFyZ2luOjA7cGFkZGluZzowO3dpZHRoOjA7aGVpZ2h0OjB9LkNoZWNrQm94LW1vZHVsZV9fY2Rpdl9fY2hlY2tib3h7ZGlzcGxheTpub25lO3Bvc2l0aW9uOmFic29sdXRlO2xlZnQ6MDt0b3A6MDt3aWR0aDo0MHB4O2hlaWdodDo0MHB4O21hcmdpbjowO3BhZGRpbmc6MH0uQ2hlY2tCb3gtbW9kdWxlX19jZGl2X19sYWJlbHtkaXNwbGF5OmJsb2NrO3BhZGRpbmc6MDttYXJnaW46MDtwb3NpdGlvbjpyZWxhdGl2ZTt3aWR0aDo0MHB4O2hlaWdodDo0MHB4O2JhY2tncm91bmQtY29sb3I6I2ZmZjtib3JkZXI6MXB4IHNvbGlkIDEwcHg7Ym9yZGVyLXJhZGl1czoxMHB4fS5DaGVja0JveC1tb2R1bGVfX2NkaXZfX2xhYmVsIHN2Z3ttYXJnaW4tdG9wOi0xcHg7bWFyZ2luLWxlZnQ6LTFweDt3aWR0aDo0MHB4O2hlaWdodDo0MHB4fS5DaGVja0JveC1tb2R1bGVfX2NkaXZfX2xhYmVsOmhvdmVye2JhY2tncm91bmQtY29sb3I6I2ZmZjtib3JkZXI6MXB4IHNvbGlkICNiNTQ2MGZ9LkNoZWNrQm94LW1vZHVsZV9fY2Rpdl9fbGFiZWxfZGlzYWJsZWR7YmFja2dyb3VuZC1jb2xvcjpyZ2JhKDI1NSwyNTUsMjU1LC41KTtib3JkZXI6MXB4IHNvbGlkIHJnYmEoMjU1LDI1NSwyNTUsLjUpO3BvaW50ZXItZXZlbnRzOm5vbmV9LkNoZWNrQm94LW1vZHVsZV9fY2Rpdl9fbGFiZWxfZGlzYWJsZWQgcGF0aHtzdHJva2U6cmdiYSgwLDAsMCwuMil9YCwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9zcmMvY29tcG9uZW50cy9DaGVja0JveC9DaGVja0JveC5tb2R1bGUuc2Nzc1wiLFwid2VicGFjazovLy4vc3JjL3N0eWxlcy92YXJpYWJsZXMuc2Nzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFlQSx1QkFDSSxRQUFBLENBQ0EsU0FBQSxDQUNBLE9BQUEsQ0FDQSxRQUFBLENBRUEsaUNBQ0ksWUFBQSxDQUNBLGlCQUFBLENBQ0EsTUFBQSxDQUNBLEtBQUEsQ0FDQSxVQWJRLENBY1IsV0FkUSxDQWVSLFFBQUEsQ0FDQSxTQUFBLENBR0osOEJBQ0ksYUFBQSxDQUNBLFNBQUEsQ0FDQSxRQUFBLENBRUEsaUJBQUEsQ0FDQSxVQXpCUSxDQTBCUixXQTFCUSxDQTRCUixxQkNwQ0EsQ0RxQ0EscUJBQUEsQ0FDQSxrQkNuQ1EsQ0RxQ1Isa0NBQ0ksZUFBQSxDQUNBLGdCQUFBLENBQ0EsVUFuQ0ksQ0FvQ0osV0FwQ0ksQ0F1Q1Isb0NBQ0kscUJDaERKLENEaURJLHdCQUFBLENBR0osdUNBQ0kscUNBakRXLENBa0RYLHFDQUFBLENBQ0EsbUJBQUEsQ0FFQSw0Q0FDSSxxQkFwRGdCXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIkB1c2UgJ3N0eWxlcy92YXJpYWJsZXMuc2NzcycgYXMgdmFyO1xcclxcblxcclxcbiRjaGVja2JveC1iZzogdmFyLiRsaWdodDtcXHJcXG4kY2hlY2tib3gtYm9yZGVyOiB2YXIuJGxpZ2h0O1xcclxcblxcclxcbiRjaGVja2JveC1iZy1ob3ZlcjogdmFyLiRsaWdodDtcXHJcXG4kY2hlY2tib3gtYm9yZGVyLWhvdmVyOiB2YXIuJGJyYW5kO1xcclxcbiRjaGVja2JveC1ib3JkZXI6IHZhci4kYm9yZGVyLXJhZGl1cztcXHJcXG5cXHJcXG4kY2hlY2tib3gtYmctZGlzYWJsZWQ6IHJnYmEoMjU1LCAyNTUsIDI1NSwgMC41KTtcXHJcXG4kY2hlY2tib3gtYm9yZGVyLWRpc2FibGVkOiByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuNSk7XFxyXFxuJGNoZWNrYm94LWNoZWNrLWNvbG9yLWRpc2FibGVkOiByZ2JhKDAsIDAsIDAsIDAuMik7XFxyXFxuXFxyXFxuJGNoZWNrYm94LXNpemU6IDQwcHg7XFxyXFxuXFxyXFxuLmNkaXYge1xcclxcbiAgICBtYXJnaW46IDA7XFxyXFxuICAgIHBhZGRpbmc6IDA7XFxyXFxuICAgIHdpZHRoOiAwO1xcclxcbiAgICBoZWlnaHQ6IDA7XFxyXFxuXFxyXFxuICAgICZfX2NoZWNrYm94IHtcXHJcXG4gICAgICAgIGRpc3BsYXk6IG5vbmU7XFxyXFxuICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XFxyXFxuICAgICAgICBsZWZ0OiAwO1xcclxcbiAgICAgICAgdG9wOiAwO1xcclxcbiAgICAgICAgd2lkdGg6ICRjaGVja2JveC1zaXplO1xcclxcbiAgICAgICAgaGVpZ2h0OiAkY2hlY2tib3gtc2l6ZTtcXHJcXG4gICAgICAgIG1hcmdpbjogMDtcXHJcXG4gICAgICAgIHBhZGRpbmc6IDA7XFxyXFxuICAgIH1cXHJcXG5cXHJcXG4gICAgJl9fbGFiZWwge1xcclxcbiAgICAgICAgZGlzcGxheTogYmxvY2s7XFxyXFxuICAgICAgICBwYWRkaW5nOiAwO1xcclxcbiAgICAgICAgbWFyZ2luOiAwO1xcclxcblxcclxcbiAgICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xcclxcbiAgICAgICAgd2lkdGg6ICRjaGVja2JveC1zaXplO1xcclxcbiAgICAgICAgaGVpZ2h0OiAkY2hlY2tib3gtc2l6ZTtcXHJcXG5cXHJcXG4gICAgICAgIGJhY2tncm91bmQtY29sb3I6ICRjaGVja2JveC1iZztcXHJcXG4gICAgICAgIGJvcmRlcjogMXB4IHNvbGlkICRjaGVja2JveC1ib3JkZXI7XFxyXFxuICAgICAgICBib3JkZXItcmFkaXVzOiAkY2hlY2tib3gtYm9yZGVyO1xcclxcblxcclxcbiAgICAgICAgc3ZnIHtcXHJcXG4gICAgICAgICAgICBtYXJnaW4tdG9wOiAtMXB4O1xcclxcbiAgICAgICAgICAgIG1hcmdpbi1sZWZ0OiAtMXB4O1xcclxcbiAgICAgICAgICAgIHdpZHRoOiAkY2hlY2tib3gtc2l6ZTtcXHJcXG4gICAgICAgICAgICBoZWlnaHQ6ICRjaGVja2JveC1zaXplO1xcclxcbiAgICAgICAgfVxcclxcblxcclxcbiAgICAgICAgJjpob3ZlciB7XFxyXFxuICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogJGNoZWNrYm94LWJnLWhvdmVyO1xcclxcbiAgICAgICAgICAgIGJvcmRlcjogMXB4IHNvbGlkICRjaGVja2JveC1ib3JkZXItaG92ZXI7XFxyXFxuICAgICAgICB9XFxyXFxuXFxyXFxuICAgICAgICAmX2Rpc2FibGVkIHtcXHJcXG4gICAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAkY2hlY2tib3gtYmctZGlzYWJsZWQ7XFxyXFxuICAgICAgICAgICAgYm9yZGVyOiAxcHggc29saWQgJGNoZWNrYm94LWJvcmRlci1kaXNhYmxlZDtcXHJcXG4gICAgICAgICAgICBwb2ludGVyLWV2ZW50czogbm9uZTtcXHJcXG5cXHJcXG4gICAgICAgICAgICBwYXRoIHtcXHJcXG4gICAgICAgICAgICAgICAgc3Ryb2tlOiAkY2hlY2tib3gtY2hlY2stY29sb3ItZGlzYWJsZWQ7XFxyXFxuICAgICAgICAgICAgfVxcclxcbiAgICAgICAgfVxcclxcbiAgICB9XFxyXFxufVwiLFwiJGJyYW5kOiAjQjU0NjBGO1xcclxcbiRicmFuZC1ob3ZlcjogcmdiYSgxODEsIDcwLCAxNSwgMC43KTtcXHJcXG4kYnJhbmQtYWN0aXZlOiAjODcyRDAxO1xcclxcblxcclxcbiRkYXJrOiBibGFjazsgXFxyXFxuJGxpZ2h0OiB3aGl0ZTtcXHJcXG4kZ3JheTogI0FGQURCNTtcXHJcXG5cXHJcXG4kYm9yZGVyLXJhZGl1czogMTBweDtcXHJcXG5cXHJcXG4kc3BhY2UteGw6IDI0cHg7XFxyXFxuJHNwYWNlLWw6IDIwcHg7XFxyXFxuJHNwYWNlLW06IDE2cHg7XFxyXFxuJHNwYWNlLXM6IDE0cHg7XFxyXFxuJHNwYWNlLXhzOiAxMnB4O1xcclxcbiRzcGFjZS14eHM6IDhweDtcIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLmxvY2FscyA9IHtcblx0XCJjZGl2XCI6IGBDaGVja0JveC1tb2R1bGVfX2NkaXZgLFxuXHRcImNkaXZfX2NoZWNrYm94XCI6IGBDaGVja0JveC1tb2R1bGVfX2NkaXZfX2NoZWNrYm94YCxcblx0XCJjZGl2X19sYWJlbFwiOiBgQ2hlY2tCb3gtbW9kdWxlX19jZGl2X19sYWJlbGAsXG5cdFwiY2Rpdl9fbGFiZWxfZGlzYWJsZWRcIjogYENoZWNrQm94LW1vZHVsZV9fY2Rpdl9fbGFiZWxfZGlzYWJsZWRgXG59O1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///5566\n')},348:(module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   A: () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(963);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(9089);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);\n// Imports\n\n\nvar ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, `.ContentFilters-module__content-filters{display:flex;flex-direction:column;gap:20px;width:100%}.ContentFilters-module__content-filters__search{display:flex;gap:19px;justify-content:space-between}.ContentFilters-module__content-filters__search__input{width:100%}.ContentFilters-module__content-filters__category{display:flex;justify-content:space-between;align-items:center}.ContentFilters-module__content-filters__category__block{width:300px}.ContentFilters-module__content-filters__category__shower{cursor:pointer}.ContentFilters-module__content-filters__other{background-color:#ffecd5;border-radius:10px;border:3px solid #fff;box-shadow:0px 4px 10px 0px rgba(0,0,0,.25);z-index:100;position:fixed;top:10%;max-height:100%;padding:24px;display:flex;flex-direction:column;gap:12px;max-width:80%;min-width:800px;overflow-y:scroll;-ms-overflow-style:none;scrollbar-width:none}.ContentFilters-module__content-filters__other::-webkit-scrollbar{display:none}.ContentFilters-module__content-filters__other__header{text-align:center;padding-bottom:12px}.ContentFilters-module__content-filters__other__hide{width:100%;display:flex;justify-content:end}.ContentFilters-module__content-filters__other__multi,.ContentFilters-module__content-filters__other__string,.ContentFilters-module__content-filters__other_number,.ContentFilters-module__content-filters__other__boolean{position:relative;display:grid;grid-template-columns:repeat(auto-fit, 200px);justify-content:space-between;row-gap:12px;column-gap:8px}`, "",{"version":3,"sources":["webpack://./src/components/ContentFilters/ContentFilters.module.scss","webpack://./src/styles/variables.scss"],"names":[],"mappings":"AAOA,wCACI,YAAA,CACA,qBAAA,CACA,QARkB,CASlB,UAAA,CAEA,gDACI,YAAA,CACA,QAZqB,CAarB,6BAAA,CAEA,uDACI,UAAA,CAIR,kDACI,YAAA,CACA,6BAAA,CACA,kBAAA,CAEA,yDACI,WAzBqB,CA4BzB,0DACI,cAAA,CAIR,+CACI,wBAAA,CACA,kBC/BQ,CDgCR,qBAAA,CACA,2CApCS,CAqCT,WAAA,CACA,cAAA,CACA,OAAA,CACA,eAAA,CACA,YAAA,CAEA,YAAA,CACA,qBAAA,CACA,QAAA,CAEA,aAAA,CACA,eAAA,CACA,iBAAA,CAKA,uBAAA,CACA,oBAAA,CALA,kEACI,YAAA,CAMJ,uDACI,iBAAA,CACA,mBAAA,CAGJ,qDACI,UAAA,CACA,YAAA,CACA,mBAAA,CAGJ,2NACI,iBAAA,CACA,YAAA,CACA,6CAAA,CACA,6BAAA,CACA,YAAA,CACA,cAAA","sourcesContent":["@use \'styles/variables.scss\' as var;\\r\\n\\r\\n$content-filters-gap: 20px;\\r\\n$content-filters-search-gap: 19px;\\r\\n$content-filters-category-width: 300px;\\r\\n$filters-shadow: 0px 4px 10px 0px rgba(0, 0, 0, 0.25);\\r\\n\\r\\n.content-filters {\\r\\n    display: flex;\\r\\n    flex-direction: column;\\r\\n    gap: $content-filters-gap;\\r\\n    width: 100%;\\r\\n\\r\\n    &__search {\\r\\n        display: flex;\\r\\n        gap: $content-filters-search-gap;\\r\\n        justify-content: space-between;\\r\\n\\r\\n        &__input {\\r\\n            width: 100%;    \\r\\n        }\\r\\n    }\\r\\n\\r\\n    &__category {\\r\\n        display: flex;\\r\\n        justify-content: space-between;\\r\\n        align-items: center;\\r\\n\\r\\n        &__block {\\r\\n            width: $content-filters-category-width;\\r\\n        }\\r\\n\\r\\n        &__shower {\\r\\n            cursor: pointer;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    &__other {\\r\\n        background-color: #ffecd5;\\r\\n        border-radius: var.$border-radius;\\r\\n        border: 3px solid var.$light;\\r\\n        box-shadow: $filters-shadow;\\r\\n        z-index: 100;\\r\\n        position: fixed;\\r\\n        top: 10%;\\r\\n        max-height: 100%;\\r\\n        padding: 24px;\\r\\n\\r\\n        display: flex;\\r\\n        flex-direction: column;\\r\\n        gap: 12px;\\r\\n\\r\\n        max-width: 80%;\\r\\n        min-width: 800px;\\r\\n        overflow-y: scroll;\\r\\n        &::-webkit-scrollbar {\\r\\n            display: none;\\r\\n        }\\r\\n\\r\\n        -ms-overflow-style: none;\\r\\n        scrollbar-width: none;\\r\\n\\r\\n        &__header {\\r\\n            text-align: center;\\r\\n            padding-bottom: 12px; \\r\\n        }\\r\\n\\r\\n        &__hide {\\r\\n            width: 100%;\\r\\n            display: flex;\\r\\n            justify-content: end;\\r\\n        }\\r\\n\\r\\n        &__multi, &__string, &_number, &__boolean {\\r\\n            position: relative;\\r\\n            display: grid;\\r\\n            grid-template-columns: repeat(auto-fit, 200px);\\r\\n            justify-content: space-between;\\r\\n            row-gap: 12px;\\r\\n            column-gap: 8px;\\r\\n        }\\r\\n    }\\r\\n}","$brand: #B5460F;\\r\\n$brand-hover: rgba(181, 70, 15, 0.7);\\r\\n$brand-active: #872D01;\\r\\n\\r\\n$dark: black; \\r\\n$light: white;\\r\\n$gray: #AFADB5;\\r\\n\\r\\n$border-radius: 10px;\\r\\n\\r\\n$space-xl: 24px;\\r\\n$space-l: 20px;\\r\\n$space-m: 16px;\\r\\n$space-s: 14px;\\r\\n$space-xs: 12px;\\r\\n$space-xxs: 8px;"],"sourceRoot":""}]);\n// Exports\n___CSS_LOADER_EXPORT___.locals = {\n\t"content-filters": `ContentFilters-module__content-filters`,\n\t"content-filters__search": `ContentFilters-module__content-filters__search`,\n\t"content-filters__search__input": `ContentFilters-module__content-filters__search__input`,\n\t"content-filters__category": `ContentFilters-module__content-filters__category`,\n\t"content-filters__category__block": `ContentFilters-module__content-filters__category__block`,\n\t"content-filters__category__shower": `ContentFilters-module__content-filters__category__shower`,\n\t"content-filters__other": `ContentFilters-module__content-filters__other`,\n\t"content-filters__other__header": `ContentFilters-module__content-filters__other__header`,\n\t"content-filters__other__hide": `ContentFilters-module__content-filters__other__hide`,\n\t"content-filters__other__multi": `ContentFilters-module__content-filters__other__multi`,\n\t"content-filters__other__string": `ContentFilters-module__content-filters__other__string`,\n\t"content-filters__other_number": `ContentFilters-module__content-filters__other_number`,\n\t"content-filters__other__boolean": `ContentFilters-module__content-filters__other__boolean`\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///348\n')},4762:(module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   A: () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(963);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(9089);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);\n// Imports\n\n\nvar ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, `.ErrorBox-module__error-box{display:flex;flex-direction:column;justify-content:center;align-items:center;gap:14px}.ErrorBox-module__error-box__message{max-width:30%;text-align:justify}`, "",{"version":3,"sources":["webpack://./src/components/ErrorBox/ErrorBox.module.scss","webpack://./src/styles/variables.scss"],"names":[],"mappings":"AAIA,4BACI,YAAA,CACA,qBAAA,CACA,sBAAA,CACA,kBAAA,CACA,QCIM,CDFN,qCACI,aAAA,CACA,kBAAA","sourcesContent":["@use \'styles/variables.scss\' as var;\\r\\n\\r\\n$error-box-gap: var.$space-s;\\r\\n\\r\\n.error-box {\\r\\n    display: flex;\\r\\n    flex-direction: column;\\r\\n    justify-content: center;\\r\\n    align-items: center;\\r\\n    gap: $error-box-gap;\\r\\n\\r\\n    &__message {\\r\\n        max-width: 30%;\\r\\n        text-align: justify;\\r\\n    }\\r\\n}","$brand: #B5460F;\\r\\n$brand-hover: rgba(181, 70, 15, 0.7);\\r\\n$brand-active: #872D01;\\r\\n\\r\\n$dark: black; \\r\\n$light: white;\\r\\n$gray: #AFADB5;\\r\\n\\r\\n$border-radius: 10px;\\r\\n\\r\\n$space-xl: 24px;\\r\\n$space-l: 20px;\\r\\n$space-m: 16px;\\r\\n$space-s: 14px;\\r\\n$space-xs: 12px;\\r\\n$space-xxs: 8px;"],"sourceRoot":""}]);\n// Exports\n___CSS_LOADER_EXPORT___.locals = {\n\t"error-box": `ErrorBox-module__error-box`,\n\t"error-box__message": `ErrorBox-module__error-box__message`\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDc2Mi5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7QUFDZ0g7QUFDakI7QUFDL0YsOEJBQThCLG1GQUEyQixDQUFDLDRGQUFxQztBQUMvRjtBQUNBLHNFQUFzRSxhQUFhLHNCQUFzQix1QkFBdUIsbUJBQW1CLFNBQVMscUNBQXFDLGNBQWMsbUJBQW1CLE9BQU8sZ1NBQWdTLHFDQUFxQyxvQkFBb0Isc0JBQXNCLCtCQUErQixnQ0FBZ0MsNEJBQTRCLDRCQUE0Qix3QkFBd0IsMkJBQTJCLGdDQUFnQyxTQUFTLEtBQUssbUJBQW1CLHlDQUF5QywyQkFBMkIsc0JBQXNCLGtCQUFrQixtQkFBbUIsNkJBQTZCLHdCQUF3QixtQkFBbUIsbUJBQW1CLG1CQUFtQixvQkFBb0Isb0JBQW9CLG1CQUFtQjtBQUMzbUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlFQUFlLHVCQUF1QixFQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vMjAyNC1rdHNzdHVkaW8taG9tZXdvcmtzLy4vc3JjL2NvbXBvbmVudHMvRXJyb3JCb3gvRXJyb3JCb3gubW9kdWxlLnNjc3M/YTBjYiJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBgLkVycm9yQm94LW1vZHVsZV9fZXJyb3ItYm94e2Rpc3BsYXk6ZmxleDtmbGV4LWRpcmVjdGlvbjpjb2x1bW47anVzdGlmeS1jb250ZW50OmNlbnRlcjthbGlnbi1pdGVtczpjZW50ZXI7Z2FwOjE0cHh9LkVycm9yQm94LW1vZHVsZV9fZXJyb3ItYm94X19tZXNzYWdle21heC13aWR0aDozMCU7dGV4dC1hbGlnbjpqdXN0aWZ5fWAsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vc3JjL2NvbXBvbmVudHMvRXJyb3JCb3gvRXJyb3JCb3gubW9kdWxlLnNjc3NcIixcIndlYnBhY2s6Ly8uL3NyYy9zdHlsZXMvdmFyaWFibGVzLnNjc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBSUEsNEJBQ0ksWUFBQSxDQUNBLHFCQUFBLENBQ0Esc0JBQUEsQ0FDQSxrQkFBQSxDQUNBLFFDSU0sQ0RGTixxQ0FDSSxhQUFBLENBQ0Esa0JBQUFcIixcInNvdXJjZXNDb250ZW50XCI6W1wiQHVzZSAnc3R5bGVzL3ZhcmlhYmxlcy5zY3NzJyBhcyB2YXI7XFxyXFxuXFxyXFxuJGVycm9yLWJveC1nYXA6IHZhci4kc3BhY2UtcztcXHJcXG5cXHJcXG4uZXJyb3ItYm94IHtcXHJcXG4gICAgZGlzcGxheTogZmxleDtcXHJcXG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXHJcXG4gICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxyXFxuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxyXFxuICAgIGdhcDogJGVycm9yLWJveC1nYXA7XFxyXFxuXFxyXFxuICAgICZfX21lc3NhZ2Uge1xcclxcbiAgICAgICAgbWF4LXdpZHRoOiAzMCU7XFxyXFxuICAgICAgICB0ZXh0LWFsaWduOiBqdXN0aWZ5O1xcclxcbiAgICB9XFxyXFxufVwiLFwiJGJyYW5kOiAjQjU0NjBGO1xcclxcbiRicmFuZC1ob3ZlcjogcmdiYSgxODEsIDcwLCAxNSwgMC43KTtcXHJcXG4kYnJhbmQtYWN0aXZlOiAjODcyRDAxO1xcclxcblxcclxcbiRkYXJrOiBibGFjazsgXFxyXFxuJGxpZ2h0OiB3aGl0ZTtcXHJcXG4kZ3JheTogI0FGQURCNTtcXHJcXG5cXHJcXG4kYm9yZGVyLXJhZGl1czogMTBweDtcXHJcXG5cXHJcXG4kc3BhY2UteGw6IDI0cHg7XFxyXFxuJHNwYWNlLWw6IDIwcHg7XFxyXFxuJHNwYWNlLW06IDE2cHg7XFxyXFxuJHNwYWNlLXM6IDE0cHg7XFxyXFxuJHNwYWNlLXhzOiAxMnB4O1xcclxcbiRzcGFjZS14eHM6IDhweDtcIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLmxvY2FscyA9IHtcblx0XCJlcnJvci1ib3hcIjogYEVycm9yQm94LW1vZHVsZV9fZXJyb3ItYm94YCxcblx0XCJlcnJvci1ib3hfX21lc3NhZ2VcIjogYEVycm9yQm94LW1vZHVsZV9fZXJyb3ItYm94X19tZXNzYWdlYFxufTtcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///4762\n')},86:(module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   A: () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(963);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(9089);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);\n// Imports\n\n\nvar ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, `.Header-module__header{margin:0;box-sizing:border-box;width:100%;height:64px;padding:0 100px 0 100px;background-color:#fff;display:flex;justify-content:space-between}.Header-module__header__left{display:flex;gap:80px}.Header-module__header__right{display:flex;align-items:center}`, "",{"version":3,"sources":["webpack://./src/components/Header/Header.module.scss","webpack://./src/styles/variables.scss"],"names":[],"mappings":"AAOA,uBACI,QAAA,CACA,qBAAA,CACA,UAAA,CACA,WARO,CASP,uBARa,CASb,qBCRI,CDSJ,YAAA,CACA,6BAAA,CAEA,6BACI,YAAA,CACA,QAdU,CAiBd,8BACI,YAAA,CACA,kBAAA","sourcesContent":["@use \'styles/variables.scss\' as var;\\r\\n\\r\\n$header-bg: var.$light;\\r\\n$header-h: 64px;\\r\\n$header-padding: 0 100px 0 100px; \\r\\n$header-left-gap: 80px;\\r\\n\\r\\n.header {\\r\\n    margin: 0;\\r\\n    box-sizing: border-box;\\r\\n    width: 100%;\\r\\n    height: $header-h;\\r\\n    padding: $header-padding;\\r\\n    background-color: $header-bg;\\r\\n    display: flex;\\r\\n    justify-content: space-between;\\r\\n\\r\\n    &__left {\\r\\n        display: flex;\\r\\n        gap: $header-left-gap;\\r\\n    }\\r\\n\\r\\n    &__right {\\r\\n        display: flex;\\r\\n        align-items: center;\\r\\n    }\\r\\n}","$brand: #B5460F;\\r\\n$brand-hover: rgba(181, 70, 15, 0.7);\\r\\n$brand-active: #872D01;\\r\\n\\r\\n$dark: black; \\r\\n$light: white;\\r\\n$gray: #AFADB5;\\r\\n\\r\\n$border-radius: 10px;\\r\\n\\r\\n$space-xl: 24px;\\r\\n$space-l: 20px;\\r\\n$space-m: 16px;\\r\\n$space-s: 14px;\\r\\n$space-xs: 12px;\\r\\n$space-xxs: 8px;"],"sourceRoot":""}]);\n// Exports\n___CSS_LOADER_EXPORT___.locals = {\n\t"header": `Header-module__header`,\n\t"header__left": `Header-module__header__left`,\n\t"header__right": `Header-module__header__right`\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiODYuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBO0FBQ2dIO0FBQ2pCO0FBQy9GLDhCQUE4QixtRkFBMkIsQ0FBQyw0RkFBcUM7QUFDL0Y7QUFDQSxpRUFBaUUsU0FBUyxzQkFBc0IsV0FBVyxZQUFZLHdCQUF3QixzQkFBc0IsYUFBYSw4QkFBOEIsNkJBQTZCLGFBQWEsU0FBUyw4QkFBOEIsYUFBYSxtQkFBbUIsT0FBTyxzVkFBc1YsK0JBQStCLG9CQUFvQixzQ0FBc0MsMkJBQTJCLGlCQUFpQixrQkFBa0IsK0JBQStCLG9CQUFvQiwwQkFBMEIsaUNBQWlDLHFDQUFxQyxzQkFBc0IsdUNBQXVDLHFCQUFxQiwwQkFBMEIsa0NBQWtDLFNBQVMsc0JBQXNCLDBCQUEwQixnQ0FBZ0MsU0FBUyxLQUFLLG1CQUFtQix5Q0FBeUMsMkJBQTJCLHNCQUFzQixrQkFBa0IsbUJBQW1CLDZCQUE2Qix3QkFBd0IsbUJBQW1CLG1CQUFtQixtQkFBbUIsb0JBQW9CLG9CQUFvQixtQkFBbUI7QUFDeC9DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlFQUFlLHVCQUF1QixFQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vMjAyNC1rdHNzdHVkaW8taG9tZXdvcmtzLy4vc3JjL2NvbXBvbmVudHMvSGVhZGVyL0hlYWRlci5tb2R1bGUuc2Nzcz9jN2ZhIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIGAuSGVhZGVyLW1vZHVsZV9faGVhZGVye21hcmdpbjowO2JveC1zaXppbmc6Ym9yZGVyLWJveDt3aWR0aDoxMDAlO2hlaWdodDo2NHB4O3BhZGRpbmc6MCAxMDBweCAwIDEwMHB4O2JhY2tncm91bmQtY29sb3I6I2ZmZjtkaXNwbGF5OmZsZXg7anVzdGlmeS1jb250ZW50OnNwYWNlLWJldHdlZW59LkhlYWRlci1tb2R1bGVfX2hlYWRlcl9fbGVmdHtkaXNwbGF5OmZsZXg7Z2FwOjgwcHh9LkhlYWRlci1tb2R1bGVfX2hlYWRlcl9fcmlnaHR7ZGlzcGxheTpmbGV4O2FsaWduLWl0ZW1zOmNlbnRlcn1gLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL3NyYy9jb21wb25lbnRzL0hlYWRlci9IZWFkZXIubW9kdWxlLnNjc3NcIixcIndlYnBhY2s6Ly8uL3NyYy9zdHlsZXMvdmFyaWFibGVzLnNjc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBT0EsdUJBQ0ksUUFBQSxDQUNBLHFCQUFBLENBQ0EsVUFBQSxDQUNBLFdBUk8sQ0FTUCx1QkFSYSxDQVNiLHFCQ1JJLENEU0osWUFBQSxDQUNBLDZCQUFBLENBRUEsNkJBQ0ksWUFBQSxDQUNBLFFBZFUsQ0FpQmQsOEJBQ0ksWUFBQSxDQUNBLGtCQUFBXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIkB1c2UgJ3N0eWxlcy92YXJpYWJsZXMuc2NzcycgYXMgdmFyO1xcclxcblxcclxcbiRoZWFkZXItYmc6IHZhci4kbGlnaHQ7XFxyXFxuJGhlYWRlci1oOiA2NHB4O1xcclxcbiRoZWFkZXItcGFkZGluZzogMCAxMDBweCAwIDEwMHB4OyBcXHJcXG4kaGVhZGVyLWxlZnQtZ2FwOiA4MHB4O1xcclxcblxcclxcbi5oZWFkZXIge1xcclxcbiAgICBtYXJnaW46IDA7XFxyXFxuICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XFxyXFxuICAgIHdpZHRoOiAxMDAlO1xcclxcbiAgICBoZWlnaHQ6ICRoZWFkZXItaDtcXHJcXG4gICAgcGFkZGluZzogJGhlYWRlci1wYWRkaW5nO1xcclxcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAkaGVhZGVyLWJnO1xcclxcbiAgICBkaXNwbGF5OiBmbGV4O1xcclxcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XFxyXFxuXFxyXFxuICAgICZfX2xlZnQge1xcclxcbiAgICAgICAgZGlzcGxheTogZmxleDtcXHJcXG4gICAgICAgIGdhcDogJGhlYWRlci1sZWZ0LWdhcDtcXHJcXG4gICAgfVxcclxcblxcclxcbiAgICAmX19yaWdodCB7XFxyXFxuICAgICAgICBkaXNwbGF5OiBmbGV4O1xcclxcbiAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXHJcXG4gICAgfVxcclxcbn1cIixcIiRicmFuZDogI0I1NDYwRjtcXHJcXG4kYnJhbmQtaG92ZXI6IHJnYmEoMTgxLCA3MCwgMTUsIDAuNyk7XFxyXFxuJGJyYW5kLWFjdGl2ZTogIzg3MkQwMTtcXHJcXG5cXHJcXG4kZGFyazogYmxhY2s7IFxcclxcbiRsaWdodDogd2hpdGU7XFxyXFxuJGdyYXk6ICNBRkFEQjU7XFxyXFxuXFxyXFxuJGJvcmRlci1yYWRpdXM6IDEwcHg7XFxyXFxuXFxyXFxuJHNwYWNlLXhsOiAyNHB4O1xcclxcbiRzcGFjZS1sOiAyMHB4O1xcclxcbiRzcGFjZS1tOiAxNnB4O1xcclxcbiRzcGFjZS1zOiAxNHB4O1xcclxcbiRzcGFjZS14czogMTJweDtcXHJcXG4kc3BhY2UteHhzOiA4cHg7XCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5sb2NhbHMgPSB7XG5cdFwiaGVhZGVyXCI6IGBIZWFkZXItbW9kdWxlX19oZWFkZXJgLFxuXHRcImhlYWRlcl9fbGVmdFwiOiBgSGVhZGVyLW1vZHVsZV9faGVhZGVyX19sZWZ0YCxcblx0XCJoZWFkZXJfX3JpZ2h0XCI6IGBIZWFkZXItbW9kdWxlX19oZWFkZXJfX3JpZ2h0YFxufTtcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///86\n')},7341:(module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   A: () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(963);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(9089);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);\n// Imports\n\n\nvar ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, `.LogoBlock-module__logo-block{display:flex;gap:20px;align-items:center;align-content:center;padding:0}`, "",{"version":3,"sources":["webpack://./src/components/Header/components/LogoBlock/LogoBlock.module.scss"],"names":[],"mappings":"AAEA,8BACI,YAAA,CACA,QAJa,CAKb,kBAAA,CACA,oBAAA,CACA,SAAA","sourcesContent":["$logo-block-gap: 20px;\\r\\n\\r\\n.logo-block {\\r\\n    display: flex;\\r\\n    gap: $logo-block-gap;\\r\\n    align-items: center;\\r\\n    align-content: center;\\r\\n    padding: 0;\\r\\n}"],"sourceRoot":""}]);\n// Exports\n___CSS_LOADER_EXPORT___.locals = {\n\t"logo-block": `LogoBlock-module__logo-block`\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNzM0MS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7QUFDc0g7QUFDakI7QUFDckcsOEJBQThCLG1GQUEyQixDQUFDLDRGQUFxQztBQUMvRjtBQUNBLHdFQUF3RSxhQUFhLFNBQVMsbUJBQW1CLHFCQUFxQixVQUFVLE9BQU8sa09BQWtPLHFCQUFxQixzQkFBc0IsNkJBQTZCLDRCQUE0Qiw4QkFBOEIsbUJBQW1CLEtBQUssbUJBQW1CO0FBQ3RpQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlFQUFlLHVCQUF1QixFQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vMjAyNC1rdHNzdHVkaW8taG9tZXdvcmtzLy4vc3JjL2NvbXBvbmVudHMvSGVhZGVyL2NvbXBvbmVudHMvTG9nb0Jsb2NrL0xvZ29CbG9jay5tb2R1bGUuc2Nzcz80YzE4Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIGAuTG9nb0Jsb2NrLW1vZHVsZV9fbG9nby1ibG9ja3tkaXNwbGF5OmZsZXg7Z2FwOjIwcHg7YWxpZ24taXRlbXM6Y2VudGVyO2FsaWduLWNvbnRlbnQ6Y2VudGVyO3BhZGRpbmc6MH1gLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL3NyYy9jb21wb25lbnRzL0hlYWRlci9jb21wb25lbnRzL0xvZ29CbG9jay9Mb2dvQmxvY2subW9kdWxlLnNjc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBRUEsOEJBQ0ksWUFBQSxDQUNBLFFBSmEsQ0FLYixrQkFBQSxDQUNBLG9CQUFBLENBQ0EsU0FBQVwiLFwic291cmNlc0NvbnRlbnRcIjpbXCIkbG9nby1ibG9jay1nYXA6IDIwcHg7XFxyXFxuXFxyXFxuLmxvZ28tYmxvY2sge1xcclxcbiAgICBkaXNwbGF5OiBmbGV4O1xcclxcbiAgICBnYXA6ICRsb2dvLWJsb2NrLWdhcDtcXHJcXG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXHJcXG4gICAgYWxpZ24tY29udGVudDogY2VudGVyO1xcclxcbiAgICBwYWRkaW5nOiAwO1xcclxcbn1cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLmxvY2FscyA9IHtcblx0XCJsb2dvLWJsb2NrXCI6IGBMb2dvQmxvY2stbW9kdWxlX19sb2dvLWJsb2NrYFxufTtcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///7341\n')},5725:(module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   A: () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(963);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(9089);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);\n// Imports\n\n\nvar ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, `.Menu-module__menu{display:flex;align-items:center;align-content:center;gap:16px}.Menu-module__menu__option:hover{color:#b5460f;cursor:pointer}.Menu-module__menu__option_selected{color:#b5460f}`, "",{"version":3,"sources":["webpack://./src/components/Header/components/Menu/Menu.module.scss","webpack://./src/styles/variables.scss"],"names":[],"mappings":"AAKA,mBACI,YAAA,CACA,kBAAA,CACA,oBAAA,CACA,QCGM,CDCF,iCACI,aCdJ,CDeI,cAAA,CAGJ,oCACI,aCnBJ","sourcesContent":["@use \'styles/variables.scss\' as var;\\r\\n\\r\\n$menu-gap: var.$space-m;\\r\\n$menu-option-hover: var.$brand;\\r\\n\\r\\n.menu {\\r\\n    display: flex;\\r\\n    align-items: center;\\r\\n    align-content: center;\\r\\n    gap: $menu-gap;\\r\\n\\r\\n    &__option {\\r\\n\\r\\n        &:hover {\\r\\n            color: $menu-option-hover;\\r\\n            cursor: pointer;\\r\\n        }\\r\\n\\r\\n        &_selected {\\r\\n            color: $menu-option-hover;\\r\\n        }\\r\\n    }\\r\\n}","$brand: #B5460F;\\r\\n$brand-hover: rgba(181, 70, 15, 0.7);\\r\\n$brand-active: #872D01;\\r\\n\\r\\n$dark: black; \\r\\n$light: white;\\r\\n$gray: #AFADB5;\\r\\n\\r\\n$border-radius: 10px;\\r\\n\\r\\n$space-xl: 24px;\\r\\n$space-l: 20px;\\r\\n$space-m: 16px;\\r\\n$space-s: 14px;\\r\\n$space-xs: 12px;\\r\\n$space-xxs: 8px;"],"sourceRoot":""}]);\n// Exports\n___CSS_LOADER_EXPORT___.locals = {\n\t"menu": `Menu-module__menu`,\n\t"menu__option": `Menu-module__menu__option`,\n\t"menu__option_selected": `Menu-module__menu__option_selected`\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTcyNS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7QUFDc0g7QUFDakI7QUFDckcsOEJBQThCLG1GQUEyQixDQUFDLDRGQUFxQztBQUMvRjtBQUNBLDZEQUE2RCxhQUFhLG1CQUFtQixxQkFBcUIsU0FBUyxpQ0FBaUMsY0FBYyxlQUFlLG9DQUFvQyxjQUFjLE9BQU8sK1NBQStTLGdDQUFnQyxtQ0FBbUMsZUFBZSxzQkFBc0IsNEJBQTRCLDhCQUE4Qix1QkFBdUIsdUJBQXVCLHlCQUF5QiwwQ0FBMEMsZ0NBQWdDLGFBQWEsNEJBQTRCLDBDQUEwQyxhQUFhLFNBQVMsS0FBSyxtQkFBbUIseUNBQXlDLDJCQUEyQixzQkFBc0Isa0JBQWtCLG1CQUFtQiw2QkFBNkIsd0JBQXdCLG1CQUFtQixtQkFBbUIsbUJBQW1CLG9CQUFvQixvQkFBb0IsbUJBQW1CO0FBQzd2QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpRUFBZSx1QkFBdUIsRUFBQyIsInNvdXJjZXMiOlsid2VicGFjazovLzIwMjQta3Rzc3R1ZGlvLWhvbWV3b3Jrcy8uL3NyYy9jb21wb25lbnRzL0hlYWRlci9jb21wb25lbnRzL01lbnUvTWVudS5tb2R1bGUuc2Nzcz80MTE4Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIGAuTWVudS1tb2R1bGVfX21lbnV7ZGlzcGxheTpmbGV4O2FsaWduLWl0ZW1zOmNlbnRlcjthbGlnbi1jb250ZW50OmNlbnRlcjtnYXA6MTZweH0uTWVudS1tb2R1bGVfX21lbnVfX29wdGlvbjpob3Zlcntjb2xvcjojYjU0NjBmO2N1cnNvcjpwb2ludGVyfS5NZW51LW1vZHVsZV9fbWVudV9fb3B0aW9uX3NlbGVjdGVke2NvbG9yOiNiNTQ2MGZ9YCwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9zcmMvY29tcG9uZW50cy9IZWFkZXIvY29tcG9uZW50cy9NZW51L01lbnUubW9kdWxlLnNjc3NcIixcIndlYnBhY2s6Ly8uL3NyYy9zdHlsZXMvdmFyaWFibGVzLnNjc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBS0EsbUJBQ0ksWUFBQSxDQUNBLGtCQUFBLENBQ0Esb0JBQUEsQ0FDQSxRQ0dNLENEQ0YsaUNBQ0ksYUNkSixDRGVJLGNBQUEsQ0FHSixvQ0FDSSxhQ25CSlwiLFwic291cmNlc0NvbnRlbnRcIjpbXCJAdXNlICdzdHlsZXMvdmFyaWFibGVzLnNjc3MnIGFzIHZhcjtcXHJcXG5cXHJcXG4kbWVudS1nYXA6IHZhci4kc3BhY2UtbTtcXHJcXG4kbWVudS1vcHRpb24taG92ZXI6IHZhci4kYnJhbmQ7XFxyXFxuXFxyXFxuLm1lbnUge1xcclxcbiAgICBkaXNwbGF5OiBmbGV4O1xcclxcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xcclxcbiAgICBhbGlnbi1jb250ZW50OiBjZW50ZXI7XFxyXFxuICAgIGdhcDogJG1lbnUtZ2FwO1xcclxcblxcclxcbiAgICAmX19vcHRpb24ge1xcclxcblxcclxcbiAgICAgICAgJjpob3ZlciB7XFxyXFxuICAgICAgICAgICAgY29sb3I6ICRtZW51LW9wdGlvbi1ob3ZlcjtcXHJcXG4gICAgICAgICAgICBjdXJzb3I6IHBvaW50ZXI7XFxyXFxuICAgICAgICB9XFxyXFxuXFxyXFxuICAgICAgICAmX3NlbGVjdGVkIHtcXHJcXG4gICAgICAgICAgICBjb2xvcjogJG1lbnUtb3B0aW9uLWhvdmVyO1xcclxcbiAgICAgICAgfVxcclxcbiAgICB9XFxyXFxufVwiLFwiJGJyYW5kOiAjQjU0NjBGO1xcclxcbiRicmFuZC1ob3ZlcjogcmdiYSgxODEsIDcwLCAxNSwgMC43KTtcXHJcXG4kYnJhbmQtYWN0aXZlOiAjODcyRDAxO1xcclxcblxcclxcbiRkYXJrOiBibGFjazsgXFxyXFxuJGxpZ2h0OiB3aGl0ZTtcXHJcXG4kZ3JheTogI0FGQURCNTtcXHJcXG5cXHJcXG4kYm9yZGVyLXJhZGl1czogMTBweDtcXHJcXG5cXHJcXG4kc3BhY2UteGw6IDI0cHg7XFxyXFxuJHNwYWNlLWw6IDIwcHg7XFxyXFxuJHNwYWNlLW06IDE2cHg7XFxyXFxuJHNwYWNlLXM6IDE0cHg7XFxyXFxuJHNwYWNlLXhzOiAxMnB4O1xcclxcbiRzcGFjZS14eHM6IDhweDtcIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLmxvY2FscyA9IHtcblx0XCJtZW51XCI6IGBNZW51LW1vZHVsZV9fbWVudWAsXG5cdFwibWVudV9fb3B0aW9uXCI6IGBNZW51LW1vZHVsZV9fbWVudV9fb3B0aW9uYCxcblx0XCJtZW51X19vcHRpb25fc2VsZWN0ZWRcIjogYE1lbnUtbW9kdWxlX19tZW51X19vcHRpb25fc2VsZWN0ZWRgXG59O1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///5725\n')},1293:(module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   A: () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(963);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(9089);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);\n// Imports\n\n\nvar ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, `.RightBlock-module__right-block{display:flex;align-items:center;align-content:center;gap:16px}`, "",{"version":3,"sources":["webpack://./src/components/Header/components/RightBlock/RightBlock.module.scss","webpack://./src/styles/variables.scss"],"names":[],"mappings":"AAIA,gCACI,YAAA,CACA,kBAAA,CACA,oBAAA,CACA,QCIM","sourcesContent":["@use \'styles/variables.scss\' as var;\\r\\n\\r\\n$right-block-gap: var.$space-m;\\r\\n\\r\\n.right-block {\\r\\n    display: flex;\\r\\n    align-items: center;\\r\\n    align-content: center;\\r\\n    gap: $right-block-gap;\\r\\n}","$brand: #B5460F;\\r\\n$brand-hover: rgba(181, 70, 15, 0.7);\\r\\n$brand-active: #872D01;\\r\\n\\r\\n$dark: black; \\r\\n$light: white;\\r\\n$gray: #AFADB5;\\r\\n\\r\\n$border-radius: 10px;\\r\\n\\r\\n$space-xl: 24px;\\r\\n$space-l: 20px;\\r\\n$space-m: 16px;\\r\\n$space-s: 14px;\\r\\n$space-xs: 12px;\\r\\n$space-xxs: 8px;"],"sourceRoot":""}]);\n// Exports\n___CSS_LOADER_EXPORT___.locals = {\n\t"right-block": `RightBlock-module__right-block`\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTI5My5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7QUFDc0g7QUFDakI7QUFDckcsOEJBQThCLG1GQUEyQixDQUFDLDRGQUFxQztBQUMvRjtBQUNBLDBFQUEwRSxhQUFhLG1CQUFtQixxQkFBcUIsU0FBUyxPQUFPLGdSQUFnUix1Q0FBdUMsc0JBQXNCLHNCQUFzQiw0QkFBNEIsOEJBQThCLDhCQUE4QixLQUFLLG1CQUFtQix5Q0FBeUMsMkJBQTJCLHNCQUFzQixrQkFBa0IsbUJBQW1CLDZCQUE2Qix3QkFBd0IsbUJBQW1CLG1CQUFtQixtQkFBbUIsb0JBQW9CLG9CQUFvQixtQkFBbUI7QUFDMTRCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUVBQWUsdUJBQXVCLEVBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8yMDI0LWt0c3N0dWRpby1ob21ld29ya3MvLi9zcmMvY29tcG9uZW50cy9IZWFkZXIvY29tcG9uZW50cy9SaWdodEJsb2NrL1JpZ2h0QmxvY2subW9kdWxlLnNjc3M/YTQ0MiJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBgLlJpZ2h0QmxvY2stbW9kdWxlX19yaWdodC1ibG9ja3tkaXNwbGF5OmZsZXg7YWxpZ24taXRlbXM6Y2VudGVyO2FsaWduLWNvbnRlbnQ6Y2VudGVyO2dhcDoxNnB4fWAsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vc3JjL2NvbXBvbmVudHMvSGVhZGVyL2NvbXBvbmVudHMvUmlnaHRCbG9jay9SaWdodEJsb2NrLm1vZHVsZS5zY3NzXCIsXCJ3ZWJwYWNrOi8vLi9zcmMvc3R5bGVzL3ZhcmlhYmxlcy5zY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUlBLGdDQUNJLFlBQUEsQ0FDQSxrQkFBQSxDQUNBLG9CQUFBLENBQ0EsUUNJTVwiLFwic291cmNlc0NvbnRlbnRcIjpbXCJAdXNlICdzdHlsZXMvdmFyaWFibGVzLnNjc3MnIGFzIHZhcjtcXHJcXG5cXHJcXG4kcmlnaHQtYmxvY2stZ2FwOiB2YXIuJHNwYWNlLW07XFxyXFxuXFxyXFxuLnJpZ2h0LWJsb2NrIHtcXHJcXG4gICAgZGlzcGxheTogZmxleDtcXHJcXG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXHJcXG4gICAgYWxpZ24tY29udGVudDogY2VudGVyO1xcclxcbiAgICBnYXA6ICRyaWdodC1ibG9jay1nYXA7XFxyXFxufVwiLFwiJGJyYW5kOiAjQjU0NjBGO1xcclxcbiRicmFuZC1ob3ZlcjogcmdiYSgxODEsIDcwLCAxNSwgMC43KTtcXHJcXG4kYnJhbmQtYWN0aXZlOiAjODcyRDAxO1xcclxcblxcclxcbiRkYXJrOiBibGFjazsgXFxyXFxuJGxpZ2h0OiB3aGl0ZTtcXHJcXG4kZ3JheTogI0FGQURCNTtcXHJcXG5cXHJcXG4kYm9yZGVyLXJhZGl1czogMTBweDtcXHJcXG5cXHJcXG4kc3BhY2UteGw6IDI0cHg7XFxyXFxuJHNwYWNlLWw6IDIwcHg7XFxyXFxuJHNwYWNlLW06IDE2cHg7XFxyXFxuJHNwYWNlLXM6IDE0cHg7XFxyXFxuJHNwYWNlLXhzOiAxMnB4O1xcclxcbiRzcGFjZS14eHM6IDhweDtcIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLmxvY2FscyA9IHtcblx0XCJyaWdodC1ibG9ja1wiOiBgUmlnaHRCbG9jay1tb2R1bGVfX3JpZ2h0LWJsb2NrYFxufTtcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///1293\n')},6742:(module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   A: () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(963);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(9089);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);\n// Imports\n\n\nvar ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, `.Input-module__inputblock{height:52px;position:relative;display:flex;gap:0;justify-content:space-between;align-content:center;align-items:center;background-color:#fff;border:1px solid #fff;border-radius:10px;padding-right:12px}.Input-module__inputblock:focus-within{border:1px solid #b5460f}.Input-module__inputblock_disabled:focus-within{border:1px solid #fff}.Input-module__inputblock__element{font-family:"Roboto";font-size:16px;background-color:#fff;padding:14px 12px;border:1px solid #fff;border-radius:10px;color:#000;outline:none;width:100%;height:100%;margin:0}.Input-module__inputblock__element::placeholder{color:#afadb5}.Input-module__inputblock__element:disabled{color:rgba(0,0,0,.2)}`, "",{"version":3,"sources":["webpack://./src/components/Input/Input.module.scss","webpack://./src/styles/variables.scss"],"names":[],"mappings":"AAiBA,0BACI,WAhBW,CAiBX,iBAAA,CACA,YAAA,CACA,KAAA,CACA,6BAAA,CACA,oBAAA,CACA,kBAAA,CAEA,qBCrBI,CDsBJ,qBAAA,CACA,kBCpBY,CD8BZ,kBCxBO,CDgBP,uCACI,wBAAA,CAGJ,gDACI,qBAAA,CAKJ,mCACI,oBAAA,CACA,cC9BE,CD+BF,qBCtCA,CDuCA,iBAvCQ,CAwCR,qBAAA,CACA,kBCtCQ,CDuCR,UC3CD,CD4CC,YAAA,CAEA,UAAA,CACA,WAAA,CACA,QAAA,CAEA,gDACI,aCjDL,CDoDC,4CACI,oBA5CU","sourcesContent":["@use \'styles/variables.scss\' as var;\\r\\n\\r\\n$input-height: 52px;\\r\\n\\r\\n$input-font-size: var.$space-m;\\r\\n$input-padding: var.$space-s var.$space-xs;\\r\\n\\r\\n$input-bg: var.$light;\\r\\n$input-placeholder: var.$gray;\\r\\n\\r\\n$input-border: var.$light;\\r\\n$input-border-focus: var.$brand;\\r\\n$input-border-radius: var.$border-radius;\\r\\n\\r\\n$input-text: var.$dark;\\r\\n$input-text-disabled: rgba(0, 0, 0, 0.2);\\r\\n\\r\\n.inputblock {\\r\\n    height: $input-height;\\r\\n    position: relative;\\r\\n    display: flex;\\r\\n    gap: 0;\\r\\n    justify-content: space-between;\\r\\n    align-content: center;\\r\\n    align-items: center;\\r\\n\\r\\n    background-color: $input-bg;\\r\\n    border: 1px solid $input-border;\\r\\n    border-radius: $input-border-radius;\\r\\n\\r\\n    &:focus-within {\\r\\n        border: 1px solid $input-border-focus;\\r\\n    }\\r\\n\\r\\n    &_disabled:focus-within {\\r\\n        border: 1px solid $input-border;\\r\\n    }\\r\\n\\r\\n    padding-right: var.$space-xs;\\r\\n\\r\\n    &__element {\\r\\n        font-family: \'Roboto\';\\r\\n        font-size: $input-font-size;\\r\\n        background-color: $input-bg;\\r\\n        padding: $input-padding;\\r\\n        border: 1px solid $input-border;\\r\\n        border-radius: $input-border-radius;\\r\\n        color: $input-text;\\r\\n        outline: none;\\r\\n\\r\\n        width: 100%;\\r\\n        height: 100%;\\r\\n        margin: 0;\\r\\n        \\r\\n        &::placeholder {\\r\\n            color: $input-placeholder;\\r\\n        }\\r\\n\\r\\n        &:disabled {\\r\\n            color: $input-text-disabled;    \\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\n","$brand: #B5460F;\\r\\n$brand-hover: rgba(181, 70, 15, 0.7);\\r\\n$brand-active: #872D01;\\r\\n\\r\\n$dark: black; \\r\\n$light: white;\\r\\n$gray: #AFADB5;\\r\\n\\r\\n$border-radius: 10px;\\r\\n\\r\\n$space-xl: 24px;\\r\\n$space-l: 20px;\\r\\n$space-m: 16px;\\r\\n$space-s: 14px;\\r\\n$space-xs: 12px;\\r\\n$space-xxs: 8px;"],"sourceRoot":""}]);\n// Exports\n___CSS_LOADER_EXPORT___.locals = {\n\t"inputblock": `Input-module__inputblock`,\n\t"inputblock_disabled": `Input-module__inputblock_disabled`,\n\t"inputblock__element": `Input-module__inputblock__element`\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNjc0Mi5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7QUFDZ0g7QUFDakI7QUFDL0YsOEJBQThCLG1GQUEyQixDQUFDLDRGQUFxQztBQUMvRjtBQUNBLG9FQUFvRSxZQUFZLGtCQUFrQixhQUFhLE1BQU0sOEJBQThCLHFCQUFxQixtQkFBbUIsc0JBQXNCLHNCQUFzQixtQkFBbUIsbUJBQW1CLHVDQUF1Qyx5QkFBeUIsZ0RBQWdELHNCQUFzQixtQ0FBbUMscUJBQXFCLGVBQWUsc0JBQXNCLGtCQUFrQixzQkFBc0IsbUJBQW1CLFdBQVcsYUFBYSxXQUFXLFlBQVksU0FBUyxnREFBZ0QsY0FBYyw0Q0FBNEMscUJBQXFCLE9BQU8sa2hCQUFraEIsNEJBQTRCLHVDQUF1QywrQ0FBK0MsOEJBQThCLGtDQUFrQyxrQ0FBa0Msb0NBQW9DLDZDQUE2QywrQkFBK0IsNkNBQTZDLHFCQUFxQiw4QkFBOEIsMkJBQTJCLHNCQUFzQixlQUFlLHVDQUF1Qyw4QkFBOEIsNEJBQTRCLHdDQUF3Qyx3Q0FBd0MsNENBQTRDLDRCQUE0QixrREFBa0QsU0FBUyxxQ0FBcUMsNENBQTRDLFNBQVMseUNBQXlDLHdCQUF3QixrQ0FBa0Msd0NBQXdDLHdDQUF3QyxvQ0FBb0MsNENBQTRDLGdEQUFnRCwrQkFBK0IsMEJBQTBCLDRCQUE0Qix5QkFBeUIsc0JBQXNCLHdDQUF3QywwQ0FBMEMsYUFBYSw0QkFBNEIsZ0RBQWdELGFBQWEsU0FBUyxLQUFLLDJCQUEyQix5Q0FBeUMsMkJBQTJCLHNCQUFzQixrQkFBa0IsbUJBQW1CLDZCQUE2Qix3QkFBd0IsbUJBQW1CLG1CQUFtQixtQkFBbUIsb0JBQW9CLG9CQUFvQixtQkFBbUI7QUFDN2lHO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlFQUFlLHVCQUF1QixFQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vMjAyNC1rdHNzdHVkaW8taG9tZXdvcmtzLy4vc3JjL2NvbXBvbmVudHMvSW5wdXQvSW5wdXQubW9kdWxlLnNjc3M/ZTgwOCJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBgLklucHV0LW1vZHVsZV9faW5wdXRibG9ja3toZWlnaHQ6NTJweDtwb3NpdGlvbjpyZWxhdGl2ZTtkaXNwbGF5OmZsZXg7Z2FwOjA7anVzdGlmeS1jb250ZW50OnNwYWNlLWJldHdlZW47YWxpZ24tY29udGVudDpjZW50ZXI7YWxpZ24taXRlbXM6Y2VudGVyO2JhY2tncm91bmQtY29sb3I6I2ZmZjtib3JkZXI6MXB4IHNvbGlkICNmZmY7Ym9yZGVyLXJhZGl1czoxMHB4O3BhZGRpbmctcmlnaHQ6MTJweH0uSW5wdXQtbW9kdWxlX19pbnB1dGJsb2NrOmZvY3VzLXdpdGhpbntib3JkZXI6MXB4IHNvbGlkICNiNTQ2MGZ9LklucHV0LW1vZHVsZV9faW5wdXRibG9ja19kaXNhYmxlZDpmb2N1cy13aXRoaW57Ym9yZGVyOjFweCBzb2xpZCAjZmZmfS5JbnB1dC1tb2R1bGVfX2lucHV0YmxvY2tfX2VsZW1lbnR7Zm9udC1mYW1pbHk6XCJSb2JvdG9cIjtmb250LXNpemU6MTZweDtiYWNrZ3JvdW5kLWNvbG9yOiNmZmY7cGFkZGluZzoxNHB4IDEycHg7Ym9yZGVyOjFweCBzb2xpZCAjZmZmO2JvcmRlci1yYWRpdXM6MTBweDtjb2xvcjojMDAwO291dGxpbmU6bm9uZTt3aWR0aDoxMDAlO2hlaWdodDoxMDAlO21hcmdpbjowfS5JbnB1dC1tb2R1bGVfX2lucHV0YmxvY2tfX2VsZW1lbnQ6OnBsYWNlaG9sZGVye2NvbG9yOiNhZmFkYjV9LklucHV0LW1vZHVsZV9faW5wdXRibG9ja19fZWxlbWVudDpkaXNhYmxlZHtjb2xvcjpyZ2JhKDAsMCwwLC4yKX1gLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL3NyYy9jb21wb25lbnRzL0lucHV0L0lucHV0Lm1vZHVsZS5zY3NzXCIsXCJ3ZWJwYWNrOi8vLi9zcmMvc3R5bGVzL3ZhcmlhYmxlcy5zY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQWlCQSwwQkFDSSxXQWhCVyxDQWlCWCxpQkFBQSxDQUNBLFlBQUEsQ0FDQSxLQUFBLENBQ0EsNkJBQUEsQ0FDQSxvQkFBQSxDQUNBLGtCQUFBLENBRUEscUJDckJJLENEc0JKLHFCQUFBLENBQ0Esa0JDcEJZLENEOEJaLGtCQ3hCTyxDRGdCUCx1Q0FDSSx3QkFBQSxDQUdKLGdEQUNJLHFCQUFBLENBS0osbUNBQ0ksb0JBQUEsQ0FDQSxjQzlCRSxDRCtCRixxQkN0Q0EsQ0R1Q0EsaUJBdkNRLENBd0NSLHFCQUFBLENBQ0Esa0JDdENRLENEdUNSLFVDM0NELENENENDLFlBQUEsQ0FFQSxVQUFBLENBQ0EsV0FBQSxDQUNBLFFBQUEsQ0FFQSxnREFDSSxhQ2pETCxDRG9EQyw0Q0FDSSxvQkE1Q1VcIixcInNvdXJjZXNDb250ZW50XCI6W1wiQHVzZSAnc3R5bGVzL3ZhcmlhYmxlcy5zY3NzJyBhcyB2YXI7XFxyXFxuXFxyXFxuJGlucHV0LWhlaWdodDogNTJweDtcXHJcXG5cXHJcXG4kaW5wdXQtZm9udC1zaXplOiB2YXIuJHNwYWNlLW07XFxyXFxuJGlucHV0LXBhZGRpbmc6IHZhci4kc3BhY2UtcyB2YXIuJHNwYWNlLXhzO1xcclxcblxcclxcbiRpbnB1dC1iZzogdmFyLiRsaWdodDtcXHJcXG4kaW5wdXQtcGxhY2Vob2xkZXI6IHZhci4kZ3JheTtcXHJcXG5cXHJcXG4kaW5wdXQtYm9yZGVyOiB2YXIuJGxpZ2h0O1xcclxcbiRpbnB1dC1ib3JkZXItZm9jdXM6IHZhci4kYnJhbmQ7XFxyXFxuJGlucHV0LWJvcmRlci1yYWRpdXM6IHZhci4kYm9yZGVyLXJhZGl1cztcXHJcXG5cXHJcXG4kaW5wdXQtdGV4dDogdmFyLiRkYXJrO1xcclxcbiRpbnB1dC10ZXh0LWRpc2FibGVkOiByZ2JhKDAsIDAsIDAsIDAuMik7XFxyXFxuXFxyXFxuLmlucHV0YmxvY2sge1xcclxcbiAgICBoZWlnaHQ6ICRpbnB1dC1oZWlnaHQ7XFxyXFxuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcXHJcXG4gICAgZGlzcGxheTogZmxleDtcXHJcXG4gICAgZ2FwOiAwO1xcclxcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XFxyXFxuICAgIGFsaWduLWNvbnRlbnQ6IGNlbnRlcjtcXHJcXG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXHJcXG5cXHJcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogJGlucHV0LWJnO1xcclxcbiAgICBib3JkZXI6IDFweCBzb2xpZCAkaW5wdXQtYm9yZGVyO1xcclxcbiAgICBib3JkZXItcmFkaXVzOiAkaW5wdXQtYm9yZGVyLXJhZGl1cztcXHJcXG5cXHJcXG4gICAgJjpmb2N1cy13aXRoaW4ge1xcclxcbiAgICAgICAgYm9yZGVyOiAxcHggc29saWQgJGlucHV0LWJvcmRlci1mb2N1cztcXHJcXG4gICAgfVxcclxcblxcclxcbiAgICAmX2Rpc2FibGVkOmZvY3VzLXdpdGhpbiB7XFxyXFxuICAgICAgICBib3JkZXI6IDFweCBzb2xpZCAkaW5wdXQtYm9yZGVyO1xcclxcbiAgICB9XFxyXFxuXFxyXFxuICAgIHBhZGRpbmctcmlnaHQ6IHZhci4kc3BhY2UteHM7XFxyXFxuXFxyXFxuICAgICZfX2VsZW1lbnQge1xcclxcbiAgICAgICAgZm9udC1mYW1pbHk6ICdSb2JvdG8nO1xcclxcbiAgICAgICAgZm9udC1zaXplOiAkaW5wdXQtZm9udC1zaXplO1xcclxcbiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogJGlucHV0LWJnO1xcclxcbiAgICAgICAgcGFkZGluZzogJGlucHV0LXBhZGRpbmc7XFxyXFxuICAgICAgICBib3JkZXI6IDFweCBzb2xpZCAkaW5wdXQtYm9yZGVyO1xcclxcbiAgICAgICAgYm9yZGVyLXJhZGl1czogJGlucHV0LWJvcmRlci1yYWRpdXM7XFxyXFxuICAgICAgICBjb2xvcjogJGlucHV0LXRleHQ7XFxyXFxuICAgICAgICBvdXRsaW5lOiBub25lO1xcclxcblxcclxcbiAgICAgICAgd2lkdGg6IDEwMCU7XFxyXFxuICAgICAgICBoZWlnaHQ6IDEwMCU7XFxyXFxuICAgICAgICBtYXJnaW46IDA7XFxyXFxuICAgICAgICBcXHJcXG4gICAgICAgICY6OnBsYWNlaG9sZGVyIHtcXHJcXG4gICAgICAgICAgICBjb2xvcjogJGlucHV0LXBsYWNlaG9sZGVyO1xcclxcbiAgICAgICAgfVxcclxcblxcclxcbiAgICAgICAgJjpkaXNhYmxlZCB7XFxyXFxuICAgICAgICAgICAgY29sb3I6ICRpbnB1dC10ZXh0LWRpc2FibGVkOyAgICBcXHJcXG4gICAgICAgIH1cXHJcXG4gICAgfVxcclxcbn1cXHJcXG5cXHJcXG5cIixcIiRicmFuZDogI0I1NDYwRjtcXHJcXG4kYnJhbmQtaG92ZXI6IHJnYmEoMTgxLCA3MCwgMTUsIDAuNyk7XFxyXFxuJGJyYW5kLWFjdGl2ZTogIzg3MkQwMTtcXHJcXG5cXHJcXG4kZGFyazogYmxhY2s7IFxcclxcbiRsaWdodDogd2hpdGU7XFxyXFxuJGdyYXk6ICNBRkFEQjU7XFxyXFxuXFxyXFxuJGJvcmRlci1yYWRpdXM6IDEwcHg7XFxyXFxuXFxyXFxuJHNwYWNlLXhsOiAyNHB4O1xcclxcbiRzcGFjZS1sOiAyMHB4O1xcclxcbiRzcGFjZS1tOiAxNnB4O1xcclxcbiRzcGFjZS1zOiAxNHB4O1xcclxcbiRzcGFjZS14czogMTJweDtcXHJcXG4kc3BhY2UteHhzOiA4cHg7XCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5sb2NhbHMgPSB7XG5cdFwiaW5wdXRibG9ja1wiOiBgSW5wdXQtbW9kdWxlX19pbnB1dGJsb2NrYCxcblx0XCJpbnB1dGJsb2NrX2Rpc2FibGVkXCI6IGBJbnB1dC1tb2R1bGVfX2lucHV0YmxvY2tfZGlzYWJsZWRgLFxuXHRcImlucHV0YmxvY2tfX2VsZW1lbnRcIjogYElucHV0LW1vZHVsZV9faW5wdXRibG9ja19fZWxlbWVudGBcbn07XG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///6742\n')},4088:(module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   A: () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(963);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(9089);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);\n// Imports\n\n\nvar ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, `.ListShower-module__list-shower{display:grid;column-gap:80px;row-gap:64px;grid-template-columns:repeat(auto-fit, 348px);justify-content:center}`, "",{"version":3,"sources":["webpack://./src/components/ListShower/ListShower.module.scss"],"names":[],"mappings":"AAAA,gCACI,YAAA,CACA,eAAA,CACA,YAAA,CACA,6CAAA,CACA,sBAAA","sourcesContent":[".list-shower {\\r\\n    display: grid;\\r\\n    column-gap: 80px;\\r\\n    row-gap: 64px;\\r\\n    grid-template-columns: repeat(auto-fit, 348px);\\r\\n    justify-content: center;\\r\\n}"],"sourceRoot":""}]);\n// Exports\n___CSS_LOADER_EXPORT___.locals = {\n\t"list-shower": `ListShower-module__list-shower`\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDA4OC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7QUFDZ0g7QUFDakI7QUFDL0YsOEJBQThCLG1GQUEyQixDQUFDLDRGQUFxQztBQUMvRjtBQUNBLDBFQUEwRSxhQUFhLGdCQUFnQixhQUFhLDhDQUE4Qyx1QkFBdUIsT0FBTywwTUFBME0sc0JBQXNCLHlCQUF5QixzQkFBc0IsdURBQXVELGdDQUFnQyxLQUFLLG1CQUFtQjtBQUM5akI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpRUFBZSx1QkFBdUIsRUFBQyIsInNvdXJjZXMiOlsid2VicGFjazovLzIwMjQta3Rzc3R1ZGlvLWhvbWV3b3Jrcy8uL3NyYy9jb21wb25lbnRzL0xpc3RTaG93ZXIvTGlzdFNob3dlci5tb2R1bGUuc2Nzcz8zNjM3Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIGAuTGlzdFNob3dlci1tb2R1bGVfX2xpc3Qtc2hvd2Vye2Rpc3BsYXk6Z3JpZDtjb2x1bW4tZ2FwOjgwcHg7cm93LWdhcDo2NHB4O2dyaWQtdGVtcGxhdGUtY29sdW1uczpyZXBlYXQoYXV0by1maXQsIDM0OHB4KTtqdXN0aWZ5LWNvbnRlbnQ6Y2VudGVyfWAsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vc3JjL2NvbXBvbmVudHMvTGlzdFNob3dlci9MaXN0U2hvd2VyLm1vZHVsZS5zY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUFBLGdDQUNJLFlBQUEsQ0FDQSxlQUFBLENBQ0EsWUFBQSxDQUNBLDZDQUFBLENBQ0Esc0JBQUFcIixcInNvdXJjZXNDb250ZW50XCI6W1wiLmxpc3Qtc2hvd2VyIHtcXHJcXG4gICAgZGlzcGxheTogZ3JpZDtcXHJcXG4gICAgY29sdW1uLWdhcDogODBweDtcXHJcXG4gICAgcm93LWdhcDogNjRweDtcXHJcXG4gICAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiByZXBlYXQoYXV0by1maXQsIDM0OHB4KTtcXHJcXG4gICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxyXFxufVwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ubG9jYWxzID0ge1xuXHRcImxpc3Qtc2hvd2VyXCI6IGBMaXN0U2hvd2VyLW1vZHVsZV9fbGlzdC1zaG93ZXJgXG59O1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///4088\n')},8618:(module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   A: () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(963);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(9089);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);\n// Imports\n\n\nvar ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, `@keyframes Loader-module__loader-rotate{0%{transform:rotate(121deg)}67%{transform:rotate(360deg)}100%{transform:rotate(481deg)}}.Loader-module__loader{border-radius:50%;border-color:#b5460f;border-style:solid;border-top-style:inset;border-right-style:inset;border-top-color:rgba(0,0,0,0);transform:rotate(121deg);animation:Loader-module__loader-rotate 3s linear infinite}.Loader-module__loader_size_s{width:calc(8px*2);height:calc(8px*2);margin:calc(8px*2/4);border-width:calc(8px*2/8)}.Loader-module__loader_size_m{width:calc(8px*4);height:calc(8px*4);margin:calc(8px*4/4);border-width:calc(8px*4/8)}.Loader-module__loader_size_l{width:calc(8px*5);height:calc(8px*5);margin:calc(8px*5/4);border-width:calc(8px*5/8)}`, "",{"version":3,"sources":["webpack://./src/components/Loader/Loader.module.scss","webpack://./src/styles/variables.scss"],"names":[],"mappings":"AAMA,wCACI,GACI,wBAAA,CAGJ,IACI,wBAAA,CAGJ,KACI,wBAAA,CAAA,CAIR,uBACI,iBAAA,CACA,oBCtBI,CDuBJ,kBAAA,CACA,sBAAA,CACA,wBAAA,CACA,8BAAA,CACA,wBAAA,CAEA,yDAAA,CAGI,8BACI,iBA/BR,CAgCQ,kBAhCR,CAiCQ,oBAAA,CACA,0BAAA,CAGJ,8BACI,iBArCR,CAsCQ,kBAtCR,CAuCQ,oBAAA,CACA,0BAAA,CAGJ,8BACI,iBA3CR,CA4CQ,kBA5CR,CA6CQ,oBAAA,CACA,0BAAA","sourcesContent":["@use \'styles/variables.scss\' as var;\\r\\n\\r\\n$s: calc(#{var.$space-xxs} * 2);\\r\\n$m: calc(#{var.$space-xxs} * 4);\\r\\n$l: calc(#{var.$space-xxs} * 5);\\r\\n\\r\\n@keyframes loader-rotate {\\r\\n    0% {\\r\\n        transform: rotate(121deg);\\r\\n    }\\r\\n\\r\\n    67% {\\r\\n        transform: rotate(360deg);\\r\\n    }\\r\\n\\r\\n    100% {\\r\\n        transform: rotate(481deg);\\r\\n    }\\r\\n}\\r\\n\\r\\n.loader {\\r\\n    border-radius: 50%;\\r\\n    border-color: var.$brand;\\r\\n    border-style: solid;\\r\\n    border-top-style: inset;\\r\\n    border-right-style: inset;\\r\\n    border-top-color: transparent;\\r\\n    transform: rotate(121deg);\\r\\n\\r\\n    animation: loader-rotate 3s linear infinite;\\r\\n\\r\\n    &_size {\\r\\n        &_s {\\r\\n            width: $s;\\r\\n            height: $s;\\r\\n            margin: calc($s / 4);\\r\\n            border-width: calc($s / 8);\\r\\n        }\\r\\n    \\r\\n        &_m {\\r\\n            width: $m;\\r\\n            height: $m;\\r\\n            margin: calc($m / 4);\\r\\n            border-width: calc($m / 8);\\r\\n        }\\r\\n    \\r\\n        &_l {\\r\\n            width: $l;\\r\\n            height: $l;\\r\\n            margin: calc($l / 4);\\r\\n            border-width: calc($l / 8);\\r\\n        }\\r\\n    }\\r\\n}","$brand: #B5460F;\\r\\n$brand-hover: rgba(181, 70, 15, 0.7);\\r\\n$brand-active: #872D01;\\r\\n\\r\\n$dark: black; \\r\\n$light: white;\\r\\n$gray: #AFADB5;\\r\\n\\r\\n$border-radius: 10px;\\r\\n\\r\\n$space-xl: 24px;\\r\\n$space-l: 20px;\\r\\n$space-m: 16px;\\r\\n$space-s: 14px;\\r\\n$space-xs: 12px;\\r\\n$space-xxs: 8px;"],"sourceRoot":""}]);\n// Exports\n___CSS_LOADER_EXPORT___.locals = {\n\t"loader": `Loader-module__loader`,\n\t"loader-rotate": `Loader-module__loader-rotate`,\n\t"loader_size_s": `Loader-module__loader_size_s`,\n\t"loader_size_m": `Loader-module__loader_size_m`,\n\t"loader_size_l": `Loader-module__loader_size_l`\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiODYxOC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7QUFDZ0g7QUFDakI7QUFDL0YsOEJBQThCLG1GQUEyQixDQUFDLDRGQUFxQztBQUMvRjtBQUNBLGtGQUFrRixHQUFHLHlCQUF5QixJQUFJLHlCQUF5QixLQUFLLDBCQUEwQix1QkFBdUIsa0JBQWtCLHFCQUFxQixtQkFBbUIsdUJBQXVCLHlCQUF5QiwrQkFBK0IseUJBQXlCLDBEQUEwRCw4QkFBOEIsa0JBQWtCLG1CQUFtQixxQkFBcUIsMkJBQTJCLDhCQUE4QixrQkFBa0IsbUJBQW1CLHFCQUFxQiwyQkFBMkIsOEJBQThCLGtCQUFrQixtQkFBbUIscUJBQXFCLDJCQUEyQixPQUFPLG1nQkFBbWdCLG1CQUFtQixnQkFBZ0IsS0FBSyxlQUFlLGdCQUFnQixLQUFLLGVBQWUsZ0JBQWdCLEtBQUssa0NBQWtDLFlBQVksc0NBQXNDLFNBQVMsaUJBQWlCLHNDQUFzQyxTQUFTLGtCQUFrQixzQ0FBc0MsU0FBUyxLQUFLLGlCQUFpQiwyQkFBMkIsaUNBQWlDLDRCQUE0QixnQ0FBZ0Msa0NBQWtDLHNDQUFzQyxrQ0FBa0Msd0RBQXdELG9CQUFvQixpQkFBaUIsMEJBQTBCLDJCQUEyQixxQ0FBcUMsMkNBQTJDLGFBQWEseUJBQXlCLDBCQUEwQiwyQkFBMkIscUNBQXFDLDJDQUEyQyxhQUFhLHlCQUF5QiwwQkFBMEIsMkJBQTJCLHFDQUFxQywyQ0FBMkMsYUFBYSxTQUFTLEtBQUssbUJBQW1CLHlDQUF5QywyQkFBMkIsc0JBQXNCLGtCQUFrQixtQkFBbUIsNkJBQTZCLHdCQUF3QixtQkFBbUIsbUJBQW1CLG1CQUFtQixvQkFBb0Isb0JBQW9CLG1CQUFtQjtBQUNwdEY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlFQUFlLHVCQUF1QixFQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vMjAyNC1rdHNzdHVkaW8taG9tZXdvcmtzLy4vc3JjL2NvbXBvbmVudHMvTG9hZGVyL0xvYWRlci5tb2R1bGUuc2Nzcz82ZmUwIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIGBAa2V5ZnJhbWVzIExvYWRlci1tb2R1bGVfX2xvYWRlci1yb3RhdGV7MCV7dHJhbnNmb3JtOnJvdGF0ZSgxMjFkZWcpfTY3JXt0cmFuc2Zvcm06cm90YXRlKDM2MGRlZyl9MTAwJXt0cmFuc2Zvcm06cm90YXRlKDQ4MWRlZyl9fS5Mb2FkZXItbW9kdWxlX19sb2FkZXJ7Ym9yZGVyLXJhZGl1czo1MCU7Ym9yZGVyLWNvbG9yOiNiNTQ2MGY7Ym9yZGVyLXN0eWxlOnNvbGlkO2JvcmRlci10b3Atc3R5bGU6aW5zZXQ7Ym9yZGVyLXJpZ2h0LXN0eWxlOmluc2V0O2JvcmRlci10b3AtY29sb3I6cmdiYSgwLDAsMCwwKTt0cmFuc2Zvcm06cm90YXRlKDEyMWRlZyk7YW5pbWF0aW9uOkxvYWRlci1tb2R1bGVfX2xvYWRlci1yb3RhdGUgM3MgbGluZWFyIGluZmluaXRlfS5Mb2FkZXItbW9kdWxlX19sb2FkZXJfc2l6ZV9ze3dpZHRoOmNhbGMoOHB4KjIpO2hlaWdodDpjYWxjKDhweCoyKTttYXJnaW46Y2FsYyg4cHgqMi80KTtib3JkZXItd2lkdGg6Y2FsYyg4cHgqMi84KX0uTG9hZGVyLW1vZHVsZV9fbG9hZGVyX3NpemVfbXt3aWR0aDpjYWxjKDhweCo0KTtoZWlnaHQ6Y2FsYyg4cHgqNCk7bWFyZ2luOmNhbGMoOHB4KjQvNCk7Ym9yZGVyLXdpZHRoOmNhbGMoOHB4KjQvOCl9LkxvYWRlci1tb2R1bGVfX2xvYWRlcl9zaXplX2x7d2lkdGg6Y2FsYyg4cHgqNSk7aGVpZ2h0OmNhbGMoOHB4KjUpO21hcmdpbjpjYWxjKDhweCo1LzQpO2JvcmRlci13aWR0aDpjYWxjKDhweCo1LzgpfWAsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vc3JjL2NvbXBvbmVudHMvTG9hZGVyL0xvYWRlci5tb2R1bGUuc2Nzc1wiLFwid2VicGFjazovLy4vc3JjL3N0eWxlcy92YXJpYWJsZXMuc2Nzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFNQSx3Q0FDSSxHQUNJLHdCQUFBLENBR0osSUFDSSx3QkFBQSxDQUdKLEtBQ0ksd0JBQUEsQ0FBQSxDQUlSLHVCQUNJLGlCQUFBLENBQ0Esb0JDdEJJLENEdUJKLGtCQUFBLENBQ0Esc0JBQUEsQ0FDQSx3QkFBQSxDQUNBLDhCQUFBLENBQ0Esd0JBQUEsQ0FFQSx5REFBQSxDQUdJLDhCQUNJLGlCQS9CUixDQWdDUSxrQkFoQ1IsQ0FpQ1Esb0JBQUEsQ0FDQSwwQkFBQSxDQUdKLDhCQUNJLGlCQXJDUixDQXNDUSxrQkF0Q1IsQ0F1Q1Esb0JBQUEsQ0FDQSwwQkFBQSxDQUdKLDhCQUNJLGlCQTNDUixDQTRDUSxrQkE1Q1IsQ0E2Q1Esb0JBQUEsQ0FDQSwwQkFBQVwiLFwic291cmNlc0NvbnRlbnRcIjpbXCJAdXNlICdzdHlsZXMvdmFyaWFibGVzLnNjc3MnIGFzIHZhcjtcXHJcXG5cXHJcXG4kczogY2FsYygje3Zhci4kc3BhY2UteHhzfSAqIDIpO1xcclxcbiRtOiBjYWxjKCN7dmFyLiRzcGFjZS14eHN9ICogNCk7XFxyXFxuJGw6IGNhbGMoI3t2YXIuJHNwYWNlLXh4c30gKiA1KTtcXHJcXG5cXHJcXG5Aa2V5ZnJhbWVzIGxvYWRlci1yb3RhdGUge1xcclxcbiAgICAwJSB7XFxyXFxuICAgICAgICB0cmFuc2Zvcm06IHJvdGF0ZSgxMjFkZWcpO1xcclxcbiAgICB9XFxyXFxuXFxyXFxuICAgIDY3JSB7XFxyXFxuICAgICAgICB0cmFuc2Zvcm06IHJvdGF0ZSgzNjBkZWcpO1xcclxcbiAgICB9XFxyXFxuXFxyXFxuICAgIDEwMCUge1xcclxcbiAgICAgICAgdHJhbnNmb3JtOiByb3RhdGUoNDgxZGVnKTtcXHJcXG4gICAgfVxcclxcbn1cXHJcXG5cXHJcXG4ubG9hZGVyIHtcXHJcXG4gICAgYm9yZGVyLXJhZGl1czogNTAlO1xcclxcbiAgICBib3JkZXItY29sb3I6IHZhci4kYnJhbmQ7XFxyXFxuICAgIGJvcmRlci1zdHlsZTogc29saWQ7XFxyXFxuICAgIGJvcmRlci10b3Atc3R5bGU6IGluc2V0O1xcclxcbiAgICBib3JkZXItcmlnaHQtc3R5bGU6IGluc2V0O1xcclxcbiAgICBib3JkZXItdG9wLWNvbG9yOiB0cmFuc3BhcmVudDtcXHJcXG4gICAgdHJhbnNmb3JtOiByb3RhdGUoMTIxZGVnKTtcXHJcXG5cXHJcXG4gICAgYW5pbWF0aW9uOiBsb2FkZXItcm90YXRlIDNzIGxpbmVhciBpbmZpbml0ZTtcXHJcXG5cXHJcXG4gICAgJl9zaXplIHtcXHJcXG4gICAgICAgICZfcyB7XFxyXFxuICAgICAgICAgICAgd2lkdGg6ICRzO1xcclxcbiAgICAgICAgICAgIGhlaWdodDogJHM7XFxyXFxuICAgICAgICAgICAgbWFyZ2luOiBjYWxjKCRzIC8gNCk7XFxyXFxuICAgICAgICAgICAgYm9yZGVyLXdpZHRoOiBjYWxjKCRzIC8gOCk7XFxyXFxuICAgICAgICB9XFxyXFxuICAgIFxcclxcbiAgICAgICAgJl9tIHtcXHJcXG4gICAgICAgICAgICB3aWR0aDogJG07XFxyXFxuICAgICAgICAgICAgaGVpZ2h0OiAkbTtcXHJcXG4gICAgICAgICAgICBtYXJnaW46IGNhbGMoJG0gLyA0KTtcXHJcXG4gICAgICAgICAgICBib3JkZXItd2lkdGg6IGNhbGMoJG0gLyA4KTtcXHJcXG4gICAgICAgIH1cXHJcXG4gICAgXFxyXFxuICAgICAgICAmX2wge1xcclxcbiAgICAgICAgICAgIHdpZHRoOiAkbDtcXHJcXG4gICAgICAgICAgICBoZWlnaHQ6ICRsO1xcclxcbiAgICAgICAgICAgIG1hcmdpbjogY2FsYygkbCAvIDQpO1xcclxcbiAgICAgICAgICAgIGJvcmRlci13aWR0aDogY2FsYygkbCAvIDgpO1xcclxcbiAgICAgICAgfVxcclxcbiAgICB9XFxyXFxufVwiLFwiJGJyYW5kOiAjQjU0NjBGO1xcclxcbiRicmFuZC1ob3ZlcjogcmdiYSgxODEsIDcwLCAxNSwgMC43KTtcXHJcXG4kYnJhbmQtYWN0aXZlOiAjODcyRDAxO1xcclxcblxcclxcbiRkYXJrOiBibGFjazsgXFxyXFxuJGxpZ2h0OiB3aGl0ZTtcXHJcXG4kZ3JheTogI0FGQURCNTtcXHJcXG5cXHJcXG4kYm9yZGVyLXJhZGl1czogMTBweDtcXHJcXG5cXHJcXG4kc3BhY2UteGw6IDI0cHg7XFxyXFxuJHNwYWNlLWw6IDIwcHg7XFxyXFxuJHNwYWNlLW06IDE2cHg7XFxyXFxuJHNwYWNlLXM6IDE0cHg7XFxyXFxuJHNwYWNlLXhzOiAxMnB4O1xcclxcbiRzcGFjZS14eHM6IDhweDtcIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLmxvY2FscyA9IHtcblx0XCJsb2FkZXJcIjogYExvYWRlci1tb2R1bGVfX2xvYWRlcmAsXG5cdFwibG9hZGVyLXJvdGF0ZVwiOiBgTG9hZGVyLW1vZHVsZV9fbG9hZGVyLXJvdGF0ZWAsXG5cdFwibG9hZGVyX3NpemVfc1wiOiBgTG9hZGVyLW1vZHVsZV9fbG9hZGVyX3NpemVfc2AsXG5cdFwibG9hZGVyX3NpemVfbVwiOiBgTG9hZGVyLW1vZHVsZV9fbG9hZGVyX3NpemVfbWAsXG5cdFwibG9hZGVyX3NpemVfbFwiOiBgTG9hZGVyLW1vZHVsZV9fbG9hZGVyX3NpemVfbGBcbn07XG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///8618\n')},7374:(module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   A: () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(963);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(9089);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);\n// Imports\n\n\nvar ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, `.Main-module__main{box-sizing:border-box;width:100%;min-height:100vh;background-color:rgba(255,192,118,.23)}`, "",{"version":3,"sources":["webpack://./src/components/Main/Main.module.scss"],"names":[],"mappings":"AAEA,mBACI,qBAAA,CACA,UAAA,CACA,gBAAA,CACA,sCANM","sourcesContent":["$main-bg: rgba(255, 192, 118, 0.23);\\r\\n\\r\\n.main {\\r\\n    box-sizing: border-box;\\r\\n    width: 100%;\\r\\n    min-height: 100vh;\\r\\n    background-color: $main-bg;\\r\\n}"],"sourceRoot":""}]);\n// Exports\n___CSS_LOADER_EXPORT___.locals = {\n\t"main": `Main-module__main`\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNzM3NC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7QUFDZ0g7QUFDakI7QUFDL0YsOEJBQThCLG1GQUEyQixDQUFDLDRGQUFxQztBQUMvRjtBQUNBLDZEQUE2RCxzQkFBc0IsV0FBVyxpQkFBaUIsdUNBQXVDLE9BQU8sMk1BQTJNLGVBQWUsK0JBQStCLG9CQUFvQiwwQkFBMEIsbUNBQW1DLEtBQUssbUJBQW1CO0FBQy9mO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUVBQWUsdUJBQXVCLEVBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8yMDI0LWt0c3N0dWRpby1ob21ld29ya3MvLi9zcmMvY29tcG9uZW50cy9NYWluL01haW4ubW9kdWxlLnNjc3M/MWNiMyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBgLk1haW4tbW9kdWxlX19tYWlue2JveC1zaXppbmc6Ym9yZGVyLWJveDt3aWR0aDoxMDAlO21pbi1oZWlnaHQ6MTAwdmg7YmFja2dyb3VuZC1jb2xvcjpyZ2JhKDI1NSwxOTIsMTE4LC4yMyl9YCwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9zcmMvY29tcG9uZW50cy9NYWluL01haW4ubW9kdWxlLnNjc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBRUEsbUJBQ0kscUJBQUEsQ0FDQSxVQUFBLENBQ0EsZ0JBQUEsQ0FDQSxzQ0FOTVwiLFwic291cmNlc0NvbnRlbnRcIjpbXCIkbWFpbi1iZzogcmdiYSgyNTUsIDE5MiwgMTE4LCAwLjIzKTtcXHJcXG5cXHJcXG4ubWFpbiB7XFxyXFxuICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XFxyXFxuICAgIHdpZHRoOiAxMDAlO1xcclxcbiAgICBtaW4taGVpZ2h0OiAxMDB2aDtcXHJcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogJG1haW4tYmc7XFxyXFxufVwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ubG9jYWxzID0ge1xuXHRcIm1haW5cIjogYE1haW4tbW9kdWxlX19tYWluYFxufTtcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///7374\n')},1562:(module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   A: () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(963);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(9089);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);\n// Imports\n\n\nvar ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, `.MultiDropdown-module__multidropdown{display:flex;flex-direction:column;padding:0;position:relative}.MultiDropdown-module__multidropdown__options{background-color:#fff;box-shadow:0px 4px 10px 0px rgba(0,0,0,.25);border-radius:10px;position:absolute;top:100%;width:100%;left:0;margin-top:8px;overflow-y:auto;max-height:144px;z-index:100}.MultiDropdown-module__multidropdown__options::-webkit-scrollbar{width:10px;border-radius:10px}.MultiDropdown-module__multidropdown__options::-webkit-scrollbar-thumb{background:#afadb5;border-radius:10px}.MultiDropdown-module__multidropdown__options__option{padding:14px 12px;cursor:pointer}.MultiDropdown-module__multidropdown__options__option:hover{color:#afadb5}.MultiDropdown-module__multidropdown__options__option_selected,.MultiDropdown-module__multidropdown__options__option_selected:hover{color:#b5460f}`, "",{"version":3,"sources":["webpack://./src/components/MultiDropdown/MultiDropdown.module.scss","webpack://./src/styles/variables.scss"],"names":[],"mappings":"AAUA,qCACI,YAAA,CACA,qBAAA,CACA,SAAA,CACA,iBAAA,CAEA,8CACI,qBCZA,CDaA,2CAdS,CAeT,kBCXQ,CDYR,iBAAA,CACA,QAAA,CACA,UAAA,CACA,MAAA,CACA,cCTI,CDUJ,eAAA,CACA,gBAAA,CACA,WAAA,CAEA,iEACI,UCtBI,CDuBJ,kBCvBI,CDyBJ,uEACI,kBC5BT,CD6BS,kBC3BA,CD+BR,sDACI,iBAnCK,CAoCL,cAAA,CAEA,4DACI,aCtCT,CDyCK,oIACI,aChDR","sourcesContent":["@use \'styles/variables.scss\' as var;\\r\\n\\r\\n$multidropdown-gap: var.$space-xxs;\\r\\n$options-bg: var.$light;\\r\\n$options-shadow: 0px 4px 10px 0px rgba(0, 0, 0, 0.25);\\r\\n$option-padding: var.$space-s var.$space-xs; \\r\\n$option-color-hover: var.$gray;\\r\\n$option-color-selected: var.$brand;\\r\\n$option-border: var.$border-radius;\\r\\n\\r\\n.multidropdown {\\r\\n    display: flex;\\r\\n    flex-direction: column;\\r\\n    padding: 0;\\r\\n    position: relative;\\r\\n\\r\\n    &__options {\\r\\n        background-color: $options-bg;\\r\\n        box-shadow: $options-shadow;\\r\\n        border-radius: $option-border;\\r\\n        position: absolute;\\r\\n        top: 100%;\\r\\n        width: 100%;\\r\\n        left: 0;\\r\\n        margin-top: $multidropdown-gap;\\r\\n        overflow-y: auto;\\r\\n        max-height: calc(48px * 3);\\r\\n        z-index: 100;\\r\\n\\r\\n        &::-webkit-scrollbar {\\r\\n            width: $option-border;\\r\\n            border-radius: $option-border;\\r\\n\\r\\n            &-thumb {\\r\\n                background: $option-color-hover;\\r\\n                border-radius: $option-border;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        &__option {\\r\\n            padding: $option-padding;\\r\\n            cursor: pointer;\\r\\n\\r\\n            &:hover {\\r\\n                color: $option-color-hover;\\r\\n            }\\r\\n\\r\\n            &_selected, &_selected:hover {\\r\\n                color: $option-color-selected;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}","$brand: #B5460F;\\r\\n$brand-hover: rgba(181, 70, 15, 0.7);\\r\\n$brand-active: #872D01;\\r\\n\\r\\n$dark: black; \\r\\n$light: white;\\r\\n$gray: #AFADB5;\\r\\n\\r\\n$border-radius: 10px;\\r\\n\\r\\n$space-xl: 24px;\\r\\n$space-l: 20px;\\r\\n$space-m: 16px;\\r\\n$space-s: 14px;\\r\\n$space-xs: 12px;\\r\\n$space-xxs: 8px;"],"sourceRoot":""}]);\n// Exports\n___CSS_LOADER_EXPORT___.locals = {\n\t"multidropdown": `MultiDropdown-module__multidropdown`,\n\t"multidropdown__options": `MultiDropdown-module__multidropdown__options`,\n\t"multidropdown__options__option": `MultiDropdown-module__multidropdown__options__option`,\n\t"multidropdown__options__option_selected": `MultiDropdown-module__multidropdown__options__option_selected`\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTU2Mi5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7QUFDZ0g7QUFDakI7QUFDL0YsOEJBQThCLG1GQUEyQixDQUFDLDRGQUFxQztBQUMvRjtBQUNBLCtFQUErRSxhQUFhLHNCQUFzQixVQUFVLGtCQUFrQiw4Q0FBOEMsc0JBQXNCLDRDQUE0QyxtQkFBbUIsa0JBQWtCLFNBQVMsV0FBVyxPQUFPLGVBQWUsZ0JBQWdCLGlCQUFpQixZQUFZLGlFQUFpRSxXQUFXLG1CQUFtQix1RUFBdUUsbUJBQW1CLG1CQUFtQixzREFBc0Qsa0JBQWtCLGVBQWUsNERBQTRELGNBQWMsb0lBQW9JLGNBQWMsT0FBTyw0ZkFBNGYsMkNBQTJDLDRCQUE0QiwwREFBMEQsaURBQWlELG1DQUFtQyx1Q0FBdUMsdUNBQXVDLHdCQUF3QixzQkFBc0IsK0JBQStCLG1CQUFtQiwyQkFBMkIsd0JBQXdCLDBDQUEwQyx3Q0FBd0MsMENBQTBDLCtCQUErQixzQkFBc0Isd0JBQXdCLG9CQUFvQiwyQ0FBMkMsNkJBQTZCLHVDQUF1Qyx5QkFBeUIsc0NBQXNDLHNDQUFzQyw4Q0FBOEMsNkJBQTZCLG9EQUFvRCxrREFBa0QsaUJBQWlCLGFBQWEsMkJBQTJCLHlDQUF5QyxnQ0FBZ0MsNkJBQTZCLCtDQUErQyxpQkFBaUIsa0RBQWtELGtEQUFrRCxpQkFBaUIsYUFBYSxTQUFTLEtBQUssbUJBQW1CLHlDQUF5QywyQkFBMkIsc0JBQXNCLGtCQUFrQixtQkFBbUIsNkJBQTZCLHdCQUF3QixtQkFBbUIsbUJBQW1CLG1CQUFtQixvQkFBb0Isb0JBQW9CLG1CQUFtQjtBQUM5akc7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpRUFBZSx1QkFBdUIsRUFBQyIsInNvdXJjZXMiOlsid2VicGFjazovLzIwMjQta3Rzc3R1ZGlvLWhvbWV3b3Jrcy8uL3NyYy9jb21wb25lbnRzL011bHRpRHJvcGRvd24vTXVsdGlEcm9wZG93bi5tb2R1bGUuc2Nzcz83OWE1Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIGAuTXVsdGlEcm9wZG93bi1tb2R1bGVfX211bHRpZHJvcGRvd257ZGlzcGxheTpmbGV4O2ZsZXgtZGlyZWN0aW9uOmNvbHVtbjtwYWRkaW5nOjA7cG9zaXRpb246cmVsYXRpdmV9Lk11bHRpRHJvcGRvd24tbW9kdWxlX19tdWx0aWRyb3Bkb3duX19vcHRpb25ze2JhY2tncm91bmQtY29sb3I6I2ZmZjtib3gtc2hhZG93OjBweCA0cHggMTBweCAwcHggcmdiYSgwLDAsMCwuMjUpO2JvcmRlci1yYWRpdXM6MTBweDtwb3NpdGlvbjphYnNvbHV0ZTt0b3A6MTAwJTt3aWR0aDoxMDAlO2xlZnQ6MDttYXJnaW4tdG9wOjhweDtvdmVyZmxvdy15OmF1dG87bWF4LWhlaWdodDoxNDRweDt6LWluZGV4OjEwMH0uTXVsdGlEcm9wZG93bi1tb2R1bGVfX211bHRpZHJvcGRvd25fX29wdGlvbnM6Oi13ZWJraXQtc2Nyb2xsYmFye3dpZHRoOjEwcHg7Ym9yZGVyLXJhZGl1czoxMHB4fS5NdWx0aURyb3Bkb3duLW1vZHVsZV9fbXVsdGlkcm9wZG93bl9fb3B0aW9uczo6LXdlYmtpdC1zY3JvbGxiYXItdGh1bWJ7YmFja2dyb3VuZDojYWZhZGI1O2JvcmRlci1yYWRpdXM6MTBweH0uTXVsdGlEcm9wZG93bi1tb2R1bGVfX211bHRpZHJvcGRvd25fX29wdGlvbnNfX29wdGlvbntwYWRkaW5nOjE0cHggMTJweDtjdXJzb3I6cG9pbnRlcn0uTXVsdGlEcm9wZG93bi1tb2R1bGVfX211bHRpZHJvcGRvd25fX29wdGlvbnNfX29wdGlvbjpob3Zlcntjb2xvcjojYWZhZGI1fS5NdWx0aURyb3Bkb3duLW1vZHVsZV9fbXVsdGlkcm9wZG93bl9fb3B0aW9uc19fb3B0aW9uX3NlbGVjdGVkLC5NdWx0aURyb3Bkb3duLW1vZHVsZV9fbXVsdGlkcm9wZG93bl9fb3B0aW9uc19fb3B0aW9uX3NlbGVjdGVkOmhvdmVye2NvbG9yOiNiNTQ2MGZ9YCwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9zcmMvY29tcG9uZW50cy9NdWx0aURyb3Bkb3duL011bHRpRHJvcGRvd24ubW9kdWxlLnNjc3NcIixcIndlYnBhY2s6Ly8uL3NyYy9zdHlsZXMvdmFyaWFibGVzLnNjc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBVUEscUNBQ0ksWUFBQSxDQUNBLHFCQUFBLENBQ0EsU0FBQSxDQUNBLGlCQUFBLENBRUEsOENBQ0kscUJDWkEsQ0RhQSwyQ0FkUyxDQWVULGtCQ1hRLENEWVIsaUJBQUEsQ0FDQSxRQUFBLENBQ0EsVUFBQSxDQUNBLE1BQUEsQ0FDQSxjQ1RJLENEVUosZUFBQSxDQUNBLGdCQUFBLENBQ0EsV0FBQSxDQUVBLGlFQUNJLFVDdEJJLENEdUJKLGtCQ3ZCSSxDRHlCSix1RUFDSSxrQkM1QlQsQ0Q2QlMsa0JDM0JBLENEK0JSLHNEQUNJLGlCQW5DSyxDQW9DTCxjQUFBLENBRUEsNERBQ0ksYUN0Q1QsQ0R5Q0ssb0lBQ0ksYUNoRFJcIixcInNvdXJjZXNDb250ZW50XCI6W1wiQHVzZSAnc3R5bGVzL3ZhcmlhYmxlcy5zY3NzJyBhcyB2YXI7XFxyXFxuXFxyXFxuJG11bHRpZHJvcGRvd24tZ2FwOiB2YXIuJHNwYWNlLXh4cztcXHJcXG4kb3B0aW9ucy1iZzogdmFyLiRsaWdodDtcXHJcXG4kb3B0aW9ucy1zaGFkb3c6IDBweCA0cHggMTBweCAwcHggcmdiYSgwLCAwLCAwLCAwLjI1KTtcXHJcXG4kb3B0aW9uLXBhZGRpbmc6IHZhci4kc3BhY2UtcyB2YXIuJHNwYWNlLXhzOyBcXHJcXG4kb3B0aW9uLWNvbG9yLWhvdmVyOiB2YXIuJGdyYXk7XFxyXFxuJG9wdGlvbi1jb2xvci1zZWxlY3RlZDogdmFyLiRicmFuZDtcXHJcXG4kb3B0aW9uLWJvcmRlcjogdmFyLiRib3JkZXItcmFkaXVzO1xcclxcblxcclxcbi5tdWx0aWRyb3Bkb3duIHtcXHJcXG4gICAgZGlzcGxheTogZmxleDtcXHJcXG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXHJcXG4gICAgcGFkZGluZzogMDtcXHJcXG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xcclxcblxcclxcbiAgICAmX19vcHRpb25zIHtcXHJcXG4gICAgICAgIGJhY2tncm91bmQtY29sb3I6ICRvcHRpb25zLWJnO1xcclxcbiAgICAgICAgYm94LXNoYWRvdzogJG9wdGlvbnMtc2hhZG93O1xcclxcbiAgICAgICAgYm9yZGVyLXJhZGl1czogJG9wdGlvbi1ib3JkZXI7XFxyXFxuICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XFxyXFxuICAgICAgICB0b3A6IDEwMCU7XFxyXFxuICAgICAgICB3aWR0aDogMTAwJTtcXHJcXG4gICAgICAgIGxlZnQ6IDA7XFxyXFxuICAgICAgICBtYXJnaW4tdG9wOiAkbXVsdGlkcm9wZG93bi1nYXA7XFxyXFxuICAgICAgICBvdmVyZmxvdy15OiBhdXRvO1xcclxcbiAgICAgICAgbWF4LWhlaWdodDogY2FsYyg0OHB4ICogMyk7XFxyXFxuICAgICAgICB6LWluZGV4OiAxMDA7XFxyXFxuXFxyXFxuICAgICAgICAmOjotd2Via2l0LXNjcm9sbGJhciB7XFxyXFxuICAgICAgICAgICAgd2lkdGg6ICRvcHRpb24tYm9yZGVyO1xcclxcbiAgICAgICAgICAgIGJvcmRlci1yYWRpdXM6ICRvcHRpb24tYm9yZGVyO1xcclxcblxcclxcbiAgICAgICAgICAgICYtdGh1bWIge1xcclxcbiAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kOiAkb3B0aW9uLWNvbG9yLWhvdmVyO1xcclxcbiAgICAgICAgICAgICAgICBib3JkZXItcmFkaXVzOiAkb3B0aW9uLWJvcmRlcjtcXHJcXG4gICAgICAgICAgICB9XFxyXFxuICAgICAgICB9XFxyXFxuXFxyXFxuICAgICAgICAmX19vcHRpb24ge1xcclxcbiAgICAgICAgICAgIHBhZGRpbmc6ICRvcHRpb24tcGFkZGluZztcXHJcXG4gICAgICAgICAgICBjdXJzb3I6IHBvaW50ZXI7XFxyXFxuXFxyXFxuICAgICAgICAgICAgJjpob3ZlciB7XFxyXFxuICAgICAgICAgICAgICAgIGNvbG9yOiAkb3B0aW9uLWNvbG9yLWhvdmVyO1xcclxcbiAgICAgICAgICAgIH1cXHJcXG5cXHJcXG4gICAgICAgICAgICAmX3NlbGVjdGVkLCAmX3NlbGVjdGVkOmhvdmVyIHtcXHJcXG4gICAgICAgICAgICAgICAgY29sb3I6ICRvcHRpb24tY29sb3Itc2VsZWN0ZWQ7XFxyXFxuICAgICAgICAgICAgfVxcclxcbiAgICAgICAgfVxcclxcbiAgICB9XFxyXFxufVwiLFwiJGJyYW5kOiAjQjU0NjBGO1xcclxcbiRicmFuZC1ob3ZlcjogcmdiYSgxODEsIDcwLCAxNSwgMC43KTtcXHJcXG4kYnJhbmQtYWN0aXZlOiAjODcyRDAxO1xcclxcblxcclxcbiRkYXJrOiBibGFjazsgXFxyXFxuJGxpZ2h0OiB3aGl0ZTtcXHJcXG4kZ3JheTogI0FGQURCNTtcXHJcXG5cXHJcXG4kYm9yZGVyLXJhZGl1czogMTBweDtcXHJcXG5cXHJcXG4kc3BhY2UteGw6IDI0cHg7XFxyXFxuJHNwYWNlLWw6IDIwcHg7XFxyXFxuJHNwYWNlLW06IDE2cHg7XFxyXFxuJHNwYWNlLXM6IDE0cHg7XFxyXFxuJHNwYWNlLXhzOiAxMnB4O1xcclxcbiRzcGFjZS14eHM6IDhweDtcIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLmxvY2FscyA9IHtcblx0XCJtdWx0aWRyb3Bkb3duXCI6IGBNdWx0aURyb3Bkb3duLW1vZHVsZV9fbXVsdGlkcm9wZG93bmAsXG5cdFwibXVsdGlkcm9wZG93bl9fb3B0aW9uc1wiOiBgTXVsdGlEcm9wZG93bi1tb2R1bGVfX211bHRpZHJvcGRvd25fX29wdGlvbnNgLFxuXHRcIm11bHRpZHJvcGRvd25fX29wdGlvbnNfX29wdGlvblwiOiBgTXVsdGlEcm9wZG93bi1tb2R1bGVfX211bHRpZHJvcGRvd25fX29wdGlvbnNfX29wdGlvbmAsXG5cdFwibXVsdGlkcm9wZG93bl9fb3B0aW9uc19fb3B0aW9uX3NlbGVjdGVkXCI6IGBNdWx0aURyb3Bkb3duLW1vZHVsZV9fbXVsdGlkcm9wZG93bl9fb3B0aW9uc19fb3B0aW9uX3NlbGVjdGVkYFxufTtcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///1562\n')},1078:(module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   A: () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(963);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(9089);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);\n// Imports\n\n\nvar ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, `.PageController-module__page-controller{margin:0 auto;display:flex;gap:15px}.PageController-module__page-controller__numbers{display:flex;gap:0}.PageController-module__page-controller__numbers__number,.PageController-module__page-controller__numbers__points{cursor:pointer;width:38px;height:42px;text-align:center;display:flex;align-items:center;justify-content:center}.PageController-module__page-controller__numbers__number_selected,.PageController-module__page-controller__numbers__points_selected{background-color:#b5460f;color:#fff}`, "",{"version":3,"sources":["webpack://./src/components/PageController/PageController.module.scss","webpack://./src/styles/variables.scss"],"names":[],"mappings":"AAEA,wCACI,aAAA,CACA,YAAA,CACA,QAAA,CAEA,iDACI,YAAA,CACA,KAAA,CAEA,kHACI,cAAA,CACA,UAAA,CACA,WAAA,CACA,iBAAA,CACA,YAAA,CACA,kBAAA,CACA,sBAAA,CAEA,oIACI,wBCrBR,CDsBQ,UCjBR","sourcesContent":["@use \'styles/variables.scss\' as var;\\r\\n\\r\\n.page-controller {\\r\\n    margin: 0 auto;\\r\\n    display: flex;\\r\\n    gap: 15px;\\r\\n\\r\\n    &__numbers {\\r\\n        display: flex;\\r\\n        gap: 0;\\r\\n\\r\\n        &__number, &__points {\\r\\n            cursor: pointer;\\r\\n            width: 38px;\\r\\n            height: 42px;\\r\\n            text-align: center;\\r\\n            display: flex;\\r\\n            align-items: center;\\r\\n            justify-content: center;\\r\\n\\r\\n            &_selected {\\r\\n                background-color: var.$brand;\\r\\n                color: var.$light;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}","$brand: #B5460F;\\r\\n$brand-hover: rgba(181, 70, 15, 0.7);\\r\\n$brand-active: #872D01;\\r\\n\\r\\n$dark: black; \\r\\n$light: white;\\r\\n$gray: #AFADB5;\\r\\n\\r\\n$border-radius: 10px;\\r\\n\\r\\n$space-xl: 24px;\\r\\n$space-l: 20px;\\r\\n$space-m: 16px;\\r\\n$space-s: 14px;\\r\\n$space-xs: 12px;\\r\\n$space-xxs: 8px;"],"sourceRoot":""}]);\n// Exports\n___CSS_LOADER_EXPORT___.locals = {\n\t"page-controller": `PageController-module__page-controller`,\n\t"page-controller__numbers": `PageController-module__page-controller__numbers`,\n\t"page-controller__numbers__number": `PageController-module__page-controller__numbers__number`,\n\t"page-controller__numbers__points": `PageController-module__page-controller__numbers__points`,\n\t"page-controller__numbers__number_selected": `PageController-module__page-controller__numbers__number_selected`,\n\t"page-controller__numbers__points_selected": `PageController-module__page-controller__numbers__points_selected`\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTA3OC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7QUFDZ0g7QUFDakI7QUFDL0YsOEJBQThCLG1GQUEyQixDQUFDLDRGQUFxQztBQUMvRjtBQUNBLGtGQUFrRixjQUFjLGFBQWEsU0FBUyxpREFBaUQsYUFBYSxNQUFNLGtIQUFrSCxlQUFlLFdBQVcsWUFBWSxrQkFBa0IsYUFBYSxtQkFBbUIsdUJBQXVCLG9JQUFvSSx5QkFBeUIsV0FBVyxPQUFPLGlZQUFpWSwwQkFBMEIsdUJBQXVCLHNCQUFzQixrQkFBa0Isd0JBQXdCLDBCQUEwQixtQkFBbUIsc0NBQXNDLGdDQUFnQyw0QkFBNEIsNkJBQTZCLG1DQUFtQyw4QkFBOEIsb0NBQW9DLHdDQUF3QyxnQ0FBZ0MsaURBQWlELHNDQUFzQyxpQkFBaUIsYUFBYSxTQUFTLEtBQUssbUJBQW1CLHlDQUF5QywyQkFBMkIsc0JBQXNCLGtCQUFrQixtQkFBbUIsNkJBQTZCLHdCQUF3QixtQkFBbUIsbUJBQW1CLG1CQUFtQixvQkFBb0Isb0JBQW9CLG1CQUFtQjtBQUNuMUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUVBQWUsdUJBQXVCLEVBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8yMDI0LWt0c3N0dWRpby1ob21ld29ya3MvLi9zcmMvY29tcG9uZW50cy9QYWdlQ29udHJvbGxlci9QYWdlQ29udHJvbGxlci5tb2R1bGUuc2Nzcz8xMzkxIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIGAuUGFnZUNvbnRyb2xsZXItbW9kdWxlX19wYWdlLWNvbnRyb2xsZXJ7bWFyZ2luOjAgYXV0bztkaXNwbGF5OmZsZXg7Z2FwOjE1cHh9LlBhZ2VDb250cm9sbGVyLW1vZHVsZV9fcGFnZS1jb250cm9sbGVyX19udW1iZXJze2Rpc3BsYXk6ZmxleDtnYXA6MH0uUGFnZUNvbnRyb2xsZXItbW9kdWxlX19wYWdlLWNvbnRyb2xsZXJfX251bWJlcnNfX251bWJlciwuUGFnZUNvbnRyb2xsZXItbW9kdWxlX19wYWdlLWNvbnRyb2xsZXJfX251bWJlcnNfX3BvaW50c3tjdXJzb3I6cG9pbnRlcjt3aWR0aDozOHB4O2hlaWdodDo0MnB4O3RleHQtYWxpZ246Y2VudGVyO2Rpc3BsYXk6ZmxleDthbGlnbi1pdGVtczpjZW50ZXI7anVzdGlmeS1jb250ZW50OmNlbnRlcn0uUGFnZUNvbnRyb2xsZXItbW9kdWxlX19wYWdlLWNvbnRyb2xsZXJfX251bWJlcnNfX251bWJlcl9zZWxlY3RlZCwuUGFnZUNvbnRyb2xsZXItbW9kdWxlX19wYWdlLWNvbnRyb2xsZXJfX251bWJlcnNfX3BvaW50c19zZWxlY3RlZHtiYWNrZ3JvdW5kLWNvbG9yOiNiNTQ2MGY7Y29sb3I6I2ZmZn1gLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL3NyYy9jb21wb25lbnRzL1BhZ2VDb250cm9sbGVyL1BhZ2VDb250cm9sbGVyLm1vZHVsZS5zY3NzXCIsXCJ3ZWJwYWNrOi8vLi9zcmMvc3R5bGVzL3ZhcmlhYmxlcy5zY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUVBLHdDQUNJLGFBQUEsQ0FDQSxZQUFBLENBQ0EsUUFBQSxDQUVBLGlEQUNJLFlBQUEsQ0FDQSxLQUFBLENBRUEsa0hBQ0ksY0FBQSxDQUNBLFVBQUEsQ0FDQSxXQUFBLENBQ0EsaUJBQUEsQ0FDQSxZQUFBLENBQ0Esa0JBQUEsQ0FDQSxzQkFBQSxDQUVBLG9JQUNJLHdCQ3JCUixDRHNCUSxVQ2pCUlwiLFwic291cmNlc0NvbnRlbnRcIjpbXCJAdXNlICdzdHlsZXMvdmFyaWFibGVzLnNjc3MnIGFzIHZhcjtcXHJcXG5cXHJcXG4ucGFnZS1jb250cm9sbGVyIHtcXHJcXG4gICAgbWFyZ2luOiAwIGF1dG87XFxyXFxuICAgIGRpc3BsYXk6IGZsZXg7XFxyXFxuICAgIGdhcDogMTVweDtcXHJcXG5cXHJcXG4gICAgJl9fbnVtYmVycyB7XFxyXFxuICAgICAgICBkaXNwbGF5OiBmbGV4O1xcclxcbiAgICAgICAgZ2FwOiAwO1xcclxcblxcclxcbiAgICAgICAgJl9fbnVtYmVyLCAmX19wb2ludHMge1xcclxcbiAgICAgICAgICAgIGN1cnNvcjogcG9pbnRlcjtcXHJcXG4gICAgICAgICAgICB3aWR0aDogMzhweDtcXHJcXG4gICAgICAgICAgICBoZWlnaHQ6IDQycHg7XFxyXFxuICAgICAgICAgICAgdGV4dC1hbGlnbjogY2VudGVyO1xcclxcbiAgICAgICAgICAgIGRpc3BsYXk6IGZsZXg7XFxyXFxuICAgICAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXHJcXG4gICAgICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXHJcXG5cXHJcXG4gICAgICAgICAgICAmX3NlbGVjdGVkIHtcXHJcXG4gICAgICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogdmFyLiRicmFuZDtcXHJcXG4gICAgICAgICAgICAgICAgY29sb3I6IHZhci4kbGlnaHQ7XFxyXFxuICAgICAgICAgICAgfVxcclxcbiAgICAgICAgfVxcclxcbiAgICB9XFxyXFxufVwiLFwiJGJyYW5kOiAjQjU0NjBGO1xcclxcbiRicmFuZC1ob3ZlcjogcmdiYSgxODEsIDcwLCAxNSwgMC43KTtcXHJcXG4kYnJhbmQtYWN0aXZlOiAjODcyRDAxO1xcclxcblxcclxcbiRkYXJrOiBibGFjazsgXFxyXFxuJGxpZ2h0OiB3aGl0ZTtcXHJcXG4kZ3JheTogI0FGQURCNTtcXHJcXG5cXHJcXG4kYm9yZGVyLXJhZGl1czogMTBweDtcXHJcXG5cXHJcXG4kc3BhY2UteGw6IDI0cHg7XFxyXFxuJHNwYWNlLWw6IDIwcHg7XFxyXFxuJHNwYWNlLW06IDE2cHg7XFxyXFxuJHNwYWNlLXM6IDE0cHg7XFxyXFxuJHNwYWNlLXhzOiAxMnB4O1xcclxcbiRzcGFjZS14eHM6IDhweDtcIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLmxvY2FscyA9IHtcblx0XCJwYWdlLWNvbnRyb2xsZXJcIjogYFBhZ2VDb250cm9sbGVyLW1vZHVsZV9fcGFnZS1jb250cm9sbGVyYCxcblx0XCJwYWdlLWNvbnRyb2xsZXJfX251bWJlcnNcIjogYFBhZ2VDb250cm9sbGVyLW1vZHVsZV9fcGFnZS1jb250cm9sbGVyX19udW1iZXJzYCxcblx0XCJwYWdlLWNvbnRyb2xsZXJfX251bWJlcnNfX251bWJlclwiOiBgUGFnZUNvbnRyb2xsZXItbW9kdWxlX19wYWdlLWNvbnRyb2xsZXJfX251bWJlcnNfX251bWJlcmAsXG5cdFwicGFnZS1jb250cm9sbGVyX19udW1iZXJzX19wb2ludHNcIjogYFBhZ2VDb250cm9sbGVyLW1vZHVsZV9fcGFnZS1jb250cm9sbGVyX19udW1iZXJzX19wb2ludHNgLFxuXHRcInBhZ2UtY29udHJvbGxlcl9fbnVtYmVyc19fbnVtYmVyX3NlbGVjdGVkXCI6IGBQYWdlQ29udHJvbGxlci1tb2R1bGVfX3BhZ2UtY29udHJvbGxlcl9fbnVtYmVyc19fbnVtYmVyX3NlbGVjdGVkYCxcblx0XCJwYWdlLWNvbnRyb2xsZXJfX251bWJlcnNfX3BvaW50c19zZWxlY3RlZFwiOiBgUGFnZUNvbnRyb2xsZXItbW9kdWxlX19wYWdlLWNvbnRyb2xsZXJfX251bWJlcnNfX3BvaW50c19zZWxlY3RlZGBcbn07XG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///1078\n')},8526:(module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   A: () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(963);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(9089);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);\n// Imports\n\n\nvar ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, `.PageTemplate-module__page-template{margin:50px 100px 0 100px;display:flex;flex-direction:column;gap:48px;padding-bottom:50px}.PageTemplate-module__page-template__name{text-align:center}.PageTemplate-module__page-template__content{display:flex;flex-direction:column;gap:24px}`, "",{"version":3,"sources":["webpack://./src/components/PageTemplate/PageTemplate.module.scss"],"names":[],"mappings":"AAKA,oCAEI,yBAPU,CAQV,YAAA,CACA,qBAAA,CACA,QAPO,CAQP,mBAVkB,CAYlB,0CACI,iBAAA,CAGJ,6CACI,YAAA,CACA,qBAAA,CACA,QAlBW","sourcesContent":["$page-margin: 50px 100px 0 100px;\\r\\n$page-padding-bottom: 50px;\\r\\n$page-content-gap: 24px;\\r\\n$page-gap: 48px;\\r\\n\\r\\n.page-template {\\r\\n\\r\\n    margin: $page-margin;\\r\\n    display: flex;\\r\\n    flex-direction: column;\\r\\n    gap: $page-gap;\\r\\n    padding-bottom: $page-padding-bottom;\\r\\n\\r\\n    &__name {\\r\\n        text-align: center;\\r\\n    }\\r\\n\\r\\n    &__content {\\r\\n        display: flex;\\r\\n        flex-direction: column;\\r\\n        gap: $page-content-gap;\\r\\n    }    \\r\\n}"],"sourceRoot":""}]);\n// Exports\n___CSS_LOADER_EXPORT___.locals = {\n\t"page-template": `PageTemplate-module__page-template`,\n\t"page-template__name": `PageTemplate-module__page-template__name`,\n\t"page-template__content": `PageTemplate-module__page-template__content`\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiODUyNi5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7QUFDZ0g7QUFDakI7QUFDL0YsOEJBQThCLG1GQUEyQixDQUFDLDRGQUFxQztBQUMvRjtBQUNBLDhFQUE4RSwwQkFBMEIsYUFBYSxzQkFBc0IsU0FBUyxvQkFBb0IsMENBQTBDLGtCQUFrQiw2Q0FBNkMsYUFBYSxzQkFBc0IsU0FBUyxPQUFPLDJSQUEyUiwrQkFBK0IsNEJBQTRCLG9CQUFvQix3QkFBd0IsaUNBQWlDLHNCQUFzQiwrQkFBK0IsdUJBQXVCLDZDQUE2QyxxQkFBcUIsK0JBQStCLFNBQVMsd0JBQXdCLDBCQUEwQixtQ0FBbUMsbUNBQW1DLGFBQWEsS0FBSyxtQkFBbUI7QUFDMWpDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlFQUFlLHVCQUF1QixFQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vMjAyNC1rdHNzdHVkaW8taG9tZXdvcmtzLy4vc3JjL2NvbXBvbmVudHMvUGFnZVRlbXBsYXRlL1BhZ2VUZW1wbGF0ZS5tb2R1bGUuc2Nzcz9iN2IxIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIGAuUGFnZVRlbXBsYXRlLW1vZHVsZV9fcGFnZS10ZW1wbGF0ZXttYXJnaW46NTBweCAxMDBweCAwIDEwMHB4O2Rpc3BsYXk6ZmxleDtmbGV4LWRpcmVjdGlvbjpjb2x1bW47Z2FwOjQ4cHg7cGFkZGluZy1ib3R0b206NTBweH0uUGFnZVRlbXBsYXRlLW1vZHVsZV9fcGFnZS10ZW1wbGF0ZV9fbmFtZXt0ZXh0LWFsaWduOmNlbnRlcn0uUGFnZVRlbXBsYXRlLW1vZHVsZV9fcGFnZS10ZW1wbGF0ZV9fY29udGVudHtkaXNwbGF5OmZsZXg7ZmxleC1kaXJlY3Rpb246Y29sdW1uO2dhcDoyNHB4fWAsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vc3JjL2NvbXBvbmVudHMvUGFnZVRlbXBsYXRlL1BhZ2VUZW1wbGF0ZS5tb2R1bGUuc2Nzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFLQSxvQ0FFSSx5QkFQVSxDQVFWLFlBQUEsQ0FDQSxxQkFBQSxDQUNBLFFBUE8sQ0FRUCxtQkFWa0IsQ0FZbEIsMENBQ0ksaUJBQUEsQ0FHSiw2Q0FDSSxZQUFBLENBQ0EscUJBQUEsQ0FDQSxRQWxCV1wiLFwic291cmNlc0NvbnRlbnRcIjpbXCIkcGFnZS1tYXJnaW46IDUwcHggMTAwcHggMCAxMDBweDtcXHJcXG4kcGFnZS1wYWRkaW5nLWJvdHRvbTogNTBweDtcXHJcXG4kcGFnZS1jb250ZW50LWdhcDogMjRweDtcXHJcXG4kcGFnZS1nYXA6IDQ4cHg7XFxyXFxuXFxyXFxuLnBhZ2UtdGVtcGxhdGUge1xcclxcblxcclxcbiAgICBtYXJnaW46ICRwYWdlLW1hcmdpbjtcXHJcXG4gICAgZGlzcGxheTogZmxleDtcXHJcXG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXHJcXG4gICAgZ2FwOiAkcGFnZS1nYXA7XFxyXFxuICAgIHBhZGRpbmctYm90dG9tOiAkcGFnZS1wYWRkaW5nLWJvdHRvbTtcXHJcXG5cXHJcXG4gICAgJl9fbmFtZSB7XFxyXFxuICAgICAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxyXFxuICAgIH1cXHJcXG5cXHJcXG4gICAgJl9fY29udGVudCB7XFxyXFxuICAgICAgICBkaXNwbGF5OiBmbGV4O1xcclxcbiAgICAgICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXHJcXG4gICAgICAgIGdhcDogJHBhZ2UtY29udGVudC1nYXA7XFxyXFxuICAgIH0gICAgXFxyXFxufVwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ubG9jYWxzID0ge1xuXHRcInBhZ2UtdGVtcGxhdGVcIjogYFBhZ2VUZW1wbGF0ZS1tb2R1bGVfX3BhZ2UtdGVtcGxhdGVgLFxuXHRcInBhZ2UtdGVtcGxhdGVfX25hbWVcIjogYFBhZ2VUZW1wbGF0ZS1tb2R1bGVfX3BhZ2UtdGVtcGxhdGVfX25hbWVgLFxuXHRcInBhZ2UtdGVtcGxhdGVfX2NvbnRlbnRcIjogYFBhZ2VUZW1wbGF0ZS1tb2R1bGVfX3BhZ2UtdGVtcGxhdGVfX2NvbnRlbnRgXG59O1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///8526\n')},9676:(module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   A: () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(963);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(9089);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);\n// Imports\n\n\nvar ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, `.RecipeCardCaption-module__recipe-card-caption{display:flex;align-items:center;justify-content:start;gap:6px}`, "",{"version":3,"sources":["webpack://./src/components/RecipeCard/components/RecipeCardCaption/RecipeCardCaption.module.scss"],"names":[],"mappings":"AAAA,+CACI,YAAA,CACA,kBAAA,CACA,qBAAA,CACA,OAAA","sourcesContent":[".recipe-card-caption {\\r\\n    display: flex;\\r\\n    align-items: center;\\r\\n    justify-content: start;\\r\\n    gap: 6px;\\r\\n}"],"sourceRoot":""}]);\n// Exports\n___CSS_LOADER_EXPORT___.locals = {\n\t"recipe-card-caption": `RecipeCardCaption-module__recipe-card-caption`\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTY3Ni5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7QUFDc0g7QUFDakI7QUFDckcsOEJBQThCLG1GQUEyQixDQUFDLDRGQUFxQztBQUMvRjtBQUNBLHlGQUF5RixhQUFhLG1CQUFtQixzQkFBc0IsUUFBUSxPQUFPLDRPQUE0TyxzQkFBc0IsNEJBQTRCLCtCQUErQixpQkFBaUIsS0FBSyxtQkFBbUI7QUFDcGdCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUVBQWUsdUJBQXVCLEVBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8yMDI0LWt0c3N0dWRpby1ob21ld29ya3MvLi9zcmMvY29tcG9uZW50cy9SZWNpcGVDYXJkL2NvbXBvbmVudHMvUmVjaXBlQ2FyZENhcHRpb24vUmVjaXBlQ2FyZENhcHRpb24ubW9kdWxlLnNjc3M/ZTI0NSJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBgLlJlY2lwZUNhcmRDYXB0aW9uLW1vZHVsZV9fcmVjaXBlLWNhcmQtY2FwdGlvbntkaXNwbGF5OmZsZXg7YWxpZ24taXRlbXM6Y2VudGVyO2p1c3RpZnktY29udGVudDpzdGFydDtnYXA6NnB4fWAsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vc3JjL2NvbXBvbmVudHMvUmVjaXBlQ2FyZC9jb21wb25lbnRzL1JlY2lwZUNhcmRDYXB0aW9uL1JlY2lwZUNhcmRDYXB0aW9uLm1vZHVsZS5zY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUFBLCtDQUNJLFlBQUEsQ0FDQSxrQkFBQSxDQUNBLHFCQUFBLENBQ0EsT0FBQVwiLFwic291cmNlc0NvbnRlbnRcIjpbXCIucmVjaXBlLWNhcmQtY2FwdGlvbiB7XFxyXFxuICAgIGRpc3BsYXk6IGZsZXg7XFxyXFxuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxyXFxuICAgIGp1c3RpZnktY29udGVudDogc3RhcnQ7XFxyXFxuICAgIGdhcDogNnB4O1xcclxcbn1cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLmxvY2FscyA9IHtcblx0XCJyZWNpcGUtY2FyZC1jYXB0aW9uXCI6IGBSZWNpcGVDYXJkQ2FwdGlvbi1tb2R1bGVfX3JlY2lwZS1jYXJkLWNhcHRpb25gXG59O1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///9676\n')},4834:(module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   A: () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(963);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(9089);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);\n// Imports\n\n\nvar ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, `.Text-module__text{font-family:"Roboto"}.Text-module__text_color_primary{color:#000}.Text-module__text_color_secondary{color:#afadb5}.Text-module__text_color_accent{color:#b5460f}.Text-module__text_color_inherit{color:inherit}.Text-module__text_view_title{font-size:44px;line-height:calc(44px + 4px);font-weight:700}.Text-module__text_view_button{font-size:18px;line-height:18px}.Text-module__text_view_p-20{font-size:20px;line-height:calc(20px + 4px)}.Text-module__text_view_p-18{font-size:18px;line-height:calc(18px + 4px)}.Text-module__text_view_p-16{font-size:16px;line-height:calc(16px + 4px)}.Text-module__text_view_p-14{font-size:14px;line-height:calc(14px + 4px)}.Text-module__text_weight_normal{font-weight:400}.Text-module__text_weight_medium{font-weight:500}.Text-module__text_weight_bold{font-weight:700}`, "",{"version":3,"sources":["webpack://./src/components/Text/Text.module.scss","webpack://./src/styles/variables.scss"],"names":[],"mappings":"AAiBA,mBAEI,oBAAA,CAGI,iCACI,UCnBL,CDsBC,mCACI,aCrBL,CDwBC,gCACI,aC/BJ,CDkCA,iCACI,aAAA,CAKJ,8BACI,cA/BJ,CAgCI,4BAAA,CACA,eA5BL,CA+BC,+BACI,cApCH,CAqCG,gBArCH,CAwCD,6BACI,cA9CN,CA+CM,4BAAA,CAGJ,6BACI,cAlDN,CAmDM,4BAAA,CAGJ,6BACI,cAtDN,CAuDM,4BAAA,CAGJ,6BACI,cA1DN,CA2DM,4BAAA,CAKJ,iCACI,eA7DH,CAgED,iCACI,eAhEH,CAmED,+BACI,eAnEL","sourcesContent":["@use \'styles/variables.scss\' as var;\\r\\n\\r\\n$primary: var.$dark;\\r\\n$secondary: var.$gray;\\r\\n$accent: var.$brand;\\r\\n\\r\\n$p20: 20px;\\r\\n$p18: 18px;\\r\\n$p16: 16px;\\r\\n$p14: 14px;\\r\\n$title: 44px;\\r\\n$button: 18px;\\r\\n\\r\\n$normal: 400;\\r\\n$medium: 500;\\r\\n$bold: 700;\\r\\n\\r\\n.text {\\r\\n\\r\\n    font-family: \'Roboto\';\\r\\n\\r\\n    &_color {\\r\\n        &_primary {\\r\\n            color: $primary;\\r\\n        }\\r\\n    \\r\\n        &_secondary {\\r\\n            color: $secondary;\\r\\n        }\\r\\n    \\r\\n        &_accent {\\r\\n            color: $accent;\\r\\n        }\\r\\n\\r\\n        &_inherit {\\r\\n            color: inherit;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    &_view {\\r\\n        &_title {\\r\\n            font-size: $title;\\r\\n            line-height: calc(#{$title} + 4px);\\r\\n            font-weight: $bold;\\r\\n        }\\r\\n\\r\\n        &_button {\\r\\n            font-size: $button;\\r\\n            line-height: $button;\\r\\n        }\\r\\n\\r\\n        &_p-20 {\\r\\n            font-size: $p20;\\r\\n            line-height: calc(#{$p20} + 4px);\\r\\n        }\\r\\n\\r\\n        &_p-18 {\\r\\n            font-size: $p18;\\r\\n            line-height: calc(#{$p18} + 4px);\\r\\n        }\\r\\n\\r\\n        &_p-16 {\\r\\n            font-size: $p16;\\r\\n            line-height: calc(#{$p16} + 4px);\\r\\n        }\\r\\n\\r\\n        &_p-14 {\\r\\n            font-size: $p14;\\r\\n            line-height: calc(#{$p14} + 4px);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    &_weight {\\r\\n        &_normal {\\r\\n            font-weight: $normal;\\r\\n        }\\r\\n\\r\\n        &_medium {\\r\\n            font-weight: $medium;\\r\\n        }\\r\\n\\r\\n        &_bold {\\r\\n            font-weight: $bold;\\r\\n        }\\r\\n    }\\r\\n}","$brand: #B5460F;\\r\\n$brand-hover: rgba(181, 70, 15, 0.7);\\r\\n$brand-active: #872D01;\\r\\n\\r\\n$dark: black; \\r\\n$light: white;\\r\\n$gray: #AFADB5;\\r\\n\\r\\n$border-radius: 10px;\\r\\n\\r\\n$space-xl: 24px;\\r\\n$space-l: 20px;\\r\\n$space-m: 16px;\\r\\n$space-s: 14px;\\r\\n$space-xs: 12px;\\r\\n$space-xxs: 8px;"],"sourceRoot":""}]);\n// Exports\n___CSS_LOADER_EXPORT___.locals = {\n\t"text": `Text-module__text`,\n\t"text_color_primary": `Text-module__text_color_primary`,\n\t"text_color_secondary": `Text-module__text_color_secondary`,\n\t"text_color_accent": `Text-module__text_color_accent`,\n\t"text_color_inherit": `Text-module__text_color_inherit`,\n\t"text_view_title": `Text-module__text_view_title`,\n\t"text_view_button": `Text-module__text_view_button`,\n\t"text_view_p-20": `Text-module__text_view_p-20`,\n\t"text_view_p-18": `Text-module__text_view_p-18`,\n\t"text_view_p-16": `Text-module__text_view_p-16`,\n\t"text_view_p-14": `Text-module__text_view_p-14`,\n\t"text_weight_normal": `Text-module__text_weight_normal`,\n\t"text_weight_medium": `Text-module__text_weight_medium`,\n\t"text_weight_bold": `Text-module__text_weight_bold`\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDgzNC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7QUFDZ0g7QUFDakI7QUFDL0YsOEJBQThCLG1GQUEyQixDQUFDLDRGQUFxQztBQUMvRjtBQUNBLDZEQUE2RCxxQkFBcUIsaUNBQWlDLFdBQVcsbUNBQW1DLGNBQWMsZ0NBQWdDLGNBQWMsaUNBQWlDLGNBQWMsOEJBQThCLGVBQWUsNkJBQTZCLGdCQUFnQiwrQkFBK0IsZUFBZSxpQkFBaUIsNkJBQTZCLGVBQWUsNkJBQTZCLDZCQUE2QixlQUFlLDZCQUE2Qiw2QkFBNkIsZUFBZSw2QkFBNkIsNkJBQTZCLGVBQWUsNkJBQTZCLGlDQUFpQyxnQkFBZ0IsaUNBQWlDLGdCQUFnQiwrQkFBK0IsZ0JBQWdCLE9BQU8sMmdCQUEyZ0IsNEJBQTRCLDBCQUEwQix3QkFBd0IsbUJBQW1CLGVBQWUsZUFBZSxlQUFlLGlCQUFpQixrQkFBa0IscUJBQXFCLGlCQUFpQixlQUFlLGVBQWUsa0NBQWtDLHFCQUFxQix1QkFBdUIsZ0NBQWdDLGFBQWEsaUNBQWlDLGtDQUFrQyxhQUFhLDhCQUE4QiwrQkFBK0IsYUFBYSwyQkFBMkIsK0JBQStCLGFBQWEsU0FBUyxvQkFBb0IscUJBQXFCLGtDQUFrQyxvQ0FBb0MsUUFBUSxPQUFPLG1DQUFtQyxhQUFhLDBCQUEwQixtQ0FBbUMscUNBQXFDLGFBQWEsd0JBQXdCLGdDQUFnQyxvQ0FBb0MsTUFBTSxPQUFPLGFBQWEsd0JBQXdCLGdDQUFnQyxvQ0FBb0MsTUFBTSxPQUFPLGFBQWEsd0JBQXdCLGdDQUFnQyxvQ0FBb0MsTUFBTSxPQUFPLGFBQWEsd0JBQXdCLGdDQUFnQyxvQ0FBb0MsTUFBTSxPQUFPLGFBQWEsU0FBUyxzQkFBc0Isc0JBQXNCLHFDQUFxQyxhQUFhLDBCQUEwQixxQ0FBcUMsYUFBYSx3QkFBd0IsbUNBQW1DLGFBQWEsU0FBUyxLQUFLLG1CQUFtQix5Q0FBeUMsMkJBQTJCLHNCQUFzQixrQkFBa0IsbUJBQW1CLDZCQUE2Qix3QkFBd0IsbUJBQW1CLG1CQUFtQixtQkFBbUIsb0JBQW9CLG9CQUFvQixtQkFBbUI7QUFDL3ZHO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpRUFBZSx1QkFBdUIsRUFBQyIsInNvdXJjZXMiOlsid2VicGFjazovLzIwMjQta3Rzc3R1ZGlvLWhvbWV3b3Jrcy8uL3NyYy9jb21wb25lbnRzL1RleHQvVGV4dC5tb2R1bGUuc2Nzcz80ZTEwIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIGAuVGV4dC1tb2R1bGVfX3RleHR7Zm9udC1mYW1pbHk6XCJSb2JvdG9cIn0uVGV4dC1tb2R1bGVfX3RleHRfY29sb3JfcHJpbWFyeXtjb2xvcjojMDAwfS5UZXh0LW1vZHVsZV9fdGV4dF9jb2xvcl9zZWNvbmRhcnl7Y29sb3I6I2FmYWRiNX0uVGV4dC1tb2R1bGVfX3RleHRfY29sb3JfYWNjZW50e2NvbG9yOiNiNTQ2MGZ9LlRleHQtbW9kdWxlX190ZXh0X2NvbG9yX2luaGVyaXR7Y29sb3I6aW5oZXJpdH0uVGV4dC1tb2R1bGVfX3RleHRfdmlld190aXRsZXtmb250LXNpemU6NDRweDtsaW5lLWhlaWdodDpjYWxjKDQ0cHggKyA0cHgpO2ZvbnQtd2VpZ2h0OjcwMH0uVGV4dC1tb2R1bGVfX3RleHRfdmlld19idXR0b257Zm9udC1zaXplOjE4cHg7bGluZS1oZWlnaHQ6MThweH0uVGV4dC1tb2R1bGVfX3RleHRfdmlld19wLTIwe2ZvbnQtc2l6ZToyMHB4O2xpbmUtaGVpZ2h0OmNhbGMoMjBweCArIDRweCl9LlRleHQtbW9kdWxlX190ZXh0X3ZpZXdfcC0xOHtmb250LXNpemU6MThweDtsaW5lLWhlaWdodDpjYWxjKDE4cHggKyA0cHgpfS5UZXh0LW1vZHVsZV9fdGV4dF92aWV3X3AtMTZ7Zm9udC1zaXplOjE2cHg7bGluZS1oZWlnaHQ6Y2FsYygxNnB4ICsgNHB4KX0uVGV4dC1tb2R1bGVfX3RleHRfdmlld19wLTE0e2ZvbnQtc2l6ZToxNHB4O2xpbmUtaGVpZ2h0OmNhbGMoMTRweCArIDRweCl9LlRleHQtbW9kdWxlX190ZXh0X3dlaWdodF9ub3JtYWx7Zm9udC13ZWlnaHQ6NDAwfS5UZXh0LW1vZHVsZV9fdGV4dF93ZWlnaHRfbWVkaXVte2ZvbnQtd2VpZ2h0OjUwMH0uVGV4dC1tb2R1bGVfX3RleHRfd2VpZ2h0X2JvbGR7Zm9udC13ZWlnaHQ6NzAwfWAsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vc3JjL2NvbXBvbmVudHMvVGV4dC9UZXh0Lm1vZHVsZS5zY3NzXCIsXCJ3ZWJwYWNrOi8vLi9zcmMvc3R5bGVzL3ZhcmlhYmxlcy5zY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQWlCQSxtQkFFSSxvQkFBQSxDQUdJLGlDQUNJLFVDbkJMLENEc0JDLG1DQUNJLGFDckJMLENEd0JDLGdDQUNJLGFDL0JKLENEa0NBLGlDQUNJLGFBQUEsQ0FLSiw4QkFDSSxjQS9CSixDQWdDSSw0QkFBQSxDQUNBLGVBNUJMLENBK0JDLCtCQUNJLGNBcENILENBcUNHLGdCQXJDSCxDQXdDRCw2QkFDSSxjQTlDTixDQStDTSw0QkFBQSxDQUdKLDZCQUNJLGNBbEROLENBbURNLDRCQUFBLENBR0osNkJBQ0ksY0F0RE4sQ0F1RE0sNEJBQUEsQ0FHSiw2QkFDSSxjQTFETixDQTJETSw0QkFBQSxDQUtKLGlDQUNJLGVBN0RILENBZ0VELGlDQUNJLGVBaEVILENBbUVELCtCQUNJLGVBbkVMXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIkB1c2UgJ3N0eWxlcy92YXJpYWJsZXMuc2NzcycgYXMgdmFyO1xcclxcblxcclxcbiRwcmltYXJ5OiB2YXIuJGRhcms7XFxyXFxuJHNlY29uZGFyeTogdmFyLiRncmF5O1xcclxcbiRhY2NlbnQ6IHZhci4kYnJhbmQ7XFxyXFxuXFxyXFxuJHAyMDogMjBweDtcXHJcXG4kcDE4OiAxOHB4O1xcclxcbiRwMTY6IDE2cHg7XFxyXFxuJHAxNDogMTRweDtcXHJcXG4kdGl0bGU6IDQ0cHg7XFxyXFxuJGJ1dHRvbjogMThweDtcXHJcXG5cXHJcXG4kbm9ybWFsOiA0MDA7XFxyXFxuJG1lZGl1bTogNTAwO1xcclxcbiRib2xkOiA3MDA7XFxyXFxuXFxyXFxuLnRleHQge1xcclxcblxcclxcbiAgICBmb250LWZhbWlseTogJ1JvYm90byc7XFxyXFxuXFxyXFxuICAgICZfY29sb3Ige1xcclxcbiAgICAgICAgJl9wcmltYXJ5IHtcXHJcXG4gICAgICAgICAgICBjb2xvcjogJHByaW1hcnk7XFxyXFxuICAgICAgICB9XFxyXFxuICAgIFxcclxcbiAgICAgICAgJl9zZWNvbmRhcnkge1xcclxcbiAgICAgICAgICAgIGNvbG9yOiAkc2Vjb25kYXJ5O1xcclxcbiAgICAgICAgfVxcclxcbiAgICBcXHJcXG4gICAgICAgICZfYWNjZW50IHtcXHJcXG4gICAgICAgICAgICBjb2xvcjogJGFjY2VudDtcXHJcXG4gICAgICAgIH1cXHJcXG5cXHJcXG4gICAgICAgICZfaW5oZXJpdCB7XFxyXFxuICAgICAgICAgICAgY29sb3I6IGluaGVyaXQ7XFxyXFxuICAgICAgICB9XFxyXFxuICAgIH1cXHJcXG5cXHJcXG4gICAgJl92aWV3IHtcXHJcXG4gICAgICAgICZfdGl0bGUge1xcclxcbiAgICAgICAgICAgIGZvbnQtc2l6ZTogJHRpdGxlO1xcclxcbiAgICAgICAgICAgIGxpbmUtaGVpZ2h0OiBjYWxjKCN7JHRpdGxlfSArIDRweCk7XFxyXFxuICAgICAgICAgICAgZm9udC13ZWlnaHQ6ICRib2xkO1xcclxcbiAgICAgICAgfVxcclxcblxcclxcbiAgICAgICAgJl9idXR0b24ge1xcclxcbiAgICAgICAgICAgIGZvbnQtc2l6ZTogJGJ1dHRvbjtcXHJcXG4gICAgICAgICAgICBsaW5lLWhlaWdodDogJGJ1dHRvbjtcXHJcXG4gICAgICAgIH1cXHJcXG5cXHJcXG4gICAgICAgICZfcC0yMCB7XFxyXFxuICAgICAgICAgICAgZm9udC1zaXplOiAkcDIwO1xcclxcbiAgICAgICAgICAgIGxpbmUtaGVpZ2h0OiBjYWxjKCN7JHAyMH0gKyA0cHgpO1xcclxcbiAgICAgICAgfVxcclxcblxcclxcbiAgICAgICAgJl9wLTE4IHtcXHJcXG4gICAgICAgICAgICBmb250LXNpemU6ICRwMTg7XFxyXFxuICAgICAgICAgICAgbGluZS1oZWlnaHQ6IGNhbGMoI3skcDE4fSArIDRweCk7XFxyXFxuICAgICAgICB9XFxyXFxuXFxyXFxuICAgICAgICAmX3AtMTYge1xcclxcbiAgICAgICAgICAgIGZvbnQtc2l6ZTogJHAxNjtcXHJcXG4gICAgICAgICAgICBsaW5lLWhlaWdodDogY2FsYygjeyRwMTZ9ICsgNHB4KTtcXHJcXG4gICAgICAgIH1cXHJcXG5cXHJcXG4gICAgICAgICZfcC0xNCB7XFxyXFxuICAgICAgICAgICAgZm9udC1zaXplOiAkcDE0O1xcclxcbiAgICAgICAgICAgIGxpbmUtaGVpZ2h0OiBjYWxjKCN7JHAxNH0gKyA0cHgpO1xcclxcbiAgICAgICAgfVxcclxcbiAgICB9XFxyXFxuXFxyXFxuICAgICZfd2VpZ2h0IHtcXHJcXG4gICAgICAgICZfbm9ybWFsIHtcXHJcXG4gICAgICAgICAgICBmb250LXdlaWdodDogJG5vcm1hbDtcXHJcXG4gICAgICAgIH1cXHJcXG5cXHJcXG4gICAgICAgICZfbWVkaXVtIHtcXHJcXG4gICAgICAgICAgICBmb250LXdlaWdodDogJG1lZGl1bTtcXHJcXG4gICAgICAgIH1cXHJcXG5cXHJcXG4gICAgICAgICZfYm9sZCB7XFxyXFxuICAgICAgICAgICAgZm9udC13ZWlnaHQ6ICRib2xkO1xcclxcbiAgICAgICAgfVxcclxcbiAgICB9XFxyXFxufVwiLFwiJGJyYW5kOiAjQjU0NjBGO1xcclxcbiRicmFuZC1ob3ZlcjogcmdiYSgxODEsIDcwLCAxNSwgMC43KTtcXHJcXG4kYnJhbmQtYWN0aXZlOiAjODcyRDAxO1xcclxcblxcclxcbiRkYXJrOiBibGFjazsgXFxyXFxuJGxpZ2h0OiB3aGl0ZTtcXHJcXG4kZ3JheTogI0FGQURCNTtcXHJcXG5cXHJcXG4kYm9yZGVyLXJhZGl1czogMTBweDtcXHJcXG5cXHJcXG4kc3BhY2UteGw6IDI0cHg7XFxyXFxuJHNwYWNlLWw6IDIwcHg7XFxyXFxuJHNwYWNlLW06IDE2cHg7XFxyXFxuJHNwYWNlLXM6IDE0cHg7XFxyXFxuJHNwYWNlLXhzOiAxMnB4O1xcclxcbiRzcGFjZS14eHM6IDhweDtcIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLmxvY2FscyA9IHtcblx0XCJ0ZXh0XCI6IGBUZXh0LW1vZHVsZV9fdGV4dGAsXG5cdFwidGV4dF9jb2xvcl9wcmltYXJ5XCI6IGBUZXh0LW1vZHVsZV9fdGV4dF9jb2xvcl9wcmltYXJ5YCxcblx0XCJ0ZXh0X2NvbG9yX3NlY29uZGFyeVwiOiBgVGV4dC1tb2R1bGVfX3RleHRfY29sb3Jfc2Vjb25kYXJ5YCxcblx0XCJ0ZXh0X2NvbG9yX2FjY2VudFwiOiBgVGV4dC1tb2R1bGVfX3RleHRfY29sb3JfYWNjZW50YCxcblx0XCJ0ZXh0X2NvbG9yX2luaGVyaXRcIjogYFRleHQtbW9kdWxlX190ZXh0X2NvbG9yX2luaGVyaXRgLFxuXHRcInRleHRfdmlld190aXRsZVwiOiBgVGV4dC1tb2R1bGVfX3RleHRfdmlld190aXRsZWAsXG5cdFwidGV4dF92aWV3X2J1dHRvblwiOiBgVGV4dC1tb2R1bGVfX3RleHRfdmlld19idXR0b25gLFxuXHRcInRleHRfdmlld19wLTIwXCI6IGBUZXh0LW1vZHVsZV9fdGV4dF92aWV3X3AtMjBgLFxuXHRcInRleHRfdmlld19wLTE4XCI6IGBUZXh0LW1vZHVsZV9fdGV4dF92aWV3X3AtMThgLFxuXHRcInRleHRfdmlld19wLTE2XCI6IGBUZXh0LW1vZHVsZV9fdGV4dF92aWV3X3AtMTZgLFxuXHRcInRleHRfdmlld19wLTE0XCI6IGBUZXh0LW1vZHVsZV9fdGV4dF92aWV3X3AtMTRgLFxuXHRcInRleHRfd2VpZ2h0X25vcm1hbFwiOiBgVGV4dC1tb2R1bGVfX3RleHRfd2VpZ2h0X25vcm1hbGAsXG5cdFwidGV4dF93ZWlnaHRfbWVkaXVtXCI6IGBUZXh0LW1vZHVsZV9fdGV4dF93ZWlnaHRfbWVkaXVtYCxcblx0XCJ0ZXh0X3dlaWdodF9ib2xkXCI6IGBUZXh0LW1vZHVsZV9fdGV4dF93ZWlnaHRfYm9sZGBcbn07XG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///4834\n')},5172:(module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   A: () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(963);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(9089);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);\n// Imports\n\n\nvar ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, `.Filter-module__filter{display:flex;flex-direction:column;width:100%;gap:6px;align-items:center;align-content:center}`, "",{"version":3,"sources":["webpack://./src/components/filters/Filter/Filter.module.scss"],"names":[],"mappings":"AAAA,uBACI,YAAA,CACA,qBAAA,CACA,UAAA,CACA,OAAA,CACA,kBAAA,CACA,oBAAA","sourcesContent":[".filter {\\r\\n    display: flex;\\r\\n    flex-direction: column;\\r\\n    width: 100%;\\r\\n    gap: 6px;\\r\\n    align-items: center;\\r\\n    align-content: center;\\r\\n}"],"sourceRoot":""}]);\n// Exports\n___CSS_LOADER_EXPORT___.locals = {\n\t"filter": `Filter-module__filter`\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTE3Mi5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7QUFDbUg7QUFDakI7QUFDbEcsOEJBQThCLG1GQUEyQixDQUFDLDRGQUFxQztBQUMvRjtBQUNBLGlFQUFpRSxhQUFhLHNCQUFzQixXQUFXLFFBQVEsbUJBQW1CLHFCQUFxQixPQUFPLGdOQUFnTixzQkFBc0IsK0JBQStCLG9CQUFvQixpQkFBaUIsNEJBQTRCLDhCQUE4QixLQUFLLG1CQUFtQjtBQUNsaUI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpRUFBZSx1QkFBdUIsRUFBQyIsInNvdXJjZXMiOlsid2VicGFjazovLzIwMjQta3Rzc3R1ZGlvLWhvbWV3b3Jrcy8uL3NyYy9jb21wb25lbnRzL2ZpbHRlcnMvRmlsdGVyL0ZpbHRlci5tb2R1bGUuc2Nzcz8wZTlhIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIGAuRmlsdGVyLW1vZHVsZV9fZmlsdGVye2Rpc3BsYXk6ZmxleDtmbGV4LWRpcmVjdGlvbjpjb2x1bW47d2lkdGg6MTAwJTtnYXA6NnB4O2FsaWduLWl0ZW1zOmNlbnRlcjthbGlnbi1jb250ZW50OmNlbnRlcn1gLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL3NyYy9jb21wb25lbnRzL2ZpbHRlcnMvRmlsdGVyL0ZpbHRlci5tb2R1bGUuc2Nzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFBQSx1QkFDSSxZQUFBLENBQ0EscUJBQUEsQ0FDQSxVQUFBLENBQ0EsT0FBQSxDQUNBLGtCQUFBLENBQ0Esb0JBQUFcIixcInNvdXJjZXNDb250ZW50XCI6W1wiLmZpbHRlciB7XFxyXFxuICAgIGRpc3BsYXk6IGZsZXg7XFxyXFxuICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxyXFxuICAgIHdpZHRoOiAxMDAlO1xcclxcbiAgICBnYXA6IDZweDtcXHJcXG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXHJcXG4gICAgYWxpZ24tY29udGVudDogY2VudGVyO1xcclxcbn1cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLmxvY2FscyA9IHtcblx0XCJmaWx0ZXJcIjogYEZpbHRlci1tb2R1bGVfX2ZpbHRlcmBcbn07XG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///5172\n')},7180:(module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   A: () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(963);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(9089);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);\n// Imports\n\n\nvar ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, `.customStyles-module__icon_stroke_color_primary{stroke:#000}.customStyles-module__icon_stroke_color_secondary{stroke:#afadb5}.customStyles-module__icon_stroke_color_accent{stroke:#b5460f}.customStyles-module__icon_stroke_color_inherit{stroke:"currentColor"}.customStyles-module__icon_fill_color_primary{fill:#000}.customStyles-module__icon_fill_color_secondary{fill:#afadb5}.customStyles-module__icon_fill_color_accent{fill:#b5460f}.customStyles-module__icon_fill_color_inherit{fill:"currentColor"}.customStyles-module__text-align-center{text-align:center}`, "",{"version":3,"sources":["webpack://./src/styles/customStyles.module.scss","webpack://./src/styles/variables.scss"],"names":[],"mappings":"AASM,gDACE,WCND,CDSD,kDACE,cCRD,CDWD,+CACE,cClBA,CDqBF,gDACE,qBAhBW,CAqBb,8CACE,SCxBD,CD2BD,gDACE,YC1BD,CD6BD,6CACE,YCpCA,CDuCF,8CACE,mBAlCW,CAuCnB,wCACE,iBAAA","sourcesContent":["@use \'./variables.scss\' as var;\\r\\n\\r\\n.icon {\\r\\n    $icon-primary: var.$dark;\\r\\n    $icon-secondary: var.$gray;\\r\\n    $icon-accent: var.$brand;\\r\\n    $icon-inherit: \'currentColor\';\\r\\n  \\r\\n    &_stroke_color {\\r\\n      &_primary {\\r\\n        stroke: $icon-primary;\\r\\n      }\\r\\n      \\r\\n      &_secondary {\\r\\n        stroke: $icon-secondary;\\r\\n      }\\r\\n      \\r\\n      &_accent {\\r\\n        stroke: $icon-accent;\\r\\n      }\\r\\n      \\r\\n      &_inherit {\\r\\n        stroke: $icon-inherit;\\r\\n      }\\r\\n    }\\r\\n  \\r\\n    &_fill_color {\\r\\n      &_primary {\\r\\n        fill: $icon-primary;\\r\\n      }\\r\\n      \\r\\n      &_secondary {\\r\\n        fill: $icon-secondary;\\r\\n      }\\r\\n      \\r\\n      &_accent {\\r\\n        fill: $icon-accent;\\r\\n      }\\r\\n      \\r\\n      &_inherit {\\r\\n        fill: $icon-inherit;\\r\\n      }\\r\\n    }\\r\\n}\\r\\n\\r\\n.text-align-center {\\r\\n  text-align: center;\\r\\n}","$brand: #B5460F;\\r\\n$brand-hover: rgba(181, 70, 15, 0.7);\\r\\n$brand-active: #872D01;\\r\\n\\r\\n$dark: black; \\r\\n$light: white;\\r\\n$gray: #AFADB5;\\r\\n\\r\\n$border-radius: 10px;\\r\\n\\r\\n$space-xl: 24px;\\r\\n$space-l: 20px;\\r\\n$space-m: 16px;\\r\\n$space-s: 14px;\\r\\n$space-xs: 12px;\\r\\n$space-xxs: 8px;"],"sourceRoot":""}]);\n// Exports\n___CSS_LOADER_EXPORT___.locals = {\n\t"icon_stroke_color_primary": `customStyles-module__icon_stroke_color_primary`,\n\t"icon_stroke_color_secondary": `customStyles-module__icon_stroke_color_secondary`,\n\t"icon_stroke_color_accent": `customStyles-module__icon_stroke_color_accent`,\n\t"icon_stroke_color_inherit": `customStyles-module__icon_stroke_color_inherit`,\n\t"icon_fill_color_primary": `customStyles-module__icon_fill_color_primary`,\n\t"icon_fill_color_secondary": `customStyles-module__icon_fill_color_secondary`,\n\t"icon_fill_color_accent": `customStyles-module__icon_fill_color_accent`,\n\t"icon_fill_color_inherit": `customStyles-module__icon_fill_color_inherit`,\n\t"text-align-center": `customStyles-module__text-align-center`\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNzE4MC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7QUFDNkc7QUFDakI7QUFDNUYsOEJBQThCLG1GQUEyQixDQUFDLDRGQUFxQztBQUMvRjtBQUNBLDBGQUEwRixZQUFZLGtEQUFrRCxlQUFlLCtDQUErQyxlQUFlLGdEQUFnRCxzQkFBc0IsOENBQThDLFVBQVUsZ0RBQWdELGFBQWEsNkNBQTZDLGFBQWEsOENBQThDLG9CQUFvQix3Q0FBd0Msa0JBQWtCLE9BQU8sNFZBQTRWLGVBQWUsaUNBQWlDLG1DQUFtQyxpQ0FBaUMsc0NBQXNDLDhCQUE4QixxQkFBcUIsa0NBQWtDLFdBQVcsaUNBQWlDLG9DQUFvQyxXQUFXLDhCQUE4QixpQ0FBaUMsV0FBVywrQkFBK0Isa0NBQWtDLFdBQVcsU0FBUyw0QkFBNEIscUJBQXFCLGdDQUFnQyxXQUFXLGlDQUFpQyxrQ0FBa0MsV0FBVyw4QkFBOEIsK0JBQStCLFdBQVcsK0JBQStCLGdDQUFnQyxXQUFXLFNBQVMsS0FBSyw0QkFBNEIseUJBQXlCLEtBQUssbUJBQW1CLHlDQUF5QywyQkFBMkIsc0JBQXNCLGtCQUFrQixtQkFBbUIsNkJBQTZCLHdCQUF3QixtQkFBbUIsbUJBQW1CLG1CQUFtQixvQkFBb0Isb0JBQW9CLG1CQUFtQjtBQUNqbUU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUVBQWUsdUJBQXVCLEVBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8yMDI0LWt0c3N0dWRpby1ob21ld29ya3MvLi9zcmMvc3R5bGVzL2N1c3RvbVN0eWxlcy5tb2R1bGUuc2Nzcz85MzMxIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIGAuY3VzdG9tU3R5bGVzLW1vZHVsZV9faWNvbl9zdHJva2VfY29sb3JfcHJpbWFyeXtzdHJva2U6IzAwMH0uY3VzdG9tU3R5bGVzLW1vZHVsZV9faWNvbl9zdHJva2VfY29sb3Jfc2Vjb25kYXJ5e3N0cm9rZTojYWZhZGI1fS5jdXN0b21TdHlsZXMtbW9kdWxlX19pY29uX3N0cm9rZV9jb2xvcl9hY2NlbnR7c3Ryb2tlOiNiNTQ2MGZ9LmN1c3RvbVN0eWxlcy1tb2R1bGVfX2ljb25fc3Ryb2tlX2NvbG9yX2luaGVyaXR7c3Ryb2tlOlwiY3VycmVudENvbG9yXCJ9LmN1c3RvbVN0eWxlcy1tb2R1bGVfX2ljb25fZmlsbF9jb2xvcl9wcmltYXJ5e2ZpbGw6IzAwMH0uY3VzdG9tU3R5bGVzLW1vZHVsZV9faWNvbl9maWxsX2NvbG9yX3NlY29uZGFyeXtmaWxsOiNhZmFkYjV9LmN1c3RvbVN0eWxlcy1tb2R1bGVfX2ljb25fZmlsbF9jb2xvcl9hY2NlbnR7ZmlsbDojYjU0NjBmfS5jdXN0b21TdHlsZXMtbW9kdWxlX19pY29uX2ZpbGxfY29sb3JfaW5oZXJpdHtmaWxsOlwiY3VycmVudENvbG9yXCJ9LmN1c3RvbVN0eWxlcy1tb2R1bGVfX3RleHQtYWxpZ24tY2VudGVye3RleHQtYWxpZ246Y2VudGVyfWAsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vc3JjL3N0eWxlcy9jdXN0b21TdHlsZXMubW9kdWxlLnNjc3NcIixcIndlYnBhY2s6Ly8uL3NyYy9zdHlsZXMvdmFyaWFibGVzLnNjc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBU00sZ0RBQ0UsV0NORCxDRFNELGtEQUNFLGNDUkQsQ0RXRCwrQ0FDRSxjQ2xCQSxDRHFCRixnREFDRSxxQkFoQlcsQ0FxQmIsOENBQ0UsU0N4QkQsQ0QyQkQsZ0RBQ0UsWUMxQkQsQ0Q2QkQsNkNBQ0UsWUNwQ0EsQ0R1Q0YsOENBQ0UsbUJBbENXLENBdUNuQix3Q0FDRSxpQkFBQVwiLFwic291cmNlc0NvbnRlbnRcIjpbXCJAdXNlICcuL3ZhcmlhYmxlcy5zY3NzJyBhcyB2YXI7XFxyXFxuXFxyXFxuLmljb24ge1xcclxcbiAgICAkaWNvbi1wcmltYXJ5OiB2YXIuJGRhcms7XFxyXFxuICAgICRpY29uLXNlY29uZGFyeTogdmFyLiRncmF5O1xcclxcbiAgICAkaWNvbi1hY2NlbnQ6IHZhci4kYnJhbmQ7XFxyXFxuICAgICRpY29uLWluaGVyaXQ6ICdjdXJyZW50Q29sb3InO1xcclxcbiAgXFxyXFxuICAgICZfc3Ryb2tlX2NvbG9yIHtcXHJcXG4gICAgICAmX3ByaW1hcnkge1xcclxcbiAgICAgICAgc3Ryb2tlOiAkaWNvbi1wcmltYXJ5O1xcclxcbiAgICAgIH1cXHJcXG4gICAgICBcXHJcXG4gICAgICAmX3NlY29uZGFyeSB7XFxyXFxuICAgICAgICBzdHJva2U6ICRpY29uLXNlY29uZGFyeTtcXHJcXG4gICAgICB9XFxyXFxuICAgICAgXFxyXFxuICAgICAgJl9hY2NlbnQge1xcclxcbiAgICAgICAgc3Ryb2tlOiAkaWNvbi1hY2NlbnQ7XFxyXFxuICAgICAgfVxcclxcbiAgICAgIFxcclxcbiAgICAgICZfaW5oZXJpdCB7XFxyXFxuICAgICAgICBzdHJva2U6ICRpY29uLWluaGVyaXQ7XFxyXFxuICAgICAgfVxcclxcbiAgICB9XFxyXFxuICBcXHJcXG4gICAgJl9maWxsX2NvbG9yIHtcXHJcXG4gICAgICAmX3ByaW1hcnkge1xcclxcbiAgICAgICAgZmlsbDogJGljb24tcHJpbWFyeTtcXHJcXG4gICAgICB9XFxyXFxuICAgICAgXFxyXFxuICAgICAgJl9zZWNvbmRhcnkge1xcclxcbiAgICAgICAgZmlsbDogJGljb24tc2Vjb25kYXJ5O1xcclxcbiAgICAgIH1cXHJcXG4gICAgICBcXHJcXG4gICAgICAmX2FjY2VudCB7XFxyXFxuICAgICAgICBmaWxsOiAkaWNvbi1hY2NlbnQ7XFxyXFxuICAgICAgfVxcclxcbiAgICAgIFxcclxcbiAgICAgICZfaW5oZXJpdCB7XFxyXFxuICAgICAgICBmaWxsOiAkaWNvbi1pbmhlcml0O1xcclxcbiAgICAgIH1cXHJcXG4gICAgfVxcclxcbn1cXHJcXG5cXHJcXG4udGV4dC1hbGlnbi1jZW50ZXIge1xcclxcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xcclxcbn1cIixcIiRicmFuZDogI0I1NDYwRjtcXHJcXG4kYnJhbmQtaG92ZXI6IHJnYmEoMTgxLCA3MCwgMTUsIDAuNyk7XFxyXFxuJGJyYW5kLWFjdGl2ZTogIzg3MkQwMTtcXHJcXG5cXHJcXG4kZGFyazogYmxhY2s7IFxcclxcbiRsaWdodDogd2hpdGU7XFxyXFxuJGdyYXk6ICNBRkFEQjU7XFxyXFxuXFxyXFxuJGJvcmRlci1yYWRpdXM6IDEwcHg7XFxyXFxuXFxyXFxuJHNwYWNlLXhsOiAyNHB4O1xcclxcbiRzcGFjZS1sOiAyMHB4O1xcclxcbiRzcGFjZS1tOiAxNnB4O1xcclxcbiRzcGFjZS1zOiAxNHB4O1xcclxcbiRzcGFjZS14czogMTJweDtcXHJcXG4kc3BhY2UteHhzOiA4cHg7XCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5sb2NhbHMgPSB7XG5cdFwiaWNvbl9zdHJva2VfY29sb3JfcHJpbWFyeVwiOiBgY3VzdG9tU3R5bGVzLW1vZHVsZV9faWNvbl9zdHJva2VfY29sb3JfcHJpbWFyeWAsXG5cdFwiaWNvbl9zdHJva2VfY29sb3Jfc2Vjb25kYXJ5XCI6IGBjdXN0b21TdHlsZXMtbW9kdWxlX19pY29uX3N0cm9rZV9jb2xvcl9zZWNvbmRhcnlgLFxuXHRcImljb25fc3Ryb2tlX2NvbG9yX2FjY2VudFwiOiBgY3VzdG9tU3R5bGVzLW1vZHVsZV9faWNvbl9zdHJva2VfY29sb3JfYWNjZW50YCxcblx0XCJpY29uX3N0cm9rZV9jb2xvcl9pbmhlcml0XCI6IGBjdXN0b21TdHlsZXMtbW9kdWxlX19pY29uX3N0cm9rZV9jb2xvcl9pbmhlcml0YCxcblx0XCJpY29uX2ZpbGxfY29sb3JfcHJpbWFyeVwiOiBgY3VzdG9tU3R5bGVzLW1vZHVsZV9faWNvbl9maWxsX2NvbG9yX3ByaW1hcnlgLFxuXHRcImljb25fZmlsbF9jb2xvcl9zZWNvbmRhcnlcIjogYGN1c3RvbVN0eWxlcy1tb2R1bGVfX2ljb25fZmlsbF9jb2xvcl9zZWNvbmRhcnlgLFxuXHRcImljb25fZmlsbF9jb2xvcl9hY2NlbnRcIjogYGN1c3RvbVN0eWxlcy1tb2R1bGVfX2ljb25fZmlsbF9jb2xvcl9hY2NlbnRgLFxuXHRcImljb25fZmlsbF9jb2xvcl9pbmhlcml0XCI6IGBjdXN0b21TdHlsZXMtbW9kdWxlX19pY29uX2ZpbGxfY29sb3JfaW5oZXJpdGAsXG5cdFwidGV4dC1hbGlnbi1jZW50ZXJcIjogYGN1c3RvbVN0eWxlcy1tb2R1bGVfX3RleHQtYWxpZ24tY2VudGVyYFxufTtcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///7180\n')},5072:module=>{"use strict";eval('\n\nvar stylesInDOM = [];\nfunction getIndexByIdentifier(identifier) {\n  var result = -1;\n  for (var i = 0; i < stylesInDOM.length; i++) {\n    if (stylesInDOM[i].identifier === identifier) {\n      result = i;\n      break;\n    }\n  }\n  return result;\n}\nfunction modulesToDom(list, options) {\n  var idCountMap = {};\n  var identifiers = [];\n  for (var i = 0; i < list.length; i++) {\n    var item = list[i];\n    var id = options.base ? item[0] + options.base : item[0];\n    var count = idCountMap[id] || 0;\n    var identifier = "".concat(id, " ").concat(count);\n    idCountMap[id] = count + 1;\n    var indexByIdentifier = getIndexByIdentifier(identifier);\n    var obj = {\n      css: item[1],\n      media: item[2],\n      sourceMap: item[3],\n      supports: item[4],\n      layer: item[5]\n    };\n    if (indexByIdentifier !== -1) {\n      stylesInDOM[indexByIdentifier].references++;\n      stylesInDOM[indexByIdentifier].updater(obj);\n    } else {\n      var updater = addElementStyle(obj, options);\n      options.byIndex = i;\n      stylesInDOM.splice(i, 0, {\n        identifier: identifier,\n        updater: updater,\n        references: 1\n      });\n    }\n    identifiers.push(identifier);\n  }\n  return identifiers;\n}\nfunction addElementStyle(obj, options) {\n  var api = options.domAPI(options);\n  api.update(obj);\n  var updater = function updater(newObj) {\n    if (newObj) {\n      if (newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap && newObj.supports === obj.supports && newObj.layer === obj.layer) {\n        return;\n      }\n      api.update(obj = newObj);\n    } else {\n      api.remove();\n    }\n  };\n  return updater;\n}\nmodule.exports = function (list, options) {\n  options = options || {};\n  list = list || [];\n  var lastIdentifiers = modulesToDom(list, options);\n  return function update(newList) {\n    newList = newList || [];\n    for (var i = 0; i < lastIdentifiers.length; i++) {\n      var identifier = lastIdentifiers[i];\n      var index = getIndexByIdentifier(identifier);\n      stylesInDOM[index].references--;\n    }\n    var newLastIdentifiers = modulesToDom(newList, options);\n    for (var _i = 0; _i < lastIdentifiers.length; _i++) {\n      var _identifier = lastIdentifiers[_i];\n      var _index = getIndexByIdentifier(_identifier);\n      if (stylesInDOM[_index].references === 0) {\n        stylesInDOM[_index].updater();\n        stylesInDOM.splice(_index, 1);\n      }\n    }\n    lastIdentifiers = newLastIdentifiers;\n  };\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTA3Mi5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYjtBQUNBO0FBQ0E7QUFDQSxrQkFBa0Isd0JBQXdCO0FBQzFDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCLGlCQUFpQjtBQUNuQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLDRCQUE0QjtBQUNoRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCLDZCQUE2QjtBQUNsRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovLzIwMjQta3Rzc3R1ZGlvLWhvbWV3b3Jrcy8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qcz8yZGJhIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG52YXIgc3R5bGVzSW5ET00gPSBbXTtcbmZ1bmN0aW9uIGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpIHtcbiAgdmFyIHJlc3VsdCA9IC0xO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHN0eWxlc0luRE9NLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKHN0eWxlc0luRE9NW2ldLmlkZW50aWZpZXIgPT09IGlkZW50aWZpZXIpIHtcbiAgICAgIHJlc3VsdCA9IGk7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cbmZ1bmN0aW9uIG1vZHVsZXNUb0RvbShsaXN0LCBvcHRpb25zKSB7XG4gIHZhciBpZENvdW50TWFwID0ge307XG4gIHZhciBpZGVudGlmaWVycyA9IFtdO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgaXRlbSA9IGxpc3RbaV07XG4gICAgdmFyIGlkID0gb3B0aW9ucy5iYXNlID8gaXRlbVswXSArIG9wdGlvbnMuYmFzZSA6IGl0ZW1bMF07XG4gICAgdmFyIGNvdW50ID0gaWRDb3VudE1hcFtpZF0gfHwgMDtcbiAgICB2YXIgaWRlbnRpZmllciA9IFwiXCIuY29uY2F0KGlkLCBcIiBcIikuY29uY2F0KGNvdW50KTtcbiAgICBpZENvdW50TWFwW2lkXSA9IGNvdW50ICsgMTtcbiAgICB2YXIgaW5kZXhCeUlkZW50aWZpZXIgPSBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKTtcbiAgICB2YXIgb2JqID0ge1xuICAgICAgY3NzOiBpdGVtWzFdLFxuICAgICAgbWVkaWE6IGl0ZW1bMl0sXG4gICAgICBzb3VyY2VNYXA6IGl0ZW1bM10sXG4gICAgICBzdXBwb3J0czogaXRlbVs0XSxcbiAgICAgIGxheWVyOiBpdGVtWzVdXG4gICAgfTtcbiAgICBpZiAoaW5kZXhCeUlkZW50aWZpZXIgIT09IC0xKSB7XG4gICAgICBzdHlsZXNJbkRPTVtpbmRleEJ5SWRlbnRpZmllcl0ucmVmZXJlbmNlcysrO1xuICAgICAgc3R5bGVzSW5ET01baW5kZXhCeUlkZW50aWZpZXJdLnVwZGF0ZXIob2JqKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIHVwZGF0ZXIgPSBhZGRFbGVtZW50U3R5bGUob2JqLCBvcHRpb25zKTtcbiAgICAgIG9wdGlvbnMuYnlJbmRleCA9IGk7XG4gICAgICBzdHlsZXNJbkRPTS5zcGxpY2UoaSwgMCwge1xuICAgICAgICBpZGVudGlmaWVyOiBpZGVudGlmaWVyLFxuICAgICAgICB1cGRhdGVyOiB1cGRhdGVyLFxuICAgICAgICByZWZlcmVuY2VzOiAxXG4gICAgICB9KTtcbiAgICB9XG4gICAgaWRlbnRpZmllcnMucHVzaChpZGVudGlmaWVyKTtcbiAgfVxuICByZXR1cm4gaWRlbnRpZmllcnM7XG59XG5mdW5jdGlvbiBhZGRFbGVtZW50U3R5bGUob2JqLCBvcHRpb25zKSB7XG4gIHZhciBhcGkgPSBvcHRpb25zLmRvbUFQSShvcHRpb25zKTtcbiAgYXBpLnVwZGF0ZShvYmopO1xuICB2YXIgdXBkYXRlciA9IGZ1bmN0aW9uIHVwZGF0ZXIobmV3T2JqKSB7XG4gICAgaWYgKG5ld09iaikge1xuICAgICAgaWYgKG5ld09iai5jc3MgPT09IG9iai5jc3MgJiYgbmV3T2JqLm1lZGlhID09PSBvYmoubWVkaWEgJiYgbmV3T2JqLnNvdXJjZU1hcCA9PT0gb2JqLnNvdXJjZU1hcCAmJiBuZXdPYmouc3VwcG9ydHMgPT09IG9iai5zdXBwb3J0cyAmJiBuZXdPYmoubGF5ZXIgPT09IG9iai5sYXllcikge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBhcGkudXBkYXRlKG9iaiA9IG5ld09iaik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFwaS5yZW1vdmUoKTtcbiAgICB9XG4gIH07XG4gIHJldHVybiB1cGRhdGVyO1xufVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobGlzdCwgb3B0aW9ucykge1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgbGlzdCA9IGxpc3QgfHwgW107XG4gIHZhciBsYXN0SWRlbnRpZmllcnMgPSBtb2R1bGVzVG9Eb20obGlzdCwgb3B0aW9ucyk7XG4gIHJldHVybiBmdW5jdGlvbiB1cGRhdGUobmV3TGlzdCkge1xuICAgIG5ld0xpc3QgPSBuZXdMaXN0IHx8IFtdO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGFzdElkZW50aWZpZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgaWRlbnRpZmllciA9IGxhc3RJZGVudGlmaWVyc1tpXTtcbiAgICAgIHZhciBpbmRleCA9IGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpO1xuICAgICAgc3R5bGVzSW5ET01baW5kZXhdLnJlZmVyZW5jZXMtLTtcbiAgICB9XG4gICAgdmFyIG5ld0xhc3RJZGVudGlmaWVycyA9IG1vZHVsZXNUb0RvbShuZXdMaXN0LCBvcHRpb25zKTtcbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgbGFzdElkZW50aWZpZXJzLmxlbmd0aDsgX2krKykge1xuICAgICAgdmFyIF9pZGVudGlmaWVyID0gbGFzdElkZW50aWZpZXJzW19pXTtcbiAgICAgIHZhciBfaW5kZXggPSBnZXRJbmRleEJ5SWRlbnRpZmllcihfaWRlbnRpZmllcik7XG4gICAgICBpZiAoc3R5bGVzSW5ET01bX2luZGV4XS5yZWZlcmVuY2VzID09PSAwKSB7XG4gICAgICAgIHN0eWxlc0luRE9NW19pbmRleF0udXBkYXRlcigpO1xuICAgICAgICBzdHlsZXNJbkRPTS5zcGxpY2UoX2luZGV4LCAxKTtcbiAgICAgIH1cbiAgICB9XG4gICAgbGFzdElkZW50aWZpZXJzID0gbmV3TGFzdElkZW50aWZpZXJzO1xuICB9O1xufTsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///5072\n')},7659:module=>{"use strict";eval('\n\nvar memo = {};\n\n/* istanbul ignore next  */\nfunction getTarget(target) {\n  if (typeof memo[target] === "undefined") {\n    var styleTarget = document.querySelector(target);\n\n    // Special case to return head of iframe instead of iframe itself\n    if (window.HTMLIFrameElement && styleTarget instanceof window.HTMLIFrameElement) {\n      try {\n        // This will throw an exception if access to iframe is blocked\n        // due to cross-origin restrictions\n        styleTarget = styleTarget.contentDocument.head;\n      } catch (e) {\n        // istanbul ignore next\n        styleTarget = null;\n      }\n    }\n    memo[target] = styleTarget;\n  }\n  return memo[target];\n}\n\n/* istanbul ignore next  */\nfunction insertBySelector(insert, style) {\n  var target = getTarget(insert);\n  if (!target) {\n    throw new Error("Couldn\'t find a style target. This probably means that the value for the \'insert\' parameter is invalid.");\n  }\n  target.appendChild(style);\n}\nmodule.exports = insertBySelector;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNzY1OS5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8yMDI0LWt0c3N0dWRpby1ob21ld29ya3MvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzP2IyMTQiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBtZW1vID0ge307XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gZ2V0VGFyZ2V0KHRhcmdldCkge1xuICBpZiAodHlwZW9mIG1lbW9bdGFyZ2V0XSA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgIHZhciBzdHlsZVRhcmdldCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGFyZ2V0KTtcblxuICAgIC8vIFNwZWNpYWwgY2FzZSB0byByZXR1cm4gaGVhZCBvZiBpZnJhbWUgaW5zdGVhZCBvZiBpZnJhbWUgaXRzZWxmXG4gICAgaWYgKHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCAmJiBzdHlsZVRhcmdldCBpbnN0YW5jZW9mIHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgLy8gVGhpcyB3aWxsIHRocm93IGFuIGV4Y2VwdGlvbiBpZiBhY2Nlc3MgdG8gaWZyYW1lIGlzIGJsb2NrZWRcbiAgICAgICAgLy8gZHVlIHRvIGNyb3NzLW9yaWdpbiByZXN0cmljdGlvbnNcbiAgICAgICAgc3R5bGVUYXJnZXQgPSBzdHlsZVRhcmdldC5jb250ZW50RG9jdW1lbnQuaGVhZDtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgLy8gaXN0YW5idWwgaWdub3JlIG5leHRcbiAgICAgICAgc3R5bGVUYXJnZXQgPSBudWxsO1xuICAgICAgfVxuICAgIH1cbiAgICBtZW1vW3RhcmdldF0gPSBzdHlsZVRhcmdldDtcbiAgfVxuICByZXR1cm4gbWVtb1t0YXJnZXRdO1xufVxuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIGluc2VydEJ5U2VsZWN0b3IoaW5zZXJ0LCBzdHlsZSkge1xuICB2YXIgdGFyZ2V0ID0gZ2V0VGFyZ2V0KGluc2VydCk7XG4gIGlmICghdGFyZ2V0KSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiQ291bGRuJ3QgZmluZCBhIHN0eWxlIHRhcmdldC4gVGhpcyBwcm9iYWJseSBtZWFucyB0aGF0IHRoZSB2YWx1ZSBmb3IgdGhlICdpbnNlcnQnIHBhcmFtZXRlciBpcyBpbnZhbGlkLlwiKTtcbiAgfVxuICB0YXJnZXQuYXBwZW5kQ2hpbGQoc3R5bGUpO1xufVxubW9kdWxlLmV4cG9ydHMgPSBpbnNlcnRCeVNlbGVjdG9yOyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///7659\n')},540:module=>{"use strict";eval('\n\n/* istanbul ignore next  */\nfunction insertStyleElement(options) {\n  var element = document.createElement("style");\n  options.setAttributes(element, options.attributes);\n  options.insert(element, options.options);\n  return element;\n}\nmodule.exports = insertStyleElement;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTQwLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8yMDI0LWt0c3N0dWRpby1ob21ld29ya3MvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanM/ZGU2YyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBpbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucykge1xuICB2YXIgZWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzdHlsZVwiKTtcbiAgb3B0aW9ucy5zZXRBdHRyaWJ1dGVzKGVsZW1lbnQsIG9wdGlvbnMuYXR0cmlidXRlcyk7XG4gIG9wdGlvbnMuaW5zZXJ0KGVsZW1lbnQsIG9wdGlvbnMub3B0aW9ucyk7XG4gIHJldHVybiBlbGVtZW50O1xufVxubW9kdWxlLmV4cG9ydHMgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///540\n')},5056:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval('\n\n/* istanbul ignore next  */\nfunction setAttributesWithoutAttributes(styleElement) {\n  var nonce =  true ? __webpack_require__.nc : 0;\n  if (nonce) {\n    styleElement.setAttribute("nonce", nonce);\n  }\n}\nmodule.exports = setAttributesWithoutAttributes;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTA1Ni5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYjtBQUNBO0FBQ0EsY0FBYyxLQUF3QyxHQUFHLHNCQUFpQixHQUFHLENBQUk7QUFDakY7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovLzIwMjQta3Rzc3R1ZGlvLWhvbWV3b3Jrcy8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qcz9kZGNlIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIHNldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcyhzdHlsZUVsZW1lbnQpIHtcbiAgdmFyIG5vbmNlID0gdHlwZW9mIF9fd2VicGFja19ub25jZV9fICE9PSBcInVuZGVmaW5lZFwiID8gX193ZWJwYWNrX25vbmNlX18gOiBudWxsO1xuICBpZiAobm9uY2UpIHtcbiAgICBzdHlsZUVsZW1lbnQuc2V0QXR0cmlidXRlKFwibm9uY2VcIiwgbm9uY2UpO1xuICB9XG59XG5tb2R1bGUuZXhwb3J0cyA9IHNldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlczsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///5056\n')},7825:module=>{"use strict";eval('\n\n/* istanbul ignore next  */\nfunction apply(styleElement, options, obj) {\n  var css = "";\n  if (obj.supports) {\n    css += "@supports (".concat(obj.supports, ") {");\n  }\n  if (obj.media) {\n    css += "@media ".concat(obj.media, " {");\n  }\n  var needLayer = typeof obj.layer !== "undefined";\n  if (needLayer) {\n    css += "@layer".concat(obj.layer.length > 0 ? " ".concat(obj.layer) : "", " {");\n  }\n  css += obj.css;\n  if (needLayer) {\n    css += "}";\n  }\n  if (obj.media) {\n    css += "}";\n  }\n  if (obj.supports) {\n    css += "}";\n  }\n  var sourceMap = obj.sourceMap;\n  if (sourceMap && typeof btoa !== "undefined") {\n    css += "\\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))), " */");\n  }\n\n  // For old IE\n  /* istanbul ignore if  */\n  options.styleTagTransform(css, styleElement, options.options);\n}\nfunction removeStyleElement(styleElement) {\n  // istanbul ignore if\n  if (styleElement.parentNode === null) {\n    return false;\n  }\n  styleElement.parentNode.removeChild(styleElement);\n}\n\n/* istanbul ignore next  */\nfunction domAPI(options) {\n  if (typeof document === "undefined") {\n    return {\n      update: function update() {},\n      remove: function remove() {}\n    };\n  }\n  var styleElement = options.insertStyleElement(options);\n  return {\n    update: function update(obj) {\n      apply(styleElement, options, obj);\n    },\n    remove: function remove() {\n      removeStyleElement(styleElement);\n    }\n  };\n}\nmodule.exports = domAPI;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNzgyNS5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtEQUFrRDtBQUNsRDtBQUNBO0FBQ0EsMENBQTBDO0FBQzFDO0FBQ0E7QUFDQTtBQUNBLGlGQUFpRjtBQUNqRjtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBLHlEQUF5RDtBQUN6RDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0NBQWtDO0FBQ2xDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovLzIwMjQta3Rzc3R1ZGlvLWhvbWV3b3Jrcy8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzP2U0NzkiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gYXBwbHkoc3R5bGVFbGVtZW50LCBvcHRpb25zLCBvYmopIHtcbiAgdmFyIGNzcyA9IFwiXCI7XG4gIGlmIChvYmouc3VwcG9ydHMpIHtcbiAgICBjc3MgKz0gXCJAc3VwcG9ydHMgKFwiLmNvbmNhdChvYmouc3VwcG9ydHMsIFwiKSB7XCIpO1xuICB9XG4gIGlmIChvYmoubWVkaWEpIHtcbiAgICBjc3MgKz0gXCJAbWVkaWEgXCIuY29uY2F0KG9iai5tZWRpYSwgXCIge1wiKTtcbiAgfVxuICB2YXIgbmVlZExheWVyID0gdHlwZW9mIG9iai5sYXllciAhPT0gXCJ1bmRlZmluZWRcIjtcbiAgaWYgKG5lZWRMYXllcikge1xuICAgIGNzcyArPSBcIkBsYXllclwiLmNvbmNhdChvYmoubGF5ZXIubGVuZ3RoID4gMCA/IFwiIFwiLmNvbmNhdChvYmoubGF5ZXIpIDogXCJcIiwgXCIge1wiKTtcbiAgfVxuICBjc3MgKz0gb2JqLmNzcztcbiAgaWYgKG5lZWRMYXllcikge1xuICAgIGNzcyArPSBcIn1cIjtcbiAgfVxuICBpZiAob2JqLm1lZGlhKSB7XG4gICAgY3NzICs9IFwifVwiO1xuICB9XG4gIGlmIChvYmouc3VwcG9ydHMpIHtcbiAgICBjc3MgKz0gXCJ9XCI7XG4gIH1cbiAgdmFyIHNvdXJjZU1hcCA9IG9iai5zb3VyY2VNYXA7XG4gIGlmIChzb3VyY2VNYXAgJiYgdHlwZW9mIGJ0b2EgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICBjc3MgKz0gXCJcXG4vKiMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LFwiLmNvbmNhdChidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShzb3VyY2VNYXApKSkpLCBcIiAqL1wiKTtcbiAgfVxuXG4gIC8vIEZvciBvbGQgSUVcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICAqL1xuICBvcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtKGNzcywgc3R5bGVFbGVtZW50LCBvcHRpb25zLm9wdGlvbnMpO1xufVxuZnVuY3Rpb24gcmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlRWxlbWVudCkge1xuICAvLyBpc3RhbmJ1bCBpZ25vcmUgaWZcbiAgaWYgKHN0eWxlRWxlbWVudC5wYXJlbnROb2RlID09PSBudWxsKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHN0eWxlRWxlbWVudC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHN0eWxlRWxlbWVudCk7XG59XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gZG9tQVBJKG9wdGlvbnMpIHtcbiAgaWYgKHR5cGVvZiBkb2N1bWVudCA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgIHJldHVybiB7XG4gICAgICB1cGRhdGU6IGZ1bmN0aW9uIHVwZGF0ZSgpIHt9LFxuICAgICAgcmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUoKSB7fVxuICAgIH07XG4gIH1cbiAgdmFyIHN0eWxlRWxlbWVudCA9IG9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMpO1xuICByZXR1cm4ge1xuICAgIHVwZGF0ZTogZnVuY3Rpb24gdXBkYXRlKG9iaikge1xuICAgICAgYXBwbHkoc3R5bGVFbGVtZW50LCBvcHRpb25zLCBvYmopO1xuICAgIH0sXG4gICAgcmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUoKSB7XG4gICAgICByZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGVFbGVtZW50KTtcbiAgICB9XG4gIH07XG59XG5tb2R1bGUuZXhwb3J0cyA9IGRvbUFQSTsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///7825\n')},1113:module=>{"use strict";eval("\n\n/* istanbul ignore next  */\nfunction styleTagTransform(css, styleElement) {\n  if (styleElement.styleSheet) {\n    styleElement.styleSheet.cssText = css;\n  } else {\n    while (styleElement.firstChild) {\n      styleElement.removeChild(styleElement.firstChild);\n    }\n    styleElement.appendChild(document.createTextNode(css));\n  }\n}\nmodule.exports = styleTagTransform;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTExMy5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYjtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovLzIwMjQta3Rzc3R1ZGlvLWhvbWV3b3Jrcy8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzPzFkZGUiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gc3R5bGVUYWdUcmFuc2Zvcm0oY3NzLCBzdHlsZUVsZW1lbnQpIHtcbiAgaWYgKHN0eWxlRWxlbWVudC5zdHlsZVNoZWV0KSB7XG4gICAgc3R5bGVFbGVtZW50LnN0eWxlU2hlZXQuY3NzVGV4dCA9IGNzcztcbiAgfSBlbHNlIHtcbiAgICB3aGlsZSAoc3R5bGVFbGVtZW50LmZpcnN0Q2hpbGQpIHtcbiAgICAgIHN0eWxlRWxlbWVudC5yZW1vdmVDaGlsZChzdHlsZUVsZW1lbnQuZmlyc3RDaGlsZCk7XG4gICAgfVxuICAgIHN0eWxlRWxlbWVudC5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjc3MpKTtcbiAgfVxufVxubW9kdWxlLmV4cG9ydHMgPSBzdHlsZVRhZ1RyYW5zZm9ybTsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///1113\n")},8336:(Q,U,F)=>{"use strict";Q.exports=F.p+"6cd35edfbc0d7a417131.woff2"},7664:(Q,U,F)=>{"use strict";Q.exports=F.p+"fc0337b9cf1cce2e6e1e.woff2"},499:(Q,U,F)=>{"use strict";Q.exports=F.p+"a25806274237d06e00a6.woff2"},7073:(module,exports)=>{eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!\n\tCopyright (c) 2018 Jed Watson.\n\tLicensed under the MIT License (MIT), see\n\thttp://jedwatson.github.io/classnames\n*/\n/* global define */\n\n(function () {\n  'use strict';\n\n  var hasOwn = {}.hasOwnProperty;\n  function classNames() {\n    var classes = '';\n    for (var i = 0; i < arguments.length; i++) {\n      var arg = arguments[i];\n      if (arg) {\n        classes = appendClass(classes, parseValue(arg));\n      }\n    }\n    return classes;\n  }\n  function parseValue(arg) {\n    if (typeof arg === 'string' || typeof arg === 'number') {\n      return arg;\n    }\n    if (typeof arg !== 'object') {\n      return '';\n    }\n    if (Array.isArray(arg)) {\n      return classNames.apply(null, arg);\n    }\n    if (arg.toString !== Object.prototype.toString && !arg.toString.toString().includes('[native code]')) {\n      return arg.toString();\n    }\n    var classes = '';\n    for (var key in arg) {\n      if (hasOwn.call(arg, key) && arg[key]) {\n        classes = appendClass(classes, key);\n      }\n    }\n    return classes;\n  }\n  function appendClass(value, newClass) {\n    if (!newClass) {\n      return value;\n    }\n    if (value) {\n      return value + ' ' + newClass;\n    }\n    return value + newClass;\n  }\n  if ( true && module.exports) {\n    classNames.default = classNames;\n    module.exports = classNames;\n  } else if (true) {\n    // register as 'classnames', consistent with npm package name\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function () {\n      return classNames;\n    }).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n  } else {}\n})();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNzA3My5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUMsYUFBWTtFQUNaLFlBQVk7O0VBRVosSUFBSUEsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDQyxjQUFjO0VBRTlCLFNBQVNDLFVBQVVBLENBQUEsRUFBSTtJQUN0QixJQUFJQyxPQUFPLEdBQUcsRUFBRTtJQUVoQixLQUFLLElBQUlDLENBQUMsR0FBRyxDQUFDLEVBQUVBLENBQUMsR0FBR0MsU0FBUyxDQUFDQyxNQUFNLEVBQUVGLENBQUMsRUFBRSxFQUFFO01BQzFDLElBQUlHLEdBQUcsR0FBR0YsU0FBUyxDQUFDRCxDQUFDLENBQUM7TUFDdEIsSUFBSUcsR0FBRyxFQUFFO1FBQ1JKLE9BQU8sR0FBR0ssV0FBVyxDQUFDTCxPQUFPLEVBQUVNLFVBQVUsQ0FBQ0YsR0FBRyxDQUFDLENBQUM7TUFDaEQ7SUFDRDtJQUVBLE9BQU9KLE9BQU87RUFDZjtFQUVBLFNBQVNNLFVBQVVBLENBQUVGLEdBQUcsRUFBRTtJQUN6QixJQUFJLE9BQU9BLEdBQUcsS0FBSyxRQUFRLElBQUksT0FBT0EsR0FBRyxLQUFLLFFBQVEsRUFBRTtNQUN2RCxPQUFPQSxHQUFHO0lBQ1g7SUFFQSxJQUFJLE9BQU9BLEdBQUcsS0FBSyxRQUFRLEVBQUU7TUFDNUIsT0FBTyxFQUFFO0lBQ1Y7SUFFQSxJQUFJRyxLQUFLLENBQUNDLE9BQU8sQ0FBQ0osR0FBRyxDQUFDLEVBQUU7TUFDdkIsT0FBT0wsVUFBVSxDQUFDVSxLQUFLLENBQUMsSUFBSSxFQUFFTCxHQUFHLENBQUM7SUFDbkM7SUFFQSxJQUFJQSxHQUFHLENBQUNNLFFBQVEsS0FBS0MsTUFBTSxDQUFDQyxTQUFTLENBQUNGLFFBQVEsSUFBSSxDQUFDTixHQUFHLENBQUNNLFFBQVEsQ0FBQ0EsUUFBUSxDQUFDLENBQUMsQ0FBQ0csUUFBUSxDQUFDLGVBQWUsQ0FBQyxFQUFFO01BQ3JHLE9BQU9ULEdBQUcsQ0FBQ00sUUFBUSxDQUFDLENBQUM7SUFDdEI7SUFFQSxJQUFJVixPQUFPLEdBQUcsRUFBRTtJQUVoQixLQUFLLElBQUljLEdBQUcsSUFBSVYsR0FBRyxFQUFFO01BQ3BCLElBQUlQLE1BQU0sQ0FBQ2tCLElBQUksQ0FBQ1gsR0FBRyxFQUFFVSxHQUFHLENBQUMsSUFBSVYsR0FBRyxDQUFDVSxHQUFHLENBQUMsRUFBRTtRQUN0Q2QsT0FBTyxHQUFHSyxXQUFXLENBQUNMLE9BQU8sRUFBRWMsR0FBRyxDQUFDO01BQ3BDO0lBQ0Q7SUFFQSxPQUFPZCxPQUFPO0VBQ2Y7RUFFQSxTQUFTSyxXQUFXQSxDQUFFVyxLQUFLLEVBQUVDLFFBQVEsRUFBRTtJQUN0QyxJQUFJLENBQUNBLFFBQVEsRUFBRTtNQUNkLE9BQU9ELEtBQUs7SUFDYjtJQUVBLElBQUlBLEtBQUssRUFBRTtNQUNWLE9BQU9BLEtBQUssR0FBRyxHQUFHLEdBQUdDLFFBQVE7SUFDOUI7SUFFQSxPQUFPRCxLQUFLLEdBQUdDLFFBQVE7RUFDeEI7RUFFQSxJQUFJLEtBQTZCLElBQUlDLE1BQU0sQ0FBQ0MsT0FBTyxFQUFFO0lBQ3BEcEIsVUFBVSxDQUFDcUIsT0FBTyxHQUFHckIsVUFBVTtJQUMvQm1CLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHcEIsVUFBVTtFQUM1QixDQUFDLE1BQU0sSUFBSSxJQUE0RSxFQUFFO0lBQ3hGO0lBQ0FzQixpQ0FBcUIsRUFBRSxtQ0FBRSxZQUFZO01BQ3BDLE9BQU90QixVQUFVO0lBQ2xCLENBQUM7QUFBQSxrR0FBQztFQUNILENBQUMsTUFBTSxFQUVOO0FBQ0YsQ0FBQyxFQUFDLENBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8yMDI0LWt0c3N0dWRpby1ob21ld29ya3MvLi9ub2RlX21vZHVsZXMvY2xhc3NuYW1lcy9pbmRleC5qcz80ZDI2Il0sInNvdXJjZXNDb250ZW50IjpbIi8qIVxuXHRDb3B5cmlnaHQgKGMpIDIwMTggSmVkIFdhdHNvbi5cblx0TGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlIChNSVQpLCBzZWVcblx0aHR0cDovL2plZHdhdHNvbi5naXRodWIuaW8vY2xhc3NuYW1lc1xuKi9cbi8qIGdsb2JhbCBkZWZpbmUgKi9cblxuKGZ1bmN0aW9uICgpIHtcblx0J3VzZSBzdHJpY3QnO1xuXG5cdHZhciBoYXNPd24gPSB7fS5oYXNPd25Qcm9wZXJ0eTtcblxuXHRmdW5jdGlvbiBjbGFzc05hbWVzICgpIHtcblx0XHR2YXIgY2xhc3NlcyA9ICcnO1xuXG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcblx0XHRcdHZhciBhcmcgPSBhcmd1bWVudHNbaV07XG5cdFx0XHRpZiAoYXJnKSB7XG5cdFx0XHRcdGNsYXNzZXMgPSBhcHBlbmRDbGFzcyhjbGFzc2VzLCBwYXJzZVZhbHVlKGFyZykpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBjbGFzc2VzO1xuXHR9XG5cblx0ZnVuY3Rpb24gcGFyc2VWYWx1ZSAoYXJnKSB7XG5cdFx0aWYgKHR5cGVvZiBhcmcgPT09ICdzdHJpbmcnIHx8IHR5cGVvZiBhcmcgPT09ICdudW1iZXInKSB7XG5cdFx0XHRyZXR1cm4gYXJnO1xuXHRcdH1cblxuXHRcdGlmICh0eXBlb2YgYXJnICE9PSAnb2JqZWN0Jykge1xuXHRcdFx0cmV0dXJuICcnO1xuXHRcdH1cblxuXHRcdGlmIChBcnJheS5pc0FycmF5KGFyZykpIHtcblx0XHRcdHJldHVybiBjbGFzc05hbWVzLmFwcGx5KG51bGwsIGFyZyk7XG5cdFx0fVxuXG5cdFx0aWYgKGFyZy50b1N0cmluZyAhPT0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZyAmJiAhYXJnLnRvU3RyaW5nLnRvU3RyaW5nKCkuaW5jbHVkZXMoJ1tuYXRpdmUgY29kZV0nKSkge1xuXHRcdFx0cmV0dXJuIGFyZy50b1N0cmluZygpO1xuXHRcdH1cblxuXHRcdHZhciBjbGFzc2VzID0gJyc7XG5cblx0XHRmb3IgKHZhciBrZXkgaW4gYXJnKSB7XG5cdFx0XHRpZiAoaGFzT3duLmNhbGwoYXJnLCBrZXkpICYmIGFyZ1trZXldKSB7XG5cdFx0XHRcdGNsYXNzZXMgPSBhcHBlbmRDbGFzcyhjbGFzc2VzLCBrZXkpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBjbGFzc2VzO1xuXHR9XG5cblx0ZnVuY3Rpb24gYXBwZW5kQ2xhc3MgKHZhbHVlLCBuZXdDbGFzcykge1xuXHRcdGlmICghbmV3Q2xhc3MpIHtcblx0XHRcdHJldHVybiB2YWx1ZTtcblx0XHR9XG5cdFxuXHRcdGlmICh2YWx1ZSkge1xuXHRcdFx0cmV0dXJuIHZhbHVlICsgJyAnICsgbmV3Q2xhc3M7XG5cdFx0fVxuXHRcblx0XHRyZXR1cm4gdmFsdWUgKyBuZXdDbGFzcztcblx0fVxuXG5cdGlmICh0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJyAmJiBtb2R1bGUuZXhwb3J0cykge1xuXHRcdGNsYXNzTmFtZXMuZGVmYXVsdCA9IGNsYXNzTmFtZXM7XG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBjbGFzc05hbWVzO1xuXHR9IGVsc2UgaWYgKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIGRlZmluZS5hbWQgPT09ICdvYmplY3QnICYmIGRlZmluZS5hbWQpIHtcblx0XHQvLyByZWdpc3RlciBhcyAnY2xhc3NuYW1lcycsIGNvbnNpc3RlbnQgd2l0aCBucG0gcGFja2FnZSBuYW1lXG5cdFx0ZGVmaW5lKCdjbGFzc25hbWVzJywgW10sIGZ1bmN0aW9uICgpIHtcblx0XHRcdHJldHVybiBjbGFzc05hbWVzO1xuXHRcdH0pO1xuXHR9IGVsc2Uge1xuXHRcdHdpbmRvdy5jbGFzc05hbWVzID0gY2xhc3NOYW1lcztcblx0fVxufSgpKTtcbiJdLCJuYW1lcyI6WyJoYXNPd24iLCJoYXNPd25Qcm9wZXJ0eSIsImNsYXNzTmFtZXMiLCJjbGFzc2VzIiwiaSIsImFyZ3VtZW50cyIsImxlbmd0aCIsImFyZyIsImFwcGVuZENsYXNzIiwicGFyc2VWYWx1ZSIsIkFycmF5IiwiaXNBcnJheSIsImFwcGx5IiwidG9TdHJpbmciLCJPYmplY3QiLCJwcm90b3R5cGUiLCJpbmNsdWRlcyIsImtleSIsImNhbGwiLCJ2YWx1ZSIsIm5ld0NsYXNzIiwibW9kdWxlIiwiZXhwb3J0cyIsImRlZmF1bHQiLCJkZWZpbmUiLCJhbWQiLCJ3aW5kb3ciXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///7073\n")}},__webpack_module_cache__={},leafPrototypes,getProto;function __webpack_require__(Q){var U=__webpack_module_cache__[Q];if(void 0!==U)return U.exports;var F=__webpack_module_cache__[Q]={id:Q,exports:{}};return __webpack_modules__[Q](F,F.exports,__webpack_require__),F.exports}__webpack_require__.m=__webpack_modules__,__webpack_require__.n=Q=>{var U=Q&&Q.__esModule?()=>Q.default:()=>Q;return __webpack_require__.d(U,{a:U}),U},getProto=Object.getPrototypeOf?Q=>Object.getPrototypeOf(Q):Q=>Q.__proto__,__webpack_require__.t=function(Q,U){if(1&U&&(Q=this(Q)),8&U)return Q;if("object"==typeof Q&&Q){if(4&U&&Q.__esModule)return Q;if(16&U&&"function"==typeof Q.then)return Q}var F=Object.create(null);__webpack_require__.r(F);var B={};leafPrototypes=leafPrototypes||[null,getProto({}),getProto([]),getProto(getProto)];for(var s=2&U&&Q;"object"==typeof s&&!~leafPrototypes.indexOf(s);s=getProto(s))Object.getOwnPropertyNames(s).forEach((U=>B[U]=()=>Q[U]));return B.default=()=>Q,__webpack_require__.d(F,B),F},__webpack_require__.d=(Q,U)=>{for(var F in U)__webpack_require__.o(U,F)&&!__webpack_require__.o(Q,F)&&Object.defineProperty(Q,F,{enumerable:!0,get:U[F]})},__webpack_require__.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(Q){if("object"==typeof window)return window}}(),__webpack_require__.o=(Q,U)=>Object.prototype.hasOwnProperty.call(Q,U),__webpack_require__.r=Q=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(Q,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(Q,"__esModule",{value:!0})},(()=>{var Q;__webpack_require__.g.importScripts&&(Q=__webpack_require__.g.location+"");var U=__webpack_require__.g.document;if(!Q&&U&&(U.currentScript&&(Q=U.currentScript.src),!Q)){var F=U.getElementsByTagName("script");if(F.length)for(var B=F.length-1;B>-1&&(!Q||!/^http(s?):/.test(Q));)Q=F[B--].src}if(!Q)throw new Error("Automatic publicPath is not supported in this browser");Q=Q.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),__webpack_require__.p=Q})(),__webpack_require__.b=document.baseURI||self.location.href,__webpack_require__.nc=void 0;var __webpack_exports__=__webpack_require__(6986)})();