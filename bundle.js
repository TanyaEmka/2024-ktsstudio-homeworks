(()=>{var __webpack_modules__={9089:module=>{"use strict";eval('\n\n/*\n  MIT License http://www.opensource.org/licenses/mit-license.php\n  Author Tobias Koppers @sokra\n*/\nmodule.exports = function (cssWithMappingToString) {\n  var list = [];\n\n  // return the list of modules as css string\n  list.toString = function toString() {\n    return this.map(function (item) {\n      var content = "";\n      var needLayer = typeof item[5] !== "undefined";\n      if (item[4]) {\n        content += "@supports (".concat(item[4], ") {");\n      }\n      if (item[2]) {\n        content += "@media ".concat(item[2], " {");\n      }\n      if (needLayer) {\n        content += "@layer".concat(item[5].length > 0 ? " ".concat(item[5]) : "", " {");\n      }\n      content += cssWithMappingToString(item);\n      if (needLayer) {\n        content += "}";\n      }\n      if (item[2]) {\n        content += "}";\n      }\n      if (item[4]) {\n        content += "}";\n      }\n      return content;\n    }).join("");\n  };\n\n  // import a list of modules into the list\n  list.i = function i(modules, media, dedupe, supports, layer) {\n    if (typeof modules === "string") {\n      modules = [[null, modules, undefined]];\n    }\n    var alreadyImportedModules = {};\n    if (dedupe) {\n      for (var k = 0; k < this.length; k++) {\n        var id = this[k][0];\n        if (id != null) {\n          alreadyImportedModules[id] = true;\n        }\n      }\n    }\n    for (var _k = 0; _k < modules.length; _k++) {\n      var item = [].concat(modules[_k]);\n      if (dedupe && alreadyImportedModules[item[0]]) {\n        continue;\n      }\n      if (typeof layer !== "undefined") {\n        if (typeof item[5] === "undefined") {\n          item[5] = layer;\n        } else {\n          item[1] = "@layer".concat(item[5].length > 0 ? " ".concat(item[5]) : "", " {").concat(item[1], "}");\n          item[5] = layer;\n        }\n      }\n      if (media) {\n        if (!item[2]) {\n          item[2] = media;\n        } else {\n          item[1] = "@media ".concat(item[2], " {").concat(item[1], "}");\n          item[2] = media;\n        }\n      }\n      if (supports) {\n        if (!item[4]) {\n          item[4] = "".concat(supports);\n        } else {\n          item[1] = "@supports (".concat(item[4], ") {").concat(item[1], "}");\n          item[4] = supports;\n        }\n      }\n      list.push(item);\n    }\n  };\n  return list;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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LENBQUNHLE1BQU0sQ0FBQ0gsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLEdBQUcsQ0FBQztVQUNuRUEsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHVSxRQUFRO1FBQ3BCO01BQ0Y7TUFDQWIsSUFBSSxDQUFDb0IsSUFBSSxDQUFDakIsSUFBSSxDQUFDO0lBQ2pCO0VBQ0YsQ0FBQztFQUNELE9BQU9ILElBQUk7QUFDYixDQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vMjAyNC1rdHNzdHVkaW8taG9tZXdvcmtzLy4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qcz8yNGZiIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG4vKlxuICBNSVQgTGljZW5zZSBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocFxuICBBdXRob3IgVG9iaWFzIEtvcHBlcnMgQHNva3JhXG4qL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoY3NzV2l0aE1hcHBpbmdUb1N0cmluZykge1xuICB2YXIgbGlzdCA9IFtdO1xuXG4gIC8vIHJldHVybiB0aGUgbGlzdCBvZiBtb2R1bGVzIGFzIGNzcyBzdHJpbmdcbiAgbGlzdC50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiB0aGlzLm1hcChmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgdmFyIGNvbnRlbnQgPSBcIlwiO1xuICAgICAgdmFyIG5lZWRMYXllciA9IHR5cGVvZiBpdGVtWzVdICE9PSBcInVuZGVmaW5lZFwiO1xuICAgICAgaWYgKGl0ZW1bNF0pIHtcbiAgICAgICAgY29udGVudCArPSBcIkBzdXBwb3J0cyAoXCIuY29uY2F0KGl0ZW1bNF0sIFwiKSB7XCIpO1xuICAgICAgfVxuICAgICAgaWYgKGl0ZW1bMl0pIHtcbiAgICAgICAgY29udGVudCArPSBcIkBtZWRpYSBcIi5jb25jYXQoaXRlbVsyXSwgXCIge1wiKTtcbiAgICAgIH1cbiAgICAgIGlmIChuZWVkTGF5ZXIpIHtcbiAgICAgICAgY29udGVudCArPSBcIkBsYXllclwiLmNvbmNhdChpdGVtWzVdLmxlbmd0aCA+IDAgPyBcIiBcIi5jb25jYXQoaXRlbVs1XSkgOiBcIlwiLCBcIiB7XCIpO1xuICAgICAgfVxuICAgICAgY29udGVudCArPSBjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKGl0ZW0pO1xuICAgICAgaWYgKG5lZWRMYXllcikge1xuICAgICAgICBjb250ZW50ICs9IFwifVwiO1xuICAgICAgfVxuICAgICAgaWYgKGl0ZW1bMl0pIHtcbiAgICAgICAgY29udGVudCArPSBcIn1cIjtcbiAgICAgIH1cbiAgICAgIGlmIChpdGVtWzRdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJ9XCI7XG4gICAgICB9XG4gICAgICByZXR1cm4gY29udGVudDtcbiAgICB9KS5qb2luKFwiXCIpO1xuICB9O1xuXG4gIC8vIGltcG9ydCBhIGxpc3Qgb2YgbW9kdWxlcyBpbnRvIHRoZSBsaXN0XG4gIGxpc3QuaSA9IGZ1bmN0aW9uIGkobW9kdWxlcywgbWVkaWEsIGRlZHVwZSwgc3VwcG9ydHMsIGxheWVyKSB7XG4gICAgaWYgKHR5cGVvZiBtb2R1bGVzID09PSBcInN0cmluZ1wiKSB7XG4gICAgICBtb2R1bGVzID0gW1tudWxsLCBtb2R1bGVzLCB1bmRlZmluZWRdXTtcbiAgICB9XG4gICAgdmFyIGFscmVhZHlJbXBvcnRlZE1vZHVsZXMgPSB7fTtcbiAgICBpZiAoZGVkdXBlKSB7XG4gICAgICBmb3IgKHZhciBrID0gMDsgayA8IHRoaXMubGVuZ3RoOyBrKyspIHtcbiAgICAgICAgdmFyIGlkID0gdGhpc1trXVswXTtcbiAgICAgICAgaWYgKGlkICE9IG51bGwpIHtcbiAgICAgICAgICBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2lkXSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgZm9yICh2YXIgX2sgPSAwOyBfayA8IG1vZHVsZXMubGVuZ3RoOyBfaysrKSB7XG4gICAgICB2YXIgaXRlbSA9IFtdLmNvbmNhdChtb2R1bGVzW19rXSk7XG4gICAgICBpZiAoZGVkdXBlICYmIGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaXRlbVswXV0pIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICBpZiAodHlwZW9mIGxheWVyICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgIGlmICh0eXBlb2YgaXRlbVs1XSA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAgIGl0ZW1bNV0gPSBsYXllcjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtWzFdID0gXCJAbGF5ZXJcIi5jb25jYXQoaXRlbVs1XS5sZW5ndGggPiAwID8gXCIgXCIuY29uY2F0KGl0ZW1bNV0pIDogXCJcIiwgXCIge1wiKS5jb25jYXQoaXRlbVsxXSwgXCJ9XCIpO1xuICAgICAgICAgIGl0ZW1bNV0gPSBsYXllcjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKG1lZGlhKSB7XG4gICAgICAgIGlmICghaXRlbVsyXSkge1xuICAgICAgICAgIGl0ZW1bMl0gPSBtZWRpYTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtWzFdID0gXCJAbWVkaWEgXCIuY29uY2F0KGl0ZW1bMl0sIFwiIHtcIikuY29uY2F0KGl0ZW1bMV0sIFwifVwiKTtcbiAgICAgICAgICBpdGVtWzJdID0gbWVkaWE7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChzdXBwb3J0cykge1xuICAgICAgICBpZiAoIWl0ZW1bNF0pIHtcbiAgICAgICAgICBpdGVtWzRdID0gXCJcIi5jb25jYXQoc3VwcG9ydHMpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW1bMV0gPSBcIkBzdXBwb3J0cyAoXCIuY29uY2F0KGl0ZW1bNF0sIFwiKSB7XCIpLmNvbmNhdChpdGVtWzFdLCBcIn1cIik7XG4gICAgICAgICAgaXRlbVs0XSA9IHN1cHBvcnRzO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBsaXN0LnB1c2goaXRlbSk7XG4gICAgfVxuICB9O1xuICByZXR1cm4gbGlzdDtcbn07Il0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJjc3NXaXRoTWFwcGluZ1RvU3RyaW5nIiwibGlzdCIsInRvU3RyaW5nIiwibWFwIiwiaXRlbSIsImNvbnRlbnQiLCJuZWVkTGF5ZXIiLCJjb25jYXQiLCJsZW5ndGgiLCJqb2luIiwiaSIsIm1vZHVsZXMiLCJtZWRpYSIsImRlZHVwZSIsInN1cHBvcnRzIiwibGF5ZXIiLCJ1bmRlZmluZWQiLCJhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzIiwiayIsImlkIiwiX2siLCJwdXNoIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///9089\n')},6492:module=>{"use strict";eval('\n\nmodule.exports = function (url, options) {\n  if (!options) {\n    options = {};\n  }\n  if (!url) {\n    return url;\n  }\n  url = String(url.__esModule ? url.default : url);\n\n  // If url is already wrapped in quotes, remove them\n  if (/^[\'"].*[\'"]$/.test(url)) {\n    url = url.slice(1, -1);\n  }\n  if (options.hash) {\n    url += options.hash;\n  }\n\n  // Should url be wrapped?\n  // See https://drafts.csswg.org/css-values-3/#urls\n  if (/["\'() \\t\\n]|(%20)/.test(url) || options.needQuotes) {\n    return "\\"".concat(url.replace(/"/g, \'\\\\"\').replace(/\\n/g, "\\\\n"), "\\"");\n  }\n  return url;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNjQ5Mi5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYkEsTUFBTSxDQUFDQyxPQUFPLEdBQUcsVUFBVUMsR0FBRyxFQUFFQyxPQUFPLEVBQUU7RUFDdkMsSUFBSSxDQUFDQSxPQUFPLEVBQUU7SUFDWkEsT0FBTyxHQUFHLENBQUMsQ0FBQztFQUNkO0VBQ0EsSUFBSSxDQUFDRCxHQUFHLEVBQUU7SUFDUixPQUFPQSxHQUFHO0VBQ1o7RUFDQUEsR0FBRyxHQUFHRSxNQUFNLENBQUNGLEdBQUcsQ0FBQ0csVUFBVSxHQUFHSCxHQUFHLENBQUNJLE9BQU8sR0FBR0osR0FBRyxDQUFDOztFQUVoRDtFQUNBLElBQUksY0FBYyxDQUFDSyxJQUFJLENBQUNMLEdBQUcsQ0FBQyxFQUFFO0lBQzVCQSxHQUFHLEdBQUdBLEdBQUcsQ0FBQ00sS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztFQUN4QjtFQUNBLElBQUlMLE9BQU8sQ0FBQ00sSUFBSSxFQUFFO0lBQ2hCUCxHQUFHLElBQUlDLE9BQU8sQ0FBQ00sSUFBSTtFQUNyQjs7RUFFQTtFQUNBO0VBQ0EsSUFBSSxtQkFBbUIsQ0FBQ0YsSUFBSSxDQUFDTCxHQUFHLENBQUMsSUFBSUMsT0FBTyxDQUFDTyxVQUFVLEVBQUU7SUFDdkQsT0FBTyxJQUFJLENBQUNDLE1BQU0sQ0FBQ1QsR0FBRyxDQUFDVSxPQUFPLENBQUMsSUFBSSxFQUFFLEtBQUssQ0FBQyxDQUFDQSxPQUFPLENBQUMsS0FBSyxFQUFFLEtBQUssQ0FBQyxFQUFFLElBQUksQ0FBQztFQUMxRTtFQUNBLE9BQU9WLEdBQUc7QUFDWixDQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vMjAyNC1rdHNzdHVkaW8taG9tZXdvcmtzLy4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2dldFVybC5qcz8xZGU1Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh1cmwsIG9wdGlvbnMpIHtcbiAgaWYgKCFvcHRpb25zKSB7XG4gICAgb3B0aW9ucyA9IHt9O1xuICB9XG4gIGlmICghdXJsKSB7XG4gICAgcmV0dXJuIHVybDtcbiAgfVxuICB1cmwgPSBTdHJpbmcodXJsLl9fZXNNb2R1bGUgPyB1cmwuZGVmYXVsdCA6IHVybCk7XG5cbiAgLy8gSWYgdXJsIGlzIGFscmVhZHkgd3JhcHBlZCBpbiBxdW90ZXMsIHJlbW92ZSB0aGVtXG4gIGlmICgvXlsnXCJdLipbJ1wiXSQvLnRlc3QodXJsKSkge1xuICAgIHVybCA9IHVybC5zbGljZSgxLCAtMSk7XG4gIH1cbiAgaWYgKG9wdGlvbnMuaGFzaCkge1xuICAgIHVybCArPSBvcHRpb25zLmhhc2g7XG4gIH1cblxuICAvLyBTaG91bGQgdXJsIGJlIHdyYXBwZWQ/XG4gIC8vIFNlZSBodHRwczovL2RyYWZ0cy5jc3N3Zy5vcmcvY3NzLXZhbHVlcy0zLyN1cmxzXG4gIGlmICgvW1wiJygpIFxcdFxcbl18KCUyMCkvLnRlc3QodXJsKSB8fCBvcHRpb25zLm5lZWRRdW90ZXMpIHtcbiAgICByZXR1cm4gXCJcXFwiXCIuY29uY2F0KHVybC5yZXBsYWNlKC9cIi9nLCAnXFxcXFwiJykucmVwbGFjZSgvXFxuL2csIFwiXFxcXG5cIiksIFwiXFxcIlwiKTtcbiAgfVxuICByZXR1cm4gdXJsO1xufTsiXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsInVybCIsIm9wdGlvbnMiLCJTdHJpbmciLCJfX2VzTW9kdWxlIiwiZGVmYXVsdCIsInRlc3QiLCJzbGljZSIsImhhc2giLCJuZWVkUXVvdGVzIiwiY29uY2F0IiwicmVwbGFjZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///6492\n')},963:module=>{"use strict";eval('\n\nmodule.exports = function (item) {\n  var content = item[1];\n  var cssMapping = item[3];\n  if (!cssMapping) {\n    return content;\n  }\n  if (typeof btoa === "function") {\n    var base64 = btoa(unescape(encodeURIComponent(JSON.stringify(cssMapping))));\n    var data = "sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(base64);\n    var sourceMapping = "/*# ".concat(data, " */");\n    return [content].concat([sourceMapping]).join("\\n");\n  }\n  return [content].join("\\n");\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTYzLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViQSxNQUFNLENBQUNDLE9BQU8sR0FBRyxVQUFVQyxJQUFJLEVBQUU7RUFDL0IsSUFBSUMsT0FBTyxHQUFHRCxJQUFJLENBQUMsQ0FBQyxDQUFDO0VBQ3JCLElBQUlFLFVBQVUsR0FBR0YsSUFBSSxDQUFDLENBQUMsQ0FBQztFQUN4QixJQUFJLENBQUNFLFVBQVUsRUFBRTtJQUNmLE9BQU9ELE9BQU87RUFDaEI7RUFDQSxJQUFJLE9BQU9FLElBQUksS0FBSyxVQUFVLEVBQUU7SUFDOUIsSUFBSUMsTUFBTSxHQUFHRCxJQUFJLENBQUNFLFFBQVEsQ0FBQ0Msa0JBQWtCLENBQUNDLElBQUksQ0FBQ0MsU0FBUyxDQUFDTixVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDM0UsSUFBSU8sSUFBSSxHQUFHLDhEQUE4RCxDQUFDQyxNQUFNLENBQUNOLE1BQU0sQ0FBQztJQUN4RixJQUFJTyxhQUFhLEdBQUcsTUFBTSxDQUFDRCxNQUFNLENBQUNELElBQUksRUFBRSxLQUFLLENBQUM7SUFDOUMsT0FBTyxDQUFDUixPQUFPLENBQUMsQ0FBQ1MsTUFBTSxDQUFDLENBQUNDLGFBQWEsQ0FBQyxDQUFDLENBQUNDLElBQUksQ0FBQyxJQUFJLENBQUM7RUFDckQ7RUFDQSxPQUFPLENBQUNYLE9BQU8sQ0FBQyxDQUFDVyxJQUFJLENBQUMsSUFBSSxDQUFDO0FBQzdCLENBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8yMDI0LWt0c3N0dWRpby1ob21ld29ya3MvLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qcz9hZjEyIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdGVtKSB7XG4gIHZhciBjb250ZW50ID0gaXRlbVsxXTtcbiAgdmFyIGNzc01hcHBpbmcgPSBpdGVtWzNdO1xuICBpZiAoIWNzc01hcHBpbmcpIHtcbiAgICByZXR1cm4gY29udGVudDtcbiAgfVxuICBpZiAodHlwZW9mIGJ0b2EgPT09IFwiZnVuY3Rpb25cIikge1xuICAgIHZhciBiYXNlNjQgPSBidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShjc3NNYXBwaW5nKSkpKTtcbiAgICB2YXIgZGF0YSA9IFwic291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsXCIuY29uY2F0KGJhc2U2NCk7XG4gICAgdmFyIHNvdXJjZU1hcHBpbmcgPSBcIi8qIyBcIi5jb25jYXQoZGF0YSwgXCIgKi9cIik7XG4gICAgcmV0dXJuIFtjb250ZW50XS5jb25jYXQoW3NvdXJjZU1hcHBpbmddKS5qb2luKFwiXFxuXCIpO1xuICB9XG4gIHJldHVybiBbY29udGVudF0uam9pbihcIlxcblwiKTtcbn07Il0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJpdGVtIiwiY29udGVudCIsImNzc01hcHBpbmciLCJidG9hIiwiYmFzZTY0IiwidW5lc2NhcGUiLCJlbmNvZGVVUklDb21wb25lbnQiLCJKU09OIiwic3RyaW5naWZ5IiwiZGF0YSIsImNvbmNhdCIsInNvdXJjZU1hcHBpbmciLCJqb2luIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///963\n')},7230:(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval('/**\n * @license React\n * react-dom.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n/*\n Modernizr 3.0.0pre (Custom Build) | MIT\n*/\n\n\nvar aa = __webpack_require__(9471),\n  ca = __webpack_require__(9817);\nfunction p(a) {\n  for (var b = "https://reactjs.org/docs/error-decoder.html?invariant=" + a, c = 1; c < arguments.length; c++) b += "&args[]=" + encodeURIComponent(arguments[c]);\n  return "Minified React error #" + a + "; visit " + b + " for the full message or use the non-minified dev environment for full errors and additional helpful warnings.";\n}\nvar da = new Set(),\n  ea = {};\nfunction fa(a, b) {\n  ha(a, b);\n  ha(a + "Capture", b);\n}\nfunction ha(a, b) {\n  ea[a] = b;\n  for (a = 0; a < b.length; a++) da.add(b[a]);\n}\nvar ia = !("undefined" === typeof window || "undefined" === typeof window.document || "undefined" === typeof window.document.createElement),\n  ja = Object.prototype.hasOwnProperty,\n  ka = /^[:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$/,\n  la = {},\n  ma = {};\nfunction oa(a) {\n  if (ja.call(ma, a)) return !0;\n  if (ja.call(la, a)) return !1;\n  if (ka.test(a)) return ma[a] = !0;\n  la[a] = !0;\n  return !1;\n}\nfunction pa(a, b, c, d) {\n  if (null !== c && 0 === c.type) return !1;\n  switch (typeof b) {\n    case "function":\n    case "symbol":\n      return !0;\n    case "boolean":\n      if (d) return !1;\n      if (null !== c) return !c.acceptsBooleans;\n      a = a.toLowerCase().slice(0, 5);\n      return "data-" !== a && "aria-" !== a;\n    default:\n      return !1;\n  }\n}\nfunction qa(a, b, c, d) {\n  if (null === b || "undefined" === typeof b || pa(a, b, c, d)) return !0;\n  if (d) return !1;\n  if (null !== c) switch (c.type) {\n    case 3:\n      return !b;\n    case 4:\n      return !1 === b;\n    case 5:\n      return isNaN(b);\n    case 6:\n      return isNaN(b) || 1 > b;\n  }\n  return !1;\n}\nfunction v(a, b, c, d, e, f, g) {\n  this.acceptsBooleans = 2 === b || 3 === b || 4 === b;\n  this.attributeName = d;\n  this.attributeNamespace = e;\n  this.mustUseProperty = c;\n  this.propertyName = a;\n  this.type = b;\n  this.sanitizeURL = f;\n  this.removeEmptyString = g;\n}\nvar z = {};\n"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach(function (a) {\n  z[a] = new v(a, 0, !1, a, null, !1, !1);\n});\n[["acceptCharset", "accept-charset"], ["className", "class"], ["htmlFor", "for"], ["httpEquiv", "http-equiv"]].forEach(function (a) {\n  var b = a[0];\n  z[b] = new v(b, 1, !1, a[1], null, !1, !1);\n});\n["contentEditable", "draggable", "spellCheck", "value"].forEach(function (a) {\n  z[a] = new v(a, 2, !1, a.toLowerCase(), null, !1, !1);\n});\n["autoReverse", "externalResourcesRequired", "focusable", "preserveAlpha"].forEach(function (a) {\n  z[a] = new v(a, 2, !1, a, null, !1, !1);\n});\n"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach(function (a) {\n  z[a] = new v(a, 3, !1, a.toLowerCase(), null, !1, !1);\n});\n["checked", "multiple", "muted", "selected"].forEach(function (a) {\n  z[a] = new v(a, 3, !0, a, null, !1, !1);\n});\n["capture", "download"].forEach(function (a) {\n  z[a] = new v(a, 4, !1, a, null, !1, !1);\n});\n["cols", "rows", "size", "span"].forEach(function (a) {\n  z[a] = new v(a, 6, !1, a, null, !1, !1);\n});\n["rowSpan", "start"].forEach(function (a) {\n  z[a] = new v(a, 5, !1, a.toLowerCase(), null, !1, !1);\n});\nvar ra = /[\\-:]([a-z])/g;\nfunction sa(a) {\n  return a[1].toUpperCase();\n}\n"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach(function (a) {\n  var b = a.replace(ra, sa);\n  z[b] = new v(b, 1, !1, a, null, !1, !1);\n});\n"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach(function (a) {\n  var b = a.replace(ra, sa);\n  z[b] = new v(b, 1, !1, a, "http://www.w3.org/1999/xlink", !1, !1);\n});\n["xml:base", "xml:lang", "xml:space"].forEach(function (a) {\n  var b = a.replace(ra, sa);\n  z[b] = new v(b, 1, !1, a, "http://www.w3.org/XML/1998/namespace", !1, !1);\n});\n["tabIndex", "crossOrigin"].forEach(function (a) {\n  z[a] = new v(a, 1, !1, a.toLowerCase(), null, !1, !1);\n});\nz.xlinkHref = new v("xlinkHref", 1, !1, "xlink:href", "http://www.w3.org/1999/xlink", !0, !1);\n["src", "href", "action", "formAction"].forEach(function (a) {\n  z[a] = new v(a, 1, !1, a.toLowerCase(), null, !0, !0);\n});\nfunction ta(a, b, c, d) {\n  var e = z.hasOwnProperty(b) ? z[b] : null;\n  if (null !== e ? 0 !== e.type : d || !(2 < b.length) || "o" !== b[0] && "O" !== b[0] || "n" !== b[1] && "N" !== b[1]) qa(b, c, e, d) && (c = null), d || null === e ? oa(b) && (null === c ? a.removeAttribute(b) : a.setAttribute(b, "" + c)) : e.mustUseProperty ? a[e.propertyName] = null === c ? 3 === e.type ? !1 : "" : c : (b = e.attributeName, d = e.attributeNamespace, null === c ? a.removeAttribute(b) : (e = e.type, c = 3 === e || 4 === e && !0 === c ? "" : "" + c, d ? a.setAttributeNS(d, b, c) : a.setAttribute(b, c)));\n}\nvar ua = aa.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,\n  va = Symbol.for("react.element"),\n  wa = Symbol.for("react.portal"),\n  ya = Symbol.for("react.fragment"),\n  za = Symbol.for("react.strict_mode"),\n  Aa = Symbol.for("react.profiler"),\n  Ba = Symbol.for("react.provider"),\n  Ca = Symbol.for("react.context"),\n  Da = Symbol.for("react.forward_ref"),\n  Ea = Symbol.for("react.suspense"),\n  Fa = Symbol.for("react.suspense_list"),\n  Ga = Symbol.for("react.memo"),\n  Ha = Symbol.for("react.lazy");\nSymbol.for("react.scope");\nSymbol.for("react.debug_trace_mode");\nvar Ia = Symbol.for("react.offscreen");\nSymbol.for("react.legacy_hidden");\nSymbol.for("react.cache");\nSymbol.for("react.tracing_marker");\nvar Ja = Symbol.iterator;\nfunction Ka(a) {\n  if (null === a || "object" !== typeof a) return null;\n  a = Ja && a[Ja] || a["@@iterator"];\n  return "function" === typeof a ? a : null;\n}\nvar A = Object.assign,\n  La;\nfunction Ma(a) {\n  if (void 0 === La) try {\n    throw Error();\n  } catch (c) {\n    var b = c.stack.trim().match(/\\n( *(at )?)/);\n    La = b && b[1] || "";\n  }\n  return "\\n" + La + a;\n}\nvar Na = !1;\nfunction Oa(a, b) {\n  if (!a || Na) return "";\n  Na = !0;\n  var c = Error.prepareStackTrace;\n  Error.prepareStackTrace = void 0;\n  try {\n    if (b) {\n      if (b = function () {\n        throw Error();\n      }, Object.defineProperty(b.prototype, "props", {\n        set: function () {\n          throw Error();\n        }\n      }), "object" === typeof Reflect && Reflect.construct) {\n        try {\n          Reflect.construct(b, []);\n        } catch (l) {\n          var d = l;\n        }\n        Reflect.construct(a, [], b);\n      } else {\n        try {\n          b.call();\n        } catch (l) {\n          d = l;\n        }\n        a.call(b.prototype);\n      }\n    } else {\n      try {\n        throw Error();\n      } catch (l) {\n        d = l;\n      }\n      a();\n    }\n  } catch (l) {\n    if (l && d && "string" === typeof l.stack) {\n      for (var e = l.stack.split("\\n"), f = d.stack.split("\\n"), g = e.length - 1, h = f.length - 1; 1 <= g && 0 <= h && e[g] !== f[h];) h--;\n      for (; 1 <= g && 0 <= h; g--, h--) if (e[g] !== f[h]) {\n        if (1 !== g || 1 !== h) {\n          do if (g--, h--, 0 > h || e[g] !== f[h]) {\n            var k = "\\n" + e[g].replace(" at new ", " at ");\n            a.displayName && k.includes("<anonymous>") && (k = k.replace("<anonymous>", a.displayName));\n            return k;\n          } while (1 <= g && 0 <= h);\n        }\n        break;\n      }\n    }\n  } finally {\n    Na = !1, Error.prepareStackTrace = c;\n  }\n  return (a = a ? a.displayName || a.name : "") ? Ma(a) : "";\n}\nfunction Pa(a) {\n  switch (a.tag) {\n    case 5:\n      return Ma(a.type);\n    case 16:\n      return Ma("Lazy");\n    case 13:\n      return Ma("Suspense");\n    case 19:\n      return Ma("SuspenseList");\n    case 0:\n    case 2:\n    case 15:\n      return a = Oa(a.type, !1), a;\n    case 11:\n      return a = Oa(a.type.render, !1), a;\n    case 1:\n      return a = Oa(a.type, !0), a;\n    default:\n      return "";\n  }\n}\nfunction Qa(a) {\n  if (null == a) return null;\n  if ("function" === typeof a) return a.displayName || a.name || null;\n  if ("string" === typeof a) return a;\n  switch (a) {\n    case ya:\n      return "Fragment";\n    case wa:\n      return "Portal";\n    case Aa:\n      return "Profiler";\n    case za:\n      return "StrictMode";\n    case Ea:\n      return "Suspense";\n    case Fa:\n      return "SuspenseList";\n  }\n  if ("object" === typeof a) switch (a.$$typeof) {\n    case Ca:\n      return (a.displayName || "Context") + ".Consumer";\n    case Ba:\n      return (a._context.displayName || "Context") + ".Provider";\n    case Da:\n      var b = a.render;\n      a = a.displayName;\n      a || (a = b.displayName || b.name || "", a = "" !== a ? "ForwardRef(" + a + ")" : "ForwardRef");\n      return a;\n    case Ga:\n      return b = a.displayName || null, null !== b ? b : Qa(a.type) || "Memo";\n    case Ha:\n      b = a._payload;\n      a = a._init;\n      try {\n        return Qa(a(b));\n      } catch (c) {}\n  }\n  return null;\n}\nfunction Ra(a) {\n  var b = a.type;\n  switch (a.tag) {\n    case 24:\n      return "Cache";\n    case 9:\n      return (b.displayName || "Context") + ".Consumer";\n    case 10:\n      return (b._context.displayName || "Context") + ".Provider";\n    case 18:\n      return "DehydratedFragment";\n    case 11:\n      return a = b.render, a = a.displayName || a.name || "", b.displayName || ("" !== a ? "ForwardRef(" + a + ")" : "ForwardRef");\n    case 7:\n      return "Fragment";\n    case 5:\n      return b;\n    case 4:\n      return "Portal";\n    case 3:\n      return "Root";\n    case 6:\n      return "Text";\n    case 16:\n      return Qa(b);\n    case 8:\n      return b === za ? "StrictMode" : "Mode";\n    case 22:\n      return "Offscreen";\n    case 12:\n      return "Profiler";\n    case 21:\n      return "Scope";\n    case 13:\n      return "Suspense";\n    case 19:\n      return "SuspenseList";\n    case 25:\n      return "TracingMarker";\n    case 1:\n    case 0:\n    case 17:\n    case 2:\n    case 14:\n    case 15:\n      if ("function" === typeof b) return b.displayName || b.name || null;\n      if ("string" === typeof b) return b;\n  }\n  return null;\n}\nfunction Sa(a) {\n  switch (typeof a) {\n    case "boolean":\n    case "number":\n    case "string":\n    case "undefined":\n      return a;\n    case "object":\n      return a;\n    default:\n      return "";\n  }\n}\nfunction Ta(a) {\n  var b = a.type;\n  return (a = a.nodeName) && "input" === a.toLowerCase() && ("checkbox" === b || "radio" === b);\n}\nfunction Ua(a) {\n  var b = Ta(a) ? "checked" : "value",\n    c = Object.getOwnPropertyDescriptor(a.constructor.prototype, b),\n    d = "" + a[b];\n  if (!a.hasOwnProperty(b) && "undefined" !== typeof c && "function" === typeof c.get && "function" === typeof c.set) {\n    var e = c.get,\n      f = c.set;\n    Object.defineProperty(a, b, {\n      configurable: !0,\n      get: function () {\n        return e.call(this);\n      },\n      set: function (a) {\n        d = "" + a;\n        f.call(this, a);\n      }\n    });\n    Object.defineProperty(a, b, {\n      enumerable: c.enumerable\n    });\n    return {\n      getValue: function () {\n        return d;\n      },\n      setValue: function (a) {\n        d = "" + a;\n      },\n      stopTracking: function () {\n        a._valueTracker = null;\n        delete a[b];\n      }\n    };\n  }\n}\nfunction Va(a) {\n  a._valueTracker || (a._valueTracker = Ua(a));\n}\nfunction Wa(a) {\n  if (!a) return !1;\n  var b = a._valueTracker;\n  if (!b) return !0;\n  var c = b.getValue();\n  var d = "";\n  a && (d = Ta(a) ? a.checked ? "true" : "false" : a.value);\n  a = d;\n  return a !== c ? (b.setValue(a), !0) : !1;\n}\nfunction Xa(a) {\n  a = a || ("undefined" !== typeof document ? document : void 0);\n  if ("undefined" === typeof a) return null;\n  try {\n    return a.activeElement || a.body;\n  } catch (b) {\n    return a.body;\n  }\n}\nfunction Ya(a, b) {\n  var c = b.checked;\n  return A({}, b, {\n    defaultChecked: void 0,\n    defaultValue: void 0,\n    value: void 0,\n    checked: null != c ? c : a._wrapperState.initialChecked\n  });\n}\nfunction Za(a, b) {\n  var c = null == b.defaultValue ? "" : b.defaultValue,\n    d = null != b.checked ? b.checked : b.defaultChecked;\n  c = Sa(null != b.value ? b.value : c);\n  a._wrapperState = {\n    initialChecked: d,\n    initialValue: c,\n    controlled: "checkbox" === b.type || "radio" === b.type ? null != b.checked : null != b.value\n  };\n}\nfunction ab(a, b) {\n  b = b.checked;\n  null != b && ta(a, "checked", b, !1);\n}\nfunction bb(a, b) {\n  ab(a, b);\n  var c = Sa(b.value),\n    d = b.type;\n  if (null != c) {\n    if ("number" === d) {\n      if (0 === c && "" === a.value || a.value != c) a.value = "" + c;\n    } else a.value !== "" + c && (a.value = "" + c);\n  } else if ("submit" === d || "reset" === d) {\n    a.removeAttribute("value");\n    return;\n  }\n  b.hasOwnProperty("value") ? cb(a, b.type, c) : b.hasOwnProperty("defaultValue") && cb(a, b.type, Sa(b.defaultValue));\n  null == b.checked && null != b.defaultChecked && (a.defaultChecked = !!b.defaultChecked);\n}\nfunction db(a, b, c) {\n  if (b.hasOwnProperty("value") || b.hasOwnProperty("defaultValue")) {\n    var d = b.type;\n    if (!("submit" !== d && "reset" !== d || void 0 !== b.value && null !== b.value)) return;\n    b = "" + a._wrapperState.initialValue;\n    c || b === a.value || (a.value = b);\n    a.defaultValue = b;\n  }\n  c = a.name;\n  "" !== c && (a.name = "");\n  a.defaultChecked = !!a._wrapperState.initialChecked;\n  "" !== c && (a.name = c);\n}\nfunction cb(a, b, c) {\n  if ("number" !== b || Xa(a.ownerDocument) !== a) null == c ? a.defaultValue = "" + a._wrapperState.initialValue : a.defaultValue !== "" + c && (a.defaultValue = "" + c);\n}\nvar eb = Array.isArray;\nfunction fb(a, b, c, d) {\n  a = a.options;\n  if (b) {\n    b = {};\n    for (var e = 0; e < c.length; e++) b["$" + c[e]] = !0;\n    for (c = 0; c < a.length; c++) e = b.hasOwnProperty("$" + a[c].value), a[c].selected !== e && (a[c].selected = e), e && d && (a[c].defaultSelected = !0);\n  } else {\n    c = "" + Sa(c);\n    b = null;\n    for (e = 0; e < a.length; e++) {\n      if (a[e].value === c) {\n        a[e].selected = !0;\n        d && (a[e].defaultSelected = !0);\n        return;\n      }\n      null !== b || a[e].disabled || (b = a[e]);\n    }\n    null !== b && (b.selected = !0);\n  }\n}\nfunction gb(a, b) {\n  if (null != b.dangerouslySetInnerHTML) throw Error(p(91));\n  return A({}, b, {\n    value: void 0,\n    defaultValue: void 0,\n    children: "" + a._wrapperState.initialValue\n  });\n}\nfunction hb(a, b) {\n  var c = b.value;\n  if (null == c) {\n    c = b.children;\n    b = b.defaultValue;\n    if (null != c) {\n      if (null != b) throw Error(p(92));\n      if (eb(c)) {\n        if (1 < c.length) throw Error(p(93));\n        c = c[0];\n      }\n      b = c;\n    }\n    null == b && (b = "");\n    c = b;\n  }\n  a._wrapperState = {\n    initialValue: Sa(c)\n  };\n}\nfunction ib(a, b) {\n  var c = Sa(b.value),\n    d = Sa(b.defaultValue);\n  null != c && (c = "" + c, c !== a.value && (a.value = c), null == b.defaultValue && a.defaultValue !== c && (a.defaultValue = c));\n  null != d && (a.defaultValue = "" + d);\n}\nfunction jb(a) {\n  var b = a.textContent;\n  b === a._wrapperState.initialValue && "" !== b && null !== b && (a.value = b);\n}\nfunction kb(a) {\n  switch (a) {\n    case "svg":\n      return "http://www.w3.org/2000/svg";\n    case "math":\n      return "http://www.w3.org/1998/Math/MathML";\n    default:\n      return "http://www.w3.org/1999/xhtml";\n  }\n}\nfunction lb(a, b) {\n  return null == a || "http://www.w3.org/1999/xhtml" === a ? kb(b) : "http://www.w3.org/2000/svg" === a && "foreignObject" === b ? "http://www.w3.org/1999/xhtml" : a;\n}\nvar mb,\n  nb = function (a) {\n    return "undefined" !== typeof MSApp && MSApp.execUnsafeLocalFunction ? function (b, c, d, e) {\n      MSApp.execUnsafeLocalFunction(function () {\n        return a(b, c, d, e);\n      });\n    } : a;\n  }(function (a, b) {\n    if ("http://www.w3.org/2000/svg" !== a.namespaceURI || "innerHTML" in a) a.innerHTML = b;else {\n      mb = mb || document.createElement("div");\n      mb.innerHTML = "<svg>" + b.valueOf().toString() + "</svg>";\n      for (b = mb.firstChild; a.firstChild;) a.removeChild(a.firstChild);\n      for (; b.firstChild;) a.appendChild(b.firstChild);\n    }\n  });\nfunction ob(a, b) {\n  if (b) {\n    var c = a.firstChild;\n    if (c && c === a.lastChild && 3 === c.nodeType) {\n      c.nodeValue = b;\n      return;\n    }\n  }\n  a.textContent = b;\n}\nvar pb = {\n    animationIterationCount: !0,\n    aspectRatio: !0,\n    borderImageOutset: !0,\n    borderImageSlice: !0,\n    borderImageWidth: !0,\n    boxFlex: !0,\n    boxFlexGroup: !0,\n    boxOrdinalGroup: !0,\n    columnCount: !0,\n    columns: !0,\n    flex: !0,\n    flexGrow: !0,\n    flexPositive: !0,\n    flexShrink: !0,\n    flexNegative: !0,\n    flexOrder: !0,\n    gridArea: !0,\n    gridRow: !0,\n    gridRowEnd: !0,\n    gridRowSpan: !0,\n    gridRowStart: !0,\n    gridColumn: !0,\n    gridColumnEnd: !0,\n    gridColumnSpan: !0,\n    gridColumnStart: !0,\n    fontWeight: !0,\n    lineClamp: !0,\n    lineHeight: !0,\n    opacity: !0,\n    order: !0,\n    orphans: !0,\n    tabSize: !0,\n    widows: !0,\n    zIndex: !0,\n    zoom: !0,\n    fillOpacity: !0,\n    floodOpacity: !0,\n    stopOpacity: !0,\n    strokeDasharray: !0,\n    strokeDashoffset: !0,\n    strokeMiterlimit: !0,\n    strokeOpacity: !0,\n    strokeWidth: !0\n  },\n  qb = ["Webkit", "ms", "Moz", "O"];\nObject.keys(pb).forEach(function (a) {\n  qb.forEach(function (b) {\n    b = b + a.charAt(0).toUpperCase() + a.substring(1);\n    pb[b] = pb[a];\n  });\n});\nfunction rb(a, b, c) {\n  return null == b || "boolean" === typeof b || "" === b ? "" : c || "number" !== typeof b || 0 === b || pb.hasOwnProperty(a) && pb[a] ? ("" + b).trim() : b + "px";\n}\nfunction sb(a, b) {\n  a = a.style;\n  for (var c in b) if (b.hasOwnProperty(c)) {\n    var d = 0 === c.indexOf("--"),\n      e = rb(c, b[c], d);\n    "float" === c && (c = "cssFloat");\n    d ? a.setProperty(c, e) : a[c] = e;\n  }\n}\nvar tb = A({\n  menuitem: !0\n}, {\n  area: !0,\n  base: !0,\n  br: !0,\n  col: !0,\n  embed: !0,\n  hr: !0,\n  img: !0,\n  input: !0,\n  keygen: !0,\n  link: !0,\n  meta: !0,\n  param: !0,\n  source: !0,\n  track: !0,\n  wbr: !0\n});\nfunction ub(a, b) {\n  if (b) {\n    if (tb[a] && (null != b.children || null != b.dangerouslySetInnerHTML)) throw Error(p(137, a));\n    if (null != b.dangerouslySetInnerHTML) {\n      if (null != b.children) throw Error(p(60));\n      if ("object" !== typeof b.dangerouslySetInnerHTML || !("__html" in b.dangerouslySetInnerHTML)) throw Error(p(61));\n    }\n    if (null != b.style && "object" !== typeof b.style) throw Error(p(62));\n  }\n}\nfunction vb(a, b) {\n  if (-1 === a.indexOf("-")) return "string" === typeof b.is;\n  switch (a) {\n    case "annotation-xml":\n    case "color-profile":\n    case "font-face":\n    case "font-face-src":\n    case "font-face-uri":\n    case "font-face-format":\n    case "font-face-name":\n    case "missing-glyph":\n      return !1;\n    default:\n      return !0;\n  }\n}\nvar wb = null;\nfunction xb(a) {\n  a = a.target || a.srcElement || window;\n  a.correspondingUseElement && (a = a.correspondingUseElement);\n  return 3 === a.nodeType ? a.parentNode : a;\n}\nvar yb = null,\n  zb = null,\n  Ab = null;\nfunction Bb(a) {\n  if (a = Cb(a)) {\n    if ("function" !== typeof yb) throw Error(p(280));\n    var b = a.stateNode;\n    b && (b = Db(b), yb(a.stateNode, a.type, b));\n  }\n}\nfunction Eb(a) {\n  zb ? Ab ? Ab.push(a) : Ab = [a] : zb = a;\n}\nfunction Fb() {\n  if (zb) {\n    var a = zb,\n      b = Ab;\n    Ab = zb = null;\n    Bb(a);\n    if (b) for (a = 0; a < b.length; a++) Bb(b[a]);\n  }\n}\nfunction Gb(a, b) {\n  return a(b);\n}\nfunction Hb() {}\nvar Ib = !1;\nfunction Jb(a, b, c) {\n  if (Ib) return a(b, c);\n  Ib = !0;\n  try {\n    return Gb(a, b, c);\n  } finally {\n    if (Ib = !1, null !== zb || null !== Ab) Hb(), Fb();\n  }\n}\nfunction Kb(a, b) {\n  var c = a.stateNode;\n  if (null === c) return null;\n  var d = Db(c);\n  if (null === d) return null;\n  c = d[b];\n  a: switch (b) {\n    case "onClick":\n    case "onClickCapture":\n    case "onDoubleClick":\n    case "onDoubleClickCapture":\n    case "onMouseDown":\n    case "onMouseDownCapture":\n    case "onMouseMove":\n    case "onMouseMoveCapture":\n    case "onMouseUp":\n    case "onMouseUpCapture":\n    case "onMouseEnter":\n      (d = !d.disabled) || (a = a.type, d = !("button" === a || "input" === a || "select" === a || "textarea" === a));\n      a = !d;\n      break a;\n    default:\n      a = !1;\n  }\n  if (a) return null;\n  if (c && "function" !== typeof c) throw Error(p(231, b, typeof c));\n  return c;\n}\nvar Lb = !1;\nif (ia) try {\n  var Mb = {};\n  Object.defineProperty(Mb, "passive", {\n    get: function () {\n      Lb = !0;\n    }\n  });\n  window.addEventListener("test", Mb, Mb);\n  window.removeEventListener("test", Mb, Mb);\n} catch (a) {\n  Lb = !1;\n}\nfunction Nb(a, b, c, d, e, f, g, h, k) {\n  var l = Array.prototype.slice.call(arguments, 3);\n  try {\n    b.apply(c, l);\n  } catch (m) {\n    this.onError(m);\n  }\n}\nvar Ob = !1,\n  Pb = null,\n  Qb = !1,\n  Rb = null,\n  Sb = {\n    onError: function (a) {\n      Ob = !0;\n      Pb = a;\n    }\n  };\nfunction Tb(a, b, c, d, e, f, g, h, k) {\n  Ob = !1;\n  Pb = null;\n  Nb.apply(Sb, arguments);\n}\nfunction Ub(a, b, c, d, e, f, g, h, k) {\n  Tb.apply(this, arguments);\n  if (Ob) {\n    if (Ob) {\n      var l = Pb;\n      Ob = !1;\n      Pb = null;\n    } else throw Error(p(198));\n    Qb || (Qb = !0, Rb = l);\n  }\n}\nfunction Vb(a) {\n  var b = a,\n    c = a;\n  if (a.alternate) for (; b.return;) b = b.return;else {\n    a = b;\n    do b = a, 0 !== (b.flags & 4098) && (c = b.return), a = b.return; while (a);\n  }\n  return 3 === b.tag ? c : null;\n}\nfunction Wb(a) {\n  if (13 === a.tag) {\n    var b = a.memoizedState;\n    null === b && (a = a.alternate, null !== a && (b = a.memoizedState));\n    if (null !== b) return b.dehydrated;\n  }\n  return null;\n}\nfunction Xb(a) {\n  if (Vb(a) !== a) throw Error(p(188));\n}\nfunction Yb(a) {\n  var b = a.alternate;\n  if (!b) {\n    b = Vb(a);\n    if (null === b) throw Error(p(188));\n    return b !== a ? null : a;\n  }\n  for (var c = a, d = b;;) {\n    var e = c.return;\n    if (null === e) break;\n    var f = e.alternate;\n    if (null === f) {\n      d = e.return;\n      if (null !== d) {\n        c = d;\n        continue;\n      }\n      break;\n    }\n    if (e.child === f.child) {\n      for (f = e.child; f;) {\n        if (f === c) return Xb(e), a;\n        if (f === d) return Xb(e), b;\n        f = f.sibling;\n      }\n      throw Error(p(188));\n    }\n    if (c.return !== d.return) c = e, d = f;else {\n      for (var g = !1, h = e.child; h;) {\n        if (h === c) {\n          g = !0;\n          c = e;\n          d = f;\n          break;\n        }\n        if (h === d) {\n          g = !0;\n          d = e;\n          c = f;\n          break;\n        }\n        h = h.sibling;\n      }\n      if (!g) {\n        for (h = f.child; h;) {\n          if (h === c) {\n            g = !0;\n            c = f;\n            d = e;\n            break;\n          }\n          if (h === d) {\n            g = !0;\n            d = f;\n            c = e;\n            break;\n          }\n          h = h.sibling;\n        }\n        if (!g) throw Error(p(189));\n      }\n    }\n    if (c.alternate !== d) throw Error(p(190));\n  }\n  if (3 !== c.tag) throw Error(p(188));\n  return c.stateNode.current === c ? a : b;\n}\nfunction Zb(a) {\n  a = Yb(a);\n  return null !== a ? $b(a) : null;\n}\nfunction $b(a) {\n  if (5 === a.tag || 6 === a.tag) return a;\n  for (a = a.child; null !== a;) {\n    var b = $b(a);\n    if (null !== b) return b;\n    a = a.sibling;\n  }\n  return null;\n}\nvar ac = ca.unstable_scheduleCallback,\n  bc = ca.unstable_cancelCallback,\n  cc = ca.unstable_shouldYield,\n  dc = ca.unstable_requestPaint,\n  B = ca.unstable_now,\n  ec = ca.unstable_getCurrentPriorityLevel,\n  fc = ca.unstable_ImmediatePriority,\n  gc = ca.unstable_UserBlockingPriority,\n  hc = ca.unstable_NormalPriority,\n  ic = ca.unstable_LowPriority,\n  jc = ca.unstable_IdlePriority,\n  kc = null,\n  lc = null;\nfunction mc(a) {\n  if (lc && "function" === typeof lc.onCommitFiberRoot) try {\n    lc.onCommitFiberRoot(kc, a, void 0, 128 === (a.current.flags & 128));\n  } catch (b) {}\n}\nvar oc = Math.clz32 ? Math.clz32 : nc,\n  pc = Math.log,\n  qc = Math.LN2;\nfunction nc(a) {\n  a >>>= 0;\n  return 0 === a ? 32 : 31 - (pc(a) / qc | 0) | 0;\n}\nvar rc = 64,\n  sc = 4194304;\nfunction tc(a) {\n  switch (a & -a) {\n    case 1:\n      return 1;\n    case 2:\n      return 2;\n    case 4:\n      return 4;\n    case 8:\n      return 8;\n    case 16:\n      return 16;\n    case 32:\n      return 32;\n    case 64:\n    case 128:\n    case 256:\n    case 512:\n    case 1024:\n    case 2048:\n    case 4096:\n    case 8192:\n    case 16384:\n    case 32768:\n    case 65536:\n    case 131072:\n    case 262144:\n    case 524288:\n    case 1048576:\n    case 2097152:\n      return a & 4194240;\n    case 4194304:\n    case 8388608:\n    case 16777216:\n    case 33554432:\n    case 67108864:\n      return a & 130023424;\n    case 134217728:\n      return 134217728;\n    case 268435456:\n      return 268435456;\n    case 536870912:\n      return 536870912;\n    case 1073741824:\n      return 1073741824;\n    default:\n      return a;\n  }\n}\nfunction uc(a, b) {\n  var c = a.pendingLanes;\n  if (0 === c) return 0;\n  var d = 0,\n    e = a.suspendedLanes,\n    f = a.pingedLanes,\n    g = c & 268435455;\n  if (0 !== g) {\n    var h = g & ~e;\n    0 !== h ? d = tc(h) : (f &= g, 0 !== f && (d = tc(f)));\n  } else g = c & ~e, 0 !== g ? d = tc(g) : 0 !== f && (d = tc(f));\n  if (0 === d) return 0;\n  if (0 !== b && b !== d && 0 === (b & e) && (e = d & -d, f = b & -b, e >= f || 16 === e && 0 !== (f & 4194240))) return b;\n  0 !== (d & 4) && (d |= c & 16);\n  b = a.entangledLanes;\n  if (0 !== b) for (a = a.entanglements, b &= d; 0 < b;) c = 31 - oc(b), e = 1 << c, d |= a[c], b &= ~e;\n  return d;\n}\nfunction vc(a, b) {\n  switch (a) {\n    case 1:\n    case 2:\n    case 4:\n      return b + 250;\n    case 8:\n    case 16:\n    case 32:\n    case 64:\n    case 128:\n    case 256:\n    case 512:\n    case 1024:\n    case 2048:\n    case 4096:\n    case 8192:\n    case 16384:\n    case 32768:\n    case 65536:\n    case 131072:\n    case 262144:\n    case 524288:\n    case 1048576:\n    case 2097152:\n      return b + 5E3;\n    case 4194304:\n    case 8388608:\n    case 16777216:\n    case 33554432:\n    case 67108864:\n      return -1;\n    case 134217728:\n    case 268435456:\n    case 536870912:\n    case 1073741824:\n      return -1;\n    default:\n      return -1;\n  }\n}\nfunction wc(a, b) {\n  for (var c = a.suspendedLanes, d = a.pingedLanes, e = a.expirationTimes, f = a.pendingLanes; 0 < f;) {\n    var g = 31 - oc(f),\n      h = 1 << g,\n      k = e[g];\n    if (-1 === k) {\n      if (0 === (h & c) || 0 !== (h & d)) e[g] = vc(h, b);\n    } else k <= b && (a.expiredLanes |= h);\n    f &= ~h;\n  }\n}\nfunction xc(a) {\n  a = a.pendingLanes & -1073741825;\n  return 0 !== a ? a : a & 1073741824 ? 1073741824 : 0;\n}\nfunction yc() {\n  var a = rc;\n  rc <<= 1;\n  0 === (rc & 4194240) && (rc = 64);\n  return a;\n}\nfunction zc(a) {\n  for (var b = [], c = 0; 31 > c; c++) b.push(a);\n  return b;\n}\nfunction Ac(a, b, c) {\n  a.pendingLanes |= b;\n  536870912 !== b && (a.suspendedLanes = 0, a.pingedLanes = 0);\n  a = a.eventTimes;\n  b = 31 - oc(b);\n  a[b] = c;\n}\nfunction Bc(a, b) {\n  var c = a.pendingLanes & ~b;\n  a.pendingLanes = b;\n  a.suspendedLanes = 0;\n  a.pingedLanes = 0;\n  a.expiredLanes &= b;\n  a.mutableReadLanes &= b;\n  a.entangledLanes &= b;\n  b = a.entanglements;\n  var d = a.eventTimes;\n  for (a = a.expirationTimes; 0 < c;) {\n    var e = 31 - oc(c),\n      f = 1 << e;\n    b[e] = 0;\n    d[e] = -1;\n    a[e] = -1;\n    c &= ~f;\n  }\n}\nfunction Cc(a, b) {\n  var c = a.entangledLanes |= b;\n  for (a = a.entanglements; c;) {\n    var d = 31 - oc(c),\n      e = 1 << d;\n    e & b | a[d] & b && (a[d] |= b);\n    c &= ~e;\n  }\n}\nvar C = 0;\nfunction Dc(a) {\n  a &= -a;\n  return 1 < a ? 4 < a ? 0 !== (a & 268435455) ? 16 : 536870912 : 4 : 1;\n}\nvar Ec,\n  Fc,\n  Gc,\n  Hc,\n  Ic,\n  Jc = !1,\n  Kc = [],\n  Lc = null,\n  Mc = null,\n  Nc = null,\n  Oc = new Map(),\n  Pc = new Map(),\n  Qc = [],\n  Rc = "mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");\nfunction Sc(a, b) {\n  switch (a) {\n    case "focusin":\n    case "focusout":\n      Lc = null;\n      break;\n    case "dragenter":\n    case "dragleave":\n      Mc = null;\n      break;\n    case "mouseover":\n    case "mouseout":\n      Nc = null;\n      break;\n    case "pointerover":\n    case "pointerout":\n      Oc.delete(b.pointerId);\n      break;\n    case "gotpointercapture":\n    case "lostpointercapture":\n      Pc.delete(b.pointerId);\n  }\n}\nfunction Tc(a, b, c, d, e, f) {\n  if (null === a || a.nativeEvent !== f) return a = {\n    blockedOn: b,\n    domEventName: c,\n    eventSystemFlags: d,\n    nativeEvent: f,\n    targetContainers: [e]\n  }, null !== b && (b = Cb(b), null !== b && Fc(b)), a;\n  a.eventSystemFlags |= d;\n  b = a.targetContainers;\n  null !== e && -1 === b.indexOf(e) && b.push(e);\n  return a;\n}\nfunction Uc(a, b, c, d, e) {\n  switch (b) {\n    case "focusin":\n      return Lc = Tc(Lc, a, b, c, d, e), !0;\n    case "dragenter":\n      return Mc = Tc(Mc, a, b, c, d, e), !0;\n    case "mouseover":\n      return Nc = Tc(Nc, a, b, c, d, e), !0;\n    case "pointerover":\n      var f = e.pointerId;\n      Oc.set(f, Tc(Oc.get(f) || null, a, b, c, d, e));\n      return !0;\n    case "gotpointercapture":\n      return f = e.pointerId, Pc.set(f, Tc(Pc.get(f) || null, a, b, c, d, e)), !0;\n  }\n  return !1;\n}\nfunction Vc(a) {\n  var b = Wc(a.target);\n  if (null !== b) {\n    var c = Vb(b);\n    if (null !== c) if (b = c.tag, 13 === b) {\n      if (b = Wb(c), null !== b) {\n        a.blockedOn = b;\n        Ic(a.priority, function () {\n          Gc(c);\n        });\n        return;\n      }\n    } else if (3 === b && c.stateNode.current.memoizedState.isDehydrated) {\n      a.blockedOn = 3 === c.tag ? c.stateNode.containerInfo : null;\n      return;\n    }\n  }\n  a.blockedOn = null;\n}\nfunction Xc(a) {\n  if (null !== a.blockedOn) return !1;\n  for (var b = a.targetContainers; 0 < b.length;) {\n    var c = Yc(a.domEventName, a.eventSystemFlags, b[0], a.nativeEvent);\n    if (null === c) {\n      c = a.nativeEvent;\n      var d = new c.constructor(c.type, c);\n      wb = d;\n      c.target.dispatchEvent(d);\n      wb = null;\n    } else return b = Cb(c), null !== b && Fc(b), a.blockedOn = c, !1;\n    b.shift();\n  }\n  return !0;\n}\nfunction Zc(a, b, c) {\n  Xc(a) && c.delete(b);\n}\nfunction $c() {\n  Jc = !1;\n  null !== Lc && Xc(Lc) && (Lc = null);\n  null !== Mc && Xc(Mc) && (Mc = null);\n  null !== Nc && Xc(Nc) && (Nc = null);\n  Oc.forEach(Zc);\n  Pc.forEach(Zc);\n}\nfunction ad(a, b) {\n  a.blockedOn === b && (a.blockedOn = null, Jc || (Jc = !0, ca.unstable_scheduleCallback(ca.unstable_NormalPriority, $c)));\n}\nfunction bd(a) {\n  function b(b) {\n    return ad(b, a);\n  }\n  if (0 < Kc.length) {\n    ad(Kc[0], a);\n    for (var c = 1; c < Kc.length; c++) {\n      var d = Kc[c];\n      d.blockedOn === a && (d.blockedOn = null);\n    }\n  }\n  null !== Lc && ad(Lc, a);\n  null !== Mc && ad(Mc, a);\n  null !== Nc && ad(Nc, a);\n  Oc.forEach(b);\n  Pc.forEach(b);\n  for (c = 0; c < Qc.length; c++) d = Qc[c], d.blockedOn === a && (d.blockedOn = null);\n  for (; 0 < Qc.length && (c = Qc[0], null === c.blockedOn);) Vc(c), null === c.blockedOn && Qc.shift();\n}\nvar cd = ua.ReactCurrentBatchConfig,\n  dd = !0;\nfunction ed(a, b, c, d) {\n  var e = C,\n    f = cd.transition;\n  cd.transition = null;\n  try {\n    C = 1, fd(a, b, c, d);\n  } finally {\n    C = e, cd.transition = f;\n  }\n}\nfunction gd(a, b, c, d) {\n  var e = C,\n    f = cd.transition;\n  cd.transition = null;\n  try {\n    C = 4, fd(a, b, c, d);\n  } finally {\n    C = e, cd.transition = f;\n  }\n}\nfunction fd(a, b, c, d) {\n  if (dd) {\n    var e = Yc(a, b, c, d);\n    if (null === e) hd(a, b, d, id, c), Sc(a, d);else if (Uc(e, a, b, c, d)) d.stopPropagation();else if (Sc(a, d), b & 4 && -1 < Rc.indexOf(a)) {\n      for (; null !== e;) {\n        var f = Cb(e);\n        null !== f && Ec(f);\n        f = Yc(a, b, c, d);\n        null === f && hd(a, b, d, id, c);\n        if (f === e) break;\n        e = f;\n      }\n      null !== e && d.stopPropagation();\n    } else hd(a, b, d, null, c);\n  }\n}\nvar id = null;\nfunction Yc(a, b, c, d) {\n  id = null;\n  a = xb(d);\n  a = Wc(a);\n  if (null !== a) if (b = Vb(a), null === b) a = null;else if (c = b.tag, 13 === c) {\n    a = Wb(b);\n    if (null !== a) return a;\n    a = null;\n  } else if (3 === c) {\n    if (b.stateNode.current.memoizedState.isDehydrated) return 3 === b.tag ? b.stateNode.containerInfo : null;\n    a = null;\n  } else b !== a && (a = null);\n  id = a;\n  return null;\n}\nfunction jd(a) {\n  switch (a) {\n    case "cancel":\n    case "click":\n    case "close":\n    case "contextmenu":\n    case "copy":\n    case "cut":\n    case "auxclick":\n    case "dblclick":\n    case "dragend":\n    case "dragstart":\n    case "drop":\n    case "focusin":\n    case "focusout":\n    case "input":\n    case "invalid":\n    case "keydown":\n    case "keypress":\n    case "keyup":\n    case "mousedown":\n    case "mouseup":\n    case "paste":\n    case "pause":\n    case "play":\n    case "pointercancel":\n    case "pointerdown":\n    case "pointerup":\n    case "ratechange":\n    case "reset":\n    case "resize":\n    case "seeked":\n    case "submit":\n    case "touchcancel":\n    case "touchend":\n    case "touchstart":\n    case "volumechange":\n    case "change":\n    case "selectionchange":\n    case "textInput":\n    case "compositionstart":\n    case "compositionend":\n    case "compositionupdate":\n    case "beforeblur":\n    case "afterblur":\n    case "beforeinput":\n    case "blur":\n    case "fullscreenchange":\n    case "focus":\n    case "hashchange":\n    case "popstate":\n    case "select":\n    case "selectstart":\n      return 1;\n    case "drag":\n    case "dragenter":\n    case "dragexit":\n    case "dragleave":\n    case "dragover":\n    case "mousemove":\n    case "mouseout":\n    case "mouseover":\n    case "pointermove":\n    case "pointerout":\n    case "pointerover":\n    case "scroll":\n    case "toggle":\n    case "touchmove":\n    case "wheel":\n    case "mouseenter":\n    case "mouseleave":\n    case "pointerenter":\n    case "pointerleave":\n      return 4;\n    case "message":\n      switch (ec()) {\n        case fc:\n          return 1;\n        case gc:\n          return 4;\n        case hc:\n        case ic:\n          return 16;\n        case jc:\n          return 536870912;\n        default:\n          return 16;\n      }\n    default:\n      return 16;\n  }\n}\nvar kd = null,\n  ld = null,\n  md = null;\nfunction nd() {\n  if (md) return md;\n  var a,\n    b = ld,\n    c = b.length,\n    d,\n    e = "value" in kd ? kd.value : kd.textContent,\n    f = e.length;\n  for (a = 0; a < c && b[a] === e[a]; a++);\n  var g = c - a;\n  for (d = 1; d <= g && b[c - d] === e[f - d]; d++);\n  return md = e.slice(a, 1 < d ? 1 - d : void 0);\n}\nfunction od(a) {\n  var b = a.keyCode;\n  "charCode" in a ? (a = a.charCode, 0 === a && 13 === b && (a = 13)) : a = b;\n  10 === a && (a = 13);\n  return 32 <= a || 13 === a ? a : 0;\n}\nfunction pd() {\n  return !0;\n}\nfunction qd() {\n  return !1;\n}\nfunction rd(a) {\n  function b(b, d, e, f, g) {\n    this._reactName = b;\n    this._targetInst = e;\n    this.type = d;\n    this.nativeEvent = f;\n    this.target = g;\n    this.currentTarget = null;\n    for (var c in a) a.hasOwnProperty(c) && (b = a[c], this[c] = b ? b(f) : f[c]);\n    this.isDefaultPrevented = (null != f.defaultPrevented ? f.defaultPrevented : !1 === f.returnValue) ? pd : qd;\n    this.isPropagationStopped = qd;\n    return this;\n  }\n  A(b.prototype, {\n    preventDefault: function () {\n      this.defaultPrevented = !0;\n      var a = this.nativeEvent;\n      a && (a.preventDefault ? a.preventDefault() : "unknown" !== typeof a.returnValue && (a.returnValue = !1), this.isDefaultPrevented = pd);\n    },\n    stopPropagation: function () {\n      var a = this.nativeEvent;\n      a && (a.stopPropagation ? a.stopPropagation() : "unknown" !== typeof a.cancelBubble && (a.cancelBubble = !0), this.isPropagationStopped = pd);\n    },\n    persist: function () {},\n    isPersistent: pd\n  });\n  return b;\n}\nvar sd = {\n    eventPhase: 0,\n    bubbles: 0,\n    cancelable: 0,\n    timeStamp: function (a) {\n      return a.timeStamp || Date.now();\n    },\n    defaultPrevented: 0,\n    isTrusted: 0\n  },\n  td = rd(sd),\n  ud = A({}, sd, {\n    view: 0,\n    detail: 0\n  }),\n  vd = rd(ud),\n  wd,\n  xd,\n  yd,\n  Ad = A({}, ud, {\n    screenX: 0,\n    screenY: 0,\n    clientX: 0,\n    clientY: 0,\n    pageX: 0,\n    pageY: 0,\n    ctrlKey: 0,\n    shiftKey: 0,\n    altKey: 0,\n    metaKey: 0,\n    getModifierState: zd,\n    button: 0,\n    buttons: 0,\n    relatedTarget: function (a) {\n      return void 0 === a.relatedTarget ? a.fromElement === a.srcElement ? a.toElement : a.fromElement : a.relatedTarget;\n    },\n    movementX: function (a) {\n      if ("movementX" in a) return a.movementX;\n      a !== yd && (yd && "mousemove" === a.type ? (wd = a.screenX - yd.screenX, xd = a.screenY - yd.screenY) : xd = wd = 0, yd = a);\n      return wd;\n    },\n    movementY: function (a) {\n      return "movementY" in a ? a.movementY : xd;\n    }\n  }),\n  Bd = rd(Ad),\n  Cd = A({}, Ad, {\n    dataTransfer: 0\n  }),\n  Dd = rd(Cd),\n  Ed = A({}, ud, {\n    relatedTarget: 0\n  }),\n  Fd = rd(Ed),\n  Gd = A({}, sd, {\n    animationName: 0,\n    elapsedTime: 0,\n    pseudoElement: 0\n  }),\n  Hd = rd(Gd),\n  Id = A({}, sd, {\n    clipboardData: function (a) {\n      return "clipboardData" in a ? a.clipboardData : window.clipboardData;\n    }\n  }),\n  Jd = rd(Id),\n  Kd = A({}, sd, {\n    data: 0\n  }),\n  Ld = rd(Kd),\n  Md = {\n    Esc: "Escape",\n    Spacebar: " ",\n    Left: "ArrowLeft",\n    Up: "ArrowUp",\n    Right: "ArrowRight",\n    Down: "ArrowDown",\n    Del: "Delete",\n    Win: "OS",\n    Menu: "ContextMenu",\n    Apps: "ContextMenu",\n    Scroll: "ScrollLock",\n    MozPrintableKey: "Unidentified"\n  },\n  Nd = {\n    8: "Backspace",\n    9: "Tab",\n    12: "Clear",\n    13: "Enter",\n    16: "Shift",\n    17: "Control",\n    18: "Alt",\n    19: "Pause",\n    20: "CapsLock",\n    27: "Escape",\n    32: " ",\n    33: "PageUp",\n    34: "PageDown",\n    35: "End",\n    36: "Home",\n    37: "ArrowLeft",\n    38: "ArrowUp",\n    39: "ArrowRight",\n    40: "ArrowDown",\n    45: "Insert",\n    46: "Delete",\n    112: "F1",\n    113: "F2",\n    114: "F3",\n    115: "F4",\n    116: "F5",\n    117: "F6",\n    118: "F7",\n    119: "F8",\n    120: "F9",\n    121: "F10",\n    122: "F11",\n    123: "F12",\n    144: "NumLock",\n    145: "ScrollLock",\n    224: "Meta"\n  },\n  Od = {\n    Alt: "altKey",\n    Control: "ctrlKey",\n    Meta: "metaKey",\n    Shift: "shiftKey"\n  };\nfunction Pd(a) {\n  var b = this.nativeEvent;\n  return b.getModifierState ? b.getModifierState(a) : (a = Od[a]) ? !!b[a] : !1;\n}\nfunction zd() {\n  return Pd;\n}\nvar Qd = A({}, ud, {\n    key: function (a) {\n      if (a.key) {\n        var b = Md[a.key] || a.key;\n        if ("Unidentified" !== b) return b;\n      }\n      return "keypress" === a.type ? (a = od(a), 13 === a ? "Enter" : String.fromCharCode(a)) : "keydown" === a.type || "keyup" === a.type ? Nd[a.keyCode] || "Unidentified" : "";\n    },\n    code: 0,\n    location: 0,\n    ctrlKey: 0,\n    shiftKey: 0,\n    altKey: 0,\n    metaKey: 0,\n    repeat: 0,\n    locale: 0,\n    getModifierState: zd,\n    charCode: function (a) {\n      return "keypress" === a.type ? od(a) : 0;\n    },\n    keyCode: function (a) {\n      return "keydown" === a.type || "keyup" === a.type ? a.keyCode : 0;\n    },\n    which: function (a) {\n      return "keypress" === a.type ? od(a) : "keydown" === a.type || "keyup" === a.type ? a.keyCode : 0;\n    }\n  }),\n  Rd = rd(Qd),\n  Sd = A({}, Ad, {\n    pointerId: 0,\n    width: 0,\n    height: 0,\n    pressure: 0,\n    tangentialPressure: 0,\n    tiltX: 0,\n    tiltY: 0,\n    twist: 0,\n    pointerType: 0,\n    isPrimary: 0\n  }),\n  Td = rd(Sd),\n  Ud = A({}, ud, {\n    touches: 0,\n    targetTouches: 0,\n    changedTouches: 0,\n    altKey: 0,\n    metaKey: 0,\n    ctrlKey: 0,\n    shiftKey: 0,\n    getModifierState: zd\n  }),\n  Vd = rd(Ud),\n  Wd = A({}, sd, {\n    propertyName: 0,\n    elapsedTime: 0,\n    pseudoElement: 0\n  }),\n  Xd = rd(Wd),\n  Yd = A({}, Ad, {\n    deltaX: function (a) {\n      return "deltaX" in a ? a.deltaX : "wheelDeltaX" in a ? -a.wheelDeltaX : 0;\n    },\n    deltaY: function (a) {\n      return "deltaY" in a ? a.deltaY : "wheelDeltaY" in a ? -a.wheelDeltaY : "wheelDelta" in a ? -a.wheelDelta : 0;\n    },\n    deltaZ: 0,\n    deltaMode: 0\n  }),\n  Zd = rd(Yd),\n  $d = [9, 13, 27, 32],\n  ae = ia && "CompositionEvent" in window,\n  be = null;\nia && "documentMode" in document && (be = document.documentMode);\nvar ce = ia && "TextEvent" in window && !be,\n  de = ia && (!ae || be && 8 < be && 11 >= be),\n  ee = String.fromCharCode(32),\n  fe = !1;\nfunction ge(a, b) {\n  switch (a) {\n    case "keyup":\n      return -1 !== $d.indexOf(b.keyCode);\n    case "keydown":\n      return 229 !== b.keyCode;\n    case "keypress":\n    case "mousedown":\n    case "focusout":\n      return !0;\n    default:\n      return !1;\n  }\n}\nfunction he(a) {\n  a = a.detail;\n  return "object" === typeof a && "data" in a ? a.data : null;\n}\nvar ie = !1;\nfunction je(a, b) {\n  switch (a) {\n    case "compositionend":\n      return he(b);\n    case "keypress":\n      if (32 !== b.which) return null;\n      fe = !0;\n      return ee;\n    case "textInput":\n      return a = b.data, a === ee && fe ? null : a;\n    default:\n      return null;\n  }\n}\nfunction ke(a, b) {\n  if (ie) return "compositionend" === a || !ae && ge(a, b) ? (a = nd(), md = ld = kd = null, ie = !1, a) : null;\n  switch (a) {\n    case "paste":\n      return null;\n    case "keypress":\n      if (!(b.ctrlKey || b.altKey || b.metaKey) || b.ctrlKey && b.altKey) {\n        if (b.char && 1 < b.char.length) return b.char;\n        if (b.which) return String.fromCharCode(b.which);\n      }\n      return null;\n    case "compositionend":\n      return de && "ko" !== b.locale ? null : b.data;\n    default:\n      return null;\n  }\n}\nvar le = {\n  color: !0,\n  date: !0,\n  datetime: !0,\n  "datetime-local": !0,\n  email: !0,\n  month: !0,\n  number: !0,\n  password: !0,\n  range: !0,\n  search: !0,\n  tel: !0,\n  text: !0,\n  time: !0,\n  url: !0,\n  week: !0\n};\nfunction me(a) {\n  var b = a && a.nodeName && a.nodeName.toLowerCase();\n  return "input" === b ? !!le[a.type] : "textarea" === b ? !0 : !1;\n}\nfunction ne(a, b, c, d) {\n  Eb(d);\n  b = oe(b, "onChange");\n  0 < b.length && (c = new td("onChange", "change", null, c, d), a.push({\n    event: c,\n    listeners: b\n  }));\n}\nvar pe = null,\n  qe = null;\nfunction re(a) {\n  se(a, 0);\n}\nfunction te(a) {\n  var b = ue(a);\n  if (Wa(b)) return a;\n}\nfunction ve(a, b) {\n  if ("change" === a) return b;\n}\nvar we = !1;\nif (ia) {\n  var xe;\n  if (ia) {\n    var ye = ("oninput" in document);\n    if (!ye) {\n      var ze = document.createElement("div");\n      ze.setAttribute("oninput", "return;");\n      ye = "function" === typeof ze.oninput;\n    }\n    xe = ye;\n  } else xe = !1;\n  we = xe && (!document.documentMode || 9 < document.documentMode);\n}\nfunction Ae() {\n  pe && (pe.detachEvent("onpropertychange", Be), qe = pe = null);\n}\nfunction Be(a) {\n  if ("value" === a.propertyName && te(qe)) {\n    var b = [];\n    ne(b, qe, a, xb(a));\n    Jb(re, b);\n  }\n}\nfunction Ce(a, b, c) {\n  "focusin" === a ? (Ae(), pe = b, qe = c, pe.attachEvent("onpropertychange", Be)) : "focusout" === a && Ae();\n}\nfunction De(a) {\n  if ("selectionchange" === a || "keyup" === a || "keydown" === a) return te(qe);\n}\nfunction Ee(a, b) {\n  if ("click" === a) return te(b);\n}\nfunction Fe(a, b) {\n  if ("input" === a || "change" === a) return te(b);\n}\nfunction Ge(a, b) {\n  return a === b && (0 !== a || 1 / a === 1 / b) || a !== a && b !== b;\n}\nvar He = "function" === typeof Object.is ? Object.is : Ge;\nfunction Ie(a, b) {\n  if (He(a, b)) return !0;\n  if ("object" !== typeof a || null === a || "object" !== typeof b || null === b) return !1;\n  var c = Object.keys(a),\n    d = Object.keys(b);\n  if (c.length !== d.length) return !1;\n  for (d = 0; d < c.length; d++) {\n    var e = c[d];\n    if (!ja.call(b, e) || !He(a[e], b[e])) return !1;\n  }\n  return !0;\n}\nfunction Je(a) {\n  for (; a && a.firstChild;) a = a.firstChild;\n  return a;\n}\nfunction Ke(a, b) {\n  var c = Je(a);\n  a = 0;\n  for (var d; c;) {\n    if (3 === c.nodeType) {\n      d = a + c.textContent.length;\n      if (a <= b && d >= b) return {\n        node: c,\n        offset: b - a\n      };\n      a = d;\n    }\n    a: {\n      for (; c;) {\n        if (c.nextSibling) {\n          c = c.nextSibling;\n          break a;\n        }\n        c = c.parentNode;\n      }\n      c = void 0;\n    }\n    c = Je(c);\n  }\n}\nfunction Le(a, b) {\n  return a && b ? a === b ? !0 : a && 3 === a.nodeType ? !1 : b && 3 === b.nodeType ? Le(a, b.parentNode) : "contains" in a ? a.contains(b) : a.compareDocumentPosition ? !!(a.compareDocumentPosition(b) & 16) : !1 : !1;\n}\nfunction Me() {\n  for (var a = window, b = Xa(); b instanceof a.HTMLIFrameElement;) {\n    try {\n      var c = "string" === typeof b.contentWindow.location.href;\n    } catch (d) {\n      c = !1;\n    }\n    if (c) a = b.contentWindow;else break;\n    b = Xa(a.document);\n  }\n  return b;\n}\nfunction Ne(a) {\n  var b = a && a.nodeName && a.nodeName.toLowerCase();\n  return b && ("input" === b && ("text" === a.type || "search" === a.type || "tel" === a.type || "url" === a.type || "password" === a.type) || "textarea" === b || "true" === a.contentEditable);\n}\nfunction Oe(a) {\n  var b = Me(),\n    c = a.focusedElem,\n    d = a.selectionRange;\n  if (b !== c && c && c.ownerDocument && Le(c.ownerDocument.documentElement, c)) {\n    if (null !== d && Ne(c)) if (b = d.start, a = d.end, void 0 === a && (a = b), "selectionStart" in c) c.selectionStart = b, c.selectionEnd = Math.min(a, c.value.length);else if (a = (b = c.ownerDocument || document) && b.defaultView || window, a.getSelection) {\n      a = a.getSelection();\n      var e = c.textContent.length,\n        f = Math.min(d.start, e);\n      d = void 0 === d.end ? f : Math.min(d.end, e);\n      !a.extend && f > d && (e = d, d = f, f = e);\n      e = Ke(c, f);\n      var g = Ke(c, d);\n      e && g && (1 !== a.rangeCount || a.anchorNode !== e.node || a.anchorOffset !== e.offset || a.focusNode !== g.node || a.focusOffset !== g.offset) && (b = b.createRange(), b.setStart(e.node, e.offset), a.removeAllRanges(), f > d ? (a.addRange(b), a.extend(g.node, g.offset)) : (b.setEnd(g.node, g.offset), a.addRange(b)));\n    }\n    b = [];\n    for (a = c; a = a.parentNode;) 1 === a.nodeType && b.push({\n      element: a,\n      left: a.scrollLeft,\n      top: a.scrollTop\n    });\n    "function" === typeof c.focus && c.focus();\n    for (c = 0; c < b.length; c++) a = b[c], a.element.scrollLeft = a.left, a.element.scrollTop = a.top;\n  }\n}\nvar Pe = ia && "documentMode" in document && 11 >= document.documentMode,\n  Qe = null,\n  Re = null,\n  Se = null,\n  Te = !1;\nfunction Ue(a, b, c) {\n  var d = c.window === c ? c.document : 9 === c.nodeType ? c : c.ownerDocument;\n  Te || null == Qe || Qe !== Xa(d) || (d = Qe, "selectionStart" in d && Ne(d) ? d = {\n    start: d.selectionStart,\n    end: d.selectionEnd\n  } : (d = (d.ownerDocument && d.ownerDocument.defaultView || window).getSelection(), d = {\n    anchorNode: d.anchorNode,\n    anchorOffset: d.anchorOffset,\n    focusNode: d.focusNode,\n    focusOffset: d.focusOffset\n  }), Se && Ie(Se, d) || (Se = d, d = oe(Re, "onSelect"), 0 < d.length && (b = new td("onSelect", "select", null, b, c), a.push({\n    event: b,\n    listeners: d\n  }), b.target = Qe)));\n}\nfunction Ve(a, b) {\n  var c = {};\n  c[a.toLowerCase()] = b.toLowerCase();\n  c["Webkit" + a] = "webkit" + b;\n  c["Moz" + a] = "moz" + b;\n  return c;\n}\nvar We = {\n    animationend: Ve("Animation", "AnimationEnd"),\n    animationiteration: Ve("Animation", "AnimationIteration"),\n    animationstart: Ve("Animation", "AnimationStart"),\n    transitionend: Ve("Transition", "TransitionEnd")\n  },\n  Xe = {},\n  Ye = {};\nia && (Ye = document.createElement("div").style, "AnimationEvent" in window || (delete We.animationend.animation, delete We.animationiteration.animation, delete We.animationstart.animation), "TransitionEvent" in window || delete We.transitionend.transition);\nfunction Ze(a) {\n  if (Xe[a]) return Xe[a];\n  if (!We[a]) return a;\n  var b = We[a],\n    c;\n  for (c in b) if (b.hasOwnProperty(c) && c in Ye) return Xe[a] = b[c];\n  return a;\n}\nvar $e = Ze("animationend"),\n  af = Ze("animationiteration"),\n  bf = Ze("animationstart"),\n  cf = Ze("transitionend"),\n  df = new Map(),\n  ef = "abort auxClick cancel canPlay canPlayThrough click close contextMenu copy cut drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error gotPointerCapture input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart lostPointerCapture mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing pointerCancel pointerDown pointerMove pointerOut pointerOver pointerUp progress rateChange reset resize seeked seeking stalled submit suspend timeUpdate touchCancel touchEnd touchStart volumeChange scroll toggle touchMove waiting wheel".split(" ");\nfunction ff(a, b) {\n  df.set(a, b);\n  fa(b, [a]);\n}\nfor (var gf = 0; gf < ef.length; gf++) {\n  var hf = ef[gf],\n    jf = hf.toLowerCase(),\n    kf = hf[0].toUpperCase() + hf.slice(1);\n  ff(jf, "on" + kf);\n}\nff($e, "onAnimationEnd");\nff(af, "onAnimationIteration");\nff(bf, "onAnimationStart");\nff("dblclick", "onDoubleClick");\nff("focusin", "onFocus");\nff("focusout", "onBlur");\nff(cf, "onTransitionEnd");\nha("onMouseEnter", ["mouseout", "mouseover"]);\nha("onMouseLeave", ["mouseout", "mouseover"]);\nha("onPointerEnter", ["pointerout", "pointerover"]);\nha("onPointerLeave", ["pointerout", "pointerover"]);\nfa("onChange", "change click focusin focusout input keydown keyup selectionchange".split(" "));\nfa("onSelect", "focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" "));\nfa("onBeforeInput", ["compositionend", "keypress", "textInput", "paste"]);\nfa("onCompositionEnd", "compositionend focusout keydown keypress keyup mousedown".split(" "));\nfa("onCompositionStart", "compositionstart focusout keydown keypress keyup mousedown".split(" "));\nfa("onCompositionUpdate", "compositionupdate focusout keydown keypress keyup mousedown".split(" "));\nvar lf = "abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange resize seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),\n  mf = new Set("cancel close invalid load scroll toggle".split(" ").concat(lf));\nfunction nf(a, b, c) {\n  var d = a.type || "unknown-event";\n  a.currentTarget = c;\n  Ub(d, b, void 0, a);\n  a.currentTarget = null;\n}\nfunction se(a, b) {\n  b = 0 !== (b & 4);\n  for (var c = 0; c < a.length; c++) {\n    var d = a[c],\n      e = d.event;\n    d = d.listeners;\n    a: {\n      var f = void 0;\n      if (b) for (var g = d.length - 1; 0 <= g; g--) {\n        var h = d[g],\n          k = h.instance,\n          l = h.currentTarget;\n        h = h.listener;\n        if (k !== f && e.isPropagationStopped()) break a;\n        nf(e, h, l);\n        f = k;\n      } else for (g = 0; g < d.length; g++) {\n        h = d[g];\n        k = h.instance;\n        l = h.currentTarget;\n        h = h.listener;\n        if (k !== f && e.isPropagationStopped()) break a;\n        nf(e, h, l);\n        f = k;\n      }\n    }\n  }\n  if (Qb) throw a = Rb, Qb = !1, Rb = null, a;\n}\nfunction D(a, b) {\n  var c = b[of];\n  void 0 === c && (c = b[of] = new Set());\n  var d = a + "__bubble";\n  c.has(d) || (pf(b, a, 2, !1), c.add(d));\n}\nfunction qf(a, b, c) {\n  var d = 0;\n  b && (d |= 4);\n  pf(c, a, d, b);\n}\nvar rf = "_reactListening" + Math.random().toString(36).slice(2);\nfunction sf(a) {\n  if (!a[rf]) {\n    a[rf] = !0;\n    da.forEach(function (b) {\n      "selectionchange" !== b && (mf.has(b) || qf(b, !1, a), qf(b, !0, a));\n    });\n    var b = 9 === a.nodeType ? a : a.ownerDocument;\n    null === b || b[rf] || (b[rf] = !0, qf("selectionchange", !1, b));\n  }\n}\nfunction pf(a, b, c, d) {\n  switch (jd(b)) {\n    case 1:\n      var e = ed;\n      break;\n    case 4:\n      e = gd;\n      break;\n    default:\n      e = fd;\n  }\n  c = e.bind(null, b, c, a);\n  e = void 0;\n  !Lb || "touchstart" !== b && "touchmove" !== b && "wheel" !== b || (e = !0);\n  d ? void 0 !== e ? a.addEventListener(b, c, {\n    capture: !0,\n    passive: e\n  }) : a.addEventListener(b, c, !0) : void 0 !== e ? a.addEventListener(b, c, {\n    passive: e\n  }) : a.addEventListener(b, c, !1);\n}\nfunction hd(a, b, c, d, e) {\n  var f = d;\n  if (0 === (b & 1) && 0 === (b & 2) && null !== d) a: for (;;) {\n    if (null === d) return;\n    var g = d.tag;\n    if (3 === g || 4 === g) {\n      var h = d.stateNode.containerInfo;\n      if (h === e || 8 === h.nodeType && h.parentNode === e) break;\n      if (4 === g) for (g = d.return; null !== g;) {\n        var k = g.tag;\n        if (3 === k || 4 === k) if (k = g.stateNode.containerInfo, k === e || 8 === k.nodeType && k.parentNode === e) return;\n        g = g.return;\n      }\n      for (; null !== h;) {\n        g = Wc(h);\n        if (null === g) return;\n        k = g.tag;\n        if (5 === k || 6 === k) {\n          d = f = g;\n          continue a;\n        }\n        h = h.parentNode;\n      }\n    }\n    d = d.return;\n  }\n  Jb(function () {\n    var d = f,\n      e = xb(c),\n      g = [];\n    a: {\n      var h = df.get(a);\n      if (void 0 !== h) {\n        var k = td,\n          n = a;\n        switch (a) {\n          case "keypress":\n            if (0 === od(c)) break a;\n          case "keydown":\n          case "keyup":\n            k = Rd;\n            break;\n          case "focusin":\n            n = "focus";\n            k = Fd;\n            break;\n          case "focusout":\n            n = "blur";\n            k = Fd;\n            break;\n          case "beforeblur":\n          case "afterblur":\n            k = Fd;\n            break;\n          case "click":\n            if (2 === c.button) break a;\n          case "auxclick":\n          case "dblclick":\n          case "mousedown":\n          case "mousemove":\n          case "mouseup":\n          case "mouseout":\n          case "mouseover":\n          case "contextmenu":\n            k = Bd;\n            break;\n          case "drag":\n          case "dragend":\n          case "dragenter":\n          case "dragexit":\n          case "dragleave":\n          case "dragover":\n          case "dragstart":\n          case "drop":\n            k = Dd;\n            break;\n          case "touchcancel":\n          case "touchend":\n          case "touchmove":\n          case "touchstart":\n            k = Vd;\n            break;\n          case $e:\n          case af:\n          case bf:\n            k = Hd;\n            break;\n          case cf:\n            k = Xd;\n            break;\n          case "scroll":\n            k = vd;\n            break;\n          case "wheel":\n            k = Zd;\n            break;\n          case "copy":\n          case "cut":\n          case "paste":\n            k = Jd;\n            break;\n          case "gotpointercapture":\n          case "lostpointercapture":\n          case "pointercancel":\n          case "pointerdown":\n          case "pointermove":\n          case "pointerout":\n          case "pointerover":\n          case "pointerup":\n            k = Td;\n        }\n        var t = 0 !== (b & 4),\n          J = !t && "scroll" === a,\n          x = t ? null !== h ? h + "Capture" : null : h;\n        t = [];\n        for (var w = d, u; null !== w;) {\n          u = w;\n          var F = u.stateNode;\n          5 === u.tag && null !== F && (u = F, null !== x && (F = Kb(w, x), null != F && t.push(tf(w, F, u))));\n          if (J) break;\n          w = w.return;\n        }\n        0 < t.length && (h = new k(h, n, null, c, e), g.push({\n          event: h,\n          listeners: t\n        }));\n      }\n    }\n    if (0 === (b & 7)) {\n      a: {\n        h = "mouseover" === a || "pointerover" === a;\n        k = "mouseout" === a || "pointerout" === a;\n        if (h && c !== wb && (n = c.relatedTarget || c.fromElement) && (Wc(n) || n[uf])) break a;\n        if (k || h) {\n          h = e.window === e ? e : (h = e.ownerDocument) ? h.defaultView || h.parentWindow : window;\n          if (k) {\n            if (n = c.relatedTarget || c.toElement, k = d, n = n ? Wc(n) : null, null !== n && (J = Vb(n), n !== J || 5 !== n.tag && 6 !== n.tag)) n = null;\n          } else k = null, n = d;\n          if (k !== n) {\n            t = Bd;\n            F = "onMouseLeave";\n            x = "onMouseEnter";\n            w = "mouse";\n            if ("pointerout" === a || "pointerover" === a) t = Td, F = "onPointerLeave", x = "onPointerEnter", w = "pointer";\n            J = null == k ? h : ue(k);\n            u = null == n ? h : ue(n);\n            h = new t(F, w + "leave", k, c, e);\n            h.target = J;\n            h.relatedTarget = u;\n            F = null;\n            Wc(e) === d && (t = new t(x, w + "enter", n, c, e), t.target = u, t.relatedTarget = J, F = t);\n            J = F;\n            if (k && n) b: {\n              t = k;\n              x = n;\n              w = 0;\n              for (u = t; u; u = vf(u)) w++;\n              u = 0;\n              for (F = x; F; F = vf(F)) u++;\n              for (; 0 < w - u;) t = vf(t), w--;\n              for (; 0 < u - w;) x = vf(x), u--;\n              for (; w--;) {\n                if (t === x || null !== x && t === x.alternate) break b;\n                t = vf(t);\n                x = vf(x);\n              }\n              t = null;\n            } else t = null;\n            null !== k && wf(g, h, k, t, !1);\n            null !== n && null !== J && wf(g, J, n, t, !0);\n          }\n        }\n      }\n      a: {\n        h = d ? ue(d) : window;\n        k = h.nodeName && h.nodeName.toLowerCase();\n        if ("select" === k || "input" === k && "file" === h.type) var na = ve;else if (me(h)) {\n          if (we) na = Fe;else {\n            na = De;\n            var xa = Ce;\n          }\n        } else (k = h.nodeName) && "input" === k.toLowerCase() && ("checkbox" === h.type || "radio" === h.type) && (na = Ee);\n        if (na && (na = na(a, d))) {\n          ne(g, na, c, e);\n          break a;\n        }\n        xa && xa(a, h, d);\n        "focusout" === a && (xa = h._wrapperState) && xa.controlled && "number" === h.type && cb(h, "number", h.value);\n      }\n      xa = d ? ue(d) : window;\n      switch (a) {\n        case "focusin":\n          if (me(xa) || "true" === xa.contentEditable) Qe = xa, Re = d, Se = null;\n          break;\n        case "focusout":\n          Se = Re = Qe = null;\n          break;\n        case "mousedown":\n          Te = !0;\n          break;\n        case "contextmenu":\n        case "mouseup":\n        case "dragend":\n          Te = !1;\n          Ue(g, c, e);\n          break;\n        case "selectionchange":\n          if (Pe) break;\n        case "keydown":\n        case "keyup":\n          Ue(g, c, e);\n      }\n      var $a;\n      if (ae) b: {\n        switch (a) {\n          case "compositionstart":\n            var ba = "onCompositionStart";\n            break b;\n          case "compositionend":\n            ba = "onCompositionEnd";\n            break b;\n          case "compositionupdate":\n            ba = "onCompositionUpdate";\n            break b;\n        }\n        ba = void 0;\n      } else ie ? ge(a, c) && (ba = "onCompositionEnd") : "keydown" === a && 229 === c.keyCode && (ba = "onCompositionStart");\n      ba && (de && "ko" !== c.locale && (ie || "onCompositionStart" !== ba ? "onCompositionEnd" === ba && ie && ($a = nd()) : (kd = e, ld = "value" in kd ? kd.value : kd.textContent, ie = !0)), xa = oe(d, ba), 0 < xa.length && (ba = new Ld(ba, a, null, c, e), g.push({\n        event: ba,\n        listeners: xa\n      }), $a ? ba.data = $a : ($a = he(c), null !== $a && (ba.data = $a))));\n      if ($a = ce ? je(a, c) : ke(a, c)) d = oe(d, "onBeforeInput"), 0 < d.length && (e = new Ld("onBeforeInput", "beforeinput", null, c, e), g.push({\n        event: e,\n        listeners: d\n      }), e.data = $a);\n    }\n    se(g, b);\n  });\n}\nfunction tf(a, b, c) {\n  return {\n    instance: a,\n    listener: b,\n    currentTarget: c\n  };\n}\nfunction oe(a, b) {\n  for (var c = b + "Capture", d = []; null !== a;) {\n    var e = a,\n      f = e.stateNode;\n    5 === e.tag && null !== f && (e = f, f = Kb(a, c), null != f && d.unshift(tf(a, f, e)), f = Kb(a, b), null != f && d.push(tf(a, f, e)));\n    a = a.return;\n  }\n  return d;\n}\nfunction vf(a) {\n  if (null === a) return null;\n  do a = a.return; while (a && 5 !== a.tag);\n  return a ? a : null;\n}\nfunction wf(a, b, c, d, e) {\n  for (var f = b._reactName, g = []; null !== c && c !== d;) {\n    var h = c,\n      k = h.alternate,\n      l = h.stateNode;\n    if (null !== k && k === d) break;\n    5 === h.tag && null !== l && (h = l, e ? (k = Kb(c, f), null != k && g.unshift(tf(c, k, h))) : e || (k = Kb(c, f), null != k && g.push(tf(c, k, h))));\n    c = c.return;\n  }\n  0 !== g.length && a.push({\n    event: b,\n    listeners: g\n  });\n}\nvar xf = /\\r\\n?/g,\n  yf = /\\u0000|\\uFFFD/g;\nfunction zf(a) {\n  return ("string" === typeof a ? a : "" + a).replace(xf, "\\n").replace(yf, "");\n}\nfunction Af(a, b, c) {\n  b = zf(b);\n  if (zf(a) !== b && c) throw Error(p(425));\n}\nfunction Bf() {}\nvar Cf = null,\n  Df = null;\nfunction Ef(a, b) {\n  return "textarea" === a || "noscript" === a || "string" === typeof b.children || "number" === typeof b.children || "object" === typeof b.dangerouslySetInnerHTML && null !== b.dangerouslySetInnerHTML && null != b.dangerouslySetInnerHTML.__html;\n}\nvar Ff = "function" === typeof setTimeout ? setTimeout : void 0,\n  Gf = "function" === typeof clearTimeout ? clearTimeout : void 0,\n  Hf = "function" === typeof Promise ? Promise : void 0,\n  Jf = "function" === typeof queueMicrotask ? queueMicrotask : "undefined" !== typeof Hf ? function (a) {\n    return Hf.resolve(null).then(a).catch(If);\n  } : Ff;\nfunction If(a) {\n  setTimeout(function () {\n    throw a;\n  });\n}\nfunction Kf(a, b) {\n  var c = b,\n    d = 0;\n  do {\n    var e = c.nextSibling;\n    a.removeChild(c);\n    if (e && 8 === e.nodeType) if (c = e.data, "/$" === c) {\n      if (0 === d) {\n        a.removeChild(e);\n        bd(b);\n        return;\n      }\n      d--;\n    } else "$" !== c && "$?" !== c && "$!" !== c || d++;\n    c = e;\n  } while (c);\n  bd(b);\n}\nfunction Lf(a) {\n  for (; null != a; a = a.nextSibling) {\n    var b = a.nodeType;\n    if (1 === b || 3 === b) break;\n    if (8 === b) {\n      b = a.data;\n      if ("$" === b || "$!" === b || "$?" === b) break;\n      if ("/$" === b) return null;\n    }\n  }\n  return a;\n}\nfunction Mf(a) {\n  a = a.previousSibling;\n  for (var b = 0; a;) {\n    if (8 === a.nodeType) {\n      var c = a.data;\n      if ("$" === c || "$!" === c || "$?" === c) {\n        if (0 === b) return a;\n        b--;\n      } else "/$" === c && b++;\n    }\n    a = a.previousSibling;\n  }\n  return null;\n}\nvar Nf = Math.random().toString(36).slice(2),\n  Of = "__reactFiber$" + Nf,\n  Pf = "__reactProps$" + Nf,\n  uf = "__reactContainer$" + Nf,\n  of = "__reactEvents$" + Nf,\n  Qf = "__reactListeners$" + Nf,\n  Rf = "__reactHandles$" + Nf;\nfunction Wc(a) {\n  var b = a[Of];\n  if (b) return b;\n  for (var c = a.parentNode; c;) {\n    if (b = c[uf] || c[Of]) {\n      c = b.alternate;\n      if (null !== b.child || null !== c && null !== c.child) for (a = Mf(a); null !== a;) {\n        if (c = a[Of]) return c;\n        a = Mf(a);\n      }\n      return b;\n    }\n    a = c;\n    c = a.parentNode;\n  }\n  return null;\n}\nfunction Cb(a) {\n  a = a[Of] || a[uf];\n  return !a || 5 !== a.tag && 6 !== a.tag && 13 !== a.tag && 3 !== a.tag ? null : a;\n}\nfunction ue(a) {\n  if (5 === a.tag || 6 === a.tag) return a.stateNode;\n  throw Error(p(33));\n}\nfunction Db(a) {\n  return a[Pf] || null;\n}\nvar Sf = [],\n  Tf = -1;\nfunction Uf(a) {\n  return {\n    current: a\n  };\n}\nfunction E(a) {\n  0 > Tf || (a.current = Sf[Tf], Sf[Tf] = null, Tf--);\n}\nfunction G(a, b) {\n  Tf++;\n  Sf[Tf] = a.current;\n  a.current = b;\n}\nvar Vf = {},\n  H = Uf(Vf),\n  Wf = Uf(!1),\n  Xf = Vf;\nfunction Yf(a, b) {\n  var c = a.type.contextTypes;\n  if (!c) return Vf;\n  var d = a.stateNode;\n  if (d && d.__reactInternalMemoizedUnmaskedChildContext === b) return d.__reactInternalMemoizedMaskedChildContext;\n  var e = {},\n    f;\n  for (f in c) e[f] = b[f];\n  d && (a = a.stateNode, a.__reactInternalMemoizedUnmaskedChildContext = b, a.__reactInternalMemoizedMaskedChildContext = e);\n  return e;\n}\nfunction Zf(a) {\n  a = a.childContextTypes;\n  return null !== a && void 0 !== a;\n}\nfunction $f() {\n  E(Wf);\n  E(H);\n}\nfunction ag(a, b, c) {\n  if (H.current !== Vf) throw Error(p(168));\n  G(H, b);\n  G(Wf, c);\n}\nfunction bg(a, b, c) {\n  var d = a.stateNode;\n  b = b.childContextTypes;\n  if ("function" !== typeof d.getChildContext) return c;\n  d = d.getChildContext();\n  for (var e in d) if (!(e in b)) throw Error(p(108, Ra(a) || "Unknown", e));\n  return A({}, c, d);\n}\nfunction cg(a) {\n  a = (a = a.stateNode) && a.__reactInternalMemoizedMergedChildContext || Vf;\n  Xf = H.current;\n  G(H, a);\n  G(Wf, Wf.current);\n  return !0;\n}\nfunction dg(a, b, c) {\n  var d = a.stateNode;\n  if (!d) throw Error(p(169));\n  c ? (a = bg(a, b, Xf), d.__reactInternalMemoizedMergedChildContext = a, E(Wf), E(H), G(H, a)) : E(Wf);\n  G(Wf, c);\n}\nvar eg = null,\n  fg = !1,\n  gg = !1;\nfunction hg(a) {\n  null === eg ? eg = [a] : eg.push(a);\n}\nfunction ig(a) {\n  fg = !0;\n  hg(a);\n}\nfunction jg() {\n  if (!gg && null !== eg) {\n    gg = !0;\n    var a = 0,\n      b = C;\n    try {\n      var c = eg;\n      for (C = 1; a < c.length; a++) {\n        var d = c[a];\n        do d = d(!0); while (null !== d);\n      }\n      eg = null;\n      fg = !1;\n    } catch (e) {\n      throw null !== eg && (eg = eg.slice(a + 1)), ac(fc, jg), e;\n    } finally {\n      C = b, gg = !1;\n    }\n  }\n  return null;\n}\nvar kg = [],\n  lg = 0,\n  mg = null,\n  ng = 0,\n  og = [],\n  pg = 0,\n  qg = null,\n  rg = 1,\n  sg = "";\nfunction tg(a, b) {\n  kg[lg++] = ng;\n  kg[lg++] = mg;\n  mg = a;\n  ng = b;\n}\nfunction ug(a, b, c) {\n  og[pg++] = rg;\n  og[pg++] = sg;\n  og[pg++] = qg;\n  qg = a;\n  var d = rg;\n  a = sg;\n  var e = 32 - oc(d) - 1;\n  d &= ~(1 << e);\n  c += 1;\n  var f = 32 - oc(b) + e;\n  if (30 < f) {\n    var g = e - e % 5;\n    f = (d & (1 << g) - 1).toString(32);\n    d >>= g;\n    e -= g;\n    rg = 1 << 32 - oc(b) + e | c << e | d;\n    sg = f + a;\n  } else rg = 1 << f | c << e | d, sg = a;\n}\nfunction vg(a) {\n  null !== a.return && (tg(a, 1), ug(a, 1, 0));\n}\nfunction wg(a) {\n  for (; a === mg;) mg = kg[--lg], kg[lg] = null, ng = kg[--lg], kg[lg] = null;\n  for (; a === qg;) qg = og[--pg], og[pg] = null, sg = og[--pg], og[pg] = null, rg = og[--pg], og[pg] = null;\n}\nvar xg = null,\n  yg = null,\n  I = !1,\n  zg = null;\nfunction Ag(a, b) {\n  var c = Bg(5, null, null, 0);\n  c.elementType = "DELETED";\n  c.stateNode = b;\n  c.return = a;\n  b = a.deletions;\n  null === b ? (a.deletions = [c], a.flags |= 16) : b.push(c);\n}\nfunction Cg(a, b) {\n  switch (a.tag) {\n    case 5:\n      var c = a.type;\n      b = 1 !== b.nodeType || c.toLowerCase() !== b.nodeName.toLowerCase() ? null : b;\n      return null !== b ? (a.stateNode = b, xg = a, yg = Lf(b.firstChild), !0) : !1;\n    case 6:\n      return b = "" === a.pendingProps || 3 !== b.nodeType ? null : b, null !== b ? (a.stateNode = b, xg = a, yg = null, !0) : !1;\n    case 13:\n      return b = 8 !== b.nodeType ? null : b, null !== b ? (c = null !== qg ? {\n        id: rg,\n        overflow: sg\n      } : null, a.memoizedState = {\n        dehydrated: b,\n        treeContext: c,\n        retryLane: 1073741824\n      }, c = Bg(18, null, null, 0), c.stateNode = b, c.return = a, a.child = c, xg = a, yg = null, !0) : !1;\n    default:\n      return !1;\n  }\n}\nfunction Dg(a) {\n  return 0 !== (a.mode & 1) && 0 === (a.flags & 128);\n}\nfunction Eg(a) {\n  if (I) {\n    var b = yg;\n    if (b) {\n      var c = b;\n      if (!Cg(a, b)) {\n        if (Dg(a)) throw Error(p(418));\n        b = Lf(c.nextSibling);\n        var d = xg;\n        b && Cg(a, b) ? Ag(d, c) : (a.flags = a.flags & -4097 | 2, I = !1, xg = a);\n      }\n    } else {\n      if (Dg(a)) throw Error(p(418));\n      a.flags = a.flags & -4097 | 2;\n      I = !1;\n      xg = a;\n    }\n  }\n}\nfunction Fg(a) {\n  for (a = a.return; null !== a && 5 !== a.tag && 3 !== a.tag && 13 !== a.tag;) a = a.return;\n  xg = a;\n}\nfunction Gg(a) {\n  if (a !== xg) return !1;\n  if (!I) return Fg(a), I = !0, !1;\n  var b;\n  (b = 3 !== a.tag) && !(b = 5 !== a.tag) && (b = a.type, b = "head" !== b && "body" !== b && !Ef(a.type, a.memoizedProps));\n  if (b && (b = yg)) {\n    if (Dg(a)) throw Hg(), Error(p(418));\n    for (; b;) Ag(a, b), b = Lf(b.nextSibling);\n  }\n  Fg(a);\n  if (13 === a.tag) {\n    a = a.memoizedState;\n    a = null !== a ? a.dehydrated : null;\n    if (!a) throw Error(p(317));\n    a: {\n      a = a.nextSibling;\n      for (b = 0; a;) {\n        if (8 === a.nodeType) {\n          var c = a.data;\n          if ("/$" === c) {\n            if (0 === b) {\n              yg = Lf(a.nextSibling);\n              break a;\n            }\n            b--;\n          } else "$" !== c && "$!" !== c && "$?" !== c || b++;\n        }\n        a = a.nextSibling;\n      }\n      yg = null;\n    }\n  } else yg = xg ? Lf(a.stateNode.nextSibling) : null;\n  return !0;\n}\nfunction Hg() {\n  for (var a = yg; a;) a = Lf(a.nextSibling);\n}\nfunction Ig() {\n  yg = xg = null;\n  I = !1;\n}\nfunction Jg(a) {\n  null === zg ? zg = [a] : zg.push(a);\n}\nvar Kg = ua.ReactCurrentBatchConfig;\nfunction Lg(a, b) {\n  if (a && a.defaultProps) {\n    b = A({}, b);\n    a = a.defaultProps;\n    for (var c in a) void 0 === b[c] && (b[c] = a[c]);\n    return b;\n  }\n  return b;\n}\nvar Mg = Uf(null),\n  Ng = null,\n  Og = null,\n  Pg = null;\nfunction Qg() {\n  Pg = Og = Ng = null;\n}\nfunction Rg(a) {\n  var b = Mg.current;\n  E(Mg);\n  a._currentValue = b;\n}\nfunction Sg(a, b, c) {\n  for (; null !== a;) {\n    var d = a.alternate;\n    (a.childLanes & b) !== b ? (a.childLanes |= b, null !== d && (d.childLanes |= b)) : null !== d && (d.childLanes & b) !== b && (d.childLanes |= b);\n    if (a === c) break;\n    a = a.return;\n  }\n}\nfunction Tg(a, b) {\n  Ng = a;\n  Pg = Og = null;\n  a = a.dependencies;\n  null !== a && null !== a.firstContext && (0 !== (a.lanes & b) && (Ug = !0), a.firstContext = null);\n}\nfunction Vg(a) {\n  var b = a._currentValue;\n  if (Pg !== a) if (a = {\n    context: a,\n    memoizedValue: b,\n    next: null\n  }, null === Og) {\n    if (null === Ng) throw Error(p(308));\n    Og = a;\n    Ng.dependencies = {\n      lanes: 0,\n      firstContext: a\n    };\n  } else Og = Og.next = a;\n  return b;\n}\nvar Wg = null;\nfunction Xg(a) {\n  null === Wg ? Wg = [a] : Wg.push(a);\n}\nfunction Yg(a, b, c, d) {\n  var e = b.interleaved;\n  null === e ? (c.next = c, Xg(b)) : (c.next = e.next, e.next = c);\n  b.interleaved = c;\n  return Zg(a, d);\n}\nfunction Zg(a, b) {\n  a.lanes |= b;\n  var c = a.alternate;\n  null !== c && (c.lanes |= b);\n  c = a;\n  for (a = a.return; null !== a;) a.childLanes |= b, c = a.alternate, null !== c && (c.childLanes |= b), c = a, a = a.return;\n  return 3 === c.tag ? c.stateNode : null;\n}\nvar $g = !1;\nfunction ah(a) {\n  a.updateQueue = {\n    baseState: a.memoizedState,\n    firstBaseUpdate: null,\n    lastBaseUpdate: null,\n    shared: {\n      pending: null,\n      interleaved: null,\n      lanes: 0\n    },\n    effects: null\n  };\n}\nfunction bh(a, b) {\n  a = a.updateQueue;\n  b.updateQueue === a && (b.updateQueue = {\n    baseState: a.baseState,\n    firstBaseUpdate: a.firstBaseUpdate,\n    lastBaseUpdate: a.lastBaseUpdate,\n    shared: a.shared,\n    effects: a.effects\n  });\n}\nfunction ch(a, b) {\n  return {\n    eventTime: a,\n    lane: b,\n    tag: 0,\n    payload: null,\n    callback: null,\n    next: null\n  };\n}\nfunction dh(a, b, c) {\n  var d = a.updateQueue;\n  if (null === d) return null;\n  d = d.shared;\n  if (0 !== (K & 2)) {\n    var e = d.pending;\n    null === e ? b.next = b : (b.next = e.next, e.next = b);\n    d.pending = b;\n    return Zg(a, c);\n  }\n  e = d.interleaved;\n  null === e ? (b.next = b, Xg(d)) : (b.next = e.next, e.next = b);\n  d.interleaved = b;\n  return Zg(a, c);\n}\nfunction eh(a, b, c) {\n  b = b.updateQueue;\n  if (null !== b && (b = b.shared, 0 !== (c & 4194240))) {\n    var d = b.lanes;\n    d &= a.pendingLanes;\n    c |= d;\n    b.lanes = c;\n    Cc(a, c);\n  }\n}\nfunction fh(a, b) {\n  var c = a.updateQueue,\n    d = a.alternate;\n  if (null !== d && (d = d.updateQueue, c === d)) {\n    var e = null,\n      f = null;\n    c = c.firstBaseUpdate;\n    if (null !== c) {\n      do {\n        var g = {\n          eventTime: c.eventTime,\n          lane: c.lane,\n          tag: c.tag,\n          payload: c.payload,\n          callback: c.callback,\n          next: null\n        };\n        null === f ? e = f = g : f = f.next = g;\n        c = c.next;\n      } while (null !== c);\n      null === f ? e = f = b : f = f.next = b;\n    } else e = f = b;\n    c = {\n      baseState: d.baseState,\n      firstBaseUpdate: e,\n      lastBaseUpdate: f,\n      shared: d.shared,\n      effects: d.effects\n    };\n    a.updateQueue = c;\n    return;\n  }\n  a = c.lastBaseUpdate;\n  null === a ? c.firstBaseUpdate = b : a.next = b;\n  c.lastBaseUpdate = b;\n}\nfunction gh(a, b, c, d) {\n  var e = a.updateQueue;\n  $g = !1;\n  var f = e.firstBaseUpdate,\n    g = e.lastBaseUpdate,\n    h = e.shared.pending;\n  if (null !== h) {\n    e.shared.pending = null;\n    var k = h,\n      l = k.next;\n    k.next = null;\n    null === g ? f = l : g.next = l;\n    g = k;\n    var m = a.alternate;\n    null !== m && (m = m.updateQueue, h = m.lastBaseUpdate, h !== g && (null === h ? m.firstBaseUpdate = l : h.next = l, m.lastBaseUpdate = k));\n  }\n  if (null !== f) {\n    var q = e.baseState;\n    g = 0;\n    m = l = k = null;\n    h = f;\n    do {\n      var r = h.lane,\n        y = h.eventTime;\n      if ((d & r) === r) {\n        null !== m && (m = m.next = {\n          eventTime: y,\n          lane: 0,\n          tag: h.tag,\n          payload: h.payload,\n          callback: h.callback,\n          next: null\n        });\n        a: {\n          var n = a,\n            t = h;\n          r = b;\n          y = c;\n          switch (t.tag) {\n            case 1:\n              n = t.payload;\n              if ("function" === typeof n) {\n                q = n.call(y, q, r);\n                break a;\n              }\n              q = n;\n              break a;\n            case 3:\n              n.flags = n.flags & -65537 | 128;\n            case 0:\n              n = t.payload;\n              r = "function" === typeof n ? n.call(y, q, r) : n;\n              if (null === r || void 0 === r) break a;\n              q = A({}, q, r);\n              break a;\n            case 2:\n              $g = !0;\n          }\n        }\n        null !== h.callback && 0 !== h.lane && (a.flags |= 64, r = e.effects, null === r ? e.effects = [h] : r.push(h));\n      } else y = {\n        eventTime: y,\n        lane: r,\n        tag: h.tag,\n        payload: h.payload,\n        callback: h.callback,\n        next: null\n      }, null === m ? (l = m = y, k = q) : m = m.next = y, g |= r;\n      h = h.next;\n      if (null === h) if (h = e.shared.pending, null === h) break;else r = h, h = r.next, r.next = null, e.lastBaseUpdate = r, e.shared.pending = null;\n    } while (1);\n    null === m && (k = q);\n    e.baseState = k;\n    e.firstBaseUpdate = l;\n    e.lastBaseUpdate = m;\n    b = e.shared.interleaved;\n    if (null !== b) {\n      e = b;\n      do g |= e.lane, e = e.next; while (e !== b);\n    } else null === f && (e.shared.lanes = 0);\n    hh |= g;\n    a.lanes = g;\n    a.memoizedState = q;\n  }\n}\nfunction ih(a, b, c) {\n  a = b.effects;\n  b.effects = null;\n  if (null !== a) for (b = 0; b < a.length; b++) {\n    var d = a[b],\n      e = d.callback;\n    if (null !== e) {\n      d.callback = null;\n      d = c;\n      if ("function" !== typeof e) throw Error(p(191, e));\n      e.call(d);\n    }\n  }\n}\nvar jh = new aa.Component().refs;\nfunction kh(a, b, c, d) {\n  b = a.memoizedState;\n  c = c(d, b);\n  c = null === c || void 0 === c ? b : A({}, b, c);\n  a.memoizedState = c;\n  0 === a.lanes && (a.updateQueue.baseState = c);\n}\nvar nh = {\n  isMounted: function (a) {\n    return (a = a._reactInternals) ? Vb(a) === a : !1;\n  },\n  enqueueSetState: function (a, b, c) {\n    a = a._reactInternals;\n    var d = L(),\n      e = lh(a),\n      f = ch(d, e);\n    f.payload = b;\n    void 0 !== c && null !== c && (f.callback = c);\n    b = dh(a, f, e);\n    null !== b && (mh(b, a, e, d), eh(b, a, e));\n  },\n  enqueueReplaceState: function (a, b, c) {\n    a = a._reactInternals;\n    var d = L(),\n      e = lh(a),\n      f = ch(d, e);\n    f.tag = 1;\n    f.payload = b;\n    void 0 !== c && null !== c && (f.callback = c);\n    b = dh(a, f, e);\n    null !== b && (mh(b, a, e, d), eh(b, a, e));\n  },\n  enqueueForceUpdate: function (a, b) {\n    a = a._reactInternals;\n    var c = L(),\n      d = lh(a),\n      e = ch(c, d);\n    e.tag = 2;\n    void 0 !== b && null !== b && (e.callback = b);\n    b = dh(a, e, d);\n    null !== b && (mh(b, a, d, c), eh(b, a, d));\n  }\n};\nfunction oh(a, b, c, d, e, f, g) {\n  a = a.stateNode;\n  return "function" === typeof a.shouldComponentUpdate ? a.shouldComponentUpdate(d, f, g) : b.prototype && b.prototype.isPureReactComponent ? !Ie(c, d) || !Ie(e, f) : !0;\n}\nfunction ph(a, b, c) {\n  var d = !1,\n    e = Vf;\n  var f = b.contextType;\n  "object" === typeof f && null !== f ? f = Vg(f) : (e = Zf(b) ? Xf : H.current, d = b.contextTypes, f = (d = null !== d && void 0 !== d) ? Yf(a, e) : Vf);\n  b = new b(c, f);\n  a.memoizedState = null !== b.state && void 0 !== b.state ? b.state : null;\n  b.updater = nh;\n  a.stateNode = b;\n  b._reactInternals = a;\n  d && (a = a.stateNode, a.__reactInternalMemoizedUnmaskedChildContext = e, a.__reactInternalMemoizedMaskedChildContext = f);\n  return b;\n}\nfunction qh(a, b, c, d) {\n  a = b.state;\n  "function" === typeof b.componentWillReceiveProps && b.componentWillReceiveProps(c, d);\n  "function" === typeof b.UNSAFE_componentWillReceiveProps && b.UNSAFE_componentWillReceiveProps(c, d);\n  b.state !== a && nh.enqueueReplaceState(b, b.state, null);\n}\nfunction rh(a, b, c, d) {\n  var e = a.stateNode;\n  e.props = c;\n  e.state = a.memoizedState;\n  e.refs = jh;\n  ah(a);\n  var f = b.contextType;\n  "object" === typeof f && null !== f ? e.context = Vg(f) : (f = Zf(b) ? Xf : H.current, e.context = Yf(a, f));\n  e.state = a.memoizedState;\n  f = b.getDerivedStateFromProps;\n  "function" === typeof f && (kh(a, b, f, c), e.state = a.memoizedState);\n  "function" === typeof b.getDerivedStateFromProps || "function" === typeof e.getSnapshotBeforeUpdate || "function" !== typeof e.UNSAFE_componentWillMount && "function" !== typeof e.componentWillMount || (b = e.state, "function" === typeof e.componentWillMount && e.componentWillMount(), "function" === typeof e.UNSAFE_componentWillMount && e.UNSAFE_componentWillMount(), b !== e.state && nh.enqueueReplaceState(e, e.state, null), gh(a, c, e, d), e.state = a.memoizedState);\n  "function" === typeof e.componentDidMount && (a.flags |= 4194308);\n}\nfunction sh(a, b, c) {\n  a = c.ref;\n  if (null !== a && "function" !== typeof a && "object" !== typeof a) {\n    if (c._owner) {\n      c = c._owner;\n      if (c) {\n        if (1 !== c.tag) throw Error(p(309));\n        var d = c.stateNode;\n      }\n      if (!d) throw Error(p(147, a));\n      var e = d,\n        f = "" + a;\n      if (null !== b && null !== b.ref && "function" === typeof b.ref && b.ref._stringRef === f) return b.ref;\n      b = function (a) {\n        var b = e.refs;\n        b === jh && (b = e.refs = {});\n        null === a ? delete b[f] : b[f] = a;\n      };\n      b._stringRef = f;\n      return b;\n    }\n    if ("string" !== typeof a) throw Error(p(284));\n    if (!c._owner) throw Error(p(290, a));\n  }\n  return a;\n}\nfunction th(a, b) {\n  a = Object.prototype.toString.call(b);\n  throw Error(p(31, "[object Object]" === a ? "object with keys {" + Object.keys(b).join(", ") + "}" : a));\n}\nfunction uh(a) {\n  var b = a._init;\n  return b(a._payload);\n}\nfunction vh(a) {\n  function b(b, c) {\n    if (a) {\n      var d = b.deletions;\n      null === d ? (b.deletions = [c], b.flags |= 16) : d.push(c);\n    }\n  }\n  function c(c, d) {\n    if (!a) return null;\n    for (; null !== d;) b(c, d), d = d.sibling;\n    return null;\n  }\n  function d(a, b) {\n    for (a = new Map(); null !== b;) null !== b.key ? a.set(b.key, b) : a.set(b.index, b), b = b.sibling;\n    return a;\n  }\n  function e(a, b) {\n    a = wh(a, b);\n    a.index = 0;\n    a.sibling = null;\n    return a;\n  }\n  function f(b, c, d) {\n    b.index = d;\n    if (!a) return b.flags |= 1048576, c;\n    d = b.alternate;\n    if (null !== d) return d = d.index, d < c ? (b.flags |= 2, c) : d;\n    b.flags |= 2;\n    return c;\n  }\n  function g(b) {\n    a && null === b.alternate && (b.flags |= 2);\n    return b;\n  }\n  function h(a, b, c, d) {\n    if (null === b || 6 !== b.tag) return b = xh(c, a.mode, d), b.return = a, b;\n    b = e(b, c);\n    b.return = a;\n    return b;\n  }\n  function k(a, b, c, d) {\n    var f = c.type;\n    if (f === ya) return m(a, b, c.props.children, d, c.key);\n    if (null !== b && (b.elementType === f || "object" === typeof f && null !== f && f.$$typeof === Ha && uh(f) === b.type)) return d = e(b, c.props), d.ref = sh(a, b, c), d.return = a, d;\n    d = yh(c.type, c.key, c.props, null, a.mode, d);\n    d.ref = sh(a, b, c);\n    d.return = a;\n    return d;\n  }\n  function l(a, b, c, d) {\n    if (null === b || 4 !== b.tag || b.stateNode.containerInfo !== c.containerInfo || b.stateNode.implementation !== c.implementation) return b = zh(c, a.mode, d), b.return = a, b;\n    b = e(b, c.children || []);\n    b.return = a;\n    return b;\n  }\n  function m(a, b, c, d, f) {\n    if (null === b || 7 !== b.tag) return b = Ah(c, a.mode, d, f), b.return = a, b;\n    b = e(b, c);\n    b.return = a;\n    return b;\n  }\n  function q(a, b, c) {\n    if ("string" === typeof b && "" !== b || "number" === typeof b) return b = xh("" + b, a.mode, c), b.return = a, b;\n    if ("object" === typeof b && null !== b) {\n      switch (b.$$typeof) {\n        case va:\n          return c = yh(b.type, b.key, b.props, null, a.mode, c), c.ref = sh(a, null, b), c.return = a, c;\n        case wa:\n          return b = zh(b, a.mode, c), b.return = a, b;\n        case Ha:\n          var d = b._init;\n          return q(a, d(b._payload), c);\n      }\n      if (eb(b) || Ka(b)) return b = Ah(b, a.mode, c, null), b.return = a, b;\n      th(a, b);\n    }\n    return null;\n  }\n  function r(a, b, c, d) {\n    var e = null !== b ? b.key : null;\n    if ("string" === typeof c && "" !== c || "number" === typeof c) return null !== e ? null : h(a, b, "" + c, d);\n    if ("object" === typeof c && null !== c) {\n      switch (c.$$typeof) {\n        case va:\n          return c.key === e ? k(a, b, c, d) : null;\n        case wa:\n          return c.key === e ? l(a, b, c, d) : null;\n        case Ha:\n          return e = c._init, r(a, b, e(c._payload), d);\n      }\n      if (eb(c) || Ka(c)) return null !== e ? null : m(a, b, c, d, null);\n      th(a, c);\n    }\n    return null;\n  }\n  function y(a, b, c, d, e) {\n    if ("string" === typeof d && "" !== d || "number" === typeof d) return a = a.get(c) || null, h(b, a, "" + d, e);\n    if ("object" === typeof d && null !== d) {\n      switch (d.$$typeof) {\n        case va:\n          return a = a.get(null === d.key ? c : d.key) || null, k(b, a, d, e);\n        case wa:\n          return a = a.get(null === d.key ? c : d.key) || null, l(b, a, d, e);\n        case Ha:\n          var f = d._init;\n          return y(a, b, c, f(d._payload), e);\n      }\n      if (eb(d) || Ka(d)) return a = a.get(c) || null, m(b, a, d, e, null);\n      th(b, d);\n    }\n    return null;\n  }\n  function n(e, g, h, k) {\n    for (var l = null, m = null, u = g, w = g = 0, x = null; null !== u && w < h.length; w++) {\n      u.index > w ? (x = u, u = null) : x = u.sibling;\n      var n = r(e, u, h[w], k);\n      if (null === n) {\n        null === u && (u = x);\n        break;\n      }\n      a && u && null === n.alternate && b(e, u);\n      g = f(n, g, w);\n      null === m ? l = n : m.sibling = n;\n      m = n;\n      u = x;\n    }\n    if (w === h.length) return c(e, u), I && tg(e, w), l;\n    if (null === u) {\n      for (; w < h.length; w++) u = q(e, h[w], k), null !== u && (g = f(u, g, w), null === m ? l = u : m.sibling = u, m = u);\n      I && tg(e, w);\n      return l;\n    }\n    for (u = d(e, u); w < h.length; w++) x = y(u, e, w, h[w], k), null !== x && (a && null !== x.alternate && u.delete(null === x.key ? w : x.key), g = f(x, g, w), null === m ? l = x : m.sibling = x, m = x);\n    a && u.forEach(function (a) {\n      return b(e, a);\n    });\n    I && tg(e, w);\n    return l;\n  }\n  function t(e, g, h, k) {\n    var l = Ka(h);\n    if ("function" !== typeof l) throw Error(p(150));\n    h = l.call(h);\n    if (null == h) throw Error(p(151));\n    for (var u = l = null, m = g, w = g = 0, x = null, n = h.next(); null !== m && !n.done; w++, n = h.next()) {\n      m.index > w ? (x = m, m = null) : x = m.sibling;\n      var t = r(e, m, n.value, k);\n      if (null === t) {\n        null === m && (m = x);\n        break;\n      }\n      a && m && null === t.alternate && b(e, m);\n      g = f(t, g, w);\n      null === u ? l = t : u.sibling = t;\n      u = t;\n      m = x;\n    }\n    if (n.done) return c(e, m), I && tg(e, w), l;\n    if (null === m) {\n      for (; !n.done; w++, n = h.next()) n = q(e, n.value, k), null !== n && (g = f(n, g, w), null === u ? l = n : u.sibling = n, u = n);\n      I && tg(e, w);\n      return l;\n    }\n    for (m = d(e, m); !n.done; w++, n = h.next()) n = y(m, e, w, n.value, k), null !== n && (a && null !== n.alternate && m.delete(null === n.key ? w : n.key), g = f(n, g, w), null === u ? l = n : u.sibling = n, u = n);\n    a && m.forEach(function (a) {\n      return b(e, a);\n    });\n    I && tg(e, w);\n    return l;\n  }\n  function J(a, d, f, h) {\n    "object" === typeof f && null !== f && f.type === ya && null === f.key && (f = f.props.children);\n    if ("object" === typeof f && null !== f) {\n      switch (f.$$typeof) {\n        case va:\n          a: {\n            for (var k = f.key, l = d; null !== l;) {\n              if (l.key === k) {\n                k = f.type;\n                if (k === ya) {\n                  if (7 === l.tag) {\n                    c(a, l.sibling);\n                    d = e(l, f.props.children);\n                    d.return = a;\n                    a = d;\n                    break a;\n                  }\n                } else if (l.elementType === k || "object" === typeof k && null !== k && k.$$typeof === Ha && uh(k) === l.type) {\n                  c(a, l.sibling);\n                  d = e(l, f.props);\n                  d.ref = sh(a, l, f);\n                  d.return = a;\n                  a = d;\n                  break a;\n                }\n                c(a, l);\n                break;\n              } else b(a, l);\n              l = l.sibling;\n            }\n            f.type === ya ? (d = Ah(f.props.children, a.mode, h, f.key), d.return = a, a = d) : (h = yh(f.type, f.key, f.props, null, a.mode, h), h.ref = sh(a, d, f), h.return = a, a = h);\n          }\n          return g(a);\n        case wa:\n          a: {\n            for (l = f.key; null !== d;) {\n              if (d.key === l) {\n                if (4 === d.tag && d.stateNode.containerInfo === f.containerInfo && d.stateNode.implementation === f.implementation) {\n                  c(a, d.sibling);\n                  d = e(d, f.children || []);\n                  d.return = a;\n                  a = d;\n                  break a;\n                } else {\n                  c(a, d);\n                  break;\n                }\n              } else b(a, d);\n              d = d.sibling;\n            }\n            d = zh(f, a.mode, h);\n            d.return = a;\n            a = d;\n          }\n          return g(a);\n        case Ha:\n          return l = f._init, J(a, d, l(f._payload), h);\n      }\n      if (eb(f)) return n(a, d, f, h);\n      if (Ka(f)) return t(a, d, f, h);\n      th(a, f);\n    }\n    return "string" === typeof f && "" !== f || "number" === typeof f ? (f = "" + f, null !== d && 6 === d.tag ? (c(a, d.sibling), d = e(d, f), d.return = a, a = d) : (c(a, d), d = xh(f, a.mode, h), d.return = a, a = d), g(a)) : c(a, d);\n  }\n  return J;\n}\nvar Bh = vh(!0),\n  Ch = vh(!1),\n  Dh = {},\n  Eh = Uf(Dh),\n  Fh = Uf(Dh),\n  Gh = Uf(Dh);\nfunction Hh(a) {\n  if (a === Dh) throw Error(p(174));\n  return a;\n}\nfunction Ih(a, b) {\n  G(Gh, b);\n  G(Fh, a);\n  G(Eh, Dh);\n  a = b.nodeType;\n  switch (a) {\n    case 9:\n    case 11:\n      b = (b = b.documentElement) ? b.namespaceURI : lb(null, "");\n      break;\n    default:\n      a = 8 === a ? b.parentNode : b, b = a.namespaceURI || null, a = a.tagName, b = lb(b, a);\n  }\n  E(Eh);\n  G(Eh, b);\n}\nfunction Jh() {\n  E(Eh);\n  E(Fh);\n  E(Gh);\n}\nfunction Kh(a) {\n  Hh(Gh.current);\n  var b = Hh(Eh.current);\n  var c = lb(b, a.type);\n  b !== c && (G(Fh, a), G(Eh, c));\n}\nfunction Lh(a) {\n  Fh.current === a && (E(Eh), E(Fh));\n}\nvar M = Uf(0);\nfunction Mh(a) {\n  for (var b = a; null !== b;) {\n    if (13 === b.tag) {\n      var c = b.memoizedState;\n      if (null !== c && (c = c.dehydrated, null === c || "$?" === c.data || "$!" === c.data)) return b;\n    } else if (19 === b.tag && void 0 !== b.memoizedProps.revealOrder) {\n      if (0 !== (b.flags & 128)) return b;\n    } else if (null !== b.child) {\n      b.child.return = b;\n      b = b.child;\n      continue;\n    }\n    if (b === a) break;\n    for (; null === b.sibling;) {\n      if (null === b.return || b.return === a) return null;\n      b = b.return;\n    }\n    b.sibling.return = b.return;\n    b = b.sibling;\n  }\n  return null;\n}\nvar Nh = [];\nfunction Oh() {\n  for (var a = 0; a < Nh.length; a++) Nh[a]._workInProgressVersionPrimary = null;\n  Nh.length = 0;\n}\nvar Ph = ua.ReactCurrentDispatcher,\n  Qh = ua.ReactCurrentBatchConfig,\n  Rh = 0,\n  N = null,\n  O = null,\n  P = null,\n  Sh = !1,\n  Th = !1,\n  Uh = 0,\n  Vh = 0;\nfunction Q() {\n  throw Error(p(321));\n}\nfunction Wh(a, b) {\n  if (null === b) return !1;\n  for (var c = 0; c < b.length && c < a.length; c++) if (!He(a[c], b[c])) return !1;\n  return !0;\n}\nfunction Xh(a, b, c, d, e, f) {\n  Rh = f;\n  N = b;\n  b.memoizedState = null;\n  b.updateQueue = null;\n  b.lanes = 0;\n  Ph.current = null === a || null === a.memoizedState ? Yh : Zh;\n  a = c(d, e);\n  if (Th) {\n    f = 0;\n    do {\n      Th = !1;\n      Uh = 0;\n      if (25 <= f) throw Error(p(301));\n      f += 1;\n      P = O = null;\n      b.updateQueue = null;\n      Ph.current = $h;\n      a = c(d, e);\n    } while (Th);\n  }\n  Ph.current = ai;\n  b = null !== O && null !== O.next;\n  Rh = 0;\n  P = O = N = null;\n  Sh = !1;\n  if (b) throw Error(p(300));\n  return a;\n}\nfunction bi() {\n  var a = 0 !== Uh;\n  Uh = 0;\n  return a;\n}\nfunction ci() {\n  var a = {\n    memoizedState: null,\n    baseState: null,\n    baseQueue: null,\n    queue: null,\n    next: null\n  };\n  null === P ? N.memoizedState = P = a : P = P.next = a;\n  return P;\n}\nfunction di() {\n  if (null === O) {\n    var a = N.alternate;\n    a = null !== a ? a.memoizedState : null;\n  } else a = O.next;\n  var b = null === P ? N.memoizedState : P.next;\n  if (null !== b) P = b, O = a;else {\n    if (null === a) throw Error(p(310));\n    O = a;\n    a = {\n      memoizedState: O.memoizedState,\n      baseState: O.baseState,\n      baseQueue: O.baseQueue,\n      queue: O.queue,\n      next: null\n    };\n    null === P ? N.memoizedState = P = a : P = P.next = a;\n  }\n  return P;\n}\nfunction ei(a, b) {\n  return "function" === typeof b ? b(a) : b;\n}\nfunction fi(a) {\n  var b = di(),\n    c = b.queue;\n  if (null === c) throw Error(p(311));\n  c.lastRenderedReducer = a;\n  var d = O,\n    e = d.baseQueue,\n    f = c.pending;\n  if (null !== f) {\n    if (null !== e) {\n      var g = e.next;\n      e.next = f.next;\n      f.next = g;\n    }\n    d.baseQueue = e = f;\n    c.pending = null;\n  }\n  if (null !== e) {\n    f = e.next;\n    d = d.baseState;\n    var h = g = null,\n      k = null,\n      l = f;\n    do {\n      var m = l.lane;\n      if ((Rh & m) === m) null !== k && (k = k.next = {\n        lane: 0,\n        action: l.action,\n        hasEagerState: l.hasEagerState,\n        eagerState: l.eagerState,\n        next: null\n      }), d = l.hasEagerState ? l.eagerState : a(d, l.action);else {\n        var q = {\n          lane: m,\n          action: l.action,\n          hasEagerState: l.hasEagerState,\n          eagerState: l.eagerState,\n          next: null\n        };\n        null === k ? (h = k = q, g = d) : k = k.next = q;\n        N.lanes |= m;\n        hh |= m;\n      }\n      l = l.next;\n    } while (null !== l && l !== f);\n    null === k ? g = d : k.next = h;\n    He(d, b.memoizedState) || (Ug = !0);\n    b.memoizedState = d;\n    b.baseState = g;\n    b.baseQueue = k;\n    c.lastRenderedState = d;\n  }\n  a = c.interleaved;\n  if (null !== a) {\n    e = a;\n    do f = e.lane, N.lanes |= f, hh |= f, e = e.next; while (e !== a);\n  } else null === e && (c.lanes = 0);\n  return [b.memoizedState, c.dispatch];\n}\nfunction gi(a) {\n  var b = di(),\n    c = b.queue;\n  if (null === c) throw Error(p(311));\n  c.lastRenderedReducer = a;\n  var d = c.dispatch,\n    e = c.pending,\n    f = b.memoizedState;\n  if (null !== e) {\n    c.pending = null;\n    var g = e = e.next;\n    do f = a(f, g.action), g = g.next; while (g !== e);\n    He(f, b.memoizedState) || (Ug = !0);\n    b.memoizedState = f;\n    null === b.baseQueue && (b.baseState = f);\n    c.lastRenderedState = f;\n  }\n  return [f, d];\n}\nfunction hi() {}\nfunction ii(a, b) {\n  var c = N,\n    d = di(),\n    e = b(),\n    f = !He(d.memoizedState, e);\n  f && (d.memoizedState = e, Ug = !0);\n  d = d.queue;\n  ji(ki.bind(null, c, d, a), [a]);\n  if (d.getSnapshot !== b || f || null !== P && P.memoizedState.tag & 1) {\n    c.flags |= 2048;\n    li(9, mi.bind(null, c, d, e, b), void 0, null);\n    if (null === R) throw Error(p(349));\n    0 !== (Rh & 30) || ni(c, b, e);\n  }\n  return e;\n}\nfunction ni(a, b, c) {\n  a.flags |= 16384;\n  a = {\n    getSnapshot: b,\n    value: c\n  };\n  b = N.updateQueue;\n  null === b ? (b = {\n    lastEffect: null,\n    stores: null\n  }, N.updateQueue = b, b.stores = [a]) : (c = b.stores, null === c ? b.stores = [a] : c.push(a));\n}\nfunction mi(a, b, c, d) {\n  b.value = c;\n  b.getSnapshot = d;\n  oi(b) && pi(a);\n}\nfunction ki(a, b, c) {\n  return c(function () {\n    oi(b) && pi(a);\n  });\n}\nfunction oi(a) {\n  var b = a.getSnapshot;\n  a = a.value;\n  try {\n    var c = b();\n    return !He(a, c);\n  } catch (d) {\n    return !0;\n  }\n}\nfunction pi(a) {\n  var b = Zg(a, 1);\n  null !== b && mh(b, a, 1, -1);\n}\nfunction qi(a) {\n  var b = ci();\n  "function" === typeof a && (a = a());\n  b.memoizedState = b.baseState = a;\n  a = {\n    pending: null,\n    interleaved: null,\n    lanes: 0,\n    dispatch: null,\n    lastRenderedReducer: ei,\n    lastRenderedState: a\n  };\n  b.queue = a;\n  a = a.dispatch = ri.bind(null, N, a);\n  return [b.memoizedState, a];\n}\nfunction li(a, b, c, d) {\n  a = {\n    tag: a,\n    create: b,\n    destroy: c,\n    deps: d,\n    next: null\n  };\n  b = N.updateQueue;\n  null === b ? (b = {\n    lastEffect: null,\n    stores: null\n  }, N.updateQueue = b, b.lastEffect = a.next = a) : (c = b.lastEffect, null === c ? b.lastEffect = a.next = a : (d = c.next, c.next = a, a.next = d, b.lastEffect = a));\n  return a;\n}\nfunction si() {\n  return di().memoizedState;\n}\nfunction ti(a, b, c, d) {\n  var e = ci();\n  N.flags |= a;\n  e.memoizedState = li(1 | b, c, void 0, void 0 === d ? null : d);\n}\nfunction ui(a, b, c, d) {\n  var e = di();\n  d = void 0 === d ? null : d;\n  var f = void 0;\n  if (null !== O) {\n    var g = O.memoizedState;\n    f = g.destroy;\n    if (null !== d && Wh(d, g.deps)) {\n      e.memoizedState = li(b, c, f, d);\n      return;\n    }\n  }\n  N.flags |= a;\n  e.memoizedState = li(1 | b, c, f, d);\n}\nfunction vi(a, b) {\n  return ti(8390656, 8, a, b);\n}\nfunction ji(a, b) {\n  return ui(2048, 8, a, b);\n}\nfunction wi(a, b) {\n  return ui(4, 2, a, b);\n}\nfunction xi(a, b) {\n  return ui(4, 4, a, b);\n}\nfunction yi(a, b) {\n  if ("function" === typeof b) return a = a(), b(a), function () {\n    b(null);\n  };\n  if (null !== b && void 0 !== b) return a = a(), b.current = a, function () {\n    b.current = null;\n  };\n}\nfunction zi(a, b, c) {\n  c = null !== c && void 0 !== c ? c.concat([a]) : null;\n  return ui(4, 4, yi.bind(null, b, a), c);\n}\nfunction Ai() {}\nfunction Bi(a, b) {\n  var c = di();\n  b = void 0 === b ? null : b;\n  var d = c.memoizedState;\n  if (null !== d && null !== b && Wh(b, d[1])) return d[0];\n  c.memoizedState = [a, b];\n  return a;\n}\nfunction Ci(a, b) {\n  var c = di();\n  b = void 0 === b ? null : b;\n  var d = c.memoizedState;\n  if (null !== d && null !== b && Wh(b, d[1])) return d[0];\n  a = a();\n  c.memoizedState = [a, b];\n  return a;\n}\nfunction Di(a, b, c) {\n  if (0 === (Rh & 21)) return a.baseState && (a.baseState = !1, Ug = !0), a.memoizedState = c;\n  He(c, b) || (c = yc(), N.lanes |= c, hh |= c, a.baseState = !0);\n  return b;\n}\nfunction Ei(a, b) {\n  var c = C;\n  C = 0 !== c && 4 > c ? c : 4;\n  a(!0);\n  var d = Qh.transition;\n  Qh.transition = {};\n  try {\n    a(!1), b();\n  } finally {\n    C = c, Qh.transition = d;\n  }\n}\nfunction Fi() {\n  return di().memoizedState;\n}\nfunction Gi(a, b, c) {\n  var d = lh(a);\n  c = {\n    lane: d,\n    action: c,\n    hasEagerState: !1,\n    eagerState: null,\n    next: null\n  };\n  if (Hi(a)) Ii(b, c);else if (c = Yg(a, b, c, d), null !== c) {\n    var e = L();\n    mh(c, a, d, e);\n    Ji(c, b, d);\n  }\n}\nfunction ri(a, b, c) {\n  var d = lh(a),\n    e = {\n      lane: d,\n      action: c,\n      hasEagerState: !1,\n      eagerState: null,\n      next: null\n    };\n  if (Hi(a)) Ii(b, e);else {\n    var f = a.alternate;\n    if (0 === a.lanes && (null === f || 0 === f.lanes) && (f = b.lastRenderedReducer, null !== f)) try {\n      var g = b.lastRenderedState,\n        h = f(g, c);\n      e.hasEagerState = !0;\n      e.eagerState = h;\n      if (He(h, g)) {\n        var k = b.interleaved;\n        null === k ? (e.next = e, Xg(b)) : (e.next = k.next, k.next = e);\n        b.interleaved = e;\n        return;\n      }\n    } catch (l) {} finally {}\n    c = Yg(a, b, e, d);\n    null !== c && (e = L(), mh(c, a, d, e), Ji(c, b, d));\n  }\n}\nfunction Hi(a) {\n  var b = a.alternate;\n  return a === N || null !== b && b === N;\n}\nfunction Ii(a, b) {\n  Th = Sh = !0;\n  var c = a.pending;\n  null === c ? b.next = b : (b.next = c.next, c.next = b);\n  a.pending = b;\n}\nfunction Ji(a, b, c) {\n  if (0 !== (c & 4194240)) {\n    var d = b.lanes;\n    d &= a.pendingLanes;\n    c |= d;\n    b.lanes = c;\n    Cc(a, c);\n  }\n}\nvar ai = {\n    readContext: Vg,\n    useCallback: Q,\n    useContext: Q,\n    useEffect: Q,\n    useImperativeHandle: Q,\n    useInsertionEffect: Q,\n    useLayoutEffect: Q,\n    useMemo: Q,\n    useReducer: Q,\n    useRef: Q,\n    useState: Q,\n    useDebugValue: Q,\n    useDeferredValue: Q,\n    useTransition: Q,\n    useMutableSource: Q,\n    useSyncExternalStore: Q,\n    useId: Q,\n    unstable_isNewReconciler: !1\n  },\n  Yh = {\n    readContext: Vg,\n    useCallback: function (a, b) {\n      ci().memoizedState = [a, void 0 === b ? null : b];\n      return a;\n    },\n    useContext: Vg,\n    useEffect: vi,\n    useImperativeHandle: function (a, b, c) {\n      c = null !== c && void 0 !== c ? c.concat([a]) : null;\n      return ti(4194308, 4, yi.bind(null, b, a), c);\n    },\n    useLayoutEffect: function (a, b) {\n      return ti(4194308, 4, a, b);\n    },\n    useInsertionEffect: function (a, b) {\n      return ti(4, 2, a, b);\n    },\n    useMemo: function (a, b) {\n      var c = ci();\n      b = void 0 === b ? null : b;\n      a = a();\n      c.memoizedState = [a, b];\n      return a;\n    },\n    useReducer: function (a, b, c) {\n      var d = ci();\n      b = void 0 !== c ? c(b) : b;\n      d.memoizedState = d.baseState = b;\n      a = {\n        pending: null,\n        interleaved: null,\n        lanes: 0,\n        dispatch: null,\n        lastRenderedReducer: a,\n        lastRenderedState: b\n      };\n      d.queue = a;\n      a = a.dispatch = Gi.bind(null, N, a);\n      return [d.memoizedState, a];\n    },\n    useRef: function (a) {\n      var b = ci();\n      a = {\n        current: a\n      };\n      return b.memoizedState = a;\n    },\n    useState: qi,\n    useDebugValue: Ai,\n    useDeferredValue: function (a) {\n      return ci().memoizedState = a;\n    },\n    useTransition: function () {\n      var a = qi(!1),\n        b = a[0];\n      a = Ei.bind(null, a[1]);\n      ci().memoizedState = a;\n      return [b, a];\n    },\n    useMutableSource: function () {},\n    useSyncExternalStore: function (a, b, c) {\n      var d = N,\n        e = ci();\n      if (I) {\n        if (void 0 === c) throw Error(p(407));\n        c = c();\n      } else {\n        c = b();\n        if (null === R) throw Error(p(349));\n        0 !== (Rh & 30) || ni(d, b, c);\n      }\n      e.memoizedState = c;\n      var f = {\n        value: c,\n        getSnapshot: b\n      };\n      e.queue = f;\n      vi(ki.bind(null, d, f, a), [a]);\n      d.flags |= 2048;\n      li(9, mi.bind(null, d, f, c, b), void 0, null);\n      return c;\n    },\n    useId: function () {\n      var a = ci(),\n        b = R.identifierPrefix;\n      if (I) {\n        var c = sg;\n        var d = rg;\n        c = (d & ~(1 << 32 - oc(d) - 1)).toString(32) + c;\n        b = ":" + b + "R" + c;\n        c = Uh++;\n        0 < c && (b += "H" + c.toString(32));\n        b += ":";\n      } else c = Vh++, b = ":" + b + "r" + c.toString(32) + ":";\n      return a.memoizedState = b;\n    },\n    unstable_isNewReconciler: !1\n  },\n  Zh = {\n    readContext: Vg,\n    useCallback: Bi,\n    useContext: Vg,\n    useEffect: ji,\n    useImperativeHandle: zi,\n    useInsertionEffect: wi,\n    useLayoutEffect: xi,\n    useMemo: Ci,\n    useReducer: fi,\n    useRef: si,\n    useState: function () {\n      return fi(ei);\n    },\n    useDebugValue: Ai,\n    useDeferredValue: function (a) {\n      var b = di();\n      return Di(b, O.memoizedState, a);\n    },\n    useTransition: function () {\n      var a = fi(ei)[0],\n        b = di().memoizedState;\n      return [a, b];\n    },\n    useMutableSource: hi,\n    useSyncExternalStore: ii,\n    useId: Fi,\n    unstable_isNewReconciler: !1\n  },\n  $h = {\n    readContext: Vg,\n    useCallback: Bi,\n    useContext: Vg,\n    useEffect: ji,\n    useImperativeHandle: zi,\n    useInsertionEffect: wi,\n    useLayoutEffect: xi,\n    useMemo: Ci,\n    useReducer: gi,\n    useRef: si,\n    useState: function () {\n      return gi(ei);\n    },\n    useDebugValue: Ai,\n    useDeferredValue: function (a) {\n      var b = di();\n      return null === O ? b.memoizedState = a : Di(b, O.memoizedState, a);\n    },\n    useTransition: function () {\n      var a = gi(ei)[0],\n        b = di().memoizedState;\n      return [a, b];\n    },\n    useMutableSource: hi,\n    useSyncExternalStore: ii,\n    useId: Fi,\n    unstable_isNewReconciler: !1\n  };\nfunction Ki(a, b) {\n  try {\n    var c = "",\n      d = b;\n    do c += Pa(d), d = d.return; while (d);\n    var e = c;\n  } catch (f) {\n    e = "\\nError generating stack: " + f.message + "\\n" + f.stack;\n  }\n  return {\n    value: a,\n    source: b,\n    stack: e,\n    digest: null\n  };\n}\nfunction Li(a, b, c) {\n  return {\n    value: a,\n    source: null,\n    stack: null != c ? c : null,\n    digest: null != b ? b : null\n  };\n}\nfunction Mi(a, b) {\n  try {\n    console.error(b.value);\n  } catch (c) {\n    setTimeout(function () {\n      throw c;\n    });\n  }\n}\nvar Ni = "function" === typeof WeakMap ? WeakMap : Map;\nfunction Oi(a, b, c) {\n  c = ch(-1, c);\n  c.tag = 3;\n  c.payload = {\n    element: null\n  };\n  var d = b.value;\n  c.callback = function () {\n    Pi || (Pi = !0, Qi = d);\n    Mi(a, b);\n  };\n  return c;\n}\nfunction Ri(a, b, c) {\n  c = ch(-1, c);\n  c.tag = 3;\n  var d = a.type.getDerivedStateFromError;\n  if ("function" === typeof d) {\n    var e = b.value;\n    c.payload = function () {\n      return d(e);\n    };\n    c.callback = function () {\n      Mi(a, b);\n    };\n  }\n  var f = a.stateNode;\n  null !== f && "function" === typeof f.componentDidCatch && (c.callback = function () {\n    Mi(a, b);\n    "function" !== typeof d && (null === Si ? Si = new Set([this]) : Si.add(this));\n    var c = b.stack;\n    this.componentDidCatch(b.value, {\n      componentStack: null !== c ? c : ""\n    });\n  });\n  return c;\n}\nfunction Ti(a, b, c) {\n  var d = a.pingCache;\n  if (null === d) {\n    d = a.pingCache = new Ni();\n    var e = new Set();\n    d.set(b, e);\n  } else e = d.get(b), void 0 === e && (e = new Set(), d.set(b, e));\n  e.has(c) || (e.add(c), a = Ui.bind(null, a, b, c), b.then(a, a));\n}\nfunction Vi(a) {\n  do {\n    var b;\n    if (b = 13 === a.tag) b = a.memoizedState, b = null !== b ? null !== b.dehydrated ? !0 : !1 : !0;\n    if (b) return a;\n    a = a.return;\n  } while (null !== a);\n  return null;\n}\nfunction Wi(a, b, c, d, e) {\n  if (0 === (a.mode & 1)) return a === b ? a.flags |= 65536 : (a.flags |= 128, c.flags |= 131072, c.flags &= -52805, 1 === c.tag && (null === c.alternate ? c.tag = 17 : (b = ch(-1, 1), b.tag = 2, dh(c, b, 1))), c.lanes |= 1), a;\n  a.flags |= 65536;\n  a.lanes = e;\n  return a;\n}\nvar Xi = ua.ReactCurrentOwner,\n  Ug = !1;\nfunction Yi(a, b, c, d) {\n  b.child = null === a ? Ch(b, null, c, d) : Bh(b, a.child, c, d);\n}\nfunction Zi(a, b, c, d, e) {\n  c = c.render;\n  var f = b.ref;\n  Tg(b, e);\n  d = Xh(a, b, c, d, f, e);\n  c = bi();\n  if (null !== a && !Ug) return b.updateQueue = a.updateQueue, b.flags &= -2053, a.lanes &= ~e, $i(a, b, e);\n  I && c && vg(b);\n  b.flags |= 1;\n  Yi(a, b, d, e);\n  return b.child;\n}\nfunction aj(a, b, c, d, e) {\n  if (null === a) {\n    var f = c.type;\n    if ("function" === typeof f && !bj(f) && void 0 === f.defaultProps && null === c.compare && void 0 === c.defaultProps) return b.tag = 15, b.type = f, cj(a, b, f, d, e);\n    a = yh(c.type, null, d, b, b.mode, e);\n    a.ref = b.ref;\n    a.return = b;\n    return b.child = a;\n  }\n  f = a.child;\n  if (0 === (a.lanes & e)) {\n    var g = f.memoizedProps;\n    c = c.compare;\n    c = null !== c ? c : Ie;\n    if (c(g, d) && a.ref === b.ref) return $i(a, b, e);\n  }\n  b.flags |= 1;\n  a = wh(f, d);\n  a.ref = b.ref;\n  a.return = b;\n  return b.child = a;\n}\nfunction cj(a, b, c, d, e) {\n  if (null !== a) {\n    var f = a.memoizedProps;\n    if (Ie(f, d) && a.ref === b.ref) if (Ug = !1, b.pendingProps = d = f, 0 !== (a.lanes & e)) 0 !== (a.flags & 131072) && (Ug = !0);else return b.lanes = a.lanes, $i(a, b, e);\n  }\n  return dj(a, b, c, d, e);\n}\nfunction ej(a, b, c) {\n  var d = b.pendingProps,\n    e = d.children,\n    f = null !== a ? a.memoizedState : null;\n  if ("hidden" === d.mode) {\n    if (0 === (b.mode & 1)) b.memoizedState = {\n      baseLanes: 0,\n      cachePool: null,\n      transitions: null\n    }, G(fj, gj), gj |= c;else {\n      if (0 === (c & 1073741824)) return a = null !== f ? f.baseLanes | c : c, b.lanes = b.childLanes = 1073741824, b.memoizedState = {\n        baseLanes: a,\n        cachePool: null,\n        transitions: null\n      }, b.updateQueue = null, G(fj, gj), gj |= a, null;\n      b.memoizedState = {\n        baseLanes: 0,\n        cachePool: null,\n        transitions: null\n      };\n      d = null !== f ? f.baseLanes : c;\n      G(fj, gj);\n      gj |= d;\n    }\n  } else null !== f ? (d = f.baseLanes | c, b.memoizedState = null) : d = c, G(fj, gj), gj |= d;\n  Yi(a, b, e, c);\n  return b.child;\n}\nfunction hj(a, b) {\n  var c = b.ref;\n  if (null === a && null !== c || null !== a && a.ref !== c) b.flags |= 512, b.flags |= 2097152;\n}\nfunction dj(a, b, c, d, e) {\n  var f = Zf(c) ? Xf : H.current;\n  f = Yf(b, f);\n  Tg(b, e);\n  c = Xh(a, b, c, d, f, e);\n  d = bi();\n  if (null !== a && !Ug) return b.updateQueue = a.updateQueue, b.flags &= -2053, a.lanes &= ~e, $i(a, b, e);\n  I && d && vg(b);\n  b.flags |= 1;\n  Yi(a, b, c, e);\n  return b.child;\n}\nfunction ij(a, b, c, d, e) {\n  if (Zf(c)) {\n    var f = !0;\n    cg(b);\n  } else f = !1;\n  Tg(b, e);\n  if (null === b.stateNode) jj(a, b), ph(b, c, d), rh(b, c, d, e), d = !0;else if (null === a) {\n    var g = b.stateNode,\n      h = b.memoizedProps;\n    g.props = h;\n    var k = g.context,\n      l = c.contextType;\n    "object" === typeof l && null !== l ? l = Vg(l) : (l = Zf(c) ? Xf : H.current, l = Yf(b, l));\n    var m = c.getDerivedStateFromProps,\n      q = "function" === typeof m || "function" === typeof g.getSnapshotBeforeUpdate;\n    q || "function" !== typeof g.UNSAFE_componentWillReceiveProps && "function" !== typeof g.componentWillReceiveProps || (h !== d || k !== l) && qh(b, g, d, l);\n    $g = !1;\n    var r = b.memoizedState;\n    g.state = r;\n    gh(b, d, g, e);\n    k = b.memoizedState;\n    h !== d || r !== k || Wf.current || $g ? ("function" === typeof m && (kh(b, c, m, d), k = b.memoizedState), (h = $g || oh(b, c, h, d, r, k, l)) ? (q || "function" !== typeof g.UNSAFE_componentWillMount && "function" !== typeof g.componentWillMount || ("function" === typeof g.componentWillMount && g.componentWillMount(), "function" === typeof g.UNSAFE_componentWillMount && g.UNSAFE_componentWillMount()), "function" === typeof g.componentDidMount && (b.flags |= 4194308)) : ("function" === typeof g.componentDidMount && (b.flags |= 4194308), b.memoizedProps = d, b.memoizedState = k), g.props = d, g.state = k, g.context = l, d = h) : ("function" === typeof g.componentDidMount && (b.flags |= 4194308), d = !1);\n  } else {\n    g = b.stateNode;\n    bh(a, b);\n    h = b.memoizedProps;\n    l = b.type === b.elementType ? h : Lg(b.type, h);\n    g.props = l;\n    q = b.pendingProps;\n    r = g.context;\n    k = c.contextType;\n    "object" === typeof k && null !== k ? k = Vg(k) : (k = Zf(c) ? Xf : H.current, k = Yf(b, k));\n    var y = c.getDerivedStateFromProps;\n    (m = "function" === typeof y || "function" === typeof g.getSnapshotBeforeUpdate) || "function" !== typeof g.UNSAFE_componentWillReceiveProps && "function" !== typeof g.componentWillReceiveProps || (h !== q || r !== k) && qh(b, g, d, k);\n    $g = !1;\n    r = b.memoizedState;\n    g.state = r;\n    gh(b, d, g, e);\n    var n = b.memoizedState;\n    h !== q || r !== n || Wf.current || $g ? ("function" === typeof y && (kh(b, c, y, d), n = b.memoizedState), (l = $g || oh(b, c, l, d, r, n, k) || !1) ? (m || "function" !== typeof g.UNSAFE_componentWillUpdate && "function" !== typeof g.componentWillUpdate || ("function" === typeof g.componentWillUpdate && g.componentWillUpdate(d, n, k), "function" === typeof g.UNSAFE_componentWillUpdate && g.UNSAFE_componentWillUpdate(d, n, k)), "function" === typeof g.componentDidUpdate && (b.flags |= 4), "function" === typeof g.getSnapshotBeforeUpdate && (b.flags |= 1024)) : ("function" !== typeof g.componentDidUpdate || h === a.memoizedProps && r === a.memoizedState || (b.flags |= 4), "function" !== typeof g.getSnapshotBeforeUpdate || h === a.memoizedProps && r === a.memoizedState || (b.flags |= 1024), b.memoizedProps = d, b.memoizedState = n), g.props = d, g.state = n, g.context = k, d = l) : ("function" !== typeof g.componentDidUpdate || h === a.memoizedProps && r === a.memoizedState || (b.flags |= 4), "function" !== typeof g.getSnapshotBeforeUpdate || h === a.memoizedProps && r === a.memoizedState || (b.flags |= 1024), d = !1);\n  }\n  return kj(a, b, c, d, f, e);\n}\nfunction kj(a, b, c, d, e, f) {\n  hj(a, b);\n  var g = 0 !== (b.flags & 128);\n  if (!d && !g) return e && dg(b, c, !1), $i(a, b, f);\n  d = b.stateNode;\n  Xi.current = b;\n  var h = g && "function" !== typeof c.getDerivedStateFromError ? null : d.render();\n  b.flags |= 1;\n  null !== a && g ? (b.child = Bh(b, a.child, null, f), b.child = Bh(b, null, h, f)) : Yi(a, b, h, f);\n  b.memoizedState = d.state;\n  e && dg(b, c, !0);\n  return b.child;\n}\nfunction lj(a) {\n  var b = a.stateNode;\n  b.pendingContext ? ag(a, b.pendingContext, b.pendingContext !== b.context) : b.context && ag(a, b.context, !1);\n  Ih(a, b.containerInfo);\n}\nfunction mj(a, b, c, d, e) {\n  Ig();\n  Jg(e);\n  b.flags |= 256;\n  Yi(a, b, c, d);\n  return b.child;\n}\nvar nj = {\n  dehydrated: null,\n  treeContext: null,\n  retryLane: 0\n};\nfunction oj(a) {\n  return {\n    baseLanes: a,\n    cachePool: null,\n    transitions: null\n  };\n}\nfunction pj(a, b, c) {\n  var d = b.pendingProps,\n    e = M.current,\n    f = !1,\n    g = 0 !== (b.flags & 128),\n    h;\n  (h = g) || (h = null !== a && null === a.memoizedState ? !1 : 0 !== (e & 2));\n  if (h) f = !0, b.flags &= -129;else if (null === a || null !== a.memoizedState) e |= 1;\n  G(M, e & 1);\n  if (null === a) {\n    Eg(b);\n    a = b.memoizedState;\n    if (null !== a && (a = a.dehydrated, null !== a)) return 0 === (b.mode & 1) ? b.lanes = 1 : "$!" === a.data ? b.lanes = 8 : b.lanes = 1073741824, null;\n    g = d.children;\n    a = d.fallback;\n    return f ? (d = b.mode, f = b.child, g = {\n      mode: "hidden",\n      children: g\n    }, 0 === (d & 1) && null !== f ? (f.childLanes = 0, f.pendingProps = g) : f = qj(g, d, 0, null), a = Ah(a, d, c, null), f.return = b, a.return = b, f.sibling = a, b.child = f, b.child.memoizedState = oj(c), b.memoizedState = nj, a) : rj(b, g);\n  }\n  e = a.memoizedState;\n  if (null !== e && (h = e.dehydrated, null !== h)) return sj(a, b, g, d, h, e, c);\n  if (f) {\n    f = d.fallback;\n    g = b.mode;\n    e = a.child;\n    h = e.sibling;\n    var k = {\n      mode: "hidden",\n      children: d.children\n    };\n    0 === (g & 1) && b.child !== e ? (d = b.child, d.childLanes = 0, d.pendingProps = k, b.deletions = null) : (d = wh(e, k), d.subtreeFlags = e.subtreeFlags & 14680064);\n    null !== h ? f = wh(h, f) : (f = Ah(f, g, c, null), f.flags |= 2);\n    f.return = b;\n    d.return = b;\n    d.sibling = f;\n    b.child = d;\n    d = f;\n    f = b.child;\n    g = a.child.memoizedState;\n    g = null === g ? oj(c) : {\n      baseLanes: g.baseLanes | c,\n      cachePool: null,\n      transitions: g.transitions\n    };\n    f.memoizedState = g;\n    f.childLanes = a.childLanes & ~c;\n    b.memoizedState = nj;\n    return d;\n  }\n  f = a.child;\n  a = f.sibling;\n  d = wh(f, {\n    mode: "visible",\n    children: d.children\n  });\n  0 === (b.mode & 1) && (d.lanes = c);\n  d.return = b;\n  d.sibling = null;\n  null !== a && (c = b.deletions, null === c ? (b.deletions = [a], b.flags |= 16) : c.push(a));\n  b.child = d;\n  b.memoizedState = null;\n  return d;\n}\nfunction rj(a, b) {\n  b = qj({\n    mode: "visible",\n    children: b\n  }, a.mode, 0, null);\n  b.return = a;\n  return a.child = b;\n}\nfunction tj(a, b, c, d) {\n  null !== d && Jg(d);\n  Bh(b, a.child, null, c);\n  a = rj(b, b.pendingProps.children);\n  a.flags |= 2;\n  b.memoizedState = null;\n  return a;\n}\nfunction sj(a, b, c, d, e, f, g) {\n  if (c) {\n    if (b.flags & 256) return b.flags &= -257, d = Li(Error(p(422))), tj(a, b, g, d);\n    if (null !== b.memoizedState) return b.child = a.child, b.flags |= 128, null;\n    f = d.fallback;\n    e = b.mode;\n    d = qj({\n      mode: "visible",\n      children: d.children\n    }, e, 0, null);\n    f = Ah(f, e, g, null);\n    f.flags |= 2;\n    d.return = b;\n    f.return = b;\n    d.sibling = f;\n    b.child = d;\n    0 !== (b.mode & 1) && Bh(b, a.child, null, g);\n    b.child.memoizedState = oj(g);\n    b.memoizedState = nj;\n    return f;\n  }\n  if (0 === (b.mode & 1)) return tj(a, b, g, null);\n  if ("$!" === e.data) {\n    d = e.nextSibling && e.nextSibling.dataset;\n    if (d) var h = d.dgst;\n    d = h;\n    f = Error(p(419));\n    d = Li(f, d, void 0);\n    return tj(a, b, g, d);\n  }\n  h = 0 !== (g & a.childLanes);\n  if (Ug || h) {\n    d = R;\n    if (null !== d) {\n      switch (g & -g) {\n        case 4:\n          e = 2;\n          break;\n        case 16:\n          e = 8;\n          break;\n        case 64:\n        case 128:\n        case 256:\n        case 512:\n        case 1024:\n        case 2048:\n        case 4096:\n        case 8192:\n        case 16384:\n        case 32768:\n        case 65536:\n        case 131072:\n        case 262144:\n        case 524288:\n        case 1048576:\n        case 2097152:\n        case 4194304:\n        case 8388608:\n        case 16777216:\n        case 33554432:\n        case 67108864:\n          e = 32;\n          break;\n        case 536870912:\n          e = 268435456;\n          break;\n        default:\n          e = 0;\n      }\n      e = 0 !== (e & (d.suspendedLanes | g)) ? 0 : e;\n      0 !== e && e !== f.retryLane && (f.retryLane = e, Zg(a, e), mh(d, a, e, -1));\n    }\n    uj();\n    d = Li(Error(p(421)));\n    return tj(a, b, g, d);\n  }\n  if ("$?" === e.data) return b.flags |= 128, b.child = a.child, b = vj.bind(null, a), e._reactRetry = b, null;\n  a = f.treeContext;\n  yg = Lf(e.nextSibling);\n  xg = b;\n  I = !0;\n  zg = null;\n  null !== a && (og[pg++] = rg, og[pg++] = sg, og[pg++] = qg, rg = a.id, sg = a.overflow, qg = b);\n  b = rj(b, d.children);\n  b.flags |= 4096;\n  return b;\n}\nfunction wj(a, b, c) {\n  a.lanes |= b;\n  var d = a.alternate;\n  null !== d && (d.lanes |= b);\n  Sg(a.return, b, c);\n}\nfunction xj(a, b, c, d, e) {\n  var f = a.memoizedState;\n  null === f ? a.memoizedState = {\n    isBackwards: b,\n    rendering: null,\n    renderingStartTime: 0,\n    last: d,\n    tail: c,\n    tailMode: e\n  } : (f.isBackwards = b, f.rendering = null, f.renderingStartTime = 0, f.last = d, f.tail = c, f.tailMode = e);\n}\nfunction yj(a, b, c) {\n  var d = b.pendingProps,\n    e = d.revealOrder,\n    f = d.tail;\n  Yi(a, b, d.children, c);\n  d = M.current;\n  if (0 !== (d & 2)) d = d & 1 | 2, b.flags |= 128;else {\n    if (null !== a && 0 !== (a.flags & 128)) a: for (a = b.child; null !== a;) {\n      if (13 === a.tag) null !== a.memoizedState && wj(a, c, b);else if (19 === a.tag) wj(a, c, b);else if (null !== a.child) {\n        a.child.return = a;\n        a = a.child;\n        continue;\n      }\n      if (a === b) break a;\n      for (; null === a.sibling;) {\n        if (null === a.return || a.return === b) break a;\n        a = a.return;\n      }\n      a.sibling.return = a.return;\n      a = a.sibling;\n    }\n    d &= 1;\n  }\n  G(M, d);\n  if (0 === (b.mode & 1)) b.memoizedState = null;else switch (e) {\n    case "forwards":\n      c = b.child;\n      for (e = null; null !== c;) a = c.alternate, null !== a && null === Mh(a) && (e = c), c = c.sibling;\n      c = e;\n      null === c ? (e = b.child, b.child = null) : (e = c.sibling, c.sibling = null);\n      xj(b, !1, e, c, f);\n      break;\n    case "backwards":\n      c = null;\n      e = b.child;\n      for (b.child = null; null !== e;) {\n        a = e.alternate;\n        if (null !== a && null === Mh(a)) {\n          b.child = e;\n          break;\n        }\n        a = e.sibling;\n        e.sibling = c;\n        c = e;\n        e = a;\n      }\n      xj(b, !0, c, null, f);\n      break;\n    case "together":\n      xj(b, !1, null, null, void 0);\n      break;\n    default:\n      b.memoizedState = null;\n  }\n  return b.child;\n}\nfunction jj(a, b) {\n  0 === (b.mode & 1) && null !== a && (a.alternate = null, b.alternate = null, b.flags |= 2);\n}\nfunction $i(a, b, c) {\n  null !== a && (b.dependencies = a.dependencies);\n  hh |= b.lanes;\n  if (0 === (c & b.childLanes)) return null;\n  if (null !== a && b.child !== a.child) throw Error(p(153));\n  if (null !== b.child) {\n    a = b.child;\n    c = wh(a, a.pendingProps);\n    b.child = c;\n    for (c.return = b; null !== a.sibling;) a = a.sibling, c = c.sibling = wh(a, a.pendingProps), c.return = b;\n    c.sibling = null;\n  }\n  return b.child;\n}\nfunction zj(a, b, c) {\n  switch (b.tag) {\n    case 3:\n      lj(b);\n      Ig();\n      break;\n    case 5:\n      Kh(b);\n      break;\n    case 1:\n      Zf(b.type) && cg(b);\n      break;\n    case 4:\n      Ih(b, b.stateNode.containerInfo);\n      break;\n    case 10:\n      var d = b.type._context,\n        e = b.memoizedProps.value;\n      G(Mg, d._currentValue);\n      d._currentValue = e;\n      break;\n    case 13:\n      d = b.memoizedState;\n      if (null !== d) {\n        if (null !== d.dehydrated) return G(M, M.current & 1), b.flags |= 128, null;\n        if (0 !== (c & b.child.childLanes)) return pj(a, b, c);\n        G(M, M.current & 1);\n        a = $i(a, b, c);\n        return null !== a ? a.sibling : null;\n      }\n      G(M, M.current & 1);\n      break;\n    case 19:\n      d = 0 !== (c & b.childLanes);\n      if (0 !== (a.flags & 128)) {\n        if (d) return yj(a, b, c);\n        b.flags |= 128;\n      }\n      e = b.memoizedState;\n      null !== e && (e.rendering = null, e.tail = null, e.lastEffect = null);\n      G(M, M.current);\n      if (d) break;else return null;\n    case 22:\n    case 23:\n      return b.lanes = 0, ej(a, b, c);\n  }\n  return $i(a, b, c);\n}\nvar Aj, Bj, Cj, Dj;\nAj = function (a, b) {\n  for (var c = b.child; null !== c;) {\n    if (5 === c.tag || 6 === c.tag) a.appendChild(c.stateNode);else if (4 !== c.tag && null !== c.child) {\n      c.child.return = c;\n      c = c.child;\n      continue;\n    }\n    if (c === b) break;\n    for (; null === c.sibling;) {\n      if (null === c.return || c.return === b) return;\n      c = c.return;\n    }\n    c.sibling.return = c.return;\n    c = c.sibling;\n  }\n};\nBj = function () {};\nCj = function (a, b, c, d) {\n  var e = a.memoizedProps;\n  if (e !== d) {\n    a = b.stateNode;\n    Hh(Eh.current);\n    var f = null;\n    switch (c) {\n      case "input":\n        e = Ya(a, e);\n        d = Ya(a, d);\n        f = [];\n        break;\n      case "select":\n        e = A({}, e, {\n          value: void 0\n        });\n        d = A({}, d, {\n          value: void 0\n        });\n        f = [];\n        break;\n      case "textarea":\n        e = gb(a, e);\n        d = gb(a, d);\n        f = [];\n        break;\n      default:\n        "function" !== typeof e.onClick && "function" === typeof d.onClick && (a.onclick = Bf);\n    }\n    ub(c, d);\n    var g;\n    c = null;\n    for (l in e) if (!d.hasOwnProperty(l) && e.hasOwnProperty(l) && null != e[l]) if ("style" === l) {\n      var h = e[l];\n      for (g in h) h.hasOwnProperty(g) && (c || (c = {}), c[g] = "");\n    } else "dangerouslySetInnerHTML" !== l && "children" !== l && "suppressContentEditableWarning" !== l && "suppressHydrationWarning" !== l && "autoFocus" !== l && (ea.hasOwnProperty(l) ? f || (f = []) : (f = f || []).push(l, null));\n    for (l in d) {\n      var k = d[l];\n      h = null != e ? e[l] : void 0;\n      if (d.hasOwnProperty(l) && k !== h && (null != k || null != h)) if ("style" === l) {\n        if (h) {\n          for (g in h) !h.hasOwnProperty(g) || k && k.hasOwnProperty(g) || (c || (c = {}), c[g] = "");\n          for (g in k) k.hasOwnProperty(g) && h[g] !== k[g] && (c || (c = {}), c[g] = k[g]);\n        } else c || (f || (f = []), f.push(l, c)), c = k;\n      } else "dangerouslySetInnerHTML" === l ? (k = k ? k.__html : void 0, h = h ? h.__html : void 0, null != k && h !== k && (f = f || []).push(l, k)) : "children" === l ? "string" !== typeof k && "number" !== typeof k || (f = f || []).push(l, "" + k) : "suppressContentEditableWarning" !== l && "suppressHydrationWarning" !== l && (ea.hasOwnProperty(l) ? (null != k && "onScroll" === l && D("scroll", a), f || h === k || (f = [])) : (f = f || []).push(l, k));\n    }\n    c && (f = f || []).push("style", c);\n    var l = f;\n    if (b.updateQueue = l) b.flags |= 4;\n  }\n};\nDj = function (a, b, c, d) {\n  c !== d && (b.flags |= 4);\n};\nfunction Ej(a, b) {\n  if (!I) switch (a.tailMode) {\n    case "hidden":\n      b = a.tail;\n      for (var c = null; null !== b;) null !== b.alternate && (c = b), b = b.sibling;\n      null === c ? a.tail = null : c.sibling = null;\n      break;\n    case "collapsed":\n      c = a.tail;\n      for (var d = null; null !== c;) null !== c.alternate && (d = c), c = c.sibling;\n      null === d ? b || null === a.tail ? a.tail = null : a.tail.sibling = null : d.sibling = null;\n  }\n}\nfunction S(a) {\n  var b = null !== a.alternate && a.alternate.child === a.child,\n    c = 0,\n    d = 0;\n  if (b) for (var e = a.child; null !== e;) c |= e.lanes | e.childLanes, d |= e.subtreeFlags & 14680064, d |= e.flags & 14680064, e.return = a, e = e.sibling;else for (e = a.child; null !== e;) c |= e.lanes | e.childLanes, d |= e.subtreeFlags, d |= e.flags, e.return = a, e = e.sibling;\n  a.subtreeFlags |= d;\n  a.childLanes = c;\n  return b;\n}\nfunction Fj(a, b, c) {\n  var d = b.pendingProps;\n  wg(b);\n  switch (b.tag) {\n    case 2:\n    case 16:\n    case 15:\n    case 0:\n    case 11:\n    case 7:\n    case 8:\n    case 12:\n    case 9:\n    case 14:\n      return S(b), null;\n    case 1:\n      return Zf(b.type) && $f(), S(b), null;\n    case 3:\n      d = b.stateNode;\n      Jh();\n      E(Wf);\n      E(H);\n      Oh();\n      d.pendingContext && (d.context = d.pendingContext, d.pendingContext = null);\n      if (null === a || null === a.child) Gg(b) ? b.flags |= 4 : null === a || a.memoizedState.isDehydrated && 0 === (b.flags & 256) || (b.flags |= 1024, null !== zg && (Gj(zg), zg = null));\n      Bj(a, b);\n      S(b);\n      return null;\n    case 5:\n      Lh(b);\n      var e = Hh(Gh.current);\n      c = b.type;\n      if (null !== a && null != b.stateNode) Cj(a, b, c, d, e), a.ref !== b.ref && (b.flags |= 512, b.flags |= 2097152);else {\n        if (!d) {\n          if (null === b.stateNode) throw Error(p(166));\n          S(b);\n          return null;\n        }\n        a = Hh(Eh.current);\n        if (Gg(b)) {\n          d = b.stateNode;\n          c = b.type;\n          var f = b.memoizedProps;\n          d[Of] = b;\n          d[Pf] = f;\n          a = 0 !== (b.mode & 1);\n          switch (c) {\n            case "dialog":\n              D("cancel", d);\n              D("close", d);\n              break;\n            case "iframe":\n            case "object":\n            case "embed":\n              D("load", d);\n              break;\n            case "video":\n            case "audio":\n              for (e = 0; e < lf.length; e++) D(lf[e], d);\n              break;\n            case "source":\n              D("error", d);\n              break;\n            case "img":\n            case "image":\n            case "link":\n              D("error", d);\n              D("load", d);\n              break;\n            case "details":\n              D("toggle", d);\n              break;\n            case "input":\n              Za(d, f);\n              D("invalid", d);\n              break;\n            case "select":\n              d._wrapperState = {\n                wasMultiple: !!f.multiple\n              };\n              D("invalid", d);\n              break;\n            case "textarea":\n              hb(d, f), D("invalid", d);\n          }\n          ub(c, f);\n          e = null;\n          for (var g in f) if (f.hasOwnProperty(g)) {\n            var h = f[g];\n            "children" === g ? "string" === typeof h ? d.textContent !== h && (!0 !== f.suppressHydrationWarning && Af(d.textContent, h, a), e = ["children", h]) : "number" === typeof h && d.textContent !== "" + h && (!0 !== f.suppressHydrationWarning && Af(d.textContent, h, a), e = ["children", "" + h]) : ea.hasOwnProperty(g) && null != h && "onScroll" === g && D("scroll", d);\n          }\n          switch (c) {\n            case "input":\n              Va(d);\n              db(d, f, !0);\n              break;\n            case "textarea":\n              Va(d);\n              jb(d);\n              break;\n            case "select":\n            case "option":\n              break;\n            default:\n              "function" === typeof f.onClick && (d.onclick = Bf);\n          }\n          d = e;\n          b.updateQueue = d;\n          null !== d && (b.flags |= 4);\n        } else {\n          g = 9 === e.nodeType ? e : e.ownerDocument;\n          "http://www.w3.org/1999/xhtml" === a && (a = kb(c));\n          "http://www.w3.org/1999/xhtml" === a ? "script" === c ? (a = g.createElement("div"), a.innerHTML = "<script>\\x3c/script>", a = a.removeChild(a.firstChild)) : "string" === typeof d.is ? a = g.createElement(c, {\n            is: d.is\n          }) : (a = g.createElement(c), "select" === c && (g = a, d.multiple ? g.multiple = !0 : d.size && (g.size = d.size))) : a = g.createElementNS(a, c);\n          a[Of] = b;\n          a[Pf] = d;\n          Aj(a, b, !1, !1);\n          b.stateNode = a;\n          a: {\n            g = vb(c, d);\n            switch (c) {\n              case "dialog":\n                D("cancel", a);\n                D("close", a);\n                e = d;\n                break;\n              case "iframe":\n              case "object":\n              case "embed":\n                D("load", a);\n                e = d;\n                break;\n              case "video":\n              case "audio":\n                for (e = 0; e < lf.length; e++) D(lf[e], a);\n                e = d;\n                break;\n              case "source":\n                D("error", a);\n                e = d;\n                break;\n              case "img":\n              case "image":\n              case "link":\n                D("error", a);\n                D("load", a);\n                e = d;\n                break;\n              case "details":\n                D("toggle", a);\n                e = d;\n                break;\n              case "input":\n                Za(a, d);\n                e = Ya(a, d);\n                D("invalid", a);\n                break;\n              case "option":\n                e = d;\n                break;\n              case "select":\n                a._wrapperState = {\n                  wasMultiple: !!d.multiple\n                };\n                e = A({}, d, {\n                  value: void 0\n                });\n                D("invalid", a);\n                break;\n              case "textarea":\n                hb(a, d);\n                e = gb(a, d);\n                D("invalid", a);\n                break;\n              default:\n                e = d;\n            }\n            ub(c, e);\n            h = e;\n            for (f in h) if (h.hasOwnProperty(f)) {\n              var k = h[f];\n              "style" === f ? sb(a, k) : "dangerouslySetInnerHTML" === f ? (k = k ? k.__html : void 0, null != k && nb(a, k)) : "children" === f ? "string" === typeof k ? ("textarea" !== c || "" !== k) && ob(a, k) : "number" === typeof k && ob(a, "" + k) : "suppressContentEditableWarning" !== f && "suppressHydrationWarning" !== f && "autoFocus" !== f && (ea.hasOwnProperty(f) ? null != k && "onScroll" === f && D("scroll", a) : null != k && ta(a, f, k, g));\n            }\n            switch (c) {\n              case "input":\n                Va(a);\n                db(a, d, !1);\n                break;\n              case "textarea":\n                Va(a);\n                jb(a);\n                break;\n              case "option":\n                null != d.value && a.setAttribute("value", "" + Sa(d.value));\n                break;\n              case "select":\n                a.multiple = !!d.multiple;\n                f = d.value;\n                null != f ? fb(a, !!d.multiple, f, !1) : null != d.defaultValue && fb(a, !!d.multiple, d.defaultValue, !0);\n                break;\n              default:\n                "function" === typeof e.onClick && (a.onclick = Bf);\n            }\n            switch (c) {\n              case "button":\n              case "input":\n              case "select":\n              case "textarea":\n                d = !!d.autoFocus;\n                break a;\n              case "img":\n                d = !0;\n                break a;\n              default:\n                d = !1;\n            }\n          }\n          d && (b.flags |= 4);\n        }\n        null !== b.ref && (b.flags |= 512, b.flags |= 2097152);\n      }\n      S(b);\n      return null;\n    case 6:\n      if (a && null != b.stateNode) Dj(a, b, a.memoizedProps, d);else {\n        if ("string" !== typeof d && null === b.stateNode) throw Error(p(166));\n        c = Hh(Gh.current);\n        Hh(Eh.current);\n        if (Gg(b)) {\n          d = b.stateNode;\n          c = b.memoizedProps;\n          d[Of] = b;\n          if (f = d.nodeValue !== c) if (a = xg, null !== a) switch (a.tag) {\n            case 3:\n              Af(d.nodeValue, c, 0 !== (a.mode & 1));\n              break;\n            case 5:\n              !0 !== a.memoizedProps.suppressHydrationWarning && Af(d.nodeValue, c, 0 !== (a.mode & 1));\n          }\n          f && (b.flags |= 4);\n        } else d = (9 === c.nodeType ? c : c.ownerDocument).createTextNode(d), d[Of] = b, b.stateNode = d;\n      }\n      S(b);\n      return null;\n    case 13:\n      E(M);\n      d = b.memoizedState;\n      if (null === a || null !== a.memoizedState && null !== a.memoizedState.dehydrated) {\n        if (I && null !== yg && 0 !== (b.mode & 1) && 0 === (b.flags & 128)) Hg(), Ig(), b.flags |= 98560, f = !1;else if (f = Gg(b), null !== d && null !== d.dehydrated) {\n          if (null === a) {\n            if (!f) throw Error(p(318));\n            f = b.memoizedState;\n            f = null !== f ? f.dehydrated : null;\n            if (!f) throw Error(p(317));\n            f[Of] = b;\n          } else Ig(), 0 === (b.flags & 128) && (b.memoizedState = null), b.flags |= 4;\n          S(b);\n          f = !1;\n        } else null !== zg && (Gj(zg), zg = null), f = !0;\n        if (!f) return b.flags & 65536 ? b : null;\n      }\n      if (0 !== (b.flags & 128)) return b.lanes = c, b;\n      d = null !== d;\n      d !== (null !== a && null !== a.memoizedState) && d && (b.child.flags |= 8192, 0 !== (b.mode & 1) && (null === a || 0 !== (M.current & 1) ? 0 === T && (T = 3) : uj()));\n      null !== b.updateQueue && (b.flags |= 4);\n      S(b);\n      return null;\n    case 4:\n      return Jh(), Bj(a, b), null === a && sf(b.stateNode.containerInfo), S(b), null;\n    case 10:\n      return Rg(b.type._context), S(b), null;\n    case 17:\n      return Zf(b.type) && $f(), S(b), null;\n    case 19:\n      E(M);\n      f = b.memoizedState;\n      if (null === f) return S(b), null;\n      d = 0 !== (b.flags & 128);\n      g = f.rendering;\n      if (null === g) {\n        if (d) Ej(f, !1);else {\n          if (0 !== T || null !== a && 0 !== (a.flags & 128)) for (a = b.child; null !== a;) {\n            g = Mh(a);\n            if (null !== g) {\n              b.flags |= 128;\n              Ej(f, !1);\n              d = g.updateQueue;\n              null !== d && (b.updateQueue = d, b.flags |= 4);\n              b.subtreeFlags = 0;\n              d = c;\n              for (c = b.child; null !== c;) f = c, a = d, f.flags &= 14680066, g = f.alternate, null === g ? (f.childLanes = 0, f.lanes = a, f.child = null, f.subtreeFlags = 0, f.memoizedProps = null, f.memoizedState = null, f.updateQueue = null, f.dependencies = null, f.stateNode = null) : (f.childLanes = g.childLanes, f.lanes = g.lanes, f.child = g.child, f.subtreeFlags = 0, f.deletions = null, f.memoizedProps = g.memoizedProps, f.memoizedState = g.memoizedState, f.updateQueue = g.updateQueue, f.type = g.type, a = g.dependencies, f.dependencies = null === a ? null : {\n                lanes: a.lanes,\n                firstContext: a.firstContext\n              }), c = c.sibling;\n              G(M, M.current & 1 | 2);\n              return b.child;\n            }\n            a = a.sibling;\n          }\n          null !== f.tail && B() > Hj && (b.flags |= 128, d = !0, Ej(f, !1), b.lanes = 4194304);\n        }\n      } else {\n        if (!d) if (a = Mh(g), null !== a) {\n          if (b.flags |= 128, d = !0, c = a.updateQueue, null !== c && (b.updateQueue = c, b.flags |= 4), Ej(f, !0), null === f.tail && "hidden" === f.tailMode && !g.alternate && !I) return S(b), null;\n        } else 2 * B() - f.renderingStartTime > Hj && 1073741824 !== c && (b.flags |= 128, d = !0, Ej(f, !1), b.lanes = 4194304);\n        f.isBackwards ? (g.sibling = b.child, b.child = g) : (c = f.last, null !== c ? c.sibling = g : b.child = g, f.last = g);\n      }\n      if (null !== f.tail) return b = f.tail, f.rendering = b, f.tail = b.sibling, f.renderingStartTime = B(), b.sibling = null, c = M.current, G(M, d ? c & 1 | 2 : c & 1), b;\n      S(b);\n      return null;\n    case 22:\n    case 23:\n      return Ij(), d = null !== b.memoizedState, null !== a && null !== a.memoizedState !== d && (b.flags |= 8192), d && 0 !== (b.mode & 1) ? 0 !== (gj & 1073741824) && (S(b), b.subtreeFlags & 6 && (b.flags |= 8192)) : S(b), null;\n    case 24:\n      return null;\n    case 25:\n      return null;\n  }\n  throw Error(p(156, b.tag));\n}\nfunction Jj(a, b) {\n  wg(b);\n  switch (b.tag) {\n    case 1:\n      return Zf(b.type) && $f(), a = b.flags, a & 65536 ? (b.flags = a & -65537 | 128, b) : null;\n    case 3:\n      return Jh(), E(Wf), E(H), Oh(), a = b.flags, 0 !== (a & 65536) && 0 === (a & 128) ? (b.flags = a & -65537 | 128, b) : null;\n    case 5:\n      return Lh(b), null;\n    case 13:\n      E(M);\n      a = b.memoizedState;\n      if (null !== a && null !== a.dehydrated) {\n        if (null === b.alternate) throw Error(p(340));\n        Ig();\n      }\n      a = b.flags;\n      return a & 65536 ? (b.flags = a & -65537 | 128, b) : null;\n    case 19:\n      return E(M), null;\n    case 4:\n      return Jh(), null;\n    case 10:\n      return Rg(b.type._context), null;\n    case 22:\n    case 23:\n      return Ij(), null;\n    case 24:\n      return null;\n    default:\n      return null;\n  }\n}\nvar Kj = !1,\n  U = !1,\n  Lj = "function" === typeof WeakSet ? WeakSet : Set,\n  V = null;\nfunction Mj(a, b) {\n  var c = a.ref;\n  if (null !== c) if ("function" === typeof c) try {\n    c(null);\n  } catch (d) {\n    W(a, b, d);\n  } else c.current = null;\n}\nfunction Nj(a, b, c) {\n  try {\n    c();\n  } catch (d) {\n    W(a, b, d);\n  }\n}\nvar Oj = !1;\nfunction Pj(a, b) {\n  Cf = dd;\n  a = Me();\n  if (Ne(a)) {\n    if ("selectionStart" in a) var c = {\n      start: a.selectionStart,\n      end: a.selectionEnd\n    };else a: {\n      c = (c = a.ownerDocument) && c.defaultView || window;\n      var d = c.getSelection && c.getSelection();\n      if (d && 0 !== d.rangeCount) {\n        c = d.anchorNode;\n        var e = d.anchorOffset,\n          f = d.focusNode;\n        d = d.focusOffset;\n        try {\n          c.nodeType, f.nodeType;\n        } catch (F) {\n          c = null;\n          break a;\n        }\n        var g = 0,\n          h = -1,\n          k = -1,\n          l = 0,\n          m = 0,\n          q = a,\n          r = null;\n        b: for (;;) {\n          for (var y;;) {\n            q !== c || 0 !== e && 3 !== q.nodeType || (h = g + e);\n            q !== f || 0 !== d && 3 !== q.nodeType || (k = g + d);\n            3 === q.nodeType && (g += q.nodeValue.length);\n            if (null === (y = q.firstChild)) break;\n            r = q;\n            q = y;\n          }\n          for (;;) {\n            if (q === a) break b;\n            r === c && ++l === e && (h = g);\n            r === f && ++m === d && (k = g);\n            if (null !== (y = q.nextSibling)) break;\n            q = r;\n            r = q.parentNode;\n          }\n          q = y;\n        }\n        c = -1 === h || -1 === k ? null : {\n          start: h,\n          end: k\n        };\n      } else c = null;\n    }\n    c = c || {\n      start: 0,\n      end: 0\n    };\n  } else c = null;\n  Df = {\n    focusedElem: a,\n    selectionRange: c\n  };\n  dd = !1;\n  for (V = b; null !== V;) if (b = V, a = b.child, 0 !== (b.subtreeFlags & 1028) && null !== a) a.return = b, V = a;else for (; null !== V;) {\n    b = V;\n    try {\n      var n = b.alternate;\n      if (0 !== (b.flags & 1024)) switch (b.tag) {\n        case 0:\n        case 11:\n        case 15:\n          break;\n        case 1:\n          if (null !== n) {\n            var t = n.memoizedProps,\n              J = n.memoizedState,\n              x = b.stateNode,\n              w = x.getSnapshotBeforeUpdate(b.elementType === b.type ? t : Lg(b.type, t), J);\n            x.__reactInternalSnapshotBeforeUpdate = w;\n          }\n          break;\n        case 3:\n          var u = b.stateNode.containerInfo;\n          1 === u.nodeType ? u.textContent = "" : 9 === u.nodeType && u.documentElement && u.removeChild(u.documentElement);\n          break;\n        case 5:\n        case 6:\n        case 4:\n        case 17:\n          break;\n        default:\n          throw Error(p(163));\n      }\n    } catch (F) {\n      W(b, b.return, F);\n    }\n    a = b.sibling;\n    if (null !== a) {\n      a.return = b.return;\n      V = a;\n      break;\n    }\n    V = b.return;\n  }\n  n = Oj;\n  Oj = !1;\n  return n;\n}\nfunction Qj(a, b, c) {\n  var d = b.updateQueue;\n  d = null !== d ? d.lastEffect : null;\n  if (null !== d) {\n    var e = d = d.next;\n    do {\n      if ((e.tag & a) === a) {\n        var f = e.destroy;\n        e.destroy = void 0;\n        void 0 !== f && Nj(b, c, f);\n      }\n      e = e.next;\n    } while (e !== d);\n  }\n}\nfunction Rj(a, b) {\n  b = b.updateQueue;\n  b = null !== b ? b.lastEffect : null;\n  if (null !== b) {\n    var c = b = b.next;\n    do {\n      if ((c.tag & a) === a) {\n        var d = c.create;\n        c.destroy = d();\n      }\n      c = c.next;\n    } while (c !== b);\n  }\n}\nfunction Sj(a) {\n  var b = a.ref;\n  if (null !== b) {\n    var c = a.stateNode;\n    switch (a.tag) {\n      case 5:\n        a = c;\n        break;\n      default:\n        a = c;\n    }\n    "function" === typeof b ? b(a) : b.current = a;\n  }\n}\nfunction Tj(a) {\n  var b = a.alternate;\n  null !== b && (a.alternate = null, Tj(b));\n  a.child = null;\n  a.deletions = null;\n  a.sibling = null;\n  5 === a.tag && (b = a.stateNode, null !== b && (delete b[Of], delete b[Pf], delete b[of], delete b[Qf], delete b[Rf]));\n  a.stateNode = null;\n  a.return = null;\n  a.dependencies = null;\n  a.memoizedProps = null;\n  a.memoizedState = null;\n  a.pendingProps = null;\n  a.stateNode = null;\n  a.updateQueue = null;\n}\nfunction Uj(a) {\n  return 5 === a.tag || 3 === a.tag || 4 === a.tag;\n}\nfunction Vj(a) {\n  a: for (;;) {\n    for (; null === a.sibling;) {\n      if (null === a.return || Uj(a.return)) return null;\n      a = a.return;\n    }\n    a.sibling.return = a.return;\n    for (a = a.sibling; 5 !== a.tag && 6 !== a.tag && 18 !== a.tag;) {\n      if (a.flags & 2) continue a;\n      if (null === a.child || 4 === a.tag) continue a;else a.child.return = a, a = a.child;\n    }\n    if (!(a.flags & 2)) return a.stateNode;\n  }\n}\nfunction Wj(a, b, c) {\n  var d = a.tag;\n  if (5 === d || 6 === d) a = a.stateNode, b ? 8 === c.nodeType ? c.parentNode.insertBefore(a, b) : c.insertBefore(a, b) : (8 === c.nodeType ? (b = c.parentNode, b.insertBefore(a, c)) : (b = c, b.appendChild(a)), c = c._reactRootContainer, null !== c && void 0 !== c || null !== b.onclick || (b.onclick = Bf));else if (4 !== d && (a = a.child, null !== a)) for (Wj(a, b, c), a = a.sibling; null !== a;) Wj(a, b, c), a = a.sibling;\n}\nfunction Xj(a, b, c) {\n  var d = a.tag;\n  if (5 === d || 6 === d) a = a.stateNode, b ? c.insertBefore(a, b) : c.appendChild(a);else if (4 !== d && (a = a.child, null !== a)) for (Xj(a, b, c), a = a.sibling; null !== a;) Xj(a, b, c), a = a.sibling;\n}\nvar X = null,\n  Yj = !1;\nfunction Zj(a, b, c) {\n  for (c = c.child; null !== c;) ak(a, b, c), c = c.sibling;\n}\nfunction ak(a, b, c) {\n  if (lc && "function" === typeof lc.onCommitFiberUnmount) try {\n    lc.onCommitFiberUnmount(kc, c);\n  } catch (h) {}\n  switch (c.tag) {\n    case 5:\n      U || Mj(c, b);\n    case 6:\n      var d = X,\n        e = Yj;\n      X = null;\n      Zj(a, b, c);\n      X = d;\n      Yj = e;\n      null !== X && (Yj ? (a = X, c = c.stateNode, 8 === a.nodeType ? a.parentNode.removeChild(c) : a.removeChild(c)) : X.removeChild(c.stateNode));\n      break;\n    case 18:\n      null !== X && (Yj ? (a = X, c = c.stateNode, 8 === a.nodeType ? Kf(a.parentNode, c) : 1 === a.nodeType && Kf(a, c), bd(a)) : Kf(X, c.stateNode));\n      break;\n    case 4:\n      d = X;\n      e = Yj;\n      X = c.stateNode.containerInfo;\n      Yj = !0;\n      Zj(a, b, c);\n      X = d;\n      Yj = e;\n      break;\n    case 0:\n    case 11:\n    case 14:\n    case 15:\n      if (!U && (d = c.updateQueue, null !== d && (d = d.lastEffect, null !== d))) {\n        e = d = d.next;\n        do {\n          var f = e,\n            g = f.destroy;\n          f = f.tag;\n          void 0 !== g && (0 !== (f & 2) ? Nj(c, b, g) : 0 !== (f & 4) && Nj(c, b, g));\n          e = e.next;\n        } while (e !== d);\n      }\n      Zj(a, b, c);\n      break;\n    case 1:\n      if (!U && (Mj(c, b), d = c.stateNode, "function" === typeof d.componentWillUnmount)) try {\n        d.props = c.memoizedProps, d.state = c.memoizedState, d.componentWillUnmount();\n      } catch (h) {\n        W(c, b, h);\n      }\n      Zj(a, b, c);\n      break;\n    case 21:\n      Zj(a, b, c);\n      break;\n    case 22:\n      c.mode & 1 ? (U = (d = U) || null !== c.memoizedState, Zj(a, b, c), U = d) : Zj(a, b, c);\n      break;\n    default:\n      Zj(a, b, c);\n  }\n}\nfunction bk(a) {\n  var b = a.updateQueue;\n  if (null !== b) {\n    a.updateQueue = null;\n    var c = a.stateNode;\n    null === c && (c = a.stateNode = new Lj());\n    b.forEach(function (b) {\n      var d = ck.bind(null, a, b);\n      c.has(b) || (c.add(b), b.then(d, d));\n    });\n  }\n}\nfunction dk(a, b) {\n  var c = b.deletions;\n  if (null !== c) for (var d = 0; d < c.length; d++) {\n    var e = c[d];\n    try {\n      var f = a,\n        g = b,\n        h = g;\n      a: for (; null !== h;) {\n        switch (h.tag) {\n          case 5:\n            X = h.stateNode;\n            Yj = !1;\n            break a;\n          case 3:\n            X = h.stateNode.containerInfo;\n            Yj = !0;\n            break a;\n          case 4:\n            X = h.stateNode.containerInfo;\n            Yj = !0;\n            break a;\n        }\n        h = h.return;\n      }\n      if (null === X) throw Error(p(160));\n      ak(f, g, e);\n      X = null;\n      Yj = !1;\n      var k = e.alternate;\n      null !== k && (k.return = null);\n      e.return = null;\n    } catch (l) {\n      W(e, b, l);\n    }\n  }\n  if (b.subtreeFlags & 12854) for (b = b.child; null !== b;) ek(b, a), b = b.sibling;\n}\nfunction ek(a, b) {\n  var c = a.alternate,\n    d = a.flags;\n  switch (a.tag) {\n    case 0:\n    case 11:\n    case 14:\n    case 15:\n      dk(b, a);\n      fk(a);\n      if (d & 4) {\n        try {\n          Qj(3, a, a.return), Rj(3, a);\n        } catch (t) {\n          W(a, a.return, t);\n        }\n        try {\n          Qj(5, a, a.return);\n        } catch (t) {\n          W(a, a.return, t);\n        }\n      }\n      break;\n    case 1:\n      dk(b, a);\n      fk(a);\n      d & 512 && null !== c && Mj(c, c.return);\n      break;\n    case 5:\n      dk(b, a);\n      fk(a);\n      d & 512 && null !== c && Mj(c, c.return);\n      if (a.flags & 32) {\n        var e = a.stateNode;\n        try {\n          ob(e, "");\n        } catch (t) {\n          W(a, a.return, t);\n        }\n      }\n      if (d & 4 && (e = a.stateNode, null != e)) {\n        var f = a.memoizedProps,\n          g = null !== c ? c.memoizedProps : f,\n          h = a.type,\n          k = a.updateQueue;\n        a.updateQueue = null;\n        if (null !== k) try {\n          "input" === h && "radio" === f.type && null != f.name && ab(e, f);\n          vb(h, g);\n          var l = vb(h, f);\n          for (g = 0; g < k.length; g += 2) {\n            var m = k[g],\n              q = k[g + 1];\n            "style" === m ? sb(e, q) : "dangerouslySetInnerHTML" === m ? nb(e, q) : "children" === m ? ob(e, q) : ta(e, m, q, l);\n          }\n          switch (h) {\n            case "input":\n              bb(e, f);\n              break;\n            case "textarea":\n              ib(e, f);\n              break;\n            case "select":\n              var r = e._wrapperState.wasMultiple;\n              e._wrapperState.wasMultiple = !!f.multiple;\n              var y = f.value;\n              null != y ? fb(e, !!f.multiple, y, !1) : r !== !!f.multiple && (null != f.defaultValue ? fb(e, !!f.multiple, f.defaultValue, !0) : fb(e, !!f.multiple, f.multiple ? [] : "", !1));\n          }\n          e[Pf] = f;\n        } catch (t) {\n          W(a, a.return, t);\n        }\n      }\n      break;\n    case 6:\n      dk(b, a);\n      fk(a);\n      if (d & 4) {\n        if (null === a.stateNode) throw Error(p(162));\n        e = a.stateNode;\n        f = a.memoizedProps;\n        try {\n          e.nodeValue = f;\n        } catch (t) {\n          W(a, a.return, t);\n        }\n      }\n      break;\n    case 3:\n      dk(b, a);\n      fk(a);\n      if (d & 4 && null !== c && c.memoizedState.isDehydrated) try {\n        bd(b.containerInfo);\n      } catch (t) {\n        W(a, a.return, t);\n      }\n      break;\n    case 4:\n      dk(b, a);\n      fk(a);\n      break;\n    case 13:\n      dk(b, a);\n      fk(a);\n      e = a.child;\n      e.flags & 8192 && (f = null !== e.memoizedState, e.stateNode.isHidden = f, !f || null !== e.alternate && null !== e.alternate.memoizedState || (gk = B()));\n      d & 4 && bk(a);\n      break;\n    case 22:\n      m = null !== c && null !== c.memoizedState;\n      a.mode & 1 ? (U = (l = U) || m, dk(b, a), U = l) : dk(b, a);\n      fk(a);\n      if (d & 8192) {\n        l = null !== a.memoizedState;\n        if ((a.stateNode.isHidden = l) && !m && 0 !== (a.mode & 1)) for (V = a, m = a.child; null !== m;) {\n          for (q = V = m; null !== V;) {\n            r = V;\n            y = r.child;\n            switch (r.tag) {\n              case 0:\n              case 11:\n              case 14:\n              case 15:\n                Qj(4, r, r.return);\n                break;\n              case 1:\n                Mj(r, r.return);\n                var n = r.stateNode;\n                if ("function" === typeof n.componentWillUnmount) {\n                  d = r;\n                  c = r.return;\n                  try {\n                    b = d, n.props = b.memoizedProps, n.state = b.memoizedState, n.componentWillUnmount();\n                  } catch (t) {\n                    W(d, c, t);\n                  }\n                }\n                break;\n              case 5:\n                Mj(r, r.return);\n                break;\n              case 22:\n                if (null !== r.memoizedState) {\n                  hk(q);\n                  continue;\n                }\n            }\n            null !== y ? (y.return = r, V = y) : hk(q);\n          }\n          m = m.sibling;\n        }\n        a: for (m = null, q = a;;) {\n          if (5 === q.tag) {\n            if (null === m) {\n              m = q;\n              try {\n                e = q.stateNode, l ? (f = e.style, "function" === typeof f.setProperty ? f.setProperty("display", "none", "important") : f.display = "none") : (h = q.stateNode, k = q.memoizedProps.style, g = void 0 !== k && null !== k && k.hasOwnProperty("display") ? k.display : null, h.style.display = rb("display", g));\n              } catch (t) {\n                W(a, a.return, t);\n              }\n            }\n          } else if (6 === q.tag) {\n            if (null === m) try {\n              q.stateNode.nodeValue = l ? "" : q.memoizedProps;\n            } catch (t) {\n              W(a, a.return, t);\n            }\n          } else if ((22 !== q.tag && 23 !== q.tag || null === q.memoizedState || q === a) && null !== q.child) {\n            q.child.return = q;\n            q = q.child;\n            continue;\n          }\n          if (q === a) break a;\n          for (; null === q.sibling;) {\n            if (null === q.return || q.return === a) break a;\n            m === q && (m = null);\n            q = q.return;\n          }\n          m === q && (m = null);\n          q.sibling.return = q.return;\n          q = q.sibling;\n        }\n      }\n      break;\n    case 19:\n      dk(b, a);\n      fk(a);\n      d & 4 && bk(a);\n      break;\n    case 21:\n      break;\n    default:\n      dk(b, a), fk(a);\n  }\n}\nfunction fk(a) {\n  var b = a.flags;\n  if (b & 2) {\n    try {\n      a: {\n        for (var c = a.return; null !== c;) {\n          if (Uj(c)) {\n            var d = c;\n            break a;\n          }\n          c = c.return;\n        }\n        throw Error(p(160));\n      }\n      switch (d.tag) {\n        case 5:\n          var e = d.stateNode;\n          d.flags & 32 && (ob(e, ""), d.flags &= -33);\n          var f = Vj(a);\n          Xj(a, f, e);\n          break;\n        case 3:\n        case 4:\n          var g = d.stateNode.containerInfo,\n            h = Vj(a);\n          Wj(a, h, g);\n          break;\n        default:\n          throw Error(p(161));\n      }\n    } catch (k) {\n      W(a, a.return, k);\n    }\n    a.flags &= -3;\n  }\n  b & 4096 && (a.flags &= -4097);\n}\nfunction ik(a, b, c) {\n  V = a;\n  jk(a, b, c);\n}\nfunction jk(a, b, c) {\n  for (var d = 0 !== (a.mode & 1); null !== V;) {\n    var e = V,\n      f = e.child;\n    if (22 === e.tag && d) {\n      var g = null !== e.memoizedState || Kj;\n      if (!g) {\n        var h = e.alternate,\n          k = null !== h && null !== h.memoizedState || U;\n        h = Kj;\n        var l = U;\n        Kj = g;\n        if ((U = k) && !l) for (V = e; null !== V;) g = V, k = g.child, 22 === g.tag && null !== g.memoizedState ? kk(e) : null !== k ? (k.return = g, V = k) : kk(e);\n        for (; null !== f;) V = f, jk(f, b, c), f = f.sibling;\n        V = e;\n        Kj = h;\n        U = l;\n      }\n      lk(a, b, c);\n    } else 0 !== (e.subtreeFlags & 8772) && null !== f ? (f.return = e, V = f) : lk(a, b, c);\n  }\n}\nfunction lk(a) {\n  for (; null !== V;) {\n    var b = V;\n    if (0 !== (b.flags & 8772)) {\n      var c = b.alternate;\n      try {\n        if (0 !== (b.flags & 8772)) switch (b.tag) {\n          case 0:\n          case 11:\n          case 15:\n            U || Rj(5, b);\n            break;\n          case 1:\n            var d = b.stateNode;\n            if (b.flags & 4 && !U) if (null === c) d.componentDidMount();else {\n              var e = b.elementType === b.type ? c.memoizedProps : Lg(b.type, c.memoizedProps);\n              d.componentDidUpdate(e, c.memoizedState, d.__reactInternalSnapshotBeforeUpdate);\n            }\n            var f = b.updateQueue;\n            null !== f && ih(b, f, d);\n            break;\n          case 3:\n            var g = b.updateQueue;\n            if (null !== g) {\n              c = null;\n              if (null !== b.child) switch (b.child.tag) {\n                case 5:\n                  c = b.child.stateNode;\n                  break;\n                case 1:\n                  c = b.child.stateNode;\n              }\n              ih(b, g, c);\n            }\n            break;\n          case 5:\n            var h = b.stateNode;\n            if (null === c && b.flags & 4) {\n              c = h;\n              var k = b.memoizedProps;\n              switch (b.type) {\n                case "button":\n                case "input":\n                case "select":\n                case "textarea":\n                  k.autoFocus && c.focus();\n                  break;\n                case "img":\n                  k.src && (c.src = k.src);\n              }\n            }\n            break;\n          case 6:\n            break;\n          case 4:\n            break;\n          case 12:\n            break;\n          case 13:\n            if (null === b.memoizedState) {\n              var l = b.alternate;\n              if (null !== l) {\n                var m = l.memoizedState;\n                if (null !== m) {\n                  var q = m.dehydrated;\n                  null !== q && bd(q);\n                }\n              }\n            }\n            break;\n          case 19:\n          case 17:\n          case 21:\n          case 22:\n          case 23:\n          case 25:\n            break;\n          default:\n            throw Error(p(163));\n        }\n        U || b.flags & 512 && Sj(b);\n      } catch (r) {\n        W(b, b.return, r);\n      }\n    }\n    if (b === a) {\n      V = null;\n      break;\n    }\n    c = b.sibling;\n    if (null !== c) {\n      c.return = b.return;\n      V = c;\n      break;\n    }\n    V = b.return;\n  }\n}\nfunction hk(a) {\n  for (; null !== V;) {\n    var b = V;\n    if (b === a) {\n      V = null;\n      break;\n    }\n    var c = b.sibling;\n    if (null !== c) {\n      c.return = b.return;\n      V = c;\n      break;\n    }\n    V = b.return;\n  }\n}\nfunction kk(a) {\n  for (; null !== V;) {\n    var b = V;\n    try {\n      switch (b.tag) {\n        case 0:\n        case 11:\n        case 15:\n          var c = b.return;\n          try {\n            Rj(4, b);\n          } catch (k) {\n            W(b, c, k);\n          }\n          break;\n        case 1:\n          var d = b.stateNode;\n          if ("function" === typeof d.componentDidMount) {\n            var e = b.return;\n            try {\n              d.componentDidMount();\n            } catch (k) {\n              W(b, e, k);\n            }\n          }\n          var f = b.return;\n          try {\n            Sj(b);\n          } catch (k) {\n            W(b, f, k);\n          }\n          break;\n        case 5:\n          var g = b.return;\n          try {\n            Sj(b);\n          } catch (k) {\n            W(b, g, k);\n          }\n      }\n    } catch (k) {\n      W(b, b.return, k);\n    }\n    if (b === a) {\n      V = null;\n      break;\n    }\n    var h = b.sibling;\n    if (null !== h) {\n      h.return = b.return;\n      V = h;\n      break;\n    }\n    V = b.return;\n  }\n}\nvar mk = Math.ceil,\n  nk = ua.ReactCurrentDispatcher,\n  ok = ua.ReactCurrentOwner,\n  pk = ua.ReactCurrentBatchConfig,\n  K = 0,\n  R = null,\n  Y = null,\n  Z = 0,\n  gj = 0,\n  fj = Uf(0),\n  T = 0,\n  qk = null,\n  hh = 0,\n  rk = 0,\n  sk = 0,\n  tk = null,\n  uk = null,\n  gk = 0,\n  Hj = Infinity,\n  vk = null,\n  Pi = !1,\n  Qi = null,\n  Si = null,\n  wk = !1,\n  xk = null,\n  yk = 0,\n  zk = 0,\n  Ak = null,\n  Bk = -1,\n  Ck = 0;\nfunction L() {\n  return 0 !== (K & 6) ? B() : -1 !== Bk ? Bk : Bk = B();\n}\nfunction lh(a) {\n  if (0 === (a.mode & 1)) return 1;\n  if (0 !== (K & 2) && 0 !== Z) return Z & -Z;\n  if (null !== Kg.transition) return 0 === Ck && (Ck = yc()), Ck;\n  a = C;\n  if (0 !== a) return a;\n  a = window.event;\n  a = void 0 === a ? 16 : jd(a.type);\n  return a;\n}\nfunction mh(a, b, c, d) {\n  if (50 < zk) throw zk = 0, Ak = null, Error(p(185));\n  Ac(a, c, d);\n  if (0 === (K & 2) || a !== R) a === R && (0 === (K & 2) && (rk |= c), 4 === T && Dk(a, Z)), Ek(a, d), 1 === c && 0 === K && 0 === (b.mode & 1) && (Hj = B() + 500, fg && jg());\n}\nfunction Ek(a, b) {\n  var c = a.callbackNode;\n  wc(a, b);\n  var d = uc(a, a === R ? Z : 0);\n  if (0 === d) null !== c && bc(c), a.callbackNode = null, a.callbackPriority = 0;else if (b = d & -d, a.callbackPriority !== b) {\n    null != c && bc(c);\n    if (1 === b) 0 === a.tag ? ig(Fk.bind(null, a)) : hg(Fk.bind(null, a)), Jf(function () {\n      0 === (K & 6) && jg();\n    }), c = null;else {\n      switch (Dc(d)) {\n        case 1:\n          c = fc;\n          break;\n        case 4:\n          c = gc;\n          break;\n        case 16:\n          c = hc;\n          break;\n        case 536870912:\n          c = jc;\n          break;\n        default:\n          c = hc;\n      }\n      c = Gk(c, Hk.bind(null, a));\n    }\n    a.callbackPriority = b;\n    a.callbackNode = c;\n  }\n}\nfunction Hk(a, b) {\n  Bk = -1;\n  Ck = 0;\n  if (0 !== (K & 6)) throw Error(p(327));\n  var c = a.callbackNode;\n  if (Ik() && a.callbackNode !== c) return null;\n  var d = uc(a, a === R ? Z : 0);\n  if (0 === d) return null;\n  if (0 !== (d & 30) || 0 !== (d & a.expiredLanes) || b) b = Jk(a, d);else {\n    b = d;\n    var e = K;\n    K |= 2;\n    var f = Kk();\n    if (R !== a || Z !== b) vk = null, Hj = B() + 500, Lk(a, b);\n    do try {\n      Mk();\n      break;\n    } catch (h) {\n      Nk(a, h);\n    } while (1);\n    Qg();\n    nk.current = f;\n    K = e;\n    null !== Y ? b = 0 : (R = null, Z = 0, b = T);\n  }\n  if (0 !== b) {\n    2 === b && (e = xc(a), 0 !== e && (d = e, b = Ok(a, e)));\n    if (1 === b) throw c = qk, Lk(a, 0), Dk(a, d), Ek(a, B()), c;\n    if (6 === b) Dk(a, d);else {\n      e = a.current.alternate;\n      if (0 === (d & 30) && !Pk(e) && (b = Jk(a, d), 2 === b && (f = xc(a), 0 !== f && (d = f, b = Ok(a, f))), 1 === b)) throw c = qk, Lk(a, 0), Dk(a, d), Ek(a, B()), c;\n      a.finishedWork = e;\n      a.finishedLanes = d;\n      switch (b) {\n        case 0:\n        case 1:\n          throw Error(p(345));\n        case 2:\n          Qk(a, uk, vk);\n          break;\n        case 3:\n          Dk(a, d);\n          if ((d & 130023424) === d && (b = gk + 500 - B(), 10 < b)) {\n            if (0 !== uc(a, 0)) break;\n            e = a.suspendedLanes;\n            if ((e & d) !== d) {\n              L();\n              a.pingedLanes |= a.suspendedLanes & e;\n              break;\n            }\n            a.timeoutHandle = Ff(Qk.bind(null, a, uk, vk), b);\n            break;\n          }\n          Qk(a, uk, vk);\n          break;\n        case 4:\n          Dk(a, d);\n          if ((d & 4194240) === d) break;\n          b = a.eventTimes;\n          for (e = -1; 0 < d;) {\n            var g = 31 - oc(d);\n            f = 1 << g;\n            g = b[g];\n            g > e && (e = g);\n            d &= ~f;\n          }\n          d = e;\n          d = B() - d;\n          d = (120 > d ? 120 : 480 > d ? 480 : 1080 > d ? 1080 : 1920 > d ? 1920 : 3E3 > d ? 3E3 : 4320 > d ? 4320 : 1960 * mk(d / 1960)) - d;\n          if (10 < d) {\n            a.timeoutHandle = Ff(Qk.bind(null, a, uk, vk), d);\n            break;\n          }\n          Qk(a, uk, vk);\n          break;\n        case 5:\n          Qk(a, uk, vk);\n          break;\n        default:\n          throw Error(p(329));\n      }\n    }\n  }\n  Ek(a, B());\n  return a.callbackNode === c ? Hk.bind(null, a) : null;\n}\nfunction Ok(a, b) {\n  var c = tk;\n  a.current.memoizedState.isDehydrated && (Lk(a, b).flags |= 256);\n  a = Jk(a, b);\n  2 !== a && (b = uk, uk = c, null !== b && Gj(b));\n  return a;\n}\nfunction Gj(a) {\n  null === uk ? uk = a : uk.push.apply(uk, a);\n}\nfunction Pk(a) {\n  for (var b = a;;) {\n    if (b.flags & 16384) {\n      var c = b.updateQueue;\n      if (null !== c && (c = c.stores, null !== c)) for (var d = 0; d < c.length; d++) {\n        var e = c[d],\n          f = e.getSnapshot;\n        e = e.value;\n        try {\n          if (!He(f(), e)) return !1;\n        } catch (g) {\n          return !1;\n        }\n      }\n    }\n    c = b.child;\n    if (b.subtreeFlags & 16384 && null !== c) c.return = b, b = c;else {\n      if (b === a) break;\n      for (; null === b.sibling;) {\n        if (null === b.return || b.return === a) return !0;\n        b = b.return;\n      }\n      b.sibling.return = b.return;\n      b = b.sibling;\n    }\n  }\n  return !0;\n}\nfunction Dk(a, b) {\n  b &= ~sk;\n  b &= ~rk;\n  a.suspendedLanes |= b;\n  a.pingedLanes &= ~b;\n  for (a = a.expirationTimes; 0 < b;) {\n    var c = 31 - oc(b),\n      d = 1 << c;\n    a[c] = -1;\n    b &= ~d;\n  }\n}\nfunction Fk(a) {\n  if (0 !== (K & 6)) throw Error(p(327));\n  Ik();\n  var b = uc(a, 0);\n  if (0 === (b & 1)) return Ek(a, B()), null;\n  var c = Jk(a, b);\n  if (0 !== a.tag && 2 === c) {\n    var d = xc(a);\n    0 !== d && (b = d, c = Ok(a, d));\n  }\n  if (1 === c) throw c = qk, Lk(a, 0), Dk(a, b), Ek(a, B()), c;\n  if (6 === c) throw Error(p(345));\n  a.finishedWork = a.current.alternate;\n  a.finishedLanes = b;\n  Qk(a, uk, vk);\n  Ek(a, B());\n  return null;\n}\nfunction Rk(a, b) {\n  var c = K;\n  K |= 1;\n  try {\n    return a(b);\n  } finally {\n    K = c, 0 === K && (Hj = B() + 500, fg && jg());\n  }\n}\nfunction Sk(a) {\n  null !== xk && 0 === xk.tag && 0 === (K & 6) && Ik();\n  var b = K;\n  K |= 1;\n  var c = pk.transition,\n    d = C;\n  try {\n    if (pk.transition = null, C = 1, a) return a();\n  } finally {\n    C = d, pk.transition = c, K = b, 0 === (K & 6) && jg();\n  }\n}\nfunction Ij() {\n  gj = fj.current;\n  E(fj);\n}\nfunction Lk(a, b) {\n  a.finishedWork = null;\n  a.finishedLanes = 0;\n  var c = a.timeoutHandle;\n  -1 !== c && (a.timeoutHandle = -1, Gf(c));\n  if (null !== Y) for (c = Y.return; null !== c;) {\n    var d = c;\n    wg(d);\n    switch (d.tag) {\n      case 1:\n        d = d.type.childContextTypes;\n        null !== d && void 0 !== d && $f();\n        break;\n      case 3:\n        Jh();\n        E(Wf);\n        E(H);\n        Oh();\n        break;\n      case 5:\n        Lh(d);\n        break;\n      case 4:\n        Jh();\n        break;\n      case 13:\n        E(M);\n        break;\n      case 19:\n        E(M);\n        break;\n      case 10:\n        Rg(d.type._context);\n        break;\n      case 22:\n      case 23:\n        Ij();\n    }\n    c = c.return;\n  }\n  R = a;\n  Y = a = wh(a.current, null);\n  Z = gj = b;\n  T = 0;\n  qk = null;\n  sk = rk = hh = 0;\n  uk = tk = null;\n  if (null !== Wg) {\n    for (b = 0; b < Wg.length; b++) if (c = Wg[b], d = c.interleaved, null !== d) {\n      c.interleaved = null;\n      var e = d.next,\n        f = c.pending;\n      if (null !== f) {\n        var g = f.next;\n        f.next = e;\n        d.next = g;\n      }\n      c.pending = d;\n    }\n    Wg = null;\n  }\n  return a;\n}\nfunction Nk(a, b) {\n  do {\n    var c = Y;\n    try {\n      Qg();\n      Ph.current = ai;\n      if (Sh) {\n        for (var d = N.memoizedState; null !== d;) {\n          var e = d.queue;\n          null !== e && (e.pending = null);\n          d = d.next;\n        }\n        Sh = !1;\n      }\n      Rh = 0;\n      P = O = N = null;\n      Th = !1;\n      Uh = 0;\n      ok.current = null;\n      if (null === c || null === c.return) {\n        T = 1;\n        qk = b;\n        Y = null;\n        break;\n      }\n      a: {\n        var f = a,\n          g = c.return,\n          h = c,\n          k = b;\n        b = Z;\n        h.flags |= 32768;\n        if (null !== k && "object" === typeof k && "function" === typeof k.then) {\n          var l = k,\n            m = h,\n            q = m.tag;\n          if (0 === (m.mode & 1) && (0 === q || 11 === q || 15 === q)) {\n            var r = m.alternate;\n            r ? (m.updateQueue = r.updateQueue, m.memoizedState = r.memoizedState, m.lanes = r.lanes) : (m.updateQueue = null, m.memoizedState = null);\n          }\n          var y = Vi(g);\n          if (null !== y) {\n            y.flags &= -257;\n            Wi(y, g, h, f, b);\n            y.mode & 1 && Ti(f, l, b);\n            b = y;\n            k = l;\n            var n = b.updateQueue;\n            if (null === n) {\n              var t = new Set();\n              t.add(k);\n              b.updateQueue = t;\n            } else n.add(k);\n            break a;\n          } else {\n            if (0 === (b & 1)) {\n              Ti(f, l, b);\n              uj();\n              break a;\n            }\n            k = Error(p(426));\n          }\n        } else if (I && h.mode & 1) {\n          var J = Vi(g);\n          if (null !== J) {\n            0 === (J.flags & 65536) && (J.flags |= 256);\n            Wi(J, g, h, f, b);\n            Jg(Ki(k, h));\n            break a;\n          }\n        }\n        f = k = Ki(k, h);\n        4 !== T && (T = 2);\n        null === tk ? tk = [f] : tk.push(f);\n        f = g;\n        do {\n          switch (f.tag) {\n            case 3:\n              f.flags |= 65536;\n              b &= -b;\n              f.lanes |= b;\n              var x = Oi(f, k, b);\n              fh(f, x);\n              break a;\n            case 1:\n              h = k;\n              var w = f.type,\n                u = f.stateNode;\n              if (0 === (f.flags & 128) && ("function" === typeof w.getDerivedStateFromError || null !== u && "function" === typeof u.componentDidCatch && (null === Si || !Si.has(u)))) {\n                f.flags |= 65536;\n                b &= -b;\n                f.lanes |= b;\n                var F = Ri(f, h, b);\n                fh(f, F);\n                break a;\n              }\n          }\n          f = f.return;\n        } while (null !== f);\n      }\n      Tk(c);\n    } catch (na) {\n      b = na;\n      Y === c && null !== c && (Y = c = c.return);\n      continue;\n    }\n    break;\n  } while (1);\n}\nfunction Kk() {\n  var a = nk.current;\n  nk.current = ai;\n  return null === a ? ai : a;\n}\nfunction uj() {\n  if (0 === T || 3 === T || 2 === T) T = 4;\n  null === R || 0 === (hh & 268435455) && 0 === (rk & 268435455) || Dk(R, Z);\n}\nfunction Jk(a, b) {\n  var c = K;\n  K |= 2;\n  var d = Kk();\n  if (R !== a || Z !== b) vk = null, Lk(a, b);\n  do try {\n    Uk();\n    break;\n  } catch (e) {\n    Nk(a, e);\n  } while (1);\n  Qg();\n  K = c;\n  nk.current = d;\n  if (null !== Y) throw Error(p(261));\n  R = null;\n  Z = 0;\n  return T;\n}\nfunction Uk() {\n  for (; null !== Y;) Vk(Y);\n}\nfunction Mk() {\n  for (; null !== Y && !cc();) Vk(Y);\n}\nfunction Vk(a) {\n  var b = Wk(a.alternate, a, gj);\n  a.memoizedProps = a.pendingProps;\n  null === b ? Tk(a) : Y = b;\n  ok.current = null;\n}\nfunction Tk(a) {\n  var b = a;\n  do {\n    var c = b.alternate;\n    a = b.return;\n    if (0 === (b.flags & 32768)) {\n      if (c = Fj(c, b, gj), null !== c) {\n        Y = c;\n        return;\n      }\n    } else {\n      c = Jj(c, b);\n      if (null !== c) {\n        c.flags &= 32767;\n        Y = c;\n        return;\n      }\n      if (null !== a) a.flags |= 32768, a.subtreeFlags = 0, a.deletions = null;else {\n        T = 6;\n        Y = null;\n        return;\n      }\n    }\n    b = b.sibling;\n    if (null !== b) {\n      Y = b;\n      return;\n    }\n    Y = b = a;\n  } while (null !== b);\n  0 === T && (T = 5);\n}\nfunction Qk(a, b, c) {\n  var d = C,\n    e = pk.transition;\n  try {\n    pk.transition = null, C = 1, Xk(a, b, c, d);\n  } finally {\n    pk.transition = e, C = d;\n  }\n  return null;\n}\nfunction Xk(a, b, c, d) {\n  do Ik(); while (null !== xk);\n  if (0 !== (K & 6)) throw Error(p(327));\n  c = a.finishedWork;\n  var e = a.finishedLanes;\n  if (null === c) return null;\n  a.finishedWork = null;\n  a.finishedLanes = 0;\n  if (c === a.current) throw Error(p(177));\n  a.callbackNode = null;\n  a.callbackPriority = 0;\n  var f = c.lanes | c.childLanes;\n  Bc(a, f);\n  a === R && (Y = R = null, Z = 0);\n  0 === (c.subtreeFlags & 2064) && 0 === (c.flags & 2064) || wk || (wk = !0, Gk(hc, function () {\n    Ik();\n    return null;\n  }));\n  f = 0 !== (c.flags & 15990);\n  if (0 !== (c.subtreeFlags & 15990) || f) {\n    f = pk.transition;\n    pk.transition = null;\n    var g = C;\n    C = 1;\n    var h = K;\n    K |= 4;\n    ok.current = null;\n    Pj(a, c);\n    ek(c, a);\n    Oe(Df);\n    dd = !!Cf;\n    Df = Cf = null;\n    a.current = c;\n    ik(c, a, e);\n    dc();\n    K = h;\n    C = g;\n    pk.transition = f;\n  } else a.current = c;\n  wk && (wk = !1, xk = a, yk = e);\n  f = a.pendingLanes;\n  0 === f && (Si = null);\n  mc(c.stateNode, d);\n  Ek(a, B());\n  if (null !== b) for (d = a.onRecoverableError, c = 0; c < b.length; c++) e = b[c], d(e.value, {\n    componentStack: e.stack,\n    digest: e.digest\n  });\n  if (Pi) throw Pi = !1, a = Qi, Qi = null, a;\n  0 !== (yk & 1) && 0 !== a.tag && Ik();\n  f = a.pendingLanes;\n  0 !== (f & 1) ? a === Ak ? zk++ : (zk = 0, Ak = a) : zk = 0;\n  jg();\n  return null;\n}\nfunction Ik() {\n  if (null !== xk) {\n    var a = Dc(yk),\n      b = pk.transition,\n      c = C;\n    try {\n      pk.transition = null;\n      C = 16 > a ? 16 : a;\n      if (null === xk) var d = !1;else {\n        a = xk;\n        xk = null;\n        yk = 0;\n        if (0 !== (K & 6)) throw Error(p(331));\n        var e = K;\n        K |= 4;\n        for (V = a.current; null !== V;) {\n          var f = V,\n            g = f.child;\n          if (0 !== (V.flags & 16)) {\n            var h = f.deletions;\n            if (null !== h) {\n              for (var k = 0; k < h.length; k++) {\n                var l = h[k];\n                for (V = l; null !== V;) {\n                  var m = V;\n                  switch (m.tag) {\n                    case 0:\n                    case 11:\n                    case 15:\n                      Qj(8, m, f);\n                  }\n                  var q = m.child;\n                  if (null !== q) q.return = m, V = q;else for (; null !== V;) {\n                    m = V;\n                    var r = m.sibling,\n                      y = m.return;\n                    Tj(m);\n                    if (m === l) {\n                      V = null;\n                      break;\n                    }\n                    if (null !== r) {\n                      r.return = y;\n                      V = r;\n                      break;\n                    }\n                    V = y;\n                  }\n                }\n              }\n              var n = f.alternate;\n              if (null !== n) {\n                var t = n.child;\n                if (null !== t) {\n                  n.child = null;\n                  do {\n                    var J = t.sibling;\n                    t.sibling = null;\n                    t = J;\n                  } while (null !== t);\n                }\n              }\n              V = f;\n            }\n          }\n          if (0 !== (f.subtreeFlags & 2064) && null !== g) g.return = f, V = g;else b: for (; null !== V;) {\n            f = V;\n            if (0 !== (f.flags & 2048)) switch (f.tag) {\n              case 0:\n              case 11:\n              case 15:\n                Qj(9, f, f.return);\n            }\n            var x = f.sibling;\n            if (null !== x) {\n              x.return = f.return;\n              V = x;\n              break b;\n            }\n            V = f.return;\n          }\n        }\n        var w = a.current;\n        for (V = w; null !== V;) {\n          g = V;\n          var u = g.child;\n          if (0 !== (g.subtreeFlags & 2064) && null !== u) u.return = g, V = u;else b: for (g = w; null !== V;) {\n            h = V;\n            if (0 !== (h.flags & 2048)) try {\n              switch (h.tag) {\n                case 0:\n                case 11:\n                case 15:\n                  Rj(9, h);\n              }\n            } catch (na) {\n              W(h, h.return, na);\n            }\n            if (h === g) {\n              V = null;\n              break b;\n            }\n            var F = h.sibling;\n            if (null !== F) {\n              F.return = h.return;\n              V = F;\n              break b;\n            }\n            V = h.return;\n          }\n        }\n        K = e;\n        jg();\n        if (lc && "function" === typeof lc.onPostCommitFiberRoot) try {\n          lc.onPostCommitFiberRoot(kc, a);\n        } catch (na) {}\n        d = !0;\n      }\n      return d;\n    } finally {\n      C = c, pk.transition = b;\n    }\n  }\n  return !1;\n}\nfunction Yk(a, b, c) {\n  b = Ki(c, b);\n  b = Oi(a, b, 1);\n  a = dh(a, b, 1);\n  b = L();\n  null !== a && (Ac(a, 1, b), Ek(a, b));\n}\nfunction W(a, b, c) {\n  if (3 === a.tag) Yk(a, a, c);else for (; null !== b;) {\n    if (3 === b.tag) {\n      Yk(b, a, c);\n      break;\n    } else if (1 === b.tag) {\n      var d = b.stateNode;\n      if ("function" === typeof b.type.getDerivedStateFromError || "function" === typeof d.componentDidCatch && (null === Si || !Si.has(d))) {\n        a = Ki(c, a);\n        a = Ri(b, a, 1);\n        b = dh(b, a, 1);\n        a = L();\n        null !== b && (Ac(b, 1, a), Ek(b, a));\n        break;\n      }\n    }\n    b = b.return;\n  }\n}\nfunction Ui(a, b, c) {\n  var d = a.pingCache;\n  null !== d && d.delete(b);\n  b = L();\n  a.pingedLanes |= a.suspendedLanes & c;\n  R === a && (Z & c) === c && (4 === T || 3 === T && (Z & 130023424) === Z && 500 > B() - gk ? Lk(a, 0) : sk |= c);\n  Ek(a, b);\n}\nfunction Zk(a, b) {\n  0 === b && (0 === (a.mode & 1) ? b = 1 : (b = sc, sc <<= 1, 0 === (sc & 130023424) && (sc = 4194304)));\n  var c = L();\n  a = Zg(a, b);\n  null !== a && (Ac(a, b, c), Ek(a, c));\n}\nfunction vj(a) {\n  var b = a.memoizedState,\n    c = 0;\n  null !== b && (c = b.retryLane);\n  Zk(a, c);\n}\nfunction ck(a, b) {\n  var c = 0;\n  switch (a.tag) {\n    case 13:\n      var d = a.stateNode;\n      var e = a.memoizedState;\n      null !== e && (c = e.retryLane);\n      break;\n    case 19:\n      d = a.stateNode;\n      break;\n    default:\n      throw Error(p(314));\n  }\n  null !== d && d.delete(b);\n  Zk(a, c);\n}\nvar Wk;\nWk = function (a, b, c) {\n  if (null !== a) {\n    if (a.memoizedProps !== b.pendingProps || Wf.current) Ug = !0;else {\n      if (0 === (a.lanes & c) && 0 === (b.flags & 128)) return Ug = !1, zj(a, b, c);\n      Ug = 0 !== (a.flags & 131072) ? !0 : !1;\n    }\n  } else Ug = !1, I && 0 !== (b.flags & 1048576) && ug(b, ng, b.index);\n  b.lanes = 0;\n  switch (b.tag) {\n    case 2:\n      var d = b.type;\n      jj(a, b);\n      a = b.pendingProps;\n      var e = Yf(b, H.current);\n      Tg(b, c);\n      e = Xh(null, b, d, a, e, c);\n      var f = bi();\n      b.flags |= 1;\n      "object" === typeof e && null !== e && "function" === typeof e.render && void 0 === e.$$typeof ? (b.tag = 1, b.memoizedState = null, b.updateQueue = null, Zf(d) ? (f = !0, cg(b)) : f = !1, b.memoizedState = null !== e.state && void 0 !== e.state ? e.state : null, ah(b), e.updater = nh, b.stateNode = e, e._reactInternals = b, rh(b, d, a, c), b = kj(null, b, d, !0, f, c)) : (b.tag = 0, I && f && vg(b), Yi(null, b, e, c), b = b.child);\n      return b;\n    case 16:\n      d = b.elementType;\n      a: {\n        jj(a, b);\n        a = b.pendingProps;\n        e = d._init;\n        d = e(d._payload);\n        b.type = d;\n        e = b.tag = $k(d);\n        a = Lg(d, a);\n        switch (e) {\n          case 0:\n            b = dj(null, b, d, a, c);\n            break a;\n          case 1:\n            b = ij(null, b, d, a, c);\n            break a;\n          case 11:\n            b = Zi(null, b, d, a, c);\n            break a;\n          case 14:\n            b = aj(null, b, d, Lg(d.type, a), c);\n            break a;\n        }\n        throw Error(p(306, d, ""));\n      }\n      return b;\n    case 0:\n      return d = b.type, e = b.pendingProps, e = b.elementType === d ? e : Lg(d, e), dj(a, b, d, e, c);\n    case 1:\n      return d = b.type, e = b.pendingProps, e = b.elementType === d ? e : Lg(d, e), ij(a, b, d, e, c);\n    case 3:\n      a: {\n        lj(b);\n        if (null === a) throw Error(p(387));\n        d = b.pendingProps;\n        f = b.memoizedState;\n        e = f.element;\n        bh(a, b);\n        gh(b, d, null, c);\n        var g = b.memoizedState;\n        d = g.element;\n        if (f.isDehydrated) {\n          if (f = {\n            element: d,\n            isDehydrated: !1,\n            cache: g.cache,\n            pendingSuspenseBoundaries: g.pendingSuspenseBoundaries,\n            transitions: g.transitions\n          }, b.updateQueue.baseState = f, b.memoizedState = f, b.flags & 256) {\n            e = Ki(Error(p(423)), b);\n            b = mj(a, b, d, c, e);\n            break a;\n          } else if (d !== e) {\n            e = Ki(Error(p(424)), b);\n            b = mj(a, b, d, c, e);\n            break a;\n          } else for (yg = Lf(b.stateNode.containerInfo.firstChild), xg = b, I = !0, zg = null, c = Ch(b, null, d, c), b.child = c; c;) c.flags = c.flags & -3 | 4096, c = c.sibling;\n        } else {\n          Ig();\n          if (d === e) {\n            b = $i(a, b, c);\n            break a;\n          }\n          Yi(a, b, d, c);\n        }\n        b = b.child;\n      }\n      return b;\n    case 5:\n      return Kh(b), null === a && Eg(b), d = b.type, e = b.pendingProps, f = null !== a ? a.memoizedProps : null, g = e.children, Ef(d, e) ? g = null : null !== f && Ef(d, f) && (b.flags |= 32), hj(a, b), Yi(a, b, g, c), b.child;\n    case 6:\n      return null === a && Eg(b), null;\n    case 13:\n      return pj(a, b, c);\n    case 4:\n      return Ih(b, b.stateNode.containerInfo), d = b.pendingProps, null === a ? b.child = Bh(b, null, d, c) : Yi(a, b, d, c), b.child;\n    case 11:\n      return d = b.type, e = b.pendingProps, e = b.elementType === d ? e : Lg(d, e), Zi(a, b, d, e, c);\n    case 7:\n      return Yi(a, b, b.pendingProps, c), b.child;\n    case 8:\n      return Yi(a, b, b.pendingProps.children, c), b.child;\n    case 12:\n      return Yi(a, b, b.pendingProps.children, c), b.child;\n    case 10:\n      a: {\n        d = b.type._context;\n        e = b.pendingProps;\n        f = b.memoizedProps;\n        g = e.value;\n        G(Mg, d._currentValue);\n        d._currentValue = g;\n        if (null !== f) if (He(f.value, g)) {\n          if (f.children === e.children && !Wf.current) {\n            b = $i(a, b, c);\n            break a;\n          }\n        } else for (f = b.child, null !== f && (f.return = b); null !== f;) {\n          var h = f.dependencies;\n          if (null !== h) {\n            g = f.child;\n            for (var k = h.firstContext; null !== k;) {\n              if (k.context === d) {\n                if (1 === f.tag) {\n                  k = ch(-1, c & -c);\n                  k.tag = 2;\n                  var l = f.updateQueue;\n                  if (null !== l) {\n                    l = l.shared;\n                    var m = l.pending;\n                    null === m ? k.next = k : (k.next = m.next, m.next = k);\n                    l.pending = k;\n                  }\n                }\n                f.lanes |= c;\n                k = f.alternate;\n                null !== k && (k.lanes |= c);\n                Sg(f.return, c, b);\n                h.lanes |= c;\n                break;\n              }\n              k = k.next;\n            }\n          } else if (10 === f.tag) g = f.type === b.type ? null : f.child;else if (18 === f.tag) {\n            g = f.return;\n            if (null === g) throw Error(p(341));\n            g.lanes |= c;\n            h = g.alternate;\n            null !== h && (h.lanes |= c);\n            Sg(g, c, b);\n            g = f.sibling;\n          } else g = f.child;\n          if (null !== g) g.return = f;else for (g = f; null !== g;) {\n            if (g === b) {\n              g = null;\n              break;\n            }\n            f = g.sibling;\n            if (null !== f) {\n              f.return = g.return;\n              g = f;\n              break;\n            }\n            g = g.return;\n          }\n          f = g;\n        }\n        Yi(a, b, e.children, c);\n        b = b.child;\n      }\n      return b;\n    case 9:\n      return e = b.type, d = b.pendingProps.children, Tg(b, c), e = Vg(e), d = d(e), b.flags |= 1, Yi(a, b, d, c), b.child;\n    case 14:\n      return d = b.type, e = Lg(d, b.pendingProps), e = Lg(d.type, e), aj(a, b, d, e, c);\n    case 15:\n      return cj(a, b, b.type, b.pendingProps, c);\n    case 17:\n      return d = b.type, e = b.pendingProps, e = b.elementType === d ? e : Lg(d, e), jj(a, b), b.tag = 1, Zf(d) ? (a = !0, cg(b)) : a = !1, Tg(b, c), ph(b, d, e), rh(b, d, e, c), kj(null, b, d, !0, a, c);\n    case 19:\n      return yj(a, b, c);\n    case 22:\n      return ej(a, b, c);\n  }\n  throw Error(p(156, b.tag));\n};\nfunction Gk(a, b) {\n  return ac(a, b);\n}\nfunction al(a, b, c, d) {\n  this.tag = a;\n  this.key = c;\n  this.sibling = this.child = this.return = this.stateNode = this.type = this.elementType = null;\n  this.index = 0;\n  this.ref = null;\n  this.pendingProps = b;\n  this.dependencies = this.memoizedState = this.updateQueue = this.memoizedProps = null;\n  this.mode = d;\n  this.subtreeFlags = this.flags = 0;\n  this.deletions = null;\n  this.childLanes = this.lanes = 0;\n  this.alternate = null;\n}\nfunction Bg(a, b, c, d) {\n  return new al(a, b, c, d);\n}\nfunction bj(a) {\n  a = a.prototype;\n  return !(!a || !a.isReactComponent);\n}\nfunction $k(a) {\n  if ("function" === typeof a) return bj(a) ? 1 : 0;\n  if (void 0 !== a && null !== a) {\n    a = a.$$typeof;\n    if (a === Da) return 11;\n    if (a === Ga) return 14;\n  }\n  return 2;\n}\nfunction wh(a, b) {\n  var c = a.alternate;\n  null === c ? (c = Bg(a.tag, b, a.key, a.mode), c.elementType = a.elementType, c.type = a.type, c.stateNode = a.stateNode, c.alternate = a, a.alternate = c) : (c.pendingProps = b, c.type = a.type, c.flags = 0, c.subtreeFlags = 0, c.deletions = null);\n  c.flags = a.flags & 14680064;\n  c.childLanes = a.childLanes;\n  c.lanes = a.lanes;\n  c.child = a.child;\n  c.memoizedProps = a.memoizedProps;\n  c.memoizedState = a.memoizedState;\n  c.updateQueue = a.updateQueue;\n  b = a.dependencies;\n  c.dependencies = null === b ? null : {\n    lanes: b.lanes,\n    firstContext: b.firstContext\n  };\n  c.sibling = a.sibling;\n  c.index = a.index;\n  c.ref = a.ref;\n  return c;\n}\nfunction yh(a, b, c, d, e, f) {\n  var g = 2;\n  d = a;\n  if ("function" === typeof a) bj(a) && (g = 1);else if ("string" === typeof a) g = 5;else a: switch (a) {\n    case ya:\n      return Ah(c.children, e, f, b);\n    case za:\n      g = 8;\n      e |= 8;\n      break;\n    case Aa:\n      return a = Bg(12, c, b, e | 2), a.elementType = Aa, a.lanes = f, a;\n    case Ea:\n      return a = Bg(13, c, b, e), a.elementType = Ea, a.lanes = f, a;\n    case Fa:\n      return a = Bg(19, c, b, e), a.elementType = Fa, a.lanes = f, a;\n    case Ia:\n      return qj(c, e, f, b);\n    default:\n      if ("object" === typeof a && null !== a) switch (a.$$typeof) {\n        case Ba:\n          g = 10;\n          break a;\n        case Ca:\n          g = 9;\n          break a;\n        case Da:\n          g = 11;\n          break a;\n        case Ga:\n          g = 14;\n          break a;\n        case Ha:\n          g = 16;\n          d = null;\n          break a;\n      }\n      throw Error(p(130, null == a ? a : typeof a, ""));\n  }\n  b = Bg(g, c, b, e);\n  b.elementType = a;\n  b.type = d;\n  b.lanes = f;\n  return b;\n}\nfunction Ah(a, b, c, d) {\n  a = Bg(7, a, d, b);\n  a.lanes = c;\n  return a;\n}\nfunction qj(a, b, c, d) {\n  a = Bg(22, a, d, b);\n  a.elementType = Ia;\n  a.lanes = c;\n  a.stateNode = {\n    isHidden: !1\n  };\n  return a;\n}\nfunction xh(a, b, c) {\n  a = Bg(6, a, null, b);\n  a.lanes = c;\n  return a;\n}\nfunction zh(a, b, c) {\n  b = Bg(4, null !== a.children ? a.children : [], a.key, b);\n  b.lanes = c;\n  b.stateNode = {\n    containerInfo: a.containerInfo,\n    pendingChildren: null,\n    implementation: a.implementation\n  };\n  return b;\n}\nfunction bl(a, b, c, d, e) {\n  this.tag = b;\n  this.containerInfo = a;\n  this.finishedWork = this.pingCache = this.current = this.pendingChildren = null;\n  this.timeoutHandle = -1;\n  this.callbackNode = this.pendingContext = this.context = null;\n  this.callbackPriority = 0;\n  this.eventTimes = zc(0);\n  this.expirationTimes = zc(-1);\n  this.entangledLanes = this.finishedLanes = this.mutableReadLanes = this.expiredLanes = this.pingedLanes = this.suspendedLanes = this.pendingLanes = 0;\n  this.entanglements = zc(0);\n  this.identifierPrefix = d;\n  this.onRecoverableError = e;\n  this.mutableSourceEagerHydrationData = null;\n}\nfunction cl(a, b, c, d, e, f, g, h, k) {\n  a = new bl(a, b, c, h, k);\n  1 === b ? (b = 1, !0 === f && (b |= 8)) : b = 0;\n  f = Bg(3, null, null, b);\n  a.current = f;\n  f.stateNode = a;\n  f.memoizedState = {\n    element: d,\n    isDehydrated: c,\n    cache: null,\n    transitions: null,\n    pendingSuspenseBoundaries: null\n  };\n  ah(f);\n  return a;\n}\nfunction dl(a, b, c) {\n  var d = 3 < arguments.length && void 0 !== arguments[3] ? arguments[3] : null;\n  return {\n    $$typeof: wa,\n    key: null == d ? null : "" + d,\n    children: a,\n    containerInfo: b,\n    implementation: c\n  };\n}\nfunction el(a) {\n  if (!a) return Vf;\n  a = a._reactInternals;\n  a: {\n    if (Vb(a) !== a || 1 !== a.tag) throw Error(p(170));\n    var b = a;\n    do {\n      switch (b.tag) {\n        case 3:\n          b = b.stateNode.context;\n          break a;\n        case 1:\n          if (Zf(b.type)) {\n            b = b.stateNode.__reactInternalMemoizedMergedChildContext;\n            break a;\n          }\n      }\n      b = b.return;\n    } while (null !== b);\n    throw Error(p(171));\n  }\n  if (1 === a.tag) {\n    var c = a.type;\n    if (Zf(c)) return bg(a, c, b);\n  }\n  return b;\n}\nfunction fl(a, b, c, d, e, f, g, h, k) {\n  a = cl(c, d, !0, a, e, f, g, h, k);\n  a.context = el(null);\n  c = a.current;\n  d = L();\n  e = lh(c);\n  f = ch(d, e);\n  f.callback = void 0 !== b && null !== b ? b : null;\n  dh(c, f, e);\n  a.current.lanes = e;\n  Ac(a, e, d);\n  Ek(a, d);\n  return a;\n}\nfunction gl(a, b, c, d) {\n  var e = b.current,\n    f = L(),\n    g = lh(e);\n  c = el(c);\n  null === b.context ? b.context = c : b.pendingContext = c;\n  b = ch(f, g);\n  b.payload = {\n    element: a\n  };\n  d = void 0 === d ? null : d;\n  null !== d && (b.callback = d);\n  a = dh(e, b, g);\n  null !== a && (mh(a, e, g, f), eh(a, e, g));\n  return g;\n}\nfunction hl(a) {\n  a = a.current;\n  if (!a.child) return null;\n  switch (a.child.tag) {\n    case 5:\n      return a.child.stateNode;\n    default:\n      return a.child.stateNode;\n  }\n}\nfunction il(a, b) {\n  a = a.memoizedState;\n  if (null !== a && null !== a.dehydrated) {\n    var c = a.retryLane;\n    a.retryLane = 0 !== c && c < b ? c : b;\n  }\n}\nfunction jl(a, b) {\n  il(a, b);\n  (a = a.alternate) && il(a, b);\n}\nfunction kl() {\n  return null;\n}\nvar ll = "function" === typeof reportError ? reportError : function (a) {\n  console.error(a);\n};\nfunction ml(a) {\n  this._internalRoot = a;\n}\nnl.prototype.render = ml.prototype.render = function (a) {\n  var b = this._internalRoot;\n  if (null === b) throw Error(p(409));\n  gl(a, b, null, null);\n};\nnl.prototype.unmount = ml.prototype.unmount = function () {\n  var a = this._internalRoot;\n  if (null !== a) {\n    this._internalRoot = null;\n    var b = a.containerInfo;\n    Sk(function () {\n      gl(null, a, null, null);\n    });\n    b[uf] = null;\n  }\n};\nfunction nl(a) {\n  this._internalRoot = a;\n}\nnl.prototype.unstable_scheduleHydration = function (a) {\n  if (a) {\n    var b = Hc();\n    a = {\n      blockedOn: null,\n      target: a,\n      priority: b\n    };\n    for (var c = 0; c < Qc.length && 0 !== b && b < Qc[c].priority; c++);\n    Qc.splice(c, 0, a);\n    0 === c && Vc(a);\n  }\n};\nfunction ol(a) {\n  return !(!a || 1 !== a.nodeType && 9 !== a.nodeType && 11 !== a.nodeType);\n}\nfunction pl(a) {\n  return !(!a || 1 !== a.nodeType && 9 !== a.nodeType && 11 !== a.nodeType && (8 !== a.nodeType || " react-mount-point-unstable " !== a.nodeValue));\n}\nfunction ql() {}\nfunction rl(a, b, c, d, e) {\n  if (e) {\n    if ("function" === typeof d) {\n      var f = d;\n      d = function () {\n        var a = hl(g);\n        f.call(a);\n      };\n    }\n    var g = fl(b, d, a, 0, null, !1, !1, "", ql);\n    a._reactRootContainer = g;\n    a[uf] = g.current;\n    sf(8 === a.nodeType ? a.parentNode : a);\n    Sk();\n    return g;\n  }\n  for (; e = a.lastChild;) a.removeChild(e);\n  if ("function" === typeof d) {\n    var h = d;\n    d = function () {\n      var a = hl(k);\n      h.call(a);\n    };\n  }\n  var k = cl(a, 0, !1, null, null, !1, !1, "", ql);\n  a._reactRootContainer = k;\n  a[uf] = k.current;\n  sf(8 === a.nodeType ? a.parentNode : a);\n  Sk(function () {\n    gl(b, k, c, d);\n  });\n  return k;\n}\nfunction sl(a, b, c, d, e) {\n  var f = c._reactRootContainer;\n  if (f) {\n    var g = f;\n    if ("function" === typeof e) {\n      var h = e;\n      e = function () {\n        var a = hl(g);\n        h.call(a);\n      };\n    }\n    gl(b, g, a, e);\n  } else g = rl(c, b, a, e, d);\n  return hl(g);\n}\nEc = function (a) {\n  switch (a.tag) {\n    case 3:\n      var b = a.stateNode;\n      if (b.current.memoizedState.isDehydrated) {\n        var c = tc(b.pendingLanes);\n        0 !== c && (Cc(b, c | 1), Ek(b, B()), 0 === (K & 6) && (Hj = B() + 500, jg()));\n      }\n      break;\n    case 13:\n      Sk(function () {\n        var b = Zg(a, 1);\n        if (null !== b) {\n          var c = L();\n          mh(b, a, 1, c);\n        }\n      }), jl(a, 1);\n  }\n};\nFc = function (a) {\n  if (13 === a.tag) {\n    var b = Zg(a, 134217728);\n    if (null !== b) {\n      var c = L();\n      mh(b, a, 134217728, c);\n    }\n    jl(a, 134217728);\n  }\n};\nGc = function (a) {\n  if (13 === a.tag) {\n    var b = lh(a),\n      c = Zg(a, b);\n    if (null !== c) {\n      var d = L();\n      mh(c, a, b, d);\n    }\n    jl(a, b);\n  }\n};\nHc = function () {\n  return C;\n};\nIc = function (a, b) {\n  var c = C;\n  try {\n    return C = a, b();\n  } finally {\n    C = c;\n  }\n};\nyb = function (a, b, c) {\n  switch (b) {\n    case "input":\n      bb(a, c);\n      b = c.name;\n      if ("radio" === c.type && null != b) {\n        for (c = a; c.parentNode;) c = c.parentNode;\n        c = c.querySelectorAll("input[name=" + JSON.stringify("" + b) + \'][type="radio"]\');\n        for (b = 0; b < c.length; b++) {\n          var d = c[b];\n          if (d !== a && d.form === a.form) {\n            var e = Db(d);\n            if (!e) throw Error(p(90));\n            Wa(d);\n            bb(d, e);\n          }\n        }\n      }\n      break;\n    case "textarea":\n      ib(a, c);\n      break;\n    case "select":\n      b = c.value, null != b && fb(a, !!c.multiple, b, !1);\n  }\n};\nGb = Rk;\nHb = Sk;\nvar tl = {\n    usingClientEntryPoint: !1,\n    Events: [Cb, ue, Db, Eb, Fb, Rk]\n  },\n  ul = {\n    findFiberByHostInstance: Wc,\n    bundleType: 0,\n    version: "18.2.0",\n    rendererPackageName: "react-dom"\n  };\nvar vl = {\n  bundleType: ul.bundleType,\n  version: ul.version,\n  rendererPackageName: ul.rendererPackageName,\n  rendererConfig: ul.rendererConfig,\n  overrideHookState: null,\n  overrideHookStateDeletePath: null,\n  overrideHookStateRenamePath: null,\n  overrideProps: null,\n  overridePropsDeletePath: null,\n  overridePropsRenamePath: null,\n  setErrorHandler: null,\n  setSuspenseHandler: null,\n  scheduleUpdate: null,\n  currentDispatcherRef: ua.ReactCurrentDispatcher,\n  findHostInstanceByFiber: function (a) {\n    a = Zb(a);\n    return null === a ? null : a.stateNode;\n  },\n  findFiberByHostInstance: ul.findFiberByHostInstance || kl,\n  findHostInstancesForRefresh: null,\n  scheduleRefresh: null,\n  scheduleRoot: null,\n  setRefreshHandler: null,\n  getCurrentFiber: null,\n  reconcilerVersion: "18.2.0-next-9e3b772b8-20220608"\n};\nif ("undefined" !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__) {\n  var wl = __REACT_DEVTOOLS_GLOBAL_HOOK__;\n  if (!wl.isDisabled && wl.supportsFiber) try {\n    kc = wl.inject(vl), lc = wl;\n  } catch (a) {}\n}\nexports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = tl;\nexports.createPortal = function (a, b) {\n  var c = 2 < arguments.length && void 0 !== arguments[2] ? arguments[2] : null;\n  if (!ol(b)) throw Error(p(200));\n  return dl(a, b, null, c);\n};\nexports.createRoot = function (a, b) {\n  if (!ol(a)) throw Error(p(299));\n  var c = !1,\n    d = "",\n    e = ll;\n  null !== b && void 0 !== b && (!0 === b.unstable_strictMode && (c = !0), void 0 !== b.identifierPrefix && (d = b.identifierPrefix), void 0 !== b.onRecoverableError && (e = b.onRecoverableError));\n  b = cl(a, 1, !1, null, null, c, !1, d, e);\n  a[uf] = b.current;\n  sf(8 === a.nodeType ? a.parentNode : a);\n  return new ml(b);\n};\nexports.findDOMNode = function (a) {\n  if (null == a) return null;\n  if (1 === a.nodeType) return a;\n  var b = a._reactInternals;\n  if (void 0 === b) {\n    if ("function" === typeof a.render) throw Error(p(188));\n    a = Object.keys(a).join(",");\n    throw Error(p(268, a));\n  }\n  a = Zb(b);\n  a = null === a ? null : a.stateNode;\n  return a;\n};\nexports.flushSync = function (a) {\n  return Sk(a);\n};\nexports.hydrate = function (a, b, c) {\n  if (!pl(b)) throw Error(p(200));\n  return sl(null, a, b, !0, c);\n};\nexports.hydrateRoot = function (a, b, c) {\n  if (!ol(a)) throw Error(p(405));\n  var d = null != c && c.hydratedSources || null,\n    e = !1,\n    f = "",\n    g = ll;\n  null !== c && void 0 !== c && (!0 === c.unstable_strictMode && (e = !0), void 0 !== c.identifierPrefix && (f = c.identifierPrefix), void 0 !== c.onRecoverableError && (g = c.onRecoverableError));\n  b = fl(b, null, a, 1, null != c ? c : null, e, !1, f, g);\n  a[uf] = b.current;\n  sf(a);\n  if (d) for (a = 0; a < d.length; a++) c = d[a], e = c._getVersion, e = e(c._source), null == b.mutableSourceEagerHydrationData ? b.mutableSourceEagerHydrationData = [c, e] : b.mutableSourceEagerHydrationData.push(c, e);\n  return new nl(b);\n};\nexports.render = function (a, b, c) {\n  if (!pl(b)) throw Error(p(200));\n  return sl(null, a, b, !1, c);\n};\nexports.unmountComponentAtNode = function (a) {\n  if (!pl(a)) throw Error(p(40));\n  return a._reactRootContainer ? (Sk(function () {\n    sl(null, null, a, !1, function () {\n      a._reactRootContainer = null;\n      a[uf] = null;\n    });\n  }), !0) : !1;\n};\nexports.unstable_batchedUpdates = Rk;\nexports.unstable_renderSubtreeIntoContainer = function (a, b, c, d) {\n  if (!pl(c)) throw Error(p(200));\n  if (null == a || void 0 === a._reactInternals) throw Error(p(38));\n  return sl(a, b, c, !1, d);\n};\nexports.version = "18.2.0-next-9e3b772b8-20220608";//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///7230\n')},4723:(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval("var __webpack_unused_export__;\n\n\nvar m = __webpack_require__(9834);\nif (true) {\n  exports.H = m.createRoot;\n  __webpack_unused_export__ = m.hydrateRoot;\n} else { var i; }//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDcyMy5qcyIsIm1hcHBpbmdzIjoiO0FBQWE7O0FBRWIsSUFBSUEsQ0FBQyxHQUFHQyxtQkFBTyxDQUFDLElBQVcsQ0FBQztBQUM1QixJQUFJQyxJQUFxQyxFQUFFO0VBQ3pDRyxTQUFrQixHQUFHTCxDQUFDLENBQUNNLFVBQVU7RUFDakNELHlCQUFtQixHQUFHTCxDQUFDLENBQUNPLFdBQVc7QUFDckMsQ0FBQyxNQUFNIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vMjAyNC1rdHNzdHVkaW8taG9tZXdvcmtzLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWRvbS9jbGllbnQuanM/MTFiMSJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbnZhciBtID0gcmVxdWlyZSgncmVhY3QtZG9tJyk7XG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICBleHBvcnRzLmNyZWF0ZVJvb3QgPSBtLmNyZWF0ZVJvb3Q7XG4gIGV4cG9ydHMuaHlkcmF0ZVJvb3QgPSBtLmh5ZHJhdGVSb290O1xufSBlbHNlIHtcbiAgdmFyIGkgPSBtLl9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVEO1xuICBleHBvcnRzLmNyZWF0ZVJvb3QgPSBmdW5jdGlvbihjLCBvKSB7XG4gICAgaS51c2luZ0NsaWVudEVudHJ5UG9pbnQgPSB0cnVlO1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gbS5jcmVhdGVSb290KGMsIG8pO1xuICAgIH0gZmluYWxseSB7XG4gICAgICBpLnVzaW5nQ2xpZW50RW50cnlQb2ludCA9IGZhbHNlO1xuICAgIH1cbiAgfTtcbiAgZXhwb3J0cy5oeWRyYXRlUm9vdCA9IGZ1bmN0aW9uKGMsIGgsIG8pIHtcbiAgICBpLnVzaW5nQ2xpZW50RW50cnlQb2ludCA9IHRydWU7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiBtLmh5ZHJhdGVSb290KGMsIGgsIG8pO1xuICAgIH0gZmluYWxseSB7XG4gICAgICBpLnVzaW5nQ2xpZW50RW50cnlQb2ludCA9IGZhbHNlO1xuICAgIH1cbiAgfTtcbn1cbiJdLCJuYW1lcyI6WyJtIiwicmVxdWlyZSIsInByb2Nlc3MiLCJlbnYiLCJOT0RFX0VOViIsImV4cG9ydHMiLCJjcmVhdGVSb290IiwiaHlkcmF0ZVJvb3QiLCJpIiwiX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRUQiLCJjIiwibyIsInVzaW5nQ2xpZW50RW50cnlQb2ludCIsImgiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///4723\n")},9834:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval("\n\nfunction checkDCE() {\n  /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */\n  if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined' || typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE !== 'function') {\n    return;\n  }\n  if (false) {}\n  try {\n    // Verify that the code above has been dead code eliminated (DCE'd).\n    __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(checkDCE);\n  } catch (err) {\n    // DevTools shouldn't crash React, no matter what.\n    // We should still report in case we break this code.\n    console.error(err);\n  }\n}\nif (true) {\n  // DCE check should happen before ReactDOM bundle executes so that\n  // DevTools can report bad minification during injection.\n  checkDCE();\n  module.exports = __webpack_require__(7230);\n} else {}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTgzNC5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixTQUFTQSxRQUFRQSxDQUFBLEVBQUc7RUFDbEI7RUFDQSxJQUNFLE9BQU9DLDhCQUE4QixLQUFLLFdBQVcsSUFDckQsT0FBT0EsOEJBQThCLENBQUNELFFBQVEsS0FBSyxVQUFVLEVBQzdEO0lBQ0E7RUFDRjtFQUNBLElBQUlFLEtBQXFDLEVBQUUsRUFTMUM7RUFDRCxJQUFJO0lBQ0Y7SUFDQUQsOEJBQThCLENBQUNELFFBQVEsQ0FBQ0EsUUFBUSxDQUFDO0VBQ25ELENBQUMsQ0FBQyxPQUFPTSxHQUFHLEVBQUU7SUFDWjtJQUNBO0lBQ0FDLE9BQU8sQ0FBQ0MsS0FBSyxDQUFDRixHQUFHLENBQUM7RUFDcEI7QUFDRjtBQUVBLElBQUlKLElBQXFDLEVBQUU7RUFDekM7RUFDQTtFQUNBRixRQUFRLENBQUMsQ0FBQztFQUNWUywwQ0FBNkQ7QUFDL0QsQ0FBQyxNQUFNIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vMjAyNC1rdHNzdHVkaW8taG9tZXdvcmtzLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWRvbS9pbmRleC5qcz84YmM4Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuZnVuY3Rpb24gY2hlY2tEQ0UoKSB7XG4gIC8qIGdsb2JhbCBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18gKi9cbiAgaWYgKFxuICAgIHR5cGVvZiBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18gPT09ICd1bmRlZmluZWQnIHx8XG4gICAgdHlwZW9mIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXy5jaGVja0RDRSAhPT0gJ2Z1bmN0aW9uJ1xuICApIHtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAvLyBUaGlzIGJyYW5jaCBpcyB1bnJlYWNoYWJsZSBiZWNhdXNlIHRoaXMgZnVuY3Rpb24gaXMgb25seSBjYWxsZWRcbiAgICAvLyBpbiBwcm9kdWN0aW9uLCBidXQgdGhlIGNvbmRpdGlvbiBpcyB0cnVlIG9ubHkgaW4gZGV2ZWxvcG1lbnQuXG4gICAgLy8gVGhlcmVmb3JlIGlmIHRoZSBicmFuY2ggaXMgc3RpbGwgaGVyZSwgZGVhZCBjb2RlIGVsaW1pbmF0aW9uIHdhc24ndFxuICAgIC8vIHByb3Blcmx5IGFwcGxpZWQuXG4gICAgLy8gRG9uJ3QgY2hhbmdlIHRoZSBtZXNzYWdlLiBSZWFjdCBEZXZUb29scyByZWxpZXMgb24gaXQuIEFsc28gbWFrZSBzdXJlXG4gICAgLy8gdGhpcyBtZXNzYWdlIGRvZXNuJ3Qgb2NjdXIgZWxzZXdoZXJlIGluIHRoaXMgZnVuY3Rpb24sIG9yIGl0IHdpbGwgY2F1c2VcbiAgICAvLyBhIGZhbHNlIHBvc2l0aXZlLlxuICAgIHRocm93IG5ldyBFcnJvcignXl9eJyk7XG4gIH1cbiAgdHJ5IHtcbiAgICAvLyBWZXJpZnkgdGhhdCB0aGUgY29kZSBhYm92ZSBoYXMgYmVlbiBkZWFkIGNvZGUgZWxpbWluYXRlZCAoRENFJ2QpLlxuICAgIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXy5jaGVja0RDRShjaGVja0RDRSk7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIC8vIERldlRvb2xzIHNob3VsZG4ndCBjcmFzaCBSZWFjdCwgbm8gbWF0dGVyIHdoYXQuXG4gICAgLy8gV2Ugc2hvdWxkIHN0aWxsIHJlcG9ydCBpbiBjYXNlIHdlIGJyZWFrIHRoaXMgY29kZS5cbiAgICBjb25zb2xlLmVycm9yKGVycik7XG4gIH1cbn1cblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgLy8gRENFIGNoZWNrIHNob3VsZCBoYXBwZW4gYmVmb3JlIFJlYWN0RE9NIGJ1bmRsZSBleGVjdXRlcyBzbyB0aGF0XG4gIC8vIERldlRvb2xzIGNhbiByZXBvcnQgYmFkIG1pbmlmaWNhdGlvbiBkdXJpbmcgaW5qZWN0aW9uLlxuICBjaGVja0RDRSgpO1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWRvbS5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1kb20uZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiJdLCJuYW1lcyI6WyJjaGVja0RDRSIsIl9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXyIsInByb2Nlc3MiLCJlbnYiLCJOT0RFX0VOViIsIkVycm9yIiwiZXJyIiwiY29uc29sZSIsImVycm9yIiwibW9kdWxlIiwiZXhwb3J0cyIsInJlcXVpcmUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///9834\n")},3534:(__unused_webpack_module,exports)=>{"use strict";eval('/**\n * @license React\n * react.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\nvar l = Symbol.for("react.element"),\n  n = Symbol.for("react.portal"),\n  p = Symbol.for("react.fragment"),\n  q = Symbol.for("react.strict_mode"),\n  r = Symbol.for("react.profiler"),\n  t = Symbol.for("react.provider"),\n  u = Symbol.for("react.context"),\n  v = Symbol.for("react.forward_ref"),\n  w = Symbol.for("react.suspense"),\n  x = Symbol.for("react.memo"),\n  y = Symbol.for("react.lazy"),\n  z = Symbol.iterator;\nfunction A(a) {\n  if (null === a || "object" !== typeof a) return null;\n  a = z && a[z] || a["@@iterator"];\n  return "function" === typeof a ? a : null;\n}\nvar B = {\n    isMounted: function () {\n      return !1;\n    },\n    enqueueForceUpdate: function () {},\n    enqueueReplaceState: function () {},\n    enqueueSetState: function () {}\n  },\n  C = Object.assign,\n  D = {};\nfunction E(a, b, e) {\n  this.props = a;\n  this.context = b;\n  this.refs = D;\n  this.updater = e || B;\n}\nE.prototype.isReactComponent = {};\nE.prototype.setState = function (a, b) {\n  if ("object" !== typeof a && "function" !== typeof a && null != a) throw Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");\n  this.updater.enqueueSetState(this, a, b, "setState");\n};\nE.prototype.forceUpdate = function (a) {\n  this.updater.enqueueForceUpdate(this, a, "forceUpdate");\n};\nfunction F() {}\nF.prototype = E.prototype;\nfunction G(a, b, e) {\n  this.props = a;\n  this.context = b;\n  this.refs = D;\n  this.updater = e || B;\n}\nvar H = G.prototype = new F();\nH.constructor = G;\nC(H, E.prototype);\nH.isPureReactComponent = !0;\nvar I = Array.isArray,\n  J = Object.prototype.hasOwnProperty,\n  K = {\n    current: null\n  },\n  L = {\n    key: !0,\n    ref: !0,\n    __self: !0,\n    __source: !0\n  };\nfunction M(a, b, e) {\n  var d,\n    c = {},\n    k = null,\n    h = null;\n  if (null != b) for (d in void 0 !== b.ref && (h = b.ref), void 0 !== b.key && (k = "" + b.key), b) J.call(b, d) && !L.hasOwnProperty(d) && (c[d] = b[d]);\n  var g = arguments.length - 2;\n  if (1 === g) c.children = e;else if (1 < g) {\n    for (var f = Array(g), m = 0; m < g; m++) f[m] = arguments[m + 2];\n    c.children = f;\n  }\n  if (a && a.defaultProps) for (d in g = a.defaultProps, g) void 0 === c[d] && (c[d] = g[d]);\n  return {\n    $$typeof: l,\n    type: a,\n    key: k,\n    ref: h,\n    props: c,\n    _owner: K.current\n  };\n}\nfunction N(a, b) {\n  return {\n    $$typeof: l,\n    type: a.type,\n    key: b,\n    ref: a.ref,\n    props: a.props,\n    _owner: a._owner\n  };\n}\nfunction O(a) {\n  return "object" === typeof a && null !== a && a.$$typeof === l;\n}\nfunction escape(a) {\n  var b = {\n    "=": "=0",\n    ":": "=2"\n  };\n  return "$" + a.replace(/[=:]/g, function (a) {\n    return b[a];\n  });\n}\nvar P = /\\/+/g;\nfunction Q(a, b) {\n  return "object" === typeof a && null !== a && null != a.key ? escape("" + a.key) : b.toString(36);\n}\nfunction R(a, b, e, d, c) {\n  var k = typeof a;\n  if ("undefined" === k || "boolean" === k) a = null;\n  var h = !1;\n  if (null === a) h = !0;else switch (k) {\n    case "string":\n    case "number":\n      h = !0;\n      break;\n    case "object":\n      switch (a.$$typeof) {\n        case l:\n        case n:\n          h = !0;\n      }\n  }\n  if (h) return h = a, c = c(h), a = "" === d ? "." + Q(h, 0) : d, I(c) ? (e = "", null != a && (e = a.replace(P, "$&/") + "/"), R(c, b, e, "", function (a) {\n    return a;\n  })) : null != c && (O(c) && (c = N(c, e + (!c.key || h && h.key === c.key ? "" : ("" + c.key).replace(P, "$&/") + "/") + a)), b.push(c)), 1;\n  h = 0;\n  d = "" === d ? "." : d + ":";\n  if (I(a)) for (var g = 0; g < a.length; g++) {\n    k = a[g];\n    var f = d + Q(k, g);\n    h += R(k, b, e, f, c);\n  } else if (f = A(a), "function" === typeof f) for (a = f.call(a), g = 0; !(k = a.next()).done;) k = k.value, f = d + Q(k, g++), h += R(k, b, e, f, c);else if ("object" === k) throw b = String(a), Error("Objects are not valid as a React child (found: " + ("[object Object]" === b ? "object with keys {" + Object.keys(a).join(", ") + "}" : b) + "). If you meant to render a collection of children, use an array instead.");\n  return h;\n}\nfunction S(a, b, e) {\n  if (null == a) return a;\n  var d = [],\n    c = 0;\n  R(a, d, "", "", function (a) {\n    return b.call(e, a, c++);\n  });\n  return d;\n}\nfunction T(a) {\n  if (-1 === a._status) {\n    var b = a._result;\n    b = b();\n    b.then(function (b) {\n      if (0 === a._status || -1 === a._status) a._status = 1, a._result = b;\n    }, function (b) {\n      if (0 === a._status || -1 === a._status) a._status = 2, a._result = b;\n    });\n    -1 === a._status && (a._status = 0, a._result = b);\n  }\n  if (1 === a._status) return a._result.default;\n  throw a._result;\n}\nvar U = {\n    current: null\n  },\n  V = {\n    transition: null\n  },\n  W = {\n    ReactCurrentDispatcher: U,\n    ReactCurrentBatchConfig: V,\n    ReactCurrentOwner: K\n  };\nexports.Children = {\n  map: S,\n  forEach: function (a, b, e) {\n    S(a, function () {\n      b.apply(this, arguments);\n    }, e);\n  },\n  count: function (a) {\n    var b = 0;\n    S(a, function () {\n      b++;\n    });\n    return b;\n  },\n  toArray: function (a) {\n    return S(a, function (a) {\n      return a;\n    }) || [];\n  },\n  only: function (a) {\n    if (!O(a)) throw Error("React.Children.only expected to receive a single React element child.");\n    return a;\n  }\n};\nexports.Component = E;\nexports.Fragment = p;\nexports.Profiler = r;\nexports.PureComponent = G;\nexports.StrictMode = q;\nexports.Suspense = w;\nexports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = W;\nexports.cloneElement = function (a, b, e) {\n  if (null === a || void 0 === a) throw Error("React.cloneElement(...): The argument must be a React element, but you passed " + a + ".");\n  var d = C({}, a.props),\n    c = a.key,\n    k = a.ref,\n    h = a._owner;\n  if (null != b) {\n    void 0 !== b.ref && (k = b.ref, h = K.current);\n    void 0 !== b.key && (c = "" + b.key);\n    if (a.type && a.type.defaultProps) var g = a.type.defaultProps;\n    for (f in b) J.call(b, f) && !L.hasOwnProperty(f) && (d[f] = void 0 === b[f] && void 0 !== g ? g[f] : b[f]);\n  }\n  var f = arguments.length - 2;\n  if (1 === f) d.children = e;else if (1 < f) {\n    g = Array(f);\n    for (var m = 0; m < f; m++) g[m] = arguments[m + 2];\n    d.children = g;\n  }\n  return {\n    $$typeof: l,\n    type: a.type,\n    key: c,\n    ref: k,\n    props: d,\n    _owner: h\n  };\n};\nexports.createContext = function (a) {\n  a = {\n    $$typeof: u,\n    _currentValue: a,\n    _currentValue2: a,\n    _threadCount: 0,\n    Provider: null,\n    Consumer: null,\n    _defaultValue: null,\n    _globalName: null\n  };\n  a.Provider = {\n    $$typeof: t,\n    _context: a\n  };\n  return a.Consumer = a;\n};\nexports.createElement = M;\nexports.createFactory = function (a) {\n  var b = M.bind(null, a);\n  b.type = a;\n  return b;\n};\nexports.createRef = function () {\n  return {\n    current: null\n  };\n};\nexports.forwardRef = function (a) {\n  return {\n    $$typeof: v,\n    render: a\n  };\n};\nexports.isValidElement = O;\nexports.lazy = function (a) {\n  return {\n    $$typeof: y,\n    _payload: {\n      _status: -1,\n      _result: a\n    },\n    _init: T\n  };\n};\nexports.memo = function (a, b) {\n  return {\n    $$typeof: x,\n    type: a,\n    compare: void 0 === b ? null : b\n  };\n};\nexports.startTransition = function (a) {\n  var b = V.transition;\n  V.transition = {};\n  try {\n    a();\n  } finally {\n    V.transition = b;\n  }\n};\nexports.unstable_act = function () {\n  throw Error("act(...) is not supported in production builds of React.");\n};\nexports.useCallback = function (a, b) {\n  return U.current.useCallback(a, b);\n};\nexports.useContext = function (a) {\n  return U.current.useContext(a);\n};\nexports.useDebugValue = function () {};\nexports.useDeferredValue = function (a) {\n  return U.current.useDeferredValue(a);\n};\nexports.useEffect = function (a, b) {\n  return U.current.useEffect(a, b);\n};\nexports.useId = function () {\n  return U.current.useId();\n};\nexports.useImperativeHandle = function (a, b, e) {\n  return U.current.useImperativeHandle(a, b, e);\n};\nexports.useInsertionEffect = function (a, b) {\n  return U.current.useInsertionEffect(a, b);\n};\nexports.useLayoutEffect = function (a, b) {\n  return U.current.useLayoutEffect(a, b);\n};\nexports.useMemo = function (a, b) {\n  return U.current.useMemo(a, b);\n};\nexports.useReducer = function (a, b, e) {\n  return U.current.useReducer(a, b, e);\n};\nexports.useRef = function (a) {\n  return U.current.useRef(a);\n};\nexports.useState = function (a) {\n  return U.current.useState(a);\n};\nexports.useSyncExternalStore = function (a, b, e) {\n  return U.current.useSyncExternalStore(a, b, e);\n};\nexports.useTransition = function () {\n  return U.current.useTransition();\n};\nexports.version = "18.2.0";//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///3534\n')},9471:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval("\n\nif (true) {\n  module.exports = __webpack_require__(3534);\n} else {}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTQ3MS5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixJQUFJQSxJQUFxQyxFQUFFO0VBQ3pDRywwQ0FBeUQ7QUFDM0QsQ0FBQyxNQUFNIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vMjAyNC1rdHNzdHVkaW8taG9tZXdvcmtzLy4vbm9kZV9tb2R1bGVzL3JlYWN0L2luZGV4LmpzP2FiNWIiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LmRldmVsb3BtZW50LmpzJyk7XG59XG4iXSwibmFtZXMiOlsicHJvY2VzcyIsImVudiIsIk5PREVfRU5WIiwibW9kdWxlIiwiZXhwb3J0cyIsInJlcXVpcmUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///9471\n")},8582:(__unused_webpack_module,exports)=>{"use strict";eval('/**\n * @license React\n * scheduler.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\nfunction f(a, b) {\n  var c = a.length;\n  a.push(b);\n  a: for (; 0 < c;) {\n    var d = c - 1 >>> 1,\n      e = a[d];\n    if (0 < g(e, b)) a[d] = b, a[c] = e, c = d;else break a;\n  }\n}\nfunction h(a) {\n  return 0 === a.length ? null : a[0];\n}\nfunction k(a) {\n  if (0 === a.length) return null;\n  var b = a[0],\n    c = a.pop();\n  if (c !== b) {\n    a[0] = c;\n    a: for (var d = 0, e = a.length, w = e >>> 1; d < w;) {\n      var m = 2 * (d + 1) - 1,\n        C = a[m],\n        n = m + 1,\n        x = a[n];\n      if (0 > g(C, c)) n < e && 0 > g(x, C) ? (a[d] = x, a[n] = c, d = n) : (a[d] = C, a[m] = c, d = m);else if (n < e && 0 > g(x, c)) a[d] = x, a[n] = c, d = n;else break a;\n    }\n  }\n  return b;\n}\nfunction g(a, b) {\n  var c = a.sortIndex - b.sortIndex;\n  return 0 !== c ? c : a.id - b.id;\n}\nif ("object" === typeof performance && "function" === typeof performance.now) {\n  var l = performance;\n  exports.unstable_now = function () {\n    return l.now();\n  };\n} else {\n  var p = Date,\n    q = p.now();\n  exports.unstable_now = function () {\n    return p.now() - q;\n  };\n}\nvar r = [],\n  t = [],\n  u = 1,\n  v = null,\n  y = 3,\n  z = !1,\n  A = !1,\n  B = !1,\n  D = "function" === typeof setTimeout ? setTimeout : null,\n  E = "function" === typeof clearTimeout ? clearTimeout : null,\n  F = "undefined" !== typeof setImmediate ? setImmediate : null;\n"undefined" !== typeof navigator && void 0 !== navigator.scheduling && void 0 !== navigator.scheduling.isInputPending && navigator.scheduling.isInputPending.bind(navigator.scheduling);\nfunction G(a) {\n  for (var b = h(t); null !== b;) {\n    if (null === b.callback) k(t);else if (b.startTime <= a) k(t), b.sortIndex = b.expirationTime, f(r, b);else break;\n    b = h(t);\n  }\n}\nfunction H(a) {\n  B = !1;\n  G(a);\n  if (!A) if (null !== h(r)) A = !0, I(J);else {\n    var b = h(t);\n    null !== b && K(H, b.startTime - a);\n  }\n}\nfunction J(a, b) {\n  A = !1;\n  B && (B = !1, E(L), L = -1);\n  z = !0;\n  var c = y;\n  try {\n    G(b);\n    for (v = h(r); null !== v && (!(v.expirationTime > b) || a && !M());) {\n      var d = v.callback;\n      if ("function" === typeof d) {\n        v.callback = null;\n        y = v.priorityLevel;\n        var e = d(v.expirationTime <= b);\n        b = exports.unstable_now();\n        "function" === typeof e ? v.callback = e : v === h(r) && k(r);\n        G(b);\n      } else k(r);\n      v = h(r);\n    }\n    if (null !== v) var w = !0;else {\n      var m = h(t);\n      null !== m && K(H, m.startTime - b);\n      w = !1;\n    }\n    return w;\n  } finally {\n    v = null, y = c, z = !1;\n  }\n}\nvar N = !1,\n  O = null,\n  L = -1,\n  P = 5,\n  Q = -1;\nfunction M() {\n  return exports.unstable_now() - Q < P ? !1 : !0;\n}\nfunction R() {\n  if (null !== O) {\n    var a = exports.unstable_now();\n    Q = a;\n    var b = !0;\n    try {\n      b = O(!0, a);\n    } finally {\n      b ? S() : (N = !1, O = null);\n    }\n  } else N = !1;\n}\nvar S;\nif ("function" === typeof F) S = function () {\n  F(R);\n};else if ("undefined" !== typeof MessageChannel) {\n  var T = new MessageChannel(),\n    U = T.port2;\n  T.port1.onmessage = R;\n  S = function () {\n    U.postMessage(null);\n  };\n} else S = function () {\n  D(R, 0);\n};\nfunction I(a) {\n  O = a;\n  N || (N = !0, S());\n}\nfunction K(a, b) {\n  L = D(function () {\n    a(exports.unstable_now());\n  }, b);\n}\nexports.unstable_IdlePriority = 5;\nexports.unstable_ImmediatePriority = 1;\nexports.unstable_LowPriority = 4;\nexports.unstable_NormalPriority = 3;\nexports.unstable_Profiling = null;\nexports.unstable_UserBlockingPriority = 2;\nexports.unstable_cancelCallback = function (a) {\n  a.callback = null;\n};\nexports.unstable_continueExecution = function () {\n  A || z || (A = !0, I(J));\n};\nexports.unstable_forceFrameRate = function (a) {\n  0 > a || 125 < a ? console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported") : P = 0 < a ? Math.floor(1E3 / a) : 5;\n};\nexports.unstable_getCurrentPriorityLevel = function () {\n  return y;\n};\nexports.unstable_getFirstCallbackNode = function () {\n  return h(r);\n};\nexports.unstable_next = function (a) {\n  switch (y) {\n    case 1:\n    case 2:\n    case 3:\n      var b = 3;\n      break;\n    default:\n      b = y;\n  }\n  var c = y;\n  y = b;\n  try {\n    return a();\n  } finally {\n    y = c;\n  }\n};\nexports.unstable_pauseExecution = function () {};\nexports.unstable_requestPaint = function () {};\nexports.unstable_runWithPriority = function (a, b) {\n  switch (a) {\n    case 1:\n    case 2:\n    case 3:\n    case 4:\n    case 5:\n      break;\n    default:\n      a = 3;\n  }\n  var c = y;\n  y = a;\n  try {\n    return b();\n  } finally {\n    y = c;\n  }\n};\nexports.unstable_scheduleCallback = function (a, b, c) {\n  var d = exports.unstable_now();\n  "object" === typeof c && null !== c ? (c = c.delay, c = "number" === typeof c && 0 < c ? d + c : d) : c = d;\n  switch (a) {\n    case 1:\n      var e = -1;\n      break;\n    case 2:\n      e = 250;\n      break;\n    case 5:\n      e = 1073741823;\n      break;\n    case 4:\n      e = 1E4;\n      break;\n    default:\n      e = 5E3;\n  }\n  e = c + e;\n  a = {\n    id: u++,\n    callback: b,\n    priorityLevel: a,\n    startTime: c,\n    expirationTime: e,\n    sortIndex: -1\n  };\n  c > d ? (a.sortIndex = c, f(t, a), null === h(r) && a === h(t) && (B ? (E(L), L = -1) : B = !0, K(H, c - d))) : (a.sortIndex = e, f(r, a), A || z || (A = !0, I(J)));\n  return a;\n};\nexports.unstable_shouldYield = M;\nexports.unstable_wrapCallback = function (a) {\n  var b = y;\n  return function () {\n    var c = y;\n    y = b;\n    try {\n      return a.apply(this, arguments);\n    } finally {\n      y = c;\n    }\n  };\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///8582\n')},9817:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval("\n\nif (true) {\n  module.exports = __webpack_require__(8582);\n} else {}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTgxNy5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixJQUFJQSxJQUFxQyxFQUFFO0VBQ3pDRywwQ0FBNkQ7QUFDL0QsQ0FBQyxNQUFNIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vMjAyNC1rdHNzdHVkaW8taG9tZXdvcmtzLy4vbm9kZV9tb2R1bGVzL3NjaGVkdWxlci9pbmRleC5qcz80MDI5Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9zY2hlZHVsZXIucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvc2NoZWR1bGVyLmRldmVsb3BtZW50LmpzJyk7XG59XG4iXSwibmFtZXMiOlsicHJvY2VzcyIsImVudiIsIk5PREVfRU5WIiwibW9kdWxlIiwiZXhwb3J0cyIsInJlcXVpcmUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///9817\n")},6064:(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval('/**\n * @license React\n * use-sync-external-store-shim.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\nvar e = __webpack_require__(9471);\nfunction h(a, b) {\n  return a === b && (0 !== a || 1 / a === 1 / b) || a !== a && b !== b;\n}\nvar k = "function" === typeof Object.is ? Object.is : h,\n  l = e.useState,\n  m = e.useEffect,\n  n = e.useLayoutEffect,\n  p = e.useDebugValue;\nfunction q(a, b) {\n  var d = b(),\n    f = l({\n      inst: {\n        value: d,\n        getSnapshot: b\n      }\n    }),\n    c = f[0].inst,\n    g = f[1];\n  n(function () {\n    c.value = d;\n    c.getSnapshot = b;\n    r(c) && g({\n      inst: c\n    });\n  }, [a, d, b]);\n  m(function () {\n    r(c) && g({\n      inst: c\n    });\n    return a(function () {\n      r(c) && g({\n        inst: c\n      });\n    });\n  }, [a]);\n  p(d);\n  return d;\n}\nfunction r(a) {\n  var b = a.getSnapshot;\n  a = a.value;\n  try {\n    var d = b();\n    return !k(a, d);\n  } catch (f) {\n    return !0;\n  }\n}\nfunction t(a, b) {\n  return b();\n}\nvar u = "undefined" === typeof window || "undefined" === typeof window.document || "undefined" === typeof window.document.createElement ? t : q;\nexports.useSyncExternalStore = void 0 !== e.useSyncExternalStore ? e.useSyncExternalStore : u;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUNKLENBQUMsR0FBQ1QsQ0FBQztBQUFDYyw0QkFBNEIsR0FBQyxLQUFLLENBQUMsS0FBRzlCLENBQUMsQ0FBQytCLG9CQUFvQixHQUFDL0IsQ0FBQyxDQUFDK0Isb0JBQW9CLEdBQUNMLENBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8yMDI0LWt0c3N0dWRpby1ob21ld29ya3MvLi9ub2RlX21vZHVsZXMvdXNlLXN5bmMtZXh0ZXJuYWwtc3RvcmUvY2pzL3VzZS1zeW5jLWV4dGVybmFsLXN0b3JlLXNoaW0ucHJvZHVjdGlvbi5taW4uanM/OTRhMiJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlIFJlYWN0XG4gKiB1c2Utc3luYy1leHRlcm5hbC1zdG9yZS1zaGltLnByb2R1Y3Rpb24ubWluLmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cbid1c2Ugc3RyaWN0Jzt2YXIgZT1yZXF1aXJlKFwicmVhY3RcIik7ZnVuY3Rpb24gaChhLGIpe3JldHVybiBhPT09YiYmKDAhPT1hfHwxL2E9PT0xL2IpfHxhIT09YSYmYiE9PWJ9dmFyIGs9XCJmdW5jdGlvblwiPT09dHlwZW9mIE9iamVjdC5pcz9PYmplY3QuaXM6aCxsPWUudXNlU3RhdGUsbT1lLnVzZUVmZmVjdCxuPWUudXNlTGF5b3V0RWZmZWN0LHA9ZS51c2VEZWJ1Z1ZhbHVlO2Z1bmN0aW9uIHEoYSxiKXt2YXIgZD1iKCksZj1sKHtpbnN0Ont2YWx1ZTpkLGdldFNuYXBzaG90OmJ9fSksYz1mWzBdLmluc3QsZz1mWzFdO24oZnVuY3Rpb24oKXtjLnZhbHVlPWQ7Yy5nZXRTbmFwc2hvdD1iO3IoYykmJmcoe2luc3Q6Y30pfSxbYSxkLGJdKTttKGZ1bmN0aW9uKCl7cihjKSYmZyh7aW5zdDpjfSk7cmV0dXJuIGEoZnVuY3Rpb24oKXtyKGMpJiZnKHtpbnN0OmN9KX0pfSxbYV0pO3AoZCk7cmV0dXJuIGR9XG5mdW5jdGlvbiByKGEpe3ZhciBiPWEuZ2V0U25hcHNob3Q7YT1hLnZhbHVlO3RyeXt2YXIgZD1iKCk7cmV0dXJuIWsoYSxkKX1jYXRjaChmKXtyZXR1cm4hMH19ZnVuY3Rpb24gdChhLGIpe3JldHVybiBiKCl9dmFyIHU9XCJ1bmRlZmluZWRcIj09PXR5cGVvZiB3aW5kb3d8fFwidW5kZWZpbmVkXCI9PT10eXBlb2Ygd2luZG93LmRvY3VtZW50fHxcInVuZGVmaW5lZFwiPT09dHlwZW9mIHdpbmRvdy5kb2N1bWVudC5jcmVhdGVFbGVtZW50P3Q6cTtleHBvcnRzLnVzZVN5bmNFeHRlcm5hbFN0b3JlPXZvaWQgMCE9PWUudXNlU3luY0V4dGVybmFsU3RvcmU/ZS51c2VTeW5jRXh0ZXJuYWxTdG9yZTp1O1xuIl0sIm5hbWVzIjpbImUiLCJyZXF1aXJlIiwiaCIsImEiLCJiIiwiayIsIk9iamVjdCIsImlzIiwibCIsInVzZVN0YXRlIiwibSIsInVzZUVmZmVjdCIsIm4iLCJ1c2VMYXlvdXRFZmZlY3QiLCJwIiwidXNlRGVidWdWYWx1ZSIsInEiLCJkIiwiZiIsImluc3QiLCJ2YWx1ZSIsImdldFNuYXBzaG90IiwiYyIsImciLCJyIiwidCIsInUiLCJ3aW5kb3ciLCJkb2N1bWVudCIsImNyZWF0ZUVsZW1lbnQiLCJleHBvcnRzIiwidXNlU3luY0V4dGVybmFsU3RvcmUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///6064\n')},1673:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval("\n\nif (true) {\n  module.exports = __webpack_require__(6064);\n} else {}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTY3My5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixJQUFJQSxJQUFxQyxFQUFFO0VBQ3pDRywwQ0FBaUY7QUFDbkYsQ0FBQyxNQUFNIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vMjAyNC1rdHNzdHVkaW8taG9tZXdvcmtzLy4vbm9kZV9tb2R1bGVzL3VzZS1zeW5jLWV4dGVybmFsLXN0b3JlL3NoaW0vaW5kZXguanM/NmFkZiJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi4vY2pzL3VzZS1zeW5jLWV4dGVybmFsLXN0b3JlLXNoaW0ucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi4vY2pzL3VzZS1zeW5jLWV4dGVybmFsLXN0b3JlLXNoaW0uZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiJdLCJuYW1lcyI6WyJwcm9jZXNzIiwiZW52IiwiTk9ERV9FTlYiLCJtb2R1bGUiLCJleHBvcnRzIiwicmVxdWlyZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///1673\n")},6986:(__unused_webpack_module,__unused_webpack___webpack_exports__,__webpack_require__)=>{"use strict";eval('\n// NAMESPACE OBJECT: ./node_modules/axios/lib/platform/common/utils.js\nvar common_utils_namespaceObject = {};\n__webpack_require__.r(common_utils_namespaceObject);\n__webpack_require__.d(common_utils_namespaceObject, {\n  hasBrowserEnv: () => (hasBrowserEnv),\n  hasStandardBrowserEnv: () => (hasStandardBrowserEnv),\n  hasStandardBrowserWebWorkerEnv: () => (hasStandardBrowserWebWorkerEnv)\n});\n\n// EXTERNAL MODULE: ./node_modules/react/index.js\nvar react = __webpack_require__(9471);\nvar react_namespaceObject = /*#__PURE__*/__webpack_require__.t(react, 2);\n// EXTERNAL MODULE: ./node_modules/react-dom/client.js\nvar client = __webpack_require__(4723);\n// EXTERNAL MODULE: ./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\nvar injectStylesIntoStyleTag = __webpack_require__(5072);\nvar injectStylesIntoStyleTag_default = /*#__PURE__*/__webpack_require__.n(injectStylesIntoStyleTag);\n// EXTERNAL MODULE: ./node_modules/style-loader/dist/runtime/styleDomAPI.js\nvar styleDomAPI = __webpack_require__(7825);\nvar styleDomAPI_default = /*#__PURE__*/__webpack_require__.n(styleDomAPI);\n// EXTERNAL MODULE: ./node_modules/style-loader/dist/runtime/insertBySelector.js\nvar insertBySelector = __webpack_require__(7659);\nvar insertBySelector_default = /*#__PURE__*/__webpack_require__.n(insertBySelector);\n// EXTERNAL MODULE: ./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js\nvar setAttributesWithoutAttributes = __webpack_require__(5056);\nvar setAttributesWithoutAttributes_default = /*#__PURE__*/__webpack_require__.n(setAttributesWithoutAttributes);\n// EXTERNAL MODULE: ./node_modules/style-loader/dist/runtime/insertStyleElement.js\nvar insertStyleElement = __webpack_require__(540);\nvar insertStyleElement_default = /*#__PURE__*/__webpack_require__.n(insertStyleElement);\n// EXTERNAL MODULE: ./node_modules/style-loader/dist/runtime/styleTagTransform.js\nvar styleTagTransform = __webpack_require__(1113);\nvar styleTagTransform_default = /*#__PURE__*/__webpack_require__.n(styleTagTransform);\n// EXTERNAL MODULE: ./node_modules/css-loader/dist/cjs.js!./node_modules/postcss-loader/dist/cjs.js??ruleSet[1].rules[1].use[2]!./node_modules/sass-loader/dist/cjs.js!./src/styles/styles.scss\nvar styles = __webpack_require__(1592);\n;// CONCATENATED MODULE: ./src/styles/styles.scss\n\n      \n      \n      \n      \n      \n      \n      \n      \n      \n\nvar options = {};\n\noptions.styleTagTransform = (styleTagTransform_default());\noptions.setAttributes = (setAttributesWithoutAttributes_default());\noptions.insert = insertBySelector_default().bind(null, "head");\noptions.domAPI = (styleDomAPI_default());\noptions.insertStyleElement = (insertStyleElement_default());\n\nvar update = injectStylesIntoStyleTag_default()(styles/* default */.A, options);\n\n\n\n\n       /* harmony default export */ const styles_styles = (styles/* default */.A && styles/* default */.A.locals ? styles/* default */.A.locals : undefined);\n\n// EXTERNAL MODULE: ./node_modules/react-dom/index.js\nvar react_dom = __webpack_require__(9834);\nvar react_dom_namespaceObject = /*#__PURE__*/__webpack_require__.t(react_dom, 2);\n;// CONCATENATED MODULE: ./node_modules/@remix-run/router/dist/router.js\n/**\n * @remix-run/router v1.15.3\n *\n * Copyright (c) Remix Software Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.md file in the root directory of this source tree.\n *\n * @license MIT\n */\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n/**\n * Actions represent the type of change to a location value.\n */\nvar Action;\n(function (Action) {\n  /**\n   * A POP indicates a change to an arbitrary index in the history stack, such\n   * as a back or forward navigation. It does not describe the direction of the\n   * navigation, only that the current index changed.\n   *\n   * Note: This is the default action for newly created history objects.\n   */\n  Action["Pop"] = "POP";\n  /**\n   * A PUSH indicates a new entry being added to the history stack, such as when\n   * a link is clicked and a new page loads. When this happens, all subsequent\n   * entries in the stack are lost.\n   */\n  Action["Push"] = "PUSH";\n  /**\n   * A REPLACE indicates the entry at the current index in the history stack\n   * being replaced by a new one.\n   */\n  Action["Replace"] = "REPLACE";\n})(Action || (Action = {}));\nconst PopStateEventType = "popstate";\n/**\n * Memory history stores the current location in memory. It is designed for use\n * in stateful non-browser environments like tests and React Native.\n */\nfunction router_createMemoryHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n  let {\n    initialEntries = ["/"],\n    initialIndex,\n    v5Compat = false\n  } = options;\n  let entries; // Declare so we can access from createMemoryLocation\n  entries = initialEntries.map((entry, index) => createMemoryLocation(entry, typeof entry === "string" ? null : entry.state, index === 0 ? "default" : undefined));\n  let index = clampIndex(initialIndex == null ? entries.length - 1 : initialIndex);\n  let action = Action.Pop;\n  let listener = null;\n  function clampIndex(n) {\n    return Math.min(Math.max(n, 0), entries.length - 1);\n  }\n  function getCurrentLocation() {\n    return entries[index];\n  }\n  function createMemoryLocation(to, state, key) {\n    if (state === void 0) {\n      state = null;\n    }\n    let location = createLocation(entries ? getCurrentLocation().pathname : "/", to, state, key);\n    warning(location.pathname.charAt(0) === "/", "relative pathnames are not supported in memory history: " + JSON.stringify(to));\n    return location;\n  }\n  function createHref(to) {\n    return typeof to === "string" ? to : router_createPath(to);\n  }\n  let history = {\n    get index() {\n      return index;\n    },\n    get action() {\n      return action;\n    },\n    get location() {\n      return getCurrentLocation();\n    },\n    createHref,\n    createURL(to) {\n      return new URL(createHref(to), "http://localhost");\n    },\n    encodeLocation(to) {\n      let path = typeof to === "string" ? parsePath(to) : to;\n      return {\n        pathname: path.pathname || "",\n        search: path.search || "",\n        hash: path.hash || ""\n      };\n    },\n    push(to, state) {\n      action = Action.Push;\n      let nextLocation = createMemoryLocation(to, state);\n      index += 1;\n      entries.splice(index, entries.length, nextLocation);\n      if (v5Compat && listener) {\n        listener({\n          action,\n          location: nextLocation,\n          delta: 1\n        });\n      }\n    },\n    replace(to, state) {\n      action = Action.Replace;\n      let nextLocation = createMemoryLocation(to, state);\n      entries[index] = nextLocation;\n      if (v5Compat && listener) {\n        listener({\n          action,\n          location: nextLocation,\n          delta: 0\n        });\n      }\n    },\n    go(delta) {\n      action = Action.Pop;\n      let nextIndex = clampIndex(index + delta);\n      let nextLocation = entries[nextIndex];\n      index = nextIndex;\n      if (listener) {\n        listener({\n          action,\n          location: nextLocation,\n          delta\n        });\n      }\n    },\n    listen(fn) {\n      listener = fn;\n      return () => {\n        listener = null;\n      };\n    }\n  };\n  return history;\n}\n/**\n * Browser history stores the location in regular URLs. This is the standard for\n * most web apps, but it requires some configuration on the server to ensure you\n * serve the same app at multiple URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createbrowserhistory\n */\nfunction router_createBrowserHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n  function createBrowserLocation(window, globalHistory) {\n    let {\n      pathname,\n      search,\n      hash\n    } = window.location;\n    return createLocation("", {\n      pathname,\n      search,\n      hash\n    },\n    // state defaults to `null` because `window.history.state` does\n    globalHistory.state && globalHistory.state.usr || null, globalHistory.state && globalHistory.state.key || "default");\n  }\n  function createBrowserHref(window, to) {\n    return typeof to === "string" ? to : router_createPath(to);\n  }\n  return getUrlBasedHistory(createBrowserLocation, createBrowserHref, null, options);\n}\n/**\n * Hash history stores the location in window.location.hash. This makes it ideal\n * for situations where you don\'t want to send the location to the server for\n * some reason, either because you do cannot configure it or the URL space is\n * reserved for something else.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createhashhistory\n */\nfunction router_createHashHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n  function createHashLocation(window, globalHistory) {\n    let {\n      pathname = "/",\n      search = "",\n      hash = ""\n    } = parsePath(window.location.hash.substr(1));\n    // Hash URL should always have a leading / just like window.location.pathname\n    // does, so if an app ends up at a route like /#something then we add a\n    // leading slash so all of our path-matching behaves the same as if it would\n    // in a browser router.  This is particularly important when there exists a\n    // root splat route (<Route path="*">) since that matches internally against\n    // "/*" and we\'d expect /#something to 404 in a hash router app.\n    if (!pathname.startsWith("/") && !pathname.startsWith(".")) {\n      pathname = "/" + pathname;\n    }\n    return createLocation("", {\n      pathname,\n      search,\n      hash\n    },\n    // state defaults to `null` because `window.history.state` does\n    globalHistory.state && globalHistory.state.usr || null, globalHistory.state && globalHistory.state.key || "default");\n  }\n  function createHashHref(window, to) {\n    let base = window.document.querySelector("base");\n    let href = "";\n    if (base && base.getAttribute("href")) {\n      let url = window.location.href;\n      let hashIndex = url.indexOf("#");\n      href = hashIndex === -1 ? url : url.slice(0, hashIndex);\n    }\n    return href + "#" + (typeof to === "string" ? to : router_createPath(to));\n  }\n  function validateHashLocation(location, to) {\n    warning(location.pathname.charAt(0) === "/", "relative pathnames are not supported in hash history.push(" + JSON.stringify(to) + ")");\n  }\n  return getUrlBasedHistory(createHashLocation, createHashHref, validateHashLocation, options);\n}\nfunction invariant(value, message) {\n  if (value === false || value === null || typeof value === "undefined") {\n    throw new Error(message);\n  }\n}\nfunction warning(cond, message) {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== "undefined") console.warn(message);\n    try {\n      // Welcome to debugging history!\n      //\n      // This error is thrown as a convenience, so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling "pause on exceptions" in your JavaScript debugger.\n      throw new Error(message);\n      // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\nfunction createKey() {\n  return Math.random().toString(36).substr(2, 8);\n}\n/**\n * For browser-based histories, we combine the state and key into an object\n */\nfunction getHistoryState(location, index) {\n  return {\n    usr: location.state,\n    key: location.key,\n    idx: index\n  };\n}\n/**\n * Creates a Location object with a unique key from the given Path\n */\nfunction createLocation(current, to, state, key) {\n  if (state === void 0) {\n    state = null;\n  }\n  let location = _extends({\n    pathname: typeof current === "string" ? current : current.pathname,\n    search: "",\n    hash: ""\n  }, typeof to === "string" ? parsePath(to) : to, {\n    state,\n    // TODO: This could be cleaned up.  push/replace should probably just take\n    // full Locations now and avoid the need to run through this flow at all\n    // But that\'s a pretty big refactor to the current test suite so going to\n    // keep as is for the time being and just let any incoming keys take precedence\n    key: to && to.key || key || createKey()\n  });\n  return location;\n}\n/**\n * Creates a string URL path from the given pathname, search, and hash components.\n */\nfunction router_createPath(_ref) {\n  let {\n    pathname = "/",\n    search = "",\n    hash = ""\n  } = _ref;\n  if (search && search !== "?") pathname += search.charAt(0) === "?" ? search : "?" + search;\n  if (hash && hash !== "#") pathname += hash.charAt(0) === "#" ? hash : "#" + hash;\n  return pathname;\n}\n/**\n * Parses a string URL path into its separate pathname, search, and hash components.\n */\nfunction parsePath(path) {\n  let parsedPath = {};\n  if (path) {\n    let hashIndex = path.indexOf("#");\n    if (hashIndex >= 0) {\n      parsedPath.hash = path.substr(hashIndex);\n      path = path.substr(0, hashIndex);\n    }\n    let searchIndex = path.indexOf("?");\n    if (searchIndex >= 0) {\n      parsedPath.search = path.substr(searchIndex);\n      path = path.substr(0, searchIndex);\n    }\n    if (path) {\n      parsedPath.pathname = path;\n    }\n  }\n  return parsedPath;\n}\nfunction getUrlBasedHistory(getLocation, createHref, validateLocation, options) {\n  if (options === void 0) {\n    options = {};\n  }\n  let {\n    window = document.defaultView,\n    v5Compat = false\n  } = options;\n  let globalHistory = window.history;\n  let action = Action.Pop;\n  let listener = null;\n  let index = getIndex();\n  // Index should only be null when we initialize. If not, it\'s because the\n  // user called history.pushState or history.replaceState directly, in which\n  // case we should log a warning as it will result in bugs.\n  if (index == null) {\n    index = 0;\n    globalHistory.replaceState(_extends({}, globalHistory.state, {\n      idx: index\n    }), "");\n  }\n  function getIndex() {\n    let state = globalHistory.state || {\n      idx: null\n    };\n    return state.idx;\n  }\n  function handlePop() {\n    action = Action.Pop;\n    let nextIndex = getIndex();\n    let delta = nextIndex == null ? null : nextIndex - index;\n    index = nextIndex;\n    if (listener) {\n      listener({\n        action,\n        location: history.location,\n        delta\n      });\n    }\n  }\n  function push(to, state) {\n    action = Action.Push;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n    index = getIndex() + 1;\n    let historyState = getHistoryState(location, index);\n    let url = history.createHref(location);\n    // try...catch because iOS limits us to 100 pushState calls :/\n    try {\n      globalHistory.pushState(historyState, "", url);\n    } catch (error) {\n      // If the exception is because `state` can\'t be serialized, let that throw\n      // outwards just like a replace call would so the dev knows the cause\n      // https://html.spec.whatwg.org/multipage/nav-history-apis.html#shared-history-push/replace-state-steps\n      // https://html.spec.whatwg.org/multipage/structured-data.html#structuredserializeinternal\n      if (error instanceof DOMException && error.name === "DataCloneError") {\n        throw error;\n      }\n      // They are going to lose state here, but there is no real\n      // way to warn them about it since the page will refresh...\n      window.location.assign(url);\n    }\n    if (v5Compat && listener) {\n      listener({\n        action,\n        location: history.location,\n        delta: 1\n      });\n    }\n  }\n  function replace(to, state) {\n    action = Action.Replace;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n    index = getIndex();\n    let historyState = getHistoryState(location, index);\n    let url = history.createHref(location);\n    globalHistory.replaceState(historyState, "", url);\n    if (v5Compat && listener) {\n      listener({\n        action,\n        location: history.location,\n        delta: 0\n      });\n    }\n  }\n  function createURL(to) {\n    // window.location.origin is "null" (the literal string value) in Firefox\n    // under certain conditions, notably when serving from a local HTML file\n    // See https://bugzilla.mozilla.org/show_bug.cgi?id=878297\n    let base = window.location.origin !== "null" ? window.location.origin : window.location.href;\n    let href = typeof to === "string" ? to : router_createPath(to);\n    // Treating this as a full URL will strip any trailing spaces so we need to\n    // pre-encode them since they might be part of a matching splat param from\n    // an ancestor route\n    href = href.replace(/ $/, "%20");\n    invariant(base, "No window.location.(origin|href) available to create URL for href: " + href);\n    return new URL(href, base);\n  }\n  let history = {\n    get action() {\n      return action;\n    },\n    get location() {\n      return getLocation(window, globalHistory);\n    },\n    listen(fn) {\n      if (listener) {\n        throw new Error("A history only accepts one active listener");\n      }\n      window.addEventListener(PopStateEventType, handlePop);\n      listener = fn;\n      return () => {\n        window.removeEventListener(PopStateEventType, handlePop);\n        listener = null;\n      };\n    },\n    createHref(to) {\n      return createHref(window, to);\n    },\n    createURL,\n    encodeLocation(to) {\n      // Encode a Location the same way window.location would\n      let url = createURL(to);\n      return {\n        pathname: url.pathname,\n        search: url.search,\n        hash: url.hash\n      };\n    },\n    push,\n    replace,\n    go(n) {\n      return globalHistory.go(n);\n    }\n  };\n  return history;\n}\n//#endregion\n\nvar ResultType;\n(function (ResultType) {\n  ResultType["data"] = "data";\n  ResultType["deferred"] = "deferred";\n  ResultType["redirect"] = "redirect";\n  ResultType["error"] = "error";\n})(ResultType || (ResultType = {}));\nconst immutableRouteKeys = new Set(["lazy", "caseSensitive", "path", "id", "index", "children"]);\nfunction isIndexRoute(route) {\n  return route.index === true;\n}\n// Walk the route tree generating unique IDs where necessary, so we are working\n// solely with AgnosticDataRouteObject\'s within the Router\nfunction convertRoutesToDataRoutes(routes, mapRouteProperties, parentPath, manifest) {\n  if (parentPath === void 0) {\n    parentPath = [];\n  }\n  if (manifest === void 0) {\n    manifest = {};\n  }\n  return routes.map((route, index) => {\n    let treePath = [...parentPath, index];\n    let id = typeof route.id === "string" ? route.id : treePath.join("-");\n    invariant(route.index !== true || !route.children, "Cannot specify children on an index route");\n    invariant(!manifest[id], "Found a route id collision on id \\"" + id + "\\".  Route " + "id\'s must be globally unique within Data Router usages");\n    if (isIndexRoute(route)) {\n      let indexRoute = _extends({}, route, mapRouteProperties(route), {\n        id\n      });\n      manifest[id] = indexRoute;\n      return indexRoute;\n    } else {\n      let pathOrLayoutRoute = _extends({}, route, mapRouteProperties(route), {\n        id,\n        children: undefined\n      });\n      manifest[id] = pathOrLayoutRoute;\n      if (route.children) {\n        pathOrLayoutRoute.children = convertRoutesToDataRoutes(route.children, mapRouteProperties, treePath, manifest);\n      }\n      return pathOrLayoutRoute;\n    }\n  });\n}\n/**\n * Matches the given routes to a location and returns the match data.\n *\n * @see https://reactrouter.com/utils/match-routes\n */\nfunction matchRoutes(routes, locationArg, basename) {\n  if (basename === void 0) {\n    basename = "/";\n  }\n  let location = typeof locationArg === "string" ? parsePath(locationArg) : locationArg;\n  let pathname = router_stripBasename(location.pathname || "/", basename);\n  if (pathname == null) {\n    return null;\n  }\n  let branches = flattenRoutes(routes);\n  rankRouteBranches(branches);\n  let matches = null;\n  for (let i = 0; matches == null && i < branches.length; ++i) {\n    // Incoming pathnames are generally encoded from either window.location\n    // or from router.navigate, but we want to match against the unencoded\n    // paths in the route definitions.  Memory router locations won\'t be\n    // encoded here but there also shouldn\'t be anything to decode so this\n    // should be a safe operation.  This avoids needing matchRoutes to be\n    // history-aware.\n    let decoded = decodePath(pathname);\n    matches = matchRouteBranch(branches[i], decoded);\n  }\n  return matches;\n}\nfunction convertRouteMatchToUiMatch(match, loaderData) {\n  let {\n    route,\n    pathname,\n    params\n  } = match;\n  return {\n    id: route.id,\n    pathname,\n    params,\n    data: loaderData[route.id],\n    handle: route.handle\n  };\n}\nfunction flattenRoutes(routes, branches, parentsMeta, parentPath) {\n  if (branches === void 0) {\n    branches = [];\n  }\n  if (parentsMeta === void 0) {\n    parentsMeta = [];\n  }\n  if (parentPath === void 0) {\n    parentPath = "";\n  }\n  let flattenRoute = (route, index, relativePath) => {\n    let meta = {\n      relativePath: relativePath === undefined ? route.path || "" : relativePath,\n      caseSensitive: route.caseSensitive === true,\n      childrenIndex: index,\n      route\n    };\n    if (meta.relativePath.startsWith("/")) {\n      invariant(meta.relativePath.startsWith(parentPath), "Absolute route path \\"" + meta.relativePath + "\\" nested under path " + ("\\"" + parentPath + "\\" is not valid. An absolute child route path ") + "must start with the combined path of all its parent routes.");\n      meta.relativePath = meta.relativePath.slice(parentPath.length);\n    }\n    let path = router_joinPaths([parentPath, meta.relativePath]);\n    let routesMeta = parentsMeta.concat(meta);\n    // Add the children before adding this route to the array, so we traverse the\n    // route tree depth-first and child routes appear before their parents in\n    // the "flattened" version.\n    if (route.children && route.children.length > 0) {\n      invariant(\n      // Our types know better, but runtime JS may not!\n      // @ts-expect-error\n      route.index !== true, "Index routes must not have child routes. Please remove " + ("all child routes from route path \\"" + path + "\\"."));\n      flattenRoutes(route.children, branches, routesMeta, path);\n    }\n    // Routes without a path shouldn\'t ever match by themselves unless they are\n    // index routes, so don\'t add them to the list of possible branches.\n    if (route.path == null && !route.index) {\n      return;\n    }\n    branches.push({\n      path,\n      score: computeScore(path, route.index),\n      routesMeta\n    });\n  };\n  routes.forEach((route, index) => {\n    var _route$path;\n    // coarse-grain check for optional params\n    if (route.path === "" || !((_route$path = route.path) != null && _route$path.includes("?"))) {\n      flattenRoute(route, index);\n    } else {\n      for (let exploded of explodeOptionalSegments(route.path)) {\n        flattenRoute(route, index, exploded);\n      }\n    }\n  });\n  return branches;\n}\n/**\n * Computes all combinations of optional path segments for a given path,\n * excluding combinations that are ambiguous and of lower priority.\n *\n * For example, `/one/:two?/three/:four?/:five?` explodes to:\n * - `/one/three`\n * - `/one/:two/three`\n * - `/one/three/:four`\n * - `/one/three/:five`\n * - `/one/:two/three/:four`\n * - `/one/:two/three/:five`\n * - `/one/three/:four/:five`\n * - `/one/:two/three/:four/:five`\n */\nfunction explodeOptionalSegments(path) {\n  let segments = path.split("/");\n  if (segments.length === 0) return [];\n  let [first, ...rest] = segments;\n  // Optional path segments are denoted by a trailing `?`\n  let isOptional = first.endsWith("?");\n  // Compute the corresponding required segment: `foo?` -> `foo`\n  let required = first.replace(/\\?$/, "");\n  if (rest.length === 0) {\n    // Intepret empty string as omitting an optional segment\n    // `["one", "", "three"]` corresponds to omitting `:two` from `/one/:two?/three` -> `/one/three`\n    return isOptional ? [required, ""] : [required];\n  }\n  let restExploded = explodeOptionalSegments(rest.join("/"));\n  let result = [];\n  // All child paths with the prefix.  Do this for all children before the\n  // optional version for all children, so we get consistent ordering where the\n  // parent optional aspect is preferred as required.  Otherwise, we can get\n  // child sections interspersed where deeper optional segments are higher than\n  // parent optional segments, where for example, /:two would explode _earlier_\n  // then /:one.  By always including the parent as required _for all children_\n  // first, we avoid this issue\n  result.push(...restExploded.map(subpath => subpath === "" ? required : [required, subpath].join("/")));\n  // Then, if this is an optional value, add all child versions without\n  if (isOptional) {\n    result.push(...restExploded);\n  }\n  // for absolute paths, ensure `/` instead of empty segment\n  return result.map(exploded => path.startsWith("/") && exploded === "" ? "/" : exploded);\n}\nfunction rankRouteBranches(branches) {\n  branches.sort((a, b) => a.score !== b.score ? b.score - a.score // Higher score first\n  : compareIndexes(a.routesMeta.map(meta => meta.childrenIndex), b.routesMeta.map(meta => meta.childrenIndex)));\n}\nconst paramRe = /^:[\\w-]+$/;\nconst dynamicSegmentValue = 3;\nconst indexRouteValue = 2;\nconst emptySegmentValue = 1;\nconst staticSegmentValue = 10;\nconst splatPenalty = -2;\nconst isSplat = s => s === "*";\nfunction computeScore(path, index) {\n  let segments = path.split("/");\n  let initialScore = segments.length;\n  if (segments.some(isSplat)) {\n    initialScore += splatPenalty;\n  }\n  if (index) {\n    initialScore += indexRouteValue;\n  }\n  return segments.filter(s => !isSplat(s)).reduce((score, segment) => score + (paramRe.test(segment) ? dynamicSegmentValue : segment === "" ? emptySegmentValue : staticSegmentValue), initialScore);\n}\nfunction compareIndexes(a, b) {\n  let siblings = a.length === b.length && a.slice(0, -1).every((n, i) => n === b[i]);\n  return siblings ?\n  // If two routes are siblings, we should try to match the earlier sibling\n  // first. This allows people to have fine-grained control over the matching\n  // behavior by simply putting routes with identical paths in the order they\n  // want them tried.\n  a[a.length - 1] - b[b.length - 1] :\n  // Otherwise, it doesn\'t really make sense to rank non-siblings by index,\n  // so they sort equally.\n  0;\n}\nfunction matchRouteBranch(branch, pathname) {\n  let {\n    routesMeta\n  } = branch;\n  let matchedParams = {};\n  let matchedPathname = "/";\n  let matches = [];\n  for (let i = 0; i < routesMeta.length; ++i) {\n    let meta = routesMeta[i];\n    let end = i === routesMeta.length - 1;\n    let remainingPathname = matchedPathname === "/" ? pathname : pathname.slice(matchedPathname.length) || "/";\n    let match = router_matchPath({\n      path: meta.relativePath,\n      caseSensitive: meta.caseSensitive,\n      end\n    }, remainingPathname);\n    if (!match) return null;\n    Object.assign(matchedParams, match.params);\n    let route = meta.route;\n    matches.push({\n      // TODO: Can this as be avoided?\n      params: matchedParams,\n      pathname: router_joinPaths([matchedPathname, match.pathname]),\n      pathnameBase: normalizePathname(router_joinPaths([matchedPathname, match.pathnameBase])),\n      route\n    });\n    if (match.pathnameBase !== "/") {\n      matchedPathname = router_joinPaths([matchedPathname, match.pathnameBase]);\n    }\n  }\n  return matches;\n}\n/**\n * Returns a path with params interpolated.\n *\n * @see https://reactrouter.com/utils/generate-path\n */\nfunction generatePath(originalPath, params) {\n  if (params === void 0) {\n    params = {};\n  }\n  let path = originalPath;\n  if (path.endsWith("*") && path !== "*" && !path.endsWith("/*")) {\n    warning(false, "Route path \\"" + path + "\\" will be treated as if it were " + ("\\"" + path.replace(/\\*$/, "/*") + "\\" because the `*` character must ") + "always follow a `/` in the pattern. To get rid of this warning, " + ("please change the route path to \\"" + path.replace(/\\*$/, "/*") + "\\"."));\n    path = path.replace(/\\*$/, "/*");\n  }\n  // ensure `/` is added at the beginning if the path is absolute\n  const prefix = path.startsWith("/") ? "/" : "";\n  const stringify = p => p == null ? "" : typeof p === "string" ? p : String(p);\n  const segments = path.split(/\\/+/).map((segment, index, array) => {\n    const isLastSegment = index === array.length - 1;\n    // only apply the splat if it\'s the last segment\n    if (isLastSegment && segment === "*") {\n      const star = "*";\n      // Apply the splat\n      return stringify(params[star]);\n    }\n    const keyMatch = segment.match(/^:([\\w-]+)(\\??)$/);\n    if (keyMatch) {\n      const [, key, optional] = keyMatch;\n      let param = params[key];\n      invariant(optional === "?" || param != null, "Missing \\":" + key + "\\" param");\n      return stringify(param);\n    }\n    // Remove any optional markers from optional static segments\n    return segment.replace(/\\?$/g, "");\n  })\n  // Remove empty segments\n  .filter(segment => !!segment);\n  return prefix + segments.join("/");\n}\n/**\n * Performs pattern matching on a URL pathname and returns information about\n * the match.\n *\n * @see https://reactrouter.com/utils/match-path\n */\nfunction router_matchPath(pattern, pathname) {\n  if (typeof pattern === "string") {\n    pattern = {\n      path: pattern,\n      caseSensitive: false,\n      end: true\n    };\n  }\n  let [matcher, compiledParams] = compilePath(pattern.path, pattern.caseSensitive, pattern.end);\n  let match = pathname.match(matcher);\n  if (!match) return null;\n  let matchedPathname = match[0];\n  let pathnameBase = matchedPathname.replace(/(.)\\/+$/, "$1");\n  let captureGroups = match.slice(1);\n  let params = compiledParams.reduce((memo, _ref, index) => {\n    let {\n      paramName,\n      isOptional\n    } = _ref;\n    // We need to compute the pathnameBase here using the raw splat value\n    // instead of using params["*"] later because it will be decoded then\n    if (paramName === "*") {\n      let splatValue = captureGroups[index] || "";\n      pathnameBase = matchedPathname.slice(0, matchedPathname.length - splatValue.length).replace(/(.)\\/+$/, "$1");\n    }\n    const value = captureGroups[index];\n    if (isOptional && !value) {\n      memo[paramName] = undefined;\n    } else {\n      memo[paramName] = (value || "").replace(/%2F/g, "/");\n    }\n    return memo;\n  }, {});\n  return {\n    params,\n    pathname: matchedPathname,\n    pathnameBase,\n    pattern\n  };\n}\nfunction compilePath(path, caseSensitive, end) {\n  if (caseSensitive === void 0) {\n    caseSensitive = false;\n  }\n  if (end === void 0) {\n    end = true;\n  }\n  warning(path === "*" || !path.endsWith("*") || path.endsWith("/*"), "Route path \\"" + path + "\\" will be treated as if it were " + ("\\"" + path.replace(/\\*$/, "/*") + "\\" because the `*` character must ") + "always follow a `/` in the pattern. To get rid of this warning, " + ("please change the route path to \\"" + path.replace(/\\*$/, "/*") + "\\"."));\n  let params = [];\n  let regexpSource = "^" + path.replace(/\\/*\\*?$/, "") // Ignore trailing / and /*, we\'ll handle it below\n  .replace(/^\\/*/, "/") // Make sure it has a leading /\n  .replace(/[\\\\.*+^${}|()[\\]]/g, "\\\\$&") // Escape special regex chars\n  .replace(/\\/:([\\w-]+)(\\?)?/g, (_, paramName, isOptional) => {\n    params.push({\n      paramName,\n      isOptional: isOptional != null\n    });\n    return isOptional ? "/?([^\\\\/]+)?" : "/([^\\\\/]+)";\n  });\n  if (path.endsWith("*")) {\n    params.push({\n      paramName: "*"\n    });\n    regexpSource += path === "*" || path === "/*" ? "(.*)$" // Already matched the initial /, just match the rest\n    : "(?:\\\\/(.+)|\\\\/*)$"; // Don\'t include the / in params["*"]\n  } else if (end) {\n    // When matching to the end, ignore trailing slashes\n    regexpSource += "\\\\/*$";\n  } else if (path !== "" && path !== "/") {\n    // If our path is non-empty and contains anything beyond an initial slash,\n    // then we have _some_ form of path in our regex, so we should expect to\n    // match only if we find the end of this path segment.  Look for an optional\n    // non-captured trailing slash (to match a portion of the URL) or the end\n    // of the path (if we\'ve matched to the end).  We used to do this with a\n    // word boundary but that gives false positives on routes like\n    // /user-preferences since `-` counts as a word boundary.\n    regexpSource += "(?:(?=\\\\/|$))";\n  } else ;\n  let matcher = new RegExp(regexpSource, caseSensitive ? undefined : "i");\n  return [matcher, params];\n}\nfunction decodePath(value) {\n  try {\n    return value.split("/").map(v => decodeURIComponent(v).replace(/\\//g, "%2F")).join("/");\n  } catch (error) {\n    warning(false, "The URL path \\"" + value + "\\" could not be decoded because it is is a " + "malformed URL segment. This is probably due to a bad percent " + ("encoding (" + error + ")."));\n    return value;\n  }\n}\n/**\n * @private\n */\nfunction router_stripBasename(pathname, basename) {\n  if (basename === "/") return pathname;\n  if (!pathname.toLowerCase().startsWith(basename.toLowerCase())) {\n    return null;\n  }\n  // We want to leave trailing slash behavior in the user\'s control, so if they\n  // specify a basename with a trailing slash, we should support it\n  let startIndex = basename.endsWith("/") ? basename.length - 1 : basename.length;\n  let nextChar = pathname.charAt(startIndex);\n  if (nextChar && nextChar !== "/") {\n    // pathname does not start with basename/\n    return null;\n  }\n  return pathname.slice(startIndex) || "/";\n}\n/**\n * Returns a resolved path object relative to the given pathname.\n *\n * @see https://reactrouter.com/utils/resolve-path\n */\nfunction resolvePath(to, fromPathname) {\n  if (fromPathname === void 0) {\n    fromPathname = "/";\n  }\n  let {\n    pathname: toPathname,\n    search = "",\n    hash = ""\n  } = typeof to === "string" ? parsePath(to) : to;\n  let pathname = toPathname ? toPathname.startsWith("/") ? toPathname : resolvePathname(toPathname, fromPathname) : fromPathname;\n  return {\n    pathname,\n    search: normalizeSearch(search),\n    hash: normalizeHash(hash)\n  };\n}\nfunction resolvePathname(relativePath, fromPathname) {\n  let segments = fromPathname.replace(/\\/+$/, "").split("/");\n  let relativeSegments = relativePath.split("/");\n  relativeSegments.forEach(segment => {\n    if (segment === "..") {\n      // Keep the root "" segment so the pathname starts at /\n      if (segments.length > 1) segments.pop();\n    } else if (segment !== ".") {\n      segments.push(segment);\n    }\n  });\n  return segments.length > 1 ? segments.join("/") : "/";\n}\nfunction getInvalidPathError(char, field, dest, path) {\n  return "Cannot include a \'" + char + "\' character in a manually specified " + ("`to." + field + "` field [" + JSON.stringify(path) + "].  Please separate it out to the ") + ("`to." + dest + "` field. Alternatively you may provide the full path as ") + "a string in <Link to=\\"...\\"> and the router will parse it for you.";\n}\n/**\n * @private\n *\n * When processing relative navigation we want to ignore ancestor routes that\n * do not contribute to the path, such that index/pathless layout routes don\'t\n * interfere.\n *\n * For example, when moving a route element into an index route and/or a\n * pathless layout route, relative link behavior contained within should stay\n * the same.  Both of the following examples should link back to the root:\n *\n *   <Route path="/">\n *     <Route path="accounts" element={<Link to=".."}>\n *   </Route>\n *\n *   <Route path="/">\n *     <Route path="accounts">\n *       <Route element={<AccountsLayout />}>       // <-- Does not contribute\n *         <Route index element={<Link to=".."} />  // <-- Does not contribute\n *       </Route\n *     </Route>\n *   </Route>\n */\nfunction getPathContributingMatches(matches) {\n  return matches.filter((match, index) => index === 0 || match.route.path && match.route.path.length > 0);\n}\n// Return the array of pathnames for the current route matches - used to\n// generate the routePathnames input for resolveTo()\nfunction getResolveToMatches(matches, v7_relativeSplatPath) {\n  let pathMatches = getPathContributingMatches(matches);\n  // When v7_relativeSplatPath is enabled, use the full pathname for the leaf\n  // match so we include splat values for "." links.  See:\n  // https://github.com/remix-run/react-router/issues/11052#issuecomment-1836589329\n  if (v7_relativeSplatPath) {\n    return pathMatches.map((match, idx) => idx === matches.length - 1 ? match.pathname : match.pathnameBase);\n  }\n  return pathMatches.map(match => match.pathnameBase);\n}\n/**\n * @private\n */\nfunction router_resolveTo(toArg, routePathnames, locationPathname, isPathRelative) {\n  if (isPathRelative === void 0) {\n    isPathRelative = false;\n  }\n  let to;\n  if (typeof toArg === "string") {\n    to = parsePath(toArg);\n  } else {\n    to = _extends({}, toArg);\n    invariant(!to.pathname || !to.pathname.includes("?"), getInvalidPathError("?", "pathname", "search", to));\n    invariant(!to.pathname || !to.pathname.includes("#"), getInvalidPathError("#", "pathname", "hash", to));\n    invariant(!to.search || !to.search.includes("#"), getInvalidPathError("#", "search", "hash", to));\n  }\n  let isEmptyPath = toArg === "" || to.pathname === "";\n  let toPathname = isEmptyPath ? "/" : to.pathname;\n  let from;\n  // Routing is relative to the current pathname if explicitly requested.\n  //\n  // If a pathname is explicitly provided in `to`, it should be relative to the\n  // route context. This is explained in `Note on `<Link to>` values` in our\n  // migration guide from v5 as a means of disambiguation between `to` values\n  // that begin with `/` and those that do not. However, this is problematic for\n  // `to` values that do not provide a pathname. `to` can simply be a search or\n  // hash string, in which case we should assume that the navigation is relative\n  // to the current location\'s pathname and *not* the route pathname.\n  if (toPathname == null) {\n    from = locationPathname;\n  } else {\n    let routePathnameIndex = routePathnames.length - 1;\n    // With relative="route" (the default), each leading .. segment means\n    // "go up one route" instead of "go up one URL segment".  This is a key\n    // difference from how <a href> works and a major reason we call this a\n    // "to" value instead of a "href".\n    if (!isPathRelative && toPathname.startsWith("..")) {\n      let toSegments = toPathname.split("/");\n      while (toSegments[0] === "..") {\n        toSegments.shift();\n        routePathnameIndex -= 1;\n      }\n      to.pathname = toSegments.join("/");\n    }\n    from = routePathnameIndex >= 0 ? routePathnames[routePathnameIndex] : "/";\n  }\n  let path = resolvePath(to, from);\n  // Ensure the pathname has a trailing slash if the original "to" had one\n  let hasExplicitTrailingSlash = toPathname && toPathname !== "/" && toPathname.endsWith("/");\n  // Or if this was a link to the current path which has a trailing slash\n  let hasCurrentTrailingSlash = (isEmptyPath || toPathname === ".") && locationPathname.endsWith("/");\n  if (!path.pathname.endsWith("/") && (hasExplicitTrailingSlash || hasCurrentTrailingSlash)) {\n    path.pathname += "/";\n  }\n  return path;\n}\n/**\n * @private\n */\nfunction getToPathname(to) {\n  // Empty strings should be treated the same as / paths\n  return to === "" || to.pathname === "" ? "/" : typeof to === "string" ? parsePath(to).pathname : to.pathname;\n}\n/**\n * @private\n */\nconst router_joinPaths = paths => paths.join("/").replace(/\\/\\/+/g, "/");\n/**\n * @private\n */\nconst normalizePathname = pathname => pathname.replace(/\\/+$/, "").replace(/^\\/*/, "/");\n/**\n * @private\n */\nconst normalizeSearch = search => !search || search === "?" ? "" : search.startsWith("?") ? search : "?" + search;\n/**\n * @private\n */\nconst normalizeHash = hash => !hash || hash === "#" ? "" : hash.startsWith("#") ? hash : "#" + hash;\n/**\n * This is a shortcut for creating `application/json` responses. Converts `data`\n * to JSON and sets the `Content-Type` header.\n */\nconst json = function json(data, init) {\n  if (init === void 0) {\n    init = {};\n  }\n  let responseInit = typeof init === "number" ? {\n    status: init\n  } : init;\n  let headers = new Headers(responseInit.headers);\n  if (!headers.has("Content-Type")) {\n    headers.set("Content-Type", "application/json; charset=utf-8");\n  }\n  return new Response(JSON.stringify(data), _extends({}, responseInit, {\n    headers\n  }));\n};\nclass AbortedDeferredError extends Error {}\nclass DeferredData {\n  constructor(data, responseInit) {\n    this.pendingKeysSet = new Set();\n    this.subscribers = new Set();\n    this.deferredKeys = [];\n    invariant(data && typeof data === "object" && !Array.isArray(data), "defer() only accepts plain objects");\n    // Set up an AbortController + Promise we can race against to exit early\n    // cancellation\n    let reject;\n    this.abortPromise = new Promise((_, r) => reject = r);\n    this.controller = new AbortController();\n    let onAbort = () => reject(new AbortedDeferredError("Deferred data aborted"));\n    this.unlistenAbortSignal = () => this.controller.signal.removeEventListener("abort", onAbort);\n    this.controller.signal.addEventListener("abort", onAbort);\n    this.data = Object.entries(data).reduce((acc, _ref2) => {\n      let [key, value] = _ref2;\n      return Object.assign(acc, {\n        [key]: this.trackPromise(key, value)\n      });\n    }, {});\n    if (this.done) {\n      // All incoming values were resolved\n      this.unlistenAbortSignal();\n    }\n    this.init = responseInit;\n  }\n  trackPromise(key, value) {\n    if (!(value instanceof Promise)) {\n      return value;\n    }\n    this.deferredKeys.push(key);\n    this.pendingKeysSet.add(key);\n    // We store a little wrapper promise that will be extended with\n    // _data/_error props upon resolve/reject\n    let promise = Promise.race([value, this.abortPromise]).then(data => this.onSettle(promise, key, undefined, data), error => this.onSettle(promise, key, error));\n    // Register rejection listeners to avoid uncaught promise rejections on\n    // errors or aborted deferred values\n    promise.catch(() => {});\n    Object.defineProperty(promise, "_tracked", {\n      get: () => true\n    });\n    return promise;\n  }\n  onSettle(promise, key, error, data) {\n    if (this.controller.signal.aborted && error instanceof AbortedDeferredError) {\n      this.unlistenAbortSignal();\n      Object.defineProperty(promise, "_error", {\n        get: () => error\n      });\n      return Promise.reject(error);\n    }\n    this.pendingKeysSet.delete(key);\n    if (this.done) {\n      // Nothing left to abort!\n      this.unlistenAbortSignal();\n    }\n    // If the promise was resolved/rejected with undefined, we\'ll throw an error as you\n    // should always resolve with a value or null\n    if (error === undefined && data === undefined) {\n      let undefinedError = new Error("Deferred data for key \\"" + key + "\\" resolved/rejected with `undefined`, " + "you must resolve/reject with a value or `null`.");\n      Object.defineProperty(promise, "_error", {\n        get: () => undefinedError\n      });\n      this.emit(false, key);\n      return Promise.reject(undefinedError);\n    }\n    if (data === undefined) {\n      Object.defineProperty(promise, "_error", {\n        get: () => error\n      });\n      this.emit(false, key);\n      return Promise.reject(error);\n    }\n    Object.defineProperty(promise, "_data", {\n      get: () => data\n    });\n    this.emit(false, key);\n    return data;\n  }\n  emit(aborted, settledKey) {\n    this.subscribers.forEach(subscriber => subscriber(aborted, settledKey));\n  }\n  subscribe(fn) {\n    this.subscribers.add(fn);\n    return () => this.subscribers.delete(fn);\n  }\n  cancel() {\n    this.controller.abort();\n    this.pendingKeysSet.forEach((v, k) => this.pendingKeysSet.delete(k));\n    this.emit(true);\n  }\n  async resolveData(signal) {\n    let aborted = false;\n    if (!this.done) {\n      let onAbort = () => this.cancel();\n      signal.addEventListener("abort", onAbort);\n      aborted = await new Promise(resolve => {\n        this.subscribe(aborted => {\n          signal.removeEventListener("abort", onAbort);\n          if (aborted || this.done) {\n            resolve(aborted);\n          }\n        });\n      });\n    }\n    return aborted;\n  }\n  get done() {\n    return this.pendingKeysSet.size === 0;\n  }\n  get unwrappedData() {\n    invariant(this.data !== null && this.done, "Can only unwrap data on initialized and settled deferreds");\n    return Object.entries(this.data).reduce((acc, _ref3) => {\n      let [key, value] = _ref3;\n      return Object.assign(acc, {\n        [key]: unwrapTrackedPromise(value)\n      });\n    }, {});\n  }\n  get pendingKeys() {\n    return Array.from(this.pendingKeysSet);\n  }\n}\nfunction isTrackedPromise(value) {\n  return value instanceof Promise && value._tracked === true;\n}\nfunction unwrapTrackedPromise(value) {\n  if (!isTrackedPromise(value)) {\n    return value;\n  }\n  if (value._error) {\n    throw value._error;\n  }\n  return value._data;\n}\nconst defer = function defer(data, init) {\n  if (init === void 0) {\n    init = {};\n  }\n  let responseInit = typeof init === "number" ? {\n    status: init\n  } : init;\n  return new DeferredData(data, responseInit);\n};\n/**\n * A redirect response. Sets the status code and the `Location` header.\n * Defaults to "302 Found".\n */\nconst redirect = function redirect(url, init) {\n  if (init === void 0) {\n    init = 302;\n  }\n  let responseInit = init;\n  if (typeof responseInit === "number") {\n    responseInit = {\n      status: responseInit\n    };\n  } else if (typeof responseInit.status === "undefined") {\n    responseInit.status = 302;\n  }\n  let headers = new Headers(responseInit.headers);\n  headers.set("Location", url);\n  return new Response(null, _extends({}, responseInit, {\n    headers\n  }));\n};\n/**\n * A redirect response that will force a document reload to the new location.\n * Sets the status code and the `Location` header.\n * Defaults to "302 Found".\n */\nconst redirectDocument = (url, init) => {\n  let response = redirect(url, init);\n  response.headers.set("X-Remix-Reload-Document", "true");\n  return response;\n};\n/**\n * @private\n * Utility class we use to hold auto-unwrapped 4xx/5xx Response bodies\n *\n * We don\'t export the class for public use since it\'s an implementation\n * detail, but we export the interface above so folks can build their own\n * abstractions around instances via isRouteErrorResponse()\n */\nclass ErrorResponseImpl {\n  constructor(status, statusText, data, internal) {\n    if (internal === void 0) {\n      internal = false;\n    }\n    this.status = status;\n    this.statusText = statusText || "";\n    this.internal = internal;\n    if (data instanceof Error) {\n      this.data = data.toString();\n      this.error = data;\n    } else {\n      this.data = data;\n    }\n  }\n}\n/**\n * Check if the given error is an ErrorResponse generated from a 4xx/5xx\n * Response thrown from an action/loader\n */\nfunction isRouteErrorResponse(error) {\n  return error != null && typeof error.status === "number" && typeof error.statusText === "string" && typeof error.internal === "boolean" && "data" in error;\n}\nconst validMutationMethodsArr = ["post", "put", "patch", "delete"];\nconst validMutationMethods = new Set(validMutationMethodsArr);\nconst validRequestMethodsArr = ["get", ...validMutationMethodsArr];\nconst validRequestMethods = new Set(validRequestMethodsArr);\nconst redirectStatusCodes = new Set([301, 302, 303, 307, 308]);\nconst redirectPreserveMethodStatusCodes = new Set([307, 308]);\nconst IDLE_NAVIGATION = {\n  state: "idle",\n  location: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined,\n  json: undefined,\n  text: undefined\n};\nconst router_IDLE_FETCHER = {\n  state: "idle",\n  data: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined,\n  json: undefined,\n  text: undefined\n};\nconst router_IDLE_BLOCKER = {\n  state: "unblocked",\n  proceed: undefined,\n  reset: undefined,\n  location: undefined\n};\nconst ABSOLUTE_URL_REGEX = /^(?:[a-z][a-z0-9+.-]*:|\\/\\/)/i;\nconst defaultMapRouteProperties = route => ({\n  hasErrorBoundary: Boolean(route.hasErrorBoundary)\n});\nconst TRANSITIONS_STORAGE_KEY = "remix-router-transitions";\n//#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region createRouter\n////////////////////////////////////////////////////////////////////////////////\n/**\n * Create a router and listen to history POP navigations\n */\nfunction router_createRouter(init) {\n  const routerWindow = init.window ? init.window : typeof window !== "undefined" ? window : undefined;\n  const isBrowser = typeof routerWindow !== "undefined" && typeof routerWindow.document !== "undefined" && typeof routerWindow.document.createElement !== "undefined";\n  const isServer = !isBrowser;\n  invariant(init.routes.length > 0, "You must provide a non-empty routes array to createRouter");\n  let mapRouteProperties;\n  if (init.mapRouteProperties) {\n    mapRouteProperties = init.mapRouteProperties;\n  } else if (init.detectErrorBoundary) {\n    // If they are still using the deprecated version, wrap it with the new API\n    let detectErrorBoundary = init.detectErrorBoundary;\n    mapRouteProperties = route => ({\n      hasErrorBoundary: detectErrorBoundary(route)\n    });\n  } else {\n    mapRouteProperties = defaultMapRouteProperties;\n  }\n  // Routes keyed by ID\n  let manifest = {};\n  // Routes in tree format for matching\n  let dataRoutes = convertRoutesToDataRoutes(init.routes, mapRouteProperties, undefined, manifest);\n  let inFlightDataRoutes;\n  let basename = init.basename || "/";\n  // Config driven behavior flags\n  let future = _extends({\n    v7_fetcherPersist: false,\n    v7_normalizeFormMethod: false,\n    v7_partialHydration: false,\n    v7_prependBasename: false,\n    v7_relativeSplatPath: false\n  }, init.future);\n  // Cleanup function for history\n  let unlistenHistory = null;\n  // Externally-provided functions to call on all state changes\n  let subscribers = new Set();\n  // Externally-provided object to hold scroll restoration locations during routing\n  let savedScrollPositions = null;\n  // Externally-provided function to get scroll restoration keys\n  let getScrollRestorationKey = null;\n  // Externally-provided function to get current scroll position\n  let getScrollPosition = null;\n  // One-time flag to control the initial hydration scroll restoration.  Because\n  // we don\'t get the saved positions from <ScrollRestoration /> until _after_\n  // the initial render, we need to manually trigger a separate updateState to\n  // send along the restoreScrollPosition\n  // Set to true if we have `hydrationData` since we assume we were SSR\'d and that\n  // SSR did the initial scroll restoration.\n  let initialScrollRestored = init.hydrationData != null;\n  let initialMatches = matchRoutes(dataRoutes, init.history.location, basename);\n  let initialErrors = null;\n  if (initialMatches == null) {\n    // If we do not match a user-provided-route, fall back to the root\n    // to allow the error boundary to take over\n    let error = getInternalRouterError(404, {\n      pathname: init.history.location.pathname\n    });\n    let {\n      matches,\n      route\n    } = getShortCircuitMatches(dataRoutes);\n    initialMatches = matches;\n    initialErrors = {\n      [route.id]: error\n    };\n  }\n  let initialized;\n  let hasLazyRoutes = initialMatches.some(m => m.route.lazy);\n  let hasLoaders = initialMatches.some(m => m.route.loader);\n  if (hasLazyRoutes) {\n    // All initialMatches need to be loaded before we\'re ready.  If we have lazy\n    // functions around still then we\'ll need to run them in initialize()\n    initialized = false;\n  } else if (!hasLoaders) {\n    // If we\'ve got no loaders to run, then we\'re good to go\n    initialized = true;\n  } else if (future.v7_partialHydration) {\n    // If partial hydration is enabled, we\'re initialized so long as we were\n    // provided with hydrationData for every route with a loader, and no loaders\n    // were marked for explicit hydration\n    let loaderData = init.hydrationData ? init.hydrationData.loaderData : null;\n    let errors = init.hydrationData ? init.hydrationData.errors : null;\n    let isRouteInitialized = m => {\n      // No loader, nothing to initialize\n      if (!m.route.loader) return true;\n      // Explicitly opting-in to running on hydration\n      if (m.route.loader.hydrate === true) return false;\n      // Otherwise, initialized if hydrated with data or an error\n      return loaderData && loaderData[m.route.id] !== undefined || errors && errors[m.route.id] !== undefined;\n    };\n    // If errors exist, don\'t consider routes below the boundary\n    if (errors) {\n      let idx = initialMatches.findIndex(m => errors[m.route.id] !== undefined);\n      initialized = initialMatches.slice(0, idx + 1).every(isRouteInitialized);\n    } else {\n      initialized = initialMatches.every(isRouteInitialized);\n    }\n  } else {\n    // Without partial hydration - we\'re initialized if we were provided any\n    // hydrationData - which is expected to be complete\n    initialized = init.hydrationData != null;\n  }\n  let router;\n  let state = {\n    historyAction: init.history.action,\n    location: init.history.location,\n    matches: initialMatches,\n    initialized,\n    navigation: IDLE_NAVIGATION,\n    // Don\'t restore on initial updateState() if we were SSR\'d\n    restoreScrollPosition: init.hydrationData != null ? false : null,\n    preventScrollReset: false,\n    revalidation: "idle",\n    loaderData: init.hydrationData && init.hydrationData.loaderData || {},\n    actionData: init.hydrationData && init.hydrationData.actionData || null,\n    errors: init.hydrationData && init.hydrationData.errors || initialErrors,\n    fetchers: new Map(),\n    blockers: new Map()\n  };\n  // -- Stateful internal variables to manage navigations --\n  // Current navigation in progress (to be committed in completeNavigation)\n  let pendingAction = Action.Pop;\n  // Should the current navigation prevent the scroll reset if scroll cannot\n  // be restored?\n  let pendingPreventScrollReset = false;\n  // AbortController for the active navigation\n  let pendingNavigationController;\n  // Should the current navigation enable document.startViewTransition?\n  let pendingViewTransitionEnabled = false;\n  // Store applied view transitions so we can apply them on POP\n  let appliedViewTransitions = new Map();\n  // Cleanup function for persisting applied transitions to sessionStorage\n  let removePageHideEventListener = null;\n  // We use this to avoid touching history in completeNavigation if a\n  // revalidation is entirely uninterrupted\n  let isUninterruptedRevalidation = false;\n  // Use this internal flag to force revalidation of all loaders:\n  //  - submissions (completed or interrupted)\n  //  - useRevalidator()\n  //  - X-Remix-Revalidate (from redirect)\n  let isRevalidationRequired = false;\n  // Use this internal array to capture routes that require revalidation due\n  // to a cancelled deferred on action submission\n  let cancelledDeferredRoutes = [];\n  // Use this internal array to capture fetcher loads that were cancelled by an\n  // action navigation and require revalidation\n  let cancelledFetcherLoads = [];\n  // AbortControllers for any in-flight fetchers\n  let fetchControllers = new Map();\n  // Track loads based on the order in which they started\n  let incrementingLoadId = 0;\n  // Track the outstanding pending navigation data load to be compared against\n  // the globally incrementing load when a fetcher load lands after a completed\n  // navigation\n  let pendingNavigationLoadId = -1;\n  // Fetchers that triggered data reloads as a result of their actions\n  let fetchReloadIds = new Map();\n  // Fetchers that triggered redirect navigations\n  let fetchRedirectIds = new Set();\n  // Most recent href/match for fetcher.load calls for fetchers\n  let fetchLoadMatches = new Map();\n  // Ref-count mounted fetchers so we know when it\'s ok to clean them up\n  let activeFetchers = new Map();\n  // Fetchers that have requested a delete when using v7_fetcherPersist,\n  // they\'ll be officially removed after they return to idle\n  let deletedFetchers = new Set();\n  // Store DeferredData instances for active route matches.  When a\n  // route loader returns defer() we stick one in here.  Then, when a nested\n  // promise resolves we update loaderData.  If a new navigation starts we\n  // cancel active deferreds for eliminated routes.\n  let activeDeferreds = new Map();\n  // Store blocker functions in a separate Map outside of router state since\n  // we don\'t need to update UI state if they change\n  let blockerFunctions = new Map();\n  // Flag to ignore the next history update, so we can revert the URL change on\n  // a POP navigation that was blocked by the user without touching router state\n  let ignoreNextHistoryUpdate = false;\n  // Initialize the router, all side effects should be kicked off from here.\n  // Implemented as a Fluent API for ease of:\n  //   let router = createRouter(init).initialize();\n  function initialize() {\n    // If history informs us of a POP navigation, start the navigation but do not update\n    // state.  We\'ll update our own state once the navigation completes\n    unlistenHistory = init.history.listen(_ref => {\n      let {\n        action: historyAction,\n        location,\n        delta\n      } = _ref;\n      // Ignore this event if it was just us resetting the URL from a\n      // blocked POP navigation\n      if (ignoreNextHistoryUpdate) {\n        ignoreNextHistoryUpdate = false;\n        return;\n      }\n      warning(blockerFunctions.size === 0 || delta != null, "You are trying to use a blocker on a POP navigation to a location " + "that was not created by @remix-run/router. This will fail silently in " + "production. This can happen if you are navigating outside the router " + "via `window.history.pushState`/`window.location.hash` instead of using " + "router navigation APIs.  This can also happen if you are using " + "createHashRouter and the user manually changes the URL.");\n      let blockerKey = shouldBlockNavigation({\n        currentLocation: state.location,\n        nextLocation: location,\n        historyAction\n      });\n      if (blockerKey && delta != null) {\n        // Restore the URL to match the current UI, but don\'t update router state\n        ignoreNextHistoryUpdate = true;\n        init.history.go(delta * -1);\n        // Put the blocker into a blocked state\n        updateBlocker(blockerKey, {\n          state: "blocked",\n          location,\n          proceed() {\n            updateBlocker(blockerKey, {\n              state: "proceeding",\n              proceed: undefined,\n              reset: undefined,\n              location\n            });\n            // Re-do the same POP navigation we just blocked\n            init.history.go(delta);\n          },\n          reset() {\n            let blockers = new Map(state.blockers);\n            blockers.set(blockerKey, router_IDLE_BLOCKER);\n            updateState({\n              blockers\n            });\n          }\n        });\n        return;\n      }\n      return startNavigation(historyAction, location);\n    });\n    if (isBrowser) {\n      // FIXME: This feels gross.  How can we cleanup the lines between\n      // scrollRestoration/appliedTransitions persistance?\n      restoreAppliedTransitions(routerWindow, appliedViewTransitions);\n      let _saveAppliedTransitions = () => persistAppliedTransitions(routerWindow, appliedViewTransitions);\n      routerWindow.addEventListener("pagehide", _saveAppliedTransitions);\n      removePageHideEventListener = () => routerWindow.removeEventListener("pagehide", _saveAppliedTransitions);\n    }\n    // Kick off initial data load if needed.  Use Pop to avoid modifying history\n    // Note we don\'t do any handling of lazy here.  For SPA\'s it\'ll get handled\n    // in the normal navigation flow.  For SSR it\'s expected that lazy modules are\n    // resolved prior to router creation since we can\'t go into a fallbackElement\n    // UI for SSR\'d apps\n    if (!state.initialized) {\n      startNavigation(Action.Pop, state.location, {\n        initialHydration: true\n      });\n    }\n    return router;\n  }\n  // Clean up a router and it\'s side effects\n  function dispose() {\n    if (unlistenHistory) {\n      unlistenHistory();\n    }\n    if (removePageHideEventListener) {\n      removePageHideEventListener();\n    }\n    subscribers.clear();\n    pendingNavigationController && pendingNavigationController.abort();\n    state.fetchers.forEach((_, key) => deleteFetcher(key));\n    state.blockers.forEach((_, key) => deleteBlocker(key));\n  }\n  // Subscribe to state updates for the router\n  function subscribe(fn) {\n    subscribers.add(fn);\n    return () => subscribers.delete(fn);\n  }\n  // Update our state and notify the calling context of the change\n  function updateState(newState, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n    state = _extends({}, state, newState);\n    // Prep fetcher cleanup so we can tell the UI which fetcher data entries\n    // can be removed\n    let completedFetchers = [];\n    let deletedFetchersKeys = [];\n    if (future.v7_fetcherPersist) {\n      state.fetchers.forEach((fetcher, key) => {\n        if (fetcher.state === "idle") {\n          if (deletedFetchers.has(key)) {\n            // Unmounted from the UI and can be totally removed\n            deletedFetchersKeys.push(key);\n          } else {\n            // Returned to idle but still mounted in the UI, so semi-remains for\n            // revalidations and such\n            completedFetchers.push(key);\n          }\n        }\n      });\n    }\n    // Iterate over a local copy so that if flushSync is used and we end up\n    // removing and adding a new subscriber due to the useCallback dependencies,\n    // we don\'t get ourselves into a loop calling the new subscriber immediately\n    [...subscribers].forEach(subscriber => subscriber(state, {\n      deletedFetchers: deletedFetchersKeys,\n      unstable_viewTransitionOpts: opts.viewTransitionOpts,\n      unstable_flushSync: opts.flushSync === true\n    }));\n    // Remove idle fetchers from state since we only care about in-flight fetchers.\n    if (future.v7_fetcherPersist) {\n      completedFetchers.forEach(key => state.fetchers.delete(key));\n      deletedFetchersKeys.forEach(key => deleteFetcher(key));\n    }\n  }\n  // Complete a navigation returning the state.navigation back to the IDLE_NAVIGATION\n  // and setting state.[historyAction/location/matches] to the new route.\n  // - Location is a required param\n  // - Navigation will always be set to IDLE_NAVIGATION\n  // - Can pass any other state in newState\n  function completeNavigation(location, newState, _temp) {\n    var _location$state, _location$state2;\n    let {\n      flushSync\n    } = _temp === void 0 ? {} : _temp;\n    // Deduce if we\'re in a loading/actionReload state:\n    // - We have committed actionData in the store\n    // - The current navigation was a mutation submission\n    // - We\'re past the submitting state and into the loading state\n    // - The location being loaded is not the result of a redirect\n    let isActionReload = state.actionData != null && state.navigation.formMethod != null && isMutationMethod(state.navigation.formMethod) && state.navigation.state === "loading" && ((_location$state = location.state) == null ? void 0 : _location$state._isRedirect) !== true;\n    let actionData;\n    if (newState.actionData) {\n      if (Object.keys(newState.actionData).length > 0) {\n        actionData = newState.actionData;\n      } else {\n        // Empty actionData -> clear prior actionData due to an action error\n        actionData = null;\n      }\n    } else if (isActionReload) {\n      // Keep the current data if we\'re wrapping up the action reload\n      actionData = state.actionData;\n    } else {\n      // Clear actionData on any other completed navigations\n      actionData = null;\n    }\n    // Always preserve any existing loaderData from re-used routes\n    let loaderData = newState.loaderData ? mergeLoaderData(state.loaderData, newState.loaderData, newState.matches || [], newState.errors) : state.loaderData;\n    // On a successful navigation we can assume we got through all blockers\n    // so we can start fresh\n    let blockers = state.blockers;\n    if (blockers.size > 0) {\n      blockers = new Map(blockers);\n      blockers.forEach((_, k) => blockers.set(k, router_IDLE_BLOCKER));\n    }\n    // Always respect the user flag.  Otherwise don\'t reset on mutation\n    // submission navigations unless they redirect\n    let preventScrollReset = pendingPreventScrollReset === true || state.navigation.formMethod != null && isMutationMethod(state.navigation.formMethod) && ((_location$state2 = location.state) == null ? void 0 : _location$state2._isRedirect) !== true;\n    if (inFlightDataRoutes) {\n      dataRoutes = inFlightDataRoutes;\n      inFlightDataRoutes = undefined;\n    }\n    if (isUninterruptedRevalidation) ;else if (pendingAction === Action.Pop) ;else if (pendingAction === Action.Push) {\n      init.history.push(location, location.state);\n    } else if (pendingAction === Action.Replace) {\n      init.history.replace(location, location.state);\n    }\n    let viewTransitionOpts;\n    // On POP, enable transitions if they were enabled on the original navigation\n    if (pendingAction === Action.Pop) {\n      // Forward takes precedence so they behave like the original navigation\n      let priorPaths = appliedViewTransitions.get(state.location.pathname);\n      if (priorPaths && priorPaths.has(location.pathname)) {\n        viewTransitionOpts = {\n          currentLocation: state.location,\n          nextLocation: location\n        };\n      } else if (appliedViewTransitions.has(location.pathname)) {\n        // If we don\'t have a previous forward nav, assume we\'re popping back to\n        // the new location and enable if that location previously enabled\n        viewTransitionOpts = {\n          currentLocation: location,\n          nextLocation: state.location\n        };\n      }\n    } else if (pendingViewTransitionEnabled) {\n      // Store the applied transition on PUSH/REPLACE\n      let toPaths = appliedViewTransitions.get(state.location.pathname);\n      if (toPaths) {\n        toPaths.add(location.pathname);\n      } else {\n        toPaths = new Set([location.pathname]);\n        appliedViewTransitions.set(state.location.pathname, toPaths);\n      }\n      viewTransitionOpts = {\n        currentLocation: state.location,\n        nextLocation: location\n      };\n    }\n    updateState(_extends({}, newState, {\n      actionData,\n      loaderData,\n      historyAction: pendingAction,\n      location,\n      initialized: true,\n      navigation: IDLE_NAVIGATION,\n      revalidation: "idle",\n      restoreScrollPosition: getSavedScrollPosition(location, newState.matches || state.matches),\n      preventScrollReset,\n      blockers\n    }), {\n      viewTransitionOpts,\n      flushSync: flushSync === true\n    });\n    // Reset stateful navigation vars\n    pendingAction = Action.Pop;\n    pendingPreventScrollReset = false;\n    pendingViewTransitionEnabled = false;\n    isUninterruptedRevalidation = false;\n    isRevalidationRequired = false;\n    cancelledDeferredRoutes = [];\n    cancelledFetcherLoads = [];\n  }\n  // Trigger a navigation event, which can either be a numerical POP or a PUSH\n  // replace with an optional submission\n  async function navigate(to, opts) {\n    if (typeof to === "number") {\n      init.history.go(to);\n      return;\n    }\n    let normalizedPath = normalizeTo(state.location, state.matches, basename, future.v7_prependBasename, to, future.v7_relativeSplatPath, opts == null ? void 0 : opts.fromRouteId, opts == null ? void 0 : opts.relative);\n    let {\n      path,\n      submission,\n      error\n    } = normalizeNavigateOptions(future.v7_normalizeFormMethod, false, normalizedPath, opts);\n    let currentLocation = state.location;\n    let nextLocation = createLocation(state.location, path, opts && opts.state);\n    // When using navigate as a PUSH/REPLACE we aren\'t reading an already-encoded\n    // URL from window.location, so we need to encode it here so the behavior\n    // remains the same as POP and non-data-router usages.  new URL() does all\n    // the same encoding we\'d get from a history.pushState/window.location read\n    // without having to touch history\n    nextLocation = _extends({}, nextLocation, init.history.encodeLocation(nextLocation));\n    let userReplace = opts && opts.replace != null ? opts.replace : undefined;\n    let historyAction = Action.Push;\n    if (userReplace === true) {\n      historyAction = Action.Replace;\n    } else if (userReplace === false) ;else if (submission != null && isMutationMethod(submission.formMethod) && submission.formAction === state.location.pathname + state.location.search) {\n      // By default on submissions to the current location we REPLACE so that\n      // users don\'t have to double-click the back button to get to the prior\n      // location.  If the user redirects to a different location from the\n      // action/loader this will be ignored and the redirect will be a PUSH\n      historyAction = Action.Replace;\n    }\n    let preventScrollReset = opts && "preventScrollReset" in opts ? opts.preventScrollReset === true : undefined;\n    let flushSync = (opts && opts.unstable_flushSync) === true;\n    let blockerKey = shouldBlockNavigation({\n      currentLocation,\n      nextLocation,\n      historyAction\n    });\n    if (blockerKey) {\n      // Put the blocker into a blocked state\n      updateBlocker(blockerKey, {\n        state: "blocked",\n        location: nextLocation,\n        proceed() {\n          updateBlocker(blockerKey, {\n            state: "proceeding",\n            proceed: undefined,\n            reset: undefined,\n            location: nextLocation\n          });\n          // Send the same navigation through\n          navigate(to, opts);\n        },\n        reset() {\n          let blockers = new Map(state.blockers);\n          blockers.set(blockerKey, router_IDLE_BLOCKER);\n          updateState({\n            blockers\n          });\n        }\n      });\n      return;\n    }\n    return await startNavigation(historyAction, nextLocation, {\n      submission,\n      // Send through the formData serialization error if we have one so we can\n      // render at the right error boundary after we match routes\n      pendingError: error,\n      preventScrollReset,\n      replace: opts && opts.replace,\n      enableViewTransition: opts && opts.unstable_viewTransition,\n      flushSync\n    });\n  }\n  // Revalidate all current loaders.  If a navigation is in progress or if this\n  // is interrupted by a navigation, allow this to "succeed" by calling all\n  // loaders during the next loader round\n  function revalidate() {\n    interruptActiveLoads();\n    updateState({\n      revalidation: "loading"\n    });\n    // If we\'re currently submitting an action, we don\'t need to start a new\n    // navigation, we\'ll just let the follow up loader execution call all loaders\n    if (state.navigation.state === "submitting") {\n      return;\n    }\n    // If we\'re currently in an idle state, start a new navigation for the current\n    // action/location and mark it as uninterrupted, which will skip the history\n    // update in completeNavigation\n    if (state.navigation.state === "idle") {\n      startNavigation(state.historyAction, state.location, {\n        startUninterruptedRevalidation: true\n      });\n      return;\n    }\n    // Otherwise, if we\'re currently in a loading state, just start a new\n    // navigation to the navigation.location but do not trigger an uninterrupted\n    // revalidation so that history correctly updates once the navigation completes\n    startNavigation(pendingAction || state.historyAction, state.navigation.location, {\n      overrideNavigation: state.navigation\n    });\n  }\n  // Start a navigation to the given action/location.  Can optionally provide a\n  // overrideNavigation which will override the normalLoad in the case of a redirect\n  // navigation\n  async function startNavigation(historyAction, location, opts) {\n    // Abort any in-progress navigations and start a new one. Unset any ongoing\n    // uninterrupted revalidations unless told otherwise, since we want this\n    // new navigation to update history normally\n    pendingNavigationController && pendingNavigationController.abort();\n    pendingNavigationController = null;\n    pendingAction = historyAction;\n    isUninterruptedRevalidation = (opts && opts.startUninterruptedRevalidation) === true;\n    // Save the current scroll position every time we start a new navigation,\n    // and track whether we should reset scroll on completion\n    saveScrollPosition(state.location, state.matches);\n    pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n    pendingViewTransitionEnabled = (opts && opts.enableViewTransition) === true;\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let loadingNavigation = opts && opts.overrideNavigation;\n    let matches = matchRoutes(routesToUse, location, basename);\n    let flushSync = (opts && opts.flushSync) === true;\n    // Short circuit with a 404 on the root error boundary if we match nothing\n    if (!matches) {\n      let error = getInternalRouterError(404, {\n        pathname: location.pathname\n      });\n      let {\n        matches: notFoundMatches,\n        route\n      } = getShortCircuitMatches(routesToUse);\n      // Cancel all pending deferred on 404s since we don\'t keep any routes\n      cancelActiveDeferreds();\n      completeNavigation(location, {\n        matches: notFoundMatches,\n        loaderData: {},\n        errors: {\n          [route.id]: error\n        }\n      }, {\n        flushSync\n      });\n      return;\n    }\n    // Short circuit if it\'s only a hash change and not a revalidation or\n    // mutation submission.\n    //\n    // Ignore on initial page loads because since the initial load will always\n    // be "same hash".  For example, on /page#hash and submit a <Form method="post">\n    // which will default to a navigation to /page\n    if (state.initialized && !isRevalidationRequired && isHashChangeOnly(state.location, location) && !(opts && opts.submission && isMutationMethod(opts.submission.formMethod))) {\n      completeNavigation(location, {\n        matches\n      }, {\n        flushSync\n      });\n      return;\n    }\n    // Create a controller/Request for this navigation\n    pendingNavigationController = new AbortController();\n    let request = createClientSideRequest(init.history, location, pendingNavigationController.signal, opts && opts.submission);\n    let pendingActionData;\n    let pendingError;\n    if (opts && opts.pendingError) {\n      // If we have a pendingError, it means the user attempted a GET submission\n      // with binary FormData so assign here and skip to handleLoaders.  That\n      // way we handle calling loaders above the boundary etc.  It\'s not really\n      // different from an actionError in that sense.\n      pendingError = {\n        [findNearestBoundary(matches).route.id]: opts.pendingError\n      };\n    } else if (opts && opts.submission && isMutationMethod(opts.submission.formMethod)) {\n      // Call action if we received an action submission\n      let actionOutput = await handleAction(request, location, opts.submission, matches, {\n        replace: opts.replace,\n        flushSync\n      });\n      if (actionOutput.shortCircuited) {\n        return;\n      }\n      pendingActionData = actionOutput.pendingActionData;\n      pendingError = actionOutput.pendingActionError;\n      loadingNavigation = getLoadingNavigation(location, opts.submission);\n      flushSync = false;\n      // Create a GET request for the loaders\n      request = new Request(request.url, {\n        signal: request.signal\n      });\n    }\n    // Call loaders\n    let {\n      shortCircuited,\n      loaderData,\n      errors\n    } = await handleLoaders(request, location, matches, loadingNavigation, opts && opts.submission, opts && opts.fetcherSubmission, opts && opts.replace, opts && opts.initialHydration === true, flushSync, pendingActionData, pendingError);\n    if (shortCircuited) {\n      return;\n    }\n    // Clean up now that the action/loaders have completed.  Don\'t clean up if\n    // we short circuited because pendingNavigationController will have already\n    // been assigned to a new controller for the next navigation\n    pendingNavigationController = null;\n    completeNavigation(location, _extends({\n      matches\n    }, pendingActionData ? {\n      actionData: pendingActionData\n    } : {}, {\n      loaderData,\n      errors\n    }));\n  }\n  // Call the action matched by the leaf route for this navigation and handle\n  // redirects/errors\n  async function handleAction(request, location, submission, matches, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n    interruptActiveLoads();\n    // Put us in a submitting state\n    let navigation = getSubmittingNavigation(location, submission);\n    updateState({\n      navigation\n    }, {\n      flushSync: opts.flushSync === true\n    });\n    // Call our action and get the result\n    let result;\n    let actionMatch = getTargetMatch(matches, location);\n    if (!actionMatch.route.action && !actionMatch.route.lazy) {\n      result = {\n        type: ResultType.error,\n        error: getInternalRouterError(405, {\n          method: request.method,\n          pathname: location.pathname,\n          routeId: actionMatch.route.id\n        })\n      };\n    } else {\n      result = await callLoaderOrAction("action", request, actionMatch, matches, manifest, mapRouteProperties, basename, future.v7_relativeSplatPath);\n      if (request.signal.aborted) {\n        return {\n          shortCircuited: true\n        };\n      }\n    }\n    if (isRedirectResult(result)) {\n      let replace;\n      if (opts && opts.replace != null) {\n        replace = opts.replace;\n      } else {\n        // If the user didn\'t explicity indicate replace behavior, replace if\n        // we redirected to the exact same location we\'re currently at to avoid\n        // double back-buttons\n        replace = result.location === state.location.pathname + state.location.search;\n      }\n      await startRedirectNavigation(state, result, {\n        submission,\n        replace\n      });\n      return {\n        shortCircuited: true\n      };\n    }\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n      // By default, all submissions are REPLACE navigations, but if the\n      // action threw an error that\'ll be rendered in an errorElement, we fall\n      // back to PUSH so that the user can use the back button to get back to\n      // the pre-submission form location to try again\n      if ((opts && opts.replace) !== true) {\n        pendingAction = Action.Push;\n      }\n      return {\n        // Send back an empty object we can use to clear out any prior actionData\n        pendingActionData: {},\n        pendingActionError: {\n          [boundaryMatch.route.id]: result.error\n        }\n      };\n    }\n    if (isDeferredResult(result)) {\n      throw getInternalRouterError(400, {\n        type: "defer-action"\n      });\n    }\n    return {\n      pendingActionData: {\n        [actionMatch.route.id]: result.data\n      }\n    };\n  }\n  // Call all applicable loaders for the given matches, handling redirects,\n  // errors, etc.\n  async function handleLoaders(request, location, matches, overrideNavigation, submission, fetcherSubmission, replace, initialHydration, flushSync, pendingActionData, pendingError) {\n    // Figure out the right navigation we want to use for data loading\n    let loadingNavigation = overrideNavigation || getLoadingNavigation(location, submission);\n    // If this was a redirect from an action we don\'t have a "submission" but\n    // we have it on the loading navigation so use that if available\n    let activeSubmission = submission || fetcherSubmission || getSubmissionFromNavigation(loadingNavigation);\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(init.history, state, matches, activeSubmission, location, future.v7_partialHydration && initialHydration === true, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, deletedFetchers, fetchLoadMatches, fetchRedirectIds, routesToUse, basename, pendingActionData, pendingError);\n    // Cancel pending deferreds for no-longer-matched routes or routes we\'re\n    // about to reload.  Note that if this is an action reload we would have\n    // already cancelled all pending deferreds so this would be a no-op\n    cancelActiveDeferreds(routeId => !(matches && matches.some(m => m.route.id === routeId)) || matchesToLoad && matchesToLoad.some(m => m.route.id === routeId));\n    pendingNavigationLoadId = ++incrementingLoadId;\n    // Short circuit if we have no loaders to run\n    if (matchesToLoad.length === 0 && revalidatingFetchers.length === 0) {\n      let updatedFetchers = markFetchRedirectsDone();\n      completeNavigation(location, _extends({\n        matches,\n        loaderData: {},\n        // Commit pending error if we\'re short circuiting\n        errors: pendingError || null\n      }, pendingActionData ? {\n        actionData: pendingActionData\n      } : {}, updatedFetchers ? {\n        fetchers: new Map(state.fetchers)\n      } : {}), {\n        flushSync\n      });\n      return {\n        shortCircuited: true\n      };\n    }\n    // If this is an uninterrupted revalidation, we remain in our current idle\n    // state.  If not, we need to switch to our loading state and load data,\n    // preserving any new action data or existing action data (in the case of\n    // a revalidation interrupting an actionReload)\n    // If we have partialHydration enabled, then don\'t update the state for the\n    // initial data load since it\'s not a "navigation"\n    if (!isUninterruptedRevalidation && (!future.v7_partialHydration || !initialHydration)) {\n      revalidatingFetchers.forEach(rf => {\n        let fetcher = state.fetchers.get(rf.key);\n        let revalidatingFetcher = getLoadingFetcher(undefined, fetcher ? fetcher.data : undefined);\n        state.fetchers.set(rf.key, revalidatingFetcher);\n      });\n      let actionData = pendingActionData || state.actionData;\n      updateState(_extends({\n        navigation: loadingNavigation\n      }, actionData ? Object.keys(actionData).length === 0 ? {\n        actionData: null\n      } : {\n        actionData\n      } : {}, revalidatingFetchers.length > 0 ? {\n        fetchers: new Map(state.fetchers)\n      } : {}), {\n        flushSync\n      });\n    }\n    revalidatingFetchers.forEach(rf => {\n      if (fetchControllers.has(rf.key)) {\n        abortFetcher(rf.key);\n      }\n      if (rf.controller) {\n        // Fetchers use an independent AbortController so that aborting a fetcher\n        // (via deleteFetcher) does not abort the triggering navigation that\n        // triggered the revalidation\n        fetchControllers.set(rf.key, rf.controller);\n      }\n    });\n    // Proxy navigation abort through to revalidation fetchers\n    let abortPendingFetchRevalidations = () => revalidatingFetchers.forEach(f => abortFetcher(f.key));\n    if (pendingNavigationController) {\n      pendingNavigationController.signal.addEventListener("abort", abortPendingFetchRevalidations);\n    }\n    let {\n      results,\n      loaderResults,\n      fetcherResults\n    } = await callLoadersAndMaybeResolveData(state.matches, matches, matchesToLoad, revalidatingFetchers, request);\n    if (request.signal.aborted) {\n      return {\n        shortCircuited: true\n      };\n    }\n    // Clean up _after_ loaders have completed.  Don\'t clean up if we short\n    // circuited because fetchControllers would have been aborted and\n    // reassigned to new controllers for the next navigation\n    if (pendingNavigationController) {\n      pendingNavigationController.signal.removeEventListener("abort", abortPendingFetchRevalidations);\n    }\n    revalidatingFetchers.forEach(rf => fetchControllers.delete(rf.key));\n    // If any loaders returned a redirect Response, start a new REPLACE navigation\n    let redirect = findRedirect(results);\n    if (redirect) {\n      if (redirect.idx >= matchesToLoad.length) {\n        // If this redirect came from a fetcher make sure we mark it in\n        // fetchRedirectIds so it doesn\'t get revalidated on the next set of\n        // loader executions\n        let fetcherKey = revalidatingFetchers[redirect.idx - matchesToLoad.length].key;\n        fetchRedirectIds.add(fetcherKey);\n      }\n      await startRedirectNavigation(state, redirect.result, {\n        replace\n      });\n      return {\n        shortCircuited: true\n      };\n    }\n    // Process and commit output from loaders\n    let {\n      loaderData,\n      errors\n    } = processLoaderData(state, matches, matchesToLoad, loaderResults, pendingError, revalidatingFetchers, fetcherResults, activeDeferreds);\n    // Wire up subscribers to update loaderData as promises settle\n    activeDeferreds.forEach((deferredData, routeId) => {\n      deferredData.subscribe(aborted => {\n        // Note: No need to updateState here since the TrackedPromise on\n        // loaderData is stable across resolve/reject\n        // Remove this instance if we were aborted or if promises have settled\n        if (aborted || deferredData.done) {\n          activeDeferreds.delete(routeId);\n        }\n      });\n    });\n    // During partial hydration, preserve SSR errors for routes that don\'t re-run\n    if (future.v7_partialHydration && initialHydration && state.errors) {\n      Object.entries(state.errors).filter(_ref2 => {\n        let [id] = _ref2;\n        return !matchesToLoad.some(m => m.route.id === id);\n      }).forEach(_ref3 => {\n        let [routeId, error] = _ref3;\n        errors = Object.assign(errors || {}, {\n          [routeId]: error\n        });\n      });\n    }\n    let updatedFetchers = markFetchRedirectsDone();\n    let didAbortFetchLoads = abortStaleFetchLoads(pendingNavigationLoadId);\n    let shouldUpdateFetchers = updatedFetchers || didAbortFetchLoads || revalidatingFetchers.length > 0;\n    return _extends({\n      loaderData,\n      errors\n    }, shouldUpdateFetchers ? {\n      fetchers: new Map(state.fetchers)\n    } : {});\n  }\n  // Trigger a fetcher load/submit for the given fetcher key\n  function fetch(key, routeId, href, opts) {\n    if (isServer) {\n      throw new Error("router.fetch() was called during the server render, but it shouldn\'t be. " + "You are likely calling a useFetcher() method in the body of your component. " + "Try moving it to a useEffect or a callback.");\n    }\n    if (fetchControllers.has(key)) abortFetcher(key);\n    let flushSync = (opts && opts.unstable_flushSync) === true;\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let normalizedPath = normalizeTo(state.location, state.matches, basename, future.v7_prependBasename, href, future.v7_relativeSplatPath, routeId, opts == null ? void 0 : opts.relative);\n    let matches = matchRoutes(routesToUse, normalizedPath, basename);\n    if (!matches) {\n      setFetcherError(key, routeId, getInternalRouterError(404, {\n        pathname: normalizedPath\n      }), {\n        flushSync\n      });\n      return;\n    }\n    let {\n      path,\n      submission,\n      error\n    } = normalizeNavigateOptions(future.v7_normalizeFormMethod, true, normalizedPath, opts);\n    if (error) {\n      setFetcherError(key, routeId, error, {\n        flushSync\n      });\n      return;\n    }\n    let match = getTargetMatch(matches, path);\n    pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n    if (submission && isMutationMethod(submission.formMethod)) {\n      handleFetcherAction(key, routeId, path, match, matches, flushSync, submission);\n      return;\n    }\n    // Store off the match so we can call it\'s shouldRevalidate on subsequent\n    // revalidations\n    fetchLoadMatches.set(key, {\n      routeId,\n      path\n    });\n    handleFetcherLoader(key, routeId, path, match, matches, flushSync, submission);\n  }\n  // Call the action for the matched fetcher.submit(), and then handle redirects,\n  // errors, and revalidation\n  async function handleFetcherAction(key, routeId, path, match, requestMatches, flushSync, submission) {\n    interruptActiveLoads();\n    fetchLoadMatches.delete(key);\n    if (!match.route.action && !match.route.lazy) {\n      let error = getInternalRouterError(405, {\n        method: submission.formMethod,\n        pathname: path,\n        routeId: routeId\n      });\n      setFetcherError(key, routeId, error, {\n        flushSync\n      });\n      return;\n    }\n    // Put this fetcher into it\'s submitting state\n    let existingFetcher = state.fetchers.get(key);\n    updateFetcherState(key, getSubmittingFetcher(submission, existingFetcher), {\n      flushSync\n    });\n    // Call the action for the fetcher\n    let abortController = new AbortController();\n    let fetchRequest = createClientSideRequest(init.history, path, abortController.signal, submission);\n    fetchControllers.set(key, abortController);\n    let originatingLoadId = incrementingLoadId;\n    let actionResult = await callLoaderOrAction("action", fetchRequest, match, requestMatches, manifest, mapRouteProperties, basename, future.v7_relativeSplatPath);\n    if (fetchRequest.signal.aborted) {\n      // We can delete this so long as we weren\'t aborted by our own fetcher\n      // re-submit which would have put _new_ controller is in fetchControllers\n      if (fetchControllers.get(key) === abortController) {\n        fetchControllers.delete(key);\n      }\n      return;\n    }\n    // When using v7_fetcherPersist, we don\'t want errors bubbling up to the UI\n    // or redirects processed for unmounted fetchers so we just revert them to\n    // idle\n    if (future.v7_fetcherPersist && deletedFetchers.has(key)) {\n      if (isRedirectResult(actionResult) || isErrorResult(actionResult)) {\n        updateFetcherState(key, getDoneFetcher(undefined));\n        return;\n      }\n      // Let SuccessResult\'s fall through for revalidation\n    } else {\n      if (isRedirectResult(actionResult)) {\n        fetchControllers.delete(key);\n        if (pendingNavigationLoadId > originatingLoadId) {\n          // A new navigation was kicked off after our action started, so that\n          // should take precedence over this redirect navigation.  We already\n          // set isRevalidationRequired so all loaders for the new route should\n          // fire unless opted out via shouldRevalidate\n          updateFetcherState(key, getDoneFetcher(undefined));\n          return;\n        } else {\n          fetchRedirectIds.add(key);\n          updateFetcherState(key, getLoadingFetcher(submission));\n          return startRedirectNavigation(state, actionResult, {\n            fetcherSubmission: submission\n          });\n        }\n      }\n      // Process any non-redirect errors thrown\n      if (isErrorResult(actionResult)) {\n        setFetcherError(key, routeId, actionResult.error);\n        return;\n      }\n    }\n    if (isDeferredResult(actionResult)) {\n      throw getInternalRouterError(400, {\n        type: "defer-action"\n      });\n    }\n    // Start the data load for current matches, or the next location if we\'re\n    // in the middle of a navigation\n    let nextLocation = state.navigation.location || state.location;\n    let revalidationRequest = createClientSideRequest(init.history, nextLocation, abortController.signal);\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let matches = state.navigation.state !== "idle" ? matchRoutes(routesToUse, state.navigation.location, basename) : state.matches;\n    invariant(matches, "Didn\'t find any matches after fetcher action");\n    let loadId = ++incrementingLoadId;\n    fetchReloadIds.set(key, loadId);\n    let loadFetcher = getLoadingFetcher(submission, actionResult.data);\n    state.fetchers.set(key, loadFetcher);\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(init.history, state, matches, submission, nextLocation, false, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, deletedFetchers, fetchLoadMatches, fetchRedirectIds, routesToUse, basename, {\n      [match.route.id]: actionResult.data\n    }, undefined // No need to send through errors since we short circuit above\n    );\n    // Put all revalidating fetchers into the loading state, except for the\n    // current fetcher which we want to keep in it\'s current loading state which\n    // contains it\'s action submission info + action data\n    revalidatingFetchers.filter(rf => rf.key !== key).forEach(rf => {\n      let staleKey = rf.key;\n      let existingFetcher = state.fetchers.get(staleKey);\n      let revalidatingFetcher = getLoadingFetcher(undefined, existingFetcher ? existingFetcher.data : undefined);\n      state.fetchers.set(staleKey, revalidatingFetcher);\n      if (fetchControllers.has(staleKey)) {\n        abortFetcher(staleKey);\n      }\n      if (rf.controller) {\n        fetchControllers.set(staleKey, rf.controller);\n      }\n    });\n    updateState({\n      fetchers: new Map(state.fetchers)\n    });\n    let abortPendingFetchRevalidations = () => revalidatingFetchers.forEach(rf => abortFetcher(rf.key));\n    abortController.signal.addEventListener("abort", abortPendingFetchRevalidations);\n    let {\n      results,\n      loaderResults,\n      fetcherResults\n    } = await callLoadersAndMaybeResolveData(state.matches, matches, matchesToLoad, revalidatingFetchers, revalidationRequest);\n    if (abortController.signal.aborted) {\n      return;\n    }\n    abortController.signal.removeEventListener("abort", abortPendingFetchRevalidations);\n    fetchReloadIds.delete(key);\n    fetchControllers.delete(key);\n    revalidatingFetchers.forEach(r => fetchControllers.delete(r.key));\n    let redirect = findRedirect(results);\n    if (redirect) {\n      if (redirect.idx >= matchesToLoad.length) {\n        // If this redirect came from a fetcher make sure we mark it in\n        // fetchRedirectIds so it doesn\'t get revalidated on the next set of\n        // loader executions\n        let fetcherKey = revalidatingFetchers[redirect.idx - matchesToLoad.length].key;\n        fetchRedirectIds.add(fetcherKey);\n      }\n      return startRedirectNavigation(state, redirect.result);\n    }\n    // Process and commit output from loaders\n    let {\n      loaderData,\n      errors\n    } = processLoaderData(state, state.matches, matchesToLoad, loaderResults, undefined, revalidatingFetchers, fetcherResults, activeDeferreds);\n    // Since we let revalidations complete even if the submitting fetcher was\n    // deleted, only put it back to idle if it hasn\'t been deleted\n    if (state.fetchers.has(key)) {\n      let doneFetcher = getDoneFetcher(actionResult.data);\n      state.fetchers.set(key, doneFetcher);\n    }\n    abortStaleFetchLoads(loadId);\n    // If we are currently in a navigation loading state and this fetcher is\n    // more recent than the navigation, we want the newer data so abort the\n    // navigation and complete it with the fetcher data\n    if (state.navigation.state === "loading" && loadId > pendingNavigationLoadId) {\n      invariant(pendingAction, "Expected pending action");\n      pendingNavigationController && pendingNavigationController.abort();\n      completeNavigation(state.navigation.location, {\n        matches,\n        loaderData,\n        errors,\n        fetchers: new Map(state.fetchers)\n      });\n    } else {\n      // otherwise just update with the fetcher data, preserving any existing\n      // loaderData for loaders that did not need to reload.  We have to\n      // manually merge here since we aren\'t going through completeNavigation\n      updateState({\n        errors,\n        loaderData: mergeLoaderData(state.loaderData, loaderData, matches, errors),\n        fetchers: new Map(state.fetchers)\n      });\n      isRevalidationRequired = false;\n    }\n  }\n  // Call the matched loader for fetcher.load(), handling redirects, errors, etc.\n  async function handleFetcherLoader(key, routeId, path, match, matches, flushSync, submission) {\n    let existingFetcher = state.fetchers.get(key);\n    updateFetcherState(key, getLoadingFetcher(submission, existingFetcher ? existingFetcher.data : undefined), {\n      flushSync\n    });\n    // Call the loader for this fetcher route match\n    let abortController = new AbortController();\n    let fetchRequest = createClientSideRequest(init.history, path, abortController.signal);\n    fetchControllers.set(key, abortController);\n    let originatingLoadId = incrementingLoadId;\n    let result = await callLoaderOrAction("loader", fetchRequest, match, matches, manifest, mapRouteProperties, basename, future.v7_relativeSplatPath);\n    // Deferred isn\'t supported for fetcher loads, await everything and treat it\n    // as a normal load.  resolveDeferredData will return undefined if this\n    // fetcher gets aborted, so we just leave result untouched and short circuit\n    // below if that happens\n    if (isDeferredResult(result)) {\n      result = (await resolveDeferredData(result, fetchRequest.signal, true)) || result;\n    }\n    // We can delete this so long as we weren\'t aborted by our our own fetcher\n    // re-load which would have put _new_ controller is in fetchControllers\n    if (fetchControllers.get(key) === abortController) {\n      fetchControllers.delete(key);\n    }\n    if (fetchRequest.signal.aborted) {\n      return;\n    }\n    // We don\'t want errors bubbling up or redirects followed for unmounted\n    // fetchers, so short circuit here if it was removed from the UI\n    if (deletedFetchers.has(key)) {\n      updateFetcherState(key, getDoneFetcher(undefined));\n      return;\n    }\n    // If the loader threw a redirect Response, start a new REPLACE navigation\n    if (isRedirectResult(result)) {\n      if (pendingNavigationLoadId > originatingLoadId) {\n        // A new navigation was kicked off after our loader started, so that\n        // should take precedence over this redirect navigation\n        updateFetcherState(key, getDoneFetcher(undefined));\n        return;\n      } else {\n        fetchRedirectIds.add(key);\n        await startRedirectNavigation(state, result);\n        return;\n      }\n    }\n    // Process any non-redirect errors thrown\n    if (isErrorResult(result)) {\n      setFetcherError(key, routeId, result.error);\n      return;\n    }\n    invariant(!isDeferredResult(result), "Unhandled fetcher deferred data");\n    // Put the fetcher back into an idle state\n    updateFetcherState(key, getDoneFetcher(result.data));\n  }\n  /**\n   * Utility function to handle redirects returned from an action or loader.\n   * Normally, a redirect "replaces" the navigation that triggered it.  So, for\n   * example:\n   *\n   *  - user is on /a\n   *  - user clicks a link to /b\n   *  - loader for /b redirects to /c\n   *\n   * In a non-JS app the browser would track the in-flight navigation to /b and\n   * then replace it with /c when it encountered the redirect response.  In\n   * the end it would only ever update the URL bar with /c.\n   *\n   * In client-side routing using pushState/replaceState, we aim to emulate\n   * this behavior and we also do not update history until the end of the\n   * navigation (including processed redirects).  This means that we never\n   * actually touch history until we\'ve processed redirects, so we just use\n   * the history action from the original navigation (PUSH or REPLACE).\n   */\n  async function startRedirectNavigation(state, redirect, _temp2) {\n    let {\n      submission,\n      fetcherSubmission,\n      replace\n    } = _temp2 === void 0 ? {} : _temp2;\n    if (redirect.revalidate) {\n      isRevalidationRequired = true;\n    }\n    let redirectLocation = createLocation(state.location, redirect.location, {\n      _isRedirect: true\n    });\n    invariant(redirectLocation, "Expected a location on the redirect navigation");\n    if (isBrowser) {\n      let isDocumentReload = false;\n      if (redirect.reloadDocument) {\n        // Hard reload if the response contained X-Remix-Reload-Document\n        isDocumentReload = true;\n      } else if (ABSOLUTE_URL_REGEX.test(redirect.location)) {\n        const url = init.history.createURL(redirect.location);\n        isDocumentReload =\n        // Hard reload if it\'s an absolute URL to a new origin\n        url.origin !== routerWindow.location.origin ||\n        // Hard reload if it\'s an absolute URL that does not match our basename\n        router_stripBasename(url.pathname, basename) == null;\n      }\n      if (isDocumentReload) {\n        if (replace) {\n          routerWindow.location.replace(redirect.location);\n        } else {\n          routerWindow.location.assign(redirect.location);\n        }\n        return;\n      }\n    }\n    // There\'s no need to abort on redirects, since we don\'t detect the\n    // redirect until the action/loaders have settled\n    pendingNavigationController = null;\n    let redirectHistoryAction = replace === true ? Action.Replace : Action.Push;\n    // Use the incoming submission if provided, fallback on the active one in\n    // state.navigation\n    let {\n      formMethod,\n      formAction,\n      formEncType\n    } = state.navigation;\n    if (!submission && !fetcherSubmission && formMethod && formAction && formEncType) {\n      submission = getSubmissionFromNavigation(state.navigation);\n    }\n    // If this was a 307/308 submission we want to preserve the HTTP method and\n    // re-submit the GET/POST/PUT/PATCH/DELETE as a submission navigation to the\n    // redirected location\n    let activeSubmission = submission || fetcherSubmission;\n    if (redirectPreserveMethodStatusCodes.has(redirect.status) && activeSubmission && isMutationMethod(activeSubmission.formMethod)) {\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        submission: _extends({}, activeSubmission, {\n          formAction: redirect.location\n        }),\n        // Preserve this flag across redirects\n        preventScrollReset: pendingPreventScrollReset\n      });\n    } else {\n      // If we have a navigation submission, we will preserve it through the\n      // redirect navigation\n      let overrideNavigation = getLoadingNavigation(redirectLocation, submission);\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        overrideNavigation,\n        // Send fetcher submissions through for shouldRevalidate\n        fetcherSubmission,\n        // Preserve this flag across redirects\n        preventScrollReset: pendingPreventScrollReset\n      });\n    }\n  }\n  async function callLoadersAndMaybeResolveData(currentMatches, matches, matchesToLoad, fetchersToLoad, request) {\n    // Call all navigation loaders and revalidating fetcher loaders in parallel,\n    // then slice off the results into separate arrays so we can handle them\n    // accordingly\n    let results = await Promise.all([...matchesToLoad.map(match => callLoaderOrAction("loader", request, match, matches, manifest, mapRouteProperties, basename, future.v7_relativeSplatPath)), ...fetchersToLoad.map(f => {\n      if (f.matches && f.match && f.controller) {\n        return callLoaderOrAction("loader", createClientSideRequest(init.history, f.path, f.controller.signal), f.match, f.matches, manifest, mapRouteProperties, basename, future.v7_relativeSplatPath);\n      } else {\n        let error = {\n          type: ResultType.error,\n          error: getInternalRouterError(404, {\n            pathname: f.path\n          })\n        };\n        return error;\n      }\n    })]);\n    let loaderResults = results.slice(0, matchesToLoad.length);\n    let fetcherResults = results.slice(matchesToLoad.length);\n    await Promise.all([resolveDeferredResults(currentMatches, matchesToLoad, loaderResults, loaderResults.map(() => request.signal), false, state.loaderData), resolveDeferredResults(currentMatches, fetchersToLoad.map(f => f.match), fetcherResults, fetchersToLoad.map(f => f.controller ? f.controller.signal : null), true)]);\n    return {\n      results,\n      loaderResults,\n      fetcherResults\n    };\n  }\n  function interruptActiveLoads() {\n    // Every interruption triggers a revalidation\n    isRevalidationRequired = true;\n    // Cancel pending route-level deferreds and mark cancelled routes for\n    // revalidation\n    cancelledDeferredRoutes.push(...cancelActiveDeferreds());\n    // Abort in-flight fetcher loads\n    fetchLoadMatches.forEach((_, key) => {\n      if (fetchControllers.has(key)) {\n        cancelledFetcherLoads.push(key);\n        abortFetcher(key);\n      }\n    });\n  }\n  function updateFetcherState(key, fetcher, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n    state.fetchers.set(key, fetcher);\n    updateState({\n      fetchers: new Map(state.fetchers)\n    }, {\n      flushSync: (opts && opts.flushSync) === true\n    });\n  }\n  function setFetcherError(key, routeId, error, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n    let boundaryMatch = findNearestBoundary(state.matches, routeId);\n    deleteFetcher(key);\n    updateState({\n      errors: {\n        [boundaryMatch.route.id]: error\n      },\n      fetchers: new Map(state.fetchers)\n    }, {\n      flushSync: (opts && opts.flushSync) === true\n    });\n  }\n  function getFetcher(key) {\n    if (future.v7_fetcherPersist) {\n      activeFetchers.set(key, (activeFetchers.get(key) || 0) + 1);\n      // If this fetcher was previously marked for deletion, unmark it since we\n      // have a new instance\n      if (deletedFetchers.has(key)) {\n        deletedFetchers.delete(key);\n      }\n    }\n    return state.fetchers.get(key) || router_IDLE_FETCHER;\n  }\n  function deleteFetcher(key) {\n    let fetcher = state.fetchers.get(key);\n    // Don\'t abort the controller if this is a deletion of a fetcher.submit()\n    // in it\'s loading phase since - we don\'t want to abort the corresponding\n    // revalidation and want them to complete and land\n    if (fetchControllers.has(key) && !(fetcher && fetcher.state === "loading" && fetchReloadIds.has(key))) {\n      abortFetcher(key);\n    }\n    fetchLoadMatches.delete(key);\n    fetchReloadIds.delete(key);\n    fetchRedirectIds.delete(key);\n    deletedFetchers.delete(key);\n    state.fetchers.delete(key);\n  }\n  function deleteFetcherAndUpdateState(key) {\n    if (future.v7_fetcherPersist) {\n      let count = (activeFetchers.get(key) || 0) - 1;\n      if (count <= 0) {\n        activeFetchers.delete(key);\n        deletedFetchers.add(key);\n      } else {\n        activeFetchers.set(key, count);\n      }\n    } else {\n      deleteFetcher(key);\n    }\n    updateState({\n      fetchers: new Map(state.fetchers)\n    });\n  }\n  function abortFetcher(key) {\n    let controller = fetchControllers.get(key);\n    invariant(controller, "Expected fetch controller: " + key);\n    controller.abort();\n    fetchControllers.delete(key);\n  }\n  function markFetchersDone(keys) {\n    for (let key of keys) {\n      let fetcher = getFetcher(key);\n      let doneFetcher = getDoneFetcher(fetcher.data);\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n  function markFetchRedirectsDone() {\n    let doneKeys = [];\n    let updatedFetchers = false;\n    for (let key of fetchRedirectIds) {\n      let fetcher = state.fetchers.get(key);\n      invariant(fetcher, "Expected fetcher: " + key);\n      if (fetcher.state === "loading") {\n        fetchRedirectIds.delete(key);\n        doneKeys.push(key);\n        updatedFetchers = true;\n      }\n    }\n    markFetchersDone(doneKeys);\n    return updatedFetchers;\n  }\n  function abortStaleFetchLoads(landedId) {\n    let yeetedKeys = [];\n    for (let [key, id] of fetchReloadIds) {\n      if (id < landedId) {\n        let fetcher = state.fetchers.get(key);\n        invariant(fetcher, "Expected fetcher: " + key);\n        if (fetcher.state === "loading") {\n          abortFetcher(key);\n          fetchReloadIds.delete(key);\n          yeetedKeys.push(key);\n        }\n      }\n    }\n    markFetchersDone(yeetedKeys);\n    return yeetedKeys.length > 0;\n  }\n  function getBlocker(key, fn) {\n    let blocker = state.blockers.get(key) || router_IDLE_BLOCKER;\n    if (blockerFunctions.get(key) !== fn) {\n      blockerFunctions.set(key, fn);\n    }\n    return blocker;\n  }\n  function deleteBlocker(key) {\n    state.blockers.delete(key);\n    blockerFunctions.delete(key);\n  }\n  // Utility function to update blockers, ensuring valid state transitions\n  function updateBlocker(key, newBlocker) {\n    let blocker = state.blockers.get(key) || router_IDLE_BLOCKER;\n    // Poor mans state machine :)\n    // https://mermaid.live/edit#pako:eNqVkc9OwzAMxl8l8nnjAYrEtDIOHEBIgwvKJTReGy3_lDpIqO27k6awMG0XcrLlnz87nwdonESogKXXBuE79rq75XZO3-yHds0RJVuv70YrPlUrCEe2HfrORS3rubqZfuhtpg5C9wk5tZ4VKcRUq88q9Z8RS0-48cE1iHJkL0ugbHuFLus9L6spZy8nX9MP2CNdomVaposqu3fGayT8T8-jJQwhepo_UtpgBQaDEUom04dZhAN1aJBDlUKJBxE1ceB2Smj0Mln-IBW5AFU2dwUiktt_2Qaq2dBfaKdEup85UV7Yd-dKjlnkabl2Pvr0DTkTreM\n    invariant(blocker.state === "unblocked" && newBlocker.state === "blocked" || blocker.state === "blocked" && newBlocker.state === "blocked" || blocker.state === "blocked" && newBlocker.state === "proceeding" || blocker.state === "blocked" && newBlocker.state === "unblocked" || blocker.state === "proceeding" && newBlocker.state === "unblocked", "Invalid blocker state transition: " + blocker.state + " -> " + newBlocker.state);\n    let blockers = new Map(state.blockers);\n    blockers.set(key, newBlocker);\n    updateState({\n      blockers\n    });\n  }\n  function shouldBlockNavigation(_ref4) {\n    let {\n      currentLocation,\n      nextLocation,\n      historyAction\n    } = _ref4;\n    if (blockerFunctions.size === 0) {\n      return;\n    }\n    // We ony support a single active blocker at the moment since we don\'t have\n    // any compelling use cases for multi-blocker yet\n    if (blockerFunctions.size > 1) {\n      warning(false, "A router only supports one blocker at a time");\n    }\n    let entries = Array.from(blockerFunctions.entries());\n    let [blockerKey, blockerFunction] = entries[entries.length - 1];\n    let blocker = state.blockers.get(blockerKey);\n    if (blocker && blocker.state === "proceeding") {\n      // If the blocker is currently proceeding, we don\'t need to re-check\n      // it and can let this navigation continue\n      return;\n    }\n    // At this point, we know we\'re unblocked/blocked so we need to check the\n    // user-provided blocker function\n    if (blockerFunction({\n      currentLocation,\n      nextLocation,\n      historyAction\n    })) {\n      return blockerKey;\n    }\n  }\n  function cancelActiveDeferreds(predicate) {\n    let cancelledRouteIds = [];\n    activeDeferreds.forEach((dfd, routeId) => {\n      if (!predicate || predicate(routeId)) {\n        // Cancel the deferred - but do not remove from activeDeferreds here -\n        // we rely on the subscribers to do that so our tests can assert proper\n        // cleanup via _internalActiveDeferreds\n        dfd.cancel();\n        cancelledRouteIds.push(routeId);\n        activeDeferreds.delete(routeId);\n      }\n    });\n    return cancelledRouteIds;\n  }\n  // Opt in to capturing and reporting scroll positions during navigations,\n  // used by the <ScrollRestoration> component\n  function enableScrollRestoration(positions, getPosition, getKey) {\n    savedScrollPositions = positions;\n    getScrollPosition = getPosition;\n    getScrollRestorationKey = getKey || null;\n    // Perform initial hydration scroll restoration, since we miss the boat on\n    // the initial updateState() because we\'ve not yet rendered <ScrollRestoration/>\n    // and therefore have no savedScrollPositions available\n    if (!initialScrollRestored && state.navigation === IDLE_NAVIGATION) {\n      initialScrollRestored = true;\n      let y = getSavedScrollPosition(state.location, state.matches);\n      if (y != null) {\n        updateState({\n          restoreScrollPosition: y\n        });\n      }\n    }\n    return () => {\n      savedScrollPositions = null;\n      getScrollPosition = null;\n      getScrollRestorationKey = null;\n    };\n  }\n  function getScrollKey(location, matches) {\n    if (getScrollRestorationKey) {\n      let key = getScrollRestorationKey(location, matches.map(m => convertRouteMatchToUiMatch(m, state.loaderData)));\n      return key || location.key;\n    }\n    return location.key;\n  }\n  function saveScrollPosition(location, matches) {\n    if (savedScrollPositions && getScrollPosition) {\n      let key = getScrollKey(location, matches);\n      savedScrollPositions[key] = getScrollPosition();\n    }\n  }\n  function getSavedScrollPosition(location, matches) {\n    if (savedScrollPositions) {\n      let key = getScrollKey(location, matches);\n      let y = savedScrollPositions[key];\n      if (typeof y === "number") {\n        return y;\n      }\n    }\n    return null;\n  }\n  function _internalSetRoutes(newRoutes) {\n    manifest = {};\n    inFlightDataRoutes = convertRoutesToDataRoutes(newRoutes, mapRouteProperties, undefined, manifest);\n  }\n  router = {\n    get basename() {\n      return basename;\n    },\n    get future() {\n      return future;\n    },\n    get state() {\n      return state;\n    },\n    get routes() {\n      return dataRoutes;\n    },\n    get window() {\n      return routerWindow;\n    },\n    initialize,\n    subscribe,\n    enableScrollRestoration,\n    navigate,\n    fetch,\n    revalidate,\n    // Passthrough to history-aware createHref used by useHref so we get proper\n    // hash-aware URLs in DOM paths\n    createHref: to => init.history.createHref(to),\n    encodeLocation: to => init.history.encodeLocation(to),\n    getFetcher,\n    deleteFetcher: deleteFetcherAndUpdateState,\n    dispose,\n    getBlocker,\n    deleteBlocker,\n    _internalFetchControllers: fetchControllers,\n    _internalActiveDeferreds: activeDeferreds,\n    // TODO: Remove setRoutes, it\'s temporary to avoid dealing with\n    // updating the tree while validating the update algorithm.\n    _internalSetRoutes\n  };\n  return router;\n}\n//#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region createStaticHandler\n////////////////////////////////////////////////////////////////////////////////\nconst UNSAFE_DEFERRED_SYMBOL = Symbol("deferred");\nfunction createStaticHandler(routes, opts) {\n  invariant(routes.length > 0, "You must provide a non-empty routes array to createStaticHandler");\n  let manifest = {};\n  let basename = (opts ? opts.basename : null) || "/";\n  let mapRouteProperties;\n  if (opts != null && opts.mapRouteProperties) {\n    mapRouteProperties = opts.mapRouteProperties;\n  } else if (opts != null && opts.detectErrorBoundary) {\n    // If they are still using the deprecated version, wrap it with the new API\n    let detectErrorBoundary = opts.detectErrorBoundary;\n    mapRouteProperties = route => ({\n      hasErrorBoundary: detectErrorBoundary(route)\n    });\n  } else {\n    mapRouteProperties = defaultMapRouteProperties;\n  }\n  // Config driven behavior flags\n  let future = _extends({\n    v7_relativeSplatPath: false,\n    v7_throwAbortReason: false\n  }, opts ? opts.future : null);\n  let dataRoutes = convertRoutesToDataRoutes(routes, mapRouteProperties, undefined, manifest);\n  /**\n   * The query() method is intended for document requests, in which we want to\n   * call an optional action and potentially multiple loaders for all nested\n   * routes.  It returns a StaticHandlerContext object, which is very similar\n   * to the router state (location, loaderData, actionData, errors, etc.) and\n   * also adds SSR-specific information such as the statusCode and headers\n   * from action/loaders Responses.\n   *\n   * It _should_ never throw and should report all errors through the\n   * returned context.errors object, properly associating errors to their error\n   * boundary.  Additionally, it tracks _deepestRenderedBoundaryId which can be\n   * used to emulate React error boundaries during SSr by performing a second\n   * pass only down to the boundaryId.\n   *\n   * The one exception where we do not return a StaticHandlerContext is when a\n   * redirect response is returned or thrown from any action/loader.  We\n   * propagate that out and return the raw Response so the HTTP server can\n   * return it directly.\n   */\n  async function query(request, _temp3) {\n    let {\n      requestContext\n    } = _temp3 === void 0 ? {} : _temp3;\n    let url = new URL(request.url);\n    let method = request.method;\n    let location = createLocation("", router_createPath(url), null, "default");\n    let matches = matchRoutes(dataRoutes, location, basename);\n    // SSR supports HEAD requests while SPA doesn\'t\n    if (!isValidMethod(method) && method !== "HEAD") {\n      let error = getInternalRouterError(405, {\n        method\n      });\n      let {\n        matches: methodNotAllowedMatches,\n        route\n      } = getShortCircuitMatches(dataRoutes);\n      return {\n        basename,\n        location,\n        matches: methodNotAllowedMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null\n      };\n    } else if (!matches) {\n      let error = getInternalRouterError(404, {\n        pathname: location.pathname\n      });\n      let {\n        matches: notFoundMatches,\n        route\n      } = getShortCircuitMatches(dataRoutes);\n      return {\n        basename,\n        location,\n        matches: notFoundMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null\n      };\n    }\n    let result = await queryImpl(request, location, matches, requestContext);\n    if (isResponse(result)) {\n      return result;\n    }\n    // When returning StaticHandlerContext, we patch back in the location here\n    // since we need it for React Context.  But this helps keep our submit and\n    // loadRouteData operating on a Request instead of a Location\n    return _extends({\n      location,\n      basename\n    }, result);\n  }\n  /**\n   * The queryRoute() method is intended for targeted route requests, either\n   * for fetch ?_data requests or resource route requests.  In this case, we\n   * are only ever calling a single action or loader, and we are returning the\n   * returned value directly.  In most cases, this will be a Response returned\n   * from the action/loader, but it may be a primitive or other value as well -\n   * and in such cases the calling context should handle that accordingly.\n   *\n   * We do respect the throw/return differentiation, so if an action/loader\n   * throws, then this method will throw the value.  This is important so we\n   * can do proper boundary identification in Remix where a thrown Response\n   * must go to the Catch Boundary but a returned Response is happy-path.\n   *\n   * One thing to note is that any Router-initiated Errors that make sense\n   * to associate with a status code will be thrown as an ErrorResponse\n   * instance which include the raw Error, such that the calling context can\n   * serialize the error as they see fit while including the proper response\n   * code.  Examples here are 404 and 405 errors that occur prior to reaching\n   * any user-defined loaders.\n   */\n  async function queryRoute(request, _temp4) {\n    let {\n      routeId,\n      requestContext\n    } = _temp4 === void 0 ? {} : _temp4;\n    let url = new URL(request.url);\n    let method = request.method;\n    let location = createLocation("", router_createPath(url), null, "default");\n    let matches = matchRoutes(dataRoutes, location, basename);\n    // SSR supports HEAD requests while SPA doesn\'t\n    if (!isValidMethod(method) && method !== "HEAD" && method !== "OPTIONS") {\n      throw getInternalRouterError(405, {\n        method\n      });\n    } else if (!matches) {\n      throw getInternalRouterError(404, {\n        pathname: location.pathname\n      });\n    }\n    let match = routeId ? matches.find(m => m.route.id === routeId) : getTargetMatch(matches, location);\n    if (routeId && !match) {\n      throw getInternalRouterError(403, {\n        pathname: location.pathname,\n        routeId\n      });\n    } else if (!match) {\n      // This should never hit I don\'t think?\n      throw getInternalRouterError(404, {\n        pathname: location.pathname\n      });\n    }\n    let result = await queryImpl(request, location, matches, requestContext, match);\n    if (isResponse(result)) {\n      return result;\n    }\n    let error = result.errors ? Object.values(result.errors)[0] : undefined;\n    if (error !== undefined) {\n      // If we got back result.errors, that means the loader/action threw\n      // _something_ that wasn\'t a Response, but it\'s not guaranteed/required\n      // to be an `instanceof Error` either, so we have to use throw here to\n      // preserve the "error" state outside of queryImpl.\n      throw error;\n    }\n    // Pick off the right state value to return\n    if (result.actionData) {\n      return Object.values(result.actionData)[0];\n    }\n    if (result.loaderData) {\n      var _result$activeDeferre;\n      let data = Object.values(result.loaderData)[0];\n      if ((_result$activeDeferre = result.activeDeferreds) != null && _result$activeDeferre[match.route.id]) {\n        data[UNSAFE_DEFERRED_SYMBOL] = result.activeDeferreds[match.route.id];\n      }\n      return data;\n    }\n    return undefined;\n  }\n  async function queryImpl(request, location, matches, requestContext, routeMatch) {\n    invariant(request.signal, "query()/queryRoute() requests must contain an AbortController signal");\n    try {\n      if (isMutationMethod(request.method.toLowerCase())) {\n        let result = await submit(request, matches, routeMatch || getTargetMatch(matches, location), requestContext, routeMatch != null);\n        return result;\n      }\n      let result = await loadRouteData(request, matches, requestContext, routeMatch);\n      return isResponse(result) ? result : _extends({}, result, {\n        actionData: null,\n        actionHeaders: {}\n      });\n    } catch (e) {\n      // If the user threw/returned a Response in callLoaderOrAction, we throw\n      // it to bail out and then return or throw here based on whether the user\n      // returned or threw\n      if (isQueryRouteResponse(e)) {\n        if (e.type === ResultType.error) {\n          throw e.response;\n        }\n        return e.response;\n      }\n      // Redirects are always returned since they don\'t propagate to catch\n      // boundaries\n      if (isRedirectResponse(e)) {\n        return e;\n      }\n      throw e;\n    }\n  }\n  async function submit(request, matches, actionMatch, requestContext, isRouteRequest) {\n    let result;\n    if (!actionMatch.route.action && !actionMatch.route.lazy) {\n      let error = getInternalRouterError(405, {\n        method: request.method,\n        pathname: new URL(request.url).pathname,\n        routeId: actionMatch.route.id\n      });\n      if (isRouteRequest) {\n        throw error;\n      }\n      result = {\n        type: ResultType.error,\n        error\n      };\n    } else {\n      result = await callLoaderOrAction("action", request, actionMatch, matches, manifest, mapRouteProperties, basename, future.v7_relativeSplatPath, {\n        isStaticRequest: true,\n        isRouteRequest,\n        requestContext\n      });\n      if (request.signal.aborted) {\n        throwStaticHandlerAbortedError(request, isRouteRequest, future);\n      }\n    }\n    if (isRedirectResult(result)) {\n      // Uhhhh - this should never happen, we should always throw these from\n      // callLoaderOrAction, but the type narrowing here keeps TS happy and we\n      // can get back on the "throw all redirect responses" train here should\n      // this ever happen :/\n      throw new Response(null, {\n        status: result.status,\n        headers: {\n          Location: result.location\n        }\n      });\n    }\n    if (isDeferredResult(result)) {\n      let error = getInternalRouterError(400, {\n        type: "defer-action"\n      });\n      if (isRouteRequest) {\n        throw error;\n      }\n      result = {\n        type: ResultType.error,\n        error\n      };\n    }\n    if (isRouteRequest) {\n      // Note: This should only be non-Response values if we get here, since\n      // isRouteRequest should throw any Response received in callLoaderOrAction\n      if (isErrorResult(result)) {\n        throw result.error;\n      }\n      return {\n        matches: [actionMatch],\n        loaderData: {},\n        actionData: {\n          [actionMatch.route.id]: result.data\n        },\n        errors: null,\n        // Note: statusCode + headers are unused here since queryRoute will\n        // return the raw Response or value\n        statusCode: 200,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null\n      };\n    }\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n      let context = await loadRouteData(request, matches, requestContext, undefined, {\n        [boundaryMatch.route.id]: result.error\n      });\n      // action status codes take precedence over loader status codes\n      return _extends({}, context, {\n        statusCode: isRouteErrorResponse(result.error) ? result.error.status : 500,\n        actionData: null,\n        actionHeaders: _extends({}, result.headers ? {\n          [actionMatch.route.id]: result.headers\n        } : {})\n      });\n    }\n    // Create a GET request for the loaders\n    let loaderRequest = new Request(request.url, {\n      headers: request.headers,\n      redirect: request.redirect,\n      signal: request.signal\n    });\n    let context = await loadRouteData(loaderRequest, matches, requestContext);\n    return _extends({}, context, result.statusCode ? {\n      statusCode: result.statusCode\n    } : {}, {\n      actionData: {\n        [actionMatch.route.id]: result.data\n      },\n      actionHeaders: _extends({}, result.headers ? {\n        [actionMatch.route.id]: result.headers\n      } : {})\n    });\n  }\n  async function loadRouteData(request, matches, requestContext, routeMatch, pendingActionError) {\n    let isRouteRequest = routeMatch != null;\n    // Short circuit if we have no loaders to run (queryRoute())\n    if (isRouteRequest && !(routeMatch != null && routeMatch.route.loader) && !(routeMatch != null && routeMatch.route.lazy)) {\n      throw getInternalRouterError(400, {\n        method: request.method,\n        pathname: new URL(request.url).pathname,\n        routeId: routeMatch == null ? void 0 : routeMatch.route.id\n      });\n    }\n    let requestMatches = routeMatch ? [routeMatch] : getLoaderMatchesUntilBoundary(matches, Object.keys(pendingActionError || {})[0]);\n    let matchesToLoad = requestMatches.filter(m => m.route.loader || m.route.lazy);\n    // Short circuit if we have no loaders to run (query())\n    if (matchesToLoad.length === 0) {\n      return {\n        matches,\n        // Add a null for all matched routes for proper revalidation on the client\n        loaderData: matches.reduce((acc, m) => Object.assign(acc, {\n          [m.route.id]: null\n        }), {}),\n        errors: pendingActionError || null,\n        statusCode: 200,\n        loaderHeaders: {},\n        activeDeferreds: null\n      };\n    }\n    let results = await Promise.all([...matchesToLoad.map(match => callLoaderOrAction("loader", request, match, matches, manifest, mapRouteProperties, basename, future.v7_relativeSplatPath, {\n      isStaticRequest: true,\n      isRouteRequest,\n      requestContext\n    }))]);\n    if (request.signal.aborted) {\n      throwStaticHandlerAbortedError(request, isRouteRequest, future);\n    }\n    // Process and commit output from loaders\n    let activeDeferreds = new Map();\n    let context = processRouteLoaderData(matches, matchesToLoad, results, pendingActionError, activeDeferreds);\n    // Add a null for any non-loader matches for proper revalidation on the client\n    let executedLoaders = new Set(matchesToLoad.map(match => match.route.id));\n    matches.forEach(match => {\n      if (!executedLoaders.has(match.route.id)) {\n        context.loaderData[match.route.id] = null;\n      }\n    });\n    return _extends({}, context, {\n      matches,\n      activeDeferreds: activeDeferreds.size > 0 ? Object.fromEntries(activeDeferreds.entries()) : null\n    });\n  }\n  return {\n    dataRoutes,\n    query,\n    queryRoute\n  };\n}\n//#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region Helpers\n////////////////////////////////////////////////////////////////////////////////\n/**\n * Given an existing StaticHandlerContext and an error thrown at render time,\n * provide an updated StaticHandlerContext suitable for a second SSR render\n */\nfunction getStaticContextFromError(routes, context, error) {\n  let newContext = _extends({}, context, {\n    statusCode: isRouteErrorResponse(error) ? error.status : 500,\n    errors: {\n      [context._deepestRenderedBoundaryId || routes[0].id]: error\n    }\n  });\n  return newContext;\n}\nfunction throwStaticHandlerAbortedError(request, isRouteRequest, future) {\n  if (future.v7_throwAbortReason && request.signal.reason !== undefined) {\n    throw request.signal.reason;\n  }\n  let method = isRouteRequest ? "queryRoute" : "query";\n  throw new Error(method + "() call aborted: " + request.method + " " + request.url);\n}\nfunction isSubmissionNavigation(opts) {\n  return opts != null && ("formData" in opts && opts.formData != null || "body" in opts && opts.body !== undefined);\n}\nfunction normalizeTo(location, matches, basename, prependBasename, to, v7_relativeSplatPath, fromRouteId, relative) {\n  let contextualMatches;\n  let activeRouteMatch;\n  if (fromRouteId) {\n    // Grab matches up to the calling route so our route-relative logic is\n    // relative to the correct source route\n    contextualMatches = [];\n    for (let match of matches) {\n      contextualMatches.push(match);\n      if (match.route.id === fromRouteId) {\n        activeRouteMatch = match;\n        break;\n      }\n    }\n  } else {\n    contextualMatches = matches;\n    activeRouteMatch = matches[matches.length - 1];\n  }\n  // Resolve the relative path\n  let path = router_resolveTo(to ? to : ".", getResolveToMatches(contextualMatches, v7_relativeSplatPath), router_stripBasename(location.pathname, basename) || location.pathname, relative === "path");\n  // When `to` is not specified we inherit search/hash from the current\n  // location, unlike when to="." and we just inherit the path.\n  // See https://github.com/remix-run/remix/issues/927\n  if (to == null) {\n    path.search = location.search;\n    path.hash = location.hash;\n  }\n  // Add an ?index param for matched index routes if we don\'t already have one\n  if ((to == null || to === "" || to === ".") && activeRouteMatch && activeRouteMatch.route.index && !hasNakedIndexQuery(path.search)) {\n    path.search = path.search ? path.search.replace(/^\\?/, "?index&") : "?index";\n  }\n  // If we\'re operating within a basename, prepend it to the pathname.  If\n  // this is a root navigation, then just use the raw basename which allows\n  // the basename to have full control over the presence of a trailing slash\n  // on root actions\n  if (prependBasename && basename !== "/") {\n    path.pathname = path.pathname === "/" ? basename : router_joinPaths([basename, path.pathname]);\n  }\n  return router_createPath(path);\n}\n// Normalize navigation options by converting formMethod=GET formData objects to\n// URLSearchParams so they behave identically to links with query params\nfunction normalizeNavigateOptions(normalizeFormMethod, isFetcher, path, opts) {\n  // Return location verbatim on non-submission navigations\n  if (!opts || !isSubmissionNavigation(opts)) {\n    return {\n      path\n    };\n  }\n  if (opts.formMethod && !isValidMethod(opts.formMethod)) {\n    return {\n      path,\n      error: getInternalRouterError(405, {\n        method: opts.formMethod\n      })\n    };\n  }\n  let getInvalidBodyError = () => ({\n    path,\n    error: getInternalRouterError(400, {\n      type: "invalid-body"\n    })\n  });\n  // Create a Submission on non-GET navigations\n  let rawFormMethod = opts.formMethod || "get";\n  let formMethod = normalizeFormMethod ? rawFormMethod.toUpperCase() : rawFormMethod.toLowerCase();\n  let formAction = stripHashFromPath(path);\n  if (opts.body !== undefined) {\n    if (opts.formEncType === "text/plain") {\n      // text only support POST/PUT/PATCH/DELETE submissions\n      if (!isMutationMethod(formMethod)) {\n        return getInvalidBodyError();\n      }\n      let text = typeof opts.body === "string" ? opts.body : opts.body instanceof FormData || opts.body instanceof URLSearchParams ?\n      // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#plain-text-form-data\n      Array.from(opts.body.entries()).reduce((acc, _ref5) => {\n        let [name, value] = _ref5;\n        return "" + acc + name + "=" + value + "\\n";\n      }, "") : String(opts.body);\n      return {\n        path,\n        submission: {\n          formMethod,\n          formAction,\n          formEncType: opts.formEncType,\n          formData: undefined,\n          json: undefined,\n          text\n        }\n      };\n    } else if (opts.formEncType === "application/json") {\n      // json only supports POST/PUT/PATCH/DELETE submissions\n      if (!isMutationMethod(formMethod)) {\n        return getInvalidBodyError();\n      }\n      try {\n        let json = typeof opts.body === "string" ? JSON.parse(opts.body) : opts.body;\n        return {\n          path,\n          submission: {\n            formMethod,\n            formAction,\n            formEncType: opts.formEncType,\n            formData: undefined,\n            json,\n            text: undefined\n          }\n        };\n      } catch (e) {\n        return getInvalidBodyError();\n      }\n    }\n  }\n  invariant(typeof FormData === "function", "FormData is not available in this environment");\n  let searchParams;\n  let formData;\n  if (opts.formData) {\n    searchParams = convertFormDataToSearchParams(opts.formData);\n    formData = opts.formData;\n  } else if (opts.body instanceof FormData) {\n    searchParams = convertFormDataToSearchParams(opts.body);\n    formData = opts.body;\n  } else if (opts.body instanceof URLSearchParams) {\n    searchParams = opts.body;\n    formData = convertSearchParamsToFormData(searchParams);\n  } else if (opts.body == null) {\n    searchParams = new URLSearchParams();\n    formData = new FormData();\n  } else {\n    try {\n      searchParams = new URLSearchParams(opts.body);\n      formData = convertSearchParamsToFormData(searchParams);\n    } catch (e) {\n      return getInvalidBodyError();\n    }\n  }\n  let submission = {\n    formMethod,\n    formAction,\n    formEncType: opts && opts.formEncType || "application/x-www-form-urlencoded",\n    formData,\n    json: undefined,\n    text: undefined\n  };\n  if (isMutationMethod(submission.formMethod)) {\n    return {\n      path,\n      submission\n    };\n  }\n  // Flatten submission onto URLSearchParams for GET submissions\n  let parsedPath = parsePath(path);\n  // On GET navigation submissions we can drop the ?index param from the\n  // resulting location since all loaders will run.  But fetcher GET submissions\n  // only run a single loader so we need to preserve any incoming ?index params\n  if (isFetcher && parsedPath.search && hasNakedIndexQuery(parsedPath.search)) {\n    searchParams.append("index", "");\n  }\n  parsedPath.search = "?" + searchParams;\n  return {\n    path: router_createPath(parsedPath),\n    submission\n  };\n}\n// Filter out all routes below any caught error as they aren\'t going to\n// render so we don\'t need to load them\nfunction getLoaderMatchesUntilBoundary(matches, boundaryId) {\n  let boundaryMatches = matches;\n  if (boundaryId) {\n    let index = matches.findIndex(m => m.route.id === boundaryId);\n    if (index >= 0) {\n      boundaryMatches = matches.slice(0, index);\n    }\n  }\n  return boundaryMatches;\n}\nfunction getMatchesToLoad(history, state, matches, submission, location, isInitialLoad, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, deletedFetchers, fetchLoadMatches, fetchRedirectIds, routesToUse, basename, pendingActionData, pendingError) {\n  let actionResult = pendingError ? Object.values(pendingError)[0] : pendingActionData ? Object.values(pendingActionData)[0] : undefined;\n  let currentUrl = history.createURL(state.location);\n  let nextUrl = history.createURL(location);\n  // Pick navigation matches that are net-new or qualify for revalidation\n  let boundaryId = pendingError ? Object.keys(pendingError)[0] : undefined;\n  let boundaryMatches = getLoaderMatchesUntilBoundary(matches, boundaryId);\n  let navigationMatches = boundaryMatches.filter((match, index) => {\n    let {\n      route\n    } = match;\n    if (route.lazy) {\n      // We haven\'t loaded this route yet so we don\'t know if it\'s got a loader!\n      return true;\n    }\n    if (route.loader == null) {\n      return false;\n    }\n    if (isInitialLoad) {\n      if (route.loader.hydrate) {\n        return true;\n      }\n      return state.loaderData[route.id] === undefined && (\n      // Don\'t re-run if the loader ran and threw an error\n      !state.errors || state.errors[route.id] === undefined);\n    }\n    // Always call the loader on new route instances and pending defer cancellations\n    if (isNewLoader(state.loaderData, state.matches[index], match) || cancelledDeferredRoutes.some(id => id === match.route.id)) {\n      return true;\n    }\n    // This is the default implementation for when we revalidate.  If the route\n    // provides it\'s own implementation, then we give them full control but\n    // provide this value so they can leverage it if needed after they check\n    // their own specific use cases\n    let currentRouteMatch = state.matches[index];\n    let nextRouteMatch = match;\n    return shouldRevalidateLoader(match, _extends({\n      currentUrl,\n      currentParams: currentRouteMatch.params,\n      nextUrl,\n      nextParams: nextRouteMatch.params\n    }, submission, {\n      actionResult,\n      defaultShouldRevalidate:\n      // Forced revalidation due to submission, useRevalidator, or X-Remix-Revalidate\n      isRevalidationRequired ||\n      // Clicked the same link, resubmitted a GET form\n      currentUrl.pathname + currentUrl.search === nextUrl.pathname + nextUrl.search ||\n      // Search params affect all loaders\n      currentUrl.search !== nextUrl.search || isNewRouteInstance(currentRouteMatch, nextRouteMatch)\n    }));\n  });\n  // Pick fetcher.loads that need to be revalidated\n  let revalidatingFetchers = [];\n  fetchLoadMatches.forEach((f, key) => {\n    // Don\'t revalidate:\n    //  - on initial load (shouldn\'t be any fetchers then anyway)\n    //  - if fetcher won\'t be present in the subsequent render\n    //    - no longer matches the URL (v7_fetcherPersist=false)\n    //    - was unmounted but persisted due to v7_fetcherPersist=true\n    if (isInitialLoad || !matches.some(m => m.route.id === f.routeId) || deletedFetchers.has(key)) {\n      return;\n    }\n    let fetcherMatches = matchRoutes(routesToUse, f.path, basename);\n    // If the fetcher path no longer matches, push it in with null matches so\n    // we can trigger a 404 in callLoadersAndMaybeResolveData.  Note this is\n    // currently only a use-case for Remix HMR where the route tree can change\n    // at runtime and remove a route previously loaded via a fetcher\n    if (!fetcherMatches) {\n      revalidatingFetchers.push({\n        key,\n        routeId: f.routeId,\n        path: f.path,\n        matches: null,\n        match: null,\n        controller: null\n      });\n      return;\n    }\n    // Revalidating fetchers are decoupled from the route matches since they\n    // load from a static href.  They revalidate based on explicit revalidation\n    // (submission, useRevalidator, or X-Remix-Revalidate)\n    let fetcher = state.fetchers.get(key);\n    let fetcherMatch = getTargetMatch(fetcherMatches, f.path);\n    let shouldRevalidate = false;\n    if (fetchRedirectIds.has(key)) {\n      // Never trigger a revalidation of an actively redirecting fetcher\n      shouldRevalidate = false;\n    } else if (cancelledFetcherLoads.includes(key)) {\n      // Always revalidate if the fetcher was cancelled\n      shouldRevalidate = true;\n    } else if (fetcher && fetcher.state !== "idle" && fetcher.data === undefined) {\n      // If the fetcher hasn\'t ever completed loading yet, then this isn\'t a\n      // revalidation, it would just be a brand new load if an explicit\n      // revalidation is required\n      shouldRevalidate = isRevalidationRequired;\n    } else {\n      // Otherwise fall back on any user-defined shouldRevalidate, defaulting\n      // to explicit revalidations only\n      shouldRevalidate = shouldRevalidateLoader(fetcherMatch, _extends({\n        currentUrl,\n        currentParams: state.matches[state.matches.length - 1].params,\n        nextUrl,\n        nextParams: matches[matches.length - 1].params\n      }, submission, {\n        actionResult,\n        defaultShouldRevalidate: isRevalidationRequired\n      }));\n    }\n    if (shouldRevalidate) {\n      revalidatingFetchers.push({\n        key,\n        routeId: f.routeId,\n        path: f.path,\n        matches: fetcherMatches,\n        match: fetcherMatch,\n        controller: new AbortController()\n      });\n    }\n  });\n  return [navigationMatches, revalidatingFetchers];\n}\nfunction isNewLoader(currentLoaderData, currentMatch, match) {\n  let isNew =\n  // [a] -> [a, b]\n  !currentMatch ||\n  // [a, b] -> [a, c]\n  match.route.id !== currentMatch.route.id;\n  // Handle the case that we don\'t have data for a re-used route, potentially\n  // from a prior error or from a cancelled pending deferred\n  let isMissingData = currentLoaderData[match.route.id] === undefined;\n  // Always load if this is a net-new route or we don\'t yet have data\n  return isNew || isMissingData;\n}\nfunction isNewRouteInstance(currentMatch, match) {\n  let currentPath = currentMatch.route.path;\n  return (\n    // param change for this match, /users/123 -> /users/456\n    currentMatch.pathname !== match.pathname ||\n    // splat param changed, which is not present in match.path\n    // e.g. /files/images/avatar.jpg -> files/finances.xls\n    currentPath != null && currentPath.endsWith("*") && currentMatch.params["*"] !== match.params["*"]\n  );\n}\nfunction shouldRevalidateLoader(loaderMatch, arg) {\n  if (loaderMatch.route.shouldRevalidate) {\n    let routeChoice = loaderMatch.route.shouldRevalidate(arg);\n    if (typeof routeChoice === "boolean") {\n      return routeChoice;\n    }\n  }\n  return arg.defaultShouldRevalidate;\n}\n/**\n * Execute route.lazy() methods to lazily load route modules (loader, action,\n * shouldRevalidate) and update the routeManifest in place which shares objects\n * with dataRoutes so those get updated as well.\n */\nasync function loadLazyRouteModule(route, mapRouteProperties, manifest) {\n  if (!route.lazy) {\n    return;\n  }\n  let lazyRoute = await route.lazy();\n  // If the lazy route function was executed and removed by another parallel\n  // call then we can return - first lazy() to finish wins because the return\n  // value of lazy is expected to be static\n  if (!route.lazy) {\n    return;\n  }\n  let routeToUpdate = manifest[route.id];\n  invariant(routeToUpdate, "No route found in manifest");\n  // Update the route in place.  This should be safe because there\'s no way\n  // we could yet be sitting on this route as we can\'t get there without\n  // resolving lazy() first.\n  //\n  // This is different than the HMR "update" use-case where we may actively be\n  // on the route being updated.  The main concern boils down to "does this\n  // mutation affect any ongoing navigations or any current state.matches\n  // values?".  If not, it should be safe to update in place.\n  let routeUpdates = {};\n  for (let lazyRouteProperty in lazyRoute) {\n    let staticRouteValue = routeToUpdate[lazyRouteProperty];\n    let isPropertyStaticallyDefined = staticRouteValue !== undefined &&\n    // This property isn\'t static since it should always be updated based\n    // on the route updates\n    lazyRouteProperty !== "hasErrorBoundary";\n    warning(!isPropertyStaticallyDefined, "Route \\"" + routeToUpdate.id + "\\" has a static property \\"" + lazyRouteProperty + "\\" " + "defined but its lazy function is also returning a value for this property. " + ("The lazy route property \\"" + lazyRouteProperty + "\\" will be ignored."));\n    if (!isPropertyStaticallyDefined && !immutableRouteKeys.has(lazyRouteProperty)) {\n      routeUpdates[lazyRouteProperty] = lazyRoute[lazyRouteProperty];\n    }\n  }\n  // Mutate the route with the provided updates.  Do this first so we pass\n  // the updated version to mapRouteProperties\n  Object.assign(routeToUpdate, routeUpdates);\n  // Mutate the `hasErrorBoundary` property on the route based on the route\n  // updates and remove the `lazy` function so we don\'t resolve the lazy\n  // route again.\n  Object.assign(routeToUpdate, _extends({}, mapRouteProperties(routeToUpdate), {\n    lazy: undefined\n  }));\n}\nasync function callLoaderOrAction(type, request, match, matches, manifest, mapRouteProperties, basename, v7_relativeSplatPath, opts) {\n  if (opts === void 0) {\n    opts = {};\n  }\n  let resultType;\n  let result;\n  let onReject;\n  let runHandler = handler => {\n    // Setup a promise we can race against so that abort signals short circuit\n    let reject;\n    let abortPromise = new Promise((_, r) => reject = r);\n    onReject = () => reject();\n    request.signal.addEventListener("abort", onReject);\n    return Promise.race([handler({\n      request,\n      params: match.params,\n      context: opts.requestContext\n    }), abortPromise]);\n  };\n  try {\n    let handler = match.route[type];\n    if (match.route.lazy) {\n      if (handler) {\n        // Run statically defined handler in parallel with lazy()\n        let handlerError;\n        let values = await Promise.all([\n        // If the handler throws, don\'t let it immediately bubble out,\n        // since we need to let the lazy() execution finish so we know if this\n        // route has a boundary that can handle the error\n        runHandler(handler).catch(e => {\n          handlerError = e;\n        }), loadLazyRouteModule(match.route, mapRouteProperties, manifest)]);\n        if (handlerError) {\n          throw handlerError;\n        }\n        result = values[0];\n      } else {\n        // Load lazy route module, then run any returned handler\n        await loadLazyRouteModule(match.route, mapRouteProperties, manifest);\n        handler = match.route[type];\n        if (handler) {\n          // Handler still run even if we got interrupted to maintain consistency\n          // with un-abortable behavior of handler execution on non-lazy or\n          // previously-lazy-loaded routes\n          result = await runHandler(handler);\n        } else if (type === "action") {\n          let url = new URL(request.url);\n          let pathname = url.pathname + url.search;\n          throw getInternalRouterError(405, {\n            method: request.method,\n            pathname,\n            routeId: match.route.id\n          });\n        } else {\n          // lazy() route has no loader to run.  Short circuit here so we don\'t\n          // hit the invariant below that errors on returning undefined.\n          return {\n            type: ResultType.data,\n            data: undefined\n          };\n        }\n      }\n    } else if (!handler) {\n      let url = new URL(request.url);\n      let pathname = url.pathname + url.search;\n      throw getInternalRouterError(404, {\n        pathname\n      });\n    } else {\n      result = await runHandler(handler);\n    }\n    invariant(result !== undefined, "You defined " + (type === "action" ? "an action" : "a loader") + " for route " + ("\\"" + match.route.id + "\\" but didn\'t return anything from your `" + type + "` ") + "function. Please return a value or `null`.");\n  } catch (e) {\n    resultType = ResultType.error;\n    result = e;\n  } finally {\n    if (onReject) {\n      request.signal.removeEventListener("abort", onReject);\n    }\n  }\n  if (isResponse(result)) {\n    let status = result.status;\n    // Process redirects\n    if (redirectStatusCodes.has(status)) {\n      let location = result.headers.get("Location");\n      invariant(location, "Redirects returned/thrown from loaders/actions must have a Location header");\n      // Support relative routing in internal redirects\n      if (!ABSOLUTE_URL_REGEX.test(location)) {\n        location = normalizeTo(new URL(request.url), matches.slice(0, matches.indexOf(match) + 1), basename, true, location, v7_relativeSplatPath);\n      } else if (!opts.isStaticRequest) {\n        // Strip off the protocol+origin for same-origin + same-basename absolute\n        // redirects. If this is a static request, we can let it go back to the\n        // browser as-is\n        let currentUrl = new URL(request.url);\n        let url = location.startsWith("//") ? new URL(currentUrl.protocol + location) : new URL(location);\n        let isSameBasename = router_stripBasename(url.pathname, basename) != null;\n        if (url.origin === currentUrl.origin && isSameBasename) {\n          location = url.pathname + url.search + url.hash;\n        }\n      }\n      // Don\'t process redirects in the router during static requests requests.\n      // Instead, throw the Response and let the server handle it with an HTTP\n      // redirect.  We also update the Location header in place in this flow so\n      // basename and relative routing is taken into account\n      if (opts.isStaticRequest) {\n        result.headers.set("Location", location);\n        throw result;\n      }\n      return {\n        type: ResultType.redirect,\n        status,\n        location,\n        revalidate: result.headers.get("X-Remix-Revalidate") !== null,\n        reloadDocument: result.headers.get("X-Remix-Reload-Document") !== null\n      };\n    }\n    // For SSR single-route requests, we want to hand Responses back directly\n    // without unwrapping.  We do this with the QueryRouteResponse wrapper\n    // interface so we can know whether it was returned or thrown\n    if (opts.isRouteRequest) {\n      let queryRouteResponse = {\n        type: resultType === ResultType.error ? ResultType.error : ResultType.data,\n        response: result\n      };\n      throw queryRouteResponse;\n    }\n    let data;\n    try {\n      let contentType = result.headers.get("Content-Type");\n      // Check between word boundaries instead of startsWith() due to the last\n      // paragraph of https://httpwg.org/specs/rfc9110.html#field.content-type\n      if (contentType && /\\bapplication\\/json\\b/.test(contentType)) {\n        if (result.body == null) {\n          data = null;\n        } else {\n          data = await result.json();\n        }\n      } else {\n        data = await result.text();\n      }\n    } catch (e) {\n      return {\n        type: ResultType.error,\n        error: e\n      };\n    }\n    if (resultType === ResultType.error) {\n      return {\n        type: resultType,\n        error: new ErrorResponseImpl(status, result.statusText, data),\n        headers: result.headers\n      };\n    }\n    return {\n      type: ResultType.data,\n      data,\n      statusCode: result.status,\n      headers: result.headers\n    };\n  }\n  if (resultType === ResultType.error) {\n    return {\n      type: resultType,\n      error: result\n    };\n  }\n  if (isDeferredData(result)) {\n    var _result$init, _result$init2;\n    return {\n      type: ResultType.deferred,\n      deferredData: result,\n      statusCode: (_result$init = result.init) == null ? void 0 : _result$init.status,\n      headers: ((_result$init2 = result.init) == null ? void 0 : _result$init2.headers) && new Headers(result.init.headers)\n    };\n  }\n  return {\n    type: ResultType.data,\n    data: result\n  };\n}\n// Utility method for creating the Request instances for loaders/actions during\n// client-side navigations and fetches.  During SSR we will always have a\n// Request instance from the static handler (query/queryRoute)\nfunction createClientSideRequest(history, location, signal, submission) {\n  let url = history.createURL(stripHashFromPath(location)).toString();\n  let init = {\n    signal\n  };\n  if (submission && isMutationMethod(submission.formMethod)) {\n    let {\n      formMethod,\n      formEncType\n    } = submission;\n    // Didn\'t think we needed this but it turns out unlike other methods, patch\n    // won\'t be properly normalized to uppercase and results in a 405 error.\n    // See: https://fetch.spec.whatwg.org/#concept-method\n    init.method = formMethod.toUpperCase();\n    if (formEncType === "application/json") {\n      init.headers = new Headers({\n        "Content-Type": formEncType\n      });\n      init.body = JSON.stringify(submission.json);\n    } else if (formEncType === "text/plain") {\n      // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n      init.body = submission.text;\n    } else if (formEncType === "application/x-www-form-urlencoded" && submission.formData) {\n      // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n      init.body = convertFormDataToSearchParams(submission.formData);\n    } else {\n      // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n      init.body = submission.formData;\n    }\n  }\n  return new Request(url, init);\n}\nfunction convertFormDataToSearchParams(formData) {\n  let searchParams = new URLSearchParams();\n  for (let [key, value] of formData.entries()) {\n    // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#converting-an-entry-list-to-a-list-of-name-value-pairs\n    searchParams.append(key, typeof value === "string" ? value : value.name);\n  }\n  return searchParams;\n}\nfunction convertSearchParamsToFormData(searchParams) {\n  let formData = new FormData();\n  for (let [key, value] of searchParams.entries()) {\n    formData.append(key, value);\n  }\n  return formData;\n}\nfunction processRouteLoaderData(matches, matchesToLoad, results, pendingError, activeDeferreds) {\n  // Fill in loaderData/errors from our loaders\n  let loaderData = {};\n  let errors = null;\n  let statusCode;\n  let foundError = false;\n  let loaderHeaders = {};\n  // Process loader results into state.loaderData/state.errors\n  results.forEach((result, index) => {\n    let id = matchesToLoad[index].route.id;\n    invariant(!isRedirectResult(result), "Cannot handle redirect results in processLoaderData");\n    if (isErrorResult(result)) {\n      // Look upwards from the matched route for the closest ancestor\n      // error boundary, defaulting to the root match\n      let boundaryMatch = findNearestBoundary(matches, id);\n      let error = result.error;\n      // If we have a pending action error, we report it at the highest-route\n      // that throws a loader error, and then clear it out to indicate that\n      // it was consumed\n      if (pendingError) {\n        error = Object.values(pendingError)[0];\n        pendingError = undefined;\n      }\n      errors = errors || {};\n      // Prefer higher error values if lower errors bubble to the same boundary\n      if (errors[boundaryMatch.route.id] == null) {\n        errors[boundaryMatch.route.id] = error;\n      }\n      // Clear our any prior loaderData for the throwing route\n      loaderData[id] = undefined;\n      // Once we find our first (highest) error, we set the status code and\n      // prevent deeper status codes from overriding\n      if (!foundError) {\n        foundError = true;\n        statusCode = isRouteErrorResponse(result.error) ? result.error.status : 500;\n      }\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    } else {\n      if (isDeferredResult(result)) {\n        activeDeferreds.set(id, result.deferredData);\n        loaderData[id] = result.deferredData.data;\n      } else {\n        loaderData[id] = result.data;\n      }\n      // Error status codes always override success status codes, but if all\n      // loaders are successful we take the deepest status code.\n      if (result.statusCode != null && result.statusCode !== 200 && !foundError) {\n        statusCode = result.statusCode;\n      }\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    }\n  });\n  // If we didn\'t consume the pending action error (i.e., all loaders\n  // resolved), then consume it here.  Also clear out any loaderData for the\n  // throwing route\n  if (pendingError) {\n    errors = pendingError;\n    loaderData[Object.keys(pendingError)[0]] = undefined;\n  }\n  return {\n    loaderData,\n    errors,\n    statusCode: statusCode || 200,\n    loaderHeaders\n  };\n}\nfunction processLoaderData(state, matches, matchesToLoad, results, pendingError, revalidatingFetchers, fetcherResults, activeDeferreds) {\n  let {\n    loaderData,\n    errors\n  } = processRouteLoaderData(matches, matchesToLoad, results, pendingError, activeDeferreds);\n  // Process results from our revalidating fetchers\n  for (let index = 0; index < revalidatingFetchers.length; index++) {\n    let {\n      key,\n      match,\n      controller\n    } = revalidatingFetchers[index];\n    invariant(fetcherResults !== undefined && fetcherResults[index] !== undefined, "Did not find corresponding fetcher result");\n    let result = fetcherResults[index];\n    // Process fetcher non-redirect errors\n    if (controller && controller.signal.aborted) {\n      // Nothing to do for aborted fetchers\n      continue;\n    } else if (isErrorResult(result)) {\n      let boundaryMatch = findNearestBoundary(state.matches, match == null ? void 0 : match.route.id);\n      if (!(errors && errors[boundaryMatch.route.id])) {\n        errors = _extends({}, errors, {\n          [boundaryMatch.route.id]: result.error\n        });\n      }\n      state.fetchers.delete(key);\n    } else if (isRedirectResult(result)) {\n      // Should never get here, redirects should get processed above, but we\n      // keep this to type narrow to a success result in the else\n      invariant(false, "Unhandled fetcher revalidation redirect");\n    } else if (isDeferredResult(result)) {\n      // Should never get here, deferred data should be awaited for fetchers\n      // in resolveDeferredResults\n      invariant(false, "Unhandled fetcher deferred data");\n    } else {\n      let doneFetcher = getDoneFetcher(result.data);\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n  return {\n    loaderData,\n    errors\n  };\n}\nfunction mergeLoaderData(loaderData, newLoaderData, matches, errors) {\n  let mergedLoaderData = _extends({}, newLoaderData);\n  for (let match of matches) {\n    let id = match.route.id;\n    if (newLoaderData.hasOwnProperty(id)) {\n      if (newLoaderData[id] !== undefined) {\n        mergedLoaderData[id] = newLoaderData[id];\n      }\n    } else if (loaderData[id] !== undefined && match.route.loader) {\n      // Preserve existing keys not included in newLoaderData and where a loader\n      // wasn\'t removed by HMR\n      mergedLoaderData[id] = loaderData[id];\n    }\n    if (errors && errors.hasOwnProperty(id)) {\n      // Don\'t keep any loader data below the boundary\n      break;\n    }\n  }\n  return mergedLoaderData;\n}\n// Find the nearest error boundary, looking upwards from the leaf route (or the\n// route specified by routeId) for the closest ancestor error boundary,\n// defaulting to the root match\nfunction findNearestBoundary(matches, routeId) {\n  let eligibleMatches = routeId ? matches.slice(0, matches.findIndex(m => m.route.id === routeId) + 1) : [...matches];\n  return eligibleMatches.reverse().find(m => m.route.hasErrorBoundary === true) || matches[0];\n}\nfunction getShortCircuitMatches(routes) {\n  // Prefer a root layout route if present, otherwise shim in a route object\n  let route = routes.length === 1 ? routes[0] : routes.find(r => r.index || !r.path || r.path === "/") || {\n    id: "__shim-error-route__"\n  };\n  return {\n    matches: [{\n      params: {},\n      pathname: "",\n      pathnameBase: "",\n      route\n    }],\n    route\n  };\n}\nfunction getInternalRouterError(status, _temp5) {\n  let {\n    pathname,\n    routeId,\n    method,\n    type\n  } = _temp5 === void 0 ? {} : _temp5;\n  let statusText = "Unknown Server Error";\n  let errorMessage = "Unknown @remix-run/router error";\n  if (status === 400) {\n    statusText = "Bad Request";\n    if (method && pathname && routeId) {\n      errorMessage = "You made a " + method + " request to \\"" + pathname + "\\" but " + ("did not provide a `loader` for route \\"" + routeId + "\\", ") + "so there is no way to handle the request.";\n    } else if (type === "defer-action") {\n      errorMessage = "defer() is not supported in actions";\n    } else if (type === "invalid-body") {\n      errorMessage = "Unable to encode submission body";\n    }\n  } else if (status === 403) {\n    statusText = "Forbidden";\n    errorMessage = "Route \\"" + routeId + "\\" does not match URL \\"" + pathname + "\\"";\n  } else if (status === 404) {\n    statusText = "Not Found";\n    errorMessage = "No route matches URL \\"" + pathname + "\\"";\n  } else if (status === 405) {\n    statusText = "Method Not Allowed";\n    if (method && pathname && routeId) {\n      errorMessage = "You made a " + method.toUpperCase() + " request to \\"" + pathname + "\\" but " + ("did not provide an `action` for route \\"" + routeId + "\\", ") + "so there is no way to handle the request.";\n    } else if (method) {\n      errorMessage = "Invalid request method \\"" + method.toUpperCase() + "\\"";\n    }\n  }\n  return new ErrorResponseImpl(status || 500, statusText, new Error(errorMessage), true);\n}\n// Find any returned redirect errors, starting from the lowest match\nfunction findRedirect(results) {\n  for (let i = results.length - 1; i >= 0; i--) {\n    let result = results[i];\n    if (isRedirectResult(result)) {\n      return {\n        result,\n        idx: i\n      };\n    }\n  }\n}\nfunction stripHashFromPath(path) {\n  let parsedPath = typeof path === "string" ? parsePath(path) : path;\n  return router_createPath(_extends({}, parsedPath, {\n    hash: ""\n  }));\n}\nfunction isHashChangeOnly(a, b) {\n  if (a.pathname !== b.pathname || a.search !== b.search) {\n    return false;\n  }\n  if (a.hash === "") {\n    // /page -> /page#hash\n    return b.hash !== "";\n  } else if (a.hash === b.hash) {\n    // /page#hash -> /page#hash\n    return true;\n  } else if (b.hash !== "") {\n    // /page#hash -> /page#other\n    return true;\n  }\n  // If the hash is removed the browser will re-perform a request to the server\n  // /page#hash -> /page\n  return false;\n}\nfunction isDeferredResult(result) {\n  return result.type === ResultType.deferred;\n}\nfunction isErrorResult(result) {\n  return result.type === ResultType.error;\n}\nfunction isRedirectResult(result) {\n  return (result && result.type) === ResultType.redirect;\n}\nfunction isDeferredData(value) {\n  let deferred = value;\n  return deferred && typeof deferred === "object" && typeof deferred.data === "object" && typeof deferred.subscribe === "function" && typeof deferred.cancel === "function" && typeof deferred.resolveData === "function";\n}\nfunction isResponse(value) {\n  return value != null && typeof value.status === "number" && typeof value.statusText === "string" && typeof value.headers === "object" && typeof value.body !== "undefined";\n}\nfunction isRedirectResponse(result) {\n  if (!isResponse(result)) {\n    return false;\n  }\n  let status = result.status;\n  let location = result.headers.get("Location");\n  return status >= 300 && status <= 399 && location != null;\n}\nfunction isQueryRouteResponse(obj) {\n  return obj && isResponse(obj.response) && (obj.type === ResultType.data || obj.type === ResultType.error);\n}\nfunction isValidMethod(method) {\n  return validRequestMethods.has(method.toLowerCase());\n}\nfunction isMutationMethod(method) {\n  return validMutationMethods.has(method.toLowerCase());\n}\nasync function resolveDeferredResults(currentMatches, matchesToLoad, results, signals, isFetcher, currentLoaderData) {\n  for (let index = 0; index < results.length; index++) {\n    let result = results[index];\n    let match = matchesToLoad[index];\n    // If we don\'t have a match, then we can have a deferred result to do\n    // anything with.  This is for revalidating fetchers where the route was\n    // removed during HMR\n    if (!match) {\n      continue;\n    }\n    let currentMatch = currentMatches.find(m => m.route.id === match.route.id);\n    let isRevalidatingLoader = currentMatch != null && !isNewRouteInstance(currentMatch, match) && (currentLoaderData && currentLoaderData[match.route.id]) !== undefined;\n    if (isDeferredResult(result) && (isFetcher || isRevalidatingLoader)) {\n      // Note: we do not have to touch activeDeferreds here since we race them\n      // against the signal in resolveDeferredData and they\'ll get aborted\n      // there if needed\n      let signal = signals[index];\n      invariant(signal, "Expected an AbortSignal for revalidating fetcher deferred result");\n      await resolveDeferredData(result, signal, isFetcher).then(result => {\n        if (result) {\n          results[index] = result || results[index];\n        }\n      });\n    }\n  }\n}\nasync function resolveDeferredData(result, signal, unwrap) {\n  if (unwrap === void 0) {\n    unwrap = false;\n  }\n  let aborted = await result.deferredData.resolveData(signal);\n  if (aborted) {\n    return;\n  }\n  if (unwrap) {\n    try {\n      return {\n        type: ResultType.data,\n        data: result.deferredData.unwrappedData\n      };\n    } catch (e) {\n      // Handle any TrackedPromise._error values encountered while unwrapping\n      return {\n        type: ResultType.error,\n        error: e\n      };\n    }\n  }\n  return {\n    type: ResultType.data,\n    data: result.deferredData.data\n  };\n}\nfunction hasNakedIndexQuery(search) {\n  return new URLSearchParams(search).getAll("index").some(v => v === "");\n}\nfunction getTargetMatch(matches, location) {\n  let search = typeof location === "string" ? parsePath(location).search : location.search;\n  if (matches[matches.length - 1].route.index && hasNakedIndexQuery(search || "")) {\n    // Return the leaf index route when index is present\n    return matches[matches.length - 1];\n  }\n  // Otherwise grab the deepest "path contributing" match (ignoring index and\n  // pathless layout routes)\n  let pathMatches = getPathContributingMatches(matches);\n  return pathMatches[pathMatches.length - 1];\n}\nfunction getSubmissionFromNavigation(navigation) {\n  let {\n    formMethod,\n    formAction,\n    formEncType,\n    text,\n    formData,\n    json\n  } = navigation;\n  if (!formMethod || !formAction || !formEncType) {\n    return;\n  }\n  if (text != null) {\n    return {\n      formMethod,\n      formAction,\n      formEncType,\n      formData: undefined,\n      json: undefined,\n      text\n    };\n  } else if (formData != null) {\n    return {\n      formMethod,\n      formAction,\n      formEncType,\n      formData,\n      json: undefined,\n      text: undefined\n    };\n  } else if (json !== undefined) {\n    return {\n      formMethod,\n      formAction,\n      formEncType,\n      formData: undefined,\n      json,\n      text: undefined\n    };\n  }\n}\nfunction getLoadingNavigation(location, submission) {\n  if (submission) {\n    let navigation = {\n      state: "loading",\n      location,\n      formMethod: submission.formMethod,\n      formAction: submission.formAction,\n      formEncType: submission.formEncType,\n      formData: submission.formData,\n      json: submission.json,\n      text: submission.text\n    };\n    return navigation;\n  } else {\n    let navigation = {\n      state: "loading",\n      location,\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      json: undefined,\n      text: undefined\n    };\n    return navigation;\n  }\n}\nfunction getSubmittingNavigation(location, submission) {\n  let navigation = {\n    state: "submitting",\n    location,\n    formMethod: submission.formMethod,\n    formAction: submission.formAction,\n    formEncType: submission.formEncType,\n    formData: submission.formData,\n    json: submission.json,\n    text: submission.text\n  };\n  return navigation;\n}\nfunction getLoadingFetcher(submission, data) {\n  if (submission) {\n    let fetcher = {\n      state: "loading",\n      formMethod: submission.formMethod,\n      formAction: submission.formAction,\n      formEncType: submission.formEncType,\n      formData: submission.formData,\n      json: submission.json,\n      text: submission.text,\n      data\n    };\n    return fetcher;\n  } else {\n    let fetcher = {\n      state: "loading",\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      json: undefined,\n      text: undefined,\n      data\n    };\n    return fetcher;\n  }\n}\nfunction getSubmittingFetcher(submission, existingFetcher) {\n  let fetcher = {\n    state: "submitting",\n    formMethod: submission.formMethod,\n    formAction: submission.formAction,\n    formEncType: submission.formEncType,\n    formData: submission.formData,\n    json: submission.json,\n    text: submission.text,\n    data: existingFetcher ? existingFetcher.data : undefined\n  };\n  return fetcher;\n}\nfunction getDoneFetcher(data) {\n  let fetcher = {\n    state: "idle",\n    formMethod: undefined,\n    formAction: undefined,\n    formEncType: undefined,\n    formData: undefined,\n    json: undefined,\n    text: undefined,\n    data\n  };\n  return fetcher;\n}\nfunction restoreAppliedTransitions(_window, transitions) {\n  try {\n    let sessionPositions = _window.sessionStorage.getItem(TRANSITIONS_STORAGE_KEY);\n    if (sessionPositions) {\n      let json = JSON.parse(sessionPositions);\n      for (let [k, v] of Object.entries(json || {})) {\n        if (v && Array.isArray(v)) {\n          transitions.set(k, new Set(v || []));\n        }\n      }\n    }\n  } catch (e) {\n    // no-op, use default empty object\n  }\n}\nfunction persistAppliedTransitions(_window, transitions) {\n  if (transitions.size > 0) {\n    let json = {};\n    for (let [k, v] of transitions) {\n      json[k] = [...v];\n    }\n    try {\n      _window.sessionStorage.setItem(TRANSITIONS_STORAGE_KEY, JSON.stringify(json));\n    } catch (error) {\n      warning(false, "Failed to save applied view transitions in sessionStorage (" + error + ").");\n    }\n  }\n}\n//#endregion\n\n\n;// CONCATENATED MODULE: ./node_modules/react-router/dist/index.js\n/**\n * React Router v6.22.3\n *\n * Copyright (c) Remix Software Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.md file in the root directory of this source tree.\n *\n * @license MIT\n */\n\n\n\nfunction dist_extends() {\n  dist_extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return dist_extends.apply(this, arguments);\n}\n\n// Create react-specific types from the agnostic types in @remix-run/router to\n// export from react-router\nconst DataRouterContext = /*#__PURE__*/react.createContext(null);\nif (false) {}\nconst DataRouterStateContext = /*#__PURE__*/react.createContext(null);\nif (false) {}\nconst AwaitContext = /*#__PURE__*/react.createContext(null);\nif (false) {}\n\n/**\n * A Navigator is a "location changer"; it\'s how you get to different locations.\n *\n * Every history instance conforms to the Navigator interface, but the\n * distinction is useful primarily when it comes to the low-level `<Router>` API\n * where both the location and a navigator must be provided separately in order\n * to avoid "tearing" that may occur in a suspense-enabled app if the action\n * and/or location were to be read directly from the history instance.\n */\n\nconst NavigationContext = /*#__PURE__*/react.createContext(null);\nif (false) {}\nconst LocationContext = /*#__PURE__*/react.createContext(null);\nif (false) {}\nconst RouteContext = /*#__PURE__*/react.createContext({\n  outlet: null,\n  matches: [],\n  isDataRoute: false\n});\nif (false) {}\nconst RouteErrorContext = /*#__PURE__*/react.createContext(null);\nif (false) {}\n\n/**\n * Returns the full href for the given "to" value. This is useful for building\n * custom links that are also accessible and preserve right-click behavior.\n *\n * @see https://reactrouter.com/hooks/use-href\n */\nfunction dist_useHref(to, _temp) {\n  let {\n    relative\n  } = _temp === void 0 ? {} : _temp;\n  !useInRouterContext() ?  false ? 0 : UNSAFE_invariant(false) : void 0;\n  let {\n    basename,\n    navigator\n  } = React.useContext(NavigationContext);\n  let {\n    hash,\n    pathname,\n    search\n  } = dist_useResolvedPath(to, {\n    relative\n  });\n  let joinedPathname = pathname;\n\n  // If we\'re operating within a basename, prepend it to the pathname prior\n  // to creating the href.  If this is a root navigation, then just use the raw\n  // basename which allows the basename to have full control over the presence\n  // of a trailing slash on root links\n  if (basename !== "/") {\n    joinedPathname = pathname === "/" ? basename : joinPaths([basename, pathname]);\n  }\n  return navigator.createHref({\n    pathname: joinedPathname,\n    search,\n    hash\n  });\n}\n\n/**\n * Returns true if this component is a descendant of a `<Router>`.\n *\n * @see https://reactrouter.com/hooks/use-in-router-context\n */\nfunction useInRouterContext() {\n  return react.useContext(LocationContext) != null;\n}\n\n/**\n * Returns the current location object, which represents the current URL in web\n * browsers.\n *\n * Note: If you\'re using this it may mean you\'re doing some of your own\n * "routing" in your app, and we\'d like to know what your use case is. We may\n * be able to provide something higher-level to better suit your needs.\n *\n * @see https://reactrouter.com/hooks/use-location\n */\nfunction dist_useLocation() {\n  !useInRouterContext() ?  false ? 0 : invariant(false) : void 0;\n  return react.useContext(LocationContext).location;\n}\n\n/**\n * Returns the current navigation action which describes how the router came to\n * the current location, either by a pop, push, or replace on the history stack.\n *\n * @see https://reactrouter.com/hooks/use-navigation-type\n */\nfunction useNavigationType() {\n  return React.useContext(LocationContext).navigationType;\n}\n\n/**\n * Returns a PathMatch object if the given pattern matches the current URL.\n * This is useful for components that need to know "active" state, e.g.\n * `<NavLink>`.\n *\n * @see https://reactrouter.com/hooks/use-match\n */\nfunction useMatch(pattern) {\n  !useInRouterContext() ?  false ? 0 : UNSAFE_invariant(false) : void 0;\n  let {\n    pathname\n  } = dist_useLocation();\n  return React.useMemo(() => matchPath(pattern, pathname), [pathname, pattern]);\n}\n\n/**\n * The interface for the navigate() function returned from useNavigate().\n */\n\nconst navigateEffectWarning = (/* unused pure expression or super */ null && ("You should call navigate() in a React.useEffect(), not when " + "your component is first rendered."));\n\n// Mute warnings for calls to useNavigate in SSR environments\nfunction useIsomorphicLayoutEffect(cb) {\n  let isStatic = react.useContext(NavigationContext).static;\n  if (!isStatic) {\n    // We should be able to get rid of this once react 18.3 is released\n    // See: https://github.com/facebook/react/pull/26395\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    react.useLayoutEffect(cb);\n  }\n}\n\n/**\n * Returns an imperative method for changing the location. Used by `<Link>`s, but\n * may also be used by other elements to change the location.\n *\n * @see https://reactrouter.com/hooks/use-navigate\n */\nfunction dist_useNavigate() {\n  let {\n    isDataRoute\n  } = react.useContext(RouteContext);\n  // Conditional usage is OK here because the usage of a data router is static\n  // eslint-disable-next-line react-hooks/rules-of-hooks\n  return isDataRoute ? useNavigateStable() : useNavigateUnstable();\n}\nfunction useNavigateUnstable() {\n  !useInRouterContext() ?  false ? 0 : invariant(false) : void 0;\n  let dataRouterContext = react.useContext(DataRouterContext);\n  let {\n    basename,\n    future,\n    navigator\n  } = react.useContext(NavigationContext);\n  let {\n    matches\n  } = react.useContext(RouteContext);\n  let {\n    pathname: locationPathname\n  } = dist_useLocation();\n  let routePathnamesJson = JSON.stringify(getResolveToMatches(matches, future.v7_relativeSplatPath));\n  let activeRef = react.useRef(false);\n  useIsomorphicLayoutEffect(() => {\n    activeRef.current = true;\n  });\n  let navigate = react.useCallback(function (to, options) {\n    if (options === void 0) {\n      options = {};\n    }\n     false ? 0 : void 0;\n\n    // Short circuit here since if this happens on first render the navigate\n    // is useless because we haven\'t wired up our history listener yet\n    if (!activeRef.current) return;\n    if (typeof to === "number") {\n      navigator.go(to);\n      return;\n    }\n    let path = router_resolveTo(to, JSON.parse(routePathnamesJson), locationPathname, options.relative === "path");\n\n    // If we\'re operating within a basename, prepend it to the pathname prior\n    // to handing off to history (but only if we\'re not in a data router,\n    // otherwise it\'ll prepend the basename inside of the router).\n    // If this is a root navigation, then we navigate to the raw basename\n    // which allows the basename to have full control over the presence of a\n    // trailing slash on root links\n    if (dataRouterContext == null && basename !== "/") {\n      path.pathname = path.pathname === "/" ? basename : router_joinPaths([basename, path.pathname]);\n    }\n    (!!options.replace ? navigator.replace : navigator.push)(path, options.state, options);\n  }, [basename, navigator, routePathnamesJson, locationPathname, dataRouterContext]);\n  return navigate;\n}\nconst OutletContext = /*#__PURE__*/react.createContext(null);\n\n/**\n * Returns the context (if provided) for the child route at this level of the route\n * hierarchy.\n * @see https://reactrouter.com/hooks/use-outlet-context\n */\nfunction useOutletContext() {\n  return React.useContext(OutletContext);\n}\n\n/**\n * Returns the element for the child route at this level of the route\n * hierarchy. Used internally by `<Outlet>` to render child routes.\n *\n * @see https://reactrouter.com/hooks/use-outlet\n */\nfunction useOutlet(context) {\n  let outlet = react.useContext(RouteContext).outlet;\n  if (outlet) {\n    return /*#__PURE__*/react.createElement(OutletContext.Provider, {\n      value: context\n    }, outlet);\n  }\n  return outlet;\n}\n\n/**\n * Returns an object of key/value pairs of the dynamic params from the current\n * URL that were matched by the route path.\n *\n * @see https://reactrouter.com/hooks/use-params\n */\nfunction useParams() {\n  let {\n    matches\n  } = react.useContext(RouteContext);\n  let routeMatch = matches[matches.length - 1];\n  return routeMatch ? routeMatch.params : {};\n}\n\n/**\n * Resolves the pathname of the given `to` value against the current location.\n *\n * @see https://reactrouter.com/hooks/use-resolved-path\n */\nfunction dist_useResolvedPath(to, _temp2) {\n  let {\n    relative\n  } = _temp2 === void 0 ? {} : _temp2;\n  let {\n    future\n  } = React.useContext(NavigationContext);\n  let {\n    matches\n  } = React.useContext(RouteContext);\n  let {\n    pathname: locationPathname\n  } = dist_useLocation();\n  let routePathnamesJson = JSON.stringify(UNSAFE_getResolveToMatches(matches, future.v7_relativeSplatPath));\n  return React.useMemo(() => resolveTo(to, JSON.parse(routePathnamesJson), locationPathname, relative === "path"), [to, routePathnamesJson, locationPathname, relative]);\n}\n\n/**\n * Returns the element of the route that matched the current location, prepared\n * with the correct context to render the remainder of the route tree. Route\n * elements in the tree must render an `<Outlet>` to render their child route\'s\n * element.\n *\n * @see https://reactrouter.com/hooks/use-routes\n */\nfunction useRoutes(routes, locationArg) {\n  return useRoutesImpl(routes, locationArg);\n}\n\n// Internal implementation with accept optional param for RouterProvider usage\nfunction useRoutesImpl(routes, locationArg, dataRouterState, future) {\n  !useInRouterContext() ?  false ? 0 : invariant(false) : void 0;\n  let {\n    navigator\n  } = react.useContext(NavigationContext);\n  let {\n    matches: parentMatches\n  } = react.useContext(RouteContext);\n  let routeMatch = parentMatches[parentMatches.length - 1];\n  let parentParams = routeMatch ? routeMatch.params : {};\n  let parentPathname = routeMatch ? routeMatch.pathname : "/";\n  let parentPathnameBase = routeMatch ? routeMatch.pathnameBase : "/";\n  let parentRoute = routeMatch && routeMatch.route;\n  if (false) {}\n  let locationFromContext = dist_useLocation();\n  let location;\n  if (locationArg) {\n    var _parsedLocationArg$pa;\n    let parsedLocationArg = typeof locationArg === "string" ? parsePath(locationArg) : locationArg;\n    !(parentPathnameBase === "/" || ((_parsedLocationArg$pa = parsedLocationArg.pathname) == null ? void 0 : _parsedLocationArg$pa.startsWith(parentPathnameBase))) ?  false ? 0 : invariant(false) : void 0;\n    location = parsedLocationArg;\n  } else {\n    location = locationFromContext;\n  }\n  let pathname = location.pathname || "/";\n  let remainingPathname = pathname;\n  if (parentPathnameBase !== "/") {\n    // Determine the remaining pathname by removing the # of URL segments the\n    // parentPathnameBase has, instead of removing based on character count.\n    // This is because we can\'t guarantee that incoming/outgoing encodings/\n    // decodings will match exactly.\n    // We decode paths before matching on a per-segment basis with\n    // decodeURIComponent(), but we re-encode pathnames via `new URL()` so they\n    // match what `window.location.pathname` would reflect.  Those don\'t 100%\n    // align when it comes to encoded URI characters such as % and &.\n    //\n    // So we may end up with:\n    //   pathname:           "/descendant/a%25b/match"\n    //   parentPathnameBase: "/descendant/a%b"\n    //\n    // And the direct substring removal approach won\'t work :/\n    let parentSegments = parentPathnameBase.replace(/^\\//, "").split("/");\n    let segments = pathname.replace(/^\\//, "").split("/");\n    remainingPathname = "/" + segments.slice(parentSegments.length).join("/");\n  }\n  let matches = matchRoutes(routes, {\n    pathname: remainingPathname\n  });\n  if (false) {}\n  let renderedMatches = _renderMatches(matches && matches.map(match => Object.assign({}, match, {\n    params: Object.assign({}, parentParams, match.params),\n    pathname: router_joinPaths([parentPathnameBase,\n    // Re-encode pathnames that were decoded inside matchRoutes\n    navigator.encodeLocation ? navigator.encodeLocation(match.pathname).pathname : match.pathname]),\n    pathnameBase: match.pathnameBase === "/" ? parentPathnameBase : router_joinPaths([parentPathnameBase,\n    // Re-encode pathnames that were decoded inside matchRoutes\n    navigator.encodeLocation ? navigator.encodeLocation(match.pathnameBase).pathname : match.pathnameBase])\n  })), parentMatches, dataRouterState, future);\n\n  // When a user passes in a `locationArg`, the associated routes need to\n  // be wrapped in a new `LocationContext.Provider` in order for `useLocation`\n  // to use the scoped location instead of the global location.\n  if (locationArg && renderedMatches) {\n    return /*#__PURE__*/react.createElement(LocationContext.Provider, {\n      value: {\n        location: dist_extends({\n          pathname: "/",\n          search: "",\n          hash: "",\n          state: null,\n          key: "default"\n        }, location),\n        navigationType: Action.Pop\n      }\n    }, renderedMatches);\n  }\n  return renderedMatches;\n}\nfunction DefaultErrorComponent() {\n  let error = useRouteError();\n  let message = isRouteErrorResponse(error) ? error.status + " " + error.statusText : error instanceof Error ? error.message : JSON.stringify(error);\n  let stack = error instanceof Error ? error.stack : null;\n  let lightgrey = "rgba(200,200,200, 0.5)";\n  let preStyles = {\n    padding: "0.5rem",\n    backgroundColor: lightgrey\n  };\n  let codeStyles = {\n    padding: "2px 4px",\n    backgroundColor: lightgrey\n  };\n  let devInfo = null;\n  if (false) {}\n  return /*#__PURE__*/react.createElement(react.Fragment, null, /*#__PURE__*/react.createElement("h2", null, "Unexpected Application Error!"), /*#__PURE__*/react.createElement("h3", {\n    style: {\n      fontStyle: "italic"\n    }\n  }, message), stack ? /*#__PURE__*/react.createElement("pre", {\n    style: preStyles\n  }, stack) : null, devInfo);\n}\nconst defaultErrorElement = /*#__PURE__*/react.createElement(DefaultErrorComponent, null);\nclass RenderErrorBoundary extends react.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      location: props.location,\n      revalidation: props.revalidation,\n      error: props.error\n    };\n  }\n  static getDerivedStateFromError(error) {\n    return {\n      error: error\n    };\n  }\n  static getDerivedStateFromProps(props, state) {\n    // When we get into an error state, the user will likely click "back" to the\n    // previous page that didn\'t have an error. Because this wraps the entire\n    // application, that will have no effect--the error page continues to display.\n    // This gives us a mechanism to recover from the error when the location changes.\n    //\n    // Whether we\'re in an error state or not, we update the location in state\n    // so that when we are in an error state, it gets reset when a new location\n    // comes in and the user recovers from the error.\n    if (state.location !== props.location || state.revalidation !== "idle" && props.revalidation === "idle") {\n      return {\n        error: props.error,\n        location: props.location,\n        revalidation: props.revalidation\n      };\n    }\n\n    // If we\'re not changing locations, preserve the location but still surface\n    // any new errors that may come through. We retain the existing error, we do\n    // this because the error provided from the app state may be cleared without\n    // the location changing.\n    return {\n      error: props.error !== undefined ? props.error : state.error,\n      location: state.location,\n      revalidation: props.revalidation || state.revalidation\n    };\n  }\n  componentDidCatch(error, errorInfo) {\n    console.error("React Router caught the following error during render", error, errorInfo);\n  }\n  render() {\n    return this.state.error !== undefined ? /*#__PURE__*/react.createElement(RouteContext.Provider, {\n      value: this.props.routeContext\n    }, /*#__PURE__*/react.createElement(RouteErrorContext.Provider, {\n      value: this.state.error,\n      children: this.props.component\n    })) : this.props.children;\n  }\n}\nfunction RenderedRoute(_ref) {\n  let {\n    routeContext,\n    match,\n    children\n  } = _ref;\n  let dataRouterContext = react.useContext(DataRouterContext);\n\n  // Track how deep we got in our render pass to emulate SSR componentDidCatch\n  // in a DataStaticRouter\n  if (dataRouterContext && dataRouterContext.static && dataRouterContext.staticContext && (match.route.errorElement || match.route.ErrorBoundary)) {\n    dataRouterContext.staticContext._deepestRenderedBoundaryId = match.route.id;\n  }\n  return /*#__PURE__*/react.createElement(RouteContext.Provider, {\n    value: routeContext\n  }, children);\n}\nfunction _renderMatches(matches, parentMatches, dataRouterState, future) {\n  var _dataRouterState2;\n  if (parentMatches === void 0) {\n    parentMatches = [];\n  }\n  if (dataRouterState === void 0) {\n    dataRouterState = null;\n  }\n  if (future === void 0) {\n    future = null;\n  }\n  if (matches == null) {\n    var _dataRouterState;\n    if ((_dataRouterState = dataRouterState) != null && _dataRouterState.errors) {\n      // Don\'t bail if we have data router errors so we can render them in the\n      // boundary.  Use the pre-matched (or shimmed) matches\n      matches = dataRouterState.matches;\n    } else {\n      return null;\n    }\n  }\n  let renderedMatches = matches;\n\n  // If we have data errors, trim matches to the highest error boundary\n  let errors = (_dataRouterState2 = dataRouterState) == null ? void 0 : _dataRouterState2.errors;\n  if (errors != null) {\n    let errorIndex = renderedMatches.findIndex(m => m.route.id && (errors == null ? void 0 : errors[m.route.id]));\n    !(errorIndex >= 0) ?  false ? 0 : invariant(false) : void 0;\n    renderedMatches = renderedMatches.slice(0, Math.min(renderedMatches.length, errorIndex + 1));\n  }\n\n  // If we\'re in a partial hydration mode, detect if we need to render down to\n  // a given HydrateFallback while we load the rest of the hydration data\n  let renderFallback = false;\n  let fallbackIndex = -1;\n  if (dataRouterState && future && future.v7_partialHydration) {\n    for (let i = 0; i < renderedMatches.length; i++) {\n      let match = renderedMatches[i];\n      // Track the deepest fallback up until the first route without data\n      if (match.route.HydrateFallback || match.route.hydrateFallbackElement) {\n        fallbackIndex = i;\n      }\n      if (match.route.id) {\n        let {\n          loaderData,\n          errors\n        } = dataRouterState;\n        let needsToRunLoader = match.route.loader && loaderData[match.route.id] === undefined && (!errors || errors[match.route.id] === undefined);\n        if (match.route.lazy || needsToRunLoader) {\n          // We found the first route that\'s not ready to render (waiting on\n          // lazy, or has a loader that hasn\'t run yet).  Flag that we need to\n          // render a fallback and render up until the appropriate fallback\n          renderFallback = true;\n          if (fallbackIndex >= 0) {\n            renderedMatches = renderedMatches.slice(0, fallbackIndex + 1);\n          } else {\n            renderedMatches = [renderedMatches[0]];\n          }\n          break;\n        }\n      }\n    }\n  }\n  return renderedMatches.reduceRight((outlet, match, index) => {\n    // Only data routers handle errors/fallbacks\n    let error;\n    let shouldRenderHydrateFallback = false;\n    let errorElement = null;\n    let hydrateFallbackElement = null;\n    if (dataRouterState) {\n      error = errors && match.route.id ? errors[match.route.id] : undefined;\n      errorElement = match.route.errorElement || defaultErrorElement;\n      if (renderFallback) {\n        if (fallbackIndex < 0 && index === 0) {\n          warningOnce("route-fallback", false, "No `HydrateFallback` element provided to render during initial hydration");\n          shouldRenderHydrateFallback = true;\n          hydrateFallbackElement = null;\n        } else if (fallbackIndex === index) {\n          shouldRenderHydrateFallback = true;\n          hydrateFallbackElement = match.route.hydrateFallbackElement || null;\n        }\n      }\n    }\n    let matches = parentMatches.concat(renderedMatches.slice(0, index + 1));\n    let getChildren = () => {\n      let children;\n      if (error) {\n        children = errorElement;\n      } else if (shouldRenderHydrateFallback) {\n        children = hydrateFallbackElement;\n      } else if (match.route.Component) {\n        // Note: This is a de-optimized path since React won\'t re-use the\n        // ReactElement since it\'s identity changes with each new\n        // React.createElement call.  We keep this so folks can use\n        // `<Route Component={...}>` in `<Routes>` but generally `Component`\n        // usage is only advised in `RouterProvider` when we can convert it to\n        // `element` ahead of time.\n        children = /*#__PURE__*/react.createElement(match.route.Component, null);\n      } else if (match.route.element) {\n        children = match.route.element;\n      } else {\n        children = outlet;\n      }\n      return /*#__PURE__*/react.createElement(RenderedRoute, {\n        match: match,\n        routeContext: {\n          outlet,\n          matches,\n          isDataRoute: dataRouterState != null\n        },\n        children: children\n      });\n    };\n    // Only wrap in an error boundary within data router usages when we have an\n    // ErrorBoundary/errorElement on this route.  Otherwise let it bubble up to\n    // an ancestor ErrorBoundary/errorElement\n    return dataRouterState && (match.route.ErrorBoundary || match.route.errorElement || index === 0) ? /*#__PURE__*/react.createElement(RenderErrorBoundary, {\n      location: dataRouterState.location,\n      revalidation: dataRouterState.revalidation,\n      component: errorElement,\n      error: error,\n      children: getChildren(),\n      routeContext: {\n        outlet: null,\n        matches,\n        isDataRoute: true\n      }\n    }) : getChildren();\n  }, null);\n}\nvar DataRouterHook = /*#__PURE__*/function (DataRouterHook) {\n  DataRouterHook["UseBlocker"] = "useBlocker";\n  DataRouterHook["UseRevalidator"] = "useRevalidator";\n  DataRouterHook["UseNavigateStable"] = "useNavigate";\n  return DataRouterHook;\n}(DataRouterHook || {});\nvar DataRouterStateHook = /*#__PURE__*/function (DataRouterStateHook) {\n  DataRouterStateHook["UseBlocker"] = "useBlocker";\n  DataRouterStateHook["UseLoaderData"] = "useLoaderData";\n  DataRouterStateHook["UseActionData"] = "useActionData";\n  DataRouterStateHook["UseRouteError"] = "useRouteError";\n  DataRouterStateHook["UseNavigation"] = "useNavigation";\n  DataRouterStateHook["UseRouteLoaderData"] = "useRouteLoaderData";\n  DataRouterStateHook["UseMatches"] = "useMatches";\n  DataRouterStateHook["UseRevalidator"] = "useRevalidator";\n  DataRouterStateHook["UseNavigateStable"] = "useNavigate";\n  DataRouterStateHook["UseRouteId"] = "useRouteId";\n  return DataRouterStateHook;\n}(DataRouterStateHook || {});\nfunction getDataRouterConsoleError(hookName) {\n  return hookName + " must be used within a data router.  See https://reactrouter.com/routers/picking-a-router.";\n}\nfunction useDataRouterContext(hookName) {\n  let ctx = react.useContext(DataRouterContext);\n  !ctx ?  false ? 0 : invariant(false) : void 0;\n  return ctx;\n}\nfunction useDataRouterState(hookName) {\n  let state = react.useContext(DataRouterStateContext);\n  !state ?  false ? 0 : invariant(false) : void 0;\n  return state;\n}\nfunction useRouteContext(hookName) {\n  let route = react.useContext(RouteContext);\n  !route ?  false ? 0 : invariant(false) : void 0;\n  return route;\n}\n\n// Internal version with hookName-aware debugging\nfunction useCurrentRouteId(hookName) {\n  let route = useRouteContext(hookName);\n  let thisRoute = route.matches[route.matches.length - 1];\n  !thisRoute.route.id ?  false ? 0 : invariant(false) : void 0;\n  return thisRoute.route.id;\n}\n\n/**\n * Returns the ID for the nearest contextual route\n */\nfunction useRouteId() {\n  return useCurrentRouteId(DataRouterStateHook.UseRouteId);\n}\n\n/**\n * Returns the current navigation, defaulting to an "idle" navigation when\n * no navigation is in progress\n */\nfunction dist_useNavigation() {\n  let state = useDataRouterState(DataRouterStateHook.UseNavigation);\n  return state.navigation;\n}\n\n/**\n * Returns a revalidate function for manually triggering revalidation, as well\n * as the current state of any manual revalidations\n */\nfunction useRevalidator() {\n  let dataRouterContext = useDataRouterContext(DataRouterHook.UseRevalidator);\n  let state = useDataRouterState(DataRouterStateHook.UseRevalidator);\n  return React.useMemo(() => ({\n    revalidate: dataRouterContext.router.revalidate,\n    state: state.revalidation\n  }), [dataRouterContext.router.revalidate, state.revalidation]);\n}\n\n/**\n * Returns the active route matches, useful for accessing loaderData for\n * parent/child routes or the route "handle" property\n */\nfunction dist_useMatches() {\n  let {\n    matches,\n    loaderData\n  } = useDataRouterState(DataRouterStateHook.UseMatches);\n  return React.useMemo(() => matches.map(m => UNSAFE_convertRouteMatchToUiMatch(m, loaderData)), [matches, loaderData]);\n}\n\n/**\n * Returns the loader data for the nearest ancestor Route loader\n */\nfunction useLoaderData() {\n  let state = useDataRouterState(DataRouterStateHook.UseLoaderData);\n  let routeId = useCurrentRouteId(DataRouterStateHook.UseLoaderData);\n  if (state.errors && state.errors[routeId] != null) {\n    console.error("You cannot `useLoaderData` in an errorElement (routeId: " + routeId + ")");\n    return undefined;\n  }\n  return state.loaderData[routeId];\n}\n\n/**\n * Returns the loaderData for the given routeId\n */\nfunction useRouteLoaderData(routeId) {\n  let state = useDataRouterState(DataRouterStateHook.UseRouteLoaderData);\n  return state.loaderData[routeId];\n}\n\n/**\n * Returns the action data for the nearest ancestor Route action\n */\nfunction useActionData() {\n  let state = useDataRouterState(DataRouterStateHook.UseActionData);\n  let routeId = useCurrentRouteId(DataRouterStateHook.UseLoaderData);\n  return state.actionData ? state.actionData[routeId] : undefined;\n}\n\n/**\n * Returns the nearest ancestor Route error, which could be a loader/action\n * error or a render error.  This is intended to be called from your\n * ErrorBoundary/errorElement to display a proper error message.\n */\nfunction useRouteError() {\n  var _state$errors;\n  let error = react.useContext(RouteErrorContext);\n  let state = useDataRouterState(DataRouterStateHook.UseRouteError);\n  let routeId = useCurrentRouteId(DataRouterStateHook.UseRouteError);\n\n  // If this was a render error, we put it in a RouteError context inside\n  // of RenderErrorBoundary\n  if (error !== undefined) {\n    return error;\n  }\n\n  // Otherwise look for errors from our data router state\n  return (_state$errors = state.errors) == null ? void 0 : _state$errors[routeId];\n}\n\n/**\n * Returns the happy-path data from the nearest ancestor `<Await />` value\n */\nfunction useAsyncValue() {\n  let value = React.useContext(AwaitContext);\n  return value == null ? void 0 : value._data;\n}\n\n/**\n * Returns the error from the nearest ancestor `<Await />` value\n */\nfunction useAsyncError() {\n  let value = React.useContext(AwaitContext);\n  return value == null ? void 0 : value._error;\n}\nlet blockerId = 0;\n\n/**\n * Allow the application to block navigations within the SPA and present the\n * user a confirmation dialog to confirm the navigation.  Mostly used to avoid\n * using half-filled form data.  This does not handle hard-reloads or\n * cross-origin navigations.\n */\nfunction dist_useBlocker(shouldBlock) {\n  let {\n    router,\n    basename\n  } = useDataRouterContext(DataRouterHook.UseBlocker);\n  let state = useDataRouterState(DataRouterStateHook.UseBlocker);\n  let [blockerKey, setBlockerKey] = React.useState("");\n  let blockerFunction = React.useCallback(arg => {\n    if (typeof shouldBlock !== "function") {\n      return !!shouldBlock;\n    }\n    if (basename === "/") {\n      return shouldBlock(arg);\n    }\n\n    // If they provided us a function and we\'ve got an active basename, strip\n    // it from the locations we expose to the user to match the behavior of\n    // useLocation\n    let {\n      currentLocation,\n      nextLocation,\n      historyAction\n    } = arg;\n    return shouldBlock({\n      currentLocation: dist_extends({}, currentLocation, {\n        pathname: stripBasename(currentLocation.pathname, basename) || currentLocation.pathname\n      }),\n      nextLocation: dist_extends({}, nextLocation, {\n        pathname: stripBasename(nextLocation.pathname, basename) || nextLocation.pathname\n      }),\n      historyAction\n    });\n  }, [basename, shouldBlock]);\n\n  // This effect is in charge of blocker key assignment and deletion (which is\n  // tightly coupled to the key)\n  React.useEffect(() => {\n    let key = String(++blockerId);\n    setBlockerKey(key);\n    return () => router.deleteBlocker(key);\n  }, [router]);\n\n  // This effect handles assigning the blockerFunction.  This is to handle\n  // unstable blocker function identities, and happens only after the prior\n  // effect so we don\'t get an orphaned blockerFunction in the router with a\n  // key of "".  Until then we just have the IDLE_BLOCKER.\n  React.useEffect(() => {\n    if (blockerKey !== "") {\n      router.getBlocker(blockerKey, blockerFunction);\n    }\n  }, [router, blockerKey, blockerFunction]);\n\n  // Prefer the blocker from `state` not `router.state` since DataRouterContext\n  // is memoized so this ensures we update on blocker state updates\n  return blockerKey && state.blockers.has(blockerKey) ? state.blockers.get(blockerKey) : IDLE_BLOCKER;\n}\n\n/**\n * Stable version of useNavigate that is used when we are in the context of\n * a RouterProvider.\n */\nfunction useNavigateStable() {\n  let {\n    router\n  } = useDataRouterContext(DataRouterHook.UseNavigateStable);\n  let id = useCurrentRouteId(DataRouterStateHook.UseNavigateStable);\n  let activeRef = react.useRef(false);\n  useIsomorphicLayoutEffect(() => {\n    activeRef.current = true;\n  });\n  let navigate = react.useCallback(function (to, options) {\n    if (options === void 0) {\n      options = {};\n    }\n     false ? 0 : void 0;\n\n    // Short circuit here since if this happens on first render the navigate\n    // is useless because we haven\'t wired up our router subscriber yet\n    if (!activeRef.current) return;\n    if (typeof to === "number") {\n      router.navigate(to);\n    } else {\n      router.navigate(to, dist_extends({\n        fromRouteId: id\n      }, options));\n    }\n  }, [router, id]);\n  return navigate;\n}\nconst alreadyWarned = {};\nfunction warningOnce(key, cond, message) {\n  if (!cond && !alreadyWarned[key]) {\n    alreadyWarned[key] = true;\n     false ? 0 : void 0;\n  }\n}\n\n/**\n  Webpack + React 17 fails to compile on any of the following because webpack\n  complains that `startTransition` doesn\'t exist in `React`:\n  * import { startTransition } from "react"\n  * import * as React from from "react";\n    "startTransition" in React ? React.startTransition(() => setState()) : setState()\n  * import * as React from from "react";\n    "startTransition" in React ? React["startTransition"](() => setState()) : setState()\n\n  Moving it to a constant such as the following solves the Webpack/React 17 issue:\n  * import * as React from from "react";\n    const START_TRANSITION = "startTransition";\n    START_TRANSITION in React ? React[START_TRANSITION](() => setState()) : setState()\n\n  However, that introduces webpack/terser minification issues in production builds\n  in React 18 where minification/obfuscation ends up removing the call of\n  React.startTransition entirely from the first half of the ternary.  Grabbing\n  this exported reference once up front resolves that issue.\n\n  See https://github.com/remix-run/react-router/issues/10579\n*/\nconst START_TRANSITION = "startTransition";\nconst startTransitionImpl = react_namespaceObject[START_TRANSITION];\n\n/**\n * Given a Remix Router instance, render the appropriate UI\n */\nfunction RouterProvider(_ref) {\n  let {\n    fallbackElement,\n    router,\n    future\n  } = _ref;\n  let [state, setStateImpl] = React.useState(router.state);\n  let {\n    v7_startTransition\n  } = future || {};\n  let setState = React.useCallback(newState => {\n    if (v7_startTransition && startTransitionImpl) {\n      startTransitionImpl(() => setStateImpl(newState));\n    } else {\n      setStateImpl(newState);\n    }\n  }, [setStateImpl, v7_startTransition]);\n\n  // Need to use a layout effect here so we are subscribed early enough to\n  // pick up on any render-driven redirects/navigations (useEffect/<Navigate>)\n  React.useLayoutEffect(() => router.subscribe(setState), [router, setState]);\n  React.useEffect(() => {\n     false ? 0 : void 0;\n    // Only log this once on initial mount\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  let navigator = React.useMemo(() => {\n    return {\n      createHref: router.createHref,\n      encodeLocation: router.encodeLocation,\n      go: n => router.navigate(n),\n      push: (to, state, opts) => router.navigate(to, {\n        state,\n        preventScrollReset: opts == null ? void 0 : opts.preventScrollReset\n      }),\n      replace: (to, state, opts) => router.navigate(to, {\n        replace: true,\n        state,\n        preventScrollReset: opts == null ? void 0 : opts.preventScrollReset\n      })\n    };\n  }, [router]);\n  let basename = router.basename || "/";\n  let dataRouterContext = React.useMemo(() => ({\n    router,\n    navigator,\n    static: false,\n    basename\n  }), [router, navigator, basename]);\n\n  // The fragment and {null} here are important!  We need them to keep React 18\'s\n  // useId happy when we are server-rendering since we may have a <script> here\n  // containing the hydrated server-side staticContext (from StaticRouterProvider).\n  // useId relies on the component tree structure to generate deterministic id\'s\n  // so we need to ensure it remains the same on the client even though\n  // we don\'t need the <script> tag\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(DataRouterContext.Provider, {\n    value: dataRouterContext\n  }, /*#__PURE__*/React.createElement(DataRouterStateContext.Provider, {\n    value: state\n  }, /*#__PURE__*/React.createElement(dist_Router, {\n    basename: basename,\n    location: state.location,\n    navigationType: state.historyAction,\n    navigator: navigator,\n    future: {\n      v7_relativeSplatPath: router.future.v7_relativeSplatPath\n    }\n  }, state.initialized || router.future.v7_partialHydration ? /*#__PURE__*/React.createElement(DataRoutes, {\n    routes: router.routes,\n    future: router.future,\n    state: state\n  }) : fallbackElement))), null);\n}\nfunction DataRoutes(_ref2) {\n  let {\n    routes,\n    future,\n    state\n  } = _ref2;\n  return useRoutesImpl(routes, undefined, state, future);\n}\n/**\n * A `<Router>` that stores all entries in memory.\n *\n * @see https://reactrouter.com/router-components/memory-router\n */\nfunction MemoryRouter(_ref3) {\n  let {\n    basename,\n    children,\n    initialEntries,\n    initialIndex,\n    future\n  } = _ref3;\n  let historyRef = React.useRef();\n  if (historyRef.current == null) {\n    historyRef.current = createMemoryHistory({\n      initialEntries,\n      initialIndex,\n      v5Compat: true\n    });\n  }\n  let history = historyRef.current;\n  let [state, setStateImpl] = React.useState({\n    action: history.action,\n    location: history.location\n  });\n  let {\n    v7_startTransition\n  } = future || {};\n  let setState = React.useCallback(newState => {\n    v7_startTransition && startTransitionImpl ? startTransitionImpl(() => setStateImpl(newState)) : setStateImpl(newState);\n  }, [setStateImpl, v7_startTransition]);\n  React.useLayoutEffect(() => history.listen(setState), [history, setState]);\n  return /*#__PURE__*/React.createElement(dist_Router, {\n    basename: basename,\n    children: children,\n    location: state.location,\n    navigationType: state.action,\n    navigator: history,\n    future: future\n  });\n}\n/**\n * Changes the current location.\n *\n * Note: This API is mostly useful in React.Component subclasses that are not\n * able to use hooks. In functional components, we recommend you use the\n * `useNavigate` hook instead.\n *\n * @see https://reactrouter.com/components/navigate\n */\nfunction Navigate(_ref4) {\n  let {\n    to,\n    replace,\n    state,\n    relative\n  } = _ref4;\n  !useInRouterContext() ?  false ? 0 : invariant(false) : void 0;\n  let {\n    future,\n    static: isStatic\n  } = react.useContext(NavigationContext);\n   false ? 0 : void 0;\n  let {\n    matches\n  } = react.useContext(RouteContext);\n  let {\n    pathname: locationPathname\n  } = dist_useLocation();\n  let navigate = dist_useNavigate();\n\n  // Resolve the path outside of the effect so that when effects run twice in\n  // StrictMode they navigate to the same place\n  let path = router_resolveTo(to, getResolveToMatches(matches, future.v7_relativeSplatPath), locationPathname, relative === "path");\n  let jsonPath = JSON.stringify(path);\n  react.useEffect(() => navigate(JSON.parse(jsonPath), {\n    replace,\n    state,\n    relative\n  }), [navigate, jsonPath, relative, replace, state]);\n  return null;\n}\n/**\n * Renders the child route\'s element, if there is one.\n *\n * @see https://reactrouter.com/components/outlet\n */\nfunction Outlet(props) {\n  return useOutlet(props.context);\n}\n/**\n * Declares an element that should be rendered at a certain URL path.\n *\n * @see https://reactrouter.com/components/route\n */\nfunction Route(_props) {\n   false ? 0 : invariant(false);\n}\n/**\n * Provides location context for the rest of the app.\n *\n * Note: You usually won\'t render a `<Router>` directly. Instead, you\'ll render a\n * router that is more specific to your environment such as a `<BrowserRouter>`\n * in web browsers or a `<StaticRouter>` for server rendering.\n *\n * @see https://reactrouter.com/router-components/router\n */\nfunction dist_Router(_ref5) {\n  let {\n    basename: basenameProp = "/",\n    children = null,\n    location: locationProp,\n    navigationType = Action.Pop,\n    navigator,\n    static: staticProp = false,\n    future\n  } = _ref5;\n  !!useInRouterContext() ?  false ? 0 : invariant(false) : void 0;\n\n  // Preserve trailing slashes on basename, so we can let the user control\n  // the enforcement of trailing slashes throughout the app\n  let basename = basenameProp.replace(/^\\/*/, "/");\n  let navigationContext = react.useMemo(() => ({\n    basename,\n    navigator,\n    static: staticProp,\n    future: dist_extends({\n      v7_relativeSplatPath: false\n    }, future)\n  }), [basename, future, navigator, staticProp]);\n  if (typeof locationProp === "string") {\n    locationProp = parsePath(locationProp);\n  }\n  let {\n    pathname = "/",\n    search = "",\n    hash = "",\n    state = null,\n    key = "default"\n  } = locationProp;\n  let locationContext = react.useMemo(() => {\n    let trailingPathname = router_stripBasename(pathname, basename);\n    if (trailingPathname == null) {\n      return null;\n    }\n    return {\n      location: {\n        pathname: trailingPathname,\n        search,\n        hash,\n        state,\n        key\n      },\n      navigationType\n    };\n  }, [basename, pathname, search, hash, state, key, navigationType]);\n   false ? 0 : void 0;\n  if (locationContext == null) {\n    return null;\n  }\n  return /*#__PURE__*/react.createElement(NavigationContext.Provider, {\n    value: navigationContext\n  }, /*#__PURE__*/react.createElement(LocationContext.Provider, {\n    children: children,\n    value: locationContext\n  }));\n}\n/**\n * A container for a nested tree of `<Route>` elements that renders the branch\n * that best matches the current location.\n *\n * @see https://reactrouter.com/components/routes\n */\nfunction Routes(_ref6) {\n  let {\n    children,\n    location\n  } = _ref6;\n  return useRoutes(createRoutesFromChildren(children), location);\n}\n/**\n * Component to use for rendering lazily loaded data from returning defer()\n * in a loader function\n */\nfunction Await(_ref7) {\n  let {\n    children,\n    errorElement,\n    resolve\n  } = _ref7;\n  return /*#__PURE__*/React.createElement(AwaitErrorBoundary, {\n    resolve: resolve,\n    errorElement: errorElement\n  }, /*#__PURE__*/React.createElement(ResolveAwait, null, children));\n}\nvar AwaitRenderStatus = /*#__PURE__*/function (AwaitRenderStatus) {\n  AwaitRenderStatus[AwaitRenderStatus["pending"] = 0] = "pending";\n  AwaitRenderStatus[AwaitRenderStatus["success"] = 1] = "success";\n  AwaitRenderStatus[AwaitRenderStatus["error"] = 2] = "error";\n  return AwaitRenderStatus;\n}(AwaitRenderStatus || {});\nconst neverSettledPromise = new Promise(() => {});\nclass AwaitErrorBoundary extends react.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      error: null\n    };\n  }\n  static getDerivedStateFromError(error) {\n    return {\n      error\n    };\n  }\n  componentDidCatch(error, errorInfo) {\n    console.error("<Await> caught the following error during render", error, errorInfo);\n  }\n  render() {\n    let {\n      children,\n      errorElement,\n      resolve\n    } = this.props;\n    let promise = null;\n    let status = AwaitRenderStatus.pending;\n    if (!(resolve instanceof Promise)) {\n      // Didn\'t get a promise - provide as a resolved promise\n      status = AwaitRenderStatus.success;\n      promise = Promise.resolve();\n      Object.defineProperty(promise, "_tracked", {\n        get: () => true\n      });\n      Object.defineProperty(promise, "_data", {\n        get: () => resolve\n      });\n    } else if (this.state.error) {\n      // Caught a render error, provide it as a rejected promise\n      status = AwaitRenderStatus.error;\n      let renderError = this.state.error;\n      promise = Promise.reject().catch(() => {}); // Avoid unhandled rejection warnings\n      Object.defineProperty(promise, "_tracked", {\n        get: () => true\n      });\n      Object.defineProperty(promise, "_error", {\n        get: () => renderError\n      });\n    } else if (resolve._tracked) {\n      // Already tracked promise - check contents\n      promise = resolve;\n      status = promise._error !== undefined ? AwaitRenderStatus.error : promise._data !== undefined ? AwaitRenderStatus.success : AwaitRenderStatus.pending;\n    } else {\n      // Raw (untracked) promise - track it\n      status = AwaitRenderStatus.pending;\n      Object.defineProperty(resolve, "_tracked", {\n        get: () => true\n      });\n      promise = resolve.then(data => Object.defineProperty(resolve, "_data", {\n        get: () => data\n      }), error => Object.defineProperty(resolve, "_error", {\n        get: () => error\n      }));\n    }\n    if (status === AwaitRenderStatus.error && promise._error instanceof AbortedDeferredError) {\n      // Freeze the UI by throwing a never resolved promise\n      throw neverSettledPromise;\n    }\n    if (status === AwaitRenderStatus.error && !errorElement) {\n      // No errorElement, throw to the nearest route-level error boundary\n      throw promise._error;\n    }\n    if (status === AwaitRenderStatus.error) {\n      // Render via our errorElement\n      return /*#__PURE__*/react.createElement(AwaitContext.Provider, {\n        value: promise,\n        children: errorElement\n      });\n    }\n    if (status === AwaitRenderStatus.success) {\n      // Render children with resolved value\n      return /*#__PURE__*/react.createElement(AwaitContext.Provider, {\n        value: promise,\n        children: children\n      });\n    }\n\n    // Throw to the suspense boundary\n    throw promise;\n  }\n}\n\n/**\n * @private\n * Indirection to leverage useAsyncValue for a render-prop API on `<Await>`\n */\nfunction ResolveAwait(_ref8) {\n  let {\n    children\n  } = _ref8;\n  let data = useAsyncValue();\n  let toRender = typeof children === "function" ? children(data) : children;\n  return /*#__PURE__*/React.createElement(React.Fragment, null, toRender);\n}\n\n///////////////////////////////////////////////////////////////////////////////\n// UTILS\n///////////////////////////////////////////////////////////////////////////////\n\n/**\n * Creates a route config from a React "children" object, which is usually\n * either a `<Route>` element or an array of them. Used internally by\n * `<Routes>` to create a route config from its children.\n *\n * @see https://reactrouter.com/utils/create-routes-from-children\n */\nfunction createRoutesFromChildren(children, parentPath) {\n  if (parentPath === void 0) {\n    parentPath = [];\n  }\n  let routes = [];\n  react.Children.forEach(children, (element, index) => {\n    if (! /*#__PURE__*/react.isValidElement(element)) {\n      // Ignore non-elements. This allows people to more easily inline\n      // conditionals in their route config.\n      return;\n    }\n    let treePath = [...parentPath, index];\n    if (element.type === react.Fragment) {\n      // Transparently support React.Fragment and its children.\n      routes.push.apply(routes, createRoutesFromChildren(element.props.children, treePath));\n      return;\n    }\n    !(element.type === Route) ?  false ? 0 : invariant(false) : void 0;\n    !(!element.props.index || !element.props.children) ?  false ? 0 : invariant(false) : void 0;\n    let route = {\n      id: element.props.id || treePath.join("-"),\n      caseSensitive: element.props.caseSensitive,\n      element: element.props.element,\n      Component: element.props.Component,\n      index: element.props.index,\n      path: element.props.path,\n      loader: element.props.loader,\n      action: element.props.action,\n      errorElement: element.props.errorElement,\n      ErrorBoundary: element.props.ErrorBoundary,\n      hasErrorBoundary: element.props.ErrorBoundary != null || element.props.errorElement != null,\n      shouldRevalidate: element.props.shouldRevalidate,\n      handle: element.props.handle,\n      lazy: element.props.lazy\n    };\n    if (element.props.children) {\n      route.children = createRoutesFromChildren(element.props.children, treePath);\n    }\n    routes.push(route);\n  });\n  return routes;\n}\n\n/**\n * Renders the result of `matchRoutes()` into a React element.\n */\nfunction renderMatches(matches) {\n  return _renderMatches(matches);\n}\nfunction mapRouteProperties(route) {\n  let updates = {\n    // Note: this check also occurs in createRoutesFromChildren so update\n    // there if you change this -- please and thank you!\n    hasErrorBoundary: route.ErrorBoundary != null || route.errorElement != null\n  };\n  if (route.Component) {\n    if (false) {}\n    Object.assign(updates, {\n      element: /*#__PURE__*/React.createElement(route.Component),\n      Component: undefined\n    });\n  }\n  if (route.HydrateFallback) {\n    if (false) {}\n    Object.assign(updates, {\n      hydrateFallbackElement: /*#__PURE__*/React.createElement(route.HydrateFallback),\n      HydrateFallback: undefined\n    });\n  }\n  if (route.ErrorBoundary) {\n    if (false) {}\n    Object.assign(updates, {\n      errorElement: /*#__PURE__*/React.createElement(route.ErrorBoundary),\n      ErrorBoundary: undefined\n    });\n  }\n  return updates;\n}\nfunction createMemoryRouter(routes, opts) {\n  return createRouter({\n    basename: opts == null ? void 0 : opts.basename,\n    future: dist_extends({}, opts == null ? void 0 : opts.future, {\n      v7_prependBasename: true\n    }),\n    history: createMemoryHistory({\n      initialEntries: opts == null ? void 0 : opts.initialEntries,\n      initialIndex: opts == null ? void 0 : opts.initialIndex\n    }),\n    hydrationData: opts == null ? void 0 : opts.hydrationData,\n    routes,\n    mapRouteProperties\n  }).initialize();\n}\n\n;// CONCATENATED MODULE: ./node_modules/react-router-dom/dist/index.js\n/**\n * React Router DOM v6.22.3\n *\n * Copyright (c) Remix Software Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.md file in the root directory of this source tree.\n *\n * @license MIT\n */\n\n\n\n\n\nfunction react_router_dom_dist_extends() {\n  react_router_dom_dist_extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return react_router_dom_dist_extends.apply(this, arguments);\n}\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}\nconst defaultMethod = "get";\nconst defaultEncType = "application/x-www-form-urlencoded";\nfunction isHtmlElement(object) {\n  return object != null && typeof object.tagName === "string";\n}\nfunction isButtonElement(object) {\n  return isHtmlElement(object) && object.tagName.toLowerCase() === "button";\n}\nfunction isFormElement(object) {\n  return isHtmlElement(object) && object.tagName.toLowerCase() === "form";\n}\nfunction isInputElement(object) {\n  return isHtmlElement(object) && object.tagName.toLowerCase() === "input";\n}\nfunction isModifiedEvent(event) {\n  return !!(event.metaKey || event.altKey || event.ctrlKey || event.shiftKey);\n}\nfunction shouldProcessLinkClick(event, target) {\n  return event.button === 0 && (\n  // Ignore everything but left clicks\n  !target || target === "_self") &&\n  // Let browser handle "target=_blank" etc.\n  !isModifiedEvent(event) // Ignore clicks with modifier keys\n  ;\n}\n/**\n * Creates a URLSearchParams object using the given initializer.\n *\n * This is identical to `new URLSearchParams(init)` except it also\n * supports arrays as values in the object form of the initializer\n * instead of just strings. This is convenient when you need multiple\n * values for a given key, but don\'t want to use an array initializer.\n *\n * For example, instead of:\n *\n *   let searchParams = new URLSearchParams([\n *     [\'sort\', \'name\'],\n *     [\'sort\', \'price\']\n *   ]);\n *\n * you can do:\n *\n *   let searchParams = createSearchParams({\n *     sort: [\'name\', \'price\']\n *   });\n */\nfunction createSearchParams(init) {\n  if (init === void 0) {\n    init = "";\n  }\n  return new URLSearchParams(typeof init === "string" || Array.isArray(init) || init instanceof URLSearchParams ? init : Object.keys(init).reduce((memo, key) => {\n    let value = init[key];\n    return memo.concat(Array.isArray(value) ? value.map(v => [key, v]) : [[key, value]]);\n  }, []));\n}\nfunction getSearchParamsForLocation(locationSearch, defaultSearchParams) {\n  let searchParams = createSearchParams(locationSearch);\n  if (defaultSearchParams) {\n    // Use `defaultSearchParams.forEach(...)` here instead of iterating of\n    // `defaultSearchParams.keys()` to work-around a bug in Firefox related to\n    // web extensions. Relevant Bugzilla tickets:\n    // https://bugzilla.mozilla.org/show_bug.cgi?id=1414602\n    // https://bugzilla.mozilla.org/show_bug.cgi?id=1023984\n    defaultSearchParams.forEach((_, key) => {\n      if (!searchParams.has(key)) {\n        defaultSearchParams.getAll(key).forEach(value => {\n          searchParams.append(key, value);\n        });\n      }\n    });\n  }\n  return searchParams;\n}\n// One-time check for submitter support\nlet _formDataSupportsSubmitter = null;\nfunction isFormDataSubmitterSupported() {\n  if (_formDataSupportsSubmitter === null) {\n    try {\n      new FormData(document.createElement("form"),\n      // @ts-expect-error if FormData supports the submitter parameter, this will throw\n      0);\n      _formDataSupportsSubmitter = false;\n    } catch (e) {\n      _formDataSupportsSubmitter = true;\n    }\n  }\n  return _formDataSupportsSubmitter;\n}\nconst supportedFormEncTypes = new Set(["application/x-www-form-urlencoded", "multipart/form-data", "text/plain"]);\nfunction getFormEncType(encType) {\n  if (encType != null && !supportedFormEncTypes.has(encType)) {\n     false ? 0 : void 0;\n    return null;\n  }\n  return encType;\n}\nfunction getFormSubmissionInfo(target, basename) {\n  let method;\n  let action;\n  let encType;\n  let formData;\n  let body;\n  if (isFormElement(target)) {\n    // When grabbing the action from the element, it will have had the basename\n    // prefixed to ensure non-JS scenarios work, so strip it since we\'ll\n    // re-prefix in the router\n    let attr = target.getAttribute("action");\n    action = attr ? stripBasename(attr, basename) : null;\n    method = target.getAttribute("method") || defaultMethod;\n    encType = getFormEncType(target.getAttribute("enctype")) || defaultEncType;\n    formData = new FormData(target);\n  } else if (isButtonElement(target) || isInputElement(target) && (target.type === "submit" || target.type === "image")) {\n    let form = target.form;\n    if (form == null) {\n      throw new Error("Cannot submit a <button> or <input type=\\"submit\\"> without a <form>");\n    }\n    // <button>/<input type="submit"> may override attributes of <form>\n    // When grabbing the action from the element, it will have had the basename\n    // prefixed to ensure non-JS scenarios work, so strip it since we\'ll\n    // re-prefix in the router\n    let attr = target.getAttribute("formaction") || form.getAttribute("action");\n    action = attr ? stripBasename(attr, basename) : null;\n    method = target.getAttribute("formmethod") || form.getAttribute("method") || defaultMethod;\n    encType = getFormEncType(target.getAttribute("formenctype")) || getFormEncType(form.getAttribute("enctype")) || defaultEncType;\n    // Build a FormData object populated from a form and submitter\n    formData = new FormData(form, target);\n    // If this browser doesn\'t support the `FormData(el, submitter)` format,\n    // then tack on the submitter value at the end.  This is a lightweight\n    // solution that is not 100% spec compliant.  For complete support in older\n    // browsers, consider using the `formdata-submitter-polyfill` package\n    if (!isFormDataSubmitterSupported()) {\n      let {\n        name,\n        type,\n        value\n      } = target;\n      if (type === "image") {\n        let prefix = name ? name + "." : "";\n        formData.append(prefix + "x", "0");\n        formData.append(prefix + "y", "0");\n      } else if (name) {\n        formData.append(name, value);\n      }\n    }\n  } else if (isHtmlElement(target)) {\n    throw new Error("Cannot submit element that is not <form>, <button>, or " + "<input type=\\"submit|image\\">");\n  } else {\n    method = defaultMethod;\n    action = null;\n    encType = defaultEncType;\n    body = target;\n  }\n  // Send body for <Form encType="text/plain" so we encode it into text\n  if (formData && encType === "text/plain") {\n    body = formData;\n    formData = undefined;\n  }\n  return {\n    action,\n    method: method.toLowerCase(),\n    encType,\n    formData,\n    body\n  };\n}\nconst _excluded = (/* unused pure expression or super */ null && (["onClick", "relative", "reloadDocument", "replace", "state", "target", "to", "preventScrollReset", "unstable_viewTransition"])),\n  _excluded2 = (/* unused pure expression or super */ null && (["aria-current", "caseSensitive", "className", "end", "style", "to", "unstable_viewTransition", "children"])),\n  _excluded3 = (/* unused pure expression or super */ null && (["fetcherKey", "navigate", "reloadDocument", "replace", "state", "method", "action", "onSubmit", "relative", "preventScrollReset", "unstable_viewTransition"]));\n// HEY YOU! DON\'T TOUCH THIS VARIABLE!\n//\n// It is replaced with the proper version at build time via a babel plugin in\n// the rollup config.\n//\n// Export a global property onto the window for React Router detection by the\n// Core Web Vitals Technology Report.  This way they can configure the `wappalyzer`\n// to detect and properly classify live websites as being built with React Router:\n// https://github.com/HTTPArchive/wappalyzer/blob/main/src/technologies/r.json\nconst REACT_ROUTER_VERSION = "6";\ntry {\n  window.__reactRouterVersion = REACT_ROUTER_VERSION;\n} catch (e) {\n  // no-op\n}\nfunction createBrowserRouter(routes, opts) {\n  return createRouter({\n    basename: opts == null ? void 0 : opts.basename,\n    future: react_router_dom_dist_extends({}, opts == null ? void 0 : opts.future, {\n      v7_prependBasename: true\n    }),\n    history: createBrowserHistory({\n      window: opts == null ? void 0 : opts.window\n    }),\n    hydrationData: (opts == null ? void 0 : opts.hydrationData) || parseHydrationData(),\n    routes,\n    mapRouteProperties: UNSAFE_mapRouteProperties,\n    window: opts == null ? void 0 : opts.window\n  }).initialize();\n}\nfunction createHashRouter(routes, opts) {\n  return createRouter({\n    basename: opts == null ? void 0 : opts.basename,\n    future: react_router_dom_dist_extends({}, opts == null ? void 0 : opts.future, {\n      v7_prependBasename: true\n    }),\n    history: createHashHistory({\n      window: opts == null ? void 0 : opts.window\n    }),\n    hydrationData: (opts == null ? void 0 : opts.hydrationData) || parseHydrationData(),\n    routes,\n    mapRouteProperties: UNSAFE_mapRouteProperties,\n    window: opts == null ? void 0 : opts.window\n  }).initialize();\n}\nfunction parseHydrationData() {\n  var _window;\n  let state = (_window = window) == null ? void 0 : _window.__staticRouterHydrationData;\n  if (state && state.errors) {\n    state = react_router_dom_dist_extends({}, state, {\n      errors: deserializeErrors(state.errors)\n    });\n  }\n  return state;\n}\nfunction deserializeErrors(errors) {\n  if (!errors) return null;\n  let entries = Object.entries(errors);\n  let serialized = {};\n  for (let [key, val] of entries) {\n    // Hey you!  If you change this, please change the corresponding logic in\n    // serializeErrors in react-router-dom/server.tsx :)\n    if (val && val.__type === "RouteErrorResponse") {\n      serialized[key] = new UNSAFE_ErrorResponseImpl(val.status, val.statusText, val.data, val.internal === true);\n    } else if (val && val.__type === "Error") {\n      // Attempt to reconstruct the right type of Error (i.e., ReferenceError)\n      if (val.__subType) {\n        let ErrorConstructor = window[val.__subType];\n        if (typeof ErrorConstructor === "function") {\n          try {\n            // @ts-expect-error\n            let error = new ErrorConstructor(val.message);\n            // Wipe away the client-side stack trace.  Nothing to fill it in with\n            // because we don\'t serialize SSR stack traces for security reasons\n            error.stack = "";\n            serialized[key] = error;\n          } catch (e) {\n            // no-op - fall through and create a normal Error\n          }\n        }\n      }\n      if (serialized[key] == null) {\n        let error = new Error(val.message);\n        // Wipe away the client-side stack trace.  Nothing to fill it in with\n        // because we don\'t serialize SSR stack traces for security reasons\n        error.stack = "";\n        serialized[key] = error;\n      }\n    } else {\n      serialized[key] = val;\n    }\n  }\n  return serialized;\n}\nconst ViewTransitionContext = /*#__PURE__*/react.createContext({\n  isTransitioning: false\n});\nif (false) {}\nconst FetchersContext = /*#__PURE__*/react.createContext(new Map());\nif (false) {}\n//#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region Components\n////////////////////////////////////////////////////////////////////////////////\n/**\n  Webpack + React 17 fails to compile on any of the following because webpack\n  complains that `startTransition` doesn\'t exist in `React`:\n  * import { startTransition } from "react"\n  * import * as React from from "react";\n    "startTransition" in React ? React.startTransition(() => setState()) : setState()\n  * import * as React from from "react";\n    "startTransition" in React ? React["startTransition"](() => setState()) : setState()\n\n  Moving it to a constant such as the following solves the Webpack/React 17 issue:\n  * import * as React from from "react";\n    const START_TRANSITION = "startTransition";\n    START_TRANSITION in React ? React[START_TRANSITION](() => setState()) : setState()\n\n  However, that introduces webpack/terser minification issues in production builds\n  in React 18 where minification/obfuscation ends up removing the call of\n  React.startTransition entirely from the first half of the ternary.  Grabbing\n  this exported reference once up front resolves that issue.\n\n  See https://github.com/remix-run/react-router/issues/10579\n*/\nconst dist_START_TRANSITION = "startTransition";\nconst dist_startTransitionImpl = react_namespaceObject[dist_START_TRANSITION];\nconst FLUSH_SYNC = "flushSync";\nconst flushSyncImpl = react_dom_namespaceObject[FLUSH_SYNC];\nconst USE_ID = "useId";\nconst useIdImpl = react_namespaceObject[USE_ID];\nfunction startTransitionSafe(cb) {\n  if (dist_startTransitionImpl) {\n    dist_startTransitionImpl(cb);\n  } else {\n    cb();\n  }\n}\nfunction flushSyncSafe(cb) {\n  if (flushSyncImpl) {\n    flushSyncImpl(cb);\n  } else {\n    cb();\n  }\n}\nclass Deferred {\n  constructor() {\n    this.status = "pending";\n    this.promise = new Promise((resolve, reject) => {\n      this.resolve = value => {\n        if (this.status === "pending") {\n          this.status = "resolved";\n          resolve(value);\n        }\n      };\n      this.reject = reason => {\n        if (this.status === "pending") {\n          this.status = "rejected";\n          reject(reason);\n        }\n      };\n    });\n  }\n}\n/**\n * Given a Remix Router instance, render the appropriate UI\n */\nfunction dist_RouterProvider(_ref) {\n  let {\n    fallbackElement,\n    router,\n    future\n  } = _ref;\n  let [state, setStateImpl] = React.useState(router.state);\n  let [pendingState, setPendingState] = React.useState();\n  let [vtContext, setVtContext] = React.useState({\n    isTransitioning: false\n  });\n  let [renderDfd, setRenderDfd] = React.useState();\n  let [transition, setTransition] = React.useState();\n  let [interruption, setInterruption] = React.useState();\n  let fetcherData = React.useRef(new Map());\n  let {\n    v7_startTransition\n  } = future || {};\n  let optInStartTransition = React.useCallback(cb => {\n    if (v7_startTransition) {\n      startTransitionSafe(cb);\n    } else {\n      cb();\n    }\n  }, [v7_startTransition]);\n  let setState = React.useCallback((newState, _ref2) => {\n    let {\n      deletedFetchers,\n      unstable_flushSync: flushSync,\n      unstable_viewTransitionOpts: viewTransitionOpts\n    } = _ref2;\n    deletedFetchers.forEach(key => fetcherData.current.delete(key));\n    newState.fetchers.forEach((fetcher, key) => {\n      if (fetcher.data !== undefined) {\n        fetcherData.current.set(key, fetcher.data);\n      }\n    });\n    let isViewTransitionUnavailable = router.window == null || typeof router.window.document.startViewTransition !== "function";\n    // If this isn\'t a view transition or it\'s not available in this browser,\n    // just update and be done with it\n    if (!viewTransitionOpts || isViewTransitionUnavailable) {\n      if (flushSync) {\n        flushSyncSafe(() => setStateImpl(newState));\n      } else {\n        optInStartTransition(() => setStateImpl(newState));\n      }\n      return;\n    }\n    // flushSync + startViewTransition\n    if (flushSync) {\n      // Flush through the context to mark DOM elements as transition=ing\n      flushSyncSafe(() => {\n        // Cancel any pending transitions\n        if (transition) {\n          renderDfd && renderDfd.resolve();\n          transition.skipTransition();\n        }\n        setVtContext({\n          isTransitioning: true,\n          flushSync: true,\n          currentLocation: viewTransitionOpts.currentLocation,\n          nextLocation: viewTransitionOpts.nextLocation\n        });\n      });\n      // Update the DOM\n      let t = router.window.document.startViewTransition(() => {\n        flushSyncSafe(() => setStateImpl(newState));\n      });\n      // Clean up after the animation completes\n      t.finished.finally(() => {\n        flushSyncSafe(() => {\n          setRenderDfd(undefined);\n          setTransition(undefined);\n          setPendingState(undefined);\n          setVtContext({\n            isTransitioning: false\n          });\n        });\n      });\n      flushSyncSafe(() => setTransition(t));\n      return;\n    }\n    // startTransition + startViewTransition\n    if (transition) {\n      // Interrupting an in-progress transition, cancel and let everything flush\n      // out, and then kick off a new transition from the interruption state\n      renderDfd && renderDfd.resolve();\n      transition.skipTransition();\n      setInterruption({\n        state: newState,\n        currentLocation: viewTransitionOpts.currentLocation,\n        nextLocation: viewTransitionOpts.nextLocation\n      });\n    } else {\n      // Completed navigation update with opted-in view transitions, let \'er rip\n      setPendingState(newState);\n      setVtContext({\n        isTransitioning: true,\n        flushSync: false,\n        currentLocation: viewTransitionOpts.currentLocation,\n        nextLocation: viewTransitionOpts.nextLocation\n      });\n    }\n  }, [router.window, transition, renderDfd, fetcherData, optInStartTransition]);\n  // Need to use a layout effect here so we are subscribed early enough to\n  // pick up on any render-driven redirects/navigations (useEffect/<Navigate>)\n  React.useLayoutEffect(() => router.subscribe(setState), [router, setState]);\n  // When we start a view transition, create a Deferred we can use for the\n  // eventual "completed" render\n  React.useEffect(() => {\n    if (vtContext.isTransitioning && !vtContext.flushSync) {\n      setRenderDfd(new Deferred());\n    }\n  }, [vtContext]);\n  // Once the deferred is created, kick off startViewTransition() to update the\n  // DOM and then wait on the Deferred to resolve (indicating the DOM update has\n  // happened)\n  React.useEffect(() => {\n    if (renderDfd && pendingState && router.window) {\n      let newState = pendingState;\n      let renderPromise = renderDfd.promise;\n      let transition = router.window.document.startViewTransition(async () => {\n        optInStartTransition(() => setStateImpl(newState));\n        await renderPromise;\n      });\n      transition.finished.finally(() => {\n        setRenderDfd(undefined);\n        setTransition(undefined);\n        setPendingState(undefined);\n        setVtContext({\n          isTransitioning: false\n        });\n      });\n      setTransition(transition);\n    }\n  }, [optInStartTransition, pendingState, renderDfd, router.window]);\n  // When the new location finally renders and is committed to the DOM, this\n  // effect will run to resolve the transition\n  React.useEffect(() => {\n    if (renderDfd && pendingState && state.location.key === pendingState.location.key) {\n      renderDfd.resolve();\n    }\n  }, [renderDfd, transition, state.location, pendingState]);\n  // If we get interrupted with a new navigation during a transition, we skip\n  // the active transition, let it cleanup, then kick it off again here\n  React.useEffect(() => {\n    if (!vtContext.isTransitioning && interruption) {\n      setPendingState(interruption.state);\n      setVtContext({\n        isTransitioning: true,\n        flushSync: false,\n        currentLocation: interruption.currentLocation,\n        nextLocation: interruption.nextLocation\n      });\n      setInterruption(undefined);\n    }\n  }, [vtContext.isTransitioning, interruption]);\n  React.useEffect(() => {\n     false ? 0 : void 0;\n    // Only log this once on initial mount\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  let navigator = React.useMemo(() => {\n    return {\n      createHref: router.createHref,\n      encodeLocation: router.encodeLocation,\n      go: n => router.navigate(n),\n      push: (to, state, opts) => router.navigate(to, {\n        state,\n        preventScrollReset: opts == null ? void 0 : opts.preventScrollReset\n      }),\n      replace: (to, state, opts) => router.navigate(to, {\n        replace: true,\n        state,\n        preventScrollReset: opts == null ? void 0 : opts.preventScrollReset\n      })\n    };\n  }, [router]);\n  let basename = router.basename || "/";\n  let dataRouterContext = React.useMemo(() => ({\n    router,\n    navigator,\n    static: false,\n    basename\n  }), [router, navigator, basename]);\n  // The fragment and {null} here are important!  We need them to keep React 18\'s\n  // useId happy when we are server-rendering since we may have a <script> here\n  // containing the hydrated server-side staticContext (from StaticRouterProvider).\n  // useId relies on the component tree structure to generate deterministic id\'s\n  // so we need to ensure it remains the same on the client even though\n  // we don\'t need the <script> tag\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(UNSAFE_DataRouterContext.Provider, {\n    value: dataRouterContext\n  }, /*#__PURE__*/React.createElement(UNSAFE_DataRouterStateContext.Provider, {\n    value: state\n  }, /*#__PURE__*/React.createElement(FetchersContext.Provider, {\n    value: fetcherData.current\n  }, /*#__PURE__*/React.createElement(ViewTransitionContext.Provider, {\n    value: vtContext\n  }, /*#__PURE__*/React.createElement(Router, {\n    basename: basename,\n    location: state.location,\n    navigationType: state.historyAction,\n    navigator: navigator,\n    future: {\n      v7_relativeSplatPath: router.future.v7_relativeSplatPath\n    }\n  }, state.initialized || router.future.v7_partialHydration ? /*#__PURE__*/React.createElement(dist_DataRoutes, {\n    routes: router.routes,\n    future: router.future,\n    state: state\n  }) : fallbackElement))))), null);\n}\nfunction dist_DataRoutes(_ref3) {\n  let {\n    routes,\n    future,\n    state\n  } = _ref3;\n  return UNSAFE_useRoutesImpl(routes, undefined, state, future);\n}\n/**\n * A `<Router>` for use in web browsers. Provides the cleanest URLs.\n */\nfunction BrowserRouter(_ref4) {\n  let {\n    basename,\n    children,\n    future,\n    window\n  } = _ref4;\n  let historyRef = React.useRef();\n  if (historyRef.current == null) {\n    historyRef.current = createBrowserHistory({\n      window,\n      v5Compat: true\n    });\n  }\n  let history = historyRef.current;\n  let [state, setStateImpl] = React.useState({\n    action: history.action,\n    location: history.location\n  });\n  let {\n    v7_startTransition\n  } = future || {};\n  let setState = React.useCallback(newState => {\n    v7_startTransition && dist_startTransitionImpl ? dist_startTransitionImpl(() => setStateImpl(newState)) : setStateImpl(newState);\n  }, [setStateImpl, v7_startTransition]);\n  React.useLayoutEffect(() => history.listen(setState), [history, setState]);\n  return /*#__PURE__*/React.createElement(Router, {\n    basename: basename,\n    children: children,\n    location: state.location,\n    navigationType: state.action,\n    navigator: history,\n    future: future\n  });\n}\n/**\n * A `<Router>` for use in web browsers. Stores the location in the hash\n * portion of the URL so it is not sent to the server.\n */\nfunction HashRouter(_ref5) {\n  let {\n    basename,\n    children,\n    future,\n    window\n  } = _ref5;\n  let historyRef = react.useRef();\n  if (historyRef.current == null) {\n    historyRef.current = router_createHashHistory({\n      window,\n      v5Compat: true\n    });\n  }\n  let history = historyRef.current;\n  let [state, setStateImpl] = react.useState({\n    action: history.action,\n    location: history.location\n  });\n  let {\n    v7_startTransition\n  } = future || {};\n  let setState = react.useCallback(newState => {\n    v7_startTransition && dist_startTransitionImpl ? dist_startTransitionImpl(() => setStateImpl(newState)) : setStateImpl(newState);\n  }, [setStateImpl, v7_startTransition]);\n  react.useLayoutEffect(() => history.listen(setState), [history, setState]);\n  return /*#__PURE__*/react.createElement(dist_Router, {\n    basename: basename,\n    children: children,\n    location: state.location,\n    navigationType: state.action,\n    navigator: history,\n    future: future\n  });\n}\n/**\n * A `<Router>` that accepts a pre-instantiated history object. It\'s important\n * to note that using your own history object is highly discouraged and may add\n * two versions of the history library to your bundles unless you use the same\n * version of the history library that React Router uses internally.\n */\nfunction HistoryRouter(_ref6) {\n  let {\n    basename,\n    children,\n    future,\n    history\n  } = _ref6;\n  let [state, setStateImpl] = React.useState({\n    action: history.action,\n    location: history.location\n  });\n  let {\n    v7_startTransition\n  } = future || {};\n  let setState = React.useCallback(newState => {\n    v7_startTransition && dist_startTransitionImpl ? dist_startTransitionImpl(() => setStateImpl(newState)) : setStateImpl(newState);\n  }, [setStateImpl, v7_startTransition]);\n  React.useLayoutEffect(() => history.listen(setState), [history, setState]);\n  return /*#__PURE__*/React.createElement(Router, {\n    basename: basename,\n    children: children,\n    location: state.location,\n    navigationType: state.action,\n    navigator: history,\n    future: future\n  });\n}\nif (false) {}\nconst isBrowser = typeof window !== "undefined" && typeof window.document !== "undefined" && typeof window.document.createElement !== "undefined";\nconst dist_ABSOLUTE_URL_REGEX = /^(?:[a-z][a-z0-9+.-]*:|\\/\\/)/i;\n/**\n * The public API for rendering a history-aware `<a>`.\n */\nconst Link = /*#__PURE__*/(/* unused pure expression or super */ null && (React.forwardRef(function LinkWithRef(_ref7, ref) {\n  let {\n      onClick,\n      relative,\n      reloadDocument,\n      replace,\n      state,\n      target,\n      to,\n      preventScrollReset,\n      unstable_viewTransition\n    } = _ref7,\n    rest = _objectWithoutPropertiesLoose(_ref7, _excluded);\n  let {\n    basename\n  } = React.useContext(UNSAFE_NavigationContext);\n  // Rendered into <a href> for absolute URLs\n  let absoluteHref;\n  let isExternal = false;\n  if (typeof to === "string" && dist_ABSOLUTE_URL_REGEX.test(to)) {\n    // Render the absolute href server- and client-side\n    absoluteHref = to;\n    // Only check for external origins client-side\n    if (isBrowser) {\n      try {\n        let currentUrl = new URL(window.location.href);\n        let targetUrl = to.startsWith("//") ? new URL(currentUrl.protocol + to) : new URL(to);\n        let path = stripBasename(targetUrl.pathname, basename);\n        if (targetUrl.origin === currentUrl.origin && path != null) {\n          // Strip the protocol/origin/basename for same-origin absolute URLs\n          to = path + targetUrl.search + targetUrl.hash;\n        } else {\n          isExternal = true;\n        }\n      } catch (e) {\n        // We can\'t do external URL detection without a valid URL\n         false ? 0 : void 0;\n      }\n    }\n  }\n  // Rendered into <a href> for relative URLs\n  let href = useHref(to, {\n    relative\n  });\n  let internalOnClick = useLinkClickHandler(to, {\n    replace,\n    state,\n    target,\n    preventScrollReset,\n    relative,\n    unstable_viewTransition\n  });\n  function handleClick(event) {\n    if (onClick) onClick(event);\n    if (!event.defaultPrevented) {\n      internalOnClick(event);\n    }\n  }\n  return /*#__PURE__*/(\n    // eslint-disable-next-line jsx-a11y/anchor-has-content\n    React.createElement("a", react_router_dom_dist_extends({}, rest, {\n      href: absoluteHref || href,\n      onClick: isExternal || reloadDocument ? onClick : handleClick,\n      ref: ref,\n      target: target\n    }))\n  );\n})));\nif (false) {}\n/**\n * A `<Link>` wrapper that knows if it\'s "active" or not.\n */\nconst NavLink = /*#__PURE__*/(/* unused pure expression or super */ null && (React.forwardRef(function NavLinkWithRef(_ref8, ref) {\n  let {\n      "aria-current": ariaCurrentProp = "page",\n      caseSensitive = false,\n      className: classNameProp = "",\n      end = false,\n      style: styleProp,\n      to,\n      unstable_viewTransition,\n      children\n    } = _ref8,\n    rest = _objectWithoutPropertiesLoose(_ref8, _excluded2);\n  let path = useResolvedPath(to, {\n    relative: rest.relative\n  });\n  let location = useLocation();\n  let routerState = React.useContext(UNSAFE_DataRouterStateContext);\n  let {\n    navigator,\n    basename\n  } = React.useContext(UNSAFE_NavigationContext);\n  let isTransitioning = routerState != null &&\n  // Conditional usage is OK here because the usage of a data router is static\n  // eslint-disable-next-line react-hooks/rules-of-hooks\n  useViewTransitionState(path) && unstable_viewTransition === true;\n  let toPathname = navigator.encodeLocation ? navigator.encodeLocation(path).pathname : path.pathname;\n  let locationPathname = location.pathname;\n  let nextLocationPathname = routerState && routerState.navigation && routerState.navigation.location ? routerState.navigation.location.pathname : null;\n  if (!caseSensitive) {\n    locationPathname = locationPathname.toLowerCase();\n    nextLocationPathname = nextLocationPathname ? nextLocationPathname.toLowerCase() : null;\n    toPathname = toPathname.toLowerCase();\n  }\n  if (nextLocationPathname && basename) {\n    nextLocationPathname = stripBasename(nextLocationPathname, basename) || nextLocationPathname;\n  }\n  // If the `to` has a trailing slash, look at that exact spot.  Otherwise,\n  // we\'re looking for a slash _after_ what\'s in `to`.  For example:\n  //\n  // <NavLink to="/users"> and <NavLink to="/users/">\n  // both want to look for a / at index 6 to match URL `/users/matt`\n  const endSlashPosition = toPathname !== "/" && toPathname.endsWith("/") ? toPathname.length - 1 : toPathname.length;\n  let isActive = locationPathname === toPathname || !end && locationPathname.startsWith(toPathname) && locationPathname.charAt(endSlashPosition) === "/";\n  let isPending = nextLocationPathname != null && (nextLocationPathname === toPathname || !end && nextLocationPathname.startsWith(toPathname) && nextLocationPathname.charAt(toPathname.length) === "/");\n  let renderProps = {\n    isActive,\n    isPending,\n    isTransitioning\n  };\n  let ariaCurrent = isActive ? ariaCurrentProp : undefined;\n  let className;\n  if (typeof classNameProp === "function") {\n    className = classNameProp(renderProps);\n  } else {\n    // If the className prop is not a function, we use a default `active`\n    // class for <NavLink />s that are active. In v5 `active` was the default\n    // value for `activeClassName`, but we are removing that API and can still\n    // use the old default behavior for a cleaner upgrade path and keep the\n    // simple styling rules working as they currently do.\n    className = [classNameProp, isActive ? "active" : null, isPending ? "pending" : null, isTransitioning ? "transitioning" : null].filter(Boolean).join(" ");\n  }\n  let style = typeof styleProp === "function" ? styleProp(renderProps) : styleProp;\n  return /*#__PURE__*/React.createElement(Link, react_router_dom_dist_extends({}, rest, {\n    "aria-current": ariaCurrent,\n    className: className,\n    ref: ref,\n    style: style,\n    to: to,\n    unstable_viewTransition: unstable_viewTransition\n  }), typeof children === "function" ? children(renderProps) : children);\n})));\nif (false) {}\n/**\n * A `@remix-run/router`-aware `<form>`. It behaves like a normal form except\n * that the interaction with the server is with `fetch` instead of new document\n * requests, allowing components to add nicer UX to the page as the form is\n * submitted and returns with data.\n */\nconst Form = /*#__PURE__*/(/* unused pure expression or super */ null && (React.forwardRef((_ref9, forwardedRef) => {\n  let {\n      fetcherKey,\n      navigate,\n      reloadDocument,\n      replace,\n      state,\n      method = defaultMethod,\n      action,\n      onSubmit,\n      relative,\n      preventScrollReset,\n      unstable_viewTransition\n    } = _ref9,\n    props = _objectWithoutPropertiesLoose(_ref9, _excluded3);\n  let submit = useSubmit();\n  let formAction = useFormAction(action, {\n    relative\n  });\n  let formMethod = method.toLowerCase() === "get" ? "get" : "post";\n  let submitHandler = event => {\n    onSubmit && onSubmit(event);\n    if (event.defaultPrevented) return;\n    event.preventDefault();\n    let submitter = event.nativeEvent.submitter;\n    let submitMethod = (submitter == null ? void 0 : submitter.getAttribute("formmethod")) || method;\n    submit(submitter || event.currentTarget, {\n      fetcherKey,\n      method: submitMethod,\n      navigate,\n      replace,\n      state,\n      relative,\n      preventScrollReset,\n      unstable_viewTransition\n    });\n  };\n  return /*#__PURE__*/React.createElement("form", react_router_dom_dist_extends({\n    ref: forwardedRef,\n    method: formMethod,\n    action: formAction,\n    onSubmit: reloadDocument ? onSubmit : submitHandler\n  }, props));\n})));\nif (false) {}\n/**\n * This component will emulate the browser\'s scroll restoration on location\n * changes.\n */\nfunction ScrollRestoration(_ref10) {\n  let {\n    getKey,\n    storageKey\n  } = _ref10;\n  useScrollRestoration({\n    getKey,\n    storageKey\n  });\n  return null;\n}\nif (false) {}\n//#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region Hooks\n////////////////////////////////////////////////////////////////////////////////\nvar dist_DataRouterHook;\n(function (DataRouterHook) {\n  DataRouterHook["UseScrollRestoration"] = "useScrollRestoration";\n  DataRouterHook["UseSubmit"] = "useSubmit";\n  DataRouterHook["UseSubmitFetcher"] = "useSubmitFetcher";\n  DataRouterHook["UseFetcher"] = "useFetcher";\n  DataRouterHook["useViewTransitionState"] = "useViewTransitionState";\n})(dist_DataRouterHook || (dist_DataRouterHook = {}));\nvar dist_DataRouterStateHook;\n(function (DataRouterStateHook) {\n  DataRouterStateHook["UseFetcher"] = "useFetcher";\n  DataRouterStateHook["UseFetchers"] = "useFetchers";\n  DataRouterStateHook["UseScrollRestoration"] = "useScrollRestoration";\n})(dist_DataRouterStateHook || (dist_DataRouterStateHook = {}));\n// Internal hooks\nfunction dist_getDataRouterConsoleError(hookName) {\n  return hookName + " must be used within a data router.  See https://reactrouter.com/routers/picking-a-router.";\n}\nfunction dist_useDataRouterContext(hookName) {\n  let ctx = React.useContext(UNSAFE_DataRouterContext);\n  !ctx ?  false ? 0 : UNSAFE_invariant(false) : void 0;\n  return ctx;\n}\nfunction dist_useDataRouterState(hookName) {\n  let state = React.useContext(UNSAFE_DataRouterStateContext);\n  !state ?  false ? 0 : UNSAFE_invariant(false) : void 0;\n  return state;\n}\n// External hooks\n/**\n * Handles the click behavior for router `<Link>` components. This is useful if\n * you need to create custom `<Link>` components with the same click behavior we\n * use in our exported `<Link>`.\n */\nfunction useLinkClickHandler(to, _temp) {\n  let {\n    target,\n    replace: replaceProp,\n    state,\n    preventScrollReset,\n    relative,\n    unstable_viewTransition\n  } = _temp === void 0 ? {} : _temp;\n  let navigate = useNavigate();\n  let location = useLocation();\n  let path = useResolvedPath(to, {\n    relative\n  });\n  return React.useCallback(event => {\n    if (shouldProcessLinkClick(event, target)) {\n      event.preventDefault();\n      // If the URL hasn\'t changed, a regular <a> will do a replace instead of\n      // a push, so do the same here unless the replace prop is explicitly set\n      let replace = replaceProp !== undefined ? replaceProp : createPath(location) === createPath(path);\n      navigate(to, {\n        replace,\n        state,\n        preventScrollReset,\n        relative,\n        unstable_viewTransition\n      });\n    }\n  }, [location, navigate, path, replaceProp, state, target, to, preventScrollReset, relative, unstable_viewTransition]);\n}\n/**\n * A convenient wrapper for reading and writing search parameters via the\n * URLSearchParams interface.\n */\nfunction useSearchParams(defaultInit) {\n   false ? 0 : void 0;\n  let defaultSearchParamsRef = React.useRef(createSearchParams(defaultInit));\n  let hasSetSearchParamsRef = React.useRef(false);\n  let location = useLocation();\n  let searchParams = React.useMemo(() =>\n  // Only merge in the defaults if we haven\'t yet called setSearchParams.\n  // Once we call that we want those to take precedence, otherwise you can\'t\n  // remove a param with setSearchParams({}) if it has an initial value\n  getSearchParamsForLocation(location.search, hasSetSearchParamsRef.current ? null : defaultSearchParamsRef.current), [location.search]);\n  let navigate = useNavigate();\n  let setSearchParams = React.useCallback((nextInit, navigateOptions) => {\n    const newSearchParams = createSearchParams(typeof nextInit === "function" ? nextInit(searchParams) : nextInit);\n    hasSetSearchParamsRef.current = true;\n    navigate("?" + newSearchParams, navigateOptions);\n  }, [navigate, searchParams]);\n  return [searchParams, setSearchParams];\n}\nfunction validateClientSideSubmission() {\n  if (typeof document === "undefined") {\n    throw new Error("You are calling submit during the server render. " + "Try calling submit within a `useEffect` or callback instead.");\n  }\n}\nlet fetcherId = 0;\nlet getUniqueFetcherId = () => "__" + String(++fetcherId) + "__";\n/**\n * Returns a function that may be used to programmatically submit a form (or\n * some arbitrary data) to the server.\n */\nfunction useSubmit() {\n  let {\n    router\n  } = dist_useDataRouterContext(dist_DataRouterHook.UseSubmit);\n  let {\n    basename\n  } = React.useContext(UNSAFE_NavigationContext);\n  let currentRouteId = UNSAFE_useRouteId();\n  return React.useCallback(function (target, options) {\n    if (options === void 0) {\n      options = {};\n    }\n    validateClientSideSubmission();\n    let {\n      action,\n      method,\n      encType,\n      formData,\n      body\n    } = getFormSubmissionInfo(target, basename);\n    if (options.navigate === false) {\n      let key = options.fetcherKey || getUniqueFetcherId();\n      router.fetch(key, currentRouteId, options.action || action, {\n        preventScrollReset: options.preventScrollReset,\n        formData,\n        body,\n        formMethod: options.method || method,\n        formEncType: options.encType || encType,\n        unstable_flushSync: options.unstable_flushSync\n      });\n    } else {\n      router.navigate(options.action || action, {\n        preventScrollReset: options.preventScrollReset,\n        formData,\n        body,\n        formMethod: options.method || method,\n        formEncType: options.encType || encType,\n        replace: options.replace,\n        state: options.state,\n        fromRouteId: currentRouteId,\n        unstable_flushSync: options.unstable_flushSync,\n        unstable_viewTransition: options.unstable_viewTransition\n      });\n    }\n  }, [router, basename, currentRouteId]);\n}\n// v7: Eventually we should deprecate this entirely in favor of using the\n// router method directly?\nfunction useFormAction(action, _temp2) {\n  let {\n    relative\n  } = _temp2 === void 0 ? {} : _temp2;\n  let {\n    basename\n  } = React.useContext(UNSAFE_NavigationContext);\n  let routeContext = React.useContext(UNSAFE_RouteContext);\n  !routeContext ?  false ? 0 : UNSAFE_invariant(false) : void 0;\n  let [match] = routeContext.matches.slice(-1);\n  // Shallow clone path so we can modify it below, otherwise we modify the\n  // object referenced by useMemo inside useResolvedPath\n  let path = react_router_dom_dist_extends({}, useResolvedPath(action ? action : ".", {\n    relative\n  }));\n  // If no action was specified, browsers will persist current search params\n  // when determining the path, so match that behavior\n  // https://github.com/remix-run/remix/issues/927\n  let location = useLocation();\n  if (action == null) {\n    // Safe to write to this directly here since if action was undefined, we\n    // would have called useResolvedPath(".") which will never include a search\n    path.search = location.search;\n    // When grabbing search params from the URL, remove any included ?index param\n    // since it might not apply to our contextual route.  We add it back based\n    // on match.route.index below\n    let params = new URLSearchParams(path.search);\n    if (params.has("index") && params.get("index") === "") {\n      params.delete("index");\n      path.search = params.toString() ? "?" + params.toString() : "";\n    }\n  }\n  if ((!action || action === ".") && match.route.index) {\n    path.search = path.search ? path.search.replace(/^\\?/, "?index&") : "?index";\n  }\n  // If we\'re operating within a basename, prepend it to the pathname prior\n  // to creating the form action.  If this is a root navigation, then just use\n  // the raw basename which allows the basename to have full control over the\n  // presence of a trailing slash on root actions\n  if (basename !== "/") {\n    path.pathname = path.pathname === "/" ? basename : joinPaths([basename, path.pathname]);\n  }\n  return createPath(path);\n}\n// TODO: (v7) Change the useFetcher generic default from `any` to `unknown`\n/**\n * Interacts with route loaders and actions without causing a navigation. Great\n * for any interaction that stays on the same page.\n */\nfunction useFetcher(_temp3) {\n  var _route$matches;\n  let {\n    key\n  } = _temp3 === void 0 ? {} : _temp3;\n  let {\n    router\n  } = dist_useDataRouterContext(dist_DataRouterHook.UseFetcher);\n  let state = dist_useDataRouterState(dist_DataRouterStateHook.UseFetcher);\n  let fetcherData = React.useContext(FetchersContext);\n  let route = React.useContext(UNSAFE_RouteContext);\n  let routeId = (_route$matches = route.matches[route.matches.length - 1]) == null ? void 0 : _route$matches.route.id;\n  !fetcherData ?  false ? 0 : UNSAFE_invariant(false) : void 0;\n  !route ?  false ? 0 : UNSAFE_invariant(false) : void 0;\n  !(routeId != null) ?  false ? 0 : UNSAFE_invariant(false) : void 0;\n  // Fetcher key handling\n  // OK to call conditionally to feature detect `useId`\n  // eslint-disable-next-line react-hooks/rules-of-hooks\n  let defaultKey = useIdImpl ? useIdImpl() : "";\n  let [fetcherKey, setFetcherKey] = React.useState(key || defaultKey);\n  if (key && key !== fetcherKey) {\n    setFetcherKey(key);\n  } else if (!fetcherKey) {\n    // We will only fall through here when `useId` is not available\n    setFetcherKey(getUniqueFetcherId());\n  }\n  // Registration/cleanup\n  React.useEffect(() => {\n    router.getFetcher(fetcherKey);\n    return () => {\n      // Tell the router we\'ve unmounted - if v7_fetcherPersist is enabled this\n      // will not delete immediately but instead queue up a delete after the\n      // fetcher returns to an `idle` state\n      router.deleteFetcher(fetcherKey);\n    };\n  }, [router, fetcherKey]);\n  // Fetcher additions\n  let load = React.useCallback((href, opts) => {\n    !routeId ?  false ? 0 : UNSAFE_invariant(false) : void 0;\n    router.fetch(fetcherKey, routeId, href, opts);\n  }, [fetcherKey, routeId, router]);\n  let submitImpl = useSubmit();\n  let submit = React.useCallback((target, opts) => {\n    submitImpl(target, react_router_dom_dist_extends({}, opts, {\n      navigate: false,\n      fetcherKey\n    }));\n  }, [fetcherKey, submitImpl]);\n  let FetcherForm = React.useMemo(() => {\n    let FetcherForm = /*#__PURE__*/React.forwardRef((props, ref) => {\n      return /*#__PURE__*/React.createElement(Form, react_router_dom_dist_extends({}, props, {\n        navigate: false,\n        fetcherKey: fetcherKey,\n        ref: ref\n      }));\n    });\n    if (false) {}\n    return FetcherForm;\n  }, [fetcherKey]);\n  // Exposed FetcherWithComponents\n  let fetcher = state.fetchers.get(fetcherKey) || IDLE_FETCHER;\n  let data = fetcherData.get(fetcherKey);\n  let fetcherWithComponents = React.useMemo(() => react_router_dom_dist_extends({\n    Form: FetcherForm,\n    submit,\n    load\n  }, fetcher, {\n    data\n  }), [FetcherForm, submit, load, fetcher, data]);\n  return fetcherWithComponents;\n}\n/**\n * Provides all fetchers currently on the page. Useful for layouts and parent\n * routes that need to provide pending/optimistic UI regarding the fetch.\n */\nfunction useFetchers() {\n  let state = dist_useDataRouterState(dist_DataRouterStateHook.UseFetchers);\n  return Array.from(state.fetchers.entries()).map(_ref11 => {\n    let [key, fetcher] = _ref11;\n    return react_router_dom_dist_extends({}, fetcher, {\n      key\n    });\n  });\n}\nconst SCROLL_RESTORATION_STORAGE_KEY = "react-router-scroll-positions";\nlet savedScrollPositions = {};\n/**\n * When rendered inside a RouterProvider, will restore scroll positions on navigations\n */\nfunction useScrollRestoration(_temp4) {\n  let {\n    getKey,\n    storageKey\n  } = _temp4 === void 0 ? {} : _temp4;\n  let {\n    router\n  } = dist_useDataRouterContext(dist_DataRouterHook.UseScrollRestoration);\n  let {\n    restoreScrollPosition,\n    preventScrollReset\n  } = dist_useDataRouterState(dist_DataRouterStateHook.UseScrollRestoration);\n  let {\n    basename\n  } = React.useContext(UNSAFE_NavigationContext);\n  let location = useLocation();\n  let matches = useMatches();\n  let navigation = useNavigation();\n  // Trigger manual scroll restoration while we\'re active\n  React.useEffect(() => {\n    window.history.scrollRestoration = "manual";\n    return () => {\n      window.history.scrollRestoration = "auto";\n    };\n  }, []);\n  // Save positions on pagehide\n  usePageHide(React.useCallback(() => {\n    if (navigation.state === "idle") {\n      let key = (getKey ? getKey(location, matches) : null) || location.key;\n      savedScrollPositions[key] = window.scrollY;\n    }\n    try {\n      sessionStorage.setItem(storageKey || SCROLL_RESTORATION_STORAGE_KEY, JSON.stringify(savedScrollPositions));\n    } catch (error) {\n       false ? 0 : void 0;\n    }\n    window.history.scrollRestoration = "auto";\n  }, [storageKey, getKey, navigation.state, location, matches]));\n  // Read in any saved scroll locations\n  if (typeof document !== "undefined") {\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    React.useLayoutEffect(() => {\n      try {\n        let sessionPositions = sessionStorage.getItem(storageKey || SCROLL_RESTORATION_STORAGE_KEY);\n        if (sessionPositions) {\n          savedScrollPositions = JSON.parse(sessionPositions);\n        }\n      } catch (e) {\n        // no-op, use default empty object\n      }\n    }, [storageKey]);\n    // Enable scroll restoration in the router\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    React.useLayoutEffect(() => {\n      let getKeyWithoutBasename = getKey && basename !== "/" ? (location, matches) => getKey(\n      // Strip the basename to match useLocation()\n      react_router_dom_dist_extends({}, location, {\n        pathname: stripBasename(location.pathname, basename) || location.pathname\n      }), matches) : getKey;\n      let disableScrollRestoration = router == null ? void 0 : router.enableScrollRestoration(savedScrollPositions, () => window.scrollY, getKeyWithoutBasename);\n      return () => disableScrollRestoration && disableScrollRestoration();\n    }, [router, basename, getKey]);\n    // Restore scrolling when state.restoreScrollPosition changes\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    React.useLayoutEffect(() => {\n      // Explicit false means don\'t do anything (used for submissions)\n      if (restoreScrollPosition === false) {\n        return;\n      }\n      // been here before, scroll to it\n      if (typeof restoreScrollPosition === "number") {\n        window.scrollTo(0, restoreScrollPosition);\n        return;\n      }\n      // try to scroll to the hash\n      if (location.hash) {\n        let el = document.getElementById(decodeURIComponent(location.hash.slice(1)));\n        if (el) {\n          el.scrollIntoView();\n          return;\n        }\n      }\n      // Don\'t reset if this navigation opted out\n      if (preventScrollReset === true) {\n        return;\n      }\n      // otherwise go to the top on new locations\n      window.scrollTo(0, 0);\n    }, [location, restoreScrollPosition, preventScrollReset]);\n  }\n}\n/**\n * Setup a callback to be fired on the window\'s `beforeunload` event. This is\n * useful for saving some data to `window.localStorage` just before the page\n * refreshes.\n *\n * Note: The `callback` argument should be a function created with\n * `React.useCallback()`.\n */\nfunction useBeforeUnload(callback, options) {\n  let {\n    capture\n  } = options || {};\n  React.useEffect(() => {\n    let opts = capture != null ? {\n      capture\n    } : undefined;\n    window.addEventListener("beforeunload", callback, opts);\n    return () => {\n      window.removeEventListener("beforeunload", callback, opts);\n    };\n  }, [callback, capture]);\n}\n/**\n * Setup a callback to be fired on the window\'s `pagehide` event. This is\n * useful for saving some data to `window.localStorage` just before the page\n * refreshes.  This event is better supported than beforeunload across browsers.\n *\n * Note: The `callback` argument should be a function created with\n * `React.useCallback()`.\n */\nfunction usePageHide(callback, options) {\n  let {\n    capture\n  } = options || {};\n  React.useEffect(() => {\n    let opts = capture != null ? {\n      capture\n    } : undefined;\n    window.addEventListener("pagehide", callback, opts);\n    return () => {\n      window.removeEventListener("pagehide", callback, opts);\n    };\n  }, [callback, capture]);\n}\n/**\n * Wrapper around useBlocker to show a window.confirm prompt to users instead\n * of building a custom UI with useBlocker.\n *\n * Warning: This has *a lot of rough edges* and behaves very differently (and\n * very incorrectly in some cases) across browsers if user click addition\n * back/forward navigations while the confirm is open.  Use at your own risk.\n */\nfunction usePrompt(_ref12) {\n  let {\n    when,\n    message\n  } = _ref12;\n  let blocker = useBlocker(when);\n  React.useEffect(() => {\n    if (blocker.state === "blocked") {\n      let proceed = window.confirm(message);\n      if (proceed) {\n        // This timeout is needed to avoid a weird "race" on POP navigations\n        // between the `window.history` revert navigation and the result of\n        // `window.confirm`\n        setTimeout(blocker.proceed, 0);\n      } else {\n        blocker.reset();\n      }\n    }\n  }, [blocker, message]);\n  React.useEffect(() => {\n    if (blocker.state === "blocked" && !when) {\n      blocker.reset();\n    }\n  }, [blocker, when]);\n}\n/**\n * Return a boolean indicating if there is an active view transition to the\n * given href.  You can use this value to render CSS classes or viewTransitionName\n * styles onto your elements\n *\n * @param href The destination href\n * @param [opts.relative] Relative routing type ("route" | "path")\n */\nfunction useViewTransitionState(to, opts) {\n  if (opts === void 0) {\n    opts = {};\n  }\n  let vtContext = React.useContext(ViewTransitionContext);\n  !(vtContext != null) ?  false ? 0 : UNSAFE_invariant(false) : void 0;\n  let {\n    basename\n  } = dist_useDataRouterContext(dist_DataRouterHook.useViewTransitionState);\n  let path = useResolvedPath(to, {\n    relative: opts.relative\n  });\n  if (!vtContext.isTransitioning) {\n    return false;\n  }\n  let currentPath = stripBasename(vtContext.currentLocation.pathname, basename) || vtContext.currentLocation.pathname;\n  let nextPath = stripBasename(vtContext.nextLocation.pathname, basename) || vtContext.nextLocation.pathname;\n  // Transition is active if we\'re going to or coming from the indicated\n  // destination.  This ensures that other PUSH navigations that reverse\n  // an indicated transition apply.  I.e., on the list view you have:\n  //\n  //   <NavLink to="/details/1" unstable_viewTransition>\n  //\n  // If you click the breadcrumb back to the list view:\n  //\n  //   <NavLink to="/list" unstable_viewTransition>\n  //\n  // We should apply the transition because it\'s indicated as active going\n  // from /list -> /details/1 and therefore should be active on the reverse\n  // (even though this isn\'t strictly a POP reverse)\n  return matchPath(path.pathname, nextPath) != null || matchPath(path.pathname, currentPath) != null;\n}\n//#endregion\n\n\n// EXTERNAL MODULE: ./node_modules/classnames/index.js\nvar classnames = __webpack_require__(7073);\nvar classnames_default = /*#__PURE__*/__webpack_require__.n(classnames);\n// EXTERNAL MODULE: ./node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[0].use[1]!./node_modules/postcss-loader/dist/cjs.js??ruleSet[1].rules[0].use[2]!./node_modules/sass-loader/dist/cjs.js!./src/components/Text/Text.module.scss\nvar Text_module = __webpack_require__(4834);\n;// CONCATENATED MODULE: ./src/components/Text/Text.module.scss\n\n      \n      \n      \n      \n      \n      \n      \n      \n      \n\nvar Text_module_options = {};\n\nText_module_options.styleTagTransform = (styleTagTransform_default());\nText_module_options.setAttributes = (setAttributesWithoutAttributes_default());\nText_module_options.insert = insertBySelector_default().bind(null, "head");\nText_module_options.domAPI = (styleDomAPI_default());\nText_module_options.insertStyleElement = (insertStyleElement_default());\n\nvar Text_module_update = injectStylesIntoStyleTag_default()(Text_module/* default */.A, Text_module_options);\n\n\n\n\n       /* harmony default export */ const Text_Text_module = (Text_module/* default */.A && Text_module/* default */.A.locals ? Text_module/* default */.A.locals : undefined);\n\n;// CONCATENATED MODULE: ./src/components/Text/Text.tsx\n\n\n\n\nconst Text = ({\n  ...props\n}) => {\n  const Tag = props.tag ? props.tag : \'p\';\n  return /*#__PURE__*/react.createElement(Tag, {\n    style: {\n      maxLines: props.maxLines || \'none\'\n    },\n    className: classnames_default()({\n      [props.className || \'\']: true,\n      [Text_Text_module[\'text_view_\' + (props.view || \'p-14\')]]: props.view,\n      [Text_Text_module[\'text_color_\' + (props.color || \'inherit\')]]: true,\n      [Text_Text_module[\'text_weight_\' + (props.weight || \'normal\')]]: true\n    }),\n    onClick: props.onCLick\n  }, props.children);\n};\n/* harmony default export */ const Text_Text = (/*#__PURE__*/(0,react.memo)(Text));\n;// CONCATENATED MODULE: ./src/components/Text/index.ts\n\n\n;// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/extends.js\nfunction extends_extends() {\n  extends_extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return extends_extends.apply(this, arguments);\n}\n;// CONCATENATED MODULE: ./src/components/icons/Icon/Icon.tsx\n\n\n\n\nconst Icon = ({\n  className,\n  color,\n  ...props\n}) => {\n  const iconWidth = props.width || \'24\';\n  const iconHeight = props.height || \'24\';\n  return /*#__PURE__*/react.createElement("svg", extends_extends({\n    fill: "none",\n    width: iconWidth,\n    height: iconHeight,\n    viewBox: "0 0 24 24",\n    className: classnames_default()({\n      className,\n      color\n    })\n  }, props));\n};\n/* harmony default export */ const Icon_Icon = (/*#__PURE__*/(0,react.memo)(Icon));\n;// CONCATENATED MODULE: ./src/components/icons/Icon/index.ts\n\n\n;// CONCATENATED MODULE: ./src/components/icons/LogoIcon/LogoIcon.tsx\n\n\n\nconst LogoIcon = props => {\n  return /*#__PURE__*/react.createElement(Icon_Icon, extends_extends({}, props, {\n    width: "36",\n    height: "36",\n    viewBox: "0 0 36 36"\n  }), /*#__PURE__*/react.createElement("g", {\n    clipPath: "url(#clip0_508_1449)"\n  }, /*#__PURE__*/react.createElement("path", {\n    d: "M17.8585 0.506165C27.5209 0.506165 35.352 8.33833 35.352 18C35.352 27.6628 27.5209 35.4938 17.8585 35.4938C8.19684 35.4938 0.364685 27.6628 0.364685 18C0.364685 8.33833 8.19684 0.506165 17.8585 0.506165Z",\n    fill: "white"\n  }), /*#__PURE__*/react.createElement("path", {\n    d: "M17.7689 33.4343C26.4389 33.4343 33.4674 26.4058 33.4674 17.7358C33.4674 9.0657 26.4389 2.03723 17.7689 2.03723C9.09884 2.03723 2.07037 9.0657 2.07037 17.7358C2.07037 26.4058 9.09884 33.4343 17.7689 33.4343Z",\n    fill: "url(#paint0_linear_508_1449)"\n  }), /*#__PURE__*/react.createElement("path", {\n    d: "M18.1897 30.3613C16.3901 28.1578 15.4422 27.0086 15.3479 26.915C14.9918 26.4884 14.3878 25.8966 13.5356 25.1388C13.9144 23.1008 14.4119 21.5143 15.0282 20.3767C15.2647 19.9739 16.2479 18.6473 17.9773 16.3969C18.9252 18.3629 20.2046 19.6895 21.8149 20.3767C22.1695 20.5189 23.6977 20.839 26.3974 21.3368C28.3882 21.7382 29.9876 22.4852 31.1947 23.5753C32.9004 25.114 34.3804 27.6728 35.6357 31.2494C30.5431 28.3831 26.9068 27.3769 24.7284 28.2294C23.7092 28.8457 22.8326 29.331 22.099 29.6863C20.9858 30.2544 19.6826 30.4798 18.1897 30.3613Z",\n    fill: "white"\n  }), /*#__PURE__*/react.createElement("path", {\n    d: "M18.7585 12.5953C18.5451 13.9457 18.0839 15.0477 17.3729 15.8998C16.9697 16.3973 16.1881 17.0845 15.0275 17.9608C12.7055 19.6657 11.0243 21.8689 9.9821 24.5693C8.96366 27.1278 8.70302 29.722 9.2009 32.3518L8.45498 32.4216C7.88582 29.7699 8.12342 27.1516 9.16526 24.5697C10.2312 21.8218 12.0316 19.5232 14.566 17.6767C15.9639 16.6342 16.8761 15.2485 17.3023 13.5198C17.6339 12.0989 17.5979 10.5466 17.1954 8.86466C16.888 7.41962 16.3779 6.34178 15.6683 5.6315C14.9807 4.94462 14.2938 4.69622 13.6066 4.88558C11.9959 5.31182 11.3796 7.34942 11.7594 10.9969C12.1147 14.4555 12.7782 16.6349 13.7488 17.5345C12.7779 17.6062 11.9373 16.2796 11.2263 13.5551C10.539 10.8547 10.444 8.50934 10.9415 6.51998C11.155 5.5253 11.6169 4.77902 12.3271 4.2815C13.4169 3.52334 14.6844 3.61838 16.1298 4.56554C17.077 5.18186 17.7757 6.1409 18.225 7.44374C18.7704 8.86466 18.949 10.5822 18.7585 12.5953ZM11.8656 32.6041C10.5156 26.532 11.4275 22.149 14.602 19.4523C12.4463 24.1395 11.8779 28.5473 12.8963 32.6769L11.8656 32.6041Z",\n    fill: "white"\n  })), /*#__PURE__*/react.createElement("defs", null, /*#__PURE__*/react.createElement("linearGradient", {\n    id: "paint0_linear_508_1449",\n    x1: "15.0425",\n    y1: "2.27336",\n    x2: "20.4954",\n    y2: "33.1986",\n    gradientUnits: "userSpaceOnUse"\n  }, /*#__PURE__*/react.createElement("stop", {\n    stopColor: "#B5460F"\n  }), /*#__PURE__*/react.createElement("stop", {\n    offset: "1",\n    stopColor: "#B5460F"\n  })), /*#__PURE__*/react.createElement("clipPath", {\n    id: "clip0_508_1449"\n  }, /*#__PURE__*/react.createElement("rect", {\n    width: "36",\n    height: "36",\n    fill: "white"\n  }))));\n};\n/* harmony default export */ const LogoIcon_LogoIcon = (LogoIcon);\n;// CONCATENATED MODULE: ./src/components/icons/LogoIcon/index.ts\n\n// EXTERNAL MODULE: ./node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[0].use[1]!./node_modules/postcss-loader/dist/cjs.js??ruleSet[1].rules[0].use[2]!./node_modules/sass-loader/dist/cjs.js!./src/components/Header/components/LogoBlock/LogoBlock.module.scss\nvar LogoBlock_module = __webpack_require__(7341);\n;// CONCATENATED MODULE: ./src/components/Header/components/LogoBlock/LogoBlock.module.scss\n\n      \n      \n      \n      \n      \n      \n      \n      \n      \n\nvar LogoBlock_module_options = {};\n\nLogoBlock_module_options.styleTagTransform = (styleTagTransform_default());\nLogoBlock_module_options.setAttributes = (setAttributesWithoutAttributes_default());\nLogoBlock_module_options.insert = insertBySelector_default().bind(null, "head");\nLogoBlock_module_options.domAPI = (styleDomAPI_default());\nLogoBlock_module_options.insertStyleElement = (insertStyleElement_default());\n\nvar LogoBlock_module_update = injectStylesIntoStyleTag_default()(LogoBlock_module/* default */.A, LogoBlock_module_options);\n\n\n\n\n       /* harmony default export */ const LogoBlock_LogoBlock_module = (LogoBlock_module/* default */.A && LogoBlock_module/* default */.A.locals ? LogoBlock_module/* default */.A.locals : undefined);\n\n;// CONCATENATED MODULE: ./src/components/Header/components/LogoBlock/LogoBlock.tsx\n\n\n\n\n\nconst LogoBlock = () => {\n  return /*#__PURE__*/react.createElement("div", {\n    className: LogoBlock_LogoBlock_module["logo-block"]\n  }, /*#__PURE__*/react.createElement(LogoIcon_LogoIcon, null), /*#__PURE__*/react.createElement(Text_Text, {\n    view: "p-20",\n    weight: "bold"\n  }, "Food Client"));\n};\n/* harmony default export */ const LogoBlock_LogoBlock = (/*#__PURE__*/(0,react.memo)(LogoBlock));\n;// CONCATENATED MODULE: ./src/components/Header/components/LogoBlock/index.ts\n\n;// CONCATENATED MODULE: ./node_modules/mobx/dist/mobx.esm.js\nvar niceErrors = {\n  0: "Invalid value for configuration \'enforceActions\', expected \'never\', \'always\' or \'observed\'",\n  1: function _(annotationType, key) {\n    return "Cannot apply \'" + annotationType + "\' to \'" + key.toString() + "\': Field not found.";\n  },\n  /*\n  2(prop) {\n      return `invalid decorator for \'${prop.toString()}\'`\n  },\n  3(prop) {\n      return `Cannot decorate \'${prop.toString()}\': action can only be used on properties with a function value.`\n  },\n  4(prop) {\n      return `Cannot decorate \'${prop.toString()}\': computed can only be used on getter properties.`\n  },\n  */\n  5: "\'keys()\' can only be used on observable objects, arrays, sets and maps",\n  6: "\'values()\' can only be used on observable objects, arrays, sets and maps",\n  7: "\'entries()\' can only be used on observable objects, arrays and maps",\n  8: "\'set()\' can only be used on observable objects, arrays and maps",\n  9: "\'remove()\' can only be used on observable objects, arrays and maps",\n  10: "\'has()\' can only be used on observable objects, arrays and maps",\n  11: "\'get()\' can only be used on observable objects, arrays and maps",\n  12: "Invalid annotation",\n  13: "Dynamic observable objects cannot be frozen. If you\'re passing observables to 3rd party component/function that calls Object.freeze, pass copy instead: toJS(observable)",\n  14: "Intercept handlers should return nothing or a change object",\n  15: "Observable arrays cannot be frozen. If you\'re passing observables to 3rd party component/function that calls Object.freeze, pass copy instead: toJS(observable)",\n  16: "Modification exception: the internal structure of an observable array was changed.",\n  17: function _(index, length) {\n    return "[mobx.array] Index out of bounds, " + index + " is larger than " + length;\n  },\n  18: "mobx.map requires Map polyfill for the current browser. Check babel-polyfill or core-js/es6/map.js",\n  19: function _(other) {\n    return "Cannot initialize from classes that inherit from Map: " + other.constructor.name;\n  },\n  20: function _(other) {\n    return "Cannot initialize map from " + other;\n  },\n  21: function _(dataStructure) {\n    return "Cannot convert to map from \'" + dataStructure + "\'";\n  },\n  22: "mobx.set requires Set polyfill for the current browser. Check babel-polyfill or core-js/es6/set.js",\n  23: "It is not possible to get index atoms from arrays",\n  24: function _(thing) {\n    return "Cannot obtain administration from " + thing;\n  },\n  25: function _(property, name) {\n    return "the entry \'" + property + "\' does not exist in the observable map \'" + name + "\'";\n  },\n  26: "please specify a property",\n  27: function _(property, name) {\n    return "no observable property \'" + property.toString() + "\' found on the observable object \'" + name + "\'";\n  },\n  28: function _(thing) {\n    return "Cannot obtain atom from " + thing;\n  },\n  29: "Expecting some object",\n  30: "invalid action stack. did you forget to finish an action?",\n  31: "missing option for computed: get",\n  32: function _(name, derivation) {\n    return "Cycle detected in computation " + name + ": " + derivation;\n  },\n  33: function _(name) {\n    return "The setter of computed value \'" + name + "\' is trying to update itself. Did you intend to update an _observable_ value, instead of the computed property?";\n  },\n  34: function _(name) {\n    return "[ComputedValue \'" + name + "\'] It is not possible to assign a new value to a computed value.";\n  },\n  35: "There are multiple, different versions of MobX active. Make sure MobX is loaded only once or use `configure({ isolateGlobalState: true })`",\n  36: "isolateGlobalState should be called before MobX is running any reactions",\n  37: function _(method) {\n    return "[mobx] `observableArray." + method + "()` mutates the array in-place, which is not allowed inside a derivation. Use `array.slice()." + method + "()` instead";\n  },\n  38: "\'ownKeys()\' can only be used on observable objects",\n  39: "\'defineProperty()\' can only be used on observable objects"\n};\nvar errors =  false ? 0 : {};\nfunction die(error) {\n  for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    args[_key - 1] = arguments[_key];\n  }\n  if (false) { var e; }\n  throw new Error(typeof error === "number" ? "[MobX] minified error nr: " + error + (args.length ? " " + args.map(String).join(",") : "") + ". Find the full error at: https://github.com/mobxjs/mobx/blob/main/packages/mobx/src/errors.ts" : "[MobX] " + error);\n}\nvar mockGlobal = {};\nfunction getGlobal() {\n  if (typeof globalThis !== "undefined") {\n    return globalThis;\n  }\n  if (typeof window !== "undefined") {\n    return window;\n  }\n  if (typeof __webpack_require__.g !== "undefined") {\n    return __webpack_require__.g;\n  }\n  if (typeof self !== "undefined") {\n    return self;\n  }\n  return mockGlobal;\n}\n\n// We shorten anything used > 5 times\nvar mobx_esm_assign = Object.assign;\nvar getDescriptor = Object.getOwnPropertyDescriptor;\nvar defineProperty = Object.defineProperty;\nvar objectPrototype = Object.prototype;\nvar EMPTY_ARRAY = [];\nObject.freeze(EMPTY_ARRAY);\nvar EMPTY_OBJECT = {};\nObject.freeze(EMPTY_OBJECT);\nvar hasProxy = typeof Proxy !== "undefined";\nvar plainObjectString = /*#__PURE__*/Object.toString();\nfunction assertProxies() {\n  if (!hasProxy) {\n    die( false ? 0 : "Proxy not available");\n  }\n}\nfunction warnAboutProxyRequirement(msg) {\n  if (false) {}\n}\nfunction getNextId() {\n  return ++globalState.mobxGuid;\n}\n/**\n * Makes sure that the provided function is invoked at most once.\n */\nfunction once(func) {\n  var invoked = false;\n  return function () {\n    if (invoked) {\n      return;\n    }\n    invoked = true;\n    return func.apply(this, arguments);\n  };\n}\nvar noop = function noop() {};\nfunction isFunction(fn) {\n  return typeof fn === "function";\n}\nfunction isStringish(value) {\n  var t = typeof value;\n  switch (t) {\n    case "string":\n    case "symbol":\n    case "number":\n      return true;\n  }\n  return false;\n}\nfunction isObject(value) {\n  return value !== null && typeof value === "object";\n}\nfunction isPlainObject(value) {\n  if (!isObject(value)) {\n    return false;\n  }\n  var proto = Object.getPrototypeOf(value);\n  if (proto == null) {\n    return true;\n  }\n  var protoConstructor = Object.hasOwnProperty.call(proto, "constructor") && proto.constructor;\n  return typeof protoConstructor === "function" && protoConstructor.toString() === plainObjectString;\n}\n// https://stackoverflow.com/a/37865170\nfunction isGenerator(obj) {\n  var constructor = obj == null ? void 0 : obj.constructor;\n  if (!constructor) {\n    return false;\n  }\n  if ("GeneratorFunction" === constructor.name || "GeneratorFunction" === constructor.displayName) {\n    return true;\n  }\n  return false;\n}\nfunction addHiddenProp(object, propName, value) {\n  defineProperty(object, propName, {\n    enumerable: false,\n    writable: true,\n    configurable: true,\n    value: value\n  });\n}\nfunction addHiddenFinalProp(object, propName, value) {\n  defineProperty(object, propName, {\n    enumerable: false,\n    writable: false,\n    configurable: true,\n    value: value\n  });\n}\nfunction createInstanceofPredicate(name, theClass) {\n  var propName = "isMobX" + name;\n  theClass.prototype[propName] = true;\n  return function (x) {\n    return isObject(x) && x[propName] === true;\n  };\n}\nfunction isES6Map(thing) {\n  return thing instanceof Map;\n}\nfunction isES6Set(thing) {\n  return thing instanceof Set;\n}\nvar hasGetOwnPropertySymbols = typeof Object.getOwnPropertySymbols !== "undefined";\n/**\n * Returns the following: own enumerable keys and symbols.\n */\nfunction getPlainObjectKeys(object) {\n  var keys = Object.keys(object);\n  // Not supported in IE, so there are not going to be symbol props anyway...\n  if (!hasGetOwnPropertySymbols) {\n    return keys;\n  }\n  var symbols = Object.getOwnPropertySymbols(object);\n  if (!symbols.length) {\n    return keys;\n  }\n  return [].concat(keys, symbols.filter(function (s) {\n    return objectPrototype.propertyIsEnumerable.call(object, s);\n  }));\n}\n// From Immer utils\n// Returns all own keys, including non-enumerable and symbolic\nvar ownKeys = typeof Reflect !== "undefined" && Reflect.ownKeys ? Reflect.ownKeys : hasGetOwnPropertySymbols ? function (obj) {\n  return Object.getOwnPropertyNames(obj).concat(Object.getOwnPropertySymbols(obj));\n} : /* istanbul ignore next */Object.getOwnPropertyNames;\nfunction stringifyKey(key) {\n  if (typeof key === "string") {\n    return key;\n  }\n  if (typeof key === "symbol") {\n    return key.toString();\n  }\n  return new String(key).toString();\n}\nfunction toPrimitive(value) {\n  return value === null ? null : typeof value === "object" ? "" + value : value;\n}\nfunction hasProp(target, prop) {\n  return objectPrototype.hasOwnProperty.call(target, prop);\n}\n// From Immer utils\nvar getOwnPropertyDescriptors = Object.getOwnPropertyDescriptors || function getOwnPropertyDescriptors(target) {\n  // Polyfill needed for Hermes and IE, see https://github.com/facebook/hermes/issues/274\n  var res = {};\n  // Note: without polyfill for ownKeys, symbols won\'t be picked up\n  ownKeys(target).forEach(function (key) {\n    res[key] = getDescriptor(target, key);\n  });\n  return res;\n};\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if ("value" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);\n  }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  Object.defineProperty(Constructor, "prototype", {\n    writable: false\n  });\n  return Constructor;\n}\nfunction mobx_esm_extends() {\n  mobx_esm_extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return mobx_esm_extends.apply(this, arguments);\n}\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  _setPrototypeOf(subClass, superClass);\n}\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n  return _setPrototypeOf(o, p);\n}\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called");\n  }\n  return self;\n}\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === "string") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === "Object" && o.constructor) n = o.constructor.name;\n  if (n === "Map" || n === "Set") return Array.from(o);\n  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n  return arr2;\n}\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) {\n  var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];\n  if (it) return (it = it.call(o)).next.bind(it);\n  if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {\n    if (it) o = it;\n    var i = 0;\n    return function () {\n      if (i >= o.length) return {\n        done: true\n      };\n      return {\n        done: false,\n        value: o[i++]\n      };\n    };\n  }\n  throw new TypeError("Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");\n}\nfunction _toPrimitive(input, hint) {\n  if (typeof input !== "object" || input === null) return input;\n  var prim = input[Symbol.toPrimitive];\n  if (prim !== undefined) {\n    var res = prim.call(input, hint || "default");\n    if (typeof res !== "object") return res;\n    throw new TypeError("@@toPrimitive must return a primitive value.");\n  }\n  return (hint === "string" ? String : Number)(input);\n}\nfunction _toPropertyKey(arg) {\n  var key = _toPrimitive(arg, "string");\n  return typeof key === "symbol" ? key : String(key);\n}\nvar storedAnnotationsSymbol = /*#__PURE__*/Symbol("mobx-stored-annotations");\n/**\n * Creates a function that acts as\n * - decorator\n * - annotation object\n */\nfunction createDecoratorAnnotation(annotation) {\n  function decorator(target, property) {\n    if (is20223Decorator(property)) {\n      return annotation.decorate_20223_(target, property);\n    } else {\n      storeAnnotation(target, property, annotation);\n    }\n  }\n  return Object.assign(decorator, annotation);\n}\n/**\n * Stores annotation to prototype,\n * so it can be inspected later by `makeObservable` called from constructor\n */\nfunction storeAnnotation(prototype, key, annotation) {\n  if (!hasProp(prototype, storedAnnotationsSymbol)) {\n    addHiddenProp(prototype, storedAnnotationsSymbol, mobx_esm_extends({}, prototype[storedAnnotationsSymbol]));\n  }\n  // @override must override something\n  if (false) { var fieldName; }\n  // Cannot re-decorate\n  assertNotDecorated(prototype, annotation, key);\n  // Ignore override\n  if (!isOverride(annotation)) {\n    prototype[storedAnnotationsSymbol][key] = annotation;\n  }\n}\nfunction assertNotDecorated(prototype, annotation, key) {\n  if (false) { var requestedAnnotationType, currentAnnotationType, fieldName; }\n}\n/**\n * Collects annotations from prototypes and stores them on target (instance)\n */\nfunction collectStoredAnnotations(target) {\n  if (!hasProp(target, storedAnnotationsSymbol)) {\n    // if (__DEV__ && !target[storedAnnotationsSymbol]) {\n    //     die(\n    //         `No annotations were passed to makeObservable, but no decorated members have been found either`\n    //     )\n    // }\n    // We need a copy as we will remove annotation from the list once it\'s applied.\n    addHiddenProp(target, storedAnnotationsSymbol, mobx_esm_extends({}, target[storedAnnotationsSymbol]));\n  }\n  return target[storedAnnotationsSymbol];\n}\nfunction is20223Decorator(context) {\n  return typeof context == "object" && typeof context["kind"] == "string";\n}\nfunction assert20223DecoratorType(context, types) {\n  if (false) {}\n}\nvar $mobx = /*#__PURE__*/Symbol("mobx administration");\nvar Atom = /*#__PURE__*/function () {\n  // for effective unobserving. BaseAtom has true, for extra optimization, so its onBecomeUnobserved never gets called, because it\'s not needed\n\n  /**\n   * Create a new atom. For debugging purposes it is recommended to give it a name.\n   * The onBecomeObserved and onBecomeUnobserved callbacks can be used for resource management.\n   */\n  function Atom(name_) {\n    if (name_ === void 0) {\n      name_ =  false ? 0 : "Atom";\n    }\n    this.name_ = void 0;\n    this.isPendingUnobservation_ = false;\n    this.isBeingObserved_ = false;\n    this.observers_ = new Set();\n    this.diffValue_ = 0;\n    this.lastAccessedBy_ = 0;\n    this.lowestObserverState_ = IDerivationState_.NOT_TRACKING_;\n    this.onBOL = void 0;\n    this.onBUOL = void 0;\n    this.name_ = name_;\n  }\n  // onBecomeObservedListeners\n  var _proto = Atom.prototype;\n  _proto.onBO = function onBO() {\n    if (this.onBOL) {\n      this.onBOL.forEach(function (listener) {\n        return listener();\n      });\n    }\n  };\n  _proto.onBUO = function onBUO() {\n    if (this.onBUOL) {\n      this.onBUOL.forEach(function (listener) {\n        return listener();\n      });\n    }\n  }\n  /**\n   * Invoke this method to notify mobx that your atom has been used somehow.\n   * Returns true if there is currently a reactive context.\n   */;\n  _proto.reportObserved = function reportObserved$1() {\n    return reportObserved(this);\n  }\n  /**\n   * Invoke this method _after_ this method has changed to signal mobx that all its observers should invalidate.\n   */;\n  _proto.reportChanged = function reportChanged() {\n    startBatch();\n    propagateChanged(this);\n    endBatch();\n  };\n  _proto.toString = function toString() {\n    return this.name_;\n  };\n  return Atom;\n}();\nvar isAtom = /*#__PURE__*/createInstanceofPredicate("Atom", Atom);\nfunction createAtom(name, onBecomeObservedHandler, onBecomeUnobservedHandler) {\n  if (onBecomeObservedHandler === void 0) {\n    onBecomeObservedHandler = noop;\n  }\n  if (onBecomeUnobservedHandler === void 0) {\n    onBecomeUnobservedHandler = noop;\n  }\n  var atom = new Atom(name);\n  // default `noop` listener will not initialize the hook Set\n  if (onBecomeObservedHandler !== noop) {\n    onBecomeObserved(atom, onBecomeObservedHandler);\n  }\n  if (onBecomeUnobservedHandler !== noop) {\n    onBecomeUnobserved(atom, onBecomeUnobservedHandler);\n  }\n  return atom;\n}\nfunction identityComparer(a, b) {\n  return a === b;\n}\nfunction structuralComparer(a, b) {\n  return deepEqual(a, b);\n}\nfunction shallowComparer(a, b) {\n  return deepEqual(a, b, 1);\n}\nfunction defaultComparer(a, b) {\n  if (Object.is) {\n    return Object.is(a, b);\n  }\n  return a === b ? a !== 0 || 1 / a === 1 / b : a !== a && b !== b;\n}\nvar comparer = {\n  identity: identityComparer,\n  structural: structuralComparer,\n  "default": defaultComparer,\n  shallow: shallowComparer\n};\nfunction deepEnhancer(v, _, name) {\n  // it is an observable already, done\n  if (isObservable(v)) {\n    return v;\n  }\n  // something that can be converted and mutated?\n  if (Array.isArray(v)) {\n    return mobx_esm_observable.array(v, {\n      name: name\n    });\n  }\n  if (isPlainObject(v)) {\n    return mobx_esm_observable.object(v, undefined, {\n      name: name\n    });\n  }\n  if (isES6Map(v)) {\n    return mobx_esm_observable.map(v, {\n      name: name\n    });\n  }\n  if (isES6Set(v)) {\n    return mobx_esm_observable.set(v, {\n      name: name\n    });\n  }\n  if (typeof v === "function" && !isAction(v) && !isFlow(v)) {\n    if (isGenerator(v)) {\n      return flow(v);\n    } else {\n      return autoAction(name, v);\n    }\n  }\n  return v;\n}\nfunction shallowEnhancer(v, _, name) {\n  if (v === undefined || v === null) {\n    return v;\n  }\n  if (isObservableObject(v) || isObservableArray(v) || isObservableMap(v) || isObservableSet(v)) {\n    return v;\n  }\n  if (Array.isArray(v)) {\n    return mobx_esm_observable.array(v, {\n      name: name,\n      deep: false\n    });\n  }\n  if (isPlainObject(v)) {\n    return mobx_esm_observable.object(v, undefined, {\n      name: name,\n      deep: false\n    });\n  }\n  if (isES6Map(v)) {\n    return mobx_esm_observable.map(v, {\n      name: name,\n      deep: false\n    });\n  }\n  if (isES6Set(v)) {\n    return mobx_esm_observable.set(v, {\n      name: name,\n      deep: false\n    });\n  }\n  if (false) {}\n}\nfunction referenceEnhancer(newValue) {\n  // never turn into an observable\n  return newValue;\n}\nfunction refStructEnhancer(v, oldValue) {\n  if (false) {}\n  if (deepEqual(v, oldValue)) {\n    return oldValue;\n  }\n  return v;\n}\nvar OVERRIDE = "override";\nvar override = /*#__PURE__*/createDecoratorAnnotation({\n  annotationType_: OVERRIDE,\n  make_: make_,\n  extend_: extend_,\n  decorate_20223_: decorate_20223_\n});\nfunction isOverride(annotation) {\n  return annotation.annotationType_ === OVERRIDE;\n}\nfunction make_(adm, key) {\n  // Must not be plain object\n  if (false) {}\n  // Must override something\n  if (false) {}\n  return 0 /* MakeResult.Cancel */;\n}\nfunction extend_(adm, key, descriptor, proxyTrap) {\n  die("\'" + this.annotationType_ + "\' can only be used with \'makeObservable\'");\n}\nfunction decorate_20223_(desc, context) {\n  console.warn("\'" + this.annotationType_ + "\' cannot be used with decorators - this is a no-op");\n}\nfunction createActionAnnotation(name, options) {\n  return {\n    annotationType_: name,\n    options_: options,\n    make_: make_$1,\n    extend_: extend_$1,\n    decorate_20223_: decorate_20223_$1\n  };\n}\nfunction make_$1(adm, key, descriptor, source) {\n  var _this$options_;\n  // bound\n  if ((_this$options_ = this.options_) != null && _this$options_.bound) {\n    return this.extend_(adm, key, descriptor, false) === null ? 0 /* MakeResult.Cancel */ : 1 /* MakeResult.Break */;\n  }\n  // own\n  if (source === adm.target_) {\n    return this.extend_(adm, key, descriptor, false) === null ? 0 /* MakeResult.Cancel */ : 2 /* MakeResult.Continue */;\n  }\n  // prototype\n  if (isAction(descriptor.value)) {\n    // A prototype could have been annotated already by other constructor,\n    // rest of the proto chain must be annotated already\n    return 1 /* MakeResult.Break */;\n  }\n  var actionDescriptor = createActionDescriptor(adm, this, key, descriptor, false);\n  defineProperty(source, key, actionDescriptor);\n  return 2 /* MakeResult.Continue */;\n}\nfunction extend_$1(adm, key, descriptor, proxyTrap) {\n  var actionDescriptor = createActionDescriptor(adm, this, key, descriptor);\n  return adm.defineProperty_(key, actionDescriptor, proxyTrap);\n}\nfunction decorate_20223_$1(mthd, context) {\n  if (false) {}\n  var kind = context.kind,\n    name = context.name,\n    addInitializer = context.addInitializer;\n  var ann = this;\n  var _createAction = function _createAction(m) {\n    var _ann$options_$name, _ann$options_, _ann$options_$autoAct, _ann$options_2;\n    return createAction((_ann$options_$name = (_ann$options_ = ann.options_) == null ? void 0 : _ann$options_.name) != null ? _ann$options_$name : name.toString(), m, (_ann$options_$autoAct = (_ann$options_2 = ann.options_) == null ? void 0 : _ann$options_2.autoAction) != null ? _ann$options_$autoAct : false);\n  };\n  // Backwards/Legacy behavior, expects makeObservable(this)\n  if (kind == "field") {\n    addInitializer(function () {\n      storeAnnotation(this, name, ann);\n    });\n    return;\n  }\n  if (kind == "method") {\n    var _this$options_2;\n    if (!isAction(mthd)) {\n      mthd = _createAction(mthd);\n    }\n    if ((_this$options_2 = this.options_) != null && _this$options_2.bound) {\n      addInitializer(function () {\n        var self = this;\n        var bound = self[name].bind(self);\n        bound.isMobxAction = true;\n        self[name] = bound;\n      });\n    }\n    return mthd;\n  }\n  die("Cannot apply \'" + ann.annotationType_ + "\' to \'" + String(name) + "\' (kind: " + kind + "):" + ("\\n\'" + ann.annotationType_ + "\' can only be used on properties with a function value."));\n}\nfunction assertActionDescriptor(adm, _ref, key, _ref2) {\n  var annotationType_ = _ref.annotationType_;\n  var value = _ref2.value;\n  if (false) {}\n}\nfunction createActionDescriptor(adm, annotation, key, descriptor,\n// provides ability to disable safeDescriptors for prototypes\nsafeDescriptors) {\n  var _annotation$options_, _annotation$options_$, _annotation$options_2, _annotation$options_$2, _annotation$options_3, _annotation$options_4, _adm$proxy_2;\n  if (safeDescriptors === void 0) {\n    safeDescriptors = globalState.safeDescriptors;\n  }\n  assertActionDescriptor(adm, annotation, key, descriptor);\n  var value = descriptor.value;\n  if ((_annotation$options_ = annotation.options_) != null && _annotation$options_.bound) {\n    var _adm$proxy_;\n    value = value.bind((_adm$proxy_ = adm.proxy_) != null ? _adm$proxy_ : adm.target_);\n  }\n  return {\n    value: createAction((_annotation$options_$ = (_annotation$options_2 = annotation.options_) == null ? void 0 : _annotation$options_2.name) != null ? _annotation$options_$ : key.toString(), value, (_annotation$options_$2 = (_annotation$options_3 = annotation.options_) == null ? void 0 : _annotation$options_3.autoAction) != null ? _annotation$options_$2 : false,\n    // https://github.com/mobxjs/mobx/discussions/3140\n    (_annotation$options_4 = annotation.options_) != null && _annotation$options_4.bound ? (_adm$proxy_2 = adm.proxy_) != null ? _adm$proxy_2 : adm.target_ : undefined),\n    // Non-configurable for classes\n    // prevents accidental field redefinition in subclass\n    configurable: safeDescriptors ? adm.isPlainObject_ : true,\n    // https://github.com/mobxjs/mobx/pull/2641#issuecomment-737292058\n    enumerable: false,\n    // Non-obsevable, therefore non-writable\n    // Also prevents rewriting in subclass constructor\n    writable: safeDescriptors ? false : true\n  };\n}\nfunction createFlowAnnotation(name, options) {\n  return {\n    annotationType_: name,\n    options_: options,\n    make_: make_$2,\n    extend_: extend_$2,\n    decorate_20223_: decorate_20223_$2\n  };\n}\nfunction make_$2(adm, key, descriptor, source) {\n  var _this$options_;\n  // own\n  if (source === adm.target_) {\n    return this.extend_(adm, key, descriptor, false) === null ? 0 /* MakeResult.Cancel */ : 2 /* MakeResult.Continue */;\n  }\n  // prototype\n  // bound - must annotate protos to support super.flow()\n  if ((_this$options_ = this.options_) != null && _this$options_.bound && (!hasProp(adm.target_, key) || !isFlow(adm.target_[key]))) {\n    if (this.extend_(adm, key, descriptor, false) === null) {\n      return 0 /* MakeResult.Cancel */;\n    }\n  }\n  if (isFlow(descriptor.value)) {\n    // A prototype could have been annotated already by other constructor,\n    // rest of the proto chain must be annotated already\n    return 1 /* MakeResult.Break */;\n  }\n  var flowDescriptor = createFlowDescriptor(adm, this, key, descriptor, false, false);\n  defineProperty(source, key, flowDescriptor);\n  return 2 /* MakeResult.Continue */;\n}\nfunction extend_$2(adm, key, descriptor, proxyTrap) {\n  var _this$options_2;\n  var flowDescriptor = createFlowDescriptor(adm, this, key, descriptor, (_this$options_2 = this.options_) == null ? void 0 : _this$options_2.bound);\n  return adm.defineProperty_(key, flowDescriptor, proxyTrap);\n}\nfunction decorate_20223_$2(mthd, context) {\n  var _this$options_3;\n  if (false) {}\n  var name = context.name,\n    addInitializer = context.addInitializer;\n  if (!isFlow(mthd)) {\n    mthd = flow(mthd);\n  }\n  if ((_this$options_3 = this.options_) != null && _this$options_3.bound) {\n    addInitializer(function () {\n      var self = this;\n      var bound = self[name].bind(self);\n      bound.isMobXFlow = true;\n      self[name] = bound;\n    });\n  }\n  return mthd;\n}\nfunction assertFlowDescriptor(adm, _ref, key, _ref2) {\n  var annotationType_ = _ref.annotationType_;\n  var value = _ref2.value;\n  if (false) {}\n}\nfunction createFlowDescriptor(adm, annotation, key, descriptor, bound,\n// provides ability to disable safeDescriptors for prototypes\nsafeDescriptors) {\n  if (safeDescriptors === void 0) {\n    safeDescriptors = globalState.safeDescriptors;\n  }\n  assertFlowDescriptor(adm, annotation, key, descriptor);\n  var value = descriptor.value;\n  // In case of flow.bound, the descriptor can be from already annotated prototype\n  if (!isFlow(value)) {\n    value = flow(value);\n  }\n  if (bound) {\n    var _adm$proxy_;\n    // We do not keep original function around, so we bind the existing flow\n    value = value.bind((_adm$proxy_ = adm.proxy_) != null ? _adm$proxy_ : adm.target_);\n    // This is normally set by `flow`, but `bind` returns new function...\n    value.isMobXFlow = true;\n  }\n  return {\n    value: value,\n    // Non-configurable for classes\n    // prevents accidental field redefinition in subclass\n    configurable: safeDescriptors ? adm.isPlainObject_ : true,\n    // https://github.com/mobxjs/mobx/pull/2641#issuecomment-737292058\n    enumerable: false,\n    // Non-obsevable, therefore non-writable\n    // Also prevents rewriting in subclass constructor\n    writable: safeDescriptors ? false : true\n  };\n}\nfunction createComputedAnnotation(name, options) {\n  return {\n    annotationType_: name,\n    options_: options,\n    make_: make_$3,\n    extend_: extend_$3,\n    decorate_20223_: decorate_20223_$3\n  };\n}\nfunction make_$3(adm, key, descriptor) {\n  return this.extend_(adm, key, descriptor, false) === null ? 0 /* MakeResult.Cancel */ : 1 /* MakeResult.Break */;\n}\nfunction extend_$3(adm, key, descriptor, proxyTrap) {\n  assertComputedDescriptor(adm, this, key, descriptor);\n  return adm.defineComputedProperty_(key, mobx_esm_extends({}, this.options_, {\n    get: descriptor.get,\n    set: descriptor.set\n  }), proxyTrap);\n}\nfunction decorate_20223_$3(get, context) {\n  if (false) {}\n  var ann = this;\n  var key = context.name,\n    addInitializer = context.addInitializer;\n  addInitializer(function () {\n    var adm = asObservableObject(this)[$mobx];\n    var options = mobx_esm_extends({}, ann.options_, {\n      get: get,\n      context: this\n    });\n    options.name || (options.name =  false ? 0 : "ObservableObject." + key.toString());\n    adm.values_.set(key, new ComputedValue(options));\n  });\n  return function () {\n    return this[$mobx].getObservablePropValue_(key);\n  };\n}\nfunction assertComputedDescriptor(adm, _ref, key, _ref2) {\n  var annotationType_ = _ref.annotationType_;\n  var get = _ref2.get;\n  if (false) {}\n}\nfunction createObservableAnnotation(name, options) {\n  return {\n    annotationType_: name,\n    options_: options,\n    make_: make_$4,\n    extend_: extend_$4,\n    decorate_20223_: decorate_20223_$4\n  };\n}\nfunction make_$4(adm, key, descriptor) {\n  return this.extend_(adm, key, descriptor, false) === null ? 0 /* MakeResult.Cancel */ : 1 /* MakeResult.Break */;\n}\nfunction extend_$4(adm, key, descriptor, proxyTrap) {\n  var _this$options_$enhanc, _this$options_;\n  assertObservableDescriptor(adm, this, key, descriptor);\n  return adm.defineObservableProperty_(key, descriptor.value, (_this$options_$enhanc = (_this$options_ = this.options_) == null ? void 0 : _this$options_.enhancer) != null ? _this$options_$enhanc : deepEnhancer, proxyTrap);\n}\nfunction decorate_20223_$4(desc, context) {\n  if (false) {}\n  var ann = this;\n  var kind = context.kind,\n    name = context.name;\n  // The laziness here is not ideal... It\'s a workaround to how 2022.3 Decorators are implemented:\n  //   `addInitializer` callbacks are executed _before_ any accessors are defined (instead of the ideal-for-us right after each).\n  //   This means that, if we were to do our stuff in an `addInitializer`, we\'d attempt to read a private slot\n  //   before it has been initialized. The runtime doesn\'t like that and throws a `Cannot read private member\n  //   from an object whose class did not declare it` error.\n  // TODO: it seems that this will not be required anymore in the final version of the spec\n  // See TODO: link\n  var initializedObjects = new WeakSet();\n  function initializeObservable(target, value) {\n    var _ann$options_$enhance, _ann$options_;\n    var adm = asObservableObject(target)[$mobx];\n    var observable = new ObservableValue(value, (_ann$options_$enhance = (_ann$options_ = ann.options_) == null ? void 0 : _ann$options_.enhancer) != null ? _ann$options_$enhance : deepEnhancer,  false ? 0 : "ObservableObject." + name.toString(), false);\n    adm.values_.set(name, observable);\n    initializedObjects.add(target);\n  }\n  if (kind == "accessor") {\n    return {\n      get: function get() {\n        if (!initializedObjects.has(this)) {\n          initializeObservable(this, desc.get.call(this));\n        }\n        return this[$mobx].getObservablePropValue_(name);\n      },\n      set: function set(value) {\n        if (!initializedObjects.has(this)) {\n          initializeObservable(this, value);\n        }\n        return this[$mobx].setObservablePropValue_(name, value);\n      },\n      init: function init(value) {\n        if (!initializedObjects.has(this)) {\n          initializeObservable(this, value);\n        }\n        return value;\n      }\n    };\n  }\n  return;\n}\nfunction assertObservableDescriptor(adm, _ref, key, descriptor) {\n  var annotationType_ = _ref.annotationType_;\n  if (false) {}\n}\nvar AUTO = "true";\nvar autoAnnotation = /*#__PURE__*/createAutoAnnotation();\nfunction createAutoAnnotation(options) {\n  return {\n    annotationType_: AUTO,\n    options_: options,\n    make_: make_$5,\n    extend_: extend_$5,\n    decorate_20223_: decorate_20223_$5\n  };\n}\nfunction make_$5(adm, key, descriptor, source) {\n  var _this$options_3, _this$options_4;\n  // getter -> computed\n  if (descriptor.get) {\n    return computed.make_(adm, key, descriptor, source);\n  }\n  // lone setter -> action setter\n  if (descriptor.set) {\n    // TODO make action applicable to setter and delegate to action.make_\n    var set = createAction(key.toString(), descriptor.set);\n    // own\n    if (source === adm.target_) {\n      return adm.defineProperty_(key, {\n        configurable: globalState.safeDescriptors ? adm.isPlainObject_ : true,\n        set: set\n      }) === null ? 0 /* MakeResult.Cancel */ : 2 /* MakeResult.Continue */;\n    }\n    // proto\n    defineProperty(source, key, {\n      configurable: true,\n      set: set\n    });\n    return 2 /* MakeResult.Continue */;\n  }\n  // function on proto -> autoAction/flow\n  if (source !== adm.target_ && typeof descriptor.value === "function") {\n    var _this$options_2;\n    if (isGenerator(descriptor.value)) {\n      var _this$options_;\n      var flowAnnotation = (_this$options_ = this.options_) != null && _this$options_.autoBind ? flow.bound : flow;\n      return flowAnnotation.make_(adm, key, descriptor, source);\n    }\n    var actionAnnotation = (_this$options_2 = this.options_) != null && _this$options_2.autoBind ? autoAction.bound : autoAction;\n    return actionAnnotation.make_(adm, key, descriptor, source);\n  }\n  // other -> observable\n  // Copy props from proto as well, see test:\n  // "decorate should work with Object.create"\n  var observableAnnotation = ((_this$options_3 = this.options_) == null ? void 0 : _this$options_3.deep) === false ? mobx_esm_observable.ref : mobx_esm_observable;\n  // if function respect autoBind option\n  if (typeof descriptor.value === "function" && (_this$options_4 = this.options_) != null && _this$options_4.autoBind) {\n    var _adm$proxy_;\n    descriptor.value = descriptor.value.bind((_adm$proxy_ = adm.proxy_) != null ? _adm$proxy_ : adm.target_);\n  }\n  return observableAnnotation.make_(adm, key, descriptor, source);\n}\nfunction extend_$5(adm, key, descriptor, proxyTrap) {\n  var _this$options_5, _this$options_6;\n  // getter -> computed\n  if (descriptor.get) {\n    return computed.extend_(adm, key, descriptor, proxyTrap);\n  }\n  // lone setter -> action setter\n  if (descriptor.set) {\n    // TODO make action applicable to setter and delegate to action.extend_\n    return adm.defineProperty_(key, {\n      configurable: globalState.safeDescriptors ? adm.isPlainObject_ : true,\n      set: createAction(key.toString(), descriptor.set)\n    }, proxyTrap);\n  }\n  // other -> observable\n  // if function respect autoBind option\n  if (typeof descriptor.value === "function" && (_this$options_5 = this.options_) != null && _this$options_5.autoBind) {\n    var _adm$proxy_2;\n    descriptor.value = descriptor.value.bind((_adm$proxy_2 = adm.proxy_) != null ? _adm$proxy_2 : adm.target_);\n  }\n  var observableAnnotation = ((_this$options_6 = this.options_) == null ? void 0 : _this$options_6.deep) === false ? mobx_esm_observable.ref : mobx_esm_observable;\n  return observableAnnotation.extend_(adm, key, descriptor, proxyTrap);\n}\nfunction decorate_20223_$5(desc, context) {\n  die("\'" + this.annotationType_ + "\' cannot be used as a decorator");\n}\nvar OBSERVABLE = "observable";\nvar OBSERVABLE_REF = "observable.ref";\nvar OBSERVABLE_SHALLOW = "observable.shallow";\nvar OBSERVABLE_STRUCT = "observable.struct";\n// Predefined bags of create observable options, to avoid allocating temporarily option objects\n// in the majority of cases\nvar defaultCreateObservableOptions = {\n  deep: true,\n  name: undefined,\n  defaultDecorator: undefined,\n  proxy: true\n};\nObject.freeze(defaultCreateObservableOptions);\nfunction asCreateObservableOptions(thing) {\n  return thing || defaultCreateObservableOptions;\n}\nvar observableAnnotation = /*#__PURE__*/createObservableAnnotation(OBSERVABLE);\nvar observableRefAnnotation = /*#__PURE__*/createObservableAnnotation(OBSERVABLE_REF, {\n  enhancer: referenceEnhancer\n});\nvar observableShallowAnnotation = /*#__PURE__*/createObservableAnnotation(OBSERVABLE_SHALLOW, {\n  enhancer: shallowEnhancer\n});\nvar observableStructAnnotation = /*#__PURE__*/createObservableAnnotation(OBSERVABLE_STRUCT, {\n  enhancer: refStructEnhancer\n});\nvar observableDecoratorAnnotation = /*#__PURE__*/createDecoratorAnnotation(observableAnnotation);\nfunction getEnhancerFromOptions(options) {\n  return options.deep === true ? deepEnhancer : options.deep === false ? referenceEnhancer : getEnhancerFromAnnotation(options.defaultDecorator);\n}\nfunction getAnnotationFromOptions(options) {\n  var _options$defaultDecor;\n  return options ? (_options$defaultDecor = options.defaultDecorator) != null ? _options$defaultDecor : createAutoAnnotation(options) : undefined;\n}\nfunction getEnhancerFromAnnotation(annotation) {\n  var _annotation$options_$, _annotation$options_;\n  return !annotation ? deepEnhancer : (_annotation$options_$ = (_annotation$options_ = annotation.options_) == null ? void 0 : _annotation$options_.enhancer) != null ? _annotation$options_$ : deepEnhancer;\n}\n/**\n * Turns an object, array or function into a reactive structure.\n * @param v the value which should become observable.\n */\nfunction createObservable(v, arg2, arg3) {\n  // @observable someProp; (2022.3 Decorators)\n  if (is20223Decorator(arg2)) {\n    return observableAnnotation.decorate_20223_(v, arg2);\n  }\n  // @observable someProp;\n  if (isStringish(arg2)) {\n    storeAnnotation(v, arg2, observableAnnotation);\n    return;\n  }\n  // already observable - ignore\n  if (isObservable(v)) {\n    return v;\n  }\n  // plain object\n  if (isPlainObject(v)) {\n    return mobx_esm_observable.object(v, arg2, arg3);\n  }\n  // Array\n  if (Array.isArray(v)) {\n    return mobx_esm_observable.array(v, arg2);\n  }\n  // Map\n  if (isES6Map(v)) {\n    return mobx_esm_observable.map(v, arg2);\n  }\n  // Set\n  if (isES6Set(v)) {\n    return mobx_esm_observable.set(v, arg2);\n  }\n  // other object - ignore\n  if (typeof v === "object" && v !== null) {\n    return v;\n  }\n  // anything else\n  return mobx_esm_observable.box(v, arg2);\n}\nmobx_esm_assign(createObservable, observableDecoratorAnnotation);\nvar observableFactories = {\n  box: function box(value, options) {\n    var o = asCreateObservableOptions(options);\n    return new ObservableValue(value, getEnhancerFromOptions(o), o.name, true, o.equals);\n  },\n  array: function array(initialValues, options) {\n    var o = asCreateObservableOptions(options);\n    return (globalState.useProxies === false || o.proxy === false ? createLegacyArray : createObservableArray)(initialValues, getEnhancerFromOptions(o), o.name);\n  },\n  map: function map(initialValues, options) {\n    var o = asCreateObservableOptions(options);\n    return new ObservableMap(initialValues, getEnhancerFromOptions(o), o.name);\n  },\n  set: function set(initialValues, options) {\n    var o = asCreateObservableOptions(options);\n    return new ObservableSet(initialValues, getEnhancerFromOptions(o), o.name);\n  },\n  object: function object(props, decorators, options) {\n    return initObservable(function () {\n      return extendObservable(globalState.useProxies === false || (options == null ? void 0 : options.proxy) === false ? asObservableObject({}, options) : asDynamicObservableObject({}, options), props, decorators);\n    });\n  },\n  ref: /*#__PURE__*/createDecoratorAnnotation(observableRefAnnotation),\n  shallow: /*#__PURE__*/createDecoratorAnnotation(observableShallowAnnotation),\n  deep: observableDecoratorAnnotation,\n  struct: /*#__PURE__*/createDecoratorAnnotation(observableStructAnnotation)\n};\n// eslint-disable-next-line\nvar mobx_esm_observable = /*#__PURE__*/mobx_esm_assign(createObservable, observableFactories);\nvar COMPUTED = "computed";\nvar COMPUTED_STRUCT = "computed.struct";\nvar computedAnnotation = /*#__PURE__*/createComputedAnnotation(COMPUTED);\nvar computedStructAnnotation = /*#__PURE__*/createComputedAnnotation(COMPUTED_STRUCT, {\n  equals: comparer.structural\n});\n/**\n * Decorator for class properties: @computed get value() { return expr; }.\n * For legacy purposes also invokable as ES5 observable created: `computed(() => expr)`;\n */\nvar computed = function computed(arg1, arg2) {\n  if (is20223Decorator(arg2)) {\n    // @computed (2022.3 Decorators)\n    return computedAnnotation.decorate_20223_(arg1, arg2);\n  }\n  if (isStringish(arg2)) {\n    // @computed\n    return storeAnnotation(arg1, arg2, computedAnnotation);\n  }\n  if (isPlainObject(arg1)) {\n    // @computed({ options })\n    return createDecoratorAnnotation(createComputedAnnotation(COMPUTED, arg1));\n  }\n  // computed(expr, options?)\n  if (false) {}\n  var opts = isPlainObject(arg2) ? arg2 : {};\n  opts.get = arg1;\n  opts.name || (opts.name = arg1.name || ""); /* for generated name */\n  return new ComputedValue(opts);\n};\nObject.assign(computed, computedAnnotation);\ncomputed.struct = /*#__PURE__*/createDecoratorAnnotation(computedStructAnnotation);\nvar _getDescriptor$config, _getDescriptor;\n// we don\'t use globalState for these in order to avoid possible issues with multiple\n// mobx versions\nvar currentActionId = 0;\nvar nextActionId = 1;\nvar isFunctionNameConfigurable = (_getDescriptor$config = (_getDescriptor = /*#__PURE__*/getDescriptor(function () {}, "name")) == null ? void 0 : _getDescriptor.configurable) != null ? _getDescriptor$config : false;\n// we can safely recycle this object\nvar tmpNameDescriptor = {\n  value: "action",\n  configurable: true,\n  writable: false,\n  enumerable: false\n};\nfunction createAction(actionName, fn, autoAction, ref) {\n  if (autoAction === void 0) {\n    autoAction = false;\n  }\n  if (false) {}\n  function res() {\n    return executeAction(actionName, autoAction, fn, ref || this, arguments);\n  }\n  res.isMobxAction = true;\n  res.toString = function () {\n    return fn.toString();\n  };\n  if (isFunctionNameConfigurable) {\n    tmpNameDescriptor.value = actionName;\n    defineProperty(res, "name", tmpNameDescriptor);\n  }\n  return res;\n}\nfunction executeAction(actionName, canRunAsDerivation, fn, scope, args) {\n  var runInfo = _startAction(actionName, canRunAsDerivation, scope, args);\n  try {\n    return fn.apply(scope, args);\n  } catch (err) {\n    runInfo.error_ = err;\n    throw err;\n  } finally {\n    _endAction(runInfo);\n  }\n}\nfunction _startAction(actionName, canRunAsDerivation,\n// true for autoAction\nscope, args) {\n  var notifySpy_ =  false && 0;\n  var startTime_ = 0;\n  if (false) { var flattenedArgs; }\n  var prevDerivation_ = globalState.trackingDerivation;\n  var runAsAction = !canRunAsDerivation || !prevDerivation_;\n  startBatch();\n  var prevAllowStateChanges_ = globalState.allowStateChanges; // by default preserve previous allow\n  if (runAsAction) {\n    untrackedStart();\n    prevAllowStateChanges_ = allowStateChangesStart(true);\n  }\n  var prevAllowStateReads_ = allowStateReadsStart(true);\n  var runInfo = {\n    runAsAction_: runAsAction,\n    prevDerivation_: prevDerivation_,\n    prevAllowStateChanges_: prevAllowStateChanges_,\n    prevAllowStateReads_: prevAllowStateReads_,\n    notifySpy_: notifySpy_,\n    startTime_: startTime_,\n    actionId_: nextActionId++,\n    parentActionId_: currentActionId\n  };\n  currentActionId = runInfo.actionId_;\n  return runInfo;\n}\nfunction _endAction(runInfo) {\n  if (currentActionId !== runInfo.actionId_) {\n    die(30);\n  }\n  currentActionId = runInfo.parentActionId_;\n  if (runInfo.error_ !== undefined) {\n    globalState.suppressReactionErrors = true;\n  }\n  allowStateChangesEnd(runInfo.prevAllowStateChanges_);\n  allowStateReadsEnd(runInfo.prevAllowStateReads_);\n  endBatch();\n  if (runInfo.runAsAction_) {\n    untrackedEnd(runInfo.prevDerivation_);\n  }\n  if (false) {}\n  globalState.suppressReactionErrors = false;\n}\nfunction allowStateChanges(allowStateChanges, func) {\n  var prev = allowStateChangesStart(allowStateChanges);\n  try {\n    return func();\n  } finally {\n    allowStateChangesEnd(prev);\n  }\n}\nfunction allowStateChangesStart(allowStateChanges) {\n  var prev = globalState.allowStateChanges;\n  globalState.allowStateChanges = allowStateChanges;\n  return prev;\n}\nfunction allowStateChangesEnd(prev) {\n  globalState.allowStateChanges = prev;\n}\nvar _Symbol$toPrimitive;\nvar CREATE = "create";\n_Symbol$toPrimitive = Symbol.toPrimitive;\nvar ObservableValue = /*#__PURE__*/function (_Atom) {\n  _inheritsLoose(ObservableValue, _Atom);\n  function ObservableValue(value, enhancer, name_, notifySpy, equals) {\n    var _this;\n    if (name_ === void 0) {\n      name_ =  false ? 0 : "ObservableValue";\n    }\n    if (notifySpy === void 0) {\n      notifySpy = true;\n    }\n    if (equals === void 0) {\n      equals = comparer["default"];\n    }\n    _this = _Atom.call(this, name_) || this;\n    _this.enhancer = void 0;\n    _this.name_ = void 0;\n    _this.equals = void 0;\n    _this.hasUnreportedChange_ = false;\n    _this.interceptors_ = void 0;\n    _this.changeListeners_ = void 0;\n    _this.value_ = void 0;\n    _this.dehancer = void 0;\n    _this.enhancer = enhancer;\n    _this.name_ = name_;\n    _this.equals = equals;\n    _this.value_ = enhancer(value, undefined, name_);\n    if (false) {}\n    return _this;\n  }\n  var _proto = ObservableValue.prototype;\n  _proto.dehanceValue = function dehanceValue(value) {\n    if (this.dehancer !== undefined) {\n      return this.dehancer(value);\n    }\n    return value;\n  };\n  _proto.set = function set(newValue) {\n    var oldValue = this.value_;\n    newValue = this.prepareNewValue_(newValue);\n    if (newValue !== globalState.UNCHANGED) {\n      var notifySpy = isSpyEnabled();\n      if (false) {}\n      this.setNewValue_(newValue);\n      if (false) {}\n    }\n  };\n  _proto.prepareNewValue_ = function prepareNewValue_(newValue) {\n    checkIfStateModificationsAreAllowed(this);\n    if (hasInterceptors(this)) {\n      var change = interceptChange(this, {\n        object: this,\n        type: UPDATE,\n        newValue: newValue\n      });\n      if (!change) {\n        return globalState.UNCHANGED;\n      }\n      newValue = change.newValue;\n    }\n    // apply modifier\n    newValue = this.enhancer(newValue, this.value_, this.name_);\n    return this.equals(this.value_, newValue) ? globalState.UNCHANGED : newValue;\n  };\n  _proto.setNewValue_ = function setNewValue_(newValue) {\n    var oldValue = this.value_;\n    this.value_ = newValue;\n    this.reportChanged();\n    if (hasListeners(this)) {\n      notifyListeners(this, {\n        type: UPDATE,\n        object: this,\n        newValue: newValue,\n        oldValue: oldValue\n      });\n    }\n  };\n  _proto.get = function get() {\n    this.reportObserved();\n    return this.dehanceValue(this.value_);\n  };\n  _proto.intercept_ = function intercept_(handler) {\n    return registerInterceptor(this, handler);\n  };\n  _proto.observe_ = function observe_(listener, fireImmediately) {\n    if (fireImmediately) {\n      listener({\n        observableKind: "value",\n        debugObjectName: this.name_,\n        object: this,\n        type: UPDATE,\n        newValue: this.value_,\n        oldValue: undefined\n      });\n    }\n    return registerListener(this, listener);\n  };\n  _proto.raw = function raw() {\n    // used by MST ot get undehanced value\n    return this.value_;\n  };\n  _proto.toJSON = function toJSON() {\n    return this.get();\n  };\n  _proto.toString = function toString() {\n    return this.name_ + "[" + this.value_ + "]";\n  };\n  _proto.valueOf = function valueOf() {\n    return toPrimitive(this.get());\n  };\n  _proto[_Symbol$toPrimitive] = function () {\n    return this.valueOf();\n  };\n  return ObservableValue;\n}(Atom);\nvar isObservableValue = /*#__PURE__*/(/* unused pure expression or super */ null && (createInstanceofPredicate("ObservableValue", ObservableValue)));\nvar _Symbol$toPrimitive$1;\n/**\n * A node in the state dependency root that observes other nodes, and can be observed itself.\n *\n * ComputedValue will remember the result of the computation for the duration of the batch, or\n * while being observed.\n *\n * During this time it will recompute only when one of its direct dependencies changed,\n * but only when it is being accessed with `ComputedValue.get()`.\n *\n * Implementation description:\n * 1. First time it\'s being accessed it will compute and remember result\n *    give back remembered result until 2. happens\n * 2. First time any deep dependency change, propagate POSSIBLY_STALE to all observers, wait for 3.\n * 3. When it\'s being accessed, recompute if any shallow dependency changed.\n *    if result changed: propagate STALE to all observers, that were POSSIBLY_STALE from the last step.\n *    go to step 2. either way\n *\n * If at any point it\'s outside batch and it isn\'t observed: reset everything and go to 1.\n */\n_Symbol$toPrimitive$1 = Symbol.toPrimitive;\nvar ComputedValue = /*#__PURE__*/function () {\n  // nodes we are looking at. Our value depends on these nodes\n  // during tracking it\'s an array with new observed observers\n\n  // to check for cycles\n\n  // N.B: unminified as it is used by MST\n\n  /**\n   * Create a new computed value based on a function expression.\n   *\n   * The `name` property is for debug purposes only.\n   *\n   * The `equals` property specifies the comparer function to use to determine if a newly produced\n   * value differs from the previous value. Two comparers are provided in the library; `defaultComparer`\n   * compares based on identity comparison (===), and `structuralComparer` deeply compares the structure.\n   * Structural comparison can be convenient if you always produce a new aggregated object and\n   * don\'t want to notify observers if it is structurally the same.\n   * This is useful for working with vectors, mouse coordinates etc.\n   */\n  function ComputedValue(options) {\n    this.dependenciesState_ = IDerivationState_.NOT_TRACKING_;\n    this.observing_ = [];\n    this.newObserving_ = null;\n    this.isBeingObserved_ = false;\n    this.isPendingUnobservation_ = false;\n    this.observers_ = new Set();\n    this.diffValue_ = 0;\n    this.runId_ = 0;\n    this.lastAccessedBy_ = 0;\n    this.lowestObserverState_ = IDerivationState_.UP_TO_DATE_;\n    this.unboundDepsCount_ = 0;\n    this.value_ = new CaughtException(null);\n    this.name_ = void 0;\n    this.triggeredBy_ = void 0;\n    this.isComputing_ = false;\n    this.isRunningSetter_ = false;\n    this.derivation = void 0;\n    this.setter_ = void 0;\n    this.isTracing_ = TraceMode.NONE;\n    this.scope_ = void 0;\n    this.equals_ = void 0;\n    this.requiresReaction_ = void 0;\n    this.keepAlive_ = void 0;\n    this.onBOL = void 0;\n    this.onBUOL = void 0;\n    if (!options.get) {\n      die(31);\n    }\n    this.derivation = options.get;\n    this.name_ = options.name || ( false ? 0 : "ComputedValue");\n    if (options.set) {\n      this.setter_ = createAction( false ? 0 : "ComputedValue-setter", options.set);\n    }\n    this.equals_ = options.equals || (options.compareStructural || options.struct ? comparer.structural : comparer["default"]);\n    this.scope_ = options.context;\n    this.requiresReaction_ = options.requiresReaction;\n    this.keepAlive_ = !!options.keepAlive;\n  }\n  var _proto = ComputedValue.prototype;\n  _proto.onBecomeStale_ = function onBecomeStale_() {\n    propagateMaybeChanged(this);\n  };\n  _proto.onBO = function onBO() {\n    if (this.onBOL) {\n      this.onBOL.forEach(function (listener) {\n        return listener();\n      });\n    }\n  };\n  _proto.onBUO = function onBUO() {\n    if (this.onBUOL) {\n      this.onBUOL.forEach(function (listener) {\n        return listener();\n      });\n    }\n  }\n  /**\n   * Returns the current value of this computed value.\n   * Will evaluate its computation first if needed.\n   */;\n  _proto.get = function get() {\n    if (this.isComputing_) {\n      die(32, this.name_, this.derivation);\n    }\n    if (globalState.inBatch === 0 &&\n    // !globalState.trackingDerivatpion &&\n    this.observers_.size === 0 && !this.keepAlive_) {\n      if (shouldCompute(this)) {\n        this.warnAboutUntrackedRead_();\n        startBatch(); // See perf test \'computed memoization\'\n        this.value_ = this.computeValue_(false);\n        endBatch();\n      }\n    } else {\n      reportObserved(this);\n      if (shouldCompute(this)) {\n        var prevTrackingContext = globalState.trackingContext;\n        if (this.keepAlive_ && !prevTrackingContext) {\n          globalState.trackingContext = this;\n        }\n        if (this.trackAndCompute()) {\n          propagateChangeConfirmed(this);\n        }\n        globalState.trackingContext = prevTrackingContext;\n      }\n    }\n    var result = this.value_;\n    if (isCaughtException(result)) {\n      throw result.cause;\n    }\n    return result;\n  };\n  _proto.set = function set(value) {\n    if (this.setter_) {\n      if (this.isRunningSetter_) {\n        die(33, this.name_);\n      }\n      this.isRunningSetter_ = true;\n      try {\n        this.setter_.call(this.scope_, value);\n      } finally {\n        this.isRunningSetter_ = false;\n      }\n    } else {\n      die(34, this.name_);\n    }\n  };\n  _proto.trackAndCompute = function trackAndCompute() {\n    // N.B: unminified as it is used by MST\n    var oldValue = this.value_;\n    var wasSuspended = /* see #1208 */this.dependenciesState_ === IDerivationState_.NOT_TRACKING_;\n    var newValue = this.computeValue_(true);\n    var changed = wasSuspended || isCaughtException(oldValue) || isCaughtException(newValue) || !this.equals_(oldValue, newValue);\n    if (changed) {\n      this.value_ = newValue;\n      if (false) {}\n    }\n    return changed;\n  };\n  _proto.computeValue_ = function computeValue_(track) {\n    this.isComputing_ = true;\n    // don\'t allow state changes during computation\n    var prev = allowStateChangesStart(false);\n    var res;\n    if (track) {\n      res = trackDerivedFunction(this, this.derivation, this.scope_);\n    } else {\n      if (globalState.disableErrorBoundaries === true) {\n        res = this.derivation.call(this.scope_);\n      } else {\n        try {\n          res = this.derivation.call(this.scope_);\n        } catch (e) {\n          res = new CaughtException(e);\n        }\n      }\n    }\n    allowStateChangesEnd(prev);\n    this.isComputing_ = false;\n    return res;\n  };\n  _proto.suspend_ = function suspend_() {\n    if (!this.keepAlive_) {\n      clearObserving(this);\n      this.value_ = undefined; // don\'t hold on to computed value!\n      if (false) {}\n    }\n  };\n  _proto.observe_ = function observe_(listener, fireImmediately) {\n    var _this = this;\n    var firstTime = true;\n    var prevValue = undefined;\n    return autorun(function () {\n      // TODO: why is this in a different place than the spyReport() function? in all other observables it\'s called in the same place\n      var newValue = _this.get();\n      if (!firstTime || fireImmediately) {\n        var prevU = untrackedStart();\n        listener({\n          observableKind: "computed",\n          debugObjectName: _this.name_,\n          type: UPDATE,\n          object: _this,\n          newValue: newValue,\n          oldValue: prevValue\n        });\n        untrackedEnd(prevU);\n      }\n      firstTime = false;\n      prevValue = newValue;\n    });\n  };\n  _proto.warnAboutUntrackedRead_ = function warnAboutUntrackedRead_() {\n    if (true) {\n      return;\n    }\n    if (this.isTracing_ !== TraceMode.NONE) {\n      console.log("[mobx.trace] Computed value \'" + this.name_ + "\' is being read outside a reactive context. Doing a full recompute.");\n    }\n    if (typeof this.requiresReaction_ === "boolean" ? this.requiresReaction_ : globalState.computedRequiresReaction) {\n      console.warn("[mobx] Computed value \'" + this.name_ + "\' is being read outside a reactive context. Doing a full recompute.");\n    }\n  };\n  _proto.toString = function toString() {\n    return this.name_ + "[" + this.derivation.toString() + "]";\n  };\n  _proto.valueOf = function valueOf() {\n    return toPrimitive(this.get());\n  };\n  _proto[_Symbol$toPrimitive$1] = function () {\n    return this.valueOf();\n  };\n  return ComputedValue;\n}();\nvar isComputedValue = /*#__PURE__*/createInstanceofPredicate("ComputedValue", ComputedValue);\nvar IDerivationState_;\n(function (IDerivationState_) {\n  // before being run or (outside batch and not being observed)\n  // at this point derivation is not holding any data about dependency tree\n  IDerivationState_[IDerivationState_["NOT_TRACKING_"] = -1] = "NOT_TRACKING_";\n  // no shallow dependency changed since last computation\n  // won\'t recalculate derivation\n  // this is what makes mobx fast\n  IDerivationState_[IDerivationState_["UP_TO_DATE_"] = 0] = "UP_TO_DATE_";\n  // some deep dependency changed, but don\'t know if shallow dependency changed\n  // will require to check first if UP_TO_DATE or POSSIBLY_STALE\n  // currently only ComputedValue will propagate POSSIBLY_STALE\n  //\n  // having this state is second big optimization:\n  // don\'t have to recompute on every dependency change, but only when it\'s needed\n  IDerivationState_[IDerivationState_["POSSIBLY_STALE_"] = 1] = "POSSIBLY_STALE_";\n  // A shallow dependency has changed since last computation and the derivation\n  // will need to recompute when it\'s needed next.\n  IDerivationState_[IDerivationState_["STALE_"] = 2] = "STALE_";\n})(IDerivationState_ || (IDerivationState_ = {}));\nvar TraceMode;\n(function (TraceMode) {\n  TraceMode[TraceMode["NONE"] = 0] = "NONE";\n  TraceMode[TraceMode["LOG"] = 1] = "LOG";\n  TraceMode[TraceMode["BREAK"] = 2] = "BREAK";\n})(TraceMode || (TraceMode = {}));\nvar CaughtException = function CaughtException(cause) {\n  this.cause = void 0;\n  this.cause = cause;\n  // Empty\n};\nfunction isCaughtException(e) {\n  return e instanceof CaughtException;\n}\n/**\n * Finds out whether any dependency of the derivation has actually changed.\n * If dependenciesState is 1 then it will recalculate dependencies,\n * if any dependency changed it will propagate it by changing dependenciesState to 2.\n *\n * By iterating over the dependencies in the same order that they were reported and\n * stopping on the first change, all the recalculations are only called for ComputedValues\n * that will be tracked by derivation. That is because we assume that if the first x\n * dependencies of the derivation doesn\'t change then the derivation should run the same way\n * up until accessing x-th dependency.\n */\nfunction shouldCompute(derivation) {\n  switch (derivation.dependenciesState_) {\n    case IDerivationState_.UP_TO_DATE_:\n      return false;\n    case IDerivationState_.NOT_TRACKING_:\n    case IDerivationState_.STALE_:\n      return true;\n    case IDerivationState_.POSSIBLY_STALE_:\n      {\n        // state propagation can occur outside of action/reactive context #2195\n        var prevAllowStateReads = allowStateReadsStart(true);\n        var prevUntracked = untrackedStart(); // no need for those computeds to be reported, they will be picked up in trackDerivedFunction.\n        var obs = derivation.observing_,\n          l = obs.length;\n        for (var i = 0; i < l; i++) {\n          var obj = obs[i];\n          if (isComputedValue(obj)) {\n            if (globalState.disableErrorBoundaries) {\n              obj.get();\n            } else {\n              try {\n                obj.get();\n              } catch (e) {\n                // we are not interested in the value *or* exception at this moment, but if there is one, notify all\n                untrackedEnd(prevUntracked);\n                allowStateReadsEnd(prevAllowStateReads);\n                return true;\n              }\n            }\n            // if ComputedValue `obj` actually changed it will be computed and propagated to its observers.\n            // and `derivation` is an observer of `obj`\n            // invariantShouldCompute(derivation)\n            if (derivation.dependenciesState_ === IDerivationState_.STALE_) {\n              untrackedEnd(prevUntracked);\n              allowStateReadsEnd(prevAllowStateReads);\n              return true;\n            }\n          }\n        }\n        changeDependenciesStateTo0(derivation);\n        untrackedEnd(prevUntracked);\n        allowStateReadsEnd(prevAllowStateReads);\n        return false;\n      }\n  }\n}\nfunction isComputingDerivation() {\n  return globalState.trackingDerivation !== null; // filter out actions inside computations\n}\nfunction checkIfStateModificationsAreAllowed(atom) {\n  if (true) {\n    return;\n  }\n  var hasObservers = atom.observers_.size > 0;\n  // Should not be possible to change observed state outside strict mode, except during initialization, see #563\n  if (!globalState.allowStateChanges && (hasObservers || globalState.enforceActions === "always")) {\n    console.warn("[MobX] " + (globalState.enforceActions ? "Since strict-mode is enabled, changing (observed) observable values without using an action is not allowed. Tried to modify: " : "Side effects like changing state are not allowed at this point. Are you trying to modify state from, for example, a computed value or the render function of a React component? You can wrap side effects in \'runInAction\' (or decorate functions with \'action\') if needed. Tried to modify: ") + atom.name_);\n  }\n}\nfunction checkIfStateReadsAreAllowed(observable) {\n  if (false) {}\n}\n/**\n * Executes the provided function `f` and tracks which observables are being accessed.\n * The tracking information is stored on the `derivation` object and the derivation is registered\n * as observer of any of the accessed observables.\n */\nfunction trackDerivedFunction(derivation, f, context) {\n  var prevAllowStateReads = allowStateReadsStart(true);\n  changeDependenciesStateTo0(derivation);\n  // Preallocate array; will be trimmed by bindDependencies.\n  derivation.newObserving_ = new Array(\n  // Reserve constant space for initial dependencies, dynamic space otherwise.\n  // See https://github.com/mobxjs/mobx/pull/3833\n  derivation.runId_ === 0 ? 100 : derivation.observing_.length);\n  derivation.unboundDepsCount_ = 0;\n  derivation.runId_ = ++globalState.runId;\n  var prevTracking = globalState.trackingDerivation;\n  globalState.trackingDerivation = derivation;\n  globalState.inBatch++;\n  var result;\n  if (globalState.disableErrorBoundaries === true) {\n    result = f.call(context);\n  } else {\n    try {\n      result = f.call(context);\n    } catch (e) {\n      result = new CaughtException(e);\n    }\n  }\n  globalState.inBatch--;\n  globalState.trackingDerivation = prevTracking;\n  bindDependencies(derivation);\n  warnAboutDerivationWithoutDependencies(derivation);\n  allowStateReadsEnd(prevAllowStateReads);\n  return result;\n}\nfunction warnAboutDerivationWithoutDependencies(derivation) {\n  if (true) {\n    return;\n  }\n  if (derivation.observing_.length !== 0) {\n    return;\n  }\n  if (typeof derivation.requiresObservable_ === "boolean" ? derivation.requiresObservable_ : globalState.reactionRequiresObservable) {\n    console.warn("[mobx] Derivation \'" + derivation.name_ + "\' is created/updated without reading any observable value.");\n  }\n}\n/**\n * diffs newObserving with observing.\n * update observing to be newObserving with unique observables\n * notify observers that become observed/unobserved\n */\nfunction bindDependencies(derivation) {\n  // invariant(derivation.dependenciesState !== IDerivationState.NOT_TRACKING, "INTERNAL ERROR bindDependencies expects derivation.dependenciesState !== -1");\n  var prevObserving = derivation.observing_;\n  var observing = derivation.observing_ = derivation.newObserving_;\n  var lowestNewObservingDerivationState = IDerivationState_.UP_TO_DATE_;\n  // Go through all new observables and check diffValue: (this list can contain duplicates):\n  //   0: first occurrence, change to 1 and keep it\n  //   1: extra occurrence, drop it\n  var i0 = 0,\n    l = derivation.unboundDepsCount_;\n  for (var i = 0; i < l; i++) {\n    var dep = observing[i];\n    if (dep.diffValue_ === 0) {\n      dep.diffValue_ = 1;\n      if (i0 !== i) {\n        observing[i0] = dep;\n      }\n      i0++;\n    }\n    // Upcast is \'safe\' here, because if dep is IObservable, `dependenciesState` will be undefined,\n    // not hitting the condition\n    if (dep.dependenciesState_ > lowestNewObservingDerivationState) {\n      lowestNewObservingDerivationState = dep.dependenciesState_;\n    }\n  }\n  observing.length = i0;\n  derivation.newObserving_ = null; // newObserving shouldn\'t be needed outside tracking (statement moved down to work around FF bug, see #614)\n  // Go through all old observables and check diffValue: (it is unique after last bindDependencies)\n  //   0: it\'s not in new observables, unobserve it\n  //   1: it keeps being observed, don\'t want to notify it. change to 0\n  l = prevObserving.length;\n  while (l--) {\n    var _dep = prevObserving[l];\n    if (_dep.diffValue_ === 0) {\n      removeObserver(_dep, derivation);\n    }\n    _dep.diffValue_ = 0;\n  }\n  // Go through all new observables and check diffValue: (now it should be unique)\n  //   0: it was set to 0 in last loop. don\'t need to do anything.\n  //   1: it wasn\'t observed, let\'s observe it. set back to 0\n  while (i0--) {\n    var _dep2 = observing[i0];\n    if (_dep2.diffValue_ === 1) {\n      _dep2.diffValue_ = 0;\n      addObserver(_dep2, derivation);\n    }\n  }\n  // Some new observed derivations may become stale during this derivation computation\n  // so they have had no chance to propagate staleness (#916)\n  if (lowestNewObservingDerivationState !== IDerivationState_.UP_TO_DATE_) {\n    derivation.dependenciesState_ = lowestNewObservingDerivationState;\n    derivation.onBecomeStale_();\n  }\n}\nfunction clearObserving(derivation) {\n  // invariant(globalState.inBatch > 0, "INTERNAL ERROR clearObserving should be called only inside batch");\n  var obs = derivation.observing_;\n  derivation.observing_ = [];\n  var i = obs.length;\n  while (i--) {\n    removeObserver(obs[i], derivation);\n  }\n  derivation.dependenciesState_ = IDerivationState_.NOT_TRACKING_;\n}\nfunction untracked(action) {\n  var prev = untrackedStart();\n  try {\n    return action();\n  } finally {\n    untrackedEnd(prev);\n  }\n}\nfunction untrackedStart() {\n  var prev = globalState.trackingDerivation;\n  globalState.trackingDerivation = null;\n  return prev;\n}\nfunction untrackedEnd(prev) {\n  globalState.trackingDerivation = prev;\n}\nfunction allowStateReadsStart(allowStateReads) {\n  var prev = globalState.allowStateReads;\n  globalState.allowStateReads = allowStateReads;\n  return prev;\n}\nfunction allowStateReadsEnd(prev) {\n  globalState.allowStateReads = prev;\n}\n/**\n * needed to keep `lowestObserverState` correct. when changing from (2 or 1) to 0\n *\n */\nfunction changeDependenciesStateTo0(derivation) {\n  if (derivation.dependenciesState_ === IDerivationState_.UP_TO_DATE_) {\n    return;\n  }\n  derivation.dependenciesState_ = IDerivationState_.UP_TO_DATE_;\n  var obs = derivation.observing_;\n  var i = obs.length;\n  while (i--) {\n    obs[i].lowestObserverState_ = IDerivationState_.UP_TO_DATE_;\n  }\n}\n\n/**\n * These values will persist if global state is reset\n */\nvar persistentKeys = (/* unused pure expression or super */ null && (["mobxGuid", "spyListeners", "enforceActions", "computedRequiresReaction", "reactionRequiresObservable", "observableRequiresReaction", "allowStateReads", "disableErrorBoundaries", "runId", "UNCHANGED", "useProxies"]));\nvar MobXGlobals = function MobXGlobals() {\n  this.version = 6;\n  this.UNCHANGED = {};\n  this.trackingDerivation = null;\n  this.trackingContext = null;\n  this.runId = 0;\n  this.mobxGuid = 0;\n  this.inBatch = 0;\n  this.pendingUnobservations = [];\n  this.pendingReactions = [];\n  this.isRunningReactions = false;\n  this.allowStateChanges = false;\n  this.allowStateReads = true;\n  this.enforceActions = true;\n  this.spyListeners = [];\n  this.globalReactionErrorHandlers = [];\n  this.computedRequiresReaction = false;\n  this.reactionRequiresObservable = false;\n  this.observableRequiresReaction = false;\n  this.disableErrorBoundaries = false;\n  this.suppressReactionErrors = false;\n  this.useProxies = true;\n  this.verifyProxies = false;\n  this.safeDescriptors = true;\n};\nvar canMergeGlobalState = true;\nvar isolateCalled = false;\nvar globalState = /*#__PURE__*/function () {\n  var global = /*#__PURE__*/getGlobal();\n  if (global.__mobxInstanceCount > 0 && !global.__mobxGlobals) {\n    canMergeGlobalState = false;\n  }\n  if (global.__mobxGlobals && global.__mobxGlobals.version !== new MobXGlobals().version) {\n    canMergeGlobalState = false;\n  }\n  if (!canMergeGlobalState) {\n    // Because this is a IIFE we need to let isolateCalled a chance to change\n    // so we run it after the event loop completed at least 1 iteration\n    setTimeout(function () {\n      if (!isolateCalled) {\n        die(35);\n      }\n    }, 1);\n    return new MobXGlobals();\n  } else if (global.__mobxGlobals) {\n    global.__mobxInstanceCount += 1;\n    if (!global.__mobxGlobals.UNCHANGED) {\n      global.__mobxGlobals.UNCHANGED = {};\n    } // make merge backward compatible\n    return global.__mobxGlobals;\n  } else {\n    global.__mobxInstanceCount = 1;\n    return global.__mobxGlobals = /*#__PURE__*/new MobXGlobals();\n  }\n}();\nfunction isolateGlobalState() {\n  if (globalState.pendingReactions.length || globalState.inBatch || globalState.isRunningReactions) {\n    die(36);\n  }\n  isolateCalled = true;\n  if (canMergeGlobalState) {\n    var global = getGlobal();\n    if (--global.__mobxInstanceCount === 0) {\n      global.__mobxGlobals = undefined;\n    }\n    globalState = new MobXGlobals();\n  }\n}\nfunction getGlobalState() {\n  return globalState;\n}\n/**\n * For testing purposes only; this will break the internal state of existing observables,\n * but can be used to get back at a stable state after throwing errors\n */\nfunction resetGlobalState() {\n  var defaultGlobals = new MobXGlobals();\n  for (var key in defaultGlobals) {\n    if (persistentKeys.indexOf(key) === -1) {\n      globalState[key] = defaultGlobals[key];\n    }\n  }\n  globalState.allowStateChanges = !globalState.enforceActions;\n}\nfunction hasObservers(observable) {\n  return observable.observers_ && observable.observers_.size > 0;\n}\nfunction getObservers(observable) {\n  return observable.observers_;\n}\n// function invariantObservers(observable: IObservable) {\n//     const list = observable.observers\n//     const map = observable.observersIndexes\n//     const l = list.length\n//     for (let i = 0; i < l; i++) {\n//         const id = list[i].__mapid\n//         if (i) {\n//             invariant(map[id] === i, "INTERNAL ERROR maps derivation.__mapid to index in list") // for performance\n//         } else {\n//             invariant(!(id in map), "INTERNAL ERROR observer on index 0 shouldn\'t be held in map.") // for performance\n//         }\n//     }\n//     invariant(\n//         list.length === 0 || Object.keys(map).length === list.length - 1,\n//         "INTERNAL ERROR there is no junk in map"\n//     )\n// }\nfunction addObserver(observable, node) {\n  // invariant(node.dependenciesState !== -1, "INTERNAL ERROR, can add only dependenciesState !== -1");\n  // invariant(observable._observers.indexOf(node) === -1, "INTERNAL ERROR add already added node");\n  // invariantObservers(observable);\n  observable.observers_.add(node);\n  if (observable.lowestObserverState_ > node.dependenciesState_) {\n    observable.lowestObserverState_ = node.dependenciesState_;\n  }\n  // invariantObservers(observable);\n  // invariant(observable._observers.indexOf(node) !== -1, "INTERNAL ERROR didn\'t add node");\n}\nfunction removeObserver(observable, node) {\n  // invariant(globalState.inBatch > 0, "INTERNAL ERROR, remove should be called only inside batch");\n  // invariant(observable._observers.indexOf(node) !== -1, "INTERNAL ERROR remove already removed node");\n  // invariantObservers(observable);\n  observable.observers_["delete"](node);\n  if (observable.observers_.size === 0) {\n    // deleting last observer\n    queueForUnobservation(observable);\n  }\n  // invariantObservers(observable);\n  // invariant(observable._observers.indexOf(node) === -1, "INTERNAL ERROR remove already removed node2");\n}\nfunction queueForUnobservation(observable) {\n  if (observable.isPendingUnobservation_ === false) {\n    // invariant(observable._observers.length === 0, "INTERNAL ERROR, should only queue for unobservation unobserved observables");\n    observable.isPendingUnobservation_ = true;\n    globalState.pendingUnobservations.push(observable);\n  }\n}\n/**\n * Batch starts a transaction, at least for purposes of memoizing ComputedValues when nothing else does.\n * During a batch `onBecomeUnobserved` will be called at most once per observable.\n * Avoids unnecessary recalculations.\n */\nfunction startBatch() {\n  globalState.inBatch++;\n}\nfunction endBatch() {\n  if (--globalState.inBatch === 0) {\n    runReactions();\n    // the batch is actually about to finish, all unobserving should happen here.\n    var list = globalState.pendingUnobservations;\n    for (var i = 0; i < list.length; i++) {\n      var observable = list[i];\n      observable.isPendingUnobservation_ = false;\n      if (observable.observers_.size === 0) {\n        if (observable.isBeingObserved_) {\n          // if this observable had reactive observers, trigger the hooks\n          observable.isBeingObserved_ = false;\n          observable.onBUO();\n        }\n        if (observable instanceof ComputedValue) {\n          // computed values are automatically teared down when the last observer leaves\n          // this process happens recursively, this computed might be the last observabe of another, etc..\n          observable.suspend_();\n        }\n      }\n    }\n    globalState.pendingUnobservations = [];\n  }\n}\nfunction reportObserved(observable) {\n  checkIfStateReadsAreAllowed(observable);\n  var derivation = globalState.trackingDerivation;\n  if (derivation !== null) {\n    /**\n     * Simple optimization, give each derivation run an unique id (runId)\n     * Check if last time this observable was accessed the same runId is used\n     * if this is the case, the relation is already known\n     */\n    if (derivation.runId_ !== observable.lastAccessedBy_) {\n      observable.lastAccessedBy_ = derivation.runId_;\n      // Tried storing newObserving, or observing, or both as Set, but performance didn\'t come close...\n      derivation.newObserving_[derivation.unboundDepsCount_++] = observable;\n      if (!observable.isBeingObserved_ && globalState.trackingContext) {\n        observable.isBeingObserved_ = true;\n        observable.onBO();\n      }\n    }\n    return observable.isBeingObserved_;\n  } else if (observable.observers_.size === 0 && globalState.inBatch > 0) {\n    queueForUnobservation(observable);\n  }\n  return false;\n}\n// function invariantLOS(observable: IObservable, msg: string) {\n//     // it\'s expensive so better not run it in produciton. but temporarily helpful for testing\n//     const min = getObservers(observable).reduce((a, b) => Math.min(a, b.dependenciesState), 2)\n//     if (min >= observable.lowestObserverState) return // <- the only assumption about `lowestObserverState`\n//     throw new Error(\n//         "lowestObserverState is wrong for " +\n//             msg +\n//             " because " +\n//             min +\n//             " < " +\n//             observable.lowestObserverState\n//     )\n// }\n/**\n * NOTE: current propagation mechanism will in case of self reruning autoruns behave unexpectedly\n * It will propagate changes to observers from previous run\n * It\'s hard or maybe impossible (with reasonable perf) to get it right with current approach\n * Hopefully self reruning autoruns aren\'t a feature people should depend on\n * Also most basic use cases should be ok\n */\n// Called by Atom when its value changes\nfunction propagateChanged(observable) {\n  // invariantLOS(observable, "changed start");\n  if (observable.lowestObserverState_ === IDerivationState_.STALE_) {\n    return;\n  }\n  observable.lowestObserverState_ = IDerivationState_.STALE_;\n  // Ideally we use for..of here, but the downcompiled version is really slow...\n  observable.observers_.forEach(function (d) {\n    if (d.dependenciesState_ === IDerivationState_.UP_TO_DATE_) {\n      if (false) {}\n      d.onBecomeStale_();\n    }\n    d.dependenciesState_ = IDerivationState_.STALE_;\n  });\n  // invariantLOS(observable, "changed end");\n}\n// Called by ComputedValue when it recalculate and its value changed\nfunction propagateChangeConfirmed(observable) {\n  // invariantLOS(observable, "confirmed start");\n  if (observable.lowestObserverState_ === IDerivationState_.STALE_) {\n    return;\n  }\n  observable.lowestObserverState_ = IDerivationState_.STALE_;\n  observable.observers_.forEach(function (d) {\n    if (d.dependenciesState_ === IDerivationState_.POSSIBLY_STALE_) {\n      d.dependenciesState_ = IDerivationState_.STALE_;\n      if (false) {}\n    } else if (d.dependenciesState_ === IDerivationState_.UP_TO_DATE_ // this happens during computing of `d`, just keep lowestObserverState up to date.\n    ) {\n      observable.lowestObserverState_ = IDerivationState_.UP_TO_DATE_;\n    }\n  });\n  // invariantLOS(observable, "confirmed end");\n}\n// Used by computed when its dependency changed, but we don\'t wan\'t to immediately recompute.\nfunction propagateMaybeChanged(observable) {\n  // invariantLOS(observable, "maybe start");\n  if (observable.lowestObserverState_ !== IDerivationState_.UP_TO_DATE_) {\n    return;\n  }\n  observable.lowestObserverState_ = IDerivationState_.POSSIBLY_STALE_;\n  observable.observers_.forEach(function (d) {\n    if (d.dependenciesState_ === IDerivationState_.UP_TO_DATE_) {\n      d.dependenciesState_ = IDerivationState_.POSSIBLY_STALE_;\n      d.onBecomeStale_();\n    }\n  });\n  // invariantLOS(observable, "maybe end");\n}\nfunction logTraceInfo(derivation, observable) {\n  console.log("[mobx.trace] \'" + derivation.name_ + "\' is invalidated due to a change in: \'" + observable.name_ + "\'");\n  if (derivation.isTracing_ === TraceMode.BREAK) {\n    var lines = [];\n    printDepTree(getDependencyTree(derivation), lines, 1);\n    // prettier-ignore\n    new Function("debugger;\\n/*\\nTracing \'" + derivation.name_ + "\'\\n\\nYou are entering this break point because derivation \'" + derivation.name_ + "\' is being traced and \'" + observable.name_ + "\' is now forcing it to update.\\nJust follow the stacktrace you should now see in the devtools to see precisely what piece of your code is causing this update\\nThe stackframe you are looking for is at least ~6-8 stack-frames up.\\n\\n" + (derivation instanceof ComputedValue ? derivation.derivation.toString().replace(/[*]\\//g, "/") : "") + "\\n\\nThe dependencies for this derivation are:\\n\\n" + lines.join("\\n") + "\\n*/\\n    ")();\n  }\n}\nfunction printDepTree(tree, lines, depth) {\n  if (lines.length >= 1000) {\n    lines.push("(and many more)");\n    return;\n  }\n  lines.push("" + "\\t".repeat(depth - 1) + tree.name);\n  if (tree.dependencies) {\n    tree.dependencies.forEach(function (child) {\n      return printDepTree(child, lines, depth + 1);\n    });\n  }\n}\nvar Reaction = /*#__PURE__*/function () {\n  // nodes we are looking at. Our value depends on these nodes\n\n  function Reaction(name_, onInvalidate_, errorHandler_, requiresObservable_) {\n    if (name_ === void 0) {\n      name_ =  false ? 0 : "Reaction";\n    }\n    this.name_ = void 0;\n    this.onInvalidate_ = void 0;\n    this.errorHandler_ = void 0;\n    this.requiresObservable_ = void 0;\n    this.observing_ = [];\n    this.newObserving_ = [];\n    this.dependenciesState_ = IDerivationState_.NOT_TRACKING_;\n    this.diffValue_ = 0;\n    this.runId_ = 0;\n    this.unboundDepsCount_ = 0;\n    this.isDisposed_ = false;\n    this.isScheduled_ = false;\n    this.isTrackPending_ = false;\n    this.isRunning_ = false;\n    this.isTracing_ = TraceMode.NONE;\n    this.name_ = name_;\n    this.onInvalidate_ = onInvalidate_;\n    this.errorHandler_ = errorHandler_;\n    this.requiresObservable_ = requiresObservable_;\n  }\n  var _proto = Reaction.prototype;\n  _proto.onBecomeStale_ = function onBecomeStale_() {\n    this.schedule_();\n  };\n  _proto.schedule_ = function schedule_() {\n    if (!this.isScheduled_) {\n      this.isScheduled_ = true;\n      globalState.pendingReactions.push(this);\n      runReactions();\n    }\n  };\n  _proto.isScheduled = function isScheduled() {\n    return this.isScheduled_;\n  }\n  /**\n   * internal, use schedule() if you intend to kick off a reaction\n   */;\n  _proto.runReaction_ = function runReaction_() {\n    if (!this.isDisposed_) {\n      startBatch();\n      this.isScheduled_ = false;\n      var prev = globalState.trackingContext;\n      globalState.trackingContext = this;\n      if (shouldCompute(this)) {\n        this.isTrackPending_ = true;\n        try {\n          this.onInvalidate_();\n          if (false) {}\n        } catch (e) {\n          this.reportExceptionInDerivation_(e);\n        }\n      }\n      globalState.trackingContext = prev;\n      endBatch();\n    }\n  };\n  _proto.track = function track(fn) {\n    if (this.isDisposed_) {\n      return;\n      // console.warn("Reaction already disposed") // Note: Not a warning / error in mobx 4 either\n    }\n    startBatch();\n    var notify = isSpyEnabled();\n    var startTime;\n    if (false) {}\n    this.isRunning_ = true;\n    var prevReaction = globalState.trackingContext; // reactions could create reactions...\n    globalState.trackingContext = this;\n    var result = trackDerivedFunction(this, fn, undefined);\n    globalState.trackingContext = prevReaction;\n    this.isRunning_ = false;\n    this.isTrackPending_ = false;\n    if (this.isDisposed_) {\n      // disposed during last run. Clean up everything that was bound after the dispose call.\n      clearObserving(this);\n    }\n    if (isCaughtException(result)) {\n      this.reportExceptionInDerivation_(result.cause);\n    }\n    if (false) {}\n    endBatch();\n  };\n  _proto.reportExceptionInDerivation_ = function reportExceptionInDerivation_(error) {\n    var _this = this;\n    if (this.errorHandler_) {\n      this.errorHandler_(error, this);\n      return;\n    }\n    if (globalState.disableErrorBoundaries) {\n      throw error;\n    }\n    var message =  false ? 0 : "[mobx] uncaught error in \'" + this + "\'";\n    if (!globalState.suppressReactionErrors) {\n      console.error(message, error);\n      /** If debugging brought you here, please, read the above message :-). Tnx! */\n    } else if (false) {} // prettier-ignore\n    if (false) {}\n    globalState.globalReactionErrorHandlers.forEach(function (f) {\n      return f(error, _this);\n    });\n  };\n  _proto.dispose = function dispose() {\n    if (!this.isDisposed_) {\n      this.isDisposed_ = true;\n      if (!this.isRunning_) {\n        // if disposed while running, clean up later. Maybe not optimal, but rare case\n        startBatch();\n        clearObserving(this);\n        endBatch();\n      }\n    }\n  };\n  _proto.getDisposer_ = function getDisposer_(abortSignal) {\n    var _this2 = this;\n    var dispose = function dispose() {\n      _this2.dispose();\n      abortSignal == null ? void 0 : abortSignal.removeEventListener == null ? void 0 : abortSignal.removeEventListener("abort", dispose);\n    };\n    abortSignal == null ? void 0 : abortSignal.addEventListener == null ? void 0 : abortSignal.addEventListener("abort", dispose);\n    dispose[$mobx] = this;\n    return dispose;\n  };\n  _proto.toString = function toString() {\n    return "Reaction[" + this.name_ + "]";\n  };\n  _proto.trace = function trace$1(enterBreakPoint) {\n    if (enterBreakPoint === void 0) {\n      enterBreakPoint = false;\n    }\n    trace(this, enterBreakPoint);\n  };\n  return Reaction;\n}();\nfunction onReactionError(handler) {\n  globalState.globalReactionErrorHandlers.push(handler);\n  return function () {\n    var idx = globalState.globalReactionErrorHandlers.indexOf(handler);\n    if (idx >= 0) {\n      globalState.globalReactionErrorHandlers.splice(idx, 1);\n    }\n  };\n}\n/**\n * Magic number alert!\n * Defines within how many times a reaction is allowed to re-trigger itself\n * until it is assumed that this is gonna be a never ending loop...\n */\nvar MAX_REACTION_ITERATIONS = 100;\nvar reactionScheduler = function reactionScheduler(f) {\n  return f();\n};\nfunction runReactions() {\n  // Trampolining, if runReactions are already running, new reactions will be picked up\n  if (globalState.inBatch > 0 || globalState.isRunningReactions) {\n    return;\n  }\n  reactionScheduler(runReactionsHelper);\n}\nfunction runReactionsHelper() {\n  globalState.isRunningReactions = true;\n  var allReactions = globalState.pendingReactions;\n  var iterations = 0;\n  // While running reactions, new reactions might be triggered.\n  // Hence we work with two variables and check whether\n  // we converge to no remaining reactions after a while.\n  while (allReactions.length > 0) {\n    if (++iterations === MAX_REACTION_ITERATIONS) {\n      console.error( false ? 0 : "[mobx] cycle in reaction: " + allReactions[0]);\n      allReactions.splice(0); // clear reactions\n    }\n    var remainingReactions = allReactions.splice(0);\n    for (var i = 0, l = remainingReactions.length; i < l; i++) {\n      remainingReactions[i].runReaction_();\n    }\n  }\n  globalState.isRunningReactions = false;\n}\nvar isReaction = /*#__PURE__*/createInstanceofPredicate("Reaction", Reaction);\nfunction setReactionScheduler(fn) {\n  var baseScheduler = reactionScheduler;\n  reactionScheduler = function reactionScheduler(f) {\n    return fn(function () {\n      return baseScheduler(f);\n    });\n  };\n}\nfunction isSpyEnabled() {\n  return  false && 0;\n}\nfunction spyReport(event) {\n  if (true) {\n    return;\n  } // dead code elimination can do the rest\n  if (!globalState.spyListeners.length) {\n    return;\n  }\n  var listeners = globalState.spyListeners;\n  for (var i = 0, l = listeners.length; i < l; i++) {\n    listeners[i](event);\n  }\n}\nfunction spyReportStart(event) {\n  if (true) {\n    return;\n  }\n  var change = mobx_esm_extends({}, event, {\n    spyReportStart: true\n  });\n  spyReport(change);\n}\nvar END_EVENT = {\n  type: "report-end",\n  spyReportEnd: true\n};\nfunction spyReportEnd(change) {\n  if (true) {\n    return;\n  }\n  if (change) {\n    spyReport(mobx_esm_extends({}, change, {\n      type: "report-end",\n      spyReportEnd: true\n    }));\n  } else {\n    spyReport(END_EVENT);\n  }\n}\nfunction spy(listener) {\n  if (true) {\n    console.warn("[mobx.spy] Is a no-op in production builds");\n    return function () {};\n  } else {}\n}\nvar ACTION = "action";\nvar ACTION_BOUND = "action.bound";\nvar AUTOACTION = "autoAction";\nvar AUTOACTION_BOUND = "autoAction.bound";\nvar DEFAULT_ACTION_NAME = "<unnamed action>";\nvar actionAnnotation = /*#__PURE__*/createActionAnnotation(ACTION);\nvar actionBoundAnnotation = /*#__PURE__*/createActionAnnotation(ACTION_BOUND, {\n  bound: true\n});\nvar autoActionAnnotation = /*#__PURE__*/createActionAnnotation(AUTOACTION, {\n  autoAction: true\n});\nvar autoActionBoundAnnotation = /*#__PURE__*/createActionAnnotation(AUTOACTION_BOUND, {\n  autoAction: true,\n  bound: true\n});\nfunction createActionFactory(autoAction) {\n  var res = function action(arg1, arg2) {\n    // action(fn() {})\n    if (isFunction(arg1)) {\n      return createAction(arg1.name || DEFAULT_ACTION_NAME, arg1, autoAction);\n    }\n    // action("name", fn() {})\n    if (isFunction(arg2)) {\n      return createAction(arg1, arg2, autoAction);\n    }\n    // @action (2022.3 Decorators)\n    if (is20223Decorator(arg2)) {\n      return (autoAction ? autoActionAnnotation : actionAnnotation).decorate_20223_(arg1, arg2);\n    }\n    // @action\n    if (isStringish(arg2)) {\n      return storeAnnotation(arg1, arg2, autoAction ? autoActionAnnotation : actionAnnotation);\n    }\n    // action("name") & @action("name")\n    if (isStringish(arg1)) {\n      return createDecoratorAnnotation(createActionAnnotation(autoAction ? AUTOACTION : ACTION, {\n        name: arg1,\n        autoAction: autoAction\n      }));\n    }\n    if (false) {}\n  };\n  return res;\n}\nvar action = /*#__PURE__*/createActionFactory(false);\nObject.assign(action, actionAnnotation);\nvar autoAction = /*#__PURE__*/createActionFactory(true);\nObject.assign(autoAction, autoActionAnnotation);\naction.bound = /*#__PURE__*/createDecoratorAnnotation(actionBoundAnnotation);\nautoAction.bound = /*#__PURE__*/createDecoratorAnnotation(autoActionBoundAnnotation);\nfunction mobx_esm_runInAction(fn) {\n  return executeAction(fn.name || DEFAULT_ACTION_NAME, false, fn, this, undefined);\n}\nfunction isAction(thing) {\n  return isFunction(thing) && thing.isMobxAction === true;\n}\n\n/**\n * Creates a named reactive view and keeps it alive, so that the view is always\n * updated if one of the dependencies changes, even when the view is not further used by something else.\n * @param view The reactive view\n * @returns disposer function, which can be used to stop the view from being updated in the future.\n */\nfunction autorun(view, opts) {\n  var _opts$name, _opts, _opts2, _opts2$signal, _opts3;\n  if (opts === void 0) {\n    opts = EMPTY_OBJECT;\n  }\n  if (false) {}\n  var name = (_opts$name = (_opts = opts) == null ? void 0 : _opts.name) != null ? _opts$name :  false ? 0 : "Autorun";\n  var runSync = !opts.scheduler && !opts.delay;\n  var reaction;\n  if (runSync) {\n    // normal autorun\n    reaction = new Reaction(name, function () {\n      this.track(reactionRunner);\n    }, opts.onError, opts.requiresObservable);\n  } else {\n    var scheduler = createSchedulerFromOptions(opts);\n    // debounced autorun\n    var isScheduled = false;\n    reaction = new Reaction(name, function () {\n      if (!isScheduled) {\n        isScheduled = true;\n        scheduler(function () {\n          isScheduled = false;\n          if (!reaction.isDisposed_) {\n            reaction.track(reactionRunner);\n          }\n        });\n      }\n    }, opts.onError, opts.requiresObservable);\n  }\n  function reactionRunner() {\n    view(reaction);\n  }\n  if (!((_opts2 = opts) != null && (_opts2$signal = _opts2.signal) != null && _opts2$signal.aborted)) {\n    reaction.schedule_();\n  }\n  return reaction.getDisposer_((_opts3 = opts) == null ? void 0 : _opts3.signal);\n}\nvar run = function run(f) {\n  return f();\n};\nfunction createSchedulerFromOptions(opts) {\n  return opts.scheduler ? opts.scheduler : opts.delay ? function (f) {\n    return setTimeout(f, opts.delay);\n  } : run;\n}\nfunction reaction(expression, effect, opts) {\n  var _opts$name2, _opts4, _opts4$signal, _opts5;\n  if (opts === void 0) {\n    opts = EMPTY_OBJECT;\n  }\n  if (false) {}\n  var name = (_opts$name2 = opts.name) != null ? _opts$name2 :  false ? 0 : "Reaction";\n  var effectAction = action(name, opts.onError ? wrapErrorHandler(opts.onError, effect) : effect);\n  var runSync = !opts.scheduler && !opts.delay;\n  var scheduler = createSchedulerFromOptions(opts);\n  var firstTime = true;\n  var isScheduled = false;\n  var value;\n  var equals = opts.compareStructural ? comparer.structural : opts.equals || comparer["default"];\n  var r = new Reaction(name, function () {\n    if (firstTime || runSync) {\n      reactionRunner();\n    } else if (!isScheduled) {\n      isScheduled = true;\n      scheduler(reactionRunner);\n    }\n  }, opts.onError, opts.requiresObservable);\n  function reactionRunner() {\n    isScheduled = false;\n    if (r.isDisposed_) {\n      return;\n    }\n    var changed = false;\n    var oldValue = value;\n    r.track(function () {\n      var nextValue = allowStateChanges(false, function () {\n        return expression(r);\n      });\n      changed = firstTime || !equals(value, nextValue);\n      value = nextValue;\n    });\n    if (firstTime && opts.fireImmediately) {\n      effectAction(value, oldValue, r);\n    } else if (!firstTime && changed) {\n      effectAction(value, oldValue, r);\n    }\n    firstTime = false;\n  }\n  if (!((_opts4 = opts) != null && (_opts4$signal = _opts4.signal) != null && _opts4$signal.aborted)) {\n    r.schedule_();\n  }\n  return r.getDisposer_((_opts5 = opts) == null ? void 0 : _opts5.signal);\n}\nfunction wrapErrorHandler(errorHandler, baseFn) {\n  return function () {\n    try {\n      return baseFn.apply(this, arguments);\n    } catch (e) {\n      errorHandler.call(this, e);\n    }\n  };\n}\nvar ON_BECOME_OBSERVED = "onBO";\nvar ON_BECOME_UNOBSERVED = "onBUO";\nfunction onBecomeObserved(thing, arg2, arg3) {\n  return interceptHook(ON_BECOME_OBSERVED, thing, arg2, arg3);\n}\nfunction onBecomeUnobserved(thing, arg2, arg3) {\n  return interceptHook(ON_BECOME_UNOBSERVED, thing, arg2, arg3);\n}\nfunction interceptHook(hook, thing, arg2, arg3) {\n  var atom = typeof arg3 === "function" ? getAtom(thing, arg2) : getAtom(thing);\n  var cb = isFunction(arg3) ? arg3 : arg2;\n  var listenersKey = hook + "L";\n  if (atom[listenersKey]) {\n    atom[listenersKey].add(cb);\n  } else {\n    atom[listenersKey] = new Set([cb]);\n  }\n  return function () {\n    var hookListeners = atom[listenersKey];\n    if (hookListeners) {\n      hookListeners["delete"](cb);\n      if (hookListeners.size === 0) {\n        delete atom[listenersKey];\n      }\n    }\n  };\n}\nvar NEVER = "never";\nvar ALWAYS = "always";\nvar OBSERVED = "observed";\n// const IF_AVAILABLE = "ifavailable"\nfunction configure(options) {\n  if (options.isolateGlobalState === true) {\n    isolateGlobalState();\n  }\n  var useProxies = options.useProxies,\n    enforceActions = options.enforceActions;\n  if (useProxies !== undefined) {\n    globalState.useProxies = useProxies === ALWAYS ? true : useProxies === NEVER ? false : typeof Proxy !== "undefined";\n  }\n  if (useProxies === "ifavailable") {\n    globalState.verifyProxies = true;\n  }\n  if (enforceActions !== undefined) {\n    var ea = enforceActions === ALWAYS ? ALWAYS : enforceActions === OBSERVED;\n    globalState.enforceActions = ea;\n    globalState.allowStateChanges = ea === true || ea === ALWAYS ? false : true;\n  }\n  ["computedRequiresReaction", "reactionRequiresObservable", "observableRequiresReaction", "disableErrorBoundaries", "safeDescriptors"].forEach(function (key) {\n    if (key in options) {\n      globalState[key] = !!options[key];\n    }\n  });\n  globalState.allowStateReads = !globalState.observableRequiresReaction;\n  if (false) {}\n  if (options.reactionScheduler) {\n    setReactionScheduler(options.reactionScheduler);\n  }\n}\nfunction extendObservable(target, properties, annotations, options) {\n  if (false) {}\n  // Pull descriptors first, so we don\'t have to deal with props added by administration ($mobx)\n  var descriptors = getOwnPropertyDescriptors(properties);\n  initObservable(function () {\n    var adm = asObservableObject(target, options)[$mobx];\n    ownKeys(descriptors).forEach(function (key) {\n      adm.extend_(key, descriptors[key],\n      // must pass "undefined" for { key: undefined }\n      !annotations ? true : key in annotations ? annotations[key] : true);\n    });\n  });\n  return target;\n}\nfunction getDependencyTree(thing, property) {\n  return nodeToDependencyTree(getAtom(thing, property));\n}\nfunction nodeToDependencyTree(node) {\n  var result = {\n    name: node.name_\n  };\n  if (node.observing_ && node.observing_.length > 0) {\n    result.dependencies = unique(node.observing_).map(nodeToDependencyTree);\n  }\n  return result;\n}\nfunction getObserverTree(thing, property) {\n  return nodeToObserverTree(getAtom(thing, property));\n}\nfunction nodeToObserverTree(node) {\n  var result = {\n    name: node.name_\n  };\n  if (hasObservers(node)) {\n    result.observers = Array.from(getObservers(node)).map(nodeToObserverTree);\n  }\n  return result;\n}\nfunction unique(list) {\n  return Array.from(new Set(list));\n}\nvar generatorId = 0;\nfunction FlowCancellationError() {\n  this.message = "FLOW_CANCELLED";\n}\nFlowCancellationError.prototype = /*#__PURE__*/Object.create(Error.prototype);\nfunction isFlowCancellationError(error) {\n  return error instanceof FlowCancellationError;\n}\nvar flowAnnotation = /*#__PURE__*/createFlowAnnotation("flow");\nvar flowBoundAnnotation = /*#__PURE__*/createFlowAnnotation("flow.bound", {\n  bound: true\n});\nvar flow = /*#__PURE__*/Object.assign(function flow(arg1, arg2) {\n  // @flow (2022.3 Decorators)\n  if (is20223Decorator(arg2)) {\n    return flowAnnotation.decorate_20223_(arg1, arg2);\n  }\n  // @flow\n  if (isStringish(arg2)) {\n    return storeAnnotation(arg1, arg2, flowAnnotation);\n  }\n  // flow(fn)\n  if (false) {}\n  var generator = arg1;\n  var name = generator.name || "<unnamed flow>";\n  // Implementation based on https://github.com/tj/co/blob/master/index.js\n  var res = function res() {\n    var ctx = this;\n    var args = arguments;\n    var runId = ++generatorId;\n    var gen = action(name + " - runid: " + runId + " - init", generator).apply(ctx, args);\n    var rejector;\n    var pendingPromise = undefined;\n    var promise = new Promise(function (resolve, reject) {\n      var stepId = 0;\n      rejector = reject;\n      function onFulfilled(res) {\n        pendingPromise = undefined;\n        var ret;\n        try {\n          ret = action(name + " - runid: " + runId + " - yield " + stepId++, gen.next).call(gen, res);\n        } catch (e) {\n          return reject(e);\n        }\n        next(ret);\n      }\n      function onRejected(err) {\n        pendingPromise = undefined;\n        var ret;\n        try {\n          ret = action(name + " - runid: " + runId + " - yield " + stepId++, gen["throw"]).call(gen, err);\n        } catch (e) {\n          return reject(e);\n        }\n        next(ret);\n      }\n      function next(ret) {\n        if (isFunction(ret == null ? void 0 : ret.then)) {\n          // an async iterator\n          ret.then(next, reject);\n          return;\n        }\n        if (ret.done) {\n          return resolve(ret.value);\n        }\n        pendingPromise = Promise.resolve(ret.value);\n        return pendingPromise.then(onFulfilled, onRejected);\n      }\n      onFulfilled(undefined); // kick off the process\n    });\n    promise.cancel = action(name + " - runid: " + runId + " - cancel", function () {\n      try {\n        if (pendingPromise) {\n          cancelPromise(pendingPromise);\n        }\n        // Finally block can return (or yield) stuff..\n        var _res = gen["return"](undefined);\n        // eat anything that promise would do, it\'s cancelled!\n        var yieldedPromise = Promise.resolve(_res.value);\n        yieldedPromise.then(noop, noop);\n        cancelPromise(yieldedPromise); // maybe it can be cancelled :)\n        // reject our original promise\n        rejector(new FlowCancellationError());\n      } catch (e) {\n        rejector(e); // there could be a throwing finally block\n      }\n    });\n    return promise;\n  };\n  res.isMobXFlow = true;\n  return res;\n}, flowAnnotation);\nflow.bound = /*#__PURE__*/createDecoratorAnnotation(flowBoundAnnotation);\nfunction cancelPromise(promise) {\n  if (isFunction(promise.cancel)) {\n    promise.cancel();\n  }\n}\nfunction flowResult(result) {\n  return result; // just tricking TypeScript :)\n}\nfunction isFlow(fn) {\n  return (fn == null ? void 0 : fn.isMobXFlow) === true;\n}\nfunction interceptReads(thing, propOrHandler, handler) {\n  var target;\n  if (isObservableMap(thing) || isObservableArray(thing) || isObservableValue(thing)) {\n    target = getAdministration(thing);\n  } else if (isObservableObject(thing)) {\n    if (false) {}\n    target = getAdministration(thing, propOrHandler);\n  } else if (false) {}\n  if (false) {}\n  target.dehancer = typeof propOrHandler === "function" ? propOrHandler : handler;\n  return function () {\n    target.dehancer = undefined;\n  };\n}\nfunction intercept(thing, propOrHandler, handler) {\n  if (isFunction(handler)) {\n    return interceptProperty(thing, propOrHandler, handler);\n  } else {\n    return interceptInterceptable(thing, propOrHandler);\n  }\n}\nfunction interceptInterceptable(thing, handler) {\n  return getAdministration(thing).intercept_(handler);\n}\nfunction interceptProperty(thing, property, handler) {\n  return getAdministration(thing, property).intercept_(handler);\n}\nfunction _isComputed(value, property) {\n  if (property === undefined) {\n    return isComputedValue(value);\n  }\n  if (isObservableObject(value) === false) {\n    return false;\n  }\n  if (!value[$mobx].values_.has(property)) {\n    return false;\n  }\n  var atom = getAtom(value, property);\n  return isComputedValue(atom);\n}\nfunction isComputed(value) {\n  if (false) {}\n  return _isComputed(value);\n}\nfunction isComputedProp(value, propName) {\n  if (false) {}\n  return _isComputed(value, propName);\n}\nfunction _isObservable(value, property) {\n  if (!value) {\n    return false;\n  }\n  if (property !== undefined) {\n    if (false) {}\n    if (isObservableObject(value)) {\n      return value[$mobx].values_.has(property);\n    }\n    return false;\n  }\n  // For first check, see #701\n  return isObservableObject(value) || !!value[$mobx] || isAtom(value) || isReaction(value) || isComputedValue(value);\n}\nfunction isObservable(value) {\n  if (false) {}\n  return _isObservable(value);\n}\nfunction isObservableProp(value, propName) {\n  if (false) {}\n  return _isObservable(value, propName);\n}\nfunction keys(obj) {\n  if (isObservableObject(obj)) {\n    return obj[$mobx].keys_();\n  }\n  if (isObservableMap(obj) || isObservableSet(obj)) {\n    return Array.from(obj.keys());\n  }\n  if (isObservableArray(obj)) {\n    return obj.map(function (_, index) {\n      return index;\n    });\n  }\n  die(5);\n}\nfunction values(obj) {\n  if (isObservableObject(obj)) {\n    return keys(obj).map(function (key) {\n      return obj[key];\n    });\n  }\n  if (isObservableMap(obj)) {\n    return keys(obj).map(function (key) {\n      return obj.get(key);\n    });\n  }\n  if (isObservableSet(obj)) {\n    return Array.from(obj.values());\n  }\n  if (isObservableArray(obj)) {\n    return obj.slice();\n  }\n  die(6);\n}\nfunction entries(obj) {\n  if (isObservableObject(obj)) {\n    return keys(obj).map(function (key) {\n      return [key, obj[key]];\n    });\n  }\n  if (isObservableMap(obj)) {\n    return keys(obj).map(function (key) {\n      return [key, obj.get(key)];\n    });\n  }\n  if (isObservableSet(obj)) {\n    return Array.from(obj.entries());\n  }\n  if (isObservableArray(obj)) {\n    return obj.map(function (key, index) {\n      return [index, key];\n    });\n  }\n  die(7);\n}\nfunction set(obj, key, value) {\n  if (arguments.length === 2 && !isObservableSet(obj)) {\n    startBatch();\n    var _values = key;\n    try {\n      for (var _key in _values) {\n        set(obj, _key, _values[_key]);\n      }\n    } finally {\n      endBatch();\n    }\n    return;\n  }\n  if (isObservableObject(obj)) {\n    obj[$mobx].set_(key, value);\n  } else if (isObservableMap(obj)) {\n    obj.set(key, value);\n  } else if (isObservableSet(obj)) {\n    obj.add(key);\n  } else if (isObservableArray(obj)) {\n    if (typeof key !== "number") {\n      key = parseInt(key, 10);\n    }\n    if (key < 0) {\n      die("Invalid index: \'" + key + "\'");\n    }\n    startBatch();\n    if (key >= obj.length) {\n      obj.length = key + 1;\n    }\n    obj[key] = value;\n    endBatch();\n  } else {\n    die(8);\n  }\n}\nfunction remove(obj, key) {\n  if (isObservableObject(obj)) {\n    obj[$mobx].delete_(key);\n  } else if (isObservableMap(obj)) {\n    obj["delete"](key);\n  } else if (isObservableSet(obj)) {\n    obj["delete"](key);\n  } else if (isObservableArray(obj)) {\n    if (typeof key !== "number") {\n      key = parseInt(key, 10);\n    }\n    obj.splice(key, 1);\n  } else {\n    die(9);\n  }\n}\nfunction has(obj, key) {\n  if (isObservableObject(obj)) {\n    return obj[$mobx].has_(key);\n  } else if (isObservableMap(obj)) {\n    return obj.has(key);\n  } else if (isObservableSet(obj)) {\n    return obj.has(key);\n  } else if (isObservableArray(obj)) {\n    return key >= 0 && key < obj.length;\n  }\n  die(10);\n}\nfunction get(obj, key) {\n  if (!has(obj, key)) {\n    return undefined;\n  }\n  if (isObservableObject(obj)) {\n    return obj[$mobx].get_(key);\n  } else if (isObservableMap(obj)) {\n    return obj.get(key);\n  } else if (isObservableArray(obj)) {\n    return obj[key];\n  }\n  die(11);\n}\nfunction apiDefineProperty(obj, key, descriptor) {\n  if (isObservableObject(obj)) {\n    return obj[$mobx].defineProperty_(key, descriptor);\n  }\n  die(39);\n}\nfunction apiOwnKeys(obj) {\n  if (isObservableObject(obj)) {\n    return obj[$mobx].ownKeys_();\n  }\n  die(38);\n}\nfunction observe(thing, propOrCb, cbOrFire, fireImmediately) {\n  if (isFunction(cbOrFire)) {\n    return observeObservableProperty(thing, propOrCb, cbOrFire, fireImmediately);\n  } else {\n    return observeObservable(thing, propOrCb, cbOrFire);\n  }\n}\nfunction observeObservable(thing, listener, fireImmediately) {\n  return getAdministration(thing).observe_(listener, fireImmediately);\n}\nfunction observeObservableProperty(thing, property, listener, fireImmediately) {\n  return getAdministration(thing, property).observe_(listener, fireImmediately);\n}\nfunction cache(map, key, value) {\n  map.set(key, value);\n  return value;\n}\nfunction toJSHelper(source, __alreadySeen) {\n  if (source == null || typeof source !== "object" || source instanceof Date || !isObservable(source)) {\n    return source;\n  }\n  if (isObservableValue(source) || isComputedValue(source)) {\n    return toJSHelper(source.get(), __alreadySeen);\n  }\n  if (__alreadySeen.has(source)) {\n    return __alreadySeen.get(source);\n  }\n  if (isObservableArray(source)) {\n    var res = cache(__alreadySeen, source, new Array(source.length));\n    source.forEach(function (value, idx) {\n      res[idx] = toJSHelper(value, __alreadySeen);\n    });\n    return res;\n  }\n  if (isObservableSet(source)) {\n    var _res = cache(__alreadySeen, source, new Set());\n    source.forEach(function (value) {\n      _res.add(toJSHelper(value, __alreadySeen));\n    });\n    return _res;\n  }\n  if (isObservableMap(source)) {\n    var _res2 = cache(__alreadySeen, source, new Map());\n    source.forEach(function (value, key) {\n      _res2.set(key, toJSHelper(value, __alreadySeen));\n    });\n    return _res2;\n  } else {\n    // must be observable object\n    var _res3 = cache(__alreadySeen, source, {});\n    apiOwnKeys(source).forEach(function (key) {\n      if (objectPrototype.propertyIsEnumerable.call(source, key)) {\n        _res3[key] = toJSHelper(source[key], __alreadySeen);\n      }\n    });\n    return _res3;\n  }\n}\n/**\n * Recursively converts an observable to it\'s non-observable native counterpart.\n * It does NOT recurse into non-observables, these are left as they are, even if they contain observables.\n * Computed and other non-enumerable properties are completely ignored.\n * Complex scenarios require custom solution, eg implementing `toJSON` or using `serializr` lib.\n */\nfunction toJS(source, options) {\n  if (false) {}\n  return toJSHelper(source, new Map());\n}\nfunction trace() {\n  if (true) {\n    return;\n  }\n  var enterBreakPoint = false;\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n  if (typeof args[args.length - 1] === "boolean") {\n    enterBreakPoint = args.pop();\n  }\n  var derivation = getAtomFromArgs(args);\n  if (!derivation) {\n    return die("\'trace(break?)\' can only be used inside a tracked computed value or a Reaction. Consider passing in the computed value or reaction explicitly");\n  }\n  if (derivation.isTracing_ === TraceMode.NONE) {\n    console.log("[mobx.trace] \'" + derivation.name_ + "\' tracing enabled");\n  }\n  derivation.isTracing_ = enterBreakPoint ? TraceMode.BREAK : TraceMode.LOG;\n}\nfunction getAtomFromArgs(args) {\n  switch (args.length) {\n    case 0:\n      return globalState.trackingDerivation;\n    case 1:\n      return getAtom(args[0]);\n    case 2:\n      return getAtom(args[0], args[1]);\n  }\n}\n\n/**\n * During a transaction no views are updated until the end of the transaction.\n * The transaction will be run synchronously nonetheless.\n *\n * @param action a function that updates some reactive state\n * @returns any value that was returned by the \'action\' parameter.\n */\nfunction transaction(action, thisArg) {\n  if (thisArg === void 0) {\n    thisArg = undefined;\n  }\n  startBatch();\n  try {\n    return action.apply(thisArg);\n  } finally {\n    endBatch();\n  }\n}\nfunction when(predicate, arg1, arg2) {\n  if (arguments.length === 1 || arg1 && typeof arg1 === "object") {\n    return whenPromise(predicate, arg1);\n  }\n  return _when(predicate, arg1, arg2 || {});\n}\nfunction _when(predicate, effect, opts) {\n  var timeoutHandle;\n  if (typeof opts.timeout === "number") {\n    var error = new Error("WHEN_TIMEOUT");\n    timeoutHandle = setTimeout(function () {\n      if (!disposer[$mobx].isDisposed_) {\n        disposer();\n        if (opts.onError) {\n          opts.onError(error);\n        } else {\n          throw error;\n        }\n      }\n    }, opts.timeout);\n  }\n  opts.name =  false ? 0 : "When";\n  var effectAction = createAction( false ? 0 : "When-effect", effect);\n  // eslint-disable-next-line\n  var disposer = autorun(function (r) {\n    // predicate should not change state\n    var cond = allowStateChanges(false, predicate);\n    if (cond) {\n      r.dispose();\n      if (timeoutHandle) {\n        clearTimeout(timeoutHandle);\n      }\n      effectAction();\n    }\n  }, opts);\n  return disposer;\n}\nfunction whenPromise(predicate, opts) {\n  var _opts$signal;\n  if (false) {}\n  if (opts != null && (_opts$signal = opts.signal) != null && _opts$signal.aborted) {\n    return Object.assign(Promise.reject(new Error("WHEN_ABORTED")), {\n      cancel: function cancel() {\n        return null;\n      }\n    });\n  }\n  var cancel;\n  var abort;\n  var res = new Promise(function (resolve, reject) {\n    var _opts$signal2;\n    var disposer = _when(predicate, resolve, mobx_esm_extends({}, opts, {\n      onError: reject\n    }));\n    cancel = function cancel() {\n      disposer();\n      reject(new Error("WHEN_CANCELLED"));\n    };\n    abort = function abort() {\n      disposer();\n      reject(new Error("WHEN_ABORTED"));\n    };\n    opts == null ? void 0 : (_opts$signal2 = opts.signal) == null ? void 0 : _opts$signal2.addEventListener == null ? void 0 : _opts$signal2.addEventListener("abort", abort);\n  })["finally"](function () {\n    var _opts$signal3;\n    return opts == null ? void 0 : (_opts$signal3 = opts.signal) == null ? void 0 : _opts$signal3.removeEventListener == null ? void 0 : _opts$signal3.removeEventListener("abort", abort);\n  });\n  res.cancel = cancel;\n  return res;\n}\nfunction getAdm(target) {\n  return target[$mobx];\n}\n// Optimization: we don\'t need the intermediate objects and could have a completely custom administration for DynamicObjects,\n// and skip either the internal values map, or the base object with its property descriptors!\nvar objectProxyTraps = {\n  has: function has(target, name) {\n    if (false) {}\n    return getAdm(target).has_(name);\n  },\n  get: function get(target, name) {\n    return getAdm(target).get_(name);\n  },\n  set: function set(target, name, value) {\n    var _getAdm$set_;\n    if (!isStringish(name)) {\n      return false;\n    }\n    if (false) {}\n    // null (intercepted) -> true (success)\n    return (_getAdm$set_ = getAdm(target).set_(name, value, true)) != null ? _getAdm$set_ : true;\n  },\n  deleteProperty: function deleteProperty(target, name) {\n    var _getAdm$delete_;\n    if (false) {}\n    if (!isStringish(name)) {\n      return false;\n    }\n    // null (intercepted) -> true (success)\n    return (_getAdm$delete_ = getAdm(target).delete_(name, true)) != null ? _getAdm$delete_ : true;\n  },\n  defineProperty: function defineProperty(target, name, descriptor) {\n    var _getAdm$definePropert;\n    if (false) {}\n    // null (intercepted) -> true (success)\n    return (_getAdm$definePropert = getAdm(target).defineProperty_(name, descriptor)) != null ? _getAdm$definePropert : true;\n  },\n  ownKeys: function ownKeys(target) {\n    if (false) {}\n    return getAdm(target).ownKeys_();\n  },\n  preventExtensions: function preventExtensions(target) {\n    die(13);\n  }\n};\nfunction asDynamicObservableObject(target, options) {\n  var _target$$mobx, _target$$mobx$proxy_;\n  assertProxies();\n  target = asObservableObject(target, options);\n  return (_target$$mobx$proxy_ = (_target$$mobx = target[$mobx]).proxy_) != null ? _target$$mobx$proxy_ : _target$$mobx.proxy_ = new Proxy(target, objectProxyTraps);\n}\nfunction hasInterceptors(interceptable) {\n  return interceptable.interceptors_ !== undefined && interceptable.interceptors_.length > 0;\n}\nfunction registerInterceptor(interceptable, handler) {\n  var interceptors = interceptable.interceptors_ || (interceptable.interceptors_ = []);\n  interceptors.push(handler);\n  return once(function () {\n    var idx = interceptors.indexOf(handler);\n    if (idx !== -1) {\n      interceptors.splice(idx, 1);\n    }\n  });\n}\nfunction interceptChange(interceptable, change) {\n  var prevU = untrackedStart();\n  try {\n    // Interceptor can modify the array, copy it to avoid concurrent modification, see #1950\n    var interceptors = [].concat(interceptable.interceptors_ || []);\n    for (var i = 0, l = interceptors.length; i < l; i++) {\n      change = interceptors[i](change);\n      if (change && !change.type) {\n        die(14);\n      }\n      if (!change) {\n        break;\n      }\n    }\n    return change;\n  } finally {\n    untrackedEnd(prevU);\n  }\n}\nfunction hasListeners(listenable) {\n  return listenable.changeListeners_ !== undefined && listenable.changeListeners_.length > 0;\n}\nfunction registerListener(listenable, handler) {\n  var listeners = listenable.changeListeners_ || (listenable.changeListeners_ = []);\n  listeners.push(handler);\n  return once(function () {\n    var idx = listeners.indexOf(handler);\n    if (idx !== -1) {\n      listeners.splice(idx, 1);\n    }\n  });\n}\nfunction notifyListeners(listenable, change) {\n  var prevU = untrackedStart();\n  var listeners = listenable.changeListeners_;\n  if (!listeners) {\n    return;\n  }\n  listeners = listeners.slice();\n  for (var i = 0, l = listeners.length; i < l; i++) {\n    listeners[i](change);\n  }\n  untrackedEnd(prevU);\n}\nfunction makeObservable(target, annotations, options) {\n  initObservable(function () {\n    var _annotations;\n    var adm = asObservableObject(target, options)[$mobx];\n    if (false) {}\n    // Default to decorators\n    (_annotations = annotations) != null ? _annotations : annotations = collectStoredAnnotations(target);\n    // Annotate\n    ownKeys(annotations).forEach(function (key) {\n      return adm.make_(key, annotations[key]);\n    });\n  });\n  return target;\n}\n// proto[keysSymbol] = new Set<PropertyKey>()\nvar keysSymbol = /*#__PURE__*/(/* unused pure expression or super */ null && (Symbol("mobx-keys")));\nfunction makeAutoObservable(target, overrides, options) {\n  if (false) {}\n  // Optimization: avoid visiting protos\n  // Assumes that annotation.make_/.extend_ works the same for plain objects\n  if (isPlainObject(target)) {\n    return extendObservable(target, target, overrides, options);\n  }\n  initObservable(function () {\n    var adm = asObservableObject(target, options)[$mobx];\n    // Optimization: cache keys on proto\n    // Assumes makeAutoObservable can be called only once per object and can\'t be used in subclass\n    if (!target[keysSymbol]) {\n      var proto = Object.getPrototypeOf(target);\n      var keys = new Set([].concat(ownKeys(target), ownKeys(proto)));\n      keys["delete"]("constructor");\n      keys["delete"]($mobx);\n      addHiddenProp(proto, keysSymbol, keys);\n    }\n    target[keysSymbol].forEach(function (key) {\n      return adm.make_(key,\n      // must pass "undefined" for { key: undefined }\n      !overrides ? true : key in overrides ? overrides[key] : true);\n    });\n  });\n  return target;\n}\nvar SPLICE = "splice";\nvar UPDATE = "update";\nvar MAX_SPLICE_SIZE = 10000; // See e.g. https://github.com/mobxjs/mobx/issues/859\nvar arrayTraps = {\n  get: function get(target, name) {\n    var adm = target[$mobx];\n    if (name === $mobx) {\n      return adm;\n    }\n    if (name === "length") {\n      return adm.getArrayLength_();\n    }\n    if (typeof name === "string" && !isNaN(name)) {\n      return adm.get_(parseInt(name));\n    }\n    if (hasProp(arrayExtensions, name)) {\n      return arrayExtensions[name];\n    }\n    return target[name];\n  },\n  set: function set(target, name, value) {\n    var adm = target[$mobx];\n    if (name === "length") {\n      adm.setArrayLength_(value);\n    }\n    if (typeof name === "symbol" || isNaN(name)) {\n      target[name] = value;\n    } else {\n      // numeric string\n      adm.set_(parseInt(name), value);\n    }\n    return true;\n  },\n  preventExtensions: function preventExtensions() {\n    die(15);\n  }\n};\nvar ObservableArrayAdministration = /*#__PURE__*/function () {\n  // this is the prop that gets proxied, so can\'t replace it!\n\n  function ObservableArrayAdministration(name, enhancer, owned_, legacyMode_) {\n    if (name === void 0) {\n      name =  false ? 0 : "ObservableArray";\n    }\n    this.owned_ = void 0;\n    this.legacyMode_ = void 0;\n    this.atom_ = void 0;\n    this.values_ = [];\n    this.interceptors_ = void 0;\n    this.changeListeners_ = void 0;\n    this.enhancer_ = void 0;\n    this.dehancer = void 0;\n    this.proxy_ = void 0;\n    this.lastKnownLength_ = 0;\n    this.owned_ = owned_;\n    this.legacyMode_ = legacyMode_;\n    this.atom_ = new Atom(name);\n    this.enhancer_ = function (newV, oldV) {\n      return enhancer(newV, oldV,  false ? 0 : "ObservableArray[..]");\n    };\n  }\n  var _proto = ObservableArrayAdministration.prototype;\n  _proto.dehanceValue_ = function dehanceValue_(value) {\n    if (this.dehancer !== undefined) {\n      return this.dehancer(value);\n    }\n    return value;\n  };\n  _proto.dehanceValues_ = function dehanceValues_(values) {\n    if (this.dehancer !== undefined && values.length > 0) {\n      return values.map(this.dehancer);\n    }\n    return values;\n  };\n  _proto.intercept_ = function intercept_(handler) {\n    return registerInterceptor(this, handler);\n  };\n  _proto.observe_ = function observe_(listener, fireImmediately) {\n    if (fireImmediately === void 0) {\n      fireImmediately = false;\n    }\n    if (fireImmediately) {\n      listener({\n        observableKind: "array",\n        object: this.proxy_,\n        debugObjectName: this.atom_.name_,\n        type: "splice",\n        index: 0,\n        added: this.values_.slice(),\n        addedCount: this.values_.length,\n        removed: [],\n        removedCount: 0\n      });\n    }\n    return registerListener(this, listener);\n  };\n  _proto.getArrayLength_ = function getArrayLength_() {\n    this.atom_.reportObserved();\n    return this.values_.length;\n  };\n  _proto.setArrayLength_ = function setArrayLength_(newLength) {\n    if (typeof newLength !== "number" || isNaN(newLength) || newLength < 0) {\n      die("Out of range: " + newLength);\n    }\n    var currentLength = this.values_.length;\n    if (newLength === currentLength) {\n      return;\n    } else if (newLength > currentLength) {\n      var newItems = new Array(newLength - currentLength);\n      for (var i = 0; i < newLength - currentLength; i++) {\n        newItems[i] = undefined;\n      } // No Array.fill everywhere...\n      this.spliceWithArray_(currentLength, 0, newItems);\n    } else {\n      this.spliceWithArray_(newLength, currentLength - newLength);\n    }\n  };\n  _proto.updateArrayLength_ = function updateArrayLength_(oldLength, delta) {\n    if (oldLength !== this.lastKnownLength_) {\n      die(16);\n    }\n    this.lastKnownLength_ += delta;\n    if (this.legacyMode_ && delta > 0) {\n      reserveArrayBuffer(oldLength + delta + 1);\n    }\n  };\n  _proto.spliceWithArray_ = function spliceWithArray_(index, deleteCount, newItems) {\n    var _this = this;\n    checkIfStateModificationsAreAllowed(this.atom_);\n    var length = this.values_.length;\n    if (index === undefined) {\n      index = 0;\n    } else if (index > length) {\n      index = length;\n    } else if (index < 0) {\n      index = Math.max(0, length + index);\n    }\n    if (arguments.length === 1) {\n      deleteCount = length - index;\n    } else if (deleteCount === undefined || deleteCount === null) {\n      deleteCount = 0;\n    } else {\n      deleteCount = Math.max(0, Math.min(deleteCount, length - index));\n    }\n    if (newItems === undefined) {\n      newItems = EMPTY_ARRAY;\n    }\n    if (hasInterceptors(this)) {\n      var change = interceptChange(this, {\n        object: this.proxy_,\n        type: SPLICE,\n        index: index,\n        removedCount: deleteCount,\n        added: newItems\n      });\n      if (!change) {\n        return EMPTY_ARRAY;\n      }\n      deleteCount = change.removedCount;\n      newItems = change.added;\n    }\n    newItems = newItems.length === 0 ? newItems : newItems.map(function (v) {\n      return _this.enhancer_(v, undefined);\n    });\n    if (this.legacyMode_ || "production" !== "production") {\n      var lengthDelta = newItems.length - deleteCount;\n      this.updateArrayLength_(length, lengthDelta); // checks if internal array wasn\'t modified\n    }\n    var res = this.spliceItemsIntoValues_(index, deleteCount, newItems);\n    if (deleteCount !== 0 || newItems.length !== 0) {\n      this.notifyArraySplice_(index, newItems, res);\n    }\n    return this.dehanceValues_(res);\n  };\n  _proto.spliceItemsIntoValues_ = function spliceItemsIntoValues_(index, deleteCount, newItems) {\n    if (newItems.length < MAX_SPLICE_SIZE) {\n      var _this$values_;\n      return (_this$values_ = this.values_).splice.apply(_this$values_, [index, deleteCount].concat(newItems));\n    } else {\n      // The items removed by the splice\n      var res = this.values_.slice(index, index + deleteCount);\n      // The items that that should remain at the end of the array\n      var oldItems = this.values_.slice(index + deleteCount);\n      // New length is the previous length + addition count - deletion count\n      this.values_.length += newItems.length - deleteCount;\n      for (var i = 0; i < newItems.length; i++) {\n        this.values_[index + i] = newItems[i];\n      }\n      for (var _i = 0; _i < oldItems.length; _i++) {\n        this.values_[index + newItems.length + _i] = oldItems[_i];\n      }\n      return res;\n    }\n  };\n  _proto.notifyArrayChildUpdate_ = function notifyArrayChildUpdate_(index, newValue, oldValue) {\n    var notifySpy = !this.owned_ && isSpyEnabled();\n    var notify = hasListeners(this);\n    var change = notify || notifySpy ? {\n      observableKind: "array",\n      object: this.proxy_,\n      type: UPDATE,\n      debugObjectName: this.atom_.name_,\n      index: index,\n      newValue: newValue,\n      oldValue: oldValue\n    } : null;\n    // The reason why this is on right hand side here (and not above), is this way the uglifier will drop it, but it won\'t\n    // cause any runtime overhead in development mode without NODE_ENV set, unless spying is enabled\n    if (false) {}\n    this.atom_.reportChanged();\n    if (notify) {\n      notifyListeners(this, change);\n    }\n    if (false) {}\n  };\n  _proto.notifyArraySplice_ = function notifyArraySplice_(index, added, removed) {\n    var notifySpy = !this.owned_ && isSpyEnabled();\n    var notify = hasListeners(this);\n    var change = notify || notifySpy ? {\n      observableKind: "array",\n      object: this.proxy_,\n      debugObjectName: this.atom_.name_,\n      type: SPLICE,\n      index: index,\n      removed: removed,\n      added: added,\n      removedCount: removed.length,\n      addedCount: added.length\n    } : null;\n    if (false) {}\n    this.atom_.reportChanged();\n    // conform: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/observe\n    if (notify) {\n      notifyListeners(this, change);\n    }\n    if (false) {}\n  };\n  _proto.get_ = function get_(index) {\n    if (this.legacyMode_ && index >= this.values_.length) {\n      console.warn( false ? 0 : "[mobx] Out of bounds read: " + index);\n      return undefined;\n    }\n    this.atom_.reportObserved();\n    return this.dehanceValue_(this.values_[index]);\n  };\n  _proto.set_ = function set_(index, newValue) {\n    var values = this.values_;\n    if (this.legacyMode_ && index > values.length) {\n      // out of bounds\n      die(17, index, values.length);\n    }\n    if (index < values.length) {\n      // update at index in range\n      checkIfStateModificationsAreAllowed(this.atom_);\n      var oldValue = values[index];\n      if (hasInterceptors(this)) {\n        var change = interceptChange(this, {\n          type: UPDATE,\n          object: this.proxy_,\n          index: index,\n          newValue: newValue\n        });\n        if (!change) {\n          return;\n        }\n        newValue = change.newValue;\n      }\n      newValue = this.enhancer_(newValue, oldValue);\n      var changed = newValue !== oldValue;\n      if (changed) {\n        values[index] = newValue;\n        this.notifyArrayChildUpdate_(index, newValue, oldValue);\n      }\n    } else {\n      // For out of bound index, we don\'t create an actual sparse array,\n      // but rather fill the holes with undefined (same as setArrayLength_).\n      // This could be considered a bug.\n      var newItems = new Array(index + 1 - values.length);\n      for (var i = 0; i < newItems.length - 1; i++) {\n        newItems[i] = undefined;\n      } // No Array.fill everywhere...\n      newItems[newItems.length - 1] = newValue;\n      this.spliceWithArray_(values.length, 0, newItems);\n    }\n  };\n  return ObservableArrayAdministration;\n}();\nfunction createObservableArray(initialValues, enhancer, name, owned) {\n  if (name === void 0) {\n    name =  false ? 0 : "ObservableArray";\n  }\n  if (owned === void 0) {\n    owned = false;\n  }\n  assertProxies();\n  return initObservable(function () {\n    var adm = new ObservableArrayAdministration(name, enhancer, owned, false);\n    addHiddenFinalProp(adm.values_, $mobx, adm);\n    var proxy = new Proxy(adm.values_, arrayTraps);\n    adm.proxy_ = proxy;\n    if (initialValues && initialValues.length) {\n      adm.spliceWithArray_(0, 0, initialValues);\n    }\n    return proxy;\n  });\n}\n// eslint-disable-next-line\nvar arrayExtensions = {\n  clear: function clear() {\n    return this.splice(0);\n  },\n  replace: function replace(newItems) {\n    var adm = this[$mobx];\n    return adm.spliceWithArray_(0, adm.values_.length, newItems);\n  },\n  // Used by JSON.stringify\n  toJSON: function toJSON() {\n    return this.slice();\n  },\n  /*\n   * functions that do alter the internal structure of the array, (based on lib.es6.d.ts)\n   * since these functions alter the inner structure of the array, the have side effects.\n   * Because the have side effects, they should not be used in computed function,\n   * and for that reason the do not call dependencyState.notifyObserved\n   */\n  splice: function splice(index, deleteCount) {\n    for (var _len = arguments.length, newItems = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n      newItems[_key - 2] = arguments[_key];\n    }\n    var adm = this[$mobx];\n    switch (arguments.length) {\n      case 0:\n        return [];\n      case 1:\n        return adm.spliceWithArray_(index);\n      case 2:\n        return adm.spliceWithArray_(index, deleteCount);\n    }\n    return adm.spliceWithArray_(index, deleteCount, newItems);\n  },\n  spliceWithArray: function spliceWithArray(index, deleteCount, newItems) {\n    return this[$mobx].spliceWithArray_(index, deleteCount, newItems);\n  },\n  push: function push() {\n    var adm = this[$mobx];\n    for (var _len2 = arguments.length, items = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      items[_key2] = arguments[_key2];\n    }\n    adm.spliceWithArray_(adm.values_.length, 0, items);\n    return adm.values_.length;\n  },\n  pop: function pop() {\n    return this.splice(Math.max(this[$mobx].values_.length - 1, 0), 1)[0];\n  },\n  shift: function shift() {\n    return this.splice(0, 1)[0];\n  },\n  unshift: function unshift() {\n    var adm = this[$mobx];\n    for (var _len3 = arguments.length, items = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n      items[_key3] = arguments[_key3];\n    }\n    adm.spliceWithArray_(0, 0, items);\n    return adm.values_.length;\n  },\n  reverse: function reverse() {\n    // reverse by default mutates in place before returning the result\n    // which makes it both a \'derivation\' and a \'mutation\'.\n    if (globalState.trackingDerivation) {\n      die(37, "reverse");\n    }\n    this.replace(this.slice().reverse());\n    return this;\n  },\n  sort: function sort() {\n    // sort by default mutates in place before returning the result\n    // which goes against all good practices. Let\'s not change the array in place!\n    if (globalState.trackingDerivation) {\n      die(37, "sort");\n    }\n    var copy = this.slice();\n    copy.sort.apply(copy, arguments);\n    this.replace(copy);\n    return this;\n  },\n  remove: function remove(value) {\n    var adm = this[$mobx];\n    var idx = adm.dehanceValues_(adm.values_).indexOf(value);\n    if (idx > -1) {\n      this.splice(idx, 1);\n      return true;\n    }\n    return false;\n  }\n};\n/**\n * Wrap function from prototype\n * Without this, everything works as well, but this works\n * faster as everything works on unproxied values\n */\naddArrayExtension("at", simpleFunc);\naddArrayExtension("concat", simpleFunc);\naddArrayExtension("flat", simpleFunc);\naddArrayExtension("includes", simpleFunc);\naddArrayExtension("indexOf", simpleFunc);\naddArrayExtension("join", simpleFunc);\naddArrayExtension("lastIndexOf", simpleFunc);\naddArrayExtension("slice", simpleFunc);\naddArrayExtension("toString", simpleFunc);\naddArrayExtension("toLocaleString", simpleFunc);\naddArrayExtension("toSorted", simpleFunc);\naddArrayExtension("toSpliced", simpleFunc);\naddArrayExtension("with", simpleFunc);\n// map\naddArrayExtension("every", mapLikeFunc);\naddArrayExtension("filter", mapLikeFunc);\naddArrayExtension("find", mapLikeFunc);\naddArrayExtension("findIndex", mapLikeFunc);\naddArrayExtension("findLast", mapLikeFunc);\naddArrayExtension("findLastIndex", mapLikeFunc);\naddArrayExtension("flatMap", mapLikeFunc);\naddArrayExtension("forEach", mapLikeFunc);\naddArrayExtension("map", mapLikeFunc);\naddArrayExtension("some", mapLikeFunc);\naddArrayExtension("toReversed", mapLikeFunc);\n// reduce\naddArrayExtension("reduce", reduceLikeFunc);\naddArrayExtension("reduceRight", reduceLikeFunc);\nfunction addArrayExtension(funcName, funcFactory) {\n  if (typeof Array.prototype[funcName] === "function") {\n    arrayExtensions[funcName] = funcFactory(funcName);\n  }\n}\n// Report and delegate to dehanced array\nfunction simpleFunc(funcName) {\n  return function () {\n    var adm = this[$mobx];\n    adm.atom_.reportObserved();\n    var dehancedValues = adm.dehanceValues_(adm.values_);\n    return dehancedValues[funcName].apply(dehancedValues, arguments);\n  };\n}\n// Make sure callbacks receive correct array arg #2326\nfunction mapLikeFunc(funcName) {\n  return function (callback, thisArg) {\n    var _this2 = this;\n    var adm = this[$mobx];\n    adm.atom_.reportObserved();\n    var dehancedValues = adm.dehanceValues_(adm.values_);\n    return dehancedValues[funcName](function (element, index) {\n      return callback.call(thisArg, element, index, _this2);\n    });\n  };\n}\n// Make sure callbacks receive correct array arg #2326\nfunction reduceLikeFunc(funcName) {\n  return function () {\n    var _this3 = this;\n    var adm = this[$mobx];\n    adm.atom_.reportObserved();\n    var dehancedValues = adm.dehanceValues_(adm.values_);\n    // #2432 - reduce behavior depends on arguments.length\n    var callback = arguments[0];\n    arguments[0] = function (accumulator, currentValue, index) {\n      return callback(accumulator, currentValue, index, _this3);\n    };\n    return dehancedValues[funcName].apply(dehancedValues, arguments);\n  };\n}\nvar isObservableArrayAdministration = /*#__PURE__*/createInstanceofPredicate("ObservableArrayAdministration", ObservableArrayAdministration);\nfunction isObservableArray(thing) {\n  return isObject(thing) && isObservableArrayAdministration(thing[$mobx]);\n}\nvar _Symbol$iterator, _Symbol$toStringTag;\nvar ObservableMapMarker = {};\nvar ADD = "add";\nvar DELETE = "delete";\n// just extend Map? See also https://gist.github.com/nestharus/13b4d74f2ef4a2f4357dbd3fc23c1e54\n// But: https://github.com/mobxjs/mobx/issues/1556\n_Symbol$iterator = Symbol.iterator;\n_Symbol$toStringTag = Symbol.toStringTag;\nvar ObservableMap = /*#__PURE__*/function () {\n  // hasMap, not hashMap >-).\n\n  function ObservableMap(initialData, enhancer_, name_) {\n    var _this = this;\n    if (enhancer_ === void 0) {\n      enhancer_ = deepEnhancer;\n    }\n    if (name_ === void 0) {\n      name_ =  false ? 0 : "ObservableMap";\n    }\n    this.enhancer_ = void 0;\n    this.name_ = void 0;\n    this[$mobx] = ObservableMapMarker;\n    this.data_ = void 0;\n    this.hasMap_ = void 0;\n    this.keysAtom_ = void 0;\n    this.interceptors_ = void 0;\n    this.changeListeners_ = void 0;\n    this.dehancer = void 0;\n    this.enhancer_ = enhancer_;\n    this.name_ = name_;\n    if (!isFunction(Map)) {\n      die(18);\n    }\n    initObservable(function () {\n      _this.keysAtom_ = createAtom( false ? 0 : "ObservableMap.keys()");\n      _this.data_ = new Map();\n      _this.hasMap_ = new Map();\n      if (initialData) {\n        _this.merge(initialData);\n      }\n    });\n  }\n  var _proto = ObservableMap.prototype;\n  _proto.has_ = function has_(key) {\n    return this.data_.has(key);\n  };\n  _proto.has = function has(key) {\n    var _this2 = this;\n    if (!globalState.trackingDerivation) {\n      return this.has_(key);\n    }\n    var entry = this.hasMap_.get(key);\n    if (!entry) {\n      var newEntry = entry = new ObservableValue(this.has_(key), referenceEnhancer,  false ? 0 : "ObservableMap.key?", false);\n      this.hasMap_.set(key, newEntry);\n      onBecomeUnobserved(newEntry, function () {\n        return _this2.hasMap_["delete"](key);\n      });\n    }\n    return entry.get();\n  };\n  _proto.set = function set(key, value) {\n    var hasKey = this.has_(key);\n    if (hasInterceptors(this)) {\n      var change = interceptChange(this, {\n        type: hasKey ? UPDATE : ADD,\n        object: this,\n        newValue: value,\n        name: key\n      });\n      if (!change) {\n        return this;\n      }\n      value = change.newValue;\n    }\n    if (hasKey) {\n      this.updateValue_(key, value);\n    } else {\n      this.addValue_(key, value);\n    }\n    return this;\n  };\n  _proto["delete"] = function _delete(key) {\n    var _this3 = this;\n    checkIfStateModificationsAreAllowed(this.keysAtom_);\n    if (hasInterceptors(this)) {\n      var change = interceptChange(this, {\n        type: DELETE,\n        object: this,\n        name: key\n      });\n      if (!change) {\n        return false;\n      }\n    }\n    if (this.has_(key)) {\n      var notifySpy = isSpyEnabled();\n      var notify = hasListeners(this);\n      var _change = notify || notifySpy ? {\n        observableKind: "map",\n        debugObjectName: this.name_,\n        type: DELETE,\n        object: this,\n        oldValue: this.data_.get(key).value_,\n        name: key\n      } : null;\n      if (false) {} // TODO fix type\n      transaction(function () {\n        var _this3$hasMap_$get;\n        _this3.keysAtom_.reportChanged();\n        (_this3$hasMap_$get = _this3.hasMap_.get(key)) == null ? void 0 : _this3$hasMap_$get.setNewValue_(false);\n        var observable = _this3.data_.get(key);\n        observable.setNewValue_(undefined);\n        _this3.data_["delete"](key);\n      });\n      if (notify) {\n        notifyListeners(this, _change);\n      }\n      if (false) {}\n      return true;\n    }\n    return false;\n  };\n  _proto.updateValue_ = function updateValue_(key, newValue) {\n    var observable = this.data_.get(key);\n    newValue = observable.prepareNewValue_(newValue);\n    if (newValue !== globalState.UNCHANGED) {\n      var notifySpy = isSpyEnabled();\n      var notify = hasListeners(this);\n      var change = notify || notifySpy ? {\n        observableKind: "map",\n        debugObjectName: this.name_,\n        type: UPDATE,\n        object: this,\n        oldValue: observable.value_,\n        name: key,\n        newValue: newValue\n      } : null;\n      if (false) {} // TODO fix type\n      observable.setNewValue_(newValue);\n      if (notify) {\n        notifyListeners(this, change);\n      }\n      if (false) {}\n    }\n  };\n  _proto.addValue_ = function addValue_(key, newValue) {\n    var _this4 = this;\n    checkIfStateModificationsAreAllowed(this.keysAtom_);\n    transaction(function () {\n      var _this4$hasMap_$get;\n      var observable = new ObservableValue(newValue, _this4.enhancer_,  false ? 0 : "ObservableMap.key", false);\n      _this4.data_.set(key, observable);\n      newValue = observable.value_; // value might have been changed\n      (_this4$hasMap_$get = _this4.hasMap_.get(key)) == null ? void 0 : _this4$hasMap_$get.setNewValue_(true);\n      _this4.keysAtom_.reportChanged();\n    });\n    var notifySpy = isSpyEnabled();\n    var notify = hasListeners(this);\n    var change = notify || notifySpy ? {\n      observableKind: "map",\n      debugObjectName: this.name_,\n      type: ADD,\n      object: this,\n      name: key,\n      newValue: newValue\n    } : null;\n    if (false) {} // TODO fix type\n    if (notify) {\n      notifyListeners(this, change);\n    }\n    if (false) {}\n  };\n  _proto.get = function get(key) {\n    if (this.has(key)) {\n      return this.dehanceValue_(this.data_.get(key).get());\n    }\n    return this.dehanceValue_(undefined);\n  };\n  _proto.dehanceValue_ = function dehanceValue_(value) {\n    if (this.dehancer !== undefined) {\n      return this.dehancer(value);\n    }\n    return value;\n  };\n  _proto.keys = function keys() {\n    this.keysAtom_.reportObserved();\n    return this.data_.keys();\n  };\n  _proto.values = function values() {\n    var self = this;\n    var keys = this.keys();\n    return makeIterable({\n      next: function next() {\n        var _keys$next = keys.next(),\n          done = _keys$next.done,\n          value = _keys$next.value;\n        return {\n          done: done,\n          value: done ? undefined : self.get(value)\n        };\n      }\n    });\n  };\n  _proto.entries = function entries() {\n    var self = this;\n    var keys = this.keys();\n    return makeIterable({\n      next: function next() {\n        var _keys$next2 = keys.next(),\n          done = _keys$next2.done,\n          value = _keys$next2.value;\n        return {\n          done: done,\n          value: done ? undefined : [value, self.get(value)]\n        };\n      }\n    });\n  };\n  _proto[_Symbol$iterator] = function () {\n    return this.entries();\n  };\n  _proto.forEach = function forEach(callback, thisArg) {\n    for (var _iterator = _createForOfIteratorHelperLoose(this), _step; !(_step = _iterator()).done;) {\n      var _step$value = _step.value,\n        key = _step$value[0],\n        value = _step$value[1];\n      callback.call(thisArg, value, key, this);\n    }\n  }\n  /** Merge another object into this object, returns this. */;\n  _proto.merge = function merge(other) {\n    var _this5 = this;\n    if (isObservableMap(other)) {\n      other = new Map(other);\n    }\n    transaction(function () {\n      if (isPlainObject(other)) {\n        getPlainObjectKeys(other).forEach(function (key) {\n          return _this5.set(key, other[key]);\n        });\n      } else if (Array.isArray(other)) {\n        other.forEach(function (_ref) {\n          var key = _ref[0],\n            value = _ref[1];\n          return _this5.set(key, value);\n        });\n      } else if (isES6Map(other)) {\n        if (other.constructor !== Map) {\n          die(19, other);\n        }\n        other.forEach(function (value, key) {\n          return _this5.set(key, value);\n        });\n      } else if (other !== null && other !== undefined) {\n        die(20, other);\n      }\n    });\n    return this;\n  };\n  _proto.clear = function clear() {\n    var _this6 = this;\n    transaction(function () {\n      untracked(function () {\n        for (var _iterator2 = _createForOfIteratorHelperLoose(_this6.keys()), _step2; !(_step2 = _iterator2()).done;) {\n          var key = _step2.value;\n          _this6["delete"](key);\n        }\n      });\n    });\n  };\n  _proto.replace = function replace(values) {\n    var _this7 = this;\n    // Implementation requirements:\n    // - respect ordering of replacement map\n    // - allow interceptors to run and potentially prevent individual operations\n    // - don\'t recreate observables that already exist in original map (so we don\'t destroy existing subscriptions)\n    // - don\'t _keysAtom.reportChanged if the keys of resulting map are indentical (order matters!)\n    // - note that result map may differ from replacement map due to the interceptors\n    transaction(function () {\n      // Convert to map so we can do quick key lookups\n      var replacementMap = convertToMap(values);\n      var orderedData = new Map();\n      // Used for optimization\n      var keysReportChangedCalled = false;\n      // Delete keys that don\'t exist in replacement map\n      // if the key deletion is prevented by interceptor\n      // add entry at the beginning of the result map\n      for (var _iterator3 = _createForOfIteratorHelperLoose(_this7.data_.keys()), _step3; !(_step3 = _iterator3()).done;) {\n        var key = _step3.value;\n        // Concurrently iterating/deleting keys\n        // iterator should handle this correctly\n        if (!replacementMap.has(key)) {\n          var deleted = _this7["delete"](key);\n          // Was the key removed?\n          if (deleted) {\n            // _keysAtom.reportChanged() was already called\n            keysReportChangedCalled = true;\n          } else {\n            // Delete prevented by interceptor\n            var value = _this7.data_.get(key);\n            orderedData.set(key, value);\n          }\n        }\n      }\n      // Merge entries\n      for (var _iterator4 = _createForOfIteratorHelperLoose(replacementMap.entries()), _step4; !(_step4 = _iterator4()).done;) {\n        var _step4$value = _step4.value,\n          _key = _step4$value[0],\n          _value = _step4$value[1];\n        // We will want to know whether a new key is added\n        var keyExisted = _this7.data_.has(_key);\n        // Add or update value\n        _this7.set(_key, _value);\n        // The addition could have been prevent by interceptor\n        if (_this7.data_.has(_key)) {\n          // The update could have been prevented by interceptor\n          // and also we want to preserve existing values\n          // so use value from _data map (instead of replacement map)\n          var _value2 = _this7.data_.get(_key);\n          orderedData.set(_key, _value2);\n          // Was a new key added?\n          if (!keyExisted) {\n            // _keysAtom.reportChanged() was already called\n            keysReportChangedCalled = true;\n          }\n        }\n      }\n      // Check for possible key order change\n      if (!keysReportChangedCalled) {\n        if (_this7.data_.size !== orderedData.size) {\n          // If size differs, keys are definitely modified\n          _this7.keysAtom_.reportChanged();\n        } else {\n          var iter1 = _this7.data_.keys();\n          var iter2 = orderedData.keys();\n          var next1 = iter1.next();\n          var next2 = iter2.next();\n          while (!next1.done) {\n            if (next1.value !== next2.value) {\n              _this7.keysAtom_.reportChanged();\n              break;\n            }\n            next1 = iter1.next();\n            next2 = iter2.next();\n          }\n        }\n      }\n      // Use correctly ordered map\n      _this7.data_ = orderedData;\n    });\n    return this;\n  };\n  _proto.toString = function toString() {\n    return "[object ObservableMap]";\n  };\n  _proto.toJSON = function toJSON() {\n    return Array.from(this);\n  };\n  /**\n   * Observes this object. Triggers for the events \'add\', \'update\' and \'delete\'.\n   * See: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/observe\n   * for callback details\n   */\n  _proto.observe_ = function observe_(listener, fireImmediately) {\n    if (false) {}\n    return registerListener(this, listener);\n  };\n  _proto.intercept_ = function intercept_(handler) {\n    return registerInterceptor(this, handler);\n  };\n  _createClass(ObservableMap, [{\n    key: "size",\n    get: function get() {\n      this.keysAtom_.reportObserved();\n      return this.data_.size;\n    }\n  }, {\n    key: _Symbol$toStringTag,\n    get: function get() {\n      return "Map";\n    }\n  }]);\n  return ObservableMap;\n}();\n// eslint-disable-next-line\nvar isObservableMap = /*#__PURE__*/createInstanceofPredicate("ObservableMap", ObservableMap);\nfunction convertToMap(dataStructure) {\n  if (isES6Map(dataStructure) || isObservableMap(dataStructure)) {\n    return dataStructure;\n  } else if (Array.isArray(dataStructure)) {\n    return new Map(dataStructure);\n  } else if (isPlainObject(dataStructure)) {\n    var map = new Map();\n    for (var key in dataStructure) {\n      map.set(key, dataStructure[key]);\n    }\n    return map;\n  } else {\n    return die(21, dataStructure);\n  }\n}\nvar _Symbol$iterator$1, _Symbol$toStringTag$1;\nvar ObservableSetMarker = {};\n_Symbol$iterator$1 = Symbol.iterator;\n_Symbol$toStringTag$1 = Symbol.toStringTag;\nvar ObservableSet = /*#__PURE__*/function () {\n  function ObservableSet(initialData, enhancer, name_) {\n    var _this = this;\n    if (enhancer === void 0) {\n      enhancer = deepEnhancer;\n    }\n    if (name_ === void 0) {\n      name_ =  false ? 0 : "ObservableSet";\n    }\n    this.name_ = void 0;\n    this[$mobx] = ObservableSetMarker;\n    this.data_ = new Set();\n    this.atom_ = void 0;\n    this.changeListeners_ = void 0;\n    this.interceptors_ = void 0;\n    this.dehancer = void 0;\n    this.enhancer_ = void 0;\n    this.name_ = name_;\n    if (!isFunction(Set)) {\n      die(22);\n    }\n    this.enhancer_ = function (newV, oldV) {\n      return enhancer(newV, oldV, name_);\n    };\n    initObservable(function () {\n      _this.atom_ = createAtom(_this.name_);\n      if (initialData) {\n        _this.replace(initialData);\n      }\n    });\n  }\n  var _proto = ObservableSet.prototype;\n  _proto.dehanceValue_ = function dehanceValue_(value) {\n    if (this.dehancer !== undefined) {\n      return this.dehancer(value);\n    }\n    return value;\n  };\n  _proto.clear = function clear() {\n    var _this2 = this;\n    transaction(function () {\n      untracked(function () {\n        for (var _iterator = _createForOfIteratorHelperLoose(_this2.data_.values()), _step; !(_step = _iterator()).done;) {\n          var value = _step.value;\n          _this2["delete"](value);\n        }\n      });\n    });\n  };\n  _proto.forEach = function forEach(callbackFn, thisArg) {\n    for (var _iterator2 = _createForOfIteratorHelperLoose(this), _step2; !(_step2 = _iterator2()).done;) {\n      var value = _step2.value;\n      callbackFn.call(thisArg, value, value, this);\n    }\n  };\n  _proto.add = function add(value) {\n    var _this3 = this;\n    checkIfStateModificationsAreAllowed(this.atom_);\n    if (hasInterceptors(this)) {\n      var change = interceptChange(this, {\n        type: ADD,\n        object: this,\n        newValue: value\n      });\n      if (!change) {\n        return this;\n      }\n      // ideally, value = change.value would be done here, so that values can be\n      // changed by interceptor. Same applies for other Set and Map api\'s.\n    }\n    if (!this.has(value)) {\n      transaction(function () {\n        _this3.data_.add(_this3.enhancer_(value, undefined));\n        _this3.atom_.reportChanged();\n      });\n      var notifySpy =  false && 0;\n      var notify = hasListeners(this);\n      var _change = notify || notifySpy ? {\n        observableKind: "set",\n        debugObjectName: this.name_,\n        type: ADD,\n        object: this,\n        newValue: value\n      } : null;\n      if (notifySpy && "production" !== "production") {}\n      if (notify) {\n        notifyListeners(this, _change);\n      }\n      if (notifySpy && "production" !== "production") {}\n    }\n    return this;\n  };\n  _proto["delete"] = function _delete(value) {\n    var _this4 = this;\n    if (hasInterceptors(this)) {\n      var change = interceptChange(this, {\n        type: DELETE,\n        object: this,\n        oldValue: value\n      });\n      if (!change) {\n        return false;\n      }\n    }\n    if (this.has(value)) {\n      var notifySpy =  false && 0;\n      var notify = hasListeners(this);\n      var _change2 = notify || notifySpy ? {\n        observableKind: "set",\n        debugObjectName: this.name_,\n        type: DELETE,\n        object: this,\n        oldValue: value\n      } : null;\n      if (notifySpy && "production" !== "production") {}\n      transaction(function () {\n        _this4.atom_.reportChanged();\n        _this4.data_["delete"](value);\n      });\n      if (notify) {\n        notifyListeners(this, _change2);\n      }\n      if (notifySpy && "production" !== "production") {}\n      return true;\n    }\n    return false;\n  };\n  _proto.has = function has(value) {\n    this.atom_.reportObserved();\n    return this.data_.has(this.dehanceValue_(value));\n  };\n  _proto.entries = function entries() {\n    var nextIndex = 0;\n    var keys = Array.from(this.keys());\n    var values = Array.from(this.values());\n    return makeIterable({\n      next: function next() {\n        var index = nextIndex;\n        nextIndex += 1;\n        return index < values.length ? {\n          value: [keys[index], values[index]],\n          done: false\n        } : {\n          done: true\n        };\n      }\n    });\n  };\n  _proto.keys = function keys() {\n    return this.values();\n  };\n  _proto.values = function values() {\n    this.atom_.reportObserved();\n    var self = this;\n    var nextIndex = 0;\n    var observableValues = Array.from(this.data_.values());\n    return makeIterable({\n      next: function next() {\n        return nextIndex < observableValues.length ? {\n          value: self.dehanceValue_(observableValues[nextIndex++]),\n          done: false\n        } : {\n          done: true\n        };\n      }\n    });\n  };\n  _proto.replace = function replace(other) {\n    var _this5 = this;\n    if (isObservableSet(other)) {\n      other = new Set(other);\n    }\n    transaction(function () {\n      if (Array.isArray(other)) {\n        _this5.clear();\n        other.forEach(function (value) {\n          return _this5.add(value);\n        });\n      } else if (isES6Set(other)) {\n        _this5.clear();\n        other.forEach(function (value) {\n          return _this5.add(value);\n        });\n      } else if (other !== null && other !== undefined) {\n        die("Cannot initialize set from " + other);\n      }\n    });\n    return this;\n  };\n  _proto.observe_ = function observe_(listener, fireImmediately) {\n    // ... \'fireImmediately\' could also be true?\n    if (false) {}\n    return registerListener(this, listener);\n  };\n  _proto.intercept_ = function intercept_(handler) {\n    return registerInterceptor(this, handler);\n  };\n  _proto.toJSON = function toJSON() {\n    return Array.from(this);\n  };\n  _proto.toString = function toString() {\n    return "[object ObservableSet]";\n  };\n  _proto[_Symbol$iterator$1] = function () {\n    return this.values();\n  };\n  _createClass(ObservableSet, [{\n    key: "size",\n    get: function get() {\n      this.atom_.reportObserved();\n      return this.data_.size;\n    }\n  }, {\n    key: _Symbol$toStringTag$1,\n    get: function get() {\n      return "Set";\n    }\n  }]);\n  return ObservableSet;\n}();\n// eslint-disable-next-line\nvar isObservableSet = /*#__PURE__*/createInstanceofPredicate("ObservableSet", ObservableSet);\nvar descriptorCache = /*#__PURE__*/Object.create(null);\nvar REMOVE = "remove";\nvar ObservableObjectAdministration = /*#__PURE__*/function () {\n  function ObservableObjectAdministration(target_, values_, name_,\n  // Used anytime annotation is not explicitely provided\n  defaultAnnotation_) {\n    if (values_ === void 0) {\n      values_ = new Map();\n    }\n    if (defaultAnnotation_ === void 0) {\n      defaultAnnotation_ = autoAnnotation;\n    }\n    this.target_ = void 0;\n    this.values_ = void 0;\n    this.name_ = void 0;\n    this.defaultAnnotation_ = void 0;\n    this.keysAtom_ = void 0;\n    this.changeListeners_ = void 0;\n    this.interceptors_ = void 0;\n    this.proxy_ = void 0;\n    this.isPlainObject_ = void 0;\n    this.appliedAnnotations_ = void 0;\n    this.pendingKeys_ = void 0;\n    this.target_ = target_;\n    this.values_ = values_;\n    this.name_ = name_;\n    this.defaultAnnotation_ = defaultAnnotation_;\n    this.keysAtom_ = new Atom( false ? 0 : "ObservableObject.keys");\n    // Optimization: we use this frequently\n    this.isPlainObject_ = isPlainObject(this.target_);\n    if (false) {}\n    if (false) {}\n  }\n  var _proto = ObservableObjectAdministration.prototype;\n  _proto.getObservablePropValue_ = function getObservablePropValue_(key) {\n    return this.values_.get(key).get();\n  };\n  _proto.setObservablePropValue_ = function setObservablePropValue_(key, newValue) {\n    var observable = this.values_.get(key);\n    if (observable instanceof ComputedValue) {\n      observable.set(newValue);\n      return true;\n    }\n    // intercept\n    if (hasInterceptors(this)) {\n      var change = interceptChange(this, {\n        type: UPDATE,\n        object: this.proxy_ || this.target_,\n        name: key,\n        newValue: newValue\n      });\n      if (!change) {\n        return null;\n      }\n      newValue = change.newValue;\n    }\n    newValue = observable.prepareNewValue_(newValue);\n    // notify spy & observers\n    if (newValue !== globalState.UNCHANGED) {\n      var notify = hasListeners(this);\n      var notifySpy =  false && 0;\n      var _change = notify || notifySpy ? {\n        type: UPDATE,\n        observableKind: "object",\n        debugObjectName: this.name_,\n        object: this.proxy_ || this.target_,\n        oldValue: observable.value_,\n        name: key,\n        newValue: newValue\n      } : null;\n      if (false) {}\n      observable.setNewValue_(newValue);\n      if (notify) {\n        notifyListeners(this, _change);\n      }\n      if (false) {}\n    }\n    return true;\n  };\n  _proto.get_ = function get_(key) {\n    if (globalState.trackingDerivation && !hasProp(this.target_, key)) {\n      // Key doesn\'t exist yet, subscribe for it in case it\'s added later\n      this.has_(key);\n    }\n    return this.target_[key];\n  }\n  /**\n   * @param {PropertyKey} key\n   * @param {any} value\n   * @param {Annotation|boolean} annotation true - use default annotation, false - copy as is\n   * @param {boolean} proxyTrap whether it\'s called from proxy trap\n   * @returns {boolean|null} true on success, false on failure (proxyTrap + non-configurable), null when cancelled by interceptor\n   */;\n  _proto.set_ = function set_(key, value, proxyTrap) {\n    if (proxyTrap === void 0) {\n      proxyTrap = false;\n    }\n    // Don\'t use .has(key) - we care about own\n    if (hasProp(this.target_, key)) {\n      // Existing prop\n      if (this.values_.has(key)) {\n        // Observable (can be intercepted)\n        return this.setObservablePropValue_(key, value);\n      } else if (proxyTrap) {\n        // Non-observable - proxy\n        return Reflect.set(this.target_, key, value);\n      } else {\n        // Non-observable\n        this.target_[key] = value;\n        return true;\n      }\n    } else {\n      // New prop\n      return this.extend_(key, {\n        value: value,\n        enumerable: true,\n        writable: true,\n        configurable: true\n      }, this.defaultAnnotation_, proxyTrap);\n    }\n  }\n  // Trap for "in"\n  ;\n  _proto.has_ = function has_(key) {\n    if (!globalState.trackingDerivation) {\n      // Skip key subscription outside derivation\n      return key in this.target_;\n    }\n    this.pendingKeys_ || (this.pendingKeys_ = new Map());\n    var entry = this.pendingKeys_.get(key);\n    if (!entry) {\n      entry = new ObservableValue(key in this.target_, referenceEnhancer,  false ? 0 : "ObservableObject.key?", false);\n      this.pendingKeys_.set(key, entry);\n    }\n    return entry.get();\n  }\n  /**\n   * @param {PropertyKey} key\n   * @param {Annotation|boolean} annotation true - use default annotation, false - ignore prop\n   */;\n  _proto.make_ = function make_(key, annotation) {\n    if (annotation === true) {\n      annotation = this.defaultAnnotation_;\n    }\n    if (annotation === false) {\n      return;\n    }\n    assertAnnotable(this, annotation, key);\n    if (!(key in this.target_)) {\n      var _this$target_$storedA;\n      // Throw on missing key, except for decorators:\n      // Decorator annotations are collected from whole prototype chain.\n      // When called from super() some props may not exist yet.\n      // However we don\'t have to worry about missing prop,\n      // because the decorator must have been applied to something.\n      if ((_this$target_$storedA = this.target_[storedAnnotationsSymbol]) != null && _this$target_$storedA[key]) {\n        return; // will be annotated by subclass constructor\n      } else {\n        die(1, annotation.annotationType_, this.name_ + "." + key.toString());\n      }\n    }\n    var source = this.target_;\n    while (source && source !== objectPrototype) {\n      var descriptor = getDescriptor(source, key);\n      if (descriptor) {\n        var outcome = annotation.make_(this, key, descriptor, source);\n        if (outcome === 0 /* MakeResult.Cancel */) {\n          return;\n        }\n        if (outcome === 1 /* MakeResult.Break */) {\n          break;\n        }\n      }\n      source = Object.getPrototypeOf(source);\n    }\n    recordAnnotationApplied(this, annotation, key);\n  }\n  /**\n   * @param {PropertyKey} key\n   * @param {PropertyDescriptor} descriptor\n   * @param {Annotation|boolean} annotation true - use default annotation, false - copy as is\n   * @param {boolean} proxyTrap whether it\'s called from proxy trap\n   * @returns {boolean|null} true on success, false on failure (proxyTrap + non-configurable), null when cancelled by interceptor\n   */;\n  _proto.extend_ = function extend_(key, descriptor, annotation, proxyTrap) {\n    if (proxyTrap === void 0) {\n      proxyTrap = false;\n    }\n    if (annotation === true) {\n      annotation = this.defaultAnnotation_;\n    }\n    if (annotation === false) {\n      return this.defineProperty_(key, descriptor, proxyTrap);\n    }\n    assertAnnotable(this, annotation, key);\n    var outcome = annotation.extend_(this, key, descriptor, proxyTrap);\n    if (outcome) {\n      recordAnnotationApplied(this, annotation, key);\n    }\n    return outcome;\n  }\n  /**\n   * @param {PropertyKey} key\n   * @param {PropertyDescriptor} descriptor\n   * @param {boolean} proxyTrap whether it\'s called from proxy trap\n   * @returns {boolean|null} true on success, false on failure (proxyTrap + non-configurable), null when cancelled by interceptor\n   */;\n  _proto.defineProperty_ = function defineProperty_(key, descriptor, proxyTrap) {\n    if (proxyTrap === void 0) {\n      proxyTrap = false;\n    }\n    checkIfStateModificationsAreAllowed(this.keysAtom_);\n    try {\n      startBatch();\n      // Delete\n      var deleteOutcome = this.delete_(key);\n      if (!deleteOutcome) {\n        // Failure or intercepted\n        return deleteOutcome;\n      }\n      // ADD interceptor\n      if (hasInterceptors(this)) {\n        var change = interceptChange(this, {\n          object: this.proxy_ || this.target_,\n          name: key,\n          type: ADD,\n          newValue: descriptor.value\n        });\n        if (!change) {\n          return null;\n        }\n        var newValue = change.newValue;\n        if (descriptor.value !== newValue) {\n          descriptor = mobx_esm_extends({}, descriptor, {\n            value: newValue\n          });\n        }\n      }\n      // Define\n      if (proxyTrap) {\n        if (!Reflect.defineProperty(this.target_, key, descriptor)) {\n          return false;\n        }\n      } else {\n        defineProperty(this.target_, key, descriptor);\n      }\n      // Notify\n      this.notifyPropertyAddition_(key, descriptor.value);\n    } finally {\n      endBatch();\n    }\n    return true;\n  }\n  // If original descriptor becomes relevant, move this to annotation directly\n  ;\n  _proto.defineObservableProperty_ = function defineObservableProperty_(key, value, enhancer, proxyTrap) {\n    if (proxyTrap === void 0) {\n      proxyTrap = false;\n    }\n    checkIfStateModificationsAreAllowed(this.keysAtom_);\n    try {\n      startBatch();\n      // Delete\n      var deleteOutcome = this.delete_(key);\n      if (!deleteOutcome) {\n        // Failure or intercepted\n        return deleteOutcome;\n      }\n      // ADD interceptor\n      if (hasInterceptors(this)) {\n        var change = interceptChange(this, {\n          object: this.proxy_ || this.target_,\n          name: key,\n          type: ADD,\n          newValue: value\n        });\n        if (!change) {\n          return null;\n        }\n        value = change.newValue;\n      }\n      var cachedDescriptor = getCachedObservablePropDescriptor(key);\n      var descriptor = {\n        configurable: globalState.safeDescriptors ? this.isPlainObject_ : true,\n        enumerable: true,\n        get: cachedDescriptor.get,\n        set: cachedDescriptor.set\n      };\n      // Define\n      if (proxyTrap) {\n        if (!Reflect.defineProperty(this.target_, key, descriptor)) {\n          return false;\n        }\n      } else {\n        defineProperty(this.target_, key, descriptor);\n      }\n      var observable = new ObservableValue(value, enhancer,  false ? 0 : "ObservableObject.key", false);\n      this.values_.set(key, observable);\n      // Notify (value possibly changed by ObservableValue)\n      this.notifyPropertyAddition_(key, observable.value_);\n    } finally {\n      endBatch();\n    }\n    return true;\n  }\n  // If original descriptor becomes relevant, move this to annotation directly\n  ;\n  _proto.defineComputedProperty_ = function defineComputedProperty_(key, options, proxyTrap) {\n    if (proxyTrap === void 0) {\n      proxyTrap = false;\n    }\n    checkIfStateModificationsAreAllowed(this.keysAtom_);\n    try {\n      startBatch();\n      // Delete\n      var deleteOutcome = this.delete_(key);\n      if (!deleteOutcome) {\n        // Failure or intercepted\n        return deleteOutcome;\n      }\n      // ADD interceptor\n      if (hasInterceptors(this)) {\n        var change = interceptChange(this, {\n          object: this.proxy_ || this.target_,\n          name: key,\n          type: ADD,\n          newValue: undefined\n        });\n        if (!change) {\n          return null;\n        }\n      }\n      options.name || (options.name =  false ? 0 : "ObservableObject.key");\n      options.context = this.proxy_ || this.target_;\n      var cachedDescriptor = getCachedObservablePropDescriptor(key);\n      var descriptor = {\n        configurable: globalState.safeDescriptors ? this.isPlainObject_ : true,\n        enumerable: false,\n        get: cachedDescriptor.get,\n        set: cachedDescriptor.set\n      };\n      // Define\n      if (proxyTrap) {\n        if (!Reflect.defineProperty(this.target_, key, descriptor)) {\n          return false;\n        }\n      } else {\n        defineProperty(this.target_, key, descriptor);\n      }\n      this.values_.set(key, new ComputedValue(options));\n      // Notify\n      this.notifyPropertyAddition_(key, undefined);\n    } finally {\n      endBatch();\n    }\n    return true;\n  }\n  /**\n   * @param {PropertyKey} key\n   * @param {PropertyDescriptor} descriptor\n   * @param {boolean} proxyTrap whether it\'s called from proxy trap\n   * @returns {boolean|null} true on success, false on failure (proxyTrap + non-configurable), null when cancelled by interceptor\n   */;\n  _proto.delete_ = function delete_(key, proxyTrap) {\n    if (proxyTrap === void 0) {\n      proxyTrap = false;\n    }\n    checkIfStateModificationsAreAllowed(this.keysAtom_);\n    // No such prop\n    if (!hasProp(this.target_, key)) {\n      return true;\n    }\n    // Intercept\n    if (hasInterceptors(this)) {\n      var change = interceptChange(this, {\n        object: this.proxy_ || this.target_,\n        name: key,\n        type: REMOVE\n      });\n      // Cancelled\n      if (!change) {\n        return null;\n      }\n    }\n    // Delete\n    try {\n      var _this$pendingKeys_, _this$pendingKeys_$ge;\n      startBatch();\n      var notify = hasListeners(this);\n      var notifySpy =  false && 0;\n      var observable = this.values_.get(key);\n      // Value needed for spies/listeners\n      var value = undefined;\n      // Optimization: don\'t pull the value unless we will need it\n      if (!observable && (notify || notifySpy)) {\n        var _getDescriptor;\n        value = (_getDescriptor = getDescriptor(this.target_, key)) == null ? void 0 : _getDescriptor.value;\n      }\n      // delete prop (do first, may fail)\n      if (proxyTrap) {\n        if (!Reflect.deleteProperty(this.target_, key)) {\n          return false;\n        }\n      } else {\n        delete this.target_[key];\n      }\n      // Allow re-annotating this field\n      if (false) {}\n      // Clear observable\n      if (observable) {\n        this.values_["delete"](key);\n        // for computed, value is undefined\n        if (observable instanceof ObservableValue) {\n          value = observable.value_;\n        }\n        // Notify: autorun(() => obj[key]), see #1796\n        propagateChanged(observable);\n      }\n      // Notify "keys/entries/values" observers\n      this.keysAtom_.reportChanged();\n      // Notify "has" observers\n      // "in" as it may still exist in proto\n      (_this$pendingKeys_ = this.pendingKeys_) == null ? void 0 : (_this$pendingKeys_$ge = _this$pendingKeys_.get(key)) == null ? void 0 : _this$pendingKeys_$ge.set(key in this.target_);\n      // Notify spies/listeners\n      if (notify || notifySpy) {\n        var _change2 = {\n          type: REMOVE,\n          observableKind: "object",\n          object: this.proxy_ || this.target_,\n          debugObjectName: this.name_,\n          oldValue: value,\n          name: key\n        };\n        if (false) {}\n        if (notify) {\n          notifyListeners(this, _change2);\n        }\n        if (false) {}\n      }\n    } finally {\n      endBatch();\n    }\n    return true;\n  }\n  /**\n   * Observes this object. Triggers for the events \'add\', \'update\' and \'delete\'.\n   * See: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/observe\n   * for callback details\n   */;\n  _proto.observe_ = function observe_(callback, fireImmediately) {\n    if (false) {}\n    return registerListener(this, callback);\n  };\n  _proto.intercept_ = function intercept_(handler) {\n    return registerInterceptor(this, handler);\n  };\n  _proto.notifyPropertyAddition_ = function notifyPropertyAddition_(key, value) {\n    var _this$pendingKeys_2, _this$pendingKeys_2$g;\n    var notify = hasListeners(this);\n    var notifySpy =  false && 0;\n    if (notify || notifySpy) {\n      var change = notify || notifySpy ? {\n        type: ADD,\n        observableKind: "object",\n        debugObjectName: this.name_,\n        object: this.proxy_ || this.target_,\n        name: key,\n        newValue: value\n      } : null;\n      if (false) {}\n      if (notify) {\n        notifyListeners(this, change);\n      }\n      if (false) {}\n    }\n    (_this$pendingKeys_2 = this.pendingKeys_) == null ? void 0 : (_this$pendingKeys_2$g = _this$pendingKeys_2.get(key)) == null ? void 0 : _this$pendingKeys_2$g.set(true);\n    // Notify "keys/entries/values" observers\n    this.keysAtom_.reportChanged();\n  };\n  _proto.ownKeys_ = function ownKeys_() {\n    this.keysAtom_.reportObserved();\n    return ownKeys(this.target_);\n  };\n  _proto.keys_ = function keys_() {\n    // Returns enumerable && own, but unfortunately keysAtom will report on ANY key change.\n    // There is no way to distinguish between Object.keys(object) and Reflect.ownKeys(object) - both are handled by ownKeys trap.\n    // We can either over-report in Object.keys(object) or under-report in Reflect.ownKeys(object)\n    // We choose to over-report in Object.keys(object), because:\n    // - typically it\'s used with simple data objects\n    // - when symbolic/non-enumerable keys are relevant Reflect.ownKeys works as expected\n    this.keysAtom_.reportObserved();\n    return Object.keys(this.target_);\n  };\n  return ObservableObjectAdministration;\n}();\nfunction asObservableObject(target, options) {\n  var _options$name;\n  if (false) {}\n  if (hasProp(target, $mobx)) {\n    if (false) {}\n    return target;\n  }\n  if (false) {}\n  var name = (_options$name = options == null ? void 0 : options.name) != null ? _options$name :  false ? 0 : "ObservableObject";\n  var adm = new ObservableObjectAdministration(target, new Map(), String(name), getAnnotationFromOptions(options));\n  addHiddenProp(target, $mobx, adm);\n  return target;\n}\nvar isObservableObjectAdministration = /*#__PURE__*/createInstanceofPredicate("ObservableObjectAdministration", ObservableObjectAdministration);\nfunction getCachedObservablePropDescriptor(key) {\n  return descriptorCache[key] || (descriptorCache[key] = {\n    get: function get() {\n      return this[$mobx].getObservablePropValue_(key);\n    },\n    set: function set(value) {\n      return this[$mobx].setObservablePropValue_(key, value);\n    }\n  });\n}\nfunction isObservableObject(thing) {\n  if (isObject(thing)) {\n    return isObservableObjectAdministration(thing[$mobx]);\n  }\n  return false;\n}\nfunction recordAnnotationApplied(adm, annotation, key) {\n  var _adm$target_$storedAn;\n  if (false) {}\n  // Remove applied decorator annotation so we don\'t try to apply it again in subclass constructor\n  (_adm$target_$storedAn = adm.target_[storedAnnotationsSymbol]) == null ? true : delete _adm$target_$storedAn[key];\n}\nfunction assertAnnotable(adm, annotation, key) {\n  // Valid annotation\n  if (false) {}\n  /*\n  // Configurable, not sealed, not frozen\n  // Possibly not needed, just a little better error then the one thrown by engine.\n  // Cases where this would be useful the most (subclass field initializer) are not interceptable by this.\n  if (__DEV__) {\n      const configurable = getDescriptor(adm.target_, key)?.configurable\n      const frozen = Object.isFrozen(adm.target_)\n      const sealed = Object.isSealed(adm.target_)\n      if (!configurable || frozen || sealed) {\n          const fieldName = `${adm.name_}.${key.toString()}`\n          const requestedAnnotationType = annotation.annotationType_\n          let error = `Cannot apply \'${requestedAnnotationType}\' to \'${fieldName}\':`\n          if (frozen) {\n              error += `\\nObject is frozen.`\n          }\n          if (sealed) {\n              error += `\\nObject is sealed.`\n          }\n          if (!configurable) {\n              error += `\\nproperty is not configurable.`\n              // Mention only if caused by us to avoid confusion\n              if (hasProp(adm.appliedAnnotations!, key)) {\n                  error += `\\nTo prevent accidental re-definition of a field by a subclass, `\n                  error += `all annotated fields of non-plain objects (classes) are not configurable.`\n              }\n          }\n          die(error)\n      }\n  }\n  */\n  // Not annotated\n  if (false) { var requestedAnnotationType, currentAnnotationType, fieldName; }\n}\n\n// Bug in safari 9.* (or iOS 9 safari mobile). See #364\nvar ENTRY_0 = /*#__PURE__*/createArrayEntryDescriptor(0);\nvar safariPrototypeSetterInheritanceBug = /*#__PURE__*/function () {\n  var v = false;\n  var p = {};\n  Object.defineProperty(p, "0", {\n    set: function set() {\n      v = true;\n    }\n  });\n  /*#__PURE__*/\n  Object.create(p)["0"] = 1;\n  return v === false;\n}();\n/**\n * This array buffer contains two lists of properties, so that all arrays\n * can recycle their property definitions, which significantly improves performance of creating\n * properties on the fly.\n */\nvar OBSERVABLE_ARRAY_BUFFER_SIZE = 0;\n// Typescript workaround to make sure ObservableArray extends Array\nvar StubArray = function StubArray() {};\nfunction inherit(ctor, proto) {\n  if (Object.setPrototypeOf) {\n    Object.setPrototypeOf(ctor.prototype, proto);\n  } else if (ctor.prototype.__proto__ !== undefined) {\n    ctor.prototype.__proto__ = proto;\n  } else {\n    ctor.prototype = proto;\n  }\n}\ninherit(StubArray, Array.prototype);\n// Weex proto freeze protection was here,\n// but it is unclear why the hack is need as MobX never changed the prototype\n// anyway, so removed it in V6\nvar LegacyObservableArray = /*#__PURE__*/function (_StubArray, _Symbol$toStringTag, _Symbol$iterator) {\n  _inheritsLoose(LegacyObservableArray, _StubArray);\n  function LegacyObservableArray(initialValues, enhancer, name, owned) {\n    var _this;\n    if (name === void 0) {\n      name =  false ? 0 : "ObservableArray";\n    }\n    if (owned === void 0) {\n      owned = false;\n    }\n    _this = _StubArray.call(this) || this;\n    initObservable(function () {\n      var adm = new ObservableArrayAdministration(name, enhancer, owned, true);\n      adm.proxy_ = _assertThisInitialized(_this);\n      addHiddenFinalProp(_assertThisInitialized(_this), $mobx, adm);\n      if (initialValues && initialValues.length) {\n        // @ts-ignore\n        _this.spliceWithArray(0, 0, initialValues);\n      }\n      if (safariPrototypeSetterInheritanceBug) {\n        // Seems that Safari won\'t use numeric prototype setter until any * numeric property is\n        // defined on the instance. After that it works fine, even if this property is deleted.\n        Object.defineProperty(_assertThisInitialized(_this), "0", ENTRY_0);\n      }\n    });\n    return _this;\n  }\n  var _proto = LegacyObservableArray.prototype;\n  _proto.concat = function concat() {\n    this[$mobx].atom_.reportObserved();\n    for (var _len = arguments.length, arrays = new Array(_len), _key = 0; _key < _len; _key++) {\n      arrays[_key] = arguments[_key];\n    }\n    return Array.prototype.concat.apply(this.slice(),\n    //@ts-ignore\n    arrays.map(function (a) {\n      return isObservableArray(a) ? a.slice() : a;\n    }));\n  };\n  _proto[_Symbol$iterator] = function () {\n    var self = this;\n    var nextIndex = 0;\n    return makeIterable({\n      next: function next() {\n        return nextIndex < self.length ? {\n          value: self[nextIndex++],\n          done: false\n        } : {\n          done: true,\n          value: undefined\n        };\n      }\n    });\n  };\n  _createClass(LegacyObservableArray, [{\n    key: "length",\n    get: function get() {\n      return this[$mobx].getArrayLength_();\n    },\n    set: function set(newLength) {\n      this[$mobx].setArrayLength_(newLength);\n    }\n  }, {\n    key: _Symbol$toStringTag,\n    get: function get() {\n      return "Array";\n    }\n  }]);\n  return LegacyObservableArray;\n}(StubArray, Symbol.toStringTag, Symbol.iterator);\nObject.entries(arrayExtensions).forEach(function (_ref) {\n  var prop = _ref[0],\n    fn = _ref[1];\n  if (prop !== "concat") {\n    addHiddenProp(LegacyObservableArray.prototype, prop, fn);\n  }\n});\nfunction createArrayEntryDescriptor(index) {\n  return {\n    enumerable: false,\n    configurable: true,\n    get: function get() {\n      return this[$mobx].get_(index);\n    },\n    set: function set(value) {\n      this[$mobx].set_(index, value);\n    }\n  };\n}\nfunction createArrayBufferItem(index) {\n  defineProperty(LegacyObservableArray.prototype, "" + index, createArrayEntryDescriptor(index));\n}\nfunction reserveArrayBuffer(max) {\n  if (max > OBSERVABLE_ARRAY_BUFFER_SIZE) {\n    for (var index = OBSERVABLE_ARRAY_BUFFER_SIZE; index < max + 100; index++) {\n      createArrayBufferItem(index);\n    }\n    OBSERVABLE_ARRAY_BUFFER_SIZE = max;\n  }\n}\nreserveArrayBuffer(1000);\nfunction createLegacyArray(initialValues, enhancer, name) {\n  return new LegacyObservableArray(initialValues, enhancer, name);\n}\nfunction getAtom(thing, property) {\n  if (typeof thing === "object" && thing !== null) {\n    if (isObservableArray(thing)) {\n      if (property !== undefined) {\n        die(23);\n      }\n      return thing[$mobx].atom_;\n    }\n    if (isObservableSet(thing)) {\n      return thing.atom_;\n    }\n    if (isObservableMap(thing)) {\n      if (property === undefined) {\n        return thing.keysAtom_;\n      }\n      var observable = thing.data_.get(property) || thing.hasMap_.get(property);\n      if (!observable) {\n        die(25, property, getDebugName(thing));\n      }\n      return observable;\n    }\n    if (isObservableObject(thing)) {\n      if (!property) {\n        return die(26);\n      }\n      var _observable = thing[$mobx].values_.get(property);\n      if (!_observable) {\n        die(27, property, getDebugName(thing));\n      }\n      return _observable;\n    }\n    if (isAtom(thing) || isComputedValue(thing) || isReaction(thing)) {\n      return thing;\n    }\n  } else if (isFunction(thing)) {\n    if (isReaction(thing[$mobx])) {\n      // disposer function\n      return thing[$mobx];\n    }\n  }\n  die(28);\n}\nfunction getAdministration(thing, property) {\n  if (!thing) {\n    die(29);\n  }\n  if (property !== undefined) {\n    return getAdministration(getAtom(thing, property));\n  }\n  if (isAtom(thing) || isComputedValue(thing) || isReaction(thing)) {\n    return thing;\n  }\n  if (isObservableMap(thing) || isObservableSet(thing)) {\n    return thing;\n  }\n  if (thing[$mobx]) {\n    return thing[$mobx];\n  }\n  die(24, thing);\n}\nfunction getDebugName(thing, property) {\n  var named;\n  if (property !== undefined) {\n    named = getAtom(thing, property);\n  } else if (isAction(thing)) {\n    return thing.name;\n  } else if (isObservableObject(thing) || isObservableMap(thing) || isObservableSet(thing)) {\n    named = getAdministration(thing);\n  } else {\n    // valid for arrays as well\n    named = getAtom(thing);\n  }\n  return named.name_;\n}\n/**\n * Helper function for initializing observable structures, it applies:\n * 1. allowStateChanges so we don\'t violate enforceActions.\n * 2. untracked so we don\'t accidentaly subscribe to anything observable accessed during init in case the observable is created inside derivation.\n * 3. batch to avoid state version updates\n */\nfunction initObservable(cb) {\n  var derivation = untrackedStart();\n  var allowStateChanges = allowStateChangesStart(true);\n  startBatch();\n  try {\n    return cb();\n  } finally {\n    endBatch();\n    allowStateChangesEnd(allowStateChanges);\n    untrackedEnd(derivation);\n  }\n}\nvar mobx_esm_toString = objectPrototype.toString;\nfunction deepEqual(a, b, depth) {\n  if (depth === void 0) {\n    depth = -1;\n  }\n  return eq(a, b, depth);\n}\n// Copied from https://github.com/jashkenas/underscore/blob/5c237a7c682fb68fd5378203f0bf22dce1624854/underscore.js#L1186-L1289\n// Internal recursive comparison function for `isEqual`.\nfunction eq(a, b, depth, aStack, bStack) {\n  // Identical objects are equal. `0 === -0`, but they aren\'t identical.\n  // See the [Harmony `egal` proposal](http://wiki.ecmascript.org/doku.php?id=harmony:egal).\n  if (a === b) {\n    return a !== 0 || 1 / a === 1 / b;\n  }\n  // `null` or `undefined` only equal to itself (strict comparison).\n  if (a == null || b == null) {\n    return false;\n  }\n  // `NaN`s are equivalent, but non-reflexive.\n  if (a !== a) {\n    return b !== b;\n  }\n  // Exhaust primitive checks\n  var type = typeof a;\n  if (type !== "function" && type !== "object" && typeof b != "object") {\n    return false;\n  }\n  // Compare `[[Class]]` names.\n  var className = mobx_esm_toString.call(a);\n  if (className !== mobx_esm_toString.call(b)) {\n    return false;\n  }\n  switch (className) {\n    // Strings, numbers, regular expressions, dates, and booleans are compared by value.\n    case "[object RegExp]":\n    // RegExps are coerced to strings for comparison (Note: \'\' + /a/i === \'/a/i\')\n    case "[object String]":\n      // Primitives and their corresponding object wrappers are equivalent; thus, `"5"` is\n      // equivalent to `new String("5")`.\n      return "" + a === "" + b;\n    case "[object Number]":\n      // `NaN`s are equivalent, but non-reflexive.\n      // Object(NaN) is equivalent to NaN.\n      if (+a !== +a) {\n        return +b !== +b;\n      }\n      // An `egal` comparison is performed for other numeric values.\n      return +a === 0 ? 1 / +a === 1 / b : +a === +b;\n    case "[object Date]":\n    case "[object Boolean]":\n      // Coerce dates and booleans to numeric primitive values. Dates are compared by their\n      // millisecond representations. Note that invalid dates with millisecond representations\n      // of `NaN` are not equivalent.\n      return +a === +b;\n    case "[object Symbol]":\n      return typeof Symbol !== "undefined" && Symbol.valueOf.call(a) === Symbol.valueOf.call(b);\n    case "[object Map]":\n    case "[object Set]":\n      // Maps and Sets are unwrapped to arrays of entry-pairs, adding an incidental level.\n      // Hide this extra level by increasing the depth.\n      if (depth >= 0) {\n        depth++;\n      }\n      break;\n  }\n  // Unwrap any wrapped objects.\n  a = unwrap(a);\n  b = unwrap(b);\n  var areArrays = className === "[object Array]";\n  if (!areArrays) {\n    if (typeof a != "object" || typeof b != "object") {\n      return false;\n    }\n    // Objects with different constructors are not equivalent, but `Object`s or `Array`s\n    // from different frames are.\n    var aCtor = a.constructor,\n      bCtor = b.constructor;\n    if (aCtor !== bCtor && !(isFunction(aCtor) && aCtor instanceof aCtor && isFunction(bCtor) && bCtor instanceof bCtor) && "constructor" in a && "constructor" in b) {\n      return false;\n    }\n  }\n  if (depth === 0) {\n    return false;\n  } else if (depth < 0) {\n    depth = -1;\n  }\n  // Assume equality for cyclic structures. The algorithm for detecting cyclic\n  // structures is adapted from ES 5.1 section 15.12.3, abstract operation `JO`.\n  // Initializing stack of traversed objects.\n  // It\'s done here since we only need them for objects and arrays comparison.\n  aStack = aStack || [];\n  bStack = bStack || [];\n  var length = aStack.length;\n  while (length--) {\n    // Linear search. Performance is inversely proportional to the number of\n    // unique nested structures.\n    if (aStack[length] === a) {\n      return bStack[length] === b;\n    }\n  }\n  // Add the first object to the stack of traversed objects.\n  aStack.push(a);\n  bStack.push(b);\n  // Recursively compare objects and arrays.\n  if (areArrays) {\n    // Compare array lengths to determine if a deep comparison is necessary.\n    length = a.length;\n    if (length !== b.length) {\n      return false;\n    }\n    // Deep compare the contents, ignoring non-numeric properties.\n    while (length--) {\n      if (!eq(a[length], b[length], depth - 1, aStack, bStack)) {\n        return false;\n      }\n    }\n  } else {\n    // Deep compare objects.\n    var keys = Object.keys(a);\n    var key;\n    length = keys.length;\n    // Ensure that both objects contain the same number of properties before comparing deep equality.\n    if (Object.keys(b).length !== length) {\n      return false;\n    }\n    while (length--) {\n      // Deep compare each member\n      key = keys[length];\n      if (!(hasProp(b, key) && eq(a[key], b[key], depth - 1, aStack, bStack))) {\n        return false;\n      }\n    }\n  }\n  // Remove the first object from the stack of traversed objects.\n  aStack.pop();\n  bStack.pop();\n  return true;\n}\nfunction unwrap(a) {\n  if (isObservableArray(a)) {\n    return a.slice();\n  }\n  if (isES6Map(a) || isObservableMap(a)) {\n    return Array.from(a.entries());\n  }\n  if (isES6Set(a) || isObservableSet(a)) {\n    return Array.from(a.entries());\n  }\n  return a;\n}\nfunction makeIterable(iterator) {\n  iterator[Symbol.iterator] = getSelf;\n  return iterator;\n}\nfunction getSelf() {\n  return this;\n}\nfunction isAnnotation(thing) {\n  return (\n    // Can be function\n    thing instanceof Object && typeof thing.annotationType_ === "string" && isFunction(thing.make_) && isFunction(thing.extend_)\n  );\n}\n\n/**\n * (c) Michel Weststrate 2015 - 2020\n * MIT Licensed\n *\n * Welcome to the mobx sources! To get a global overview of how MobX internally works,\n * this is a good place to start:\n * https://medium.com/@mweststrate/becoming-fully-reactive-an-in-depth-explanation-of-mobservable-55995262a254#.xvbh6qd74\n *\n * Source folders:\n * ===============\n *\n * - api/     Most of the public static methods exposed by the module can be found here.\n * - core/    Implementation of the MobX algorithm; atoms, derivations, reactions, dependency trees, optimizations. Cool stuff can be found here.\n * - types/   All the magic that is need to have observable objects, arrays and values is in this folder. Including the modifiers like `asFlat`.\n * - utils/   Utility stuff.\n *\n */\n["Symbol", "Map", "Set"].forEach(function (m) {\n  var g = getGlobal();\n  if (typeof g[m] === "undefined") {\n    die("MobX requires global \'" + m + "\' to be available or polyfilled");\n  }\n});\nif (typeof __MOBX_DEVTOOLS_GLOBAL_HOOK__ === "object") {\n  // See: https://github.com/andykog/mobx-devtools/\n  __MOBX_DEVTOOLS_GLOBAL_HOOK__.injectMobx({\n    spy: spy,\n    extras: {\n      getDebugName: getDebugName\n    },\n    $mobx: $mobx\n  });\n}\n\n;// CONCATENATED MODULE: ./node_modules/axios/lib/helpers/bind.js\n\n\nfunction bind(fn, thisArg) {\n  return function wrap() {\n    return fn.apply(thisArg, arguments);\n  };\n}\n;// CONCATENATED MODULE: ./node_modules/axios/lib/utils.js\n\n\n\n\n// utils is a library of generic helper functions non-specific to axios\n\nconst {\n  toString: utils_toString\n} = Object.prototype;\nconst {\n  getPrototypeOf\n} = Object;\nconst kindOf = (cache => thing => {\n  const str = utils_toString.call(thing);\n  return cache[str] || (cache[str] = str.slice(8, -1).toLowerCase());\n})(Object.create(null));\nconst kindOfTest = type => {\n  type = type.toLowerCase();\n  return thing => kindOf(thing) === type;\n};\nconst typeOfTest = type => thing => typeof thing === type;\n\n/**\n * Determine if a value is an Array\n *\n * @param {Object} val The value to test\n *\n * @returns {boolean} True if value is an Array, otherwise false\n */\nconst {\n  isArray\n} = Array;\n\n/**\n * Determine if a value is undefined\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if the value is undefined, otherwise false\n */\nconst isUndefined = typeOfTest(\'undefined\');\n\n/**\n * Determine if a value is a Buffer\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a Buffer, otherwise false\n */\nfunction isBuffer(val) {\n  return val !== null && !isUndefined(val) && val.constructor !== null && !isUndefined(val.constructor) && utils_isFunction(val.constructor.isBuffer) && val.constructor.isBuffer(val);\n}\n\n/**\n * Determine if a value is an ArrayBuffer\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is an ArrayBuffer, otherwise false\n */\nconst isArrayBuffer = kindOfTest(\'ArrayBuffer\');\n\n/**\n * Determine if a value is a view on an ArrayBuffer\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a view on an ArrayBuffer, otherwise false\n */\nfunction isArrayBufferView(val) {\n  let result;\n  if (typeof ArrayBuffer !== \'undefined\' && ArrayBuffer.isView) {\n    result = ArrayBuffer.isView(val);\n  } else {\n    result = val && val.buffer && isArrayBuffer(val.buffer);\n  }\n  return result;\n}\n\n/**\n * Determine if a value is a String\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a String, otherwise false\n */\nconst isString = typeOfTest(\'string\');\n\n/**\n * Determine if a value is a Function\n *\n * @param {*} val The value to test\n * @returns {boolean} True if value is a Function, otherwise false\n */\nconst utils_isFunction = typeOfTest(\'function\');\n\n/**\n * Determine if a value is a Number\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a Number, otherwise false\n */\nconst isNumber = typeOfTest(\'number\');\n\n/**\n * Determine if a value is an Object\n *\n * @param {*} thing The value to test\n *\n * @returns {boolean} True if value is an Object, otherwise false\n */\nconst utils_isObject = thing => thing !== null && typeof thing === \'object\';\n\n/**\n * Determine if a value is a Boolean\n *\n * @param {*} thing The value to test\n * @returns {boolean} True if value is a Boolean, otherwise false\n */\nconst isBoolean = thing => thing === true || thing === false;\n\n/**\n * Determine if a value is a plain Object\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a plain Object, otherwise false\n */\nconst utils_isPlainObject = val => {\n  if (kindOf(val) !== \'object\') {\n    return false;\n  }\n  const prototype = getPrototypeOf(val);\n  return (prototype === null || prototype === Object.prototype || Object.getPrototypeOf(prototype) === null) && !(Symbol.toStringTag in val) && !(Symbol.iterator in val);\n};\n\n/**\n * Determine if a value is a Date\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a Date, otherwise false\n */\nconst isDate = kindOfTest(\'Date\');\n\n/**\n * Determine if a value is a File\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a File, otherwise false\n */\nconst isFile = kindOfTest(\'File\');\n\n/**\n * Determine if a value is a Blob\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a Blob, otherwise false\n */\nconst isBlob = kindOfTest(\'Blob\');\n\n/**\n * Determine if a value is a FileList\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a File, otherwise false\n */\nconst isFileList = kindOfTest(\'FileList\');\n\n/**\n * Determine if a value is a Stream\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a Stream, otherwise false\n */\nconst isStream = val => utils_isObject(val) && utils_isFunction(val.pipe);\n\n/**\n * Determine if a value is a FormData\n *\n * @param {*} thing The value to test\n *\n * @returns {boolean} True if value is an FormData, otherwise false\n */\nconst isFormData = thing => {\n  let kind;\n  return thing && (typeof FormData === \'function\' && thing instanceof FormData || utils_isFunction(thing.append) && ((kind = kindOf(thing)) === \'formdata\' ||\n  // detect form-data instance\n  kind === \'object\' && utils_isFunction(thing.toString) && thing.toString() === \'[object FormData]\'));\n};\n\n/**\n * Determine if a value is a URLSearchParams object\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a URLSearchParams object, otherwise false\n */\nconst isURLSearchParams = kindOfTest(\'URLSearchParams\');\n\n/**\n * Trim excess whitespace off the beginning and end of a string\n *\n * @param {String} str The String to trim\n *\n * @returns {String} The String freed of excess whitespace\n */\nconst trim = str => str.trim ? str.trim() : str.replace(/^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g, \'\');\n\n/**\n * Iterate over an Array or an Object invoking a function for each item.\n *\n * If `obj` is an Array callback will be called passing\n * the value, index, and complete array for each item.\n *\n * If \'obj\' is an Object callback will be called passing\n * the value, key, and complete object for each property.\n *\n * @param {Object|Array} obj The object to iterate\n * @param {Function} fn The callback to invoke for each item\n *\n * @param {Boolean} [allOwnKeys = false]\n * @returns {any}\n */\nfunction forEach(obj, fn, {\n  allOwnKeys = false\n} = {}) {\n  // Don\'t bother if no value provided\n  if (obj === null || typeof obj === \'undefined\') {\n    return;\n  }\n  let i;\n  let l;\n\n  // Force an array if not already something iterable\n  if (typeof obj !== \'object\') {\n    /*eslint no-param-reassign:0*/\n    obj = [obj];\n  }\n  if (isArray(obj)) {\n    // Iterate over array values\n    for (i = 0, l = obj.length; i < l; i++) {\n      fn.call(null, obj[i], i, obj);\n    }\n  } else {\n    // Iterate over object keys\n    const keys = allOwnKeys ? Object.getOwnPropertyNames(obj) : Object.keys(obj);\n    const len = keys.length;\n    let key;\n    for (i = 0; i < len; i++) {\n      key = keys[i];\n      fn.call(null, obj[key], key, obj);\n    }\n  }\n}\nfunction findKey(obj, key) {\n  key = key.toLowerCase();\n  const keys = Object.keys(obj);\n  let i = keys.length;\n  let _key;\n  while (i-- > 0) {\n    _key = keys[i];\n    if (key === _key.toLowerCase()) {\n      return _key;\n    }\n  }\n  return null;\n}\nconst _global = (() => {\n  /*eslint no-undef:0*/\n  if (typeof globalThis !== "undefined") return globalThis;\n  return typeof self !== "undefined" ? self : typeof window !== \'undefined\' ? window : global;\n})();\nconst isContextDefined = context => !isUndefined(context) && context !== _global;\n\n/**\n * Accepts varargs expecting each argument to be an object, then\n * immutably merges the properties of each object and returns result.\n *\n * When multiple objects contain the same key the later object in\n * the arguments list will take precedence.\n *\n * Example:\n *\n * ```js\n * var result = merge({foo: 123}, {foo: 456});\n * console.log(result.foo); // outputs 456\n * ```\n *\n * @param {Object} obj1 Object to merge\n *\n * @returns {Object} Result of all merge properties\n */\nfunction merge( /* obj1, obj2, obj3, ... */\n) {\n  const {\n    caseless\n  } = isContextDefined(this) && this || {};\n  const result = {};\n  const assignValue = (val, key) => {\n    const targetKey = caseless && findKey(result, key) || key;\n    if (utils_isPlainObject(result[targetKey]) && utils_isPlainObject(val)) {\n      result[targetKey] = merge(result[targetKey], val);\n    } else if (utils_isPlainObject(val)) {\n      result[targetKey] = merge({}, val);\n    } else if (isArray(val)) {\n      result[targetKey] = val.slice();\n    } else {\n      result[targetKey] = val;\n    }\n  };\n  for (let i = 0, l = arguments.length; i < l; i++) {\n    arguments[i] && forEach(arguments[i], assignValue);\n  }\n  return result;\n}\n\n/**\n * Extends object a by mutably adding to it the properties of object b.\n *\n * @param {Object} a The object to be extended\n * @param {Object} b The object to copy properties from\n * @param {Object} thisArg The object to bind function to\n *\n * @param {Boolean} [allOwnKeys]\n * @returns {Object} The resulting value of object a\n */\nconst extend = (a, b, thisArg, {\n  allOwnKeys\n} = {}) => {\n  forEach(b, (val, key) => {\n    if (thisArg && utils_isFunction(val)) {\n      a[key] = bind(val, thisArg);\n    } else {\n      a[key] = val;\n    }\n  }, {\n    allOwnKeys\n  });\n  return a;\n};\n\n/**\n * Remove byte order marker. This catches EF BB BF (the UTF-8 BOM)\n *\n * @param {string} content with BOM\n *\n * @returns {string} content value without BOM\n */\nconst stripBOM = content => {\n  if (content.charCodeAt(0) === 0xFEFF) {\n    content = content.slice(1);\n  }\n  return content;\n};\n\n/**\n * Inherit the prototype methods from one constructor into another\n * @param {function} constructor\n * @param {function} superConstructor\n * @param {object} [props]\n * @param {object} [descriptors]\n *\n * @returns {void}\n */\nconst inherits = (constructor, superConstructor, props, descriptors) => {\n  constructor.prototype = Object.create(superConstructor.prototype, descriptors);\n  constructor.prototype.constructor = constructor;\n  Object.defineProperty(constructor, \'super\', {\n    value: superConstructor.prototype\n  });\n  props && Object.assign(constructor.prototype, props);\n};\n\n/**\n * Resolve object with deep prototype chain to a flat object\n * @param {Object} sourceObj source object\n * @param {Object} [destObj]\n * @param {Function|Boolean} [filter]\n * @param {Function} [propFilter]\n *\n * @returns {Object}\n */\nconst toFlatObject = (sourceObj, destObj, filter, propFilter) => {\n  let props;\n  let i;\n  let prop;\n  const merged = {};\n  destObj = destObj || {};\n  // eslint-disable-next-line no-eq-null,eqeqeq\n  if (sourceObj == null) return destObj;\n  do {\n    props = Object.getOwnPropertyNames(sourceObj);\n    i = props.length;\n    while (i-- > 0) {\n      prop = props[i];\n      if ((!propFilter || propFilter(prop, sourceObj, destObj)) && !merged[prop]) {\n        destObj[prop] = sourceObj[prop];\n        merged[prop] = true;\n      }\n    }\n    sourceObj = filter !== false && getPrototypeOf(sourceObj);\n  } while (sourceObj && (!filter || filter(sourceObj, destObj)) && sourceObj !== Object.prototype);\n  return destObj;\n};\n\n/**\n * Determines whether a string ends with the characters of a specified string\n *\n * @param {String} str\n * @param {String} searchString\n * @param {Number} [position= 0]\n *\n * @returns {boolean}\n */\nconst endsWith = (str, searchString, position) => {\n  str = String(str);\n  if (position === undefined || position > str.length) {\n    position = str.length;\n  }\n  position -= searchString.length;\n  const lastIndex = str.indexOf(searchString, position);\n  return lastIndex !== -1 && lastIndex === position;\n};\n\n/**\n * Returns new array from array like object or null if failed\n *\n * @param {*} [thing]\n *\n * @returns {?Array}\n */\nconst toArray = thing => {\n  if (!thing) return null;\n  if (isArray(thing)) return thing;\n  let i = thing.length;\n  if (!isNumber(i)) return null;\n  const arr = new Array(i);\n  while (i-- > 0) {\n    arr[i] = thing[i];\n  }\n  return arr;\n};\n\n/**\n * Checking if the Uint8Array exists and if it does, it returns a function that checks if the\n * thing passed in is an instance of Uint8Array\n *\n * @param {TypedArray}\n *\n * @returns {Array}\n */\n// eslint-disable-next-line func-names\nconst isTypedArray = (TypedArray => {\n  // eslint-disable-next-line func-names\n  return thing => {\n    return TypedArray && thing instanceof TypedArray;\n  };\n})(typeof Uint8Array !== \'undefined\' && getPrototypeOf(Uint8Array));\n\n/**\n * For each entry in the object, call the function with the key and value.\n *\n * @param {Object<any, any>} obj - The object to iterate over.\n * @param {Function} fn - The function to call for each entry.\n *\n * @returns {void}\n */\nconst forEachEntry = (obj, fn) => {\n  const generator = obj && obj[Symbol.iterator];\n  const iterator = generator.call(obj);\n  let result;\n  while ((result = iterator.next()) && !result.done) {\n    const pair = result.value;\n    fn.call(obj, pair[0], pair[1]);\n  }\n};\n\n/**\n * It takes a regular expression and a string, and returns an array of all the matches\n *\n * @param {string} regExp - The regular expression to match against.\n * @param {string} str - The string to search.\n *\n * @returns {Array<boolean>}\n */\nconst matchAll = (regExp, str) => {\n  let matches;\n  const arr = [];\n  while ((matches = regExp.exec(str)) !== null) {\n    arr.push(matches);\n  }\n  return arr;\n};\n\n/* Checking if the kindOfTest function returns true when passed an HTMLFormElement. */\nconst isHTMLForm = kindOfTest(\'HTMLFormElement\');\nconst toCamelCase = str => {\n  return str.toLowerCase().replace(/[-_\\s]([a-z\\d])(\\w*)/g, function replacer(m, p1, p2) {\n    return p1.toUpperCase() + p2;\n  });\n};\n\n/* Creating a function that will check if an object has a property. */\nconst utils_hasOwnProperty = (({\n  hasOwnProperty\n}) => (obj, prop) => hasOwnProperty.call(obj, prop))(Object.prototype);\n\n/**\n * Determine if a value is a RegExp object\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a RegExp object, otherwise false\n */\nconst isRegExp = kindOfTest(\'RegExp\');\nconst reduceDescriptors = (obj, reducer) => {\n  const descriptors = Object.getOwnPropertyDescriptors(obj);\n  const reducedDescriptors = {};\n  forEach(descriptors, (descriptor, name) => {\n    let ret;\n    if ((ret = reducer(descriptor, name, obj)) !== false) {\n      reducedDescriptors[name] = ret || descriptor;\n    }\n  });\n  Object.defineProperties(obj, reducedDescriptors);\n};\n\n/**\n * Makes all methods read-only\n * @param {Object} obj\n */\n\nconst freezeMethods = obj => {\n  reduceDescriptors(obj, (descriptor, name) => {\n    // skip restricted props in strict mode\n    if (utils_isFunction(obj) && [\'arguments\', \'caller\', \'callee\'].indexOf(name) !== -1) {\n      return false;\n    }\n    const value = obj[name];\n    if (!utils_isFunction(value)) return;\n    descriptor.enumerable = false;\n    if (\'writable\' in descriptor) {\n      descriptor.writable = false;\n      return;\n    }\n    if (!descriptor.set) {\n      descriptor.set = () => {\n        throw Error(\'Can not rewrite read-only method \\\'\' + name + \'\\\'\');\n      };\n    }\n  });\n};\nconst toObjectSet = (arrayOrString, delimiter) => {\n  const obj = {};\n  const define = arr => {\n    arr.forEach(value => {\n      obj[value] = true;\n    });\n  };\n  isArray(arrayOrString) ? define(arrayOrString) : define(String(arrayOrString).split(delimiter));\n  return obj;\n};\nconst utils_noop = () => {};\nconst toFiniteNumber = (value, defaultValue) => {\n  value = +value;\n  return Number.isFinite(value) ? value : defaultValue;\n};\nconst ALPHA = \'abcdefghijklmnopqrstuvwxyz\';\nconst DIGIT = \'0123456789\';\nconst ALPHABET = {\n  DIGIT,\n  ALPHA,\n  ALPHA_DIGIT: ALPHA + ALPHA.toUpperCase() + DIGIT\n};\nconst generateString = (size = 16, alphabet = ALPHABET.ALPHA_DIGIT) => {\n  let str = \'\';\n  const {\n    length\n  } = alphabet;\n  while (size--) {\n    str += alphabet[Math.random() * length | 0];\n  }\n  return str;\n};\n\n/**\n * If the thing is a FormData object, return true, otherwise return false.\n *\n * @param {unknown} thing - The thing to check.\n *\n * @returns {boolean}\n */\nfunction isSpecCompliantForm(thing) {\n  return !!(thing && utils_isFunction(thing.append) && thing[Symbol.toStringTag] === \'FormData\' && thing[Symbol.iterator]);\n}\nconst toJSONObject = obj => {\n  const stack = new Array(10);\n  const visit = (source, i) => {\n    if (utils_isObject(source)) {\n      if (stack.indexOf(source) >= 0) {\n        return;\n      }\n      if (!(\'toJSON\' in source)) {\n        stack[i] = source;\n        const target = isArray(source) ? [] : {};\n        forEach(source, (value, key) => {\n          const reducedValue = visit(value, i + 1);\n          !isUndefined(reducedValue) && (target[key] = reducedValue);\n        });\n        stack[i] = undefined;\n        return target;\n      }\n    }\n    return source;\n  };\n  return visit(obj, 0);\n};\nconst isAsyncFn = kindOfTest(\'AsyncFunction\');\nconst isThenable = thing => thing && (utils_isObject(thing) || utils_isFunction(thing)) && utils_isFunction(thing.then) && utils_isFunction(thing.catch);\n/* harmony default export */ const utils = ({\n  isArray,\n  isArrayBuffer,\n  isBuffer,\n  isFormData,\n  isArrayBufferView,\n  isString,\n  isNumber,\n  isBoolean,\n  isObject: utils_isObject,\n  isPlainObject: utils_isPlainObject,\n  isUndefined,\n  isDate,\n  isFile,\n  isBlob,\n  isRegExp,\n  isFunction: utils_isFunction,\n  isStream,\n  isURLSearchParams,\n  isTypedArray,\n  isFileList,\n  forEach,\n  merge,\n  extend,\n  trim,\n  stripBOM,\n  inherits,\n  toFlatObject,\n  kindOf,\n  kindOfTest,\n  endsWith,\n  toArray,\n  forEachEntry,\n  matchAll,\n  isHTMLForm,\n  hasOwnProperty: utils_hasOwnProperty,\n  hasOwnProp: utils_hasOwnProperty,\n  // an alias to avoid ESLint no-prototype-builtins detection\n  reduceDescriptors,\n  freezeMethods,\n  toObjectSet,\n  toCamelCase,\n  noop: utils_noop,\n  toFiniteNumber,\n  findKey,\n  global: _global,\n  isContextDefined,\n  ALPHABET,\n  generateString,\n  isSpecCompliantForm,\n  toJSONObject,\n  isAsyncFn,\n  isThenable\n});\n;// CONCATENATED MODULE: ./node_modules/axios/lib/core/AxiosError.js\n\n\n\n\n/**\n * Create an Error with the specified message, config, error code, request and response.\n *\n * @param {string} message The error message.\n * @param {string} [code] The error code (for example, \'ECONNABORTED\').\n * @param {Object} [config] The config.\n * @param {Object} [request] The request.\n * @param {Object} [response] The response.\n *\n * @returns {Error} The created error.\n */\nfunction AxiosError(message, code, config, request, response) {\n  Error.call(this);\n  if (Error.captureStackTrace) {\n    Error.captureStackTrace(this, this.constructor);\n  } else {\n    this.stack = new Error().stack;\n  }\n  this.message = message;\n  this.name = \'AxiosError\';\n  code && (this.code = code);\n  config && (this.config = config);\n  request && (this.request = request);\n  response && (this.response = response);\n}\nutils.inherits(AxiosError, Error, {\n  toJSON: function toJSON() {\n    return {\n      // Standard\n      message: this.message,\n      name: this.name,\n      // Microsoft\n      description: this.description,\n      number: this.number,\n      // Mozilla\n      fileName: this.fileName,\n      lineNumber: this.lineNumber,\n      columnNumber: this.columnNumber,\n      stack: this.stack,\n      // Axios\n      config: utils.toJSONObject(this.config),\n      code: this.code,\n      status: this.response && this.response.status ? this.response.status : null\n    };\n  }\n});\nconst AxiosError_prototype = AxiosError.prototype;\nconst descriptors = {};\n[\'ERR_BAD_OPTION_VALUE\', \'ERR_BAD_OPTION\', \'ECONNABORTED\', \'ETIMEDOUT\', \'ERR_NETWORK\', \'ERR_FR_TOO_MANY_REDIRECTS\', \'ERR_DEPRECATED\', \'ERR_BAD_RESPONSE\', \'ERR_BAD_REQUEST\', \'ERR_CANCELED\', \'ERR_NOT_SUPPORT\', \'ERR_INVALID_URL\'\n// eslint-disable-next-line func-names\n].forEach(code => {\n  descriptors[code] = {\n    value: code\n  };\n});\nObject.defineProperties(AxiosError, descriptors);\nObject.defineProperty(AxiosError_prototype, \'isAxiosError\', {\n  value: true\n});\n\n// eslint-disable-next-line func-names\nAxiosError.from = (error, code, config, request, response, customProps) => {\n  const axiosError = Object.create(AxiosError_prototype);\n  utils.toFlatObject(error, axiosError, function filter(obj) {\n    return obj !== Error.prototype;\n  }, prop => {\n    return prop !== \'isAxiosError\';\n  });\n  AxiosError.call(axiosError, error.message, code, config, request, response);\n  axiosError.cause = error;\n  axiosError.name = error.name;\n  customProps && Object.assign(axiosError, customProps);\n  return axiosError;\n};\n/* harmony default export */ const core_AxiosError = (AxiosError);\n;// CONCATENATED MODULE: ./node_modules/axios/lib/helpers/null.js\n// eslint-disable-next-line strict\n/* harmony default export */ const helpers_null = (null);\n;// CONCATENATED MODULE: ./node_modules/axios/lib/helpers/toFormData.js\n\n\n\n\n// temporary hotfix to avoid circular references until AxiosURLSearchParams is refactored\n\n\n/**\n * Determines if the given thing is a array or js object.\n *\n * @param {string} thing - The object or array to be visited.\n *\n * @returns {boolean}\n */\nfunction isVisitable(thing) {\n  return utils.isPlainObject(thing) || utils.isArray(thing);\n}\n\n/**\n * It removes the brackets from the end of a string\n *\n * @param {string} key - The key of the parameter.\n *\n * @returns {string} the key without the brackets.\n */\nfunction removeBrackets(key) {\n  return utils.endsWith(key, \'[]\') ? key.slice(0, -2) : key;\n}\n\n/**\n * It takes a path, a key, and a boolean, and returns a string\n *\n * @param {string} path - The path to the current key.\n * @param {string} key - The key of the current object being iterated over.\n * @param {string} dots - If true, the key will be rendered with dots instead of brackets.\n *\n * @returns {string} The path to the current key.\n */\nfunction renderKey(path, key, dots) {\n  if (!path) return key;\n  return path.concat(key).map(function each(token, i) {\n    // eslint-disable-next-line no-param-reassign\n    token = removeBrackets(token);\n    return !dots && i ? \'[\' + token + \']\' : token;\n  }).join(dots ? \'.\' : \'\');\n}\n\n/**\n * If the array is an array and none of its elements are visitable, then it\'s a flat array.\n *\n * @param {Array<any>} arr - The array to check\n *\n * @returns {boolean}\n */\nfunction isFlatArray(arr) {\n  return utils.isArray(arr) && !arr.some(isVisitable);\n}\nconst predicates = utils.toFlatObject(utils, {}, null, function filter(prop) {\n  return /^is[A-Z]/.test(prop);\n});\n\n/**\n * Convert a data object to FormData\n *\n * @param {Object} obj\n * @param {?Object} [formData]\n * @param {?Object} [options]\n * @param {Function} [options.visitor]\n * @param {Boolean} [options.metaTokens = true]\n * @param {Boolean} [options.dots = false]\n * @param {?Boolean} [options.indexes = false]\n *\n * @returns {Object}\n **/\n\n/**\n * It converts an object into a FormData object\n *\n * @param {Object<any, any>} obj - The object to convert to form data.\n * @param {string} formData - The FormData object to append to.\n * @param {Object<string, any>} options\n *\n * @returns\n */\nfunction toFormData(obj, formData, options) {\n  if (!utils.isObject(obj)) {\n    throw new TypeError(\'target must be an object\');\n  }\n\n  // eslint-disable-next-line no-param-reassign\n  formData = formData || new (helpers_null || FormData)();\n\n  // eslint-disable-next-line no-param-reassign\n  options = utils.toFlatObject(options, {\n    metaTokens: true,\n    dots: false,\n    indexes: false\n  }, false, function defined(option, source) {\n    // eslint-disable-next-line no-eq-null,eqeqeq\n    return !utils.isUndefined(source[option]);\n  });\n  const metaTokens = options.metaTokens;\n  // eslint-disable-next-line no-use-before-define\n  const visitor = options.visitor || defaultVisitor;\n  const dots = options.dots;\n  const indexes = options.indexes;\n  const _Blob = options.Blob || typeof Blob !== \'undefined\' && Blob;\n  const useBlob = _Blob && utils.isSpecCompliantForm(formData);\n  if (!utils.isFunction(visitor)) {\n    throw new TypeError(\'visitor must be a function\');\n  }\n  function convertValue(value) {\n    if (value === null) return \'\';\n    if (utils.isDate(value)) {\n      return value.toISOString();\n    }\n    if (!useBlob && utils.isBlob(value)) {\n      throw new core_AxiosError(\'Blob is not supported. Use a Buffer instead.\');\n    }\n    if (utils.isArrayBuffer(value) || utils.isTypedArray(value)) {\n      return useBlob && typeof Blob === \'function\' ? new Blob([value]) : Buffer.from(value);\n    }\n    return value;\n  }\n\n  /**\n   * Default visitor.\n   *\n   * @param {*} value\n   * @param {String|Number} key\n   * @param {Array<String|Number>} path\n   * @this {FormData}\n   *\n   * @returns {boolean} return true to visit the each prop of the value recursively\n   */\n  function defaultVisitor(value, key, path) {\n    let arr = value;\n    if (value && !path && typeof value === \'object\') {\n      if (utils.endsWith(key, \'{}\')) {\n        // eslint-disable-next-line no-param-reassign\n        key = metaTokens ? key : key.slice(0, -2);\n        // eslint-disable-next-line no-param-reassign\n        value = JSON.stringify(value);\n      } else if (utils.isArray(value) && isFlatArray(value) || (utils.isFileList(value) || utils.endsWith(key, \'[]\')) && (arr = utils.toArray(value))) {\n        // eslint-disable-next-line no-param-reassign\n        key = removeBrackets(key);\n        arr.forEach(function each(el, index) {\n          !(utils.isUndefined(el) || el === null) && formData.append(\n          // eslint-disable-next-line no-nested-ternary\n          indexes === true ? renderKey([key], index, dots) : indexes === null ? key : key + \'[]\', convertValue(el));\n        });\n        return false;\n      }\n    }\n    if (isVisitable(value)) {\n      return true;\n    }\n    formData.append(renderKey(path, key, dots), convertValue(value));\n    return false;\n  }\n  const stack = [];\n  const exposedHelpers = Object.assign(predicates, {\n    defaultVisitor,\n    convertValue,\n    isVisitable\n  });\n  function build(value, path) {\n    if (utils.isUndefined(value)) return;\n    if (stack.indexOf(value) !== -1) {\n      throw Error(\'Circular reference detected in \' + path.join(\'.\'));\n    }\n    stack.push(value);\n    utils.forEach(value, function each(el, key) {\n      const result = !(utils.isUndefined(el) || el === null) && visitor.call(formData, el, utils.isString(key) ? key.trim() : key, path, exposedHelpers);\n      if (result === true) {\n        build(el, path ? path.concat(key) : [key]);\n      }\n    });\n    stack.pop();\n  }\n  if (!utils.isObject(obj)) {\n    throw new TypeError(\'data must be an object\');\n  }\n  build(obj);\n  return formData;\n}\n/* harmony default export */ const helpers_toFormData = (toFormData);\n;// CONCATENATED MODULE: ./node_modules/axios/lib/helpers/AxiosURLSearchParams.js\n\n\n\n\n/**\n * It encodes a string by replacing all characters that are not in the unreserved set with\n * their percent-encoded equivalents\n *\n * @param {string} str - The string to encode.\n *\n * @returns {string} The encoded string.\n */\nfunction encode(str) {\n  const charMap = {\n    \'!\': \'%21\',\n    "\'": \'%27\',\n    \'(\': \'%28\',\n    \')\': \'%29\',\n    \'~\': \'%7E\',\n    \'%20\': \'+\',\n    \'%00\': \'\\x00\'\n  };\n  return encodeURIComponent(str).replace(/[!\'()~]|%20|%00/g, function replacer(match) {\n    return charMap[match];\n  });\n}\n\n/**\n * It takes a params object and converts it to a FormData object\n *\n * @param {Object<string, any>} params - The parameters to be converted to a FormData object.\n * @param {Object<string, any>} options - The options object passed to the Axios constructor.\n *\n * @returns {void}\n */\nfunction AxiosURLSearchParams(params, options) {\n  this._pairs = [];\n  params && helpers_toFormData(params, this, options);\n}\nconst AxiosURLSearchParams_prototype = AxiosURLSearchParams.prototype;\nAxiosURLSearchParams_prototype.append = function append(name, value) {\n  this._pairs.push([name, value]);\n};\nAxiosURLSearchParams_prototype.toString = function toString(encoder) {\n  const _encode = encoder ? function (value) {\n    return encoder.call(this, value, encode);\n  } : encode;\n  return this._pairs.map(function each(pair) {\n    return _encode(pair[0]) + \'=\' + _encode(pair[1]);\n  }, \'\').join(\'&\');\n};\n/* harmony default export */ const helpers_AxiosURLSearchParams = (AxiosURLSearchParams);\n;// CONCATENATED MODULE: ./node_modules/axios/lib/helpers/buildURL.js\n\n\n\n\n\n/**\n * It replaces all instances of the characters `:`, `$`, `,`, `+`, `[`, and `]` with their\n * URI encoded counterparts\n *\n * @param {string} val The value to be encoded.\n *\n * @returns {string} The encoded value.\n */\nfunction buildURL_encode(val) {\n  return encodeURIComponent(val).replace(/%3A/gi, \':\').replace(/%24/g, \'$\').replace(/%2C/gi, \',\').replace(/%20/g, \'+\').replace(/%5B/gi, \'[\').replace(/%5D/gi, \']\');\n}\n\n/**\n * Build a URL by appending params to the end\n *\n * @param {string} url The base of the url (e.g., http://www.google.com)\n * @param {object} [params] The params to be appended\n * @param {?object} options\n *\n * @returns {string} The formatted url\n */\nfunction buildURL(url, params, options) {\n  /*eslint no-param-reassign:0*/\n  if (!params) {\n    return url;\n  }\n  const _encode = options && options.encode || buildURL_encode;\n  const serializeFn = options && options.serialize;\n  let serializedParams;\n  if (serializeFn) {\n    serializedParams = serializeFn(params, options);\n  } else {\n    serializedParams = utils.isURLSearchParams(params) ? params.toString() : new helpers_AxiosURLSearchParams(params, options).toString(_encode);\n  }\n  if (serializedParams) {\n    const hashmarkIndex = url.indexOf("#");\n    if (hashmarkIndex !== -1) {\n      url = url.slice(0, hashmarkIndex);\n    }\n    url += (url.indexOf(\'?\') === -1 ? \'?\' : \'&\') + serializedParams;\n  }\n  return url;\n}\n;// CONCATENATED MODULE: ./node_modules/axios/lib/core/InterceptorManager.js\n\n\n\nclass InterceptorManager {\n  constructor() {\n    this.handlers = [];\n  }\n\n  /**\n   * Add a new interceptor to the stack\n   *\n   * @param {Function} fulfilled The function to handle `then` for a `Promise`\n   * @param {Function} rejected The function to handle `reject` for a `Promise`\n   *\n   * @return {Number} An ID used to remove interceptor later\n   */\n  use(fulfilled, rejected, options) {\n    this.handlers.push({\n      fulfilled,\n      rejected,\n      synchronous: options ? options.synchronous : false,\n      runWhen: options ? options.runWhen : null\n    });\n    return this.handlers.length - 1;\n  }\n\n  /**\n   * Remove an interceptor from the stack\n   *\n   * @param {Number} id The ID that was returned by `use`\n   *\n   * @returns {Boolean} `true` if the interceptor was removed, `false` otherwise\n   */\n  eject(id) {\n    if (this.handlers[id]) {\n      this.handlers[id] = null;\n    }\n  }\n\n  /**\n   * Clear all interceptors from the stack\n   *\n   * @returns {void}\n   */\n  clear() {\n    if (this.handlers) {\n      this.handlers = [];\n    }\n  }\n\n  /**\n   * Iterate over all the registered interceptors\n   *\n   * This method is particularly useful for skipping over any\n   * interceptors that may have become `null` calling `eject`.\n   *\n   * @param {Function} fn The function to call for each interceptor\n   *\n   * @returns {void}\n   */\n  forEach(fn) {\n    utils.forEach(this.handlers, function forEachHandler(h) {\n      if (h !== null) {\n        fn(h);\n      }\n    });\n  }\n}\n/* harmony default export */ const core_InterceptorManager = (InterceptorManager);\n;// CONCATENATED MODULE: ./node_modules/axios/lib/defaults/transitional.js\n\n\n/* harmony default export */ const defaults_transitional = ({\n  silentJSONParsing: true,\n  forcedJSONParsing: true,\n  clarifyTimeoutError: false\n});\n;// CONCATENATED MODULE: ./node_modules/axios/lib/platform/browser/classes/URLSearchParams.js\n\n\n\n/* harmony default export */ const classes_URLSearchParams = (typeof URLSearchParams !== \'undefined\' ? URLSearchParams : helpers_AxiosURLSearchParams);\n;// CONCATENATED MODULE: ./node_modules/axios/lib/platform/browser/classes/FormData.js\n\n\n/* harmony default export */ const classes_FormData = (typeof FormData !== \'undefined\' ? FormData : null);\n;// CONCATENATED MODULE: ./node_modules/axios/lib/platform/browser/classes/Blob.js\n\n\n/* harmony default export */ const classes_Blob = (typeof Blob !== \'undefined\' ? Blob : null);\n;// CONCATENATED MODULE: ./node_modules/axios/lib/platform/browser/index.js\n\n\n\n/* harmony default export */ const browser = ({\n  isBrowser: true,\n  classes: {\n    URLSearchParams: classes_URLSearchParams,\n    FormData: classes_FormData,\n    Blob: classes_Blob\n  },\n  protocols: [\'http\', \'https\', \'file\', \'blob\', \'url\', \'data\']\n});\n;// CONCATENATED MODULE: ./node_modules/axios/lib/platform/common/utils.js\nconst hasBrowserEnv = typeof window !== \'undefined\' && typeof document !== \'undefined\';\n\n/**\n * Determine if we\'re running in a standard browser environment\n *\n * This allows axios to run in a web worker, and react-native.\n * Both environments support XMLHttpRequest, but not fully standard globals.\n *\n * web workers:\n *  typeof window -> undefined\n *  typeof document -> undefined\n *\n * react-native:\n *  navigator.product -> \'ReactNative\'\n * nativescript\n *  navigator.product -> \'NativeScript\' or \'NS\'\n *\n * @returns {boolean}\n */\nconst hasStandardBrowserEnv = (product => {\n  return hasBrowserEnv && [\'ReactNative\', \'NativeScript\', \'NS\'].indexOf(product) < 0;\n})(typeof navigator !== \'undefined\' && navigator.product);\n\n/**\n * Determine if we\'re running in a standard browser webWorker environment\n *\n * Although the `isStandardBrowserEnv` method indicates that\n * `allows axios to run in a web worker`, the WebWorker will still be\n * filtered out due to its judgment standard\n * `typeof window !== \'undefined\' && typeof document !== \'undefined\'`.\n * This leads to a problem when axios post `FormData` in webWorker\n */\nconst hasStandardBrowserWebWorkerEnv = (() => {\n  return typeof WorkerGlobalScope !== \'undefined\' &&\n  // eslint-disable-next-line no-undef\n  self instanceof WorkerGlobalScope && typeof self.importScripts === \'function\';\n})();\n\n;// CONCATENATED MODULE: ./node_modules/axios/lib/platform/index.js\n\n\n/* harmony default export */ const platform = ({\n  ...common_utils_namespaceObject,\n  ...browser\n});\n;// CONCATENATED MODULE: ./node_modules/axios/lib/helpers/toURLEncodedForm.js\n\n\n\n\n\nfunction toURLEncodedForm(data, options) {\n  return helpers_toFormData(data, new platform.classes.URLSearchParams(), Object.assign({\n    visitor: function (value, key, path, helpers) {\n      if (platform.isNode && utils.isBuffer(value)) {\n        this.append(key, value.toString(\'base64\'));\n        return false;\n      }\n      return helpers.defaultVisitor.apply(this, arguments);\n    }\n  }, options));\n}\n;// CONCATENATED MODULE: ./node_modules/axios/lib/helpers/formDataToJSON.js\n\n\n\n\n/**\n * It takes a string like `foo[x][y][z]` and returns an array like `[\'foo\', \'x\', \'y\', \'z\']\n *\n * @param {string} name - The name of the property to get.\n *\n * @returns An array of strings.\n */\nfunction parsePropPath(name) {\n  // foo[x][y][z]\n  // foo.x.y.z\n  // foo-x-y-z\n  // foo x y z\n  return utils.matchAll(/\\w+|\\[(\\w*)]/g, name).map(match => {\n    return match[0] === \'[]\' ? \'\' : match[1] || match[0];\n  });\n}\n\n/**\n * Convert an array to an object.\n *\n * @param {Array<any>} arr - The array to convert to an object.\n *\n * @returns An object with the same keys and values as the array.\n */\nfunction arrayToObject(arr) {\n  const obj = {};\n  const keys = Object.keys(arr);\n  let i;\n  const len = keys.length;\n  let key;\n  for (i = 0; i < len; i++) {\n    key = keys[i];\n    obj[key] = arr[key];\n  }\n  return obj;\n}\n\n/**\n * It takes a FormData object and returns a JavaScript object\n *\n * @param {string} formData The FormData object to convert to JSON.\n *\n * @returns {Object<string, any> | null} The converted object.\n */\nfunction formDataToJSON(formData) {\n  function buildPath(path, value, target, index) {\n    let name = path[index++];\n    if (name === \'__proto__\') return true;\n    const isNumericKey = Number.isFinite(+name);\n    const isLast = index >= path.length;\n    name = !name && utils.isArray(target) ? target.length : name;\n    if (isLast) {\n      if (utils.hasOwnProp(target, name)) {\n        target[name] = [target[name], value];\n      } else {\n        target[name] = value;\n      }\n      return !isNumericKey;\n    }\n    if (!target[name] || !utils.isObject(target[name])) {\n      target[name] = [];\n    }\n    const result = buildPath(path, value, target[name], index);\n    if (result && utils.isArray(target[name])) {\n      target[name] = arrayToObject(target[name]);\n    }\n    return !isNumericKey;\n  }\n  if (utils.isFormData(formData) && utils.isFunction(formData.entries)) {\n    const obj = {};\n    utils.forEachEntry(formData, (name, value) => {\n      buildPath(parsePropPath(name), value, obj, 0);\n    });\n    return obj;\n  }\n  return null;\n}\n/* harmony default export */ const helpers_formDataToJSON = (formDataToJSON);\n;// CONCATENATED MODULE: ./node_modules/axios/lib/defaults/index.js\n\n\n\n\n\n\n\n\n\n\n/**\n * It takes a string, tries to parse it, and if it fails, it returns the stringified version\n * of the input\n *\n * @param {any} rawValue - The value to be stringified.\n * @param {Function} parser - A function that parses a string into a JavaScript object.\n * @param {Function} encoder - A function that takes a value and returns a string.\n *\n * @returns {string} A stringified version of the rawValue.\n */\nfunction stringifySafely(rawValue, parser, encoder) {\n  if (utils.isString(rawValue)) {\n    try {\n      (parser || JSON.parse)(rawValue);\n      return utils.trim(rawValue);\n    } catch (e) {\n      if (e.name !== \'SyntaxError\') {\n        throw e;\n      }\n    }\n  }\n  return (encoder || JSON.stringify)(rawValue);\n}\nconst defaults = {\n  transitional: defaults_transitional,\n  adapter: [\'xhr\', \'http\'],\n  transformRequest: [function transformRequest(data, headers) {\n    const contentType = headers.getContentType() || \'\';\n    const hasJSONContentType = contentType.indexOf(\'application/json\') > -1;\n    const isObjectPayload = utils.isObject(data);\n    if (isObjectPayload && utils.isHTMLForm(data)) {\n      data = new FormData(data);\n    }\n    const isFormData = utils.isFormData(data);\n    if (isFormData) {\n      return hasJSONContentType ? JSON.stringify(helpers_formDataToJSON(data)) : data;\n    }\n    if (utils.isArrayBuffer(data) || utils.isBuffer(data) || utils.isStream(data) || utils.isFile(data) || utils.isBlob(data)) {\n      return data;\n    }\n    if (utils.isArrayBufferView(data)) {\n      return data.buffer;\n    }\n    if (utils.isURLSearchParams(data)) {\n      headers.setContentType(\'application/x-www-form-urlencoded;charset=utf-8\', false);\n      return data.toString();\n    }\n    let isFileList;\n    if (isObjectPayload) {\n      if (contentType.indexOf(\'application/x-www-form-urlencoded\') > -1) {\n        return toURLEncodedForm(data, this.formSerializer).toString();\n      }\n      if ((isFileList = utils.isFileList(data)) || contentType.indexOf(\'multipart/form-data\') > -1) {\n        const _FormData = this.env && this.env.FormData;\n        return helpers_toFormData(isFileList ? {\n          \'files[]\': data\n        } : data, _FormData && new _FormData(), this.formSerializer);\n      }\n    }\n    if (isObjectPayload || hasJSONContentType) {\n      headers.setContentType(\'application/json\', false);\n      return stringifySafely(data);\n    }\n    return data;\n  }],\n  transformResponse: [function transformResponse(data) {\n    const transitional = this.transitional || defaults.transitional;\n    const forcedJSONParsing = transitional && transitional.forcedJSONParsing;\n    const JSONRequested = this.responseType === \'json\';\n    if (data && utils.isString(data) && (forcedJSONParsing && !this.responseType || JSONRequested)) {\n      const silentJSONParsing = transitional && transitional.silentJSONParsing;\n      const strictJSONParsing = !silentJSONParsing && JSONRequested;\n      try {\n        return JSON.parse(data);\n      } catch (e) {\n        if (strictJSONParsing) {\n          if (e.name === \'SyntaxError\') {\n            throw core_AxiosError.from(e, core_AxiosError.ERR_BAD_RESPONSE, this, null, this.response);\n          }\n          throw e;\n        }\n      }\n    }\n    return data;\n  }],\n  /**\n   * A timeout in milliseconds to abort a request. If set to 0 (default) a\n   * timeout is not created.\n   */\n  timeout: 0,\n  xsrfCookieName: \'XSRF-TOKEN\',\n  xsrfHeaderName: \'X-XSRF-TOKEN\',\n  maxContentLength: -1,\n  maxBodyLength: -1,\n  env: {\n    FormData: platform.classes.FormData,\n    Blob: platform.classes.Blob\n  },\n  validateStatus: function validateStatus(status) {\n    return status >= 200 && status < 300;\n  },\n  headers: {\n    common: {\n      \'Accept\': \'application/json, text/plain, */*\',\n      \'Content-Type\': undefined\n    }\n  }\n};\nutils.forEach([\'delete\', \'get\', \'head\', \'post\', \'put\', \'patch\'], method => {\n  defaults.headers[method] = {};\n});\n/* harmony default export */ const lib_defaults = (defaults);\n;// CONCATENATED MODULE: ./node_modules/axios/lib/helpers/parseHeaders.js\n\n\n\n\n// RawAxiosHeaders whose duplicates are ignored by node\n// c.f. https://nodejs.org/api/http.html#http_message_headers\nconst ignoreDuplicateOf = utils.toObjectSet([\'age\', \'authorization\', \'content-length\', \'content-type\', \'etag\', \'expires\', \'from\', \'host\', \'if-modified-since\', \'if-unmodified-since\', \'last-modified\', \'location\', \'max-forwards\', \'proxy-authorization\', \'referer\', \'retry-after\', \'user-agent\']);\n\n/**\n * Parse headers into an object\n *\n * ```\n * Date: Wed, 27 Aug 2014 08:58:49 GMT\n * Content-Type: application/json\n * Connection: keep-alive\n * Transfer-Encoding: chunked\n * ```\n *\n * @param {String} rawHeaders Headers needing to be parsed\n *\n * @returns {Object} Headers parsed into an object\n */\n/* harmony default export */ const parseHeaders = (rawHeaders => {\n  const parsed = {};\n  let key;\n  let val;\n  let i;\n  rawHeaders && rawHeaders.split(\'\\n\').forEach(function parser(line) {\n    i = line.indexOf(\':\');\n    key = line.substring(0, i).trim().toLowerCase();\n    val = line.substring(i + 1).trim();\n    if (!key || parsed[key] && ignoreDuplicateOf[key]) {\n      return;\n    }\n    if (key === \'set-cookie\') {\n      if (parsed[key]) {\n        parsed[key].push(val);\n      } else {\n        parsed[key] = [val];\n      }\n    } else {\n      parsed[key] = parsed[key] ? parsed[key] + \', \' + val : val;\n    }\n  });\n  return parsed;\n});\n;// CONCATENATED MODULE: ./node_modules/axios/lib/core/AxiosHeaders.js\n\n\n\n\nconst $internals = Symbol(\'internals\');\nfunction normalizeHeader(header) {\n  return header && String(header).trim().toLowerCase();\n}\nfunction normalizeValue(value) {\n  if (value === false || value == null) {\n    return value;\n  }\n  return utils.isArray(value) ? value.map(normalizeValue) : String(value);\n}\nfunction parseTokens(str) {\n  const tokens = Object.create(null);\n  const tokensRE = /([^\\s,;=]+)\\s*(?:=\\s*([^,;]+))?/g;\n  let match;\n  while (match = tokensRE.exec(str)) {\n    tokens[match[1]] = match[2];\n  }\n  return tokens;\n}\nconst isValidHeaderName = str => /^[-_a-zA-Z0-9^`|~,!#$%&\'*+.]+$/.test(str.trim());\nfunction matchHeaderValue(context, value, header, filter, isHeaderNameFilter) {\n  if (utils.isFunction(filter)) {\n    return filter.call(this, value, header);\n  }\n  if (isHeaderNameFilter) {\n    value = header;\n  }\n  if (!utils.isString(value)) return;\n  if (utils.isString(filter)) {\n    return value.indexOf(filter) !== -1;\n  }\n  if (utils.isRegExp(filter)) {\n    return filter.test(value);\n  }\n}\nfunction formatHeader(header) {\n  return header.trim().toLowerCase().replace(/([a-z\\d])(\\w*)/g, (w, char, str) => {\n    return char.toUpperCase() + str;\n  });\n}\nfunction buildAccessors(obj, header) {\n  const accessorName = utils.toCamelCase(\' \' + header);\n  [\'get\', \'set\', \'has\'].forEach(methodName => {\n    Object.defineProperty(obj, methodName + accessorName, {\n      value: function (arg1, arg2, arg3) {\n        return this[methodName].call(this, header, arg1, arg2, arg3);\n      },\n      configurable: true\n    });\n  });\n}\nclass AxiosHeaders {\n  constructor(headers) {\n    headers && this.set(headers);\n  }\n  set(header, valueOrRewrite, rewrite) {\n    const self = this;\n    function setHeader(_value, _header, _rewrite) {\n      const lHeader = normalizeHeader(_header);\n      if (!lHeader) {\n        throw new Error(\'header name must be a non-empty string\');\n      }\n      const key = utils.findKey(self, lHeader);\n      if (!key || self[key] === undefined || _rewrite === true || _rewrite === undefined && self[key] !== false) {\n        self[key || _header] = normalizeValue(_value);\n      }\n    }\n    const setHeaders = (headers, _rewrite) => utils.forEach(headers, (_value, _header) => setHeader(_value, _header, _rewrite));\n    if (utils.isPlainObject(header) || header instanceof this.constructor) {\n      setHeaders(header, valueOrRewrite);\n    } else if (utils.isString(header) && (header = header.trim()) && !isValidHeaderName(header)) {\n      setHeaders(parseHeaders(header), valueOrRewrite);\n    } else {\n      header != null && setHeader(valueOrRewrite, header, rewrite);\n    }\n    return this;\n  }\n  get(header, parser) {\n    header = normalizeHeader(header);\n    if (header) {\n      const key = utils.findKey(this, header);\n      if (key) {\n        const value = this[key];\n        if (!parser) {\n          return value;\n        }\n        if (parser === true) {\n          return parseTokens(value);\n        }\n        if (utils.isFunction(parser)) {\n          return parser.call(this, value, key);\n        }\n        if (utils.isRegExp(parser)) {\n          return parser.exec(value);\n        }\n        throw new TypeError(\'parser must be boolean|regexp|function\');\n      }\n    }\n  }\n  has(header, matcher) {\n    header = normalizeHeader(header);\n    if (header) {\n      const key = utils.findKey(this, header);\n      return !!(key && this[key] !== undefined && (!matcher || matchHeaderValue(this, this[key], key, matcher)));\n    }\n    return false;\n  }\n  delete(header, matcher) {\n    const self = this;\n    let deleted = false;\n    function deleteHeader(_header) {\n      _header = normalizeHeader(_header);\n      if (_header) {\n        const key = utils.findKey(self, _header);\n        if (key && (!matcher || matchHeaderValue(self, self[key], key, matcher))) {\n          delete self[key];\n          deleted = true;\n        }\n      }\n    }\n    if (utils.isArray(header)) {\n      header.forEach(deleteHeader);\n    } else {\n      deleteHeader(header);\n    }\n    return deleted;\n  }\n  clear(matcher) {\n    const keys = Object.keys(this);\n    let i = keys.length;\n    let deleted = false;\n    while (i--) {\n      const key = keys[i];\n      if (!matcher || matchHeaderValue(this, this[key], key, matcher, true)) {\n        delete this[key];\n        deleted = true;\n      }\n    }\n    return deleted;\n  }\n  normalize(format) {\n    const self = this;\n    const headers = {};\n    utils.forEach(this, (value, header) => {\n      const key = utils.findKey(headers, header);\n      if (key) {\n        self[key] = normalizeValue(value);\n        delete self[header];\n        return;\n      }\n      const normalized = format ? formatHeader(header) : String(header).trim();\n      if (normalized !== header) {\n        delete self[header];\n      }\n      self[normalized] = normalizeValue(value);\n      headers[normalized] = true;\n    });\n    return this;\n  }\n  concat(...targets) {\n    return this.constructor.concat(this, ...targets);\n  }\n  toJSON(asStrings) {\n    const obj = Object.create(null);\n    utils.forEach(this, (value, header) => {\n      value != null && value !== false && (obj[header] = asStrings && utils.isArray(value) ? value.join(\', \') : value);\n    });\n    return obj;\n  }\n  [Symbol.iterator]() {\n    return Object.entries(this.toJSON())[Symbol.iterator]();\n  }\n  toString() {\n    return Object.entries(this.toJSON()).map(([header, value]) => header + \': \' + value).join(\'\\n\');\n  }\n  get [Symbol.toStringTag]() {\n    return \'AxiosHeaders\';\n  }\n  static from(thing) {\n    return thing instanceof this ? thing : new this(thing);\n  }\n  static concat(first, ...targets) {\n    const computed = new this(first);\n    targets.forEach(target => computed.set(target));\n    return computed;\n  }\n  static accessor(header) {\n    const internals = this[$internals] = this[$internals] = {\n      accessors: {}\n    };\n    const accessors = internals.accessors;\n    const prototype = this.prototype;\n    function defineAccessor(_header) {\n      const lHeader = normalizeHeader(_header);\n      if (!accessors[lHeader]) {\n        buildAccessors(prototype, _header);\n        accessors[lHeader] = true;\n      }\n    }\n    utils.isArray(header) ? header.forEach(defineAccessor) : defineAccessor(header);\n    return this;\n  }\n}\nAxiosHeaders.accessor([\'Content-Type\', \'Content-Length\', \'Accept\', \'Accept-Encoding\', \'User-Agent\', \'Authorization\']);\n\n// reserved names hotfix\nutils.reduceDescriptors(AxiosHeaders.prototype, ({\n  value\n}, key) => {\n  let mapped = key[0].toUpperCase() + key.slice(1); // map `set` => `Set`\n  return {\n    get: () => value,\n    set(headerValue) {\n      this[mapped] = headerValue;\n    }\n  };\n});\nutils.freezeMethods(AxiosHeaders);\n/* harmony default export */ const core_AxiosHeaders = (AxiosHeaders);\n;// CONCATENATED MODULE: ./node_modules/axios/lib/core/transformData.js\n\n\n\n\n\n\n/**\n * Transform the data for a request or a response\n *\n * @param {Array|Function} fns A single function or Array of functions\n * @param {?Object} response The response object\n *\n * @returns {*} The resulting transformed data\n */\nfunction transformData(fns, response) {\n  const config = this || lib_defaults;\n  const context = response || config;\n  const headers = core_AxiosHeaders.from(context.headers);\n  let data = context.data;\n  utils.forEach(fns, function transform(fn) {\n    data = fn.call(config, data, headers.normalize(), response ? response.status : undefined);\n  });\n  headers.normalize();\n  return data;\n}\n;// CONCATENATED MODULE: ./node_modules/axios/lib/cancel/isCancel.js\n\n\nfunction isCancel(value) {\n  return !!(value && value.__CANCEL__);\n}\n;// CONCATENATED MODULE: ./node_modules/axios/lib/cancel/CanceledError.js\n\n\n\n\n\n/**\n * A `CanceledError` is an object that is thrown when an operation is canceled.\n *\n * @param {string=} message The message.\n * @param {Object=} config The config.\n * @param {Object=} request The request.\n *\n * @returns {CanceledError} The created error.\n */\nfunction CanceledError(message, config, request) {\n  // eslint-disable-next-line no-eq-null,eqeqeq\n  core_AxiosError.call(this, message == null ? \'canceled\' : message, core_AxiosError.ERR_CANCELED, config, request);\n  this.name = \'CanceledError\';\n}\nutils.inherits(CanceledError, core_AxiosError, {\n  __CANCEL__: true\n});\n/* harmony default export */ const cancel_CanceledError = (CanceledError);\n;// CONCATENATED MODULE: ./node_modules/axios/lib/core/settle.js\n\n\n\n\n/**\n * Resolve or reject a Promise based on response status.\n *\n * @param {Function} resolve A function that resolves the promise.\n * @param {Function} reject A function that rejects the promise.\n * @param {object} response The response.\n *\n * @returns {object} The response.\n */\nfunction settle(resolve, reject, response) {\n  const validateStatus = response.config.validateStatus;\n  if (!response.status || !validateStatus || validateStatus(response.status)) {\n    resolve(response);\n  } else {\n    reject(new core_AxiosError(\'Request failed with status code \' + response.status, [core_AxiosError.ERR_BAD_REQUEST, core_AxiosError.ERR_BAD_RESPONSE][Math.floor(response.status / 100) - 4], response.config, response.request, response));\n  }\n}\n;// CONCATENATED MODULE: ./node_modules/axios/lib/helpers/cookies.js\n\n\n/* harmony default export */ const cookies = (platform.hasStandardBrowserEnv ?\n// Standard browser envs support document.cookie\n{\n  write(name, value, expires, path, domain, secure) {\n    const cookie = [name + \'=\' + encodeURIComponent(value)];\n    utils.isNumber(expires) && cookie.push(\'expires=\' + new Date(expires).toGMTString());\n    utils.isString(path) && cookie.push(\'path=\' + path);\n    utils.isString(domain) && cookie.push(\'domain=\' + domain);\n    secure === true && cookie.push(\'secure\');\n    document.cookie = cookie.join(\'; \');\n  },\n  read(name) {\n    const match = document.cookie.match(new RegExp(\'(^|;\\\\s*)(\' + name + \')=([^;]*)\'));\n    return match ? decodeURIComponent(match[3]) : null;\n  },\n  remove(name) {\n    this.write(name, \'\', Date.now() - 86400000);\n  }\n} :\n// Non-standard browser env (web workers, react-native) lack needed support.\n{\n  write() {},\n  read() {\n    return null;\n  },\n  remove() {}\n});\n;// CONCATENATED MODULE: ./node_modules/axios/lib/helpers/isAbsoluteURL.js\n\n\n/**\n * Determines whether the specified URL is absolute\n *\n * @param {string} url The URL to test\n *\n * @returns {boolean} True if the specified URL is absolute, otherwise false\n */\nfunction isAbsoluteURL(url) {\n  // A URL is considered absolute if it begins with "<scheme>://" or "//" (protocol-relative URL).\n  // RFC 3986 defines scheme name as a sequence of characters beginning with a letter and followed\n  // by any combination of letters, digits, plus, period, or hyphen.\n  return /^([a-z][a-z\\d+\\-.]*:)?\\/\\//i.test(url);\n}\n;// CONCATENATED MODULE: ./node_modules/axios/lib/helpers/combineURLs.js\n\n\n/**\n * Creates a new URL by combining the specified URLs\n *\n * @param {string} baseURL The base URL\n * @param {string} relativeURL The relative URL\n *\n * @returns {string} The combined URL\n */\nfunction combineURLs(baseURL, relativeURL) {\n  return relativeURL ? baseURL.replace(/\\/?\\/$/, \'\') + \'/\' + relativeURL.replace(/^\\/+/, \'\') : baseURL;\n}\n;// CONCATENATED MODULE: ./node_modules/axios/lib/core/buildFullPath.js\n\n\n\n\n\n/**\n * Creates a new URL by combining the baseURL with the requestedURL,\n * only when the requestedURL is not already an absolute URL.\n * If the requestURL is absolute, this function returns the requestedURL untouched.\n *\n * @param {string} baseURL The base URL\n * @param {string} requestedURL Absolute or relative URL to combine\n *\n * @returns {string} The combined full path\n */\nfunction buildFullPath(baseURL, requestedURL) {\n  if (baseURL && !isAbsoluteURL(requestedURL)) {\n    return combineURLs(baseURL, requestedURL);\n  }\n  return requestedURL;\n}\n;// CONCATENATED MODULE: ./node_modules/axios/lib/helpers/isURLSameOrigin.js\n\n\n\n\n/* harmony default export */ const isURLSameOrigin = (platform.hasStandardBrowserEnv ?\n// Standard browser envs have full support of the APIs needed to test\n// whether the request URL is of the same origin as current location.\nfunction standardBrowserEnv() {\n  const msie = /(msie|trident)/i.test(navigator.userAgent);\n  const urlParsingNode = document.createElement(\'a\');\n  let originURL;\n\n  /**\n  * Parse a URL to discover its components\n  *\n  * @param {String} url The URL to be parsed\n  * @returns {Object}\n  */\n  function resolveURL(url) {\n    let href = url;\n    if (msie) {\n      // IE needs attribute set twice to normalize properties\n      urlParsingNode.setAttribute(\'href\', href);\n      href = urlParsingNode.href;\n    }\n    urlParsingNode.setAttribute(\'href\', href);\n\n    // urlParsingNode provides the UrlUtils interface - http://url.spec.whatwg.org/#urlutils\n    return {\n      href: urlParsingNode.href,\n      protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, \'\') : \'\',\n      host: urlParsingNode.host,\n      search: urlParsingNode.search ? urlParsingNode.search.replace(/^\\?/, \'\') : \'\',\n      hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, \'\') : \'\',\n      hostname: urlParsingNode.hostname,\n      port: urlParsingNode.port,\n      pathname: urlParsingNode.pathname.charAt(0) === \'/\' ? urlParsingNode.pathname : \'/\' + urlParsingNode.pathname\n    };\n  }\n  originURL = resolveURL(window.location.href);\n\n  /**\n  * Determine if a URL shares the same origin as the current location\n  *\n  * @param {String} requestURL The URL to test\n  * @returns {boolean} True if URL shares the same origin, otherwise false\n  */\n  return function isURLSameOrigin(requestURL) {\n    const parsed = utils.isString(requestURL) ? resolveURL(requestURL) : requestURL;\n    return parsed.protocol === originURL.protocol && parsed.host === originURL.host;\n  };\n}() :\n// Non standard browser envs (web workers, react-native) lack needed support.\nfunction nonStandardBrowserEnv() {\n  return function isURLSameOrigin() {\n    return true;\n  };\n}());\n;// CONCATENATED MODULE: ./node_modules/axios/lib/helpers/parseProtocol.js\n\n\nfunction parseProtocol(url) {\n  const match = /^([-+\\w]{1,25})(:?\\/\\/|:)/.exec(url);\n  return match && match[1] || \'\';\n}\n;// CONCATENATED MODULE: ./node_modules/axios/lib/helpers/speedometer.js\n\n\n/**\n * Calculate data maxRate\n * @param {Number} [samplesCount= 10]\n * @param {Number} [min= 1000]\n * @returns {Function}\n */\nfunction speedometer(samplesCount, min) {\n  samplesCount = samplesCount || 10;\n  const bytes = new Array(samplesCount);\n  const timestamps = new Array(samplesCount);\n  let head = 0;\n  let tail = 0;\n  let firstSampleTS;\n  min = min !== undefined ? min : 1000;\n  return function push(chunkLength) {\n    const now = Date.now();\n    const startedAt = timestamps[tail];\n    if (!firstSampleTS) {\n      firstSampleTS = now;\n    }\n    bytes[head] = chunkLength;\n    timestamps[head] = now;\n    let i = tail;\n    let bytesCount = 0;\n    while (i !== head) {\n      bytesCount += bytes[i++];\n      i = i % samplesCount;\n    }\n    head = (head + 1) % samplesCount;\n    if (head === tail) {\n      tail = (tail + 1) % samplesCount;\n    }\n    if (now - firstSampleTS < min) {\n      return;\n    }\n    const passed = startedAt && now - startedAt;\n    return passed ? Math.round(bytesCount * 1000 / passed) : undefined;\n  };\n}\n/* harmony default export */ const helpers_speedometer = (speedometer);\n;// CONCATENATED MODULE: ./node_modules/axios/lib/adapters/xhr.js\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfunction progressEventReducer(listener, isDownloadStream) {\n  let bytesNotified = 0;\n  const _speedometer = helpers_speedometer(50, 250);\n  return e => {\n    const loaded = e.loaded;\n    const total = e.lengthComputable ? e.total : undefined;\n    const progressBytes = loaded - bytesNotified;\n    const rate = _speedometer(progressBytes);\n    const inRange = loaded <= total;\n    bytesNotified = loaded;\n    const data = {\n      loaded,\n      total,\n      progress: total ? loaded / total : undefined,\n      bytes: progressBytes,\n      rate: rate ? rate : undefined,\n      estimated: rate && total && inRange ? (total - loaded) / rate : undefined,\n      event: e\n    };\n    data[isDownloadStream ? \'download\' : \'upload\'] = true;\n    listener(data);\n  };\n}\nconst isXHRAdapterSupported = typeof XMLHttpRequest !== \'undefined\';\n/* harmony default export */ const xhr = (isXHRAdapterSupported && function (config) {\n  return new Promise(function dispatchXhrRequest(resolve, reject) {\n    let requestData = config.data;\n    const requestHeaders = core_AxiosHeaders.from(config.headers).normalize();\n    let {\n      responseType,\n      withXSRFToken\n    } = config;\n    let onCanceled;\n    function done() {\n      if (config.cancelToken) {\n        config.cancelToken.unsubscribe(onCanceled);\n      }\n      if (config.signal) {\n        config.signal.removeEventListener(\'abort\', onCanceled);\n      }\n    }\n    let contentType;\n    if (utils.isFormData(requestData)) {\n      if (platform.hasStandardBrowserEnv || platform.hasStandardBrowserWebWorkerEnv) {\n        requestHeaders.setContentType(false); // Let the browser set it\n      } else if ((contentType = requestHeaders.getContentType()) !== false) {\n        // fix semicolon duplication issue for ReactNative FormData implementation\n        const [type, ...tokens] = contentType ? contentType.split(\';\').map(token => token.trim()).filter(Boolean) : [];\n        requestHeaders.setContentType([type || \'multipart/form-data\', ...tokens].join(\'; \'));\n      }\n    }\n    let request = new XMLHttpRequest();\n\n    // HTTP basic authentication\n    if (config.auth) {\n      const username = config.auth.username || \'\';\n      const password = config.auth.password ? unescape(encodeURIComponent(config.auth.password)) : \'\';\n      requestHeaders.set(\'Authorization\', \'Basic \' + btoa(username + \':\' + password));\n    }\n    const fullPath = buildFullPath(config.baseURL, config.url);\n    request.open(config.method.toUpperCase(), buildURL(fullPath, config.params, config.paramsSerializer), true);\n\n    // Set the request timeout in MS\n    request.timeout = config.timeout;\n    function onloadend() {\n      if (!request) {\n        return;\n      }\n      // Prepare the response\n      const responseHeaders = core_AxiosHeaders.from(\'getAllResponseHeaders\' in request && request.getAllResponseHeaders());\n      const responseData = !responseType || responseType === \'text\' || responseType === \'json\' ? request.responseText : request.response;\n      const response = {\n        data: responseData,\n        status: request.status,\n        statusText: request.statusText,\n        headers: responseHeaders,\n        config,\n        request\n      };\n      settle(function _resolve(value) {\n        resolve(value);\n        done();\n      }, function _reject(err) {\n        reject(err);\n        done();\n      }, response);\n\n      // Clean up request\n      request = null;\n    }\n    if (\'onloadend\' in request) {\n      // Use onloadend if available\n      request.onloadend = onloadend;\n    } else {\n      // Listen for ready state to emulate onloadend\n      request.onreadystatechange = function handleLoad() {\n        if (!request || request.readyState !== 4) {\n          return;\n        }\n\n        // The request errored out and we didn\'t get a response, this will be\n        // handled by onerror instead\n        // With one exception: request that using file: protocol, most browsers\n        // will return status as 0 even though it\'s a successful request\n        if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf(\'file:\') === 0)) {\n          return;\n        }\n        // readystate handler is calling before onerror or ontimeout handlers,\n        // so we should call onloadend on the next \'tick\'\n        setTimeout(onloadend);\n      };\n    }\n\n    // Handle browser request cancellation (as opposed to a manual cancellation)\n    request.onabort = function handleAbort() {\n      if (!request) {\n        return;\n      }\n      reject(new core_AxiosError(\'Request aborted\', core_AxiosError.ECONNABORTED, config, request));\n\n      // Clean up request\n      request = null;\n    };\n\n    // Handle low level network errors\n    request.onerror = function handleError() {\n      // Real errors are hidden from us by the browser\n      // onerror should only fire if it\'s a network error\n      reject(new core_AxiosError(\'Network Error\', core_AxiosError.ERR_NETWORK, config, request));\n\n      // Clean up request\n      request = null;\n    };\n\n    // Handle timeout\n    request.ontimeout = function handleTimeout() {\n      let timeoutErrorMessage = config.timeout ? \'timeout of \' + config.timeout + \'ms exceeded\' : \'timeout exceeded\';\n      const transitional = config.transitional || defaults_transitional;\n      if (config.timeoutErrorMessage) {\n        timeoutErrorMessage = config.timeoutErrorMessage;\n      }\n      reject(new core_AxiosError(timeoutErrorMessage, transitional.clarifyTimeoutError ? core_AxiosError.ETIMEDOUT : core_AxiosError.ECONNABORTED, config, request));\n\n      // Clean up request\n      request = null;\n    };\n\n    // Add xsrf header\n    // This is only done if running in a standard browser environment.\n    // Specifically not if we\'re in a web worker, or react-native.\n    if (platform.hasStandardBrowserEnv) {\n      withXSRFToken && utils.isFunction(withXSRFToken) && (withXSRFToken = withXSRFToken(config));\n      if (withXSRFToken || withXSRFToken !== false && isURLSameOrigin(fullPath)) {\n        // Add xsrf header\n        const xsrfValue = config.xsrfHeaderName && config.xsrfCookieName && cookies.read(config.xsrfCookieName);\n        if (xsrfValue) {\n          requestHeaders.set(config.xsrfHeaderName, xsrfValue);\n        }\n      }\n    }\n\n    // Remove Content-Type if data is undefined\n    requestData === undefined && requestHeaders.setContentType(null);\n\n    // Add headers to the request\n    if (\'setRequestHeader\' in request) {\n      utils.forEach(requestHeaders.toJSON(), function setRequestHeader(val, key) {\n        request.setRequestHeader(key, val);\n      });\n    }\n\n    // Add withCredentials to request if needed\n    if (!utils.isUndefined(config.withCredentials)) {\n      request.withCredentials = !!config.withCredentials;\n    }\n\n    // Add responseType to request if needed\n    if (responseType && responseType !== \'json\') {\n      request.responseType = config.responseType;\n    }\n\n    // Handle progress if needed\n    if (typeof config.onDownloadProgress === \'function\') {\n      request.addEventListener(\'progress\', progressEventReducer(config.onDownloadProgress, true));\n    }\n\n    // Not all browsers support upload events\n    if (typeof config.onUploadProgress === \'function\' && request.upload) {\n      request.upload.addEventListener(\'progress\', progressEventReducer(config.onUploadProgress));\n    }\n    if (config.cancelToken || config.signal) {\n      // Handle cancellation\n      // eslint-disable-next-line func-names\n      onCanceled = cancel => {\n        if (!request) {\n          return;\n        }\n        reject(!cancel || cancel.type ? new cancel_CanceledError(null, config, request) : cancel);\n        request.abort();\n        request = null;\n      };\n      config.cancelToken && config.cancelToken.subscribe(onCanceled);\n      if (config.signal) {\n        config.signal.aborted ? onCanceled() : config.signal.addEventListener(\'abort\', onCanceled);\n      }\n    }\n    const protocol = parseProtocol(fullPath);\n    if (protocol && platform.protocols.indexOf(protocol) === -1) {\n      reject(new core_AxiosError(\'Unsupported protocol \' + protocol + \':\', core_AxiosError.ERR_BAD_REQUEST, config));\n      return;\n    }\n\n    // Send the request\n    request.send(requestData || null);\n  });\n});\n;// CONCATENATED MODULE: ./node_modules/axios/lib/adapters/adapters.js\n\n\n\n\nconst knownAdapters = {\n  http: helpers_null,\n  xhr: xhr\n};\nutils.forEach(knownAdapters, (fn, value) => {\n  if (fn) {\n    try {\n      Object.defineProperty(fn, \'name\', {\n        value\n      });\n    } catch (e) {\n      // eslint-disable-next-line no-empty\n    }\n    Object.defineProperty(fn, \'adapterName\', {\n      value\n    });\n  }\n});\nconst renderReason = reason => `- ${reason}`;\nconst isResolvedHandle = adapter => utils.isFunction(adapter) || adapter === null || adapter === false;\n/* harmony default export */ const adapters = ({\n  getAdapter: adapters => {\n    adapters = utils.isArray(adapters) ? adapters : [adapters];\n    const {\n      length\n    } = adapters;\n    let nameOrAdapter;\n    let adapter;\n    const rejectedReasons = {};\n    for (let i = 0; i < length; i++) {\n      nameOrAdapter = adapters[i];\n      let id;\n      adapter = nameOrAdapter;\n      if (!isResolvedHandle(nameOrAdapter)) {\n        adapter = knownAdapters[(id = String(nameOrAdapter)).toLowerCase()];\n        if (adapter === undefined) {\n          throw new core_AxiosError(`Unknown adapter \'${id}\'`);\n        }\n      }\n      if (adapter) {\n        break;\n      }\n      rejectedReasons[id || \'#\' + i] = adapter;\n    }\n    if (!adapter) {\n      const reasons = Object.entries(rejectedReasons).map(([id, state]) => `adapter ${id} ` + (state === false ? \'is not supported by the environment\' : \'is not available in the build\'));\n      let s = length ? reasons.length > 1 ? \'since :\\n\' + reasons.map(renderReason).join(\'\\n\') : \' \' + renderReason(reasons[0]) : \'as no adapter specified\';\n      throw new core_AxiosError(`There is no suitable adapter to dispatch the request ` + s, \'ERR_NOT_SUPPORT\');\n    }\n    return adapter;\n  },\n  adapters: knownAdapters\n});\n;// CONCATENATED MODULE: ./node_modules/axios/lib/core/dispatchRequest.js\n\n\n\n\n\n\n\n\n\n/**\n * Throws a `CanceledError` if cancellation has been requested.\n *\n * @param {Object} config The config that is to be used for the request\n *\n * @returns {void}\n */\nfunction throwIfCancellationRequested(config) {\n  if (config.cancelToken) {\n    config.cancelToken.throwIfRequested();\n  }\n  if (config.signal && config.signal.aborted) {\n    throw new cancel_CanceledError(null, config);\n  }\n}\n\n/**\n * Dispatch a request to the server using the configured adapter.\n *\n * @param {object} config The config that is to be used for the request\n *\n * @returns {Promise} The Promise to be fulfilled\n */\nfunction dispatchRequest(config) {\n  throwIfCancellationRequested(config);\n  config.headers = core_AxiosHeaders.from(config.headers);\n\n  // Transform request data\n  config.data = transformData.call(config, config.transformRequest);\n  if ([\'post\', \'put\', \'patch\'].indexOf(config.method) !== -1) {\n    config.headers.setContentType(\'application/x-www-form-urlencoded\', false);\n  }\n  const adapter = adapters.getAdapter(config.adapter || lib_defaults.adapter);\n  return adapter(config).then(function onAdapterResolution(response) {\n    throwIfCancellationRequested(config);\n\n    // Transform response data\n    response.data = transformData.call(config, config.transformResponse, response);\n    response.headers = core_AxiosHeaders.from(response.headers);\n    return response;\n  }, function onAdapterRejection(reason) {\n    if (!isCancel(reason)) {\n      throwIfCancellationRequested(config);\n\n      // Transform response data\n      if (reason && reason.response) {\n        reason.response.data = transformData.call(config, config.transformResponse, reason.response);\n        reason.response.headers = core_AxiosHeaders.from(reason.response.headers);\n      }\n    }\n    return Promise.reject(reason);\n  });\n}\n;// CONCATENATED MODULE: ./node_modules/axios/lib/core/mergeConfig.js\n\n\n\n\nconst headersToObject = thing => thing instanceof core_AxiosHeaders ? {\n  ...thing\n} : thing;\n\n/**\n * Config-specific merge-function which creates a new config-object\n * by merging two configuration objects together.\n *\n * @param {Object} config1\n * @param {Object} config2\n *\n * @returns {Object} New object resulting from merging config2 to config1\n */\nfunction mergeConfig(config1, config2) {\n  // eslint-disable-next-line no-param-reassign\n  config2 = config2 || {};\n  const config = {};\n  function getMergedValue(target, source, caseless) {\n    if (utils.isPlainObject(target) && utils.isPlainObject(source)) {\n      return utils.merge.call({\n        caseless\n      }, target, source);\n    } else if (utils.isPlainObject(source)) {\n      return utils.merge({}, source);\n    } else if (utils.isArray(source)) {\n      return source.slice();\n    }\n    return source;\n  }\n\n  // eslint-disable-next-line consistent-return\n  function mergeDeepProperties(a, b, caseless) {\n    if (!utils.isUndefined(b)) {\n      return getMergedValue(a, b, caseless);\n    } else if (!utils.isUndefined(a)) {\n      return getMergedValue(undefined, a, caseless);\n    }\n  }\n\n  // eslint-disable-next-line consistent-return\n  function valueFromConfig2(a, b) {\n    if (!utils.isUndefined(b)) {\n      return getMergedValue(undefined, b);\n    }\n  }\n\n  // eslint-disable-next-line consistent-return\n  function defaultToConfig2(a, b) {\n    if (!utils.isUndefined(b)) {\n      return getMergedValue(undefined, b);\n    } else if (!utils.isUndefined(a)) {\n      return getMergedValue(undefined, a);\n    }\n  }\n\n  // eslint-disable-next-line consistent-return\n  function mergeDirectKeys(a, b, prop) {\n    if (prop in config2) {\n      return getMergedValue(a, b);\n    } else if (prop in config1) {\n      return getMergedValue(undefined, a);\n    }\n  }\n  const mergeMap = {\n    url: valueFromConfig2,\n    method: valueFromConfig2,\n    data: valueFromConfig2,\n    baseURL: defaultToConfig2,\n    transformRequest: defaultToConfig2,\n    transformResponse: defaultToConfig2,\n    paramsSerializer: defaultToConfig2,\n    timeout: defaultToConfig2,\n    timeoutMessage: defaultToConfig2,\n    withCredentials: defaultToConfig2,\n    withXSRFToken: defaultToConfig2,\n    adapter: defaultToConfig2,\n    responseType: defaultToConfig2,\n    xsrfCookieName: defaultToConfig2,\n    xsrfHeaderName: defaultToConfig2,\n    onUploadProgress: defaultToConfig2,\n    onDownloadProgress: defaultToConfig2,\n    decompress: defaultToConfig2,\n    maxContentLength: defaultToConfig2,\n    maxBodyLength: defaultToConfig2,\n    beforeRedirect: defaultToConfig2,\n    transport: defaultToConfig2,\n    httpAgent: defaultToConfig2,\n    httpsAgent: defaultToConfig2,\n    cancelToken: defaultToConfig2,\n    socketPath: defaultToConfig2,\n    responseEncoding: defaultToConfig2,\n    validateStatus: mergeDirectKeys,\n    headers: (a, b) => mergeDeepProperties(headersToObject(a), headersToObject(b), true)\n  };\n  utils.forEach(Object.keys(Object.assign({}, config1, config2)), function computeConfigValue(prop) {\n    const merge = mergeMap[prop] || mergeDeepProperties;\n    const configValue = merge(config1[prop], config2[prop], prop);\n    utils.isUndefined(configValue) && merge !== mergeDirectKeys || (config[prop] = configValue);\n  });\n  return config;\n}\n;// CONCATENATED MODULE: ./node_modules/axios/lib/env/data.js\nconst VERSION = "1.6.8";\n;// CONCATENATED MODULE: ./node_modules/axios/lib/helpers/validator.js\n\n\n\n\nconst validators = {};\n\n// eslint-disable-next-line func-names\n[\'object\', \'boolean\', \'number\', \'function\', \'string\', \'symbol\'].forEach((type, i) => {\n  validators[type] = function validator(thing) {\n    return typeof thing === type || \'a\' + (i < 1 ? \'n \' : \' \') + type;\n  };\n});\nconst deprecatedWarnings = {};\n\n/**\n * Transitional option validator\n *\n * @param {function|boolean?} validator - set to false if the transitional option has been removed\n * @param {string?} version - deprecated version / removed since version\n * @param {string?} message - some message with additional info\n *\n * @returns {function}\n */\nvalidators.transitional = function transitional(validator, version, message) {\n  function formatMessage(opt, desc) {\n    return \'[Axios v\' + VERSION + \'] Transitional option \\\'\' + opt + \'\\\'\' + desc + (message ? \'. \' + message : \'\');\n  }\n\n  // eslint-disable-next-line func-names\n  return (value, opt, opts) => {\n    if (validator === false) {\n      throw new core_AxiosError(formatMessage(opt, \' has been removed\' + (version ? \' in \' + version : \'\')), core_AxiosError.ERR_DEPRECATED);\n    }\n    if (version && !deprecatedWarnings[opt]) {\n      deprecatedWarnings[opt] = true;\n      // eslint-disable-next-line no-console\n      console.warn(formatMessage(opt, \' has been deprecated since v\' + version + \' and will be removed in the near future\'));\n    }\n    return validator ? validator(value, opt, opts) : true;\n  };\n};\n\n/**\n * Assert object\'s properties type\n *\n * @param {object} options\n * @param {object} schema\n * @param {boolean?} allowUnknown\n *\n * @returns {object}\n */\n\nfunction assertOptions(options, schema, allowUnknown) {\n  if (typeof options !== \'object\') {\n    throw new core_AxiosError(\'options must be an object\', core_AxiosError.ERR_BAD_OPTION_VALUE);\n  }\n  const keys = Object.keys(options);\n  let i = keys.length;\n  while (i-- > 0) {\n    const opt = keys[i];\n    const validator = schema[opt];\n    if (validator) {\n      const value = options[opt];\n      const result = value === undefined || validator(value, opt, options);\n      if (result !== true) {\n        throw new core_AxiosError(\'option \' + opt + \' must be \' + result, core_AxiosError.ERR_BAD_OPTION_VALUE);\n      }\n      continue;\n    }\n    if (allowUnknown !== true) {\n      throw new core_AxiosError(\'Unknown option \' + opt, core_AxiosError.ERR_BAD_OPTION);\n    }\n  }\n}\n/* harmony default export */ const validator = ({\n  assertOptions,\n  validators\n});\n;// CONCATENATED MODULE: ./node_modules/axios/lib/core/Axios.js\n\n\n\n\n\n\n\n\n\n\nconst Axios_validators = validator.validators;\n\n/**\n * Create a new instance of Axios\n *\n * @param {Object} instanceConfig The default config for the instance\n *\n * @return {Axios} A new instance of Axios\n */\nclass Axios {\n  constructor(instanceConfig) {\n    this.defaults = instanceConfig;\n    this.interceptors = {\n      request: new core_InterceptorManager(),\n      response: new core_InterceptorManager()\n    };\n  }\n\n  /**\n   * Dispatch a request\n   *\n   * @param {String|Object} configOrUrl The config specific for this request (merged with this.defaults)\n   * @param {?Object} config\n   *\n   * @returns {Promise} The Promise to be fulfilled\n   */\n  async request(configOrUrl, config) {\n    try {\n      return await this._request(configOrUrl, config);\n    } catch (err) {\n      if (err instanceof Error) {\n        let dummy;\n        Error.captureStackTrace ? Error.captureStackTrace(dummy = {}) : dummy = new Error();\n\n        // slice off the Error: ... line\n        const stack = dummy.stack ? dummy.stack.replace(/^.+\\n/, \'\') : \'\';\n        if (!err.stack) {\n          err.stack = stack;\n          // match without the 2 top stack lines\n        } else if (stack && !String(err.stack).endsWith(stack.replace(/^.+\\n.+\\n/, \'\'))) {\n          err.stack += \'\\n\' + stack;\n        }\n      }\n      throw err;\n    }\n  }\n  _request(configOrUrl, config) {\n    /*eslint no-param-reassign:0*/\n    // Allow for axios(\'example/url\'[, config]) a la fetch API\n    if (typeof configOrUrl === \'string\') {\n      config = config || {};\n      config.url = configOrUrl;\n    } else {\n      config = configOrUrl || {};\n    }\n    config = mergeConfig(this.defaults, config);\n    const {\n      transitional,\n      paramsSerializer,\n      headers\n    } = config;\n    if (transitional !== undefined) {\n      validator.assertOptions(transitional, {\n        silentJSONParsing: Axios_validators.transitional(Axios_validators.boolean),\n        forcedJSONParsing: Axios_validators.transitional(Axios_validators.boolean),\n        clarifyTimeoutError: Axios_validators.transitional(Axios_validators.boolean)\n      }, false);\n    }\n    if (paramsSerializer != null) {\n      if (utils.isFunction(paramsSerializer)) {\n        config.paramsSerializer = {\n          serialize: paramsSerializer\n        };\n      } else {\n        validator.assertOptions(paramsSerializer, {\n          encode: Axios_validators.function,\n          serialize: Axios_validators.function\n        }, true);\n      }\n    }\n\n    // Set config.method\n    config.method = (config.method || this.defaults.method || \'get\').toLowerCase();\n\n    // Flatten headers\n    let contextHeaders = headers && utils.merge(headers.common, headers[config.method]);\n    headers && utils.forEach([\'delete\', \'get\', \'head\', \'post\', \'put\', \'patch\', \'common\'], method => {\n      delete headers[method];\n    });\n    config.headers = core_AxiosHeaders.concat(contextHeaders, headers);\n\n    // filter out skipped interceptors\n    const requestInterceptorChain = [];\n    let synchronousRequestInterceptors = true;\n    this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {\n      if (typeof interceptor.runWhen === \'function\' && interceptor.runWhen(config) === false) {\n        return;\n      }\n      synchronousRequestInterceptors = synchronousRequestInterceptors && interceptor.synchronous;\n      requestInterceptorChain.unshift(interceptor.fulfilled, interceptor.rejected);\n    });\n    const responseInterceptorChain = [];\n    this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {\n      responseInterceptorChain.push(interceptor.fulfilled, interceptor.rejected);\n    });\n    let promise;\n    let i = 0;\n    let len;\n    if (!synchronousRequestInterceptors) {\n      const chain = [dispatchRequest.bind(this), undefined];\n      chain.unshift.apply(chain, requestInterceptorChain);\n      chain.push.apply(chain, responseInterceptorChain);\n      len = chain.length;\n      promise = Promise.resolve(config);\n      while (i < len) {\n        promise = promise.then(chain[i++], chain[i++]);\n      }\n      return promise;\n    }\n    len = requestInterceptorChain.length;\n    let newConfig = config;\n    i = 0;\n    while (i < len) {\n      const onFulfilled = requestInterceptorChain[i++];\n      const onRejected = requestInterceptorChain[i++];\n      try {\n        newConfig = onFulfilled(newConfig);\n      } catch (error) {\n        onRejected.call(this, error);\n        break;\n      }\n    }\n    try {\n      promise = dispatchRequest.call(this, newConfig);\n    } catch (error) {\n      return Promise.reject(error);\n    }\n    i = 0;\n    len = responseInterceptorChain.length;\n    while (i < len) {\n      promise = promise.then(responseInterceptorChain[i++], responseInterceptorChain[i++]);\n    }\n    return promise;\n  }\n  getUri(config) {\n    config = mergeConfig(this.defaults, config);\n    const fullPath = buildFullPath(config.baseURL, config.url);\n    return buildURL(fullPath, config.params, config.paramsSerializer);\n  }\n}\n\n// Provide aliases for supported request methods\nutils.forEach([\'delete\', \'get\', \'head\', \'options\'], function forEachMethodNoData(method) {\n  /*eslint func-names:0*/\n  Axios.prototype[method] = function (url, config) {\n    return this.request(mergeConfig(config || {}, {\n      method,\n      url,\n      data: (config || {}).data\n    }));\n  };\n});\nutils.forEach([\'post\', \'put\', \'patch\'], function forEachMethodWithData(method) {\n  /*eslint func-names:0*/\n\n  function generateHTTPMethod(isForm) {\n    return function httpMethod(url, data, config) {\n      return this.request(mergeConfig(config || {}, {\n        method,\n        headers: isForm ? {\n          \'Content-Type\': \'multipart/form-data\'\n        } : {},\n        url,\n        data\n      }));\n    };\n  }\n  Axios.prototype[method] = generateHTTPMethod();\n  Axios.prototype[method + \'Form\'] = generateHTTPMethod(true);\n});\n/* harmony default export */ const core_Axios = (Axios);\n;// CONCATENATED MODULE: ./node_modules/axios/lib/cancel/CancelToken.js\n\n\n\n\n/**\n * A `CancelToken` is an object that can be used to request cancellation of an operation.\n *\n * @param {Function} executor The executor function.\n *\n * @returns {CancelToken}\n */\nclass CancelToken {\n  constructor(executor) {\n    if (typeof executor !== \'function\') {\n      throw new TypeError(\'executor must be a function.\');\n    }\n    let resolvePromise;\n    this.promise = new Promise(function promiseExecutor(resolve) {\n      resolvePromise = resolve;\n    });\n    const token = this;\n\n    // eslint-disable-next-line func-names\n    this.promise.then(cancel => {\n      if (!token._listeners) return;\n      let i = token._listeners.length;\n      while (i-- > 0) {\n        token._listeners[i](cancel);\n      }\n      token._listeners = null;\n    });\n\n    // eslint-disable-next-line func-names\n    this.promise.then = onfulfilled => {\n      let _resolve;\n      // eslint-disable-next-line func-names\n      const promise = new Promise(resolve => {\n        token.subscribe(resolve);\n        _resolve = resolve;\n      }).then(onfulfilled);\n      promise.cancel = function reject() {\n        token.unsubscribe(_resolve);\n      };\n      return promise;\n    };\n    executor(function cancel(message, config, request) {\n      if (token.reason) {\n        // Cancellation has already been requested\n        return;\n      }\n      token.reason = new cancel_CanceledError(message, config, request);\n      resolvePromise(token.reason);\n    });\n  }\n\n  /**\n   * Throws a `CanceledError` if cancellation has been requested.\n   */\n  throwIfRequested() {\n    if (this.reason) {\n      throw this.reason;\n    }\n  }\n\n  /**\n   * Subscribe to the cancel signal\n   */\n\n  subscribe(listener) {\n    if (this.reason) {\n      listener(this.reason);\n      return;\n    }\n    if (this._listeners) {\n      this._listeners.push(listener);\n    } else {\n      this._listeners = [listener];\n    }\n  }\n\n  /**\n   * Unsubscribe from the cancel signal\n   */\n\n  unsubscribe(listener) {\n    if (!this._listeners) {\n      return;\n    }\n    const index = this._listeners.indexOf(listener);\n    if (index !== -1) {\n      this._listeners.splice(index, 1);\n    }\n  }\n\n  /**\n   * Returns an object that contains a new `CancelToken` and a function that, when called,\n   * cancels the `CancelToken`.\n   */\n  static source() {\n    let cancel;\n    const token = new CancelToken(function executor(c) {\n      cancel = c;\n    });\n    return {\n      token,\n      cancel\n    };\n  }\n}\n/* harmony default export */ const cancel_CancelToken = (CancelToken);\n;// CONCATENATED MODULE: ./node_modules/axios/lib/helpers/spread.js\n\n\n/**\n * Syntactic sugar for invoking a function and expanding an array for arguments.\n *\n * Common use case would be to use `Function.prototype.apply`.\n *\n *  ```js\n *  function f(x, y, z) {}\n *  var args = [1, 2, 3];\n *  f.apply(null, args);\n *  ```\n *\n * With `spread` this example can be re-written.\n *\n *  ```js\n *  spread(function(x, y, z) {})([1, 2, 3]);\n *  ```\n *\n * @param {Function} callback\n *\n * @returns {Function}\n */\nfunction spread(callback) {\n  return function wrap(arr) {\n    return callback.apply(null, arr);\n  };\n}\n;// CONCATENATED MODULE: ./node_modules/axios/lib/helpers/isAxiosError.js\n\n\n\n\n/**\n * Determines whether the payload is an error thrown by Axios\n *\n * @param {*} payload The value to test\n *\n * @returns {boolean} True if the payload is an error thrown by Axios, otherwise false\n */\nfunction isAxiosError(payload) {\n  return utils.isObject(payload) && payload.isAxiosError === true;\n}\n;// CONCATENATED MODULE: ./node_modules/axios/lib/helpers/HttpStatusCode.js\nconst HttpStatusCode = {\n  Continue: 100,\n  SwitchingProtocols: 101,\n  Processing: 102,\n  EarlyHints: 103,\n  Ok: 200,\n  Created: 201,\n  Accepted: 202,\n  NonAuthoritativeInformation: 203,\n  NoContent: 204,\n  ResetContent: 205,\n  PartialContent: 206,\n  MultiStatus: 207,\n  AlreadyReported: 208,\n  ImUsed: 226,\n  MultipleChoices: 300,\n  MovedPermanently: 301,\n  Found: 302,\n  SeeOther: 303,\n  NotModified: 304,\n  UseProxy: 305,\n  Unused: 306,\n  TemporaryRedirect: 307,\n  PermanentRedirect: 308,\n  BadRequest: 400,\n  Unauthorized: 401,\n  PaymentRequired: 402,\n  Forbidden: 403,\n  NotFound: 404,\n  MethodNotAllowed: 405,\n  NotAcceptable: 406,\n  ProxyAuthenticationRequired: 407,\n  RequestTimeout: 408,\n  Conflict: 409,\n  Gone: 410,\n  LengthRequired: 411,\n  PreconditionFailed: 412,\n  PayloadTooLarge: 413,\n  UriTooLong: 414,\n  UnsupportedMediaType: 415,\n  RangeNotSatisfiable: 416,\n  ExpectationFailed: 417,\n  ImATeapot: 418,\n  MisdirectedRequest: 421,\n  UnprocessableEntity: 422,\n  Locked: 423,\n  FailedDependency: 424,\n  TooEarly: 425,\n  UpgradeRequired: 426,\n  PreconditionRequired: 428,\n  TooManyRequests: 429,\n  RequestHeaderFieldsTooLarge: 431,\n  UnavailableForLegalReasons: 451,\n  InternalServerError: 500,\n  NotImplemented: 501,\n  BadGateway: 502,\n  ServiceUnavailable: 503,\n  GatewayTimeout: 504,\n  HttpVersionNotSupported: 505,\n  VariantAlsoNegotiates: 506,\n  InsufficientStorage: 507,\n  LoopDetected: 508,\n  NotExtended: 510,\n  NetworkAuthenticationRequired: 511\n};\nObject.entries(HttpStatusCode).forEach(([key, value]) => {\n  HttpStatusCode[value] = key;\n});\n/* harmony default export */ const helpers_HttpStatusCode = (HttpStatusCode);\n;// CONCATENATED MODULE: ./node_modules/axios/lib/axios.js\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/**\n * Create an instance of Axios\n *\n * @param {Object} defaultConfig The default config for the instance\n *\n * @returns {Axios} A new instance of Axios\n */\nfunction createInstance(defaultConfig) {\n  const context = new core_Axios(defaultConfig);\n  const instance = bind(core_Axios.prototype.request, context);\n\n  // Copy axios.prototype to instance\n  utils.extend(instance, core_Axios.prototype, context, {\n    allOwnKeys: true\n  });\n\n  // Copy context to instance\n  utils.extend(instance, context, null, {\n    allOwnKeys: true\n  });\n\n  // Factory for creating new instances\n  instance.create = function create(instanceConfig) {\n    return createInstance(mergeConfig(defaultConfig, instanceConfig));\n  };\n  return instance;\n}\n\n// Create the default instance to be exported\nconst axios = createInstance(lib_defaults);\n\n// Expose Axios class to allow class inheritance\naxios.Axios = core_Axios;\n\n// Expose Cancel & CancelToken\naxios.CanceledError = cancel_CanceledError;\naxios.CancelToken = cancel_CancelToken;\naxios.isCancel = isCancel;\naxios.VERSION = VERSION;\naxios.toFormData = helpers_toFormData;\n\n// Expose AxiosError class\naxios.AxiosError = core_AxiosError;\n\n// alias for CanceledError for backward compatibility\naxios.Cancel = axios.CanceledError;\n\n// Expose all/spread\naxios.all = function all(promises) {\n  return Promise.all(promises);\n};\naxios.spread = spread;\n\n// Expose isAxiosError\naxios.isAxiosError = isAxiosError;\n\n// Expose mergeConfig\naxios.mergeConfig = mergeConfig;\naxios.AxiosHeaders = core_AxiosHeaders;\naxios.formToJSON = thing => helpers_formDataToJSON(utils.isHTMLForm(thing) ? new FormData(thing) : thing);\naxios.getAdapter = adapters.getAdapter;\naxios.HttpStatusCode = helpers_HttpStatusCode;\naxios.default = axios;\n\n// this module should only have a default export\n/* harmony default export */ const lib_axios = (axios);\n;// CONCATENATED MODULE: ./src/config/initValues.ts\nconst RecipeInit = {\n  id: 0,\n  title: \'...\',\n  image: \'\',\n  preparationMinutes: 0,\n  cookingMinutes: 0,\n  readyInMinutes: 0,\n  servings: 0,\n  summary: \'...\',\n  aggregateLikes: 0,\n  extendedIngredients: [],\n  analyzedInstructions: [{\n    steps: []\n  }]\n};\nconst NotStartedStatus = {\n  statusName: \'NOT_STARTED\',\n  statusMessage: \'загрузка данных не началась\'\n};\nconst LoadingStatus = {\n  statusName: \'LOADING\',\n  statusMessage: \'\'\n};\nconst SuccessfulStatus = {\n  statusName: \'SUCCESS\',\n  statusMessage: \'\'\n};\nconst errorStatus = errorMes => ({\n  statusName: \'ERROR\',\n  statusMessage: errorMes\n});\n;// CONCATENATED MODULE: ./src/config/api.ts\nconst apiKey = \'40532b3e701c465bb20134983ac0f837\';\n// 66e4df47862c4978bfafa99ce991e16d\n// 40532b3e701c465bb20134983ac0f837\nconst pageElementCount = 9;\nconst urlPrefix = \'https://api.spoonacular.com/\';\nconst imagePrefix = \'https://img.spoonacular.com/\';\nconst mealTypes = [\'main course\', \'side dish\', \'dessert\', \'appetizer\', \'salad\', \'bread\', \'breakfast\', \'soup\', \'beverage\', \'sauce\', \'marinade\', \'fingerfood\', \'snack\', \'drink\'];\nconst cuisineList = [\'African\', \'Asian\', \'American\', \'British\', \'Cajun\', \'Caribbean\', \'Chinese\', \'Eastern European\', \'European\', \'French\', \'German\', \'Greek\', \'Indian\', \'Irish\', \'Italian\', \'Japanese\', \'Jewish\', \'Korean\', \'Latin American\', \'Mediterranean\', \'Mexican\', \'Middle Eastern\', \'Nordic\', \'Sothern\', \'Spanish\', \'Thai\', \'Vietnamese\'];\nconst dietList = [\'Gluten Free\', \'Ketogenic\', \'Vegetarian\', \'Lacto-Vegetarian\', \'Ovo-Vegetarian\', \'Vegan\', \'Pescetarian\', \'Paleo\', \'Primal\', \'Low FODMAP\', \'Whole30\'];\nconst intoleranceList = [\'Dairy\', \'Egg\', \'Gluten\', \'Grain\', \'Peanut\', \'Seafood\', \'Sesame\', \'Shellfish\', \'Soy\', \'Sulfite\', \'Tree Nut\', \'Wheat\'];\nconst sortList = [\'meta-score\', \'popularity\', \'healthiness\', \'price\', \'time\', \'random\', \'max-used-ingredients\', \'min-missing-ingredients\', \'alcohol\', \'caffeine\', \'copper\', \'energy\', \'calories\', \'calcium\', \'carbohydrates\', \'carbs\', \'choline\', \'cholesterol\', \'total-fat\', \'fluoride\', \'trans-fat\', \'saturated-fat\', \'mono-unsaturated-fat\', \'poly-unsaturated-fat\', \'fiber\', \'folate\', \'folic-acid\', \'iodine\', \'iron\', \'magnesium\', \'manganese\', \'vitamin-b3\', \'niacin\', \'vitamin-b5\', \'pantothenic-acid\', \'phosphorus\', \'potassium\', \'protein\', \'vitamin-b2\', \'riboflavin\', \'selenium\', \'sodium\', \'vitamin-b1\', \'thiamin\', \'vitamin-a\', \'vitamin-b6\', \'vitamin-b12\', \'vitamin-c\', \'vitamin-d\', \'vitamin-e\', \'vitamin-k\', \'sugar\', \'zinc\'];\nconst sortDirectionList = [\'asc\', \'desc\'];\nconst stringFilters = (/* unused pure expression or super */ null && ([\'author\', \'tags\', \'titleMatch\', \'equipment\']));\nconst booleanFilters = (/* unused pure expression or super */ null && ([\'ignorePantry\']));\nconst minMaxFilters = [\'Servings\', \'Carbs\', \'Protein\', \'Calories\', \'Fat\', \'Alcohol\', \'Caffeine\', \'Copper\', \'Calcium\', \'Choline\', \'Cholesterol\', \'Fluoride\', \'SaturatedFat\', \'VitaminA\', \'VitaminC\', \'VitaminD\', \'VitaminE\', \'VitaminK\', \'VitaminB1\', \'VitaminB2\', \'VitaminB5\', \'VitaminB3\', \'VitaminB6\', \'VitaminB12\', \'Fiber\', \'Folate\', \'FolicAcid\', \'Iodine\', \'Iron\', \'Magnesium\', \'Manganese\', \'Phosphorus\', \'Potassium\', \'Selenium\', \'Sodium\', \'Sugar\', \'Zinc\'];\nconst numberFilters = (/* unused pure expression or super */ null && ([\'maxReadyTime\']));\nconst mealTypesOptions = mealTypes.map((type, index) => ({\n  key: index.toString(),\n  value: type\n}));\nconst cuisineTypesOptions = cuisineList.map((type, index) => ({\n  key: index.toString(),\n  value: type.toLowerCase()\n}));\nconst dietTypesOptions = dietList.map((type, index) => ({\n  key: index.toString(),\n  value: type.toLowerCase()\n}));\nconst intoleranceTypesOptions = intoleranceList.map((type, index) => ({\n  key: index.toString(),\n  value: type.toLowerCase()\n}));\nconst minMaxTypesOptions = minMaxFilters.map((type, index) => ({\n  key: index.toString(),\n  value: type\n}));\nconst sortTypesOptions = sortList.map((type, index) => ({\n  key: index.toString(),\n  value: type\n}));\nconst sortdirectTypesOptions = sortDirectionList.map((type, index) => ({\n  key: index.toString(),\n  value: type\n}));\nconst publicTemplates = [{\n  key: \'37\',\n  value: "Busy Work Week"\n}, {\n  key: \'480\',\n  value: "Keto Meal Plan"\n}, {\n  key: \'120\',\n  value: "Not-So-Strict Paleo Meal Plan"\n}, {\n  key: \'451\',\n  value: "Week 1 Meal Plan"\n}, {\n  key: \'581\',\n  value: "Whole30 Meal Plan"\n}];\nconst ingredientFilters = {\n  sort: {\n    type: \'OPTION\',\n    placeholder: \'sort\',\n    options: sortTypesOptions,\n    selectMode: \'ONE\'\n  },\n  sortDirection: {\n    type: \'OPTION\',\n    placeholder: \'sort direction\',\n    options: sortdirectTypesOptions,\n    selectMode: \'ONE\'\n  },\n  language: {\n    type: \'STRING\',\n    placeholder: \'en or de\'\n  }\n};\nconst recipesFilters = {\n  cuisine: {\n    type: \'OPTION\',\n    placeholder: \'cuisine\',\n    options: cuisineTypesOptions\n  },\n  excludeCuisine: {\n    type: \'OPTION\',\n    placeholder: \'excludeCuisine\',\n    options: cuisineTypesOptions\n  },\n  diet: {\n    type: \'OPTION\',\n    placeholder: \'diet\',\n    options: dietTypesOptions\n  },\n  intolerances: {\n    type: \'OPTION\',\n    placeholder: \'intolerances\',\n    options: intoleranceTypesOptions\n  },\n  equipment: {\n    type: \'STRING\',\n    placeholder: \'equipment\'\n  },\n  includeIngredients: {\n    type: \'STRING\',\n    placeholder: \'tomato,cheese\'\n  },\n  excludeIngredients: {\n    type: \'STRING\',\n    placeholder: \'eggs,tomato\'\n  },\n  author: {\n    type: \'STRING\',\n    placeholder: \'author\'\n  },\n  tags: {\n    type: \'STRING\',\n    placeholder: \'tag1,tag2,...\'\n  },\n  titlteMatch: {\n    type: \'STRING\',\n    placeholder: \'Title\'\n  },\n  maxReadyTime: {\n    type: \'NUMBER\',\n    placeholder: \'max ready time\'\n  },\n  ignorePantry: {\n    type: \'BOOLEAN\',\n    placeholder: \'...\'\n  },\n  other: {\n    type: \'MINMAX\',\n    minMaxValues: minMaxTypesOptions\n  },\n  sort: {\n    type: \'OPTION\',\n    placeholder: \'sort\',\n    options: sortTypesOptions,\n    selectMode: \'ONE\'\n  },\n  sortDirection: {\n    type: \'OPTION\',\n    placeholder: \'sort direction\',\n    options: sortdirectTypesOptions,\n    selectMode: \'ONE\'\n  }\n};\n;// CONCATENATED MODULE: ./src/store/UserStore/UserStore.tsx\n\n\n\n\nconst initUser = {\n  username: \'\',\n  firstName: \'\',\n  lastName: \'\',\n  email: \'\',\n  spoonacularPassword: \'\',\n  hash: \'\'\n};\nclass UserStore {\n  _user = initUser;\n  _userStatus = \'none\';\n  _status = NotStartedStatus;\n  constructor() {\n    makeObservable(this, {\n      _user: mobx_esm_observable.ref,\n      _userStatus: mobx_esm_observable,\n      _status: mobx_esm_observable.ref,\n      setStatus: action.bound,\n      setUserData: action.bound,\n      deleteUserData: action.bound,\n      login: action.bound,\n      getCookies: action.bound,\n      logout: action.bound,\n      user: computed,\n      status: computed,\n      userStatus: computed\n    });\n  }\n  setCookie(key, value, months = 3) {\n    const cookieKey = encodeURIComponent(key);\n    const cookieValue = encodeURIComponent(value);\n    const cookieData = [cookieKey, cookieValue].join(\'=\');\n    let date = new Date();\n    date.setMonth(date.getMonth() + months);\n    const cookieExpires = [\'expires\', date.toUTCString()].join(\'=\');\n    document.cookie = [cookieData, cookieExpires, \'secure\', \'samesite=lax\'].join(\'; \');\n  }\n  deleteCookie(key) {\n    this.setCookie(key, \'\', 0);\n  }\n  parseCookie() {\n    const cookieObj = {};\n    document.cookie.split(\'; \').forEach(cookie => {\n      const cookiePair = cookie.split(\'=\').map(pairUnit => decodeURIComponent(pairUnit));\n      Object.assign(cookieObj, {\n        [cookiePair[0]]: cookiePair[1]\n      });\n    });\n    return cookieObj;\n  }\n  getCookieProperty(cookieObj, name) {\n    return cookieObj[name] || \'\';\n  }\n  setUserData(user) {\n    Object.entries(user).forEach(([key, value]) => {\n      this.setCookie(\'_\' + key, value);\n    });\n    this._user = {\n      ...user\n    };\n    this._userStatus = \'auth\';\n  }\n  deleteUserData() {\n    Object.keys(this._user).forEach(key => {\n      this.deleteCookie(\'_\' + key);\n    });\n    this._userStatus = \'none\';\n    this._user = initUser;\n    this.setStatus(NotStartedStatus);\n  }\n  setStatus(newStatus) {\n    this._status = {\n      ...newStatus\n    };\n  }\n  login(user) {\n    this._user = initUser;\n    this._userStatus = \'none\';\n    this.setStatus(LoadingStatus);\n    lib_axios.post(urlPrefix + \'users/connect?apiKey=\' + apiKey, {\n      ...user\n    }).then(resp => {\n      const {\n        status,\n        ...userResp\n      } = resp.data;\n      if (status === \'success\') {\n        this.setStatus(SuccessfulStatus);\n        const userResponse = userResp;\n        this.setUserData({\n          ...user,\n          ...userResponse\n        });\n        this._user = {\n          ...this._user\n        };\n        this._userStatus = this._userStatus;\n      } else {\n        this.setStatus(errorStatus(resp.data[\'message\']));\n      }\n    }).catch(err => {\n      this.setStatus(errorStatus(err.message));\n      this._user = {\n        ...this._user\n      };\n      this._userStatus = this._userStatus;\n    });\n    this._user = {\n      ...this._user\n    };\n    this._userStatus = this._userStatus;\n  }\n  getCookies() {\n    this._userStatus = \'none\';\n    const cookieObj = this.parseCookie();\n    Object.keys(this._user).forEach(key => {\n      this._user[key] = this.getCookieProperty(cookieObj, \'_\' + key);\n    });\n    if (this._user.hash !== \'\') {\n      this._userStatus = \'auth\';\n    }\n  }\n  logout() {\n    this.deleteUserData();\n  }\n  get user() {\n    return this._user;\n  }\n  get status() {\n    return this._status;\n  }\n  get userStatus() {\n    return this._userStatus;\n  }\n  destroy() {\n    this._user = initUser;\n    this._userStatus = \'none\';\n    this._status = NotStartedStatus;\n  }\n}\n/* harmony default export */ const UserStore_UserStore = (new UserStore());\n;// CONCATENATED MODULE: ./src/store/UserStore/index.ts\n\n;// CONCATENATED MODULE: ./src/config/paths.tsx\nconst paths = [{\n  name: \'Recipes\',\n  url: \'/recipes\',\n  authRequired: false\n}, {\n  name: \'Ingredients\',\n  url: \'/ingredients\',\n  authRequired: false\n}, {\n  name: \'Products\',\n  url: \'/products\',\n  authRequired: false\n}, {\n  name: \'Menu Items\',\n  url: \'/menuItems\',\n  authRequired: false\n}, {\n  name: \'Meal planning\',\n  url: \'/planning\',\n  authRequired: true\n}];\n/* harmony default export */ const config_paths = (paths);\n// EXTERNAL MODULE: ./node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[0].use[1]!./node_modules/postcss-loader/dist/cjs.js??ruleSet[1].rules[0].use[2]!./node_modules/sass-loader/dist/cjs.js!./src/components/Header/components/Menu/Menu.module.scss\nvar Menu_module = __webpack_require__(5725);\n;// CONCATENATED MODULE: ./src/components/Header/components/Menu/Menu.module.scss\n\n      \n      \n      \n      \n      \n      \n      \n      \n      \n\nvar Menu_module_options = {};\n\nMenu_module_options.styleTagTransform = (styleTagTransform_default());\nMenu_module_options.setAttributes = (setAttributesWithoutAttributes_default());\nMenu_module_options.insert = insertBySelector_default().bind(null, "head");\nMenu_module_options.domAPI = (styleDomAPI_default());\nMenu_module_options.insertStyleElement = (insertStyleElement_default());\n\nvar Menu_module_update = injectStylesIntoStyleTag_default()(Menu_module/* default */.A, Menu_module_options);\n\n\n\n\n       /* harmony default export */ const Menu_Menu_module = (Menu_module/* default */.A && Menu_module/* default */.A.locals ? Menu_module/* default */.A.locals : undefined);\n\n;// CONCATENATED MODULE: ./src/components/Header/components/Menu/Menu.tsx\n\n\n\n\n\n\n\n\nconst Menu = () => {\n  const navigate = dist_useNavigate();\n  const location = dist_useLocation();\n  const [selectedUrl, setUrl] = (0,react.useState)(0);\n  const {\n    userStatus\n  } = UserStore_UserStore;\n  (0,react.useEffect)(() => {\n    const index = config_paths.map(path => path.url).indexOf(location.pathname);\n    setUrl(index);\n  }, [location.pathname]);\n  const goToPath = (index, url, authRequired = false) => {\n    if (!authRequired || userStatus === \'auth\') {\n      setUrl(index);\n      navigate(url);\n    } else {\n      navigate(\'/login\');\n    }\n  };\n  return /*#__PURE__*/react.createElement("div", {\n    className: Menu_Menu_module["menu"]\n  }, config_paths.map((path, index) => {\n    const handleClick = () => {\n      goToPath(index, path.url, path.authRequired);\n    };\n    return /*#__PURE__*/react.createElement(Text_Text, {\n      key: path.name,\n      className: classnames_default()({\n        [Menu_Menu_module[\'menu__option\']]: true,\n        [Menu_Menu_module[\'menu__option_selected\']]: selectedUrl === index\n      }),\n      view: "p-16",\n      tag: "div",\n      onCLick: handleClick\n    }, path.name);\n  }));\n};\n/* harmony default export */ const Menu_Menu = (Menu);\n;// CONCATENATED MODULE: ./src/components/Header/components/Menu/index.ts\n\n;// CONCATENATED MODULE: ./src/components/icons/HeartIcon/HeartIcon.tsx\n\n\n\nconst HeartIcon = props => {\n  return /*#__PURE__*/react.createElement(Icon_Icon, extends_extends({}, props, {\n    width: "19",\n    height: "19",\n    viewBox: "0 0 19 19"\n  }), /*#__PURE__*/react.createElement("path", {\n    fillRule: "evenodd",\n    clipRule: "evenodd",\n    d: "M9.50001 3.09586C7.80057 0.863387 4.96079 0.173456 2.8315 2.21773C0.702197 4.26201 0.402421 7.67991 2.07457 10.0977C3.46485 12.1079 7.67232 16.3476 9.0513 17.7199C9.20553 17.8734 9.28269 17.9502 9.3727 17.9803C9.45118 18.0066 9.53712 18.0066 9.6157 17.9803C9.70571 17.9502 9.78277 17.8734 9.9371 17.7199C11.3161 16.3476 15.5235 12.1079 16.9138 10.0977C18.586 7.67991 18.3227 4.2405 16.1568 2.21773C13.9909 0.19496 11.1994 0.863387 9.50001 3.09586Z",\n    stroke: "#B5460F",\n    strokeWidth: "2",\n    strokeLinecap: "round",\n    strokeLinejoin: "round"\n  }));\n};\n/* harmony default export */ const HeartIcon_HeartIcon = (HeartIcon);\n;// CONCATENATED MODULE: ./src/components/icons/HeartIcon/index.ts\n\n;// CONCATENATED MODULE: ./src/components/icons/UserIcon/UserIcon.tsx\n\n\nconst UserIcon = props => {\n  return /*#__PURE__*/react.createElement(Icon_Icon, props, /*#__PURE__*/react.createElement("g", {\n    clipPath: "url(#clip0_505_651)"\n  }, /*#__PURE__*/react.createElement("path", {\n    fillRule: "evenodd",\n    clipRule: "evenodd",\n    d: "M12 13C14.3955 13 16.5753 13.6937 18.1777 14.6715C18.9786 15.1602 19.6621 15.7363 20.156 16.3615C20.642 16.9767 21 17.713 21 18.5C21 19.3449 20.5889 20.0111 19.9973 20.4859C19.4368 20.9359 18.6982 21.2336 17.9128 21.4416C16.3353 21.8593 14.229 22 12 22C9.77101 22 7.66466 21.8593 6.08716 21.4416C5.30182 21.2336 4.56324 20.9359 4.00266 20.4859C3.41114 20.0111 3 19.3449 3 18.5C3 17.713 3.35805 16.9767 3.84397 16.3615C4.33788 15.7363 5.02143 15.1602 5.82227 14.6715C7.42467 13.6937 9.60453 13 12 13ZM12 15C9.97719 15 8.15705 15.5898 6.86402 16.3788C6.21714 16.7735 5.72913 17.2015 5.41339 17.6013C5.08967 18.0111 5 18.3206 5 18.5C5 18.6216 5.03657 18.7512 5.2547 18.9263C5.50376 19.1262 5.93676 19.3328 6.59914 19.5082C7.91706 19.8572 9.81071 20 12 20C14.1893 20 16.0829 19.8572 17.4009 19.5082C18.0632 19.3328 18.4962 19.1262 18.7453 18.9263C18.9634 18.7512 19 18.6216 19 18.5C19 18.3206 18.9103 18.0111 18.5866 17.6013C18.2709 17.2015 17.7829 16.7735 17.136 16.3788C15.8429 15.5898 14.0228 15 12 15ZM12 2C14.7614 2 17 4.23858 17 7C17 9.76142 14.7614 12 12 12C9.23858 12 7 9.76142 7 7C7 4.23858 9.23858 2 12 2ZM12 4C10.3431 4 9 5.34315 9 7C9 8.65685 10.3431 10 12 10C13.6569 10 15 8.65685 15 7C15 5.34315 13.6569 4 12 4Z",\n    fill: "#B5460F"\n  })), /*#__PURE__*/react.createElement("defs", null, /*#__PURE__*/react.createElement("clipPath", {\n    id: "clip0_505_651"\n  }, /*#__PURE__*/react.createElement("rect", {\n    width: "24",\n    height: "24",\n    fill: "white"\n  }))));\n};\n/* harmony default export */ const UserIcon_UserIcon = (UserIcon);\n;// CONCATENATED MODULE: ./src/components/icons/UserIcon/index.ts\n\n// EXTERNAL MODULE: ./node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[0].use[1]!./node_modules/postcss-loader/dist/cjs.js??ruleSet[1].rules[0].use[2]!./node_modules/sass-loader/dist/cjs.js!./src/components/Header/components/RightBlock/RightBlock.module.scss\nvar RightBlock_module = __webpack_require__(1293);\n;// CONCATENATED MODULE: ./src/components/Header/components/RightBlock/RightBlock.module.scss\n\n      \n      \n      \n      \n      \n      \n      \n      \n      \n\nvar RightBlock_module_options = {};\n\nRightBlock_module_options.styleTagTransform = (styleTagTransform_default());\nRightBlock_module_options.setAttributes = (setAttributesWithoutAttributes_default());\nRightBlock_module_options.insert = insertBySelector_default().bind(null, "head");\nRightBlock_module_options.domAPI = (styleDomAPI_default());\nRightBlock_module_options.insertStyleElement = (insertStyleElement_default());\n\nvar RightBlock_module_update = injectStylesIntoStyleTag_default()(RightBlock_module/* default */.A, RightBlock_module_options);\n\n\n\n\n       /* harmony default export */ const RightBlock_RightBlock_module = (RightBlock_module/* default */.A && RightBlock_module/* default */.A.locals ? RightBlock_module/* default */.A.locals : undefined);\n\n;// CONCATENATED MODULE: ./src/components/Header/components/RightBlock/RightBlock.tsx\n\n\n\n\n\n\n\nconst RightBlock = () => {\n  const navigate = dist_useNavigate();\n  const {\n    userStatus\n  } = UserStore_UserStore;\n  const goToSaved = (0,react.useCallback)(() => {\n    navigate(\'/saved\');\n  }, [navigate]);\n  const goToProfile = (0,react.useCallback)(() => {\n    if (userStatus === \'auth\') {\n      navigate(\'/user\');\n    } else {\n      navigate(\'/login\');\n    }\n  }, [navigate]);\n  return /*#__PURE__*/react.createElement("div", {\n    className: RightBlock_RightBlock_module["right-block"]\n  }, /*#__PURE__*/react.createElement(HeartIcon_HeartIcon, {\n    onClick: goToSaved\n  }), /*#__PURE__*/react.createElement(UserIcon_UserIcon, {\n    onClick: goToProfile\n  }));\n};\n/* harmony default export */ const RightBlock_RightBlock = (/*#__PURE__*/(0,react.memo)(RightBlock));\n;// CONCATENATED MODULE: ./src/components/Header/components/RightBlock/index.ts\n\n// EXTERNAL MODULE: ./node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[0].use[1]!./node_modules/postcss-loader/dist/cjs.js??ruleSet[1].rules[0].use[2]!./node_modules/sass-loader/dist/cjs.js!./src/components/Header/Header.module.scss\nvar Header_module = __webpack_require__(86);\n;// CONCATENATED MODULE: ./src/components/Header/Header.module.scss\n\n      \n      \n      \n      \n      \n      \n      \n      \n      \n\nvar Header_module_options = {};\n\nHeader_module_options.styleTagTransform = (styleTagTransform_default());\nHeader_module_options.setAttributes = (setAttributesWithoutAttributes_default());\nHeader_module_options.insert = insertBySelector_default().bind(null, "head");\nHeader_module_options.domAPI = (styleDomAPI_default());\nHeader_module_options.insertStyleElement = (insertStyleElement_default());\n\nvar Header_module_update = injectStylesIntoStyleTag_default()(Header_module/* default */.A, Header_module_options);\n\n\n\n\n       /* harmony default export */ const Header_Header_module = (Header_module/* default */.A && Header_module/* default */.A.locals ? Header_module/* default */.A.locals : undefined);\n\n;// CONCATENATED MODULE: ./src/components/Header/Header.tsx\n\n\n\n\n\nconst Header = () => {\n  return /*#__PURE__*/react.createElement("nav", {\n    className: Header_Header_module["header"]\n  }, /*#__PURE__*/react.createElement("div", {\n    className: Header_Header_module["header__left"]\n  }, /*#__PURE__*/react.createElement(LogoBlock_LogoBlock, null), /*#__PURE__*/react.createElement(Menu_Menu, null)), /*#__PURE__*/react.createElement("div", {\n    className: Header_Header_module["header__right"]\n  }, /*#__PURE__*/react.createElement(RightBlock_RightBlock, null)));\n};\n/* harmony default export */ const Header_Header = (Header);\n;// CONCATENATED MODULE: ./src/components/Header/index.ts\n\n// EXTERNAL MODULE: ./node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[0].use[1]!./node_modules/postcss-loader/dist/cjs.js??ruleSet[1].rules[0].use[2]!./node_modules/sass-loader/dist/cjs.js!./src/components/Main/Main.module.scss\nvar Main_module = __webpack_require__(7374);\n;// CONCATENATED MODULE: ./src/components/Main/Main.module.scss\n\n      \n      \n      \n      \n      \n      \n      \n      \n      \n\nvar Main_module_options = {};\n\nMain_module_options.styleTagTransform = (styleTagTransform_default());\nMain_module_options.setAttributes = (setAttributesWithoutAttributes_default());\nMain_module_options.insert = insertBySelector_default().bind(null, "head");\nMain_module_options.domAPI = (styleDomAPI_default());\nMain_module_options.insertStyleElement = (insertStyleElement_default());\n\nvar Main_module_update = injectStylesIntoStyleTag_default()(Main_module/* default */.A, Main_module_options);\n\n\n\n\n       /* harmony default export */ const Main_Main_module = (Main_module/* default */.A && Main_module/* default */.A.locals ? Main_module/* default */.A.locals : undefined);\n\n;// CONCATENATED MODULE: ./src/components/Main/Main.tsx\n\n\n\n\nconst Main = () => {\n  return /*#__PURE__*/react.createElement("div", {\n    className: Main_Main_module.main\n  }, /*#__PURE__*/react.createElement(Header_Header, null), /*#__PURE__*/react.createElement(Outlet, null));\n};\n/* harmony default export */ const Main_Main = (Main);\n;// CONCATENATED MODULE: ./src/components/Main/index.ts\n\n;// CONCATENATED MODULE: ./node_modules/mobx-react-lite/es/utils/assertEnvironment.js\n\n\nif (!react.useState) {\n  throw new Error("mobx-react-lite requires React with Hooks support");\n}\nif (!makeObservable) {\n  throw new Error("mobx-react-lite@3 requires mobx at least version 6 to be available");\n}\n;// CONCATENATED MODULE: ./node_modules/mobx-react-lite/es/utils/reactBatchedUpdates.js\n\n;// CONCATENATED MODULE: ./node_modules/mobx-react-lite/es/utils/observerBatching.js\n\nfunction defaultNoopBatch(callback) {\n  callback();\n}\nfunction observerBatching(reactionScheduler) {\n  if (!reactionScheduler) {\n    reactionScheduler = defaultNoopBatch;\n    if (false) {}\n  }\n  configure({\n    reactionScheduler: reactionScheduler\n  });\n}\nvar isObserverBatched = function () {\n  if (false) {}\n  return true;\n};\n;// CONCATENATED MODULE: ./node_modules/mobx-react-lite/es/utils/printDebugValue.js\n\nfunction printDebugValue(v) {\n  return getDependencyTree(v);\n}\n;// CONCATENATED MODULE: ./node_modules/mobx-react-lite/es/staticRendering.js\nvar globalIsUsingStaticRendering = false;\nfunction staticRendering_enableStaticRendering(enable) {\n  globalIsUsingStaticRendering = enable;\n}\nfunction isUsingStaticRendering() {\n  return globalIsUsingStaticRendering;\n}\n;// CONCATENATED MODULE: ./node_modules/mobx-react-lite/es/utils/UniversalFinalizationRegistry.js\nvar REGISTRY_FINALIZE_AFTER = 10000;\nvar REGISTRY_SWEEP_INTERVAL = 10000;\nvar TimerBasedFinalizationRegistry = /** @class */function () {\n  function TimerBasedFinalizationRegistry(finalize) {\n    var _this = this;\n    Object.defineProperty(this, "finalize", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: finalize\n    });\n    Object.defineProperty(this, "registrations", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: new Map()\n    });\n    Object.defineProperty(this, "sweepTimeout", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    // Bound so it can be used directly as setTimeout callback.\n    Object.defineProperty(this, "sweep", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: function (maxAge) {\n        if (maxAge === void 0) {\n          maxAge = REGISTRY_FINALIZE_AFTER;\n        }\n        // cancel timeout so we can force sweep anytime\n        clearTimeout(_this.sweepTimeout);\n        _this.sweepTimeout = undefined;\n        var now = Date.now();\n        _this.registrations.forEach(function (registration, token) {\n          if (now - registration.registeredAt >= maxAge) {\n            _this.finalize(registration.value);\n            _this.registrations.delete(token);\n          }\n        });\n        if (_this.registrations.size > 0) {\n          _this.scheduleSweep();\n        }\n      }\n    });\n    // Bound so it can be exported directly as clearTimers test utility.\n    Object.defineProperty(this, "finalizeAllImmediately", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: function () {\n        _this.sweep(0);\n      }\n    });\n  }\n  // Token is actually required with this impl\n  Object.defineProperty(TimerBasedFinalizationRegistry.prototype, "register", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (target, value, token) {\n      this.registrations.set(token, {\n        value: value,\n        registeredAt: Date.now()\n      });\n      this.scheduleSweep();\n    }\n  });\n  Object.defineProperty(TimerBasedFinalizationRegistry.prototype, "unregister", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (token) {\n      this.registrations.delete(token);\n    }\n  });\n  Object.defineProperty(TimerBasedFinalizationRegistry.prototype, "scheduleSweep", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      if (this.sweepTimeout === undefined) {\n        this.sweepTimeout = setTimeout(this.sweep, REGISTRY_SWEEP_INTERVAL);\n      }\n    }\n  });\n  return TimerBasedFinalizationRegistry;\n}();\n\nvar UniversalFinalizationRegistry = typeof FinalizationRegistry !== "undefined" ? FinalizationRegistry : TimerBasedFinalizationRegistry;\n;// CONCATENATED MODULE: ./node_modules/mobx-react-lite/es/utils/observerFinalizationRegistry.js\n\nvar observerFinalizationRegistry = new UniversalFinalizationRegistry(function (adm) {\n  var _a;\n  (_a = adm.reaction) === null || _a === void 0 ? void 0 : _a.dispose();\n  adm.reaction = null;\n});\n// EXTERNAL MODULE: ./node_modules/use-sync-external-store/shim/index.js\nvar shim = __webpack_require__(1673);\n;// CONCATENATED MODULE: ./node_modules/mobx-react-lite/es/useObserver.js\n\n\n\n\n\n\nfunction createReaction(adm) {\n  adm.reaction = new Reaction("observer".concat(adm.name), function () {\n    var _a;\n    adm.stateVersion = Symbol();\n    // onStoreChange won\'t be available until the component "mounts".\n    // If state changes in between initial render and mount,\n    // `useSyncExternalStore` should handle that by checking the state version and issuing update.\n    (_a = adm.onStoreChange) === null || _a === void 0 ? void 0 : _a.call(adm);\n  });\n}\nfunction useObserver(render, baseComponentName) {\n  if (baseComponentName === void 0) {\n    baseComponentName = "observed";\n  }\n  if (isUsingStaticRendering()) {\n    return render();\n  }\n  var admRef = react.useRef(null);\n  if (!admRef.current) {\n    // First render\n    var adm_1 = {\n      reaction: null,\n      onStoreChange: null,\n      stateVersion: Symbol(),\n      name: baseComponentName,\n      subscribe: function (onStoreChange) {\n        // Do NOT access admRef here!\n        observerFinalizationRegistry.unregister(adm_1);\n        adm_1.onStoreChange = onStoreChange;\n        if (!adm_1.reaction) {\n          // We\'ve lost our reaction and therefore all subscriptions, occurs when:\n          // 1. Timer based finalization registry disposed reaction before component mounted.\n          // 2. React "re-mounts" same component without calling render in between (typically <StrictMode>).\n          // We have to recreate reaction and schedule re-render to recreate subscriptions,\n          // even if state did not change.\n          createReaction(adm_1);\n          // `onStoreChange` won\'t force update if subsequent `getSnapshot` returns same value.\n          // So we make sure that is not the case\n          adm_1.stateVersion = Symbol();\n        }\n        return function () {\n          var _a;\n          // Do NOT access admRef here!\n          adm_1.onStoreChange = null;\n          (_a = adm_1.reaction) === null || _a === void 0 ? void 0 : _a.dispose();\n          adm_1.reaction = null;\n        };\n      },\n      getSnapshot: function () {\n        // Do NOT access admRef here!\n        return adm_1.stateVersion;\n      }\n    };\n    admRef.current = adm_1;\n  }\n  var adm = admRef.current;\n  if (!adm.reaction) {\n    // First render or reaction was disposed by registry before subscribe\n    createReaction(adm);\n    // StrictMode/ConcurrentMode/Suspense may mean that our component is\n    // rendered and abandoned multiple times, so we need to track leaked\n    // Reactions.\n    observerFinalizationRegistry.register(admRef, adm, adm);\n  }\n  react.useDebugValue(adm.reaction, printDebugValue);\n  (0,shim.useSyncExternalStore)(\n  // Both of these must be stable, otherwise it would keep resubscribing every render.\n  adm.subscribe, adm.getSnapshot, adm.getSnapshot);\n  // render the original component, but have the\n  // reaction track the observables, so that rendering\n  // can be invalidated (see above) once a dependency changes\n  var renderResult;\n  var exception;\n  adm.reaction.track(function () {\n    try {\n      renderResult = render();\n    } catch (e) {\n      exception = e;\n    }\n  });\n  if (exception) {\n    throw exception; // re-throw any exceptions caught during rendering\n  }\n  return renderResult;\n}\n;// CONCATENATED MODULE: ./node_modules/mobx-react-lite/es/observer.js\nvar _a, _b;\n\n\n\nvar warnObserverOptionsDeprecated = true;\nvar hasSymbol = typeof Symbol === "function" && Symbol.for;\nvar observer_isFunctionNameConfigurable = (_b = (_a = Object.getOwnPropertyDescriptor(function () {}, "name")) === null || _a === void 0 ? void 0 : _a.configurable) !== null && _b !== void 0 ? _b : false;\n// Using react-is had some issues (and operates on elements, not on types), see #608 / #609\nvar ReactForwardRefSymbol = hasSymbol ? Symbol.for("react.forward_ref") : typeof react.forwardRef === "function" && /*#__PURE__*/(0,react.forwardRef)(function (props) {\n  return null;\n})["$$typeof"];\nvar ReactMemoSymbol = hasSymbol ? Symbol.for("react.memo") : typeof react.memo === "function" && /*#__PURE__*/(0,react.memo)(function (props) {\n  return null;\n})["$$typeof"];\n// n.b. base case is not used for actual typings or exported in the typing files\nfunction observer(baseComponent,\n// TODO remove in next major\noptions) {\n  var _a;\n  if (false) {}\n  if (ReactMemoSymbol && baseComponent["$$typeof"] === ReactMemoSymbol) {\n    throw new Error("[mobx-react-lite] You are trying to use `observer` on a function component wrapped in either another `observer` or `React.memo`. The observer already applies \'React.memo\' for you.");\n  }\n  // The working of observer is explained step by step in this talk: https://www.youtube.com/watch?v=cPF4iBedoF0&feature=youtu.be&t=1307\n  if (isUsingStaticRendering()) {\n    return baseComponent;\n  }\n  var useForwardRef = (_a = options === null || options === void 0 ? void 0 : options.forwardRef) !== null && _a !== void 0 ? _a : false;\n  var render = baseComponent;\n  var baseComponentName = baseComponent.displayName || baseComponent.name;\n  // If already wrapped with forwardRef, unwrap,\n  // so we can patch render and apply memo\n  if (ReactForwardRefSymbol && baseComponent["$$typeof"] === ReactForwardRefSymbol) {\n    useForwardRef = true;\n    render = baseComponent["render"];\n    if (typeof render !== "function") {\n      throw new Error("[mobx-react-lite] `render` property of ForwardRef was not a function");\n    }\n  }\n  var observerComponent = function (props, ref) {\n    return useObserver(function () {\n      return render(props, ref);\n    }, baseComponentName);\n  };\n  observerComponent.displayName = baseComponent.displayName;\n  if (observer_isFunctionNameConfigurable) {\n    Object.defineProperty(observerComponent, "name", {\n      value: baseComponent.name,\n      writable: true,\n      configurable: true\n    });\n  }\n  // Support legacy context: `contextTypes` must be applied before `memo`\n  if (baseComponent.contextTypes) {\n    ;\n    observerComponent.contextTypes = baseComponent.contextTypes;\n  }\n  if (useForwardRef) {\n    // `forwardRef` must be applied prior `memo`\n    // `forwardRef(observer(cmp))` throws:\n    // "forwardRef requires a render function but received a `memo` component. Instead of forwardRef(memo(...)), use memo(forwardRef(...))"\n    observerComponent = /*#__PURE__*/(0,react.forwardRef)(observerComponent);\n  }\n  // memo; we are not interested in deep updates\n  // in props; we assume that if deep objects are changed,\n  // this is in observables, which would have been tracked anyway\n  observerComponent = /*#__PURE__*/(0,react.memo)(observerComponent);\n  copyStaticProperties(baseComponent, observerComponent);\n  if (false) {}\n  return observerComponent;\n}\n// based on https://github.com/mridgway/hoist-non-react-statics/blob/master/src/index.js\nvar hoistBlackList = {\n  $$typeof: true,\n  render: true,\n  compare: true,\n  type: true,\n  // Don\'t redefine `displayName`,\n  // it\'s defined as getter-setter pair on `memo` (see #3192).\n  displayName: true\n};\nfunction copyStaticProperties(base, target) {\n  Object.keys(base).forEach(function (key) {\n    if (!hoistBlackList[key]) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(base, key));\n    }\n  });\n}\n;// CONCATENATED MODULE: ./node_modules/mobx-react-lite/es/ObserverComponent.js\n\nfunction ObserverComponent(_a) {\n  var children = _a.children,\n    render = _a.render;\n  var component = children || render;\n  if (typeof component !== "function") {\n    return null;\n  }\n  return useObserver(component);\n}\nif (false) {}\nObserverComponent.displayName = "Observer";\n\nfunction ObserverPropsCheck(props, key, componentName, location, propFullName) {\n  var extraKey = key === "children" ? "render" : "children";\n  var hasProp = typeof props[key] === "function";\n  var hasExtraProp = typeof props[extraKey] === "function";\n  if (hasProp && hasExtraProp) {\n    return new Error("MobX Observer: Do not use children and render in the same time in`" + componentName);\n  }\n  if (hasProp || hasExtraProp) {\n    return null;\n  }\n  return new Error("Invalid prop `" + propFullName + "` of type `" + typeof props[key] + "` supplied to" + " `" + componentName + "`, expected `function`.");\n}\n;// CONCATENATED MODULE: ./node_modules/mobx-react-lite/es/useLocalObservable.js\n\n\nfunction useLocalObservable(initializer, annotations) {\n  return useState(function () {\n    return observable(initializer(), annotations, {\n      autoBind: true\n    });\n  })[0];\n}\n;// CONCATENATED MODULE: ./node_modules/mobx-react-lite/es/useAsObservableSource.js\n\n\n\nfunction useAsObservableSource_useAsObservableSource(current) {\n  if (false) {}\n  // We\'re deliberately not using idiomatic destructuring for the hook here.\n  // Accessing the state value as an array element prevents TypeScript from generating unnecessary helpers in the resulting code.\n  // For further details, please refer to mobxjs/mobx#3842.\n  var res = useState(function () {\n    return observable(current, {}, {\n      deep: false\n    });\n  })[0];\n  runInAction(function () {\n    Object.assign(res, current);\n  });\n  return res;\n}\n;// CONCATENATED MODULE: ./node_modules/mobx-react-lite/es/useLocalStore.js\n\n\n\n\nfunction useLocalStore(initializer, current) {\n  if (false) {}\n  var source = current && useAsObservableSource(current);\n  return useState(function () {\n    return observable(initializer(source), undefined, {\n      autoBind: true\n    });\n  })[0];\n}\n;// CONCATENATED MODULE: ./node_modules/mobx-react-lite/es/index.js\nvar es_a;\n\n\n\n\n\n\n\nobserverBatching(react_dom.unstable_batchedUpdates);\n\n\n\n\n\n\n\nvar clearTimers = (es_a = observerFinalizationRegistry["finalizeAllImmediately"]) !== null && es_a !== void 0 ? es_a : function () {};\nfunction es_useObserver(fn, baseComponentName) {\n  if (baseComponentName === void 0) {\n    baseComponentName = "observed";\n  }\n  if (false) {}\n  return useObserverOriginal(fn, baseComponentName);\n}\n\nfunction useStaticRendering(enable) {\n  if (false) {}\n  enableStaticRendering(enable);\n}\n// EXTERNAL MODULE: ./node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[0].use[1]!./node_modules/postcss-loader/dist/cjs.js??ruleSet[1].rules[0].use[2]!./node_modules/sass-loader/dist/cjs.js!./src/components/Loader/Loader.module.scss\nvar Loader_module = __webpack_require__(8618);\n;// CONCATENATED MODULE: ./src/components/Loader/Loader.module.scss\n\n      \n      \n      \n      \n      \n      \n      \n      \n      \n\nvar Loader_module_options = {};\n\nLoader_module_options.styleTagTransform = (styleTagTransform_default());\nLoader_module_options.setAttributes = (setAttributesWithoutAttributes_default());\nLoader_module_options.insert = insertBySelector_default().bind(null, "head");\nLoader_module_options.domAPI = (styleDomAPI_default());\nLoader_module_options.insertStyleElement = (insertStyleElement_default());\n\nvar Loader_module_update = injectStylesIntoStyleTag_default()(Loader_module/* default */.A, Loader_module_options);\n\n\n\n\n       /* harmony default export */ const Loader_Loader_module = (Loader_module/* default */.A && Loader_module/* default */.A.locals ? Loader_module/* default */.A.locals : undefined);\n\n;// CONCATENATED MODULE: ./src/components/Loader/Loader.tsx\n\n\n\n\nconst Loader = ({\n  size = \'l\',\n  className\n}) => {\n  return /*#__PURE__*/react.createElement("div", {\n    className: classnames_default()({\n      className,\n      [Loader_Loader_module[\'loader\']]: true,\n      [Loader_Loader_module[\'loader_size_\' + size]]: true\n    })\n  });\n};\n/* harmony default export */ const Loader_Loader = (/*#__PURE__*/(0,react.memo)(Loader));\n;// CONCATENATED MODULE: ./src/components/Loader/index.ts\n\n\n// EXTERNAL MODULE: ./node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[0].use[1]!./node_modules/postcss-loader/dist/cjs.js??ruleSet[1].rules[0].use[2]!./node_modules/sass-loader/dist/cjs.js!./src/components/Button/Button.module.scss\nvar Button_module = __webpack_require__(3600);\n;// CONCATENATED MODULE: ./src/components/Button/Button.module.scss\n\n      \n      \n      \n      \n      \n      \n      \n      \n      \n\nvar Button_module_options = {};\n\nButton_module_options.styleTagTransform = (styleTagTransform_default());\nButton_module_options.setAttributes = (setAttributesWithoutAttributes_default());\nButton_module_options.insert = insertBySelector_default().bind(null, "head");\nButton_module_options.domAPI = (styleDomAPI_default());\nButton_module_options.insertStyleElement = (insertStyleElement_default());\n\nvar Button_module_update = injectStylesIntoStyleTag_default()(Button_module/* default */.A, Button_module_options);\n\n\n\n\n       /* harmony default export */ const Button_Button_module = (Button_module/* default */.A && Button_module/* default */.A.locals ? Button_module/* default */.A.locals : undefined);\n\n;// CONCATENATED MODULE: ./src/components/Button/Button.tsx\n\n\n\n\n\n\nconst Button = ({\n  loading,\n  children,\n  disabled = false,\n  className = \'\',\n  ...props\n}) => {\n  return /*#__PURE__*/react.createElement("button", extends_extends({}, props, {\n    className: classnames_default()({\n      [className]: true,\n      [Button_Button_module.button]: true,\n      [Button_Button_module[\'button_loading\']]: loading,\n      [Button_Button_module[\'button_unloading\']]: !loading,\n      [Button_Button_module[\'button_loading_disabled\']]: loading && disabled\n    }),\n    disabled: disabled || loading\n  }), loading && /*#__PURE__*/react.createElement(Loader_Loader, {\n    size: "s"\n  }), children);\n};\n/* harmony default export */ const Button_Button = (/*#__PURE__*/(0,react.memo)(Button));\n;// CONCATENATED MODULE: ./src/components/Button/index.ts\n\n\n// EXTERNAL MODULE: ./node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[0].use[1]!./node_modules/postcss-loader/dist/cjs.js??ruleSet[1].rules[0].use[2]!./node_modules/sass-loader/dist/cjs.js!./src/components/ErrorBox/ErrorBox.module.scss\nvar ErrorBox_module = __webpack_require__(4762);\n;// CONCATENATED MODULE: ./src/components/ErrorBox/ErrorBox.module.scss\n\n      \n      \n      \n      \n      \n      \n      \n      \n      \n\nvar ErrorBox_module_options = {};\n\nErrorBox_module_options.styleTagTransform = (styleTagTransform_default());\nErrorBox_module_options.setAttributes = (setAttributesWithoutAttributes_default());\nErrorBox_module_options.insert = insertBySelector_default().bind(null, "head");\nErrorBox_module_options.domAPI = (styleDomAPI_default());\nErrorBox_module_options.insertStyleElement = (insertStyleElement_default());\n\nvar ErrorBox_module_update = injectStylesIntoStyleTag_default()(ErrorBox_module/* default */.A, ErrorBox_module_options);\n\n\n\n\n       /* harmony default export */ const ErrorBox_ErrorBox_module = (ErrorBox_module/* default */.A && ErrorBox_module/* default */.A.locals ? ErrorBox_module/* default */.A.locals : undefined);\n\n;// CONCATENATED MODULE: ./src/components/ErrorBox/ErrorBox.tsx\n\n\n\n\nconst ErrorBox = props => {\n  return /*#__PURE__*/react.createElement("div", {\n    className: ErrorBox_ErrorBox_module["error-box"]\n  }, /*#__PURE__*/react.createElement(Text_Text, {\n    view: "title",\n    tag: "div"\n  }, "Error ", props.code || \'\'), /*#__PURE__*/react.createElement(Text_Text, {\n    view: "p-20",\n    tag: "div",\n    className: ErrorBox_ErrorBox_module["error-box__message"]\n  }, props.children), props.errorSlot);\n};\n/* harmony default export */ const ErrorBox_ErrorBox = (/*#__PURE__*/(0,react.memo)(ErrorBox));\n;// CONCATENATED MODULE: ./src/components/ErrorBox/index.ts\n\n// EXTERNAL MODULE: ./node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[0].use[1]!./node_modules/postcss-loader/dist/cjs.js??ruleSet[1].rules[0].use[2]!./node_modules/sass-loader/dist/cjs.js!./src/styles/customStyles.module.scss\nvar customStyles_module = __webpack_require__(7180);\n;// CONCATENATED MODULE: ./src/styles/customStyles.module.scss\n\n      \n      \n      \n      \n      \n      \n      \n      \n      \n\nvar customStyles_module_options = {};\n\ncustomStyles_module_options.styleTagTransform = (styleTagTransform_default());\ncustomStyles_module_options.setAttributes = (setAttributesWithoutAttributes_default());\ncustomStyles_module_options.insert = insertBySelector_default().bind(null, "head");\ncustomStyles_module_options.domAPI = (styleDomAPI_default());\ncustomStyles_module_options.insertStyleElement = (insertStyleElement_default());\n\nvar customStyles_module_update = injectStylesIntoStyleTag_default()(customStyles_module/* default */.A, customStyles_module_options);\n\n\n\n\n       /* harmony default export */ const styles_customStyles_module = (customStyles_module/* default */.A && customStyles_module/* default */.A.locals ? customStyles_module/* default */.A.locals : undefined);\n\n;// CONCATENATED MODULE: ./src/components/icons/ArrowLeftIcon/ArrowLeftIcon.tsx\n\n\n\n\nconst ArrowLeftIcon = props => {\n  return /*#__PURE__*/react.createElement(Icon_Icon, extends_extends({\n    style: {\n      cursor: \'pointer\'\n    }\n  }, props, {\n    viewBox: "0 0 32 32",\n    width: "32",\n    height: "32"\n  }), /*#__PURE__*/react.createElement("path", {\n    className: styles_customStyles_module[\'icon_stroke_color_\' + (props.color || \'inherit\')],\n    d: "M20.12 26.5599L11.4267 17.8666C10.4 16.8399 10.4 15.1599 11.4267 14.1333L20.12 5.43994",\n    strokeWidth: "1.5",\n    strokeMiterlimit: "10",\n    strokeLinecap: "round",\n    strokeLinejoin: "round"\n  }));\n};\n/* harmony default export */ const ArrowLeftIcon_ArrowLeftIcon = (ArrowLeftIcon);\n;// CONCATENATED MODULE: ./src/components/icons/ArrowLeftIcon/index.ts\n\n;// CONCATENATED MODULE: ./src/components/icons/EqIcon/EqIcon.tsx\n\n\nconst EqIcon = props => {\n  return /*#__PURE__*/react.createElement(Icon_Icon, props, /*#__PURE__*/react.createElement("path", {\n    fillRule: "evenodd",\n    clipRule: "evenodd",\n    d: "M4.94982 1.67442C3.14086 1.67442 1.67442 3.14086 1.67442 4.94982C1.67442 5.41219 1.29958 5.78702 0.837209 5.78702C0.374835 5.78702 0 5.41219 0 4.94982C0 2.2161 2.2161 0 4.94982 0C7.68353 0 9.89963 2.2161 9.89963 4.94982V12.6657C10.3089 12.422 10.7776 12.2108 11.2725 12.0306C12.7604 11.4892 14.6721 11.1628 16.4651 11.1628C18.2598 11.1628 20.0432 11.4899 21.4063 12.0413C22.0855 12.316 22.7023 12.6634 23.1637 13.0894C23.6229 13.5135 24 14.0872 24 14.7907V16.1126C24 20.4687 20.4687 24 16.1126 24C11.7565 24 8.22521 20.4687 8.22521 16.1126V4.94982C8.22521 3.14086 6.75877 1.67442 4.94982 1.67442ZM22.2402 17.1452C21.7485 20.085 19.1922 22.3256 16.1126 22.3256C12.9647 22.3256 10.3636 19.9845 9.95537 16.9484C10.3513 17.1784 10.7998 17.3788 11.2725 17.5508C12.7604 18.0922 14.6721 18.4186 16.4651 18.4186C18.2598 18.4186 20.0432 18.0916 21.4063 17.5401C21.6982 17.422 21.9786 17.2905 22.2402 17.1452ZM22.3256 14.7907C22.3256 14.7235 22.2915 14.5632 22.0278 14.3195C21.7659 14.0777 21.3475 13.8238 20.7783 13.5935C19.6448 13.1349 18.0795 12.8372 16.4651 12.8372C14.8491 12.8372 13.1329 13.1355 11.8451 13.6041C11.198 13.8396 10.7044 14.1018 10.3893 14.356C10.0594 14.6221 10.0465 14.7747 10.0465 14.7907C10.0465 14.8067 10.0594 14.9593 10.3893 15.2254C10.7044 15.4796 11.198 15.7418 11.8452 15.9773C13.1329 16.4459 14.8491 16.7442 16.4651 16.7442C18.0795 16.7442 19.6448 16.4466 20.7783 15.9879C21.3475 15.7577 21.7659 15.5037 22.0278 15.2619C22.2915 15.0182 22.3256 14.8579 22.3256 14.7907Z",\n    fill: "#B5460F"\n  }));\n};\n/* harmony default export */ const EqIcon_EqIcon = (EqIcon);\n;// CONCATENATED MODULE: ./src/components/icons/EqIcon/index.ts\n\n;// CONCATENATED MODULE: ./src/components/icons/IngIcon/IngIcon.tsx\n\n\nconst IngIcon = props => {\n  return /*#__PURE__*/react.createElement(Icon_Icon, props, /*#__PURE__*/react.createElement("g", {\n    clipPath: "url(#clip0_512_2048)"\n  }, /*#__PURE__*/react.createElement("path", {\n    d: "M23.1605 17.189C23.0466 14.3792 21.8991 11.7539 19.8988 9.75367C18.5148 8.36964 16.8316 7.39356 14.995 6.88571C14.8783 5.33494 13.5801 4.10855 12 4.10855C10.4199 4.10855 9.12175 5.3349 9.00503 6.88571C7.16847 7.39356 5.48523 8.36964 4.10124 9.75367C2.10094 11.7539 0.953486 14.3792 0.839533 17.189C0.364126 17.2677 0 17.6805 0 18.1778V18.8881C0 19.4413 0.450142 19.8914 1.00336 19.8914H22.9966C23.5499 19.8914 24 19.4413 24 18.8881V18.1778C24 17.6805 23.6359 17.2677 23.1605 17.189ZM12 5.06476C12.9736 5.06476 13.79 5.74768 13.997 6.6594C13.3445 6.54226 12.6769 6.48184 12 6.48184C11.3231 6.48184 10.6555 6.54226 10.003 6.6594C10.21 5.74768 11.0265 5.06476 12 5.06476ZM12 7.43804C17.4721 7.43804 21.953 11.7632 22.2034 17.1744H1.79663C2.04704 11.7632 6.52792 7.43804 12 7.43804ZM23.0439 18.8881C23.0439 18.9141 23.0227 18.9353 22.9967 18.9353H1.00336C0.977346 18.9353 0.956158 18.9141 0.956158 18.8881V18.1778C0.956158 18.1518 0.977346 18.1306 1.00336 18.1306H22.9967C23.0227 18.1306 23.0439 18.1518 23.0439 18.1778V18.8881Z",\n    fill: "#B5460F"\n  }), /*#__PURE__*/react.createElement("path", {\n    d: "M21.4198 15.8536C21.1562 14.4656 20.5736 13.1279 19.735 11.9851C19.5787 11.7722 19.2795 11.7263 19.0666 11.8825C18.8537 12.0387 18.8078 12.3379 18.964 12.5508C19.7297 13.5941 20.2399 14.7654 20.4804 16.0319C20.5239 16.2612 20.7245 16.4209 20.9495 16.4209C20.9791 16.4209 21.0091 16.4181 21.0392 16.4123C21.2988 16.3632 21.4691 16.1129 21.4198 15.8536Z",\n    fill: "#B5460F"\n  }), /*#__PURE__*/react.createElement("path", {\n    d: "M18.7107 10.8038C18.6075 10.7026 18.5004 10.6023 18.3924 10.5057C18.1958 10.3297 17.8934 10.3463 17.7174 10.543C17.5412 10.7398 17.5579 11.042 17.7547 11.2181C17.852 11.3052 17.9485 11.3956 18.0413 11.4867C18.1344 11.5779 18.2552 11.6233 18.3759 11.6233C18.4999 11.6233 18.6238 11.5754 18.7174 11.4799C18.9023 11.2913 18.8993 10.9886 18.7107 10.8038Z",\n    fill: "#B5460F"\n  })), /*#__PURE__*/react.createElement("defs", null, /*#__PURE__*/react.createElement("clipPath", {\n    id: "clip0_512_2048"\n  }, /*#__PURE__*/react.createElement("rect", {\n    width: "24",\n    height: "24",\n    fill: "white"\n  }))));\n};\n/* harmony default export */ const IngIcon_IngIcon = (IngIcon);\n;// CONCATENATED MODULE: ./src/components/icons/IngIcon/index.ts\n\n;// CONCATENATED MODULE: ./src/hooks/useLocalStore.tsx\n\nconst useLocalStore_useLocalStore = creator => {\n  const container = react.useRef(null);\n  if (container.current === null) {\n    container.current = creator();\n  }\n  react.useEffect(() => {\n    return () => container.current?.destroy();\n  }, []);\n  return container.current;\n};\n;// CONCATENATED MODULE: ./src/store/RecipeStore/RecipeStore.tsx\n\n\n\n\nclass RecipeStore {\n  _status = NotStartedStatus;\n  _recipe = RecipeInit;\n  constructor() {\n    makeObservable(this, {\n      _status: mobx_esm_observable.ref,\n      _recipe: mobx_esm_observable.ref,\n      setStatus: action.bound,\n      setRecipe: action.bound,\n      loadingRecipe: action.bound,\n      recipe: computed,\n      status: computed\n    });\n  }\n  setStatus(newStatus) {\n    this._status = {\n      ...newStatus\n    };\n  }\n  setRecipe(newRecipe) {\n    this._recipe = {\n      ...newRecipe\n    };\n  }\n  loadingRecipe(id) {\n    const url = urlPrefix + \'recipes/\' + id + \'/information?apiKey=\' + apiKey;\n    this.setStatus(LoadingStatus);\n    lib_axios.get(url).then(resp => {\n      this.setStatus(SuccessfulStatus);\n      this.setRecipe(resp.data);\n    }).catch(err => {\n      this.setStatus(errorStatus(err.message));\n    });\n  }\n  get recipe() {\n    return this._recipe;\n  }\n  get status() {\n    return this._status;\n  }\n  destroy() {\n    this._recipe = RecipeInit;\n    this._status = NotStartedStatus;\n  }\n}\n;// CONCATENATED MODULE: ./src/store/RecipeStore/index.ts\n\n;// CONCATENATED MODULE: ./src/App/pages/Recipe/components/PreviewBlock/PreviewBlock.tsx\n\n\n\nconst PreviewBlock = props => {\n  return /*#__PURE__*/react.createElement("div", null, /*#__PURE__*/react.createElement(Text_Text, {\n    view: "p-16"\n  }, props.name), /*#__PURE__*/react.createElement(Text_Text, {\n    weight: "bold",\n    color: "accent",\n    view: "p-16"\n  }, props.children, " ", props.unit));\n};\n/* harmony default export */ const PreviewBlock_PreviewBlock = (/*#__PURE__*/(0,react.memo)(PreviewBlock));\n;// CONCATENATED MODULE: ./src/App/pages/Recipe/components/PreviewBlock/index.ts\n\n// EXTERNAL MODULE: ./node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[0].use[1]!./node_modules/postcss-loader/dist/cjs.js??ruleSet[1].rules[0].use[2]!./node_modules/sass-loader/dist/cjs.js!./src/App/pages/Recipe/components/RecipeNeed/RecipeNeed.module.scss\nvar RecipeNeed_module = __webpack_require__(6820);\n;// CONCATENATED MODULE: ./src/App/pages/Recipe/components/RecipeNeed/RecipeNeed.module.scss\n\n      \n      \n      \n      \n      \n      \n      \n      \n      \n\nvar RecipeNeed_module_options = {};\n\nRecipeNeed_module_options.styleTagTransform = (styleTagTransform_default());\nRecipeNeed_module_options.setAttributes = (setAttributesWithoutAttributes_default());\nRecipeNeed_module_options.insert = insertBySelector_default().bind(null, "head");\nRecipeNeed_module_options.domAPI = (styleDomAPI_default());\nRecipeNeed_module_options.insertStyleElement = (insertStyleElement_default());\n\nvar RecipeNeed_module_update = injectStylesIntoStyleTag_default()(RecipeNeed_module/* default */.A, RecipeNeed_module_options);\n\n\n\n\n       /* harmony default export */ const RecipeNeed_RecipeNeed_module = (RecipeNeed_module/* default */.A && RecipeNeed_module/* default */.A.locals ? RecipeNeed_module/* default */.A.locals : undefined);\n\n;// CONCATENATED MODULE: ./src/App/pages/Recipe/components/RecipeNeed/RecipeNeed.tsx\n\n\n\n\nconst RecipeNeed = props => {\n  return /*#__PURE__*/react.createElement("div", {\n    className: RecipeNeed_RecipeNeed_module["recipe__box__needs__block"]\n  }, /*#__PURE__*/react.createElement(Text_Text, {\n    view: "p-20",\n    weight: "bold"\n  }, props.name), /*#__PURE__*/react.createElement("div", {\n    className: RecipeNeed_RecipeNeed_module["recipe__box__needs__block__elems"]\n  }, props.elements.map((element, index) => {\n    return /*#__PURE__*/react.createElement("div", {\n      key: [element, index].join(\' \')\n    }, props.icon, /*#__PURE__*/react.createElement(Text_Text, {\n      view: "p-16"\n    }, element));\n  })));\n};\n/* harmony default export */ const RecipeNeed_RecipeNeed = (/*#__PURE__*/(0,react.memo)(RecipeNeed));\n;// CONCATENATED MODULE: ./src/App/pages/Recipe/components/RecipeNeed/index.ts\n\n// EXTERNAL MODULE: ./node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[0].use[1]!./node_modules/postcss-loader/dist/cjs.js??ruleSet[1].rules[0].use[2]!./node_modules/sass-loader/dist/cjs.js!./src/App/pages/Recipe/Recipe.module.scss\nvar Recipe_module = __webpack_require__(5308);\n;// CONCATENATED MODULE: ./src/App/pages/Recipe/Recipe.module.scss\n\n      \n      \n      \n      \n      \n      \n      \n      \n      \n\nvar Recipe_module_options = {};\n\nRecipe_module_options.styleTagTransform = (styleTagTransform_default());\nRecipe_module_options.setAttributes = (setAttributesWithoutAttributes_default());\nRecipe_module_options.insert = insertBySelector_default().bind(null, "head");\nRecipe_module_options.domAPI = (styleDomAPI_default());\nRecipe_module_options.insertStyleElement = (insertStyleElement_default());\n\nvar Recipe_module_update = injectStylesIntoStyleTag_default()(Recipe_module/* default */.A, Recipe_module_options);\n\n\n\n\n       /* harmony default export */ const Recipe_Recipe_module = (Recipe_module/* default */.A && Recipe_module/* default */.A.locals ? Recipe_module/* default */.A.locals : undefined);\n\n;// CONCATENATED MODULE: ./src/App/pages/Recipe/Recipe.tsx\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nconst Recipe = () => {\n  const {\n    id\n  } = useParams();\n  const {\n    recipe: recipeObj,\n    status,\n    loadingRecipe\n  } = useLocalStore_useLocalStore(() => new RecipeStore());\n  const navigate = dist_useNavigate();\n  (0,react.useEffect)(() => {\n    loadingRecipe(Number(id));\n  }, [id, loadingRecipe]);\n  const getEquipment = recipeObj => {\n    const uniqEq = new Set();\n    recipeObj.analyzedInstructions[0].steps.forEach(step => {\n      step.equipment.forEach(eq => {\n        uniqEq.add(eq.name);\n      });\n    });\n    return Array.from(uniqEq);\n  };\n  const getIngredients = recipeObj => {\n    return recipeObj.extendedIngredients.map(({\n      amount,\n      unit,\n      name\n    }) => [amount, unit, name].join(\' \'));\n  };\n  return /*#__PURE__*/react.createElement("div", {\n    className: Recipe_Recipe_module["recipe"]\n  }, /*#__PURE__*/react.createElement("div", {\n    className: Recipe_Recipe_module["recipe__header"]\n  }, /*#__PURE__*/react.createElement(ArrowLeftIcon_ArrowLeftIcon, {\n    color: "accent",\n    onClick: () => {\n      navigate(\'/recipes\');\n    }\n  }), /*#__PURE__*/react.createElement(Text_Text, {\n    weight: "bold",\n    view: "title"\n  }, recipeObj.title)), status.statusName === \'ERROR\' ? /*#__PURE__*/react.createElement(ErrorBox_ErrorBox, {\n    errorSlot: /*#__PURE__*/react.createElement(Button_Button, {\n      onClick: () => navigate(\'/recipes\')\n    }, "Go to main page")\n  }, status.statusMessage) : /*#__PURE__*/react.createElement("div", {\n    className: Recipe_Recipe_module["recipe__box"]\n  }, /*#__PURE__*/react.createElement("div", {\n    className: Recipe_Recipe_module["recipe__box__preview"]\n  }, /*#__PURE__*/react.createElement("img", {\n    src: recipeObj.image,\n    alt: "recipe photo"\n  }), /*#__PURE__*/react.createElement("div", {\n    className: Recipe_Recipe_module["recipe__box__preview__info"]\n  }, /*#__PURE__*/react.createElement(PreviewBlock_PreviewBlock, {\n    name: "Preparation",\n    unit: "minutes",\n    key: "Preparation"\n  }, recipeObj.preparationMinutes), /*#__PURE__*/react.createElement(PreviewBlock_PreviewBlock, {\n    name: "Cooking",\n    unit: "minutes",\n    key: "Cooking"\n  }, recipeObj.cookingMinutes), /*#__PURE__*/react.createElement(PreviewBlock_PreviewBlock, {\n    name: "Total",\n    unit: "minutes",\n    key: "Total"\n  }, recipeObj.readyInMinutes), /*#__PURE__*/react.createElement(PreviewBlock_PreviewBlock, {\n    name: "Servings",\n    unit: "servings",\n    key: "Servings"\n  }, recipeObj.servings), /*#__PURE__*/react.createElement(PreviewBlock_PreviewBlock, {\n    name: "Rating",\n    unit: "likes",\n    key: "Rating"\n  }, recipeObj.aggregateLikes))), /*#__PURE__*/react.createElement("div", {\n    className: Recipe_Recipe_module["recipe__box__description"]\n  }, /*#__PURE__*/react.createElement(Text_Text, {\n    view: "p-16"\n  }, /*#__PURE__*/react.createElement("span", {\n    dangerouslySetInnerHTML: {\n      __html: recipeObj.summary\n    }\n  }))), /*#__PURE__*/react.createElement("div", {\n    className: Recipe_Recipe_module["recipe__box__needs"]\n  }, /*#__PURE__*/react.createElement(RecipeNeed_RecipeNeed, {\n    name: "Ingredients",\n    elements: getIngredients(recipeObj),\n    icon: /*#__PURE__*/react.createElement(IngIcon_IngIcon, null)\n  }), /*#__PURE__*/react.createElement("div", {\n    className: Recipe_Recipe_module["recipe__box__needs__line"]\n  }, /*#__PURE__*/react.createElement("div", {\n    className: Recipe_Recipe_module["circle"]\n  }), /*#__PURE__*/react.createElement("div", {\n    className: Recipe_Recipe_module["bottom-line"]\n  })), /*#__PURE__*/react.createElement(RecipeNeed_RecipeNeed, {\n    name: "Equipment",\n    elements: getEquipment(recipeObj),\n    icon: /*#__PURE__*/react.createElement(EqIcon_EqIcon, null)\n  })), /*#__PURE__*/react.createElement("div", {\n    className: Recipe_Recipe_module[\'recipe__box__directions\']\n  }, /*#__PURE__*/react.createElement(Text_Text, {\n    tag: "div",\n    view: "p-20",\n    weight: "bold"\n  }, "Directions"), /*#__PURE__*/react.createElement("div", {\n    className: Recipe_Recipe_module["recipe__box__directions__steps"]\n  }, recipeObj.analyzedInstructions[0].steps.map(elem => {\n    return /*#__PURE__*/react.createElement("div", {\n      key: elem.number\n    }, /*#__PURE__*/react.createElement(Text_Text, {\n      view: "p-16",\n      weight: "bold"\n    }, "Step ", elem.number), /*#__PURE__*/react.createElement(Text_Text, {\n      view: "p-14"\n    }, elem.step));\n  })))));\n};\n/* harmony default export */ const Recipe_Recipe = (observer(Recipe));\n;// CONCATENATED MODULE: ./src/App/pages/Recipe/index.ts\n\n;// CONCATENATED MODULE: ./src/components/icons/ArrowRightIcon/ArrowRightIcon.tsx\n\n\n\n\nconst ArrowRightIcon = props => {\n  return /*#__PURE__*/react.createElement(Icon_Icon, extends_extends({\n    style: {\n      cursor: \'pointer\'\n    }\n  }, props, {\n    viewBox: "0 0 32 32",\n    width: "32",\n    height: "32"\n  }), /*#__PURE__*/react.createElement("path", {\n    className: styles_customStyles_module[\'icon_stroke_color_\' + (props.color || \'inherit\')],\n    d: "M11.88 26.5599L20.5733 17.8666C21.6 16.8399 21.6 15.1599 20.5733 14.1333L11.88 5.43994",\n    strokeWidth: "1.5",\n    strokeMiterlimit: "10",\n    strokeLinecap: "round",\n    strokeLinejoin: "round"\n  }));\n};\n/* harmony default export */ const ArrowRightIcon_ArrowRightIcon = (ArrowRightIcon);\n;// CONCATENATED MODULE: ./src/components/icons/ArrowRightIcon/index.ts\n\n;// CONCATENATED MODULE: ./src/store/PageControllerStore/PageControllerStore.tsx\n\nclass PageControllerStore {\n  _pages = 9;\n  _total = 0;\n  constructor(totalResults) {\n    makeObservable(this, {\n      _total: mobx_esm_observable,\n      _pages: mobx_esm_observable,\n      getPointsArray: action.bound,\n      pages: computed,\n      total: computed\n    });\n    this._total = Math.floor(totalResults / this._pages + (totalResults % this._pages !== 0 ? 1 : 0));\n    ;\n  }\n  getPointsArray(selectedPage) {\n    if (this._total < this._pages) {\n      return Array.from({\n        length: this._total\n      }, (_, index) => index + 1);\n    } else {\n      const endItem = Math.min(this._pages + selectedPage - (selectedPage % 3 !== 0 ? selectedPage % 3 : 3), this._total);\n      let firstItem = selectedPage;\n      if (selectedPage % 3 === 1) {\n        firstItem = selectedPage;\n      } else if (selectedPage % 3 === 2) {\n        firstItem = selectedPage - 1;\n      } else {\n        firstItem = selectedPage - 2;\n      }\n      if (endItem - firstItem + 1 >= this._pages) {\n        return [firstItem, firstItem + 1, firstItem + 2, 0, endItem];\n      }\n      return Array.from({\n        length: endItem - firstItem + 1\n      }, (_, index) => index + firstItem);\n    }\n  }\n  get pages() {\n    return this._pages;\n  }\n  get total() {\n    return this._total;\n  }\n  destroy() {\n    this._pages = 9;\n  }\n}\n// EXTERNAL MODULE: ./node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[0].use[1]!./node_modules/postcss-loader/dist/cjs.js??ruleSet[1].rules[0].use[2]!./node_modules/sass-loader/dist/cjs.js!./src/components/PageController/PageController.module.scss\nvar PageController_module = __webpack_require__(1078);\n;// CONCATENATED MODULE: ./src/components/PageController/PageController.module.scss\n\n      \n      \n      \n      \n      \n      \n      \n      \n      \n\nvar PageController_module_options = {};\n\nPageController_module_options.styleTagTransform = (styleTagTransform_default());\nPageController_module_options.setAttributes = (setAttributesWithoutAttributes_default());\nPageController_module_options.insert = insertBySelector_default().bind(null, "head");\nPageController_module_options.domAPI = (styleDomAPI_default());\nPageController_module_options.insertStyleElement = (insertStyleElement_default());\n\nvar PageController_module_update = injectStylesIntoStyleTag_default()(PageController_module/* default */.A, PageController_module_options);\n\n\n\n\n       /* harmony default export */ const PageController_PageController_module = (PageController_module/* default */.A && PageController_module/* default */.A.locals ? PageController_module/* default */.A.locals : undefined);\n\n;// CONCATENATED MODULE: ./src/components/PageController/PageController.tsx\n\n\n\n\n\n\n\n\n\nconst PageController = ({\n  selectedPage,\n  totalResults,\n  onClick\n}) => {\n  const {\n    getPointsArray,\n    total\n  } = useLocalStore_useLocalStore(() => new PageControllerStore(totalResults));\n  const goBack = () => {\n    if (selectedPage > 1) {\n      onClick(selectedPage - 1);\n    }\n  };\n  const goNext = () => {\n    if (selectedPage < total) {\n      onClick(selectedPage + 1);\n    }\n  };\n  const selectPage = pageNumber => {\n    onClick(pageNumber);\n  };\n  return /*#__PURE__*/react.createElement("div", {\n    className: PageController_PageController_module["page-controller"]\n  }, /*#__PURE__*/react.createElement(ArrowLeftIcon_ArrowLeftIcon, {\n    color: selectedPage > 1 ? \'primary\' : \'secondary\',\n    onClick: goBack\n  }), /*#__PURE__*/react.createElement("div", {\n    className: PageController_PageController_module["page-controller__numbers"]\n  }, getPointsArray(selectedPage).map(number => {\n    if (number === 0) {\n      return /*#__PURE__*/react.createElement(Text_Text, {\n        key: number,\n        tag: "div",\n        view: "p-18",\n        className: PageController_PageController_module[\'page-controller__numbers__points\']\n      }, "...");\n    }\n    return /*#__PURE__*/react.createElement(Text_Text, {\n      key: number,\n      tag: "div",\n      view: "p-18",\n      className: classnames_default()({\n        [PageController_PageController_module["page-controller__numbers__number"]]: true,\n        [PageController_PageController_module["page-controller__numbers__number_selected"]]: selectedPage === number\n      }),\n      onCLick: () => {\n        selectPage(number);\n      }\n    }, number);\n  })), /*#__PURE__*/react.createElement(ArrowRightIcon_ArrowRightIcon, {\n    color: selectedPage < total ? \'primary\' : \'secondary\',\n    onClick: goNext\n  }));\n};\n/* harmony default export */ const PageController_PageController = (observer(PageController));\n;// CONCATENATED MODULE: ./src/components/PageController/index.ts\n\n// EXTERNAL MODULE: ./node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[0].use[1]!./node_modules/postcss-loader/dist/cjs.js??ruleSet[1].rules[0].use[2]!./node_modules/sass-loader/dist/cjs.js!./src/components/ListShower/ListShower.module.scss\nvar ListShower_module = __webpack_require__(4088);\n;// CONCATENATED MODULE: ./src/components/ListShower/ListShower.module.scss\n\n      \n      \n      \n      \n      \n      \n      \n      \n      \n\nvar ListShower_module_options = {};\n\nListShower_module_options.styleTagTransform = (styleTagTransform_default());\nListShower_module_options.setAttributes = (setAttributesWithoutAttributes_default());\nListShower_module_options.insert = insertBySelector_default().bind(null, "head");\nListShower_module_options.domAPI = (styleDomAPI_default());\nListShower_module_options.insertStyleElement = (insertStyleElement_default());\n\nvar ListShower_module_update = injectStylesIntoStyleTag_default()(ListShower_module/* default */.A, ListShower_module_options);\n\n\n\n\n       /* harmony default export */ const ListShower_ListShower_module = (ListShower_module/* default */.A && ListShower_module/* default */.A.locals ? ListShower_module/* default */.A.locals : undefined);\n\n;// CONCATENATED MODULE: ./src/store/SearchParamsStore/SearchParamsStore.ts\n\nclass SearchParamsStore {\n  _searchParams = {};\n  constructor() {\n    makeObservable(this, {\n      _searchParams: mobx_esm_observable.ref,\n      setSearchParam: action.bound,\n      getSearchParams: action.bound,\n      setMultiParam: action.bound,\n      deleteSearchParam: action.bound,\n      changeSearchParamsForFilters: action.bound,\n      updateUrl: action.bound,\n      updateSearchParams: action.bound,\n      searchParams: computed\n    });\n  }\n  getSearchObject() {\n    return new URLSearchParams(document.location.href.split(\'?\')[1] || \'\');\n  }\n  updateUrl(searchParams) {\n    const newUrl = window.location.protocol + \'//\' + window.location.host + window.location.pathname + \'?\' + searchParams.toString();\n    window.history.pushState({\n      path: newUrl\n    }, \'\', newUrl);\n  }\n  updateSearchParams() {\n    let searchParams = this.getSearchObject();\n    Object.entries(this._searchParams).forEach(([key, value]) => {\n      if (value) {\n        searchParams.set(key, encodeURIComponent(value));\n      } else {\n        searchParams.delete(key);\n      }\n    });\n    return searchParams;\n  }\n  getSearchParams() {\n    this._searchParams = {};\n    const searchParams = this.getSearchObject();\n    const paramArray = Array.from(searchParams.entries());\n    paramArray.forEach(([key, value]) => {\n      Object.assign(this._searchParams, {\n        [key]: decodeURIComponent(value)\n      });\n    });\n  }\n  setSearchParam(key, value, updating = true) {\n    if (value) {\n      Object.assign(this._searchParams, {\n        [key]: value\n      });\n      if (updating) {\n        const searchParams = this.getSearchObject();\n        searchParams.set(key, encodeURIComponent(value.toLowerCase()));\n        this.updateUrl(searchParams);\n      }\n    }\n  }\n  deleteSearchParam(key, updating = true) {\n    if (this._searchParams.hasOwnProperty(key)) {\n      this._searchParams[key] = null;\n      if (updating) {\n        const searchParams = this.getSearchObject();\n        searchParams.delete(key);\n        this.updateUrl(searchParams);\n      }\n    }\n  }\n  setMultiParam(key, values, prefix = \',\', updating = true) {\n    const valueStr = values.join(prefix);\n    if (valueStr !== \'\') {\n      Object.assign(this._searchParams, {\n        [key]: valueStr\n      });\n      if (updating) {\n        const searchParams = this.getSearchObject();\n        searchParams.set(key, encodeURIComponent(valueStr.toLowerCase()));\n        this.updateUrl(searchParams);\n      }\n    }\n  }\n  changeSearchParamsForFilters(search, categoryTag, category, otherTags) {\n    console.log(otherTags);\n    console.log(category);\n    this.deleteSearchParam(\'query\', false);\n    this.deleteSearchParam(\'page\', false);\n    if (search !== \'\') {\n      this.setSearchParam(\'query\', search, false);\n    }\n    if (categoryTag && category) {\n      this.deleteSearchParam(categoryTag, false);\n      this.setMultiParam(categoryTag, category.map(cat => cat.value), \',\', false);\n    }\n    if (otherTags) {\n      otherTags.forEach(([key, value]) => {\n        if (key !== \'\') {\n          this.deleteSearchParam(key, false);\n        }\n        if (key !== \'\' && value !== \'\') {\n          this.setSearchParam(key, value, false);\n        }\n      });\n    }\n    this.updateUrl(this.updateSearchParams());\n    this._searchParams = {\n      ...this._searchParams\n    };\n  }\n  getParam(key) {\n    return this._searchParams[key] || \'\';\n  }\n  getNumberParam(key, init = 1) {\n    const value = Number(this._searchParams[key]);\n    return !isNaN(value) ? value : init;\n  }\n  getParamPair(key) {\n    return [key, this._searchParams[key] || \'\'];\n  }\n  getOffset() {\n    return ((Number(this._searchParams[\'page\'] || \'1\') - 1) * 9).toString();\n  }\n  getMultipleParam(key, options, prefix = \',\') {\n    const valueStr = this._searchParams[key] || \'\';\n    if (valueStr === \'\') {\n      return [];\n    }\n    const valueArray = valueStr.split(prefix);\n    return options.filter(opt => {\n      const index = valueArray.indexOf(opt.value.toLowerCase());\n      return index !== -1;\n    });\n  }\n  get searchParams() {\n    return this._searchParams;\n  }\n  destroy() {\n    this._searchParams = {};\n  }\n}\n/* harmony default export */ const SearchParamsStore_SearchParamsStore = (new SearchParamsStore());\n;// CONCATENATED MODULE: ./src/store/SearchParamsStore/index.ts\n\n;// CONCATENATED MODULE: ./src/components/ListShower/ListShower.tsx\n\n\n\n\n\n\n\nconst ListShower = ({\n  status,\n  totalCount = 0,\n  children\n}) => {\n  const pageControllerClick = page => {\n    SearchParamsStore_SearchParamsStore.setSearchParam(\'page\', page.toString());\n  };\n  return /*#__PURE__*/react.createElement(react.Fragment, null, status.statusName === \'NOT_STARTED\' ? /*#__PURE__*/react.createElement(Text_Text, {\n    tag: "div",\n    view: "p-20",\n    color: "secondary"\n  }, "Try searching!") : status.statusName === \'ERROR\' ? /*#__PURE__*/react.createElement(ErrorBox_ErrorBox, null, status.statusMessage) : status.statusName === \'LOADING\' ? /*#__PURE__*/react.createElement(Loader_Loader, null) : /*#__PURE__*/react.createElement(react.Fragment, null, /*#__PURE__*/react.createElement("div", {\n    className: ListShower_ListShower_module[\'list-shower\']\n  }, children), totalCount > 0 && /*#__PURE__*/react.createElement(PageController_PageController, {\n    selectedPage: Number(SearchParamsStore_SearchParamsStore.getNumberParam(\'page\')),\n    totalResults: totalCount,\n    onClick: pageControllerClick\n  })));\n};\n/* harmony default export */ const ListShower_ListShower = (ListShower);\n;// CONCATENATED MODULE: ./src/components/ListShower/index.ts\n\n;// CONCATENATED MODULE: ./src/utils/collection.ts\nconst getInitialCollectionModel = () => ({\n  order: [],\n  entities: {}\n});\nconst normalizeCollection = (elements, getKeyForElement) => {\n  const collection = getInitialCollectionModel();\n  elements.forEach(el => {\n    const id = getKeyForElement(el);\n    collection.order.push(id);\n    collection.entities[id] = el;\n  });\n  return collection;\n};\nconst linearizeCollection = elements => elements.order.map(el => elements.entities[el]);\n;// CONCATENATED MODULE: ./src/store/BaseListStore/BaseListStore.tsx\n\n\n\n\nclass BaseListStore {\n  _status = NotStartedStatus;\n  _results = getInitialCollectionModel();\n  _total = 0;\n  constructor() {\n    makeObservable(this, {\n      _status: mobx_esm_observable.ref,\n      _results: mobx_esm_observable.ref,\n      _total: mobx_esm_observable,\n      setStatus: action.bound,\n      setResultRequest: action.bound,\n      loadingList: action.bound,\n      status: computed,\n      results: computed,\n      total: computed\n    });\n  }\n  setStatus(newStatus) {\n    this._status = {\n      ...newStatus\n    };\n  }\n  setResultRequest(newResultList, newTotal) {\n    this._results = normalizeCollection(newResultList, element => element.id);\n    this._total = newTotal;\n  }\n  loadingList(url, resultsName = \'results\', totalName = \'totalResults\') {\n    this.setStatus(LoadingStatus);\n    lib_axios.get(url).then(resp => {\n      this.setStatus(SuccessfulStatus);\n      this.setResultRequest(resp.data[resultsName], resp.data[totalName]);\n    }).catch(err => {\n      this.setStatus(errorStatus(err.message));\n    });\n  }\n  get status() {\n    return this._status;\n  }\n  get results() {\n    return linearizeCollection(this._results);\n  }\n  get total() {\n    return this._total;\n  }\n  destroy() {\n    this._results = getInitialCollectionModel();\n    this._total = 0;\n    this._status = NotStartedStatus;\n  }\n}\n;\n;// CONCATENATED MODULE: ./src/store/BaseListStore/index.ts\n\n;// CONCATENATED MODULE: ./src/store/RecipeListStore/RecipeListStore.tsx\n\n\n\nclass RecipeListStore extends BaseListStore {\n  setResultRequest(newResultList, newTotal) {\n    this._results = normalizeCollection(newResultList.map(recipe => {\n      const recipeKcal = recipe.nutrition.nutrients.filter(obj => obj.name === \'Calories\')[0];\n      const kcalStr = [Math.ceil(recipeKcal.amount), recipeKcal.unit].join(\' \');\n      const describeStr = recipe.nutrition.ingredients.map(ing => ing.name).join(\' + \');\n      return {\n        kcal: kcalStr,\n        describe: describeStr,\n        ...recipe\n      };\n    }), element => element.id);\n    this._total = newTotal;\n  }\n  getUrl(offset, ...other) {\n    const params = {\n      addRecipeNutrition: true,\n      number: pageElementCount,\n      offset: offset\n    };\n    const pathUrl = \'complexSearch?\';\n    let pathParams = Object.entries(params).map(param => param.join(\'=\'));\n    other.forEach(element => {\n      if (element[1] !== null) {\n        if (element[1] !== \'\') {\n          pathParams.push(element.join(\'=\'));\n        }\n      }\n    });\n    pathParams.push([\'apiKey\', apiKey].join(\'=\'));\n    const url = urlPrefix + \'recipes/\' + pathUrl + [...pathParams].join(\'&\');\n    return url;\n  }\n}\n;// CONCATENATED MODULE: ./src/store/RecipeListStore/index.ts\n\n// EXTERNAL MODULE: ./node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[0].use[1]!./node_modules/postcss-loader/dist/cjs.js??ruleSet[1].rules[0].use[2]!./node_modules/sass-loader/dist/cjs.js!./src/components/Input/Input.module.scss\nvar Input_module = __webpack_require__(6742);\n;// CONCATENATED MODULE: ./src/components/Input/Input.module.scss\n\n      \n      \n      \n      \n      \n      \n      \n      \n      \n\nvar Input_module_options = {};\n\nInput_module_options.styleTagTransform = (styleTagTransform_default());\nInput_module_options.setAttributes = (setAttributesWithoutAttributes_default());\nInput_module_options.insert = insertBySelector_default().bind(null, "head");\nInput_module_options.domAPI = (styleDomAPI_default());\nInput_module_options.insertStyleElement = (insertStyleElement_default());\n\nvar Input_module_update = injectStylesIntoStyleTag_default()(Input_module/* default */.A, Input_module_options);\n\n\n\n\n       /* harmony default export */ const Input_Input_module = (Input_module/* default */.A && Input_module/* default */.A.locals ? Input_module/* default */.A.locals : undefined);\n\n;// CONCATENATED MODULE: ./src/components/Input/Input.tsx\n\n\n\n\n\nconst Input = /*#__PURE__*/react.forwardRef(({\n  value,\n  onChange,\n  afterSlot,\n  ...props\n}) => {\n  const onChangeFunction = e => {\n    onChange(e.target.value);\n  };\n  return /*#__PURE__*/react.createElement("div", {\n    className: classnames_default()({\n      [props.className || \'\']: true,\n      [Input_Input_module[\'inputblock\']]: true,\n      [Input_Input_module[\'inputblock_disabled\']]: props.disabled\n    })\n  }, /*#__PURE__*/react.createElement("input", extends_extends({}, props, {\n    value: value,\n    onChange: onChangeFunction,\n    type: "text",\n    className: Input_Input_module[\'inputblock__element\']\n  })), afterSlot);\n});\n/* harmony default export */ const Input_Input = (/*#__PURE__*/(0,react.memo)(Input));\n;// CONCATENATED MODULE: ./src/components/Input/index.ts\n\n\n;// CONCATENATED MODULE: ./src/components/icons/ArrowDownIcon/ArrowDownIcon.tsx\n\n\n\n\nconst ArrowDownIcon = props => {\n  return /*#__PURE__*/react.createElement(Icon_Icon, extends_extends({\n    style: {\n      cursor: \'pointer\'\n    }\n  }, props), /*#__PURE__*/react.createElement("path", {\n    className: styles_customStyles_module[\'icon_fill_color_\' + (props.color || \'inherit\')],\n    fillRule: "evenodd",\n    clipRule: "evenodd",\n    d: "M2.33563 8.74741L3.66436 7.25259L12 14.662L20.3356 7.25259L21.6644 8.74741L12 17.338L2.33563 8.74741Z"\n  }));\n};\n/* harmony default export */ const ArrowDownIcon_ArrowDownIcon = (ArrowDownIcon);\n;// CONCATENATED MODULE: ./src/components/icons/ArrowDownIcon/index.ts\n\n// EXTERNAL MODULE: ./node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[0].use[1]!./node_modules/postcss-loader/dist/cjs.js??ruleSet[1].rules[0].use[2]!./node_modules/sass-loader/dist/cjs.js!./src/components/MultiDropdown/MultiDropdown.module.scss\nvar MultiDropdown_module = __webpack_require__(1562);\n;// CONCATENATED MODULE: ./src/components/MultiDropdown/MultiDropdown.module.scss\n\n      \n      \n      \n      \n      \n      \n      \n      \n      \n\nvar MultiDropdown_module_options = {};\n\nMultiDropdown_module_options.styleTagTransform = (styleTagTransform_default());\nMultiDropdown_module_options.setAttributes = (setAttributesWithoutAttributes_default());\nMultiDropdown_module_options.insert = insertBySelector_default().bind(null, "head");\nMultiDropdown_module_options.domAPI = (styleDomAPI_default());\nMultiDropdown_module_options.insertStyleElement = (insertStyleElement_default());\n\nvar MultiDropdown_module_update = injectStylesIntoStyleTag_default()(MultiDropdown_module/* default */.A, MultiDropdown_module_options);\n\n\n\n\n       /* harmony default export */ const MultiDropdown_MultiDropdown_module = (MultiDropdown_module/* default */.A && MultiDropdown_module/* default */.A.locals ? MultiDropdown_module/* default */.A.locals : undefined);\n\n;// CONCATENATED MODULE: ./src/components/MultiDropdown/MultiDropdown.tsx\n\n\n\n\n\n\n\n\n/** Пропсы, которые принимает компонент Dropdown */\n\nconst MultiDropdown = props => {\n  const [opened, setOpened] = (0,react.useState)(false);\n  const [title, setTitle] = (0,react.useState)(props.value && props.value.length ? props.getTitle(props.value) : \'\');\n  const [optionList, setOptionList] = (0,react.useState)(props.options);\n  const ref = (0,react.useRef)(null);\n  const selectMode = props.selectMode ? props.selectMode : \'MULTI\';\n  const handleOutsideClick = e => {\n    if (ref.current && !ref.current.contains(e.target)) {\n      setOpened(false);\n    }\n  };\n  (0,react.useEffect)(() => {\n    document.addEventListener(\'mousedown\', handleOutsideClick);\n    return () => document.removeEventListener(\'mousedown\', handleOutsideClick);\n  }, []);\n  (0,react.useEffect)(() => {\n    setTitle(props.value && props.value.length ? props.getTitle(props.value) : \'\');\n  }, [props.value, props]);\n  (0,react.useEffect)(() => {\n    setOptionList(props.options);\n  }, [props.options, props]);\n  const getOptionList = (0,react.useCallback)(clickValue => {\n    if (!props.value.map(el => el.key).includes(clickValue.key)) {\n      if (selectMode === \'MULTI\') {\n        props.onChange([...props.value, clickValue]);\n      } else {\n        props.onChange([clickValue]);\n      }\n    } else {\n      props.onChange(props.value.filter(el => el.key !== clickValue.key));\n    }\n  }, [props]);\n  const getFilterList = (0,react.useCallback)(title => {\n    if (title !== \'\') {\n      setOptionList(optionList.filter(option => option.value.startsWith(title)));\n    } else {\n      setOptionList(props.options);\n    }\n  }, [optionList, props.options]);\n  return /*#__PURE__*/react.createElement("div", {\n    ref: ref,\n    className: classnames_default()({\n      [props.className || \'\']: true,\n      [MultiDropdown_MultiDropdown_module[\'multidropdown\']]: true\n    })\n  }, /*#__PURE__*/react.createElement(Input_Input, {\n    onClick: () => {\n      if (!props.disabled) {\n        setOpened(true);\n      }\n    },\n    placeholder: props.value.length === 0 ? props.getTitle(props.value) : \'\',\n    value: title,\n    onChange: currValue => {\n      setTitle(currValue);\n      getFilterList(currValue);\n    },\n    afterSlot: /*#__PURE__*/react.createElement(ArrowDownIcon_ArrowDownIcon, {\n      color: "secondary",\n      onClick: () => {\n        if (!props.disabled) {\n          setOpened(!opened);\n        }\n      }\n    })\n  }), opened && !props.disabled && /*#__PURE__*/react.createElement("div", {\n    className: MultiDropdown_MultiDropdown_module[\'multidropdown__options\']\n  }, optionList.map(option => {\n    const handleChange = () => {\n      getOptionList(option);\n    };\n    return /*#__PURE__*/react.createElement("div", {\n      key: option.key,\n      onClick: handleChange,\n      className: classnames_default()({\n        [MultiDropdown_MultiDropdown_module[\'multidropdown__options__option\']]: true,\n        [MultiDropdown_MultiDropdown_module[\'multidropdown__options__option_selected\']]: props.value.map(el => el.key).includes(option.key)\n      })\n    }, /*#__PURE__*/react.createElement(Text_Text, {\n      tag: "span",\n      view: "p-16"\n    }, option.value));\n  })));\n};\n/* harmony default export */ const MultiDropdown_MultiDropdown = (/*#__PURE__*/(0,react.memo)(MultiDropdown));\n;// CONCATENATED MODULE: ./src/components/MultiDropdown/index.ts\n\n\n;// CONCATENATED MODULE: ./src/components/icons/SearchIcon/SearchIcon.tsx\n\n\n\nconst SearchIcon = props => {\n  return /*#__PURE__*/react.createElement(Icon_Icon, extends_extends({}, props, {\n    viewBox: "0 0 25 24"\n  }), /*#__PURE__*/react.createElement("g", {\n    clipPath: "url(#clip0_505_662)"\n  }, /*#__PURE__*/react.createElement("path", {\n    d: "M16 14H15.21L14.93 13.73C15.91 12.59 16.5 11.11 16.5 9.5C16.5 5.91 13.59 3 10 3C6.41 3 3.5 5.91 3.5 9.5C3.5 13.09 6.41 16 10 16C11.61 16 13.09 15.41 14.23 14.43L14.5 14.71V15.5L19.5 20.49L20.99 19L16 14ZM10 14C7.51 14 5.5 11.99 5.5 9.5C5.5 7.01 7.51 5 10 5C12.49 5 14.5 7.01 14.5 9.5C14.5 11.99 12.49 14 10 14Z",\n    fill: "white"\n  })), /*#__PURE__*/react.createElement("defs", null, /*#__PURE__*/react.createElement("clipPath", {\n    id: "clip0_505_662"\n  }, /*#__PURE__*/react.createElement("rect", {\n    width: "24",\n    height: "24",\n    fill: "white",\n    transform: "translate(0.5)"\n  }))));\n};\n/* harmony default export */ const SearchIcon_SearchIcon = (SearchIcon);\n;// CONCATENATED MODULE: ./src/components/icons/SearchIcon/index.ts\n\n;// CONCATENATED MODULE: ./src/store/FilterStore/FilterStore.tsx\n\nclass FilterStore {\n  _searchField = \'\';\n  _category = [];\n  _visibility = false;\n  _itemIndexList = {};\n  _itemSingleList = [];\n  _itemMinMaxList = [];\n  _itemOptionList = [];\n  constructor() {\n    makeObservable(this, {\n      _searchField: mobx_esm_observable,\n      _category: mobx_esm_observable.ref,\n      _visibility: mobx_esm_observable.ref,\n      _itemIndexList: mobx_esm_observable.ref,\n      _itemSingleList: mobx_esm_observable.ref,\n      _itemMinMaxList: mobx_esm_observable.ref,\n      _itemOptionList: mobx_esm_observable.ref,\n      setSearch: action.bound,\n      setCategory: action.bound,\n      setVisibility: action.bound,\n      setSingleItemValue: action.bound,\n      setMinMaxItemValue: action.bound,\n      setOptionItemValue: action.bound,\n      addMinMaxItem: action.bound,\n      configFilters: action.bound,\n      searchField: computed,\n      category: computed,\n      visibility: computed,\n      isEmpty: computed,\n      options: computed,\n      minMaxes: computed\n    });\n  }\n  configFilters(filters) {\n    Object.entries(filters).forEach(([key, value]) => {\n      if (value !== \'OPTION\' && value !== \'MINMAX\') {\n        this._itemSingleList.push(\'\');\n        Object.assign(this._itemIndexList, {\n          [key]: {\n            point: this._itemSingleList.length - 1,\n            type: value\n          }\n        });\n      } else if (value !== \'MINMAX\') {\n        this._itemOptionList.push([]);\n        Object.assign(this._itemIndexList, {\n          [key]: {\n            point: this._itemOptionList.length - 1,\n            type: value\n          }\n        });\n      }\n    });\n    console.log(this._itemOptionList, this._itemIndexList);\n  }\n  setSearch(newValue) {\n    this._searchField = newValue;\n  }\n  setCategory(newValue) {\n    this._category = newValue;\n  }\n  setVisibility(newValue) {\n    this._visibility = newValue;\n  }\n  get searchField() {\n    return this._searchField;\n  }\n  get category() {\n    return this._category;\n  }\n  get visibility() {\n    return this._visibility;\n  }\n  get isEmpty() {\n    return Object.keys(this._itemIndexList).length === 0;\n  }\n  get options() {\n    return this._itemOptionList;\n  }\n  get minMaxes() {\n    return this._itemMinMaxList;\n  }\n  getSingleItemValue(name) {\n    return this._itemSingleList[this._itemIndexList[name].point] || \'\';\n  }\n  getMinMaxItemValue(name) {\n    return this._itemMinMaxList[this._itemIndexList[name].point] || [\'\', \'\'];\n  }\n  getOptionItemValue(name) {\n    return this._itemOptionList[this._itemIndexList[name].point] || [];\n  }\n  isSingle(name) {\n    return this._itemIndexList[name].type !== \'OPTION\' && this._itemIndexList[name].type !== \'MINMAX\';\n  }\n  setSingleItemValue(name, value) {\n    if (this._itemIndexList.hasOwnProperty(name)) {\n      const itemPoint = this._itemIndexList[name].point;\n      if (this.isSingle(name)) {\n        this._itemSingleList[itemPoint] = value;\n        this._itemSingleList = [...this._itemSingleList];\n      }\n    }\n    this._itemSingleList = [...this._itemSingleList];\n  }\n  setMinMaxItemValue(name, value, position) {\n    if (this._itemIndexList.hasOwnProperty(name)) {\n      const itemPoint = this._itemIndexList[name].point;\n      if (this._itemIndexList[name].type === \'MINMAX\') {\n        this._itemMinMaxList[itemPoint][position] = value;\n        this._itemMinMaxList = [...this._itemMinMaxList];\n      }\n    }\n    this._itemMinMaxList = [...this._itemMinMaxList];\n  }\n  addMinMaxItem(name) {\n    this._itemMinMaxList.push([\'\', \'\']);\n    Object.assign(this._itemIndexList, {\n      [name]: {\n        point: this._itemMinMaxList.length - 1,\n        type: \'MINMAX\'\n      }\n    });\n    this._itemMinMaxList = [...this._itemMinMaxList];\n    this._itemIndexList = {\n      ...this._itemIndexList\n    };\n  }\n  setOptionItemValue(name, value) {\n    if (this._itemIndexList.hasOwnProperty(name)) {\n      const itemPoint = this._itemIndexList[name].point;\n      if (this._itemIndexList[name].type === \'OPTION\') {\n        this._itemOptionList[itemPoint] = [...value];\n        this._itemOptionList = [...this._itemOptionList];\n      }\n    }\n    this._itemOptionList = [...this._itemOptionList];\n  }\n  destroy() {\n    this._searchField = \'\';\n    this._category = [];\n    this._visibility = false;\n    this._itemSingleList = [];\n    this._itemMinMaxList = [];\n    this._itemOptionList = [];\n    this._itemIndexList = {};\n  }\n}\n// EXTERNAL MODULE: ./node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[0].use[1]!./node_modules/postcss-loader/dist/cjs.js??ruleSet[1].rules[0].use[2]!./node_modules/sass-loader/dist/cjs.js!./src/components/ContentFilters/ContentFilters.module.scss\nvar ContentFilters_module = __webpack_require__(348);\n;// CONCATENATED MODULE: ./src/components/ContentFilters/ContentFilters.module.scss\n\n      \n      \n      \n      \n      \n      \n      \n      \n      \n\nvar ContentFilters_module_options = {};\n\nContentFilters_module_options.styleTagTransform = (styleTagTransform_default());\nContentFilters_module_options.setAttributes = (setAttributesWithoutAttributes_default());\nContentFilters_module_options.insert = insertBySelector_default().bind(null, "head");\nContentFilters_module_options.domAPI = (styleDomAPI_default());\nContentFilters_module_options.insertStyleElement = (insertStyleElement_default());\n\nvar ContentFilters_module_update = injectStylesIntoStyleTag_default()(ContentFilters_module/* default */.A, ContentFilters_module_options);\n\n\n\n\n       /* harmony default export */ const ContentFilters_ContentFilters_module = (ContentFilters_module/* default */.A && ContentFilters_module/* default */.A.locals ? ContentFilters_module/* default */.A.locals : undefined);\n\n// EXTERNAL MODULE: ./node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[0].use[1]!./node_modules/postcss-loader/dist/cjs.js??ruleSet[1].rules[0].use[2]!./node_modules/sass-loader/dist/cjs.js!./src/components/filters/Filter/Filter.module.scss\nvar Filter_module = __webpack_require__(5172);\n;// CONCATENATED MODULE: ./src/components/filters/Filter/Filter.module.scss\n\n      \n      \n      \n      \n      \n      \n      \n      \n      \n\nvar Filter_module_options = {};\n\nFilter_module_options.styleTagTransform = (styleTagTransform_default());\nFilter_module_options.setAttributes = (setAttributesWithoutAttributes_default());\nFilter_module_options.insert = insertBySelector_default().bind(null, "head");\nFilter_module_options.domAPI = (styleDomAPI_default());\nFilter_module_options.insertStyleElement = (insertStyleElement_default());\n\nvar Filter_module_update = injectStylesIntoStyleTag_default()(Filter_module/* default */.A, Filter_module_options);\n\n\n\n\n       /* harmony default export */ const Filter_Filter_module = (Filter_module/* default */.A && Filter_module/* default */.A.locals ? Filter_module/* default */.A.locals : undefined);\n\n;// CONCATENATED MODULE: ./src/components/filters/Filter/Filter.tsx\n\n\n\nconst Filter = props => {\n  return /*#__PURE__*/react.createElement("div", {\n    className: Filter_Filter_module[\'filter\']\n  }, /*#__PURE__*/react.createElement(Text_Text, {\n    view: "p-16",\n    weight: "bold"\n  }, props.name), /*#__PURE__*/react.createElement("div", {\n    className: Filter_Filter_module[\'filter__form\']\n  }, props.children));\n};\n/* harmony default export */ const Filter_Filter = (Filter);\n;// CONCATENATED MODULE: ./src/components/filters/Filter/index.ts\n\n;// CONCATENATED MODULE: ./src/components/filters/MultiStringFilter/MultiStringFilter.tsx\n\n\n\nconst MultiStringFilter = props => {\n  const {\n    filterName,\n    ...multiProps\n  } = props;\n  return /*#__PURE__*/react.createElement(Filter_Filter, {\n    name: filterName\n  }, /*#__PURE__*/react.createElement(MultiDropdown_MultiDropdown, multiProps));\n};\n/* harmony default export */ const MultiStringFilter_MultiStringFilter = (MultiStringFilter);\n;// CONCATENATED MODULE: ./src/components/filters/MultiStringFilter/index.ts\n\n;// CONCATENATED MODULE: ./src/components/filters/StringFilter/StringFilter.tsx\n\n\n\n\nconst StringFilter = props => {\n  const {\n    filterName,\n    filterSettings,\n    ...inputProps\n  } = props;\n  return /*#__PURE__*/react.createElement(Filter_Filter, {\n    name: filterName\n  }, /*#__PURE__*/react.createElement("div", {\n    className: "filter-string"\n  }, /*#__PURE__*/react.createElement(Input_Input, inputProps), /*#__PURE__*/react.createElement(Text_Text, {\n    color: "secondary"\n  }, filterSettings.help)));\n};\n/* harmony default export */ const StringFilter_StringFilter = (StringFilter);\n;// CONCATENATED MODULE: ./src/components/filters/StringFilter/index.ts\n\n;// CONCATENATED MODULE: ./src/components/filters/NumberFilter/NumberFilter.tsx\n\n\n\n\n\nconst NumberFilter = props => {\n  const {\n    filterName,\n    filterSettings,\n    ...inputProps\n  } = props;\n  return /*#__PURE__*/react.createElement(Filter_Filter, {\n    name: filterName\n  }, /*#__PURE__*/react.createElement("div", {\n    className: "filter-number"\n  }, /*#__PURE__*/react.createElement(Input_Input, extends_extends({}, inputProps, {\n    type: "number"\n  })), /*#__PURE__*/react.createElement(Text_Text, {\n    color: "secondary"\n  }, filterSettings.unit)));\n};\n/* harmony default export */ const NumberFilter_NumberFilter = (NumberFilter);\n;// CONCATENATED MODULE: ./src/components/filters/NumberFilter/index.ts\n\n;// CONCATENATED MODULE: ./src/components/icons/CheckIcon/CheckIcon.tsx\n\n\n\nconst CheckIcon = props => {\n  return /*#__PURE__*/react.createElement(Icon_Icon, props, /*#__PURE__*/react.createElement("path", {\n    className: styles_customStyles_module[\'icon_stroke_color_\' + (props.color || \'inherit\')],\n    d: "M4 11.6129L9.87755 18L20 7",\n    strokeWidth: "2"\n  }));\n};\n/* harmony default export */ const CheckIcon_CheckIcon = (CheckIcon);\n;// CONCATENATED MODULE: ./src/components/icons/CheckIcon/index.ts\n\n// EXTERNAL MODULE: ./node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[0].use[1]!./node_modules/postcss-loader/dist/cjs.js??ruleSet[1].rules[0].use[2]!./node_modules/sass-loader/dist/cjs.js!./src/components/CheckBox/CheckBox.module.scss\nvar CheckBox_module = __webpack_require__(5566);\n;// CONCATENATED MODULE: ./src/components/CheckBox/CheckBox.module.scss\n\n      \n      \n      \n      \n      \n      \n      \n      \n      \n\nvar CheckBox_module_options = {};\n\nCheckBox_module_options.styleTagTransform = (styleTagTransform_default());\nCheckBox_module_options.setAttributes = (setAttributesWithoutAttributes_default());\nCheckBox_module_options.insert = insertBySelector_default().bind(null, "head");\nCheckBox_module_options.domAPI = (styleDomAPI_default());\nCheckBox_module_options.insertStyleElement = (insertStyleElement_default());\n\nvar CheckBox_module_update = injectStylesIntoStyleTag_default()(CheckBox_module/* default */.A, CheckBox_module_options);\n\n\n\n\n       /* harmony default export */ const CheckBox_CheckBox_module = (CheckBox_module/* default */.A && CheckBox_module/* default */.A.locals ? CheckBox_module/* default */.A.locals : undefined);\n\n;// CONCATENATED MODULE: ./src/components/CheckBox/CheckBox.tsx\n\n\n\n\n\n\nconst CheckBox = props => {\n  const onChangeCheckbox = e => {\n    props.onChange(e.target.checked);\n  };\n  const idName = \'customcheckbox\';\n  return /*#__PURE__*/react.createElement("div", {\n    className: CheckBox_CheckBox_module[\'cdiv\']\n  }, /*#__PURE__*/react.createElement("input", extends_extends({}, props, {\n    checked: props.checked,\n    onChange: onChangeCheckbox,\n    className: CheckBox_CheckBox_module[\'cdiv__checkbox\'],\n    type: "checkbox",\n    id: idName\n  })), /*#__PURE__*/react.createElement("label", {\n    htmlFor: idName,\n    className: classnames_default()({\n      [props.className || \'\']: true,\n      [CheckBox_CheckBox_module[\'cdiv__label\']]: true,\n      [CheckBox_CheckBox_module[\'cdiv__label_disabled\']]: props.disabled\n    })\n  }, props.checked && /*#__PURE__*/react.createElement(CheckIcon_CheckIcon, {\n    color: props.disabled ? \'secondary\' : \'accent\'\n  })));\n};\n/* harmony default export */ const CheckBox_CheckBox = (/*#__PURE__*/(0,react.memo)(CheckBox));\n;// CONCATENATED MODULE: ./src/components/CheckBox/index.ts\n\n\n;// CONCATENATED MODULE: ./src/components/filters/BooleanFilter/BooleanFilter.tsx\n\n\n\nconst BooleanFilter = props => {\n  const {\n    filterName,\n    ...checkboxProps\n  } = props;\n  return /*#__PURE__*/react.createElement(Filter_Filter, {\n    name: filterName\n  }, /*#__PURE__*/react.createElement(CheckBox_CheckBox, checkboxProps));\n};\n/* harmony default export */ const BooleanFilter_BooleanFilter = (BooleanFilter);\n;// CONCATENATED MODULE: ./src/components/filters/BooleanFilter/index.ts\n\n;// CONCATENATED MODULE: ./src/components/ContentFilters/ContentFilters.tsx\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nconst ContentFilters = props => {\n  const filter = useLocalStore_useLocalStore(() => new FilterStore());\n  const getFiltersForStore = () => {\n    if (props.otherFilters) {\n      let filterObj = {};\n      Object.entries(props.otherFilters).forEach(([key, value]) => {\n        Object.assign(filterObj, {\n          [key]: value.type\n        });\n      });\n      return filterObj;\n    }\n    return {};\n  };\n  const generateOtherFilters = () => {\n    if (props.otherFilters) {\n      return Object.entries(props.otherFilters).map(([key, filt]) => {\n        if (filt.type === \'OPTION\') {\n          const values = filter.getOptionItemValue(key);\n          const valueStr = encodeURIComponent(values.map(opt => opt.value).join(\',\'));\n          return [key, valueStr];\n        }\n        if (filt.type !== \'MINMAX\') {\n          const value = filter.getSingleItemValue(key);\n          return [key, value];\n        }\n        return [\'\', \'\'];\n      });\n    }\n    return [];\n  };\n  (0,react.useEffect)(() => {\n    SearchParamsStore_SearchParamsStore.getSearchParams();\n    if (props.otherFilters) {\n      filter.configFilters(getFiltersForStore());\n    }\n  }, []);\n  (0,react.useEffect)(() => {\n    filter.setSearch(SearchParamsStore_SearchParamsStore.getParam(\'query\'));\n    if (props.categoryTag && props.categoryOptions) {\n      filter.setCategory(SearchParamsStore_SearchParamsStore.getMultipleParam(props.categoryTag, props.categoryOptions));\n    }\n    if (props.otherFilters) {\n      Object.entries(props.otherFilters).map(([key, value]) => {\n        if (value.type === \'OPTION\') {\n          filter.setOptionItemValue(key, SearchParamsStore_SearchParamsStore.getMultipleParam(key, value.options));\n        } else if (value.type !== \'MINMAX\') {\n          filter.setSingleItemValue(key, SearchParamsStore_SearchParamsStore.getParam(key));\n        }\n      });\n    }\n  }, [SearchParamsStore_SearchParamsStore.searchParams, filter]);\n  const changeSearchParams = () => {\n    SearchParamsStore_SearchParamsStore.changeSearchParamsForFilters(filter.searchField, props.categoryTag, filter.category, generateOtherFilters());\n  };\n  const onChangeInputHandle = value => {\n    filter.setSearch(value);\n  };\n  const onChangeCategory = value => {\n    filter.setCategory(value);\n  };\n  const getTitleWithInit = (value, initValue) => {\n    if (value.length > 0) {\n      return value.map(elem => elem.value).join(\', \');\n    }\n    return initValue;\n  };\n  const getTitleCategory = value => {\n    if (props.categoryPlaceholder) {\n      return getTitleWithInit(value, props.categoryPlaceholder);\n    }\n    return \'\';\n  };\n  const showMoreFilters = () => {\n    filter.setVisibility(true);\n  };\n  const hideMoreFilters = () => {\n    filter.setVisibility(false);\n  };\n  return /*#__PURE__*/react.createElement("div", {\n    className: ContentFilters_ContentFilters_module["content-filters"]\n  }, /*#__PURE__*/react.createElement("div", {\n    className: ContentFilters_ContentFilters_module["content-filters__search"]\n  }, /*#__PURE__*/react.createElement(Input_Input, {\n    className: ContentFilters_ContentFilters_module["content-filters__search__input"],\n    value: filter.searchField,\n    onChange: onChangeInputHandle,\n    placeholder: props.inputPlaceholder || \'Enter dishes\'\n  }), /*#__PURE__*/react.createElement(Button_Button, {\n    onClick: changeSearchParams\n  }, /*#__PURE__*/react.createElement(SearchIcon_SearchIcon, {\n    width: "25",\n    height: "24"\n  }))), /*#__PURE__*/react.createElement("div", {\n    className: ContentFilters_ContentFilters_module["content-filters__category"]\n  }, props.otherFilters ? /*#__PURE__*/react.createElement(Text_Text, {\n    color: "accent",\n    view: "p-16",\n    tag: "div",\n    className: ContentFilters_ContentFilters_module["content-filters__category__shower"],\n    onCLick: showMoreFilters\n  }, /*#__PURE__*/react.createElement("u", null, "Show more filters")) : /*#__PURE__*/react.createElement("span", null), props.categoryOptions && props.categoryPlaceholder && props.categoryTag && /*#__PURE__*/react.createElement(MultiDropdown_MultiDropdown, {\n    className: ContentFilters_ContentFilters_module["content-filters__category__block"],\n    options: props.categoryOptions,\n    value: filter.category,\n    onChange: onChangeCategory,\n    getTitle: getTitleCategory\n  })), props.otherFilters && filter.visibility && !filter.isEmpty && /*#__PURE__*/react.createElement("div", {\n    className: ContentFilters_ContentFilters_module["content-filters__other"]\n  }, /*#__PURE__*/react.createElement(Text_Text, {\n    tag: "div",\n    view: "p-20",\n    className: ContentFilters_ContentFilters_module["content-filters__other__header"]\n  }, "Other Filters"), /*#__PURE__*/react.createElement("div", {\n    className: ContentFilters_ContentFilters_module["content-filters__other__multi"]\n  }, Object.entries(props.otherFilters).filter(([key, val]) => val.type === \'OPTION\').map(([key, value]) => {\n    if (value.type === \'OPTION\') {\n      return /*#__PURE__*/react.createElement(MultiStringFilter_MultiStringFilter, {\n        key: key,\n        filterName: key,\n        options: value.options,\n        value: filter.getOptionItemValue(key),\n        onChange: newVal => {\n          filter.setOptionItemValue(key, newVal);\n        },\n        getTitle: newVal => {\n          return getTitleWithInit(newVal, value.placeholder);\n        },\n        selectMode: value.selectMode\n      });\n    }\n  })), /*#__PURE__*/react.createElement("div", {\n    className: ContentFilters_ContentFilters_module["content-filters__other__string"]\n  }, Object.entries(props.otherFilters).filter(([key, val]) => val.type === \'STRING\').map(([key, value]) => {\n    if (value.type === \'STRING\') {\n      return /*#__PURE__*/react.createElement(StringFilter_StringFilter, {\n        key: key,\n        filterName: key,\n        filterSettings: {\n          help: \'\'\n        },\n        placeholder: value.placeholder,\n        value: filter.getSingleItemValue(key),\n        onChange: value => {\n          filter.setSingleItemValue(key, value);\n        }\n      });\n    }\n  })), /*#__PURE__*/react.createElement("div", {\n    className: ContentFilters_ContentFilters_module["content-filters__other__number"]\n  }, Object.entries(props.otherFilters).filter(([key, val]) => val.type === \'NUMBER\').map(([key, value]) => {\n    if (value.type === \'NUMBER\') {\n      return /*#__PURE__*/react.createElement(NumberFilter_NumberFilter, {\n        key: key,\n        filterName: key,\n        filterSettings: {\n          unit: \'\'\n        },\n        placeholder: value.placeholder,\n        value: filter.getSingleItemValue(key),\n        onChange: value => {\n          filter.setSingleItemValue(key, value);\n        }\n      });\n    }\n  })), /*#__PURE__*/react.createElement("div", {\n    className: ContentFilters_ContentFilters_module["content-filters__other__boolean"]\n  }, Object.entries(props.otherFilters).filter(([key, val]) => val.type === \'BOOLEAN\').map(([key, value]) => {\n    if (value.type === \'BOOLEAN\') {\n      return /*#__PURE__*/react.createElement(BooleanFilter_BooleanFilter, {\n        key: key,\n        filterName: key,\n        checked: filter.getSingleItemValue(key) === \'true\',\n        onChange: checked => {\n          console.log(filter.getSingleItemValue(key));\n          filter.setSingleItemValue(key, checked.toString());\n        }\n      });\n    }\n  })), /*#__PURE__*/react.createElement("div", {\n    className: ContentFilters_ContentFilters_module["content-filters__other__hide"]\n  }, /*#__PURE__*/react.createElement(Button_Button, {\n    onClick: () => {\n      hideMoreFilters();\n    }\n  }, "hide filters"))));\n};\n/* harmony default export */ const ContentFilters_ContentFilters = (observer(ContentFilters));\n;// CONCATENATED MODULE: ./src/components/ContentFilters/index.ts\n\n;// CONCATENATED MODULE: ./src/App/pages/Recipes/components/Content/ContentHeader/ContentHeader.tsx\n\n\n\n\nconst ContentHeader = () => {\n  return /*#__PURE__*/react.createElement(Text_Text, {\n    className: styles_customStyles_module[\'text-align-center\'],\n    view: "p-20",\n    tag: "div"\n  }, "Find the perfect food and", \' \', /*#__PURE__*/react.createElement("u", null, "drink ideas"), \' \', "for every occasion, from", \' \', /*#__PURE__*/react.createElement("u", null, "weeknight dinners"), " to", \' \', /*#__PURE__*/react.createElement("u", null, "holiday feasts"), ".");\n};\n/* harmony default export */ const ContentHeader_ContentHeader = (/*#__PURE__*/(0,react.memo)(ContentHeader));\n;// CONCATENATED MODULE: ./src/App/pages/Recipes/components/Content/ContentHeader/index.ts\n\n// EXTERNAL MODULE: ./node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[0].use[1]!./node_modules/postcss-loader/dist/cjs.js??ruleSet[1].rules[0].use[2]!./node_modules/sass-loader/dist/cjs.js!./src/components/Card/Card.module.scss\nvar Card_module = __webpack_require__(2652);\n;// CONCATENATED MODULE: ./src/components/Card/Card.module.scss\n\n      \n      \n      \n      \n      \n      \n      \n      \n      \n\nvar Card_module_options = {};\n\nCard_module_options.styleTagTransform = (styleTagTransform_default());\nCard_module_options.setAttributes = (setAttributesWithoutAttributes_default());\nCard_module_options.insert = insertBySelector_default().bind(null, "head");\nCard_module_options.domAPI = (styleDomAPI_default());\nCard_module_options.insertStyleElement = (insertStyleElement_default());\n\nvar Card_module_update = injectStylesIntoStyleTag_default()(Card_module/* default */.A, Card_module_options);\n\n\n\n\n       /* harmony default export */ const Card_Card_module = (Card_module/* default */.A && Card_module/* default */.A.locals ? Card_module/* default */.A.locals : undefined);\n\n;// CONCATENATED MODULE: ./src/components/Card/Card.tsx\n\n\n\n\n\nconst Card = props => {\n  return /*#__PURE__*/react.createElement("div", {\n    className: classnames_default()({\n      [props.className || \'\']: true,\n      [Card_Card_module.card]: true\n    }),\n    onClick: props.onClick\n  }, /*#__PURE__*/react.createElement("img", {\n    className: Card_Card_module[\'card__img\'],\n    alt: "\\u0442\\u043E\\u0432\\u0430\\u0440",\n    src: props.image\n  }), /*#__PURE__*/react.createElement("div", {\n    className: Card_Card_module[\'card__info\']\n  }, /*#__PURE__*/react.createElement("div", {\n    className: Card_Card_module[\'card__info__text\']\n  }, props.captionSlot && /*#__PURE__*/react.createElement(Text_Text, {\n    tag: "p",\n    view: "p-14",\n    weight: "medium",\n    color: "secondary"\n  }, props.captionSlot), /*#__PURE__*/react.createElement(Text_Text, {\n    className: Card_Card_module[\'card__info__text__title\'],\n    tag: "p",\n    view: "p-20",\n    weight: "medium"\n  }, props.title), /*#__PURE__*/react.createElement(Text_Text, {\n    className: Card_Card_module[\'card__info__text__subtitle\'],\n    tag: "p",\n    view: "p-16",\n    color: "secondary"\n  }, props.subtitle)), /*#__PURE__*/react.createElement("div", {\n    className: Card_Card_module[\'card__info__slot\']\n  }, props.contentSlot && /*#__PURE__*/react.createElement(Text_Text, {\n    className: Card_Card_module[\'card__info__slot__content\'],\n    tag: "div",\n    view: "p-18",\n    weight: "bold"\n  }, props.contentSlot), props.actionSlot)));\n};\n/* harmony default export */ const Card_Card = (/*#__PURE__*/(0,react.memo)(Card));\n;// CONCATENATED MODULE: ./src/components/Card/index.ts\n\n\n;// CONCATENATED MODULE: ./src/components/icons/TimeIcon/TimeIcon.tsx\n\n\n\nconst TimeIcon = props => {\n  return /*#__PURE__*/react.createElement(Icon_Icon, extends_extends({}, props, {\n    viewBox: "0 0 14 14",\n    width: "14",\n    height: "14"\n  }), /*#__PURE__*/react.createElement("path", {\n    d: "M11.1818 1L13 2.81818M10.8182 10.8182L12.2727 13M2.81818 1L1 2.81818M3.18182 10.8182L1.72727 13M6.81818 3.90909V7.18182H8.63636M12.2727 7C12.2727 9.91207 9.91207 12.2727 7 12.2727C4.08795 12.2727 1.72727 9.91207 1.72727 7C1.72727 4.08796 4.08795 1.72727 7 1.72727C9.91207 1.72727 12.2727 4.08796 12.2727 7Z",\n    stroke: "#B5460F",\n    strokeWidth: "1.5",\n    strokeLinecap: "round",\n    strokeLinejoin: "round"\n  }));\n};\n/* harmony default export */ const TimeIcon_TimeIcon = (TimeIcon);\n;// CONCATENATED MODULE: ./src/components/icons/TimeIcon/index.ts\n\n// EXTERNAL MODULE: ./node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[0].use[1]!./node_modules/postcss-loader/dist/cjs.js??ruleSet[1].rules[0].use[2]!./node_modules/sass-loader/dist/cjs.js!./src/components/RecipeCard/components/RecipeCardCaption/RecipeCardCaption.module.scss\nvar RecipeCardCaption_module = __webpack_require__(9676);\n;// CONCATENATED MODULE: ./src/components/RecipeCard/components/RecipeCardCaption/RecipeCardCaption.module.scss\n\n      \n      \n      \n      \n      \n      \n      \n      \n      \n\nvar RecipeCardCaption_module_options = {};\n\nRecipeCardCaption_module_options.styleTagTransform = (styleTagTransform_default());\nRecipeCardCaption_module_options.setAttributes = (setAttributesWithoutAttributes_default());\nRecipeCardCaption_module_options.insert = insertBySelector_default().bind(null, "head");\nRecipeCardCaption_module_options.domAPI = (styleDomAPI_default());\nRecipeCardCaption_module_options.insertStyleElement = (insertStyleElement_default());\n\nvar RecipeCardCaption_module_update = injectStylesIntoStyleTag_default()(RecipeCardCaption_module/* default */.A, RecipeCardCaption_module_options);\n\n\n\n\n       /* harmony default export */ const RecipeCardCaption_RecipeCardCaption_module = (RecipeCardCaption_module/* default */.A && RecipeCardCaption_module/* default */.A.locals ? RecipeCardCaption_module/* default */.A.locals : undefined);\n\n;// CONCATENATED MODULE: ./src/components/RecipeCard/components/RecipeCardCaption/RecipeCardCaption.tsx\n\n\n\nconst RecipeCardCaption = ({\n  readyInMinutes\n}) => {\n  return /*#__PURE__*/react.createElement("span", {\n    className: RecipeCardCaption_RecipeCardCaption_module["recipe-card-caption"]\n  }, /*#__PURE__*/react.createElement(TimeIcon_TimeIcon, null), /*#__PURE__*/react.createElement("span", null, readyInMinutes, " minutes"));\n};\n/* harmony default export */ const RecipeCardCaption_RecipeCardCaption = (RecipeCardCaption);\n;// CONCATENATED MODULE: ./src/components/RecipeCard/components/RecipeCardCaption/index.ts\n\n;// CONCATENATED MODULE: ./src/store/LocalStorage/LocalStorage.tsx\n\nclass LocalStorage {\n  _prefix = \'recipe\';\n  _fullPrefix = \'recipes\';\n  _savedCardRecipes = [];\n  constructor() {\n    makeObservable(this, {\n      _savedCardRecipes: mobx_esm_observable.ref,\n      _fullPrefix: mobx_esm_observable,\n      deleteRecipe: action.bound,\n      addSavedRecipe: action.bound,\n      checkRecipeInSaved: action.bound,\n      loadingSaved: action.bound,\n      cards: computed\n    });\n  }\n  getItemName(id, ...args) {\n    return [this._prefix, id, ...args].join(\'-\');\n  }\n  addRecipeValues(recipe) {\n    localStorage.setItem(this.getItemName(recipe.id, \'readyInMinutes\'), recipe.readyInMinutes.toString());\n    localStorage.setItem(this.getItemName(recipe.id, \'title\'), recipe.title);\n    localStorage.setItem(this.getItemName(recipe.id, \'describe\'), recipe.describe);\n    localStorage.setItem(this.getItemName(recipe.id, \'kcal\'), recipe.kcal);\n    localStorage.setItem(this.getItemName(recipe.id, \'image\'), recipe.image);\n  }\n  getSavedRecipe(id) {\n    let cardRecipe = {};\n    cardRecipe.id = Number(id);\n    cardRecipe.readyInMinutes = Number(localStorage.getItem(this.getItemName(id, \'readyInMinutes\')) || \'0\');\n    cardRecipe.title = localStorage.getItem(this.getItemName(id, \'title\')) || \'\';\n    cardRecipe.describe = localStorage.getItem(this.getItemName(id, \'describe\')) || \'\';\n    cardRecipe.kcal = localStorage.getItem(this.getItemName(id, \'kcal\')) || \'\';\n    cardRecipe.image = localStorage.getItem(this.getItemName(id, \'image\')) || \'\';\n    return cardRecipe;\n  }\n  getAllRecipes() {\n    const recipeList = localStorage.getItem(this._fullPrefix) || \'\';\n    if (recipeList !== \'\') {\n      const idList = recipeList.split(\',\');\n      return idList.map(strId => {\n        return this.getSavedRecipe(strId);\n      });\n    }\n    return [];\n  }\n  checkRecipeInSaved(id) {\n    const index = this._savedCardRecipes.map(card => card.id).indexOf(id);\n    return index !== -1;\n  }\n  deleteRecipe(id) {\n    const recipeList = localStorage.getItem(this._fullPrefix) || \'\';\n    const idList = recipeList.split(\',\');\n    const index = idList.indexOf(id.toString());\n    if (index !== -1) {\n      idList.splice(index, 1);\n    }\n    localStorage.setItem(this._fullPrefix, [...idList].join(\',\'));\n    this.loadingSaved();\n  }\n  addSavedRecipe(recipe) {\n    const recipeList = localStorage.getItem(this._fullPrefix);\n    if (!recipeList) {\n      localStorage.setItem(this._fullPrefix, recipe.id.toString());\n    } else {\n      localStorage.setItem(this._fullPrefix, [recipeList, recipe.id.toString()].join(\',\'));\n    }\n    this.addRecipeValues(recipe);\n    this.loadingSaved();\n  }\n  loadingSaved() {\n    this._savedCardRecipes = this.getAllRecipes();\n  }\n  get cards() {\n    return this._savedCardRecipes;\n  }\n  destroy() {\n    this._savedCardRecipes = [];\n  }\n}\n/* harmony default export */ const LocalStorage_LocalStorage = (new LocalStorage());\n;// CONCATENATED MODULE: ./src/store/LocalStorage/index.ts\n\n;// CONCATENATED MODULE: ./src/components/RecipeCard/RecipeCard.tsx\n\n\n\n\n\n\n\n\nconst RecipeCard = ({\n  mode = \'RECIPES\',\n  recipe\n}) => {\n  const navigate = dist_useNavigate();\n  const {\n    addSavedRecipe,\n    checkRecipeInSaved,\n    deleteRecipe,\n    cards\n  } = LocalStorage_LocalStorage;\n  const [isSaved, setIsSaved] = (0,react.useState)(checkRecipeInSaved(recipe.id));\n  (0,react.useEffect)(() => {\n    setIsSaved(checkRecipeInSaved(recipe.id));\n  }, [cards]);\n  const navigateToRecipePage = id => {\n    navigate(\'/recipe/\' + id);\n  };\n  const getButtonWithCallBack = (text, callback) => {\n    return /*#__PURE__*/react.createElement(Button_Button, {\n      onClick: e => {\n        e.stopPropagation();\n        callback();\n      }\n    }, text);\n  };\n  const getButtonInRecipeList = recipe => {\n    if (!isSaved) {\n      return getButtonWithCallBack(\'Save\', () => {\n        addSavedRecipe(recipe);\n      });\n    }\n    return getButtonWithCallBack(\'In saves\', () => {\n      navigate(\'/saved\');\n    });\n  };\n  const getActionSlotByMode = recipe => {\n    switch (mode) {\n      case \'RECIPES\':\n        return getButtonInRecipeList(recipe);\n      case \'SAVED\':\n        return getButtonWithCallBack(\'Delete\', () => {\n          deleteRecipe(recipe.id);\n        });\n    }\n  };\n  return /*#__PURE__*/react.createElement(Card_Card, {\n    image: recipe.image,\n    title: recipe.title,\n    subtitle: recipe.describe,\n    contentSlot: recipe.kcal,\n    onClick: () => {\n      navigateToRecipePage(recipe.id);\n    },\n    captionSlot: /*#__PURE__*/react.createElement(RecipeCardCaption_RecipeCardCaption, {\n      readyInMinutes: recipe.readyInMinutes\n    }),\n    actionSlot: getActionSlotByMode(recipe)\n  });\n};\n/* harmony default export */ const RecipeCard_RecipeCard = (observer(RecipeCard));\n;// CONCATENATED MODULE: ./src/components/RecipeCard/index.ts\n\n// EXTERNAL MODULE: ./node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[0].use[1]!./node_modules/postcss-loader/dist/cjs.js??ruleSet[1].rules[0].use[2]!./node_modules/sass-loader/dist/cjs.js!./src/App/pages/Recipes/components/Content/Content.module.scss\nvar Content_module = __webpack_require__(5181);\n;// CONCATENATED MODULE: ./src/App/pages/Recipes/components/Content/Content.module.scss\n\n      \n      \n      \n      \n      \n      \n      \n      \n      \n\nvar Content_module_options = {};\n\nContent_module_options.styleTagTransform = (styleTagTransform_default());\nContent_module_options.setAttributes = (setAttributesWithoutAttributes_default());\nContent_module_options.insert = insertBySelector_default().bind(null, "head");\nContent_module_options.domAPI = (styleDomAPI_default());\nContent_module_options.insertStyleElement = (insertStyleElement_default());\n\nvar Content_module_update = injectStylesIntoStyleTag_default()(Content_module/* default */.A, Content_module_options);\n\n\n\n\n       /* harmony default export */ const Content_Content_module = (Content_module/* default */.A && Content_module/* default */.A.locals ? Content_module/* default */.A.locals : undefined);\n\n;// CONCATENATED MODULE: ./src/App/pages/Recipes/components/Content/Content.tsx\n\n\n\n\n\n\n\n\n\n\n\n\nconst Content = () => {\n  const recipesStore = useLocalStore_useLocalStore(() => new RecipeListStore());\n  (0,react.useEffect)(() => {\n    recipesStore.loadingList(recipesStore.getUrl(SearchParamsStore_SearchParamsStore.getOffset(), SearchParamsStore_SearchParamsStore.getParamPair(\'query\'), SearchParamsStore_SearchParamsStore.getParamPair(\'type\'), ...Object.keys(recipesFilters).map(key => {\n      return SearchParamsStore_SearchParamsStore.getParamPair(key);\n    })));\n  }, [SearchParamsStore_SearchParamsStore.searchParams, recipesStore]);\n  return /*#__PURE__*/react.createElement("div", {\n    className: Content_Content_module["content"]\n  }, /*#__PURE__*/react.createElement(ContentHeader_ContentHeader, null), /*#__PURE__*/react.createElement(ContentFilters_ContentFilters, {\n    categoryTag: "type",\n    categoryOptions: mealTypesOptions,\n    categoryPlaceholder: "Categories",\n    otherFilters: recipesFilters\n  }), /*#__PURE__*/react.createElement(ListShower_ListShower, {\n    status: recipesStore.status,\n    totalCount: recipesStore.total\n  }, recipesStore.results.map(recipe => {\n    return /*#__PURE__*/react.createElement(RecipeCard_RecipeCard, {\n      key: recipe.id,\n      recipe: recipe\n    });\n  })));\n};\n/* harmony default export */ const Content_Content = (observer(Content));\n;// CONCATENATED MODULE: ./src/App/pages/Recipes/components/Content/index.ts\n\n;// CONCATENATED MODULE: ./src/assets/PreviewImage.svg\nconst PreviewImage_namespaceObject = __webpack_require__.p + "efa59303053309290c71.svg";\n// EXTERNAL MODULE: ./node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[0].use[1]!./node_modules/postcss-loader/dist/cjs.js??ruleSet[1].rules[0].use[2]!./node_modules/sass-loader/dist/cjs.js!./src/App/pages/Recipes/components/Preview/Preview.module.scss\nvar Preview_module = __webpack_require__(337);\n;// CONCATENATED MODULE: ./src/App/pages/Recipes/components/Preview/Preview.module.scss\n\n      \n      \n      \n      \n      \n      \n      \n      \n      \n\nvar Preview_module_options = {};\n\nPreview_module_options.styleTagTransform = (styleTagTransform_default());\nPreview_module_options.setAttributes = (setAttributesWithoutAttributes_default());\nPreview_module_options.insert = insertBySelector_default().bind(null, "head");\nPreview_module_options.domAPI = (styleDomAPI_default());\nPreview_module_options.insertStyleElement = (insertStyleElement_default());\n\nvar Preview_module_update = injectStylesIntoStyleTag_default()(Preview_module/* default */.A, Preview_module_options);\n\n\n\n\n       /* harmony default export */ const Preview_Preview_module = (Preview_module/* default */.A && Preview_module/* default */.A.locals ? Preview_module/* default */.A.locals : undefined);\n\n;// CONCATENATED MODULE: ./src/App/pages/Recipes/components/Preview/Preview.tsx\n\n\n\n\nconst Preview = () => {\n  return /*#__PURE__*/react.createElement("div", {\n    className: Preview_Preview_module.preview\n  }, /*#__PURE__*/react.createElement("img", {\n    src: PreviewImage_namespaceObject,\n    alt: "preview"\n  }));\n};\n/* harmony default export */ const Preview_Preview = (/*#__PURE__*/(0,react.memo)(Preview));\n;// CONCATENATED MODULE: ./src/App/pages/Recipes/components/Preview/index.ts\n\n// EXTERNAL MODULE: ./node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[0].use[1]!./node_modules/postcss-loader/dist/cjs.js??ruleSet[1].rules[0].use[2]!./node_modules/sass-loader/dist/cjs.js!./src/App/pages/Recipes/Recipes.module.scss\nvar Recipes_module = __webpack_require__(7726);\n;// CONCATENATED MODULE: ./src/App/pages/Recipes/Recipes.module.scss\n\n      \n      \n      \n      \n      \n      \n      \n      \n      \n\nvar Recipes_module_options = {};\n\nRecipes_module_options.styleTagTransform = (styleTagTransform_default());\nRecipes_module_options.setAttributes = (setAttributesWithoutAttributes_default());\nRecipes_module_options.insert = insertBySelector_default().bind(null, "head");\nRecipes_module_options.domAPI = (styleDomAPI_default());\nRecipes_module_options.insertStyleElement = (insertStyleElement_default());\n\nvar Recipes_module_update = injectStylesIntoStyleTag_default()(Recipes_module/* default */.A, Recipes_module_options);\n\n\n\n\n       /* harmony default export */ const Recipes_Recipes_module = (Recipes_module/* default */.A && Recipes_module/* default */.A.locals ? Recipes_module/* default */.A.locals : undefined);\n\n;// CONCATENATED MODULE: ./src/App/pages/Recipes/Recipes.tsx\n\n\n\n\nconst Recipes = () => {\n  return /*#__PURE__*/react.createElement("div", {\n    className: Recipes_Recipes_module.recipes\n  }, /*#__PURE__*/react.createElement(Preview_Preview, null), /*#__PURE__*/react.createElement(Content_Content, null));\n};\n/* harmony default export */ const Recipes_Recipes = (Recipes);\n;// CONCATENATED MODULE: ./src/App/pages/Recipes/index.ts\n\n// EXTERNAL MODULE: ./node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[0].use[1]!./node_modules/postcss-loader/dist/cjs.js??ruleSet[1].rules[0].use[2]!./node_modules/sass-loader/dist/cjs.js!./src/components/PageTemplate/PageTemplate.module.scss\nvar PageTemplate_module = __webpack_require__(8526);\n;// CONCATENATED MODULE: ./src/components/PageTemplate/PageTemplate.module.scss\n\n      \n      \n      \n      \n      \n      \n      \n      \n      \n\nvar PageTemplate_module_options = {};\n\nPageTemplate_module_options.styleTagTransform = (styleTagTransform_default());\nPageTemplate_module_options.setAttributes = (setAttributesWithoutAttributes_default());\nPageTemplate_module_options.insert = insertBySelector_default().bind(null, "head");\nPageTemplate_module_options.domAPI = (styleDomAPI_default());\nPageTemplate_module_options.insertStyleElement = (insertStyleElement_default());\n\nvar PageTemplate_module_update = injectStylesIntoStyleTag_default()(PageTemplate_module/* default */.A, PageTemplate_module_options);\n\n\n\n\n       /* harmony default export */ const PageTemplate_PageTemplate_module = (PageTemplate_module/* default */.A && PageTemplate_module/* default */.A.locals ? PageTemplate_module/* default */.A.locals : undefined);\n\n;// CONCATENATED MODULE: ./src/components/PageTemplate/PageTemplate.tsx\n\n\n\nconst PageTemplate = props => {\n  return /*#__PURE__*/react.createElement("div", {\n    className: PageTemplate_PageTemplate_module[\'page-template\']\n  }, /*#__PURE__*/react.createElement(Text_Text, {\n    view: "title",\n    className: PageTemplate_PageTemplate_module[\'page-template__name\']\n  }, props.headerName), /*#__PURE__*/react.createElement("div", {\n    className: PageTemplate_PageTemplate_module[\'page-template__content\']\n  }, props.children));\n};\n/* harmony default export */ const PageTemplate_PageTemplate = (PageTemplate);\n;// CONCATENATED MODULE: ./src/components/PageTemplate/index.ts\n\n;// CONCATENATED MODULE: ./src/store/IngredientListStore/IngredientListStore.tsx\n\n\nclass IngredientListStore extends BaseListStore {\n  getUrl(offset, query, ...other) {\n    const params = {\n      number: pageElementCount,\n      offset: offset,\n      query: query\n    };\n    const pathUrl = \'search?\';\n    let pathParams = Object.entries(params).map(param => param.join(\'=\'));\n    other.forEach(element => {\n      if (element[1] !== null) {\n        pathParams.push(element.join(\'=\'));\n      }\n    });\n    pathParams.push([\'apiKey\', apiKey].join(\'=\'));\n    const url = urlPrefix + \'food/ingredients/\' + pathUrl + [...pathParams].join(\'&\');\n    return url;\n  }\n  getImageUrl(url, size = 500) {\n    return `${imagePrefix}ingredients_${size}x${size}/${url}`;\n  }\n}\n;\n;// CONCATENATED MODULE: ./src/store/IngredientListStore/index.ts\n\n;// CONCATENATED MODULE: ./src/App/pages/Ingredients/Ingredients.tsx\n\n\n\n\n\n\n\n\n\n\n\n\nconst Ingredients = () => {\n  const ingredientStore = useLocalStore_useLocalStore(() => new IngredientListStore());\n  (0,react.useEffect)(() => {\n    const queryStr = SearchParamsStore_SearchParamsStore.getParam(\'query\');\n    if (queryStr !== \'\') {\n      ingredientStore.loadingList(ingredientStore.getUrl(SearchParamsStore_SearchParamsStore.getOffset(), SearchParamsStore_SearchParamsStore.getParam(\'query\'), SearchParamsStore_SearchParamsStore.getParamPair(\'intolerances\')));\n    }\n  }, [SearchParamsStore_SearchParamsStore.searchParams, ingredientStore]);\n  return /*#__PURE__*/react.createElement(PageTemplate_PageTemplate, {\n    headerName: "Ingredients"\n  }, /*#__PURE__*/react.createElement(ContentFilters_ContentFilters, {\n    inputPlaceholder: "Enter ingredients",\n    categoryTag: "intolerances",\n    categoryPlaceholder: "Intolerances",\n    categoryOptions: intoleranceTypesOptions,\n    otherFilters: ingredientFilters\n  }), /*#__PURE__*/react.createElement(ListShower_ListShower, {\n    status: ingredientStore.status,\n    totalCount: ingredientStore.total\n  }, ingredientStore.results.map(ingredient => {\n    return /*#__PURE__*/react.createElement(Card_Card, {\n      key: ingredient.id,\n      image: ingredientStore.getImageUrl(ingredient.image),\n      title: ingredient.name,\n      subtitle: \'\'\n    });\n  })));\n};\n/* harmony default export */ const Ingredients_Ingredients = (observer(Ingredients));\n;// CONCATENATED MODULE: ./src/App/pages/Ingredients/index.tsx\n\n;// CONCATENATED MODULE: ./src/store/ProductListStore/ProductListStore.tsx\n\n\nclass ProductListStore extends BaseListStore {\n  getUrl(offset, query, ...other) {\n    const params = {\n      number: pageElementCount,\n      offset: offset,\n      query: query\n    };\n    const pathUrl = \'search?\';\n    let pathParams = Object.entries(params).map(param => param.join(\'=\'));\n    other.forEach(element => {\n      if (element[1] !== null) {\n        pathParams.push(element.join(\'=\'));\n      }\n    });\n    pathParams.push([\'apiKey\', apiKey].join(\'=\'));\n    const url = urlPrefix + \'food/products/\' + pathUrl + [...pathParams].join(\'&\');\n    return url;\n  }\n}\n;\n;// CONCATENATED MODULE: ./src/store/ProductListStore/index.ts\n\n;// CONCATENATED MODULE: ./src/App/pages/Products/Products.tsx\n\n\n\n\n\n\n\n\n\n\nconst Products = () => {\n  const productStore = useLocalStore_useLocalStore(() => new ProductListStore());\n  (0,react.useEffect)(() => {\n    const queryStr = SearchParamsStore_SearchParamsStore.getParam(\'query\');\n    if (queryStr !== \'\') {\n      productStore.loadingList(productStore.getUrl(SearchParamsStore_SearchParamsStore.getOffset(), SearchParamsStore_SearchParamsStore.getParam(\'query\')), \'products\', \'totalProducts\');\n    }\n  }, [SearchParamsStore_SearchParamsStore.searchParams, productStore]);\n  return /*#__PURE__*/react.createElement(PageTemplate_PageTemplate, {\n    headerName: "Products"\n  }, /*#__PURE__*/react.createElement(ContentFilters_ContentFilters, {\n    inputPlaceholder: "Enter products"\n  }), /*#__PURE__*/react.createElement(ListShower_ListShower, {\n    status: productStore.status,\n    totalCount: productStore.total\n  }, productStore.results.map(product => {\n    return /*#__PURE__*/react.createElement(Card_Card, {\n      key: product.id,\n      image: product.image,\n      title: product.title,\n      subtitle: \'\'\n    });\n  })));\n};\n/* harmony default export */ const Products_Products = (observer(Products));\n;// CONCATENATED MODULE: ./src/App/pages/Products/index.ts\n\n;// CONCATENATED MODULE: ./src/store/MenuItemListStore/MenuItemListStore.tsx\n\n\nclass MenuItemListStore extends BaseListStore {\n  getUrl(offset, query, ...other) {\n    const params = {\n      number: pageElementCount,\n      offset: offset,\n      query: query\n    };\n    const pathUrl = \'search?\';\n    let pathParams = Object.entries(params).map(param => param.join(\'=\'));\n    other.forEach(element => {\n      if (element[1] !== null) {\n        pathParams.push(element.join(\'=\'));\n      }\n    });\n    pathParams.push([\'apiKey\', apiKey].join(\'=\'));\n    const url = urlPrefix + \'food/menuItems/\' + pathUrl + [...pathParams].join(\'&\');\n    return url;\n  }\n}\n;\n;// CONCATENATED MODULE: ./src/store/MenuItemListStore/index.ts\n\n;// CONCATENATED MODULE: ./src/App/pages/MenuItems/MenuItems.tsx\n\n\n\n\n\n\n\n\n\n\nconst MenuItems = () => {\n  const menuItemsStore = useLocalStore_useLocalStore(() => new MenuItemListStore());\n  (0,react.useEffect)(() => {\n    const queryStr = SearchParamsStore_SearchParamsStore.getParam(\'query\');\n    if (queryStr !== \'\') {\n      menuItemsStore.loadingList(menuItemsStore.getUrl(SearchParamsStore_SearchParamsStore.getOffset(), SearchParamsStore_SearchParamsStore.getParam(\'query\')), \'menuItems\', \'totalMenuItems\');\n    }\n  }, [SearchParamsStore_SearchParamsStore.searchParams, menuItemsStore]);\n  return /*#__PURE__*/react.createElement(PageTemplate_PageTemplate, {\n    headerName: "Menu Items"\n  }, /*#__PURE__*/react.createElement(ContentFilters_ContentFilters, {\n    inputPlaceholder: "Enter menu items"\n  }), /*#__PURE__*/react.createElement(ListShower_ListShower, {\n    status: menuItemsStore.status,\n    totalCount: menuItemsStore.total\n  }, menuItemsStore.results.map(menuItem => {\n    return /*#__PURE__*/react.createElement(Card_Card, {\n      key: menuItem.id,\n      image: menuItem.image,\n      title: [menuItem.title, menuItem.restaurantChain].join(\' - \'),\n      subtitle: `${menuItem.servings.number}x${menuItem.servings.size} ${menuItem.servings.unit}`\n    });\n  })));\n};\n/* harmony default export */ const MenuItems_MenuItems = (observer(MenuItems));\n;// CONCATENATED MODULE: ./src/App/pages/MenuItems/index.ts\n\n;// CONCATENATED MODULE: ./src/App/pages/Saved/Saved.tsx\n\n\n\n\n\n\n\nconst Saved = () => {\n  const {\n    cards\n  } = LocalStorage_LocalStorage;\n  return /*#__PURE__*/react.createElement(PageTemplate_PageTemplate, {\n    headerName: "Saved"\n  }, /*#__PURE__*/react.createElement(ListShower_ListShower, {\n    status: SuccessfulStatus\n  }, cards.map(recipe => {\n    return /*#__PURE__*/react.createElement(RecipeCard_RecipeCard, {\n      key: recipe.id,\n      mode: "SAVED",\n      recipe: recipe\n    });\n  })));\n};\n/* harmony default export */ const Saved_Saved = (observer(Saved));\n;// CONCATENATED MODULE: ./src/App/pages/Saved/index.ts\n\n// EXTERNAL MODULE: ./node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[0].use[1]!./node_modules/postcss-loader/dist/cjs.js??ruleSet[1].rules[0].use[2]!./node_modules/sass-loader/dist/cjs.js!./src/App/pages/Login/Login.module.scss\nvar Login_module = __webpack_require__(4066);\n;// CONCATENATED MODULE: ./src/App/pages/Login/Login.module.scss\n\n      \n      \n      \n      \n      \n      \n      \n      \n      \n\nvar Login_module_options = {};\n\nLogin_module_options.styleTagTransform = (styleTagTransform_default());\nLogin_module_options.setAttributes = (setAttributesWithoutAttributes_default());\nLogin_module_options.insert = insertBySelector_default().bind(null, "head");\nLogin_module_options.domAPI = (styleDomAPI_default());\nLogin_module_options.insertStyleElement = (insertStyleElement_default());\n\nvar Login_module_update = injectStylesIntoStyleTag_default()(Login_module/* default */.A, Login_module_options);\n\n\n\n\n       /* harmony default export */ const Login_Login_module = (Login_module/* default */.A && Login_module/* default */.A.locals ? Login_module/* default */.A.locals : undefined);\n\n;// CONCATENATED MODULE: ./src/App/pages/Login/Login.tsx\n\n\n\n\n\n\n\n\n\nconst initRequestValue = {\n  username: \'\',\n  firstName: \'\',\n  lastName: \'\',\n  email: \'\'\n};\nconst Login = () => {\n  const [user, setUser] = (0,react.useState)(initRequestValue);\n  const navigate = dist_useNavigate();\n  (0,react.useEffect)(() => {\n    if (UserStore_UserStore.userStatus === \'auth\') {\n      navigate(\'/user\');\n    }\n  }, [UserStore_UserStore.userStatus]);\n  return /*#__PURE__*/react.createElement("div", {\n    className: Login_Login_module["login-page"]\n  }, /*#__PURE__*/react.createElement(Text_Text, {\n    view: "title",\n    tag: "div"\n  }, "Login"), /*#__PURE__*/react.createElement("div", {\n    className: Login_Login_module["login-page__form"]\n  }, Object.entries(user).map(([key, value]) => {\n    return /*#__PURE__*/react.createElement(Input_Input, {\n      key: key,\n      value: value,\n      placeholder: key,\n      onChange: newValue => {\n        user[key] = newValue;\n        setUser({\n          ...user\n        });\n      }\n    });\n  }), /*#__PURE__*/react.createElement(Button_Button, {\n    onClick: () => {\n      UserStore_UserStore.login(user);\n    }\n  }, "login"), UserStore_UserStore.status.statusName === \'ERROR\' && /*#__PURE__*/react.createElement(Text_Text, {\n    color: "accent",\n    view: "p-16",\n    tag: "div"\n  }, UserStore_UserStore.status.statusMessage)));\n};\n/* harmony default export */ const Login_Login = (observer(Login));\n;// CONCATENATED MODULE: ./src/App/pages/Login/index.ts\n\n// EXTERNAL MODULE: ./node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[0].use[1]!./node_modules/postcss-loader/dist/cjs.js??ruleSet[1].rules[0].use[2]!./node_modules/sass-loader/dist/cjs.js!./src/App/pages/User/User.module.scss\nvar User_module = __webpack_require__(8674);\n;// CONCATENATED MODULE: ./src/App/pages/User/User.module.scss\n\n      \n      \n      \n      \n      \n      \n      \n      \n      \n\nvar User_module_options = {};\n\nUser_module_options.styleTagTransform = (styleTagTransform_default());\nUser_module_options.setAttributes = (setAttributesWithoutAttributes_default());\nUser_module_options.insert = insertBySelector_default().bind(null, "head");\nUser_module_options.domAPI = (styleDomAPI_default());\nUser_module_options.insertStyleElement = (insertStyleElement_default());\n\nvar User_module_update = injectStylesIntoStyleTag_default()(User_module/* default */.A, User_module_options);\n\n\n\n\n       /* harmony default export */ const User_User_module = (User_module/* default */.A && User_module/* default */.A.locals ? User_module/* default */.A.locals : undefined);\n\n;// CONCATENATED MODULE: ./src/App/pages/User/User.tsx\n\n\n\n\n\n\n\n\nconst User = () => {\n  const {\n    user,\n    userStatus,\n    logout\n  } = UserStore_UserStore;\n  const navigate = dist_useNavigate();\n  (0,react.useEffect)(() => {\n    if (userStatus === \'none\') {\n      navigate(\'/login\');\n    }\n  }, [userStatus]);\n  return /*#__PURE__*/react.createElement("div", {\n    className: User_User_module["user-page"]\n  }, /*#__PURE__*/react.createElement(Text_Text, {\n    view: "title"\n  }, "User Page"), /*#__PURE__*/react.createElement("div", {\n    className: User_User_module["user-page__info"]\n  }, Object.entries(user).map(([key, value]) => {\n    return /*#__PURE__*/react.createElement("div", {\n      className: User_User_module["user-page__info__unit"],\n      key: key\n    }, /*#__PURE__*/react.createElement(Text_Text, {\n      weight: "bold",\n      view: "p-16"\n    }, key, ":"), /*#__PURE__*/react.createElement(Text_Text, {\n      view: "p-16"\n    }, value));\n  })), /*#__PURE__*/react.createElement(Button_Button, {\n    className: User_User_module["user-page__logout"],\n    onClick: () => {\n      logout();\n    }\n  }, "Logout"));\n};\n/* harmony default export */ const User_User = (observer(User));\n;// CONCATENATED MODULE: ./src/App/pages/User/index.ts\n\n;// CONCATENATED MODULE: ./src/store/MealPlanningStore/MealPlanningStore.tsx\n\n\n\n\nclass MealPlanningStore {\n  _status = NotStartedStatus;\n  _plan = {};\n  constructor() {\n    makeObservable(this, {\n      _status: mobx_esm_observable.ref,\n      _plan: mobx_esm_observable.ref,\n      setStatus: action.bound,\n      setPlan: action.bound,\n      loadingPlan: action.bound,\n      generatePlan: action.bound,\n      addInPlan: action.bound,\n      deleteFromPlan: action.bound,\n      clearPlan: action.bound,\n      status: computed,\n      plan: computed,\n      weekStart: computed\n    });\n  }\n  setStatus(newStatus) {\n    this._status = {\n      ...newStatus\n    };\n  }\n  setPlan(weekPlan) {\n    this._plan = {\n      ...weekPlan\n    };\n  }\n  getDateForm(dateObj) {\n    const date = dateObj.toLocaleDateString(\'fr-CA\', {\n      year: \'numeric\',\n      month: \'2-digit\',\n      day: \'2-digit\'\n    });\n    return date;\n  }\n  getStartOfWeek(dateObj) {\n    let date = new Date(dateObj);\n    let day = date.getDay();\n    console.log(day);\n    const diff = date.getDate() - day + (day === 0 ? -6 : 1);\n    return this.getDateForm(new Date(date.setDate(diff)));\n  }\n  loadingPlan(username, hash) {\n    const date = this.getStartOfWeek(new Date());\n    const url = urlPrefix + \'mealplanner/\' + username + \'/week/\' + date + \'?hash=\' + hash + \'&apiKey=\' + apiKey;\n    this.setStatus(LoadingStatus);\n    lib_axios.get(url).then(resp => {\n      console.log(resp.data);\n      this.setPlan(resp.data);\n      this.setStatus(SuccessfulStatus);\n    }).catch(err => {\n      this.setStatus(errorStatus(err.message));\n    });\n  }\n  generatePlan(id, username, hash) {\n    const nowPrev = this.getStartOfWeek(new Date());\n    console.log(nowPrev);\n    const now = new Date(nowPrev).getTime() / 1000;\n    const url = urlPrefix + \'mealplanner/\' + username + \'/items?apiKey=\' + apiKey + \'&hash=\' + hash;\n    lib_axios.post(url, {\n      mealPlanTemplateId: id,\n      startDate: now\n    }).then(resp => {\n      console.log(resp.data);\n      this.loadingPlan(username, hash);\n    }).catch(err => {\n      console.log(err);\n    });\n  }\n  addInPlan() {}\n  deleteFromPlan() {}\n  clearPlan() {}\n  get status() {\n    return this._status;\n  }\n  get plan() {\n    return this._plan;\n  }\n  get weekStart() {\n    return this.getStartOfWeek(new Date());\n  }\n  destroy() {\n    this._plan = {};\n    this._status = NotStartedStatus;\n  }\n}\n;\n;// CONCATENATED MODULE: ./src/store/MealPlanningStore/index.ts\n\n// EXTERNAL MODULE: ./node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[0].use[1]!./node_modules/postcss-loader/dist/cjs.js??ruleSet[1].rules[0].use[2]!./node_modules/sass-loader/dist/cjs.js!./src/App/pages/MealPlanning/components/SlotInfo/SlotInfo.module.scss\nvar SlotInfo_module = __webpack_require__(3748);\n;// CONCATENATED MODULE: ./src/App/pages/MealPlanning/components/SlotInfo/SlotInfo.module.scss\n\n      \n      \n      \n      \n      \n      \n      \n      \n      \n\nvar SlotInfo_module_options = {};\n\nSlotInfo_module_options.styleTagTransform = (styleTagTransform_default());\nSlotInfo_module_options.setAttributes = (setAttributesWithoutAttributes_default());\nSlotInfo_module_options.insert = insertBySelector_default().bind(null, "head");\nSlotInfo_module_options.domAPI = (styleDomAPI_default());\nSlotInfo_module_options.insertStyleElement = (insertStyleElement_default());\n\nvar SlotInfo_module_update = injectStylesIntoStyleTag_default()(SlotInfo_module/* default */.A, SlotInfo_module_options);\n\n\n\n\n       /* harmony default export */ const SlotInfo_SlotInfo_module = (SlotInfo_module/* default */.A && SlotInfo_module/* default */.A.locals ? SlotInfo_module/* default */.A.locals : undefined);\n\n;// CONCATENATED MODULE: ./src/App/pages/MealPlanning/components/SlotInfo/SlotInfo.tsx\n\n\n\n\n\nconst SlotInfo = props => {\n  const elements = props.slots.sort((a, b) => {\n    return a.position < b.position ? -1 : 0;\n  });\n  console.log(elements);\n  const getItemElementByType = item => {\n    if (item.type !== \'INGREDIENTS\') {\n      let imgUrl = imagePrefix;\n      switch (item.type) {\n        case \'PRODUCT\':\n          imgUrl += \'products/\' + item.value.id + \'-90x90.\' + item.value.imageType;\n          break;\n        case \'MENU_ITEM\':\n          imgUrl += \'menu-items/\' + item.value.id + \'-90x90.\' + item.value.imageType;\n          break;\n        case \'RECIPE\':\n          imgUrl += \'recipes/\' + item.value.id + \'-240x150.\' + item.value.imageType;\n          break;\n        case \'CUSTOM_FOOD\':\n          break;\n        default:\n          break;\n      }\n      return /*#__PURE__*/react.createElement(react.Fragment, null, /*#__PURE__*/react.createElement("img", {\n        src: imgUrl,\n        alt: item.value.title\n      }), /*#__PURE__*/react.createElement(Text_Text, null, item.value.title));\n    } else {\n      if (\'ingredients\' in item.value) {\n        return /*#__PURE__*/react.createElement(react.Fragment, null, item.value.ingredients.map((ing, index) => {\n          return /*#__PURE__*/react.createElement("div", {\n            className: SlotInfo_SlotInfo_module["slot-info__item__ingr"],\n            key: index\n          }, /*#__PURE__*/react.createElement("img", {\n            src: ing.image,\n            alt: ing.name\n          }), /*#__PURE__*/react.createElement(Text_Text, null, ing.amount, \' \', ing.name, \' \', ing.unit));\n        }));\n      } else if (\'title\' in item.value) {\n        return /*#__PURE__*/react.createElement("div", {\n          className: SlotInfo_SlotInfo_module["slot-info__item__ingr"],\n          key: item.value.title\n        }, /*#__PURE__*/react.createElement(Text_Text, null, item.value.title), /*#__PURE__*/react.createElement(Text_Text, null, item.value.servings, " minutes"));\n      }\n    }\n  };\n  return /*#__PURE__*/react.createElement("div", {\n    className: SlotInfo_SlotInfo_module["slot-info"]\n  }, elements.map((slot, index) => {\n    return /*#__PURE__*/react.createElement("div", {\n      className: SlotInfo_SlotInfo_module["slot-info__item"],\n      key: slot.type + index\n    }, getItemElementByType(slot));\n  }));\n};\n/* harmony default export */ const SlotInfo_SlotInfo = (/*#__PURE__*/(0,react.memo)(SlotInfo));\n;// CONCATENATED MODULE: ./src/App/pages/MealPlanning/components/SlotInfo/index.ts\n\n// EXTERNAL MODULE: ./node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[0].use[1]!./node_modules/postcss-loader/dist/cjs.js??ruleSet[1].rules[0].use[2]!./node_modules/sass-loader/dist/cjs.js!./src/App/pages/MealPlanning/components/DayInfo/DayInfo.module.scss\nvar DayInfo_module = __webpack_require__(1158);\n;// CONCATENATED MODULE: ./src/App/pages/MealPlanning/components/DayInfo/DayInfo.module.scss\n\n      \n      \n      \n      \n      \n      \n      \n      \n      \n\nvar DayInfo_module_options = {};\n\nDayInfo_module_options.styleTagTransform = (styleTagTransform_default());\nDayInfo_module_options.setAttributes = (setAttributesWithoutAttributes_default());\nDayInfo_module_options.insert = insertBySelector_default().bind(null, "head");\nDayInfo_module_options.domAPI = (styleDomAPI_default());\nDayInfo_module_options.insertStyleElement = (insertStyleElement_default());\n\nvar DayInfo_module_update = injectStylesIntoStyleTag_default()(DayInfo_module/* default */.A, DayInfo_module_options);\n\n\n\n\n       /* harmony default export */ const DayInfo_DayInfo_module = (DayInfo_module/* default */.A && DayInfo_module/* default */.A.locals ? DayInfo_module/* default */.A.locals : undefined);\n\n;// CONCATENATED MODULE: ./src/App/pages/MealPlanning/components/DayInfo/DayInfo.tsx\n\n\n\n\n\nconst DayInfo = props => {\n  const breakfastItems = props.items.filter(item => item.slot === 1);\n  const lunchItems = props.items.filter(item => item.slot === 2);\n  const dinnerItems = props.items.filter(item => item.slot === 3);\n  const getNutritionByName = name => {\n    const nut = props.nutritionSummary.nutrients.find(nutr => nutr.name === name);\n    if (!nut) {\n      return \'\';\n    }\n    return nut.name + \': \' + nut.amount + \' \' + nut.unit;\n  };\n  return /*#__PURE__*/react.createElement(react.Fragment, null, /*#__PURE__*/react.createElement(Text_Text, {\n    className: DayInfo_DayInfo_module["day-info__name"],\n    tag: "div",\n    view: "p-16",\n    weight: "bold"\n  }, props.dayName), /*#__PURE__*/react.createElement(SlotInfo_SlotInfo, {\n    slots: breakfastItems\n  }), /*#__PURE__*/react.createElement(SlotInfo_SlotInfo, {\n    slots: lunchItems\n  }), /*#__PURE__*/react.createElement(SlotInfo_SlotInfo, {\n    slots: dinnerItems\n  }), /*#__PURE__*/react.createElement("div", {\n    className: DayInfo_DayInfo_module["day-info__summary"]\n  }, /*#__PURE__*/react.createElement(Text_Text, null, getNutritionByName(\'Calories\')), /*#__PURE__*/react.createElement(Text_Text, null, getNutritionByName(\'Fat\')), /*#__PURE__*/react.createElement(Text_Text, null, getNutritionByName(\'Protein\')), /*#__PURE__*/react.createElement(Text_Text, null, getNutritionByName(\'Carbs\'))));\n};\n/* harmony default export */ const DayInfo_DayInfo = (/*#__PURE__*/(0,react.memo)(DayInfo));\n;// CONCATENATED MODULE: ./src/App/pages/MealPlanning/components/DayInfo/index.ts\n\n// EXTERNAL MODULE: ./node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[0].use[1]!./node_modules/postcss-loader/dist/cjs.js??ruleSet[1].rules[0].use[2]!./node_modules/sass-loader/dist/cjs.js!./src/App/pages/MealPlanning/components/WeekInfo/WeekInfo.module.scss\nvar WeekInfo_module = __webpack_require__(2040);\n;// CONCATENATED MODULE: ./src/App/pages/MealPlanning/components/WeekInfo/WeekInfo.module.scss\n\n      \n      \n      \n      \n      \n      \n      \n      \n      \n\nvar WeekInfo_module_options = {};\n\nWeekInfo_module_options.styleTagTransform = (styleTagTransform_default());\nWeekInfo_module_options.setAttributes = (setAttributesWithoutAttributes_default());\nWeekInfo_module_options.insert = insertBySelector_default().bind(null, "head");\nWeekInfo_module_options.domAPI = (styleDomAPI_default());\nWeekInfo_module_options.insertStyleElement = (insertStyleElement_default());\n\nvar WeekInfo_module_update = injectStylesIntoStyleTag_default()(WeekInfo_module/* default */.A, WeekInfo_module_options);\n\n\n\n\n       /* harmony default export */ const WeekInfo_WeekInfo_module = (WeekInfo_module/* default */.A && WeekInfo_module/* default */.A.locals ? WeekInfo_module/* default */.A.locals : undefined);\n\n;// CONCATENATED MODULE: ./src/App/pages/MealPlanning/components/WeekInfo/WeekInfo.tsx\n\n\n\n\n\n\nconst weekDays = [\'Monday\', \'Tuesday\', \'Wednesday\', \'Thursday\', \'Friday\', \'Saturday\', \'Sunday\'];\nconst WeekInfo = props => {\n  const emptyDays = Array(7 - props.plan.days.length).fill(0);\n  return /*#__PURE__*/react.createElement("div", {\n    className: WeekInfo_WeekInfo_module["week-info"]\n  }, /*#__PURE__*/react.createElement(Text_Text, {\n    className: WeekInfo_WeekInfo_module["week-info__header"],\n    tag: "div",\n    view: "p-18",\n    weight: "bold"\n  }, "Current week"), /*#__PURE__*/react.createElement("div", {\n    className: WeekInfo_WeekInfo_module["week-info__days"]\n  }, props.plan.days.map((day, index) => {\n    return /*#__PURE__*/react.createElement(DayInfo_DayInfo, extends_extends({\n      dayName: weekDays[index]\n    }, day));\n  })));\n};\n/* harmony default export */ const WeekInfo_WeekInfo = (/*#__PURE__*/(0,react.memo)(WeekInfo));\n;// CONCATENATED MODULE: ./src/App/pages/MealPlanning/components/WeekInfo/index.ts\n\n// EXTERNAL MODULE: ./node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[0].use[1]!./node_modules/postcss-loader/dist/cjs.js??ruleSet[1].rules[0].use[2]!./node_modules/sass-loader/dist/cjs.js!./src/App/pages/MealPlanning/MealPlanning.module.scss\nvar MealPlanning_module = __webpack_require__(8252);\n;// CONCATENATED MODULE: ./src/App/pages/MealPlanning/MealPlanning.module.scss\n\n      \n      \n      \n      \n      \n      \n      \n      \n      \n\nvar MealPlanning_module_options = {};\n\nMealPlanning_module_options.styleTagTransform = (styleTagTransform_default());\nMealPlanning_module_options.setAttributes = (setAttributesWithoutAttributes_default());\nMealPlanning_module_options.insert = insertBySelector_default().bind(null, "head");\nMealPlanning_module_options.domAPI = (styleDomAPI_default());\nMealPlanning_module_options.insertStyleElement = (insertStyleElement_default());\n\nvar MealPlanning_module_update = injectStylesIntoStyleTag_default()(MealPlanning_module/* default */.A, MealPlanning_module_options);\n\n\n\n\n       /* harmony default export */ const MealPlanning_MealPlanning_module = (MealPlanning_module/* default */.A && MealPlanning_module/* default */.A.locals ? MealPlanning_module/* default */.A.locals : undefined);\n\n;// CONCATENATED MODULE: ./src/App/pages/MealPlanning/MealPlanning.tsx\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nconst MealPlanning = () => {\n  const {\n    plan,\n    status,\n    loadingPlan,\n    generatePlan\n  } = useLocalStore_useLocalStore(() => new MealPlanningStore());\n  const [templates, setTemplates] = (0,react.useState)([]);\n  const {\n    user,\n    userStatus\n  } = UserStore_UserStore;\n  const navigate = dist_useNavigate();\n  (0,react.useEffect)(() => {\n    if (userStatus !== \'none\') {\n      loadingPlan(user.username, user.hash);\n    }\n  }, [userStatus]);\n  (0,react.useEffect)(() => {\n    console.log(plan);\n  }, [plan]);\n  return /*#__PURE__*/react.createElement("div", {\n    className: MealPlanning_MealPlanning_module["mealplanning-page"]\n  }, /*#__PURE__*/react.createElement(Text_Text, {\n    tag: "div",\n    view: "title"\n  }, "Meal plans"), userStatus === \'none\' ? /*#__PURE__*/react.createElement(Button_Button, {\n    onClick: () => {\n      navigate(\'/login\');\n    }\n  }, "Login") : /*#__PURE__*/react.createElement(react.Fragment, null, /*#__PURE__*/react.createElement("div", {\n    className: MealPlanning_MealPlanning_module["mealplanning-page__form"]\n  }, /*#__PURE__*/react.createElement(MultiDropdown_MultiDropdown, {\n    value: templates,\n    options: publicTemplates,\n    onChange: value => {\n      setTemplates(value);\n    },\n    getTitle: value => {\n      if (value.length === 1) {\n        return value[0].value;\n      }\n      return \'Template\';\n    },\n    selectMode: "ONE"\n  }), /*#__PURE__*/react.createElement(Button_Button, {\n    onClick: () => {\n      generatePlan(Number(templates.length === 1 ? templates[0].key : \'37\'), user.username, user.hash);\n    }\n  }, "Generate Meal Plan")), status.statusName === \'LOADING\' ? /*#__PURE__*/react.createElement(Text_Text, null, "...Loading") : status.statusName === \'ERROR\' ? /*#__PURE__*/react.createElement(ErrorBox_ErrorBox, null, status.statusMessage) : /*#__PURE__*/react.createElement(react.Fragment, null, plan.days && /*#__PURE__*/react.createElement(WeekInfo_WeekInfo, {\n    plan: plan\n  }))));\n};\n/* harmony default export */ const MealPlanning_MealPlanning = (observer(MealPlanning));\n;// CONCATENATED MODULE: ./src/App/pages/MealPlanning/index.ts\n\n;// CONCATENATED MODULE: ./src/App/App.tsx\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nconst App = () => {\n  (0,react.useEffect)(() => {\n    UserStore_UserStore.getCookies();\n    SearchParamsStore_SearchParamsStore.getSearchParams();\n    return () => {\n      LocalStorage_LocalStorage.destroy();\n      UserStore_UserStore.destroy();\n      SearchParamsStore_SearchParamsStore.destroy();\n    };\n  }, []);\n  return /*#__PURE__*/react.createElement(HashRouter, {\n    basename: ""\n  }, /*#__PURE__*/react.createElement(Routes, null, /*#__PURE__*/react.createElement(Route, {\n    path: "/",\n    element: /*#__PURE__*/react.createElement(Main_Main, null)\n  }, /*#__PURE__*/react.createElement(Route, {\n    path: "/recipes",\n    element: /*#__PURE__*/react.createElement(Recipes_Recipes, null)\n  }), /*#__PURE__*/react.createElement(Route, {\n    path: "/",\n    element: /*#__PURE__*/react.createElement(Recipes_Recipes, null)\n  }), /*#__PURE__*/react.createElement(Route, {\n    path: "/recipe/:id",\n    element: /*#__PURE__*/react.createElement(Recipe_Recipe, null)\n  }), /*#__PURE__*/react.createElement(Route, {\n    path: "/ingredients",\n    element: /*#__PURE__*/react.createElement(Ingredients_Ingredients, null)\n  }), /*#__PURE__*/react.createElement(Route, {\n    path: "/products",\n    element: /*#__PURE__*/react.createElement(Products_Products, null)\n  }), /*#__PURE__*/react.createElement(Route, {\n    path: "/menuItems",\n    element: /*#__PURE__*/react.createElement(MenuItems_MenuItems, null)\n  }), /*#__PURE__*/react.createElement(Route, {\n    path: "/saved",\n    element: /*#__PURE__*/react.createElement(Saved_Saved, null)\n  }), /*#__PURE__*/react.createElement(Route, {\n    path: "/login",\n    element: /*#__PURE__*/react.createElement(Login_Login, null)\n  }), /*#__PURE__*/react.createElement(Route, {\n    path: "/user",\n    element: /*#__PURE__*/react.createElement(User_User, null)\n  }), /*#__PURE__*/react.createElement(Route, {\n    path: "/planning",\n    element: /*#__PURE__*/react.createElement(MealPlanning_MealPlanning, null)\n  }), /*#__PURE__*/react.createElement(Route, {\n    path: "*",\n    element: /*#__PURE__*/react.createElement(Navigate, {\n      to: "/recipes",\n      replace: true\n    })\n  }))));\n};\n/* harmony default export */ const App_App = (observer(App));\n;// CONCATENATED MODULE: ./src/App/index.ts\n\n;// CONCATENATED MODULE: ./src/config/configureMobX.ts\n\nconfigure({\n  useProxies: "ifavailable",\n  computedRequiresReaction: true,\n  reactionRequiresObservable: true,\n  observableRequiresReaction: true\n});\n// EXTERNAL MODULE: ./node_modules/css-loader/dist/cjs.js!./node_modules/postcss-loader/dist/cjs.js??ruleSet[1].rules[1].use[2]!./node_modules/sass-loader/dist/cjs.js!./src/styles/Roboto/fonts.css\nvar fonts = __webpack_require__(8111);\n;// CONCATENATED MODULE: ./src/styles/Roboto/fonts.css\n\n      \n      \n      \n      \n      \n      \n      \n      \n      \n\nvar fonts_options = {};\n\nfonts_options.styleTagTransform = (styleTagTransform_default());\nfonts_options.setAttributes = (setAttributesWithoutAttributes_default());\nfonts_options.insert = insertBySelector_default().bind(null, "head");\nfonts_options.domAPI = (styleDomAPI_default());\nfonts_options.insertStyleElement = (insertStyleElement_default());\n\nvar fonts_update = injectStylesIntoStyleTag_default()(fonts/* default */.A, fonts_options);\n\n\n\n\n       /* harmony default export */ const Roboto_fonts = (fonts/* default */.A && fonts/* default */.A.locals ? fonts/* default */.A.locals : undefined);\n\n;// CONCATENATED MODULE: ./src/index.tsx\n\n\n\n\n\n\n(0,client/* createRoot */.H)(document.getElementById(\'root\')).render( /*#__PURE__*/react.createElement(react.StrictMode, null, /*#__PURE__*/react.createElement(App_App, null)));\nif (false) {}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QkFBc0IsOEJBQWtCOztBQUUvQyxJQUFJLFlBQU0sR0FBRyxrQ0FBRyxDQUFDLG9CQUFPLEVBQUUsYUFBTzs7OztBQUlxSztBQUN0TSxPQUFPLG1EQUFlLG9CQUFPLElBQUksb0JBQU8sVUFBVSxvQkFBTyxtQkFBbUIsRUFBQzs7O0FDeEI5QztBQUNlO0FBQ3RCO0FBQ007QUFDRjtBQUNPO0FBRW5DMDFDLDRCQUFVLENBQUNwdUYsUUFBUSxDQUFDcThCLGNBQWMsQ0FBQyxNQUFNLENBQUUsQ0FBQyxDQUFDclEsTUFBTSxlQUNqRG5GLG1CQUFBLENBQUNBLGdCQUFnQixxQkFDZkEsbUJBQUEsQ0FBQ3NuRSxPQUFHLE1BQUUsQ0FDVSxDQUNwQixDQUFDO0FBRUQsSUFBSUcsS0FBVSxFQUFFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vMjAyNC1rdHNzdHVkaW8taG9tZXdvcmtzLy4vc3JjL3N0eWxlcy9zdHlsZXMuc2Nzcz9mZjg5Iiwid2VicGFjazovLzIwMjQta3Rzc3R1ZGlvLWhvbWV3b3Jrcy8uLi9oaXN0b3J5LnRzPzcxZjkiLCJ3ZWJwYWNrOi8vMjAyNC1rdHNzdHVkaW8taG9tZXdvcmtzLy4uL3V0aWxzLnRzP2FjMTEiLCJ3ZWJwYWNrOi8vMjAyNC1rdHNzdHVkaW8taG9tZXdvcmtzLy4uL3JvdXRlci50cz9hNjQwIiwid2VicGFjazovLzIwMjQta3Rzc3R1ZGlvLWhvbWV3b3Jrcy8uLi9saWIvY29udGV4dC50cz9hMmRiIiwid2VicGFjazovLzIwMjQta3Rzc3R1ZGlvLWhvbWV3b3Jrcy8uLi9saWIvaG9va3MudHN4PzdjM2MiLCJ3ZWJwYWNrOi8vMjAyNC1rdHNzdHVkaW8taG9tZXdvcmtzLy4uL2xpYi9jb21wb25lbnRzLnRzeD8zNWEzIiwid2VicGFjazovLzIwMjQta3Rzc3R1ZGlvLWhvbWV3b3Jrcy8uLi9pbmRleC50cz83OGJiIiwid2VicGFjazovLzIwMjQta3Rzc3R1ZGlvLWhvbWV3b3Jrcy8uLi9kb20udHM/NjcxYSIsIndlYnBhY2s6Ly8yMDI0LWt0c3N0dWRpby1ob21ld29ya3MvLi4vaW5kZXgudHN4PzQ1ZWIiLCJ3ZWJwYWNrOi8vMjAyNC1rdHNzdHVkaW8taG9tZXdvcmtzLy4vc3JjL2NvbXBvbmVudHMvVGV4dC9UZXh0Lm1vZHVsZS5zY3NzP2UyMzMiLCJ3ZWJwYWNrOi8vMjAyNC1rdHNzdHVkaW8taG9tZXdvcmtzLy4vc3JjL2NvbXBvbmVudHMvVGV4dC9UZXh0LnRzeD8zN2MzIiwid2VicGFjazovLzIwMjQta3Rzc3R1ZGlvLWhvbWV3b3Jrcy8uL3NyYy9jb21wb25lbnRzL1RleHQvaW5kZXgudHM/YjcwOSIsIndlYnBhY2s6Ly8yMDI0LWt0c3N0dWRpby1ob21ld29ya3MvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kcy5qcz9jMzFkIiwid2VicGFjazovLzIwMjQta3Rzc3R1ZGlvLWhvbWV3b3Jrcy8uL3NyYy9jb21wb25lbnRzL2ljb25zL0ljb24vSWNvbi50c3g/ZDVlMyIsIndlYnBhY2s6Ly8yMDI0LWt0c3N0dWRpby1ob21ld29ya3MvLi9zcmMvY29tcG9uZW50cy9pY29ucy9JY29uL2luZGV4LnRzPzAwMzgiLCJ3ZWJwYWNrOi8vMjAyNC1rdHNzdHVkaW8taG9tZXdvcmtzLy4vc3JjL2NvbXBvbmVudHMvaWNvbnMvTG9nb0ljb24vTG9nb0ljb24udHN4P2QxMmYiLCJ3ZWJwYWNrOi8vMjAyNC1rdHNzdHVkaW8taG9tZXdvcmtzLy4vc3JjL2NvbXBvbmVudHMvaWNvbnMvTG9nb0ljb24vaW5kZXgudHM/Y2E4NSIsIndlYnBhY2s6Ly8yMDI0LWt0c3N0dWRpby1ob21ld29ya3MvLi9zcmMvY29tcG9uZW50cy9IZWFkZXIvY29tcG9uZW50cy9Mb2dvQmxvY2svTG9nb0Jsb2NrLm1vZHVsZS5zY3NzPzFjNjIiLCJ3ZWJwYWNrOi8vMjAyNC1rdHNzdHVkaW8taG9tZXdvcmtzLy4vc3JjL2NvbXBvbmVudHMvSGVhZGVyL2NvbXBvbmVudHMvTG9nb0Jsb2NrL0xvZ29CbG9jay50c3g/YjVjMyIsIndlYnBhY2s6Ly8yMDI0LWt0c3N0dWRpby1ob21ld29ya3MvLi9zcmMvY29tcG9uZW50cy9IZWFkZXIvY29tcG9uZW50cy9Mb2dvQmxvY2svaW5kZXgudHM/NmJhYiIsIndlYnBhY2s6Ly8yMDI0LWt0c3N0dWRpby1ob21ld29ya3MvLi4vc3JjL2Vycm9ycy50cz8zZDViIiwid2VicGFjazovLzIwMjQta3Rzc3R1ZGlvLWhvbWV3b3Jrcy8uLi9zcmMvdXRpbHMvZ2xvYmFsLnRzPzk2MWMiLCJ3ZWJwYWNrOi8vMjAyNC1rdHNzdHVkaW8taG9tZXdvcmtzLy4uL3NyYy91dGlscy91dGlscy50cz81NjA5Iiwid2VicGFjazovLzIwMjQta3Rzc3R1ZGlvLWhvbWV3b3Jrcy8uLi9zcmMvYXBpL2RlY29yYXRvcnMudHM/ODgwOCIsIndlYnBhY2s6Ly8yMDI0LWt0c3N0dWRpby1ob21ld29ya3MvLi4vc3JjL2NvcmUvYXRvbS50cz82NzBmIiwid2VicGFjazovLzIwMjQta3Rzc3R1ZGlvLWhvbWV3b3Jrcy8uLi9zcmMvdXRpbHMvY29tcGFyZXIudHM/YzRhZiIsIndlYnBhY2s6Ly8yMDI0LWt0c3N0dWRpby1ob21ld29ya3MvLi4vc3JjL3R5cGVzL21vZGlmaWVycy50cz83Y2JkIiwid2VicGFjazovLzIwMjQta3Rzc3R1ZGlvLWhvbWV3b3Jrcy8uLi9zcmMvdHlwZXMvb3ZlcnJpZGVhbm5vdGF0aW9uLnRzPzlkMjEiLCJ3ZWJwYWNrOi8vMjAyNC1rdHNzdHVkaW8taG9tZXdvcmtzLy4uL3NyYy90eXBlcy9hY3Rpb25hbm5vdGF0aW9uLnRzPzgxODMiLCJ3ZWJwYWNrOi8vMjAyNC1rdHNzdHVkaW8taG9tZXdvcmtzLy4uL3NyYy90eXBlcy9mbG93YW5ub3RhdGlvbi50cz8yZmY5Iiwid2VicGFjazovLzIwMjQta3Rzc3R1ZGlvLWhvbWV3b3Jrcy8uLi9zcmMvdHlwZXMvY29tcHV0ZWRhbm5vdGF0aW9uLnRzPzNjMjkiLCJ3ZWJwYWNrOi8vMjAyNC1rdHNzdHVkaW8taG9tZXdvcmtzLy4uL3NyYy90eXBlcy9vYnNlcnZhYmxlYW5ub3RhdGlvbi50cz82MTRmIiwid2VicGFjazovLzIwMjQta3Rzc3R1ZGlvLWhvbWV3b3Jrcy8uLi9zcmMvdHlwZXMvYXV0b2Fubm90YXRpb24udHM/ZjcyNiIsIndlYnBhY2s6Ly8yMDI0LWt0c3N0dWRpby1ob21ld29ya3MvLi4vc3JjL2FwaS9vYnNlcnZhYmxlLnRzPzlkODIiLCJ3ZWJwYWNrOi8vMjAyNC1rdHNzdHVkaW8taG9tZXdvcmtzLy4uL3NyYy9hcGkvY29tcHV0ZWQudHM/ZjRmOCIsIndlYnBhY2s6Ly8yMDI0LWt0c3N0dWRpby1ob21ld29ya3MvLi4vc3JjL2NvcmUvYWN0aW9uLnRzPzI3NzUiLCJ3ZWJwYWNrOi8vMjAyNC1rdHNzdHVkaW8taG9tZXdvcmtzLy4uL3NyYy90eXBlcy9vYnNlcnZhYmxldmFsdWUudHM/MDMwOSIsIndlYnBhY2s6Ly8yMDI0LWt0c3N0dWRpby1ob21ld29ya3MvLi4vc3JjL2NvcmUvY29tcHV0ZWR2YWx1ZS50cz84ZDg3Iiwid2VicGFjazovLzIwMjQta3Rzc3R1ZGlvLWhvbWV3b3Jrcy8uLi9zcmMvY29yZS9kZXJpdmF0aW9uLnRzP2I5OWYiLCJ3ZWJwYWNrOi8vMjAyNC1rdHNzdHVkaW8taG9tZXdvcmtzLy4uL3NyYy9jb3JlL2dsb2JhbHN0YXRlLnRzP2EyMzUiLCJ3ZWJwYWNrOi8vMjAyNC1rdHNzdHVkaW8taG9tZXdvcmtzLy4uL3NyYy9jb3JlL29ic2VydmFibGUudHM/MWIwZCIsIndlYnBhY2s6Ly8yMDI0LWt0c3N0dWRpby1ob21ld29ya3MvLi4vc3JjL2NvcmUvcmVhY3Rpb24udHM/NDY3OSIsIndlYnBhY2s6Ly8yMDI0LWt0c3N0dWRpby1ob21ld29ya3MvLi4vc3JjL2NvcmUvc3B5LnRzP2QyMzEiLCJ3ZWJwYWNrOi8vMjAyNC1rdHNzdHVkaW8taG9tZXdvcmtzLy4uL3NyYy9hcGkvYWN0aW9uLnRzP2RmYjUiLCJ3ZWJwYWNrOi8vMjAyNC1rdHNzdHVkaW8taG9tZXdvcmtzLy4uL3NyYy9hcGkvYXV0b3J1bi50cz80NmY0Iiwid2VicGFjazovLzIwMjQta3Rzc3R1ZGlvLWhvbWV3b3Jrcy8uLi9zcmMvYXBpL2JlY29tZS1vYnNlcnZlZC50cz9jOWY4Iiwid2VicGFjazovLzIwMjQta3Rzc3R1ZGlvLWhvbWV3b3Jrcy8uLi9zcmMvYXBpL2NvbmZpZ3VyZS50cz9lNDFjIiwid2VicGFjazovLzIwMjQta3Rzc3R1ZGlvLWhvbWV3b3Jrcy8uLi9zcmMvYXBpL2V4dGVuZG9ic2VydmFibGUudHM/NmRlMiIsIndlYnBhY2s6Ly8yMDI0LWt0c3N0dWRpby1ob21ld29ya3MvLi4vc3JjL2FwaS9leHRyYXMudHM/N2FlYiIsIndlYnBhY2s6Ly8yMDI0LWt0c3N0dWRpby1ob21ld29ya3MvLi4vc3JjL2FwaS9mbG93LnRzPzBmYWYiLCJ3ZWJwYWNrOi8vMjAyNC1rdHNzdHVkaW8taG9tZXdvcmtzLy4uL3NyYy9hcGkvaW50ZXJjZXB0LXJlYWQudHM/MGZhMyIsIndlYnBhY2s6Ly8yMDI0LWt0c3N0dWRpby1ob21ld29ya3MvLi4vc3JjL2FwaS9pbnRlcmNlcHQudHM/Mzg0OSIsIndlYnBhY2s6Ly8yMDI0LWt0c3N0dWRpby1ob21ld29ya3MvLi4vc3JjL2FwaS9pc2NvbXB1dGVkLnRzP2E1NjkiLCJ3ZWJwYWNrOi8vMjAyNC1rdHNzdHVkaW8taG9tZXdvcmtzLy4uL3NyYy9hcGkvaXNvYnNlcnZhYmxlLnRzPzA3YTgiLCJ3ZWJwYWNrOi8vMjAyNC1rdHNzdHVkaW8taG9tZXdvcmtzLy4uL3NyYy9hcGkvb2JqZWN0LWFwaS50cz9jMThhIiwid2VicGFjazovLzIwMjQta3Rzc3R1ZGlvLWhvbWV3b3Jrcy8uLi9zcmMvYXBpL29ic2VydmUudHM/ZDE2YyIsIndlYnBhY2s6Ly8yMDI0LWt0c3N0dWRpby1ob21ld29ya3MvLi4vc3JjL2FwaS90b2pzLnRzPzhiNjQiLCJ3ZWJwYWNrOi8vMjAyNC1rdHNzdHVkaW8taG9tZXdvcmtzLy4uL3NyYy9hcGkvdHJhY2UudHM/YzJkZSIsIndlYnBhY2s6Ly8yMDI0LWt0c3N0dWRpby1ob21ld29ya3MvLi4vc3JjL2FwaS90cmFuc2FjdGlvbi50cz8wNjJhIiwid2VicGFjazovLzIwMjQta3Rzc3R1ZGlvLWhvbWV3b3Jrcy8uLi9zcmMvYXBpL3doZW4udHM/M2FhNyIsIndlYnBhY2s6Ly8yMDI0LWt0c3N0dWRpby1ob21ld29ya3MvLi4vc3JjL3R5cGVzL2R5bmFtaWNvYmplY3QudHM/MmYwMyIsIndlYnBhY2s6Ly8yMDI0LWt0c3N0dWRpby1ob21ld29ya3MvLi4vc3JjL3R5cGVzL2ludGVyY2VwdC11dGlscy50cz9lOTcwIiwid2VicGFjazovLzIwMjQta3Rzc3R1ZGlvLWhvbWV3b3Jrcy8uLi9zcmMvdHlwZXMvbGlzdGVuLXV0aWxzLnRzPzA5YTYiLCJ3ZWJwYWNrOi8vMjAyNC1rdHNzdHVkaW8taG9tZXdvcmtzLy4uL3NyYy9hcGkvbWFrZU9ic2VydmFibGUudHM/NWMxNCIsIndlYnBhY2s6Ly8yMDI0LWt0c3N0dWRpby1ob21ld29ya3MvLi4vc3JjL3R5cGVzL29ic2VydmFibGVhcnJheS50cz81ZTRiIiwid2VicGFjazovLzIwMjQta3Rzc3R1ZGlvLWhvbWV3b3Jrcy8uLi9zcmMvdHlwZXMvb2JzZXJ2YWJsZW1hcC50cz9hZTk5Iiwid2VicGFjazovLzIwMjQta3Rzc3R1ZGlvLWhvbWV3b3Jrcy8uLi9zcmMvdHlwZXMvb2JzZXJ2YWJsZXNldC50cz81YmQ1Iiwid2VicGFjazovLzIwMjQta3Rzc3R1ZGlvLWhvbWV3b3Jrcy8uLi9zcmMvdHlwZXMvb2JzZXJ2YWJsZW9iamVjdC50cz8wOTlmIiwid2VicGFjazovLzIwMjQta3Rzc3R1ZGlvLWhvbWV3b3Jrcy8uLi9zcmMvdHlwZXMvbGVnYWN5b2JzZXJ2YWJsZWFycmF5LnRzPzg3NWIiLCJ3ZWJwYWNrOi8vMjAyNC1rdHNzdHVkaW8taG9tZXdvcmtzLy4uL3NyYy90eXBlcy90eXBlLXV0aWxzLnRzP2I4NjAiLCJ3ZWJwYWNrOi8vMjAyNC1rdHNzdHVkaW8taG9tZXdvcmtzLy4uL3NyYy91dGlscy9lcS50cz85ZGFkIiwid2VicGFjazovLzIwMjQta3Rzc3R1ZGlvLWhvbWV3b3Jrcy8uLi9zcmMvdXRpbHMvaXRlcmFibGUudHM/ODYwOSIsIndlYnBhY2s6Ly8yMDI0LWt0c3N0dWRpby1ob21ld29ya3MvLi4vc3JjL2FwaS9hbm5vdGF0aW9uLnRzPzk0ZjEiLCJ3ZWJwYWNrOi8vMjAyNC1rdHNzdHVkaW8taG9tZXdvcmtzLy4uL3NyYy9tb2J4LnRzPzFiMDEiLCJ3ZWJwYWNrOi8vMjAyNC1rdHNzdHVkaW8taG9tZXdvcmtzLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2JpbmQuanM/MWQyYiIsIndlYnBhY2s6Ly8yMDI0LWt0c3N0dWRpby1ob21ld29ya3MvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL3V0aWxzLmpzP2M1MzIiLCJ3ZWJwYWNrOi8vMjAyNC1rdHNzdHVkaW8taG9tZXdvcmtzLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL0F4aW9zRXJyb3IuanM/NzkxNyIsIndlYnBhY2s6Ly8yMDI0LWt0c3N0dWRpby1ob21ld29ya3MvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvbnVsbC5qcz80NTgxIiwid2VicGFjazovLzIwMjQta3Rzc3R1ZGlvLWhvbWV3b3Jrcy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy90b0Zvcm1EYXRhLmpzP2U0NjciLCJ3ZWJwYWNrOi8vMjAyNC1rdHNzdHVkaW8taG9tZXdvcmtzLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL0F4aW9zVVJMU2VhcmNoUGFyYW1zLmpzP2I5MjIiLCJ3ZWJwYWNrOi8vMjAyNC1rdHNzdHVkaW8taG9tZXdvcmtzLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2J1aWxkVVJMLmpzPzMwYjUiLCJ3ZWJwYWNrOi8vMjAyNC1rdHNzdHVkaW8taG9tZXdvcmtzLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL0ludGVyY2VwdG9yTWFuYWdlci5qcz9mNmI0Iiwid2VicGFjazovLzIwMjQta3Rzc3R1ZGlvLWhvbWV3b3Jrcy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvZGVmYXVsdHMvdHJhbnNpdGlvbmFsLmpzP2NhZmEiLCJ3ZWJwYWNrOi8vMjAyNC1rdHNzdHVkaW8taG9tZXdvcmtzLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9wbGF0Zm9ybS9icm93c2VyL2NsYXNzZXMvVVJMU2VhcmNoUGFyYW1zLmpzPzJhZjYiLCJ3ZWJwYWNrOi8vMjAyNC1rdHNzdHVkaW8taG9tZXdvcmtzLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9wbGF0Zm9ybS9icm93c2VyL2NsYXNzZXMvRm9ybURhdGEuanM/ODMyNCIsIndlYnBhY2s6Ly8yMDI0LWt0c3N0dWRpby1ob21ld29ya3MvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL3BsYXRmb3JtL2Jyb3dzZXIvY2xhc3Nlcy9CbG9iLmpzP2QyMTUiLCJ3ZWJwYWNrOi8vMjAyNC1rdHNzdHVkaW8taG9tZXdvcmtzLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9wbGF0Zm9ybS9icm93c2VyL2luZGV4LmpzP2YzYmQiLCJ3ZWJwYWNrOi8vMjAyNC1rdHNzdHVkaW8taG9tZXdvcmtzLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9wbGF0Zm9ybS9jb21tb24vdXRpbHMuanM/Y2U2NyIsIndlYnBhY2s6Ly8yMDI0LWt0c3N0dWRpby1ob21ld29ya3MvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL3BsYXRmb3JtL2luZGV4LmpzPzRlZDQiLCJ3ZWJwYWNrOi8vMjAyNC1rdHNzdHVkaW8taG9tZXdvcmtzLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL3RvVVJMRW5jb2RlZEZvcm0uanM/ZTQwYyIsIndlYnBhY2s6Ly8yMDI0LWt0c3N0dWRpby1ob21ld29ya3MvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvZm9ybURhdGFUb0pTT04uanM/MDdmNCIsIndlYnBhY2s6Ly8yMDI0LWt0c3N0dWRpby1ob21ld29ya3MvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2RlZmF1bHRzL2luZGV4LmpzPzRjM2QiLCJ3ZWJwYWNrOi8vMjAyNC1rdHNzdHVkaW8taG9tZXdvcmtzLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL3BhcnNlSGVhZGVycy5qcz9jMzQ1Iiwid2VicGFjazovLzIwMjQta3Rzc3R1ZGlvLWhvbWV3b3Jrcy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9BeGlvc0hlYWRlcnMuanM/ZWRkNSIsIndlYnBhY2s6Ly8yMDI0LWt0c3N0dWRpby1ob21ld29ya3MvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvdHJhbnNmb3JtRGF0YS5qcz9jNDAxIiwid2VicGFjazovLzIwMjQta3Rzc3R1ZGlvLWhvbWV3b3Jrcy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY2FuY2VsL2lzQ2FuY2VsLmpzPzJlNjciLCJ3ZWJwYWNrOi8vMjAyNC1rdHNzdHVkaW8taG9tZXdvcmtzLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jYW5jZWwvQ2FuY2VsZWRFcnJvci5qcz9mYjYwIiwid2VicGFjazovLzIwMjQta3Rzc3R1ZGlvLWhvbWV3b3Jrcy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9zZXR0bGUuanM/NDY3ZiIsIndlYnBhY2s6Ly8yMDI0LWt0c3N0dWRpby1ob21ld29ya3MvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvY29va2llcy5qcz83YWFjIiwid2VicGFjazovLzIwMjQta3Rzc3R1ZGlvLWhvbWV3b3Jrcy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9pc0Fic29sdXRlVVJMLmpzP2Q5MjUiLCJ3ZWJwYWNrOi8vMjAyNC1rdHNzdHVkaW8taG9tZXdvcmtzLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2NvbWJpbmVVUkxzLmpzP2U2ODMiLCJ3ZWJwYWNrOi8vMjAyNC1rdHNzdHVkaW8taG9tZXdvcmtzLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL2J1aWxkRnVsbFBhdGguanM/ODNiOSIsIndlYnBhY2s6Ly8yMDI0LWt0c3N0dWRpby1ob21ld29ya3MvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvaXNVUkxTYW1lT3JpZ2luLmpzPzM5MzQiLCJ3ZWJwYWNrOi8vMjAyNC1rdHNzdHVkaW8taG9tZXdvcmtzLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL3BhcnNlUHJvdG9jb2wuanM/YjY4YSIsIndlYnBhY2s6Ly8yMDI0LWt0c3N0dWRpby1ob21ld29ya3MvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvc3BlZWRvbWV0ZXIuanM/NjdiZiIsIndlYnBhY2s6Ly8yMDI0LWt0c3N0dWRpby1ob21ld29ya3MvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2FkYXB0ZXJzL3hoci5qcz9iNTBkIiwid2VicGFjazovLzIwMjQta3Rzc3R1ZGlvLWhvbWV3b3Jrcy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvYWRhcHRlcnMvYWRhcHRlcnMuanM/M2ExMSIsIndlYnBhY2s6Ly8yMDI0LWt0c3N0dWRpby1ob21ld29ya3MvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvZGlzcGF0Y2hSZXF1ZXN0LmpzPzUyNzAiLCJ3ZWJwYWNrOi8vMjAyNC1rdHNzdHVkaW8taG9tZXdvcmtzLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL21lcmdlQ29uZmlnLmpzPzRhN2IiLCJ3ZWJwYWNrOi8vMjAyNC1rdHNzdHVkaW8taG9tZXdvcmtzLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9lbnYvZGF0YS5qcz81Y2NlIiwid2VicGFjazovLzIwMjQta3Rzc3R1ZGlvLWhvbWV3b3Jrcy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy92YWxpZGF0b3IuanM/ODQ4YiIsIndlYnBhY2s6Ly8yMDI0LWt0c3N0dWRpby1ob21ld29ya3MvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvQXhpb3MuanM/MGEwNiIsIndlYnBhY2s6Ly8yMDI0LWt0c3N0dWRpby1ob21ld29ya3MvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NhbmNlbC9DYW5jZWxUb2tlbi5qcz84ZGY0Iiwid2VicGFjazovLzIwMjQta3Rzc3R1ZGlvLWhvbWV3b3Jrcy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9zcHJlYWQuanM/MGRmNiIsIndlYnBhY2s6Ly8yMDI0LWt0c3N0dWRpby1ob21ld29ya3MvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvaXNBeGlvc0Vycm9yLmpzPzVmMDIiLCJ3ZWJwYWNrOi8vMjAyNC1rdHNzdHVkaW8taG9tZXdvcmtzLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL0h0dHBTdGF0dXNDb2RlLmpzP2JlZmEiLCJ3ZWJwYWNrOi8vMjAyNC1rdHNzdHVkaW8taG9tZXdvcmtzLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9heGlvcy5qcz9jZWU0Iiwid2VicGFjazovLzIwMjQta3Rzc3R1ZGlvLWhvbWV3b3Jrcy8uL3NyYy9jb25maWcvaW5pdFZhbHVlcy50cz85NWU1Iiwid2VicGFjazovLzIwMjQta3Rzc3R1ZGlvLWhvbWV3b3Jrcy8uL3NyYy9jb25maWcvYXBpLnRzPzc4MDUiLCJ3ZWJwYWNrOi8vMjAyNC1rdHNzdHVkaW8taG9tZXdvcmtzLy4vc3JjL3N0b3JlL1VzZXJTdG9yZS9Vc2VyU3RvcmUudHN4P2MzYWYiLCJ3ZWJwYWNrOi8vMjAyNC1rdHNzdHVkaW8taG9tZXdvcmtzLy4vc3JjL3N0b3JlL1VzZXJTdG9yZS9pbmRleC50cz9jMGUxIiwid2VicGFjazovLzIwMjQta3Rzc3R1ZGlvLWhvbWV3b3Jrcy8uL3NyYy9jb25maWcvcGF0aHMudHN4PzUzYjAiLCJ3ZWJwYWNrOi8vMjAyNC1rdHNzdHVkaW8taG9tZXdvcmtzLy4vc3JjL2NvbXBvbmVudHMvSGVhZGVyL2NvbXBvbmVudHMvTWVudS9NZW51Lm1vZHVsZS5zY3NzP2JmODkiLCJ3ZWJwYWNrOi8vMjAyNC1rdHNzdHVkaW8taG9tZXdvcmtzLy4vc3JjL2NvbXBvbmVudHMvSGVhZGVyL2NvbXBvbmVudHMvTWVudS9NZW51LnRzeD9kMTAzIiwid2VicGFjazovLzIwMjQta3Rzc3R1ZGlvLWhvbWV3b3Jrcy8uL3NyYy9jb21wb25lbnRzL0hlYWRlci9jb21wb25lbnRzL01lbnUvaW5kZXgudHM/NjJiNSIsIndlYnBhY2s6Ly8yMDI0LWt0c3N0dWRpby1ob21ld29ya3MvLi9zcmMvY29tcG9uZW50cy9pY29ucy9IZWFydEljb24vSGVhcnRJY29uLnRzeD83YjVlIiwid2VicGFjazovLzIwMjQta3Rzc3R1ZGlvLWhvbWV3b3Jrcy8uL3NyYy9jb21wb25lbnRzL2ljb25zL0hlYXJ0SWNvbi9pbmRleC50cz84YmY3Iiwid2VicGFjazovLzIwMjQta3Rzc3R1ZGlvLWhvbWV3b3Jrcy8uL3NyYy9jb21wb25lbnRzL2ljb25zL1VzZXJJY29uL1VzZXJJY29uLnRzeD84MjFhIiwid2VicGFjazovLzIwMjQta3Rzc3R1ZGlvLWhvbWV3b3Jrcy8uL3NyYy9jb21wb25lbnRzL2ljb25zL1VzZXJJY29uL2luZGV4LnRzP2VhNmIiLCJ3ZWJwYWNrOi8vMjAyNC1rdHNzdHVkaW8taG9tZXdvcmtzLy4vc3JjL2NvbXBvbmVudHMvSGVhZGVyL2NvbXBvbmVudHMvUmlnaHRCbG9jay9SaWdodEJsb2NrLm1vZHVsZS5zY3NzP2RjYzkiLCJ3ZWJwYWNrOi8vMjAyNC1rdHNzdHVkaW8taG9tZXdvcmtzLy4vc3JjL2NvbXBvbmVudHMvSGVhZGVyL2NvbXBvbmVudHMvUmlnaHRCbG9jay9SaWdodEJsb2NrLnRzeD81ZTMyIiwid2VicGFjazovLzIwMjQta3Rzc3R1ZGlvLWhvbWV3b3Jrcy8uL3NyYy9jb21wb25lbnRzL0hlYWRlci9jb21wb25lbnRzL1JpZ2h0QmxvY2svaW5kZXgudHM/OGI3NCIsIndlYnBhY2s6Ly8yMDI0LWt0c3N0dWRpby1ob21ld29ya3MvLi9zcmMvY29tcG9uZW50cy9IZWFkZXIvSGVhZGVyLm1vZHVsZS5zY3NzP2FhYTAiLCJ3ZWJwYWNrOi8vMjAyNC1rdHNzdHVkaW8taG9tZXdvcmtzLy4vc3JjL2NvbXBvbmVudHMvSGVhZGVyL0hlYWRlci50c3g/N2ViYSIsIndlYnBhY2s6Ly8yMDI0LWt0c3N0dWRpby1ob21ld29ya3MvLi9zcmMvY29tcG9uZW50cy9IZWFkZXIvaW5kZXgudHM/NzBhNSIsIndlYnBhY2s6Ly8yMDI0LWt0c3N0dWRpby1ob21ld29ya3MvLi9zcmMvY29tcG9uZW50cy9NYWluL01haW4ubW9kdWxlLnNjc3M/MmM3MSIsIndlYnBhY2s6Ly8yMDI0LWt0c3N0dWRpby1ob21ld29ya3MvLi9zcmMvY29tcG9uZW50cy9NYWluL01haW4udHN4PzI1ZGIiLCJ3ZWJwYWNrOi8vMjAyNC1rdHNzdHVkaW8taG9tZXdvcmtzLy4vc3JjL2NvbXBvbmVudHMvTWFpbi9pbmRleC50cz8xNmU1Iiwid2VicGFjazovLzIwMjQta3Rzc3R1ZGlvLWhvbWV3b3Jrcy8uLi8uLi9zcmMvdXRpbHMvYXNzZXJ0RW52aXJvbm1lbnQudHM/ODNiYiIsIndlYnBhY2s6Ly8yMDI0LWt0c3N0dWRpby1ob21ld29ya3MvLi4vLi4vc3JjL3V0aWxzL3JlYWN0QmF0Y2hlZFVwZGF0ZXMudHM/ZDBjNCIsIndlYnBhY2s6Ly8yMDI0LWt0c3N0dWRpby1ob21ld29ya3MvLi4vLi4vc3JjL3V0aWxzL29ic2VydmVyQmF0Y2hpbmcudHM/NjY3YyIsIndlYnBhY2s6Ly8yMDI0LWt0c3N0dWRpby1ob21ld29ya3MvLi4vLi4vc3JjL3V0aWxzL3ByaW50RGVidWdWYWx1ZS50cz9lYmMxIiwid2VicGFjazovLzIwMjQta3Rzc3R1ZGlvLWhvbWV3b3Jrcy8uLi9zcmMvc3RhdGljUmVuZGVyaW5nLnRzP2YzMTgiLCJ3ZWJwYWNrOi8vMjAyNC1rdHNzdHVkaW8taG9tZXdvcmtzLy4uLy4uL3NyYy91dGlscy9Vbml2ZXJzYWxGaW5hbGl6YXRpb25SZWdpc3RyeS50cz8xNjU3Iiwid2VicGFjazovLzIwMjQta3Rzc3R1ZGlvLWhvbWV3b3Jrcy8uLi8uLi9zcmMvdXRpbHMvb2JzZXJ2ZXJGaW5hbGl6YXRpb25SZWdpc3RyeS50cz9hYTM4Iiwid2VicGFjazovLzIwMjQta3Rzc3R1ZGlvLWhvbWV3b3Jrcy8uLi9zcmMvdXNlT2JzZXJ2ZXIudHM/YzY2MiIsIndlYnBhY2s6Ly8yMDI0LWt0c3N0dWRpby1ob21ld29ya3MvLi4vc3JjL29ic2VydmVyLnRzP2M5NDMiLCJ3ZWJwYWNrOi8vMjAyNC1rdHNzdHVkaW8taG9tZXdvcmtzLy4uL3NyYy9PYnNlcnZlckNvbXBvbmVudC50cz85ZDgxIiwid2VicGFjazovLzIwMjQta3Rzc3R1ZGlvLWhvbWV3b3Jrcy8uLi9zcmMvdXNlTG9jYWxPYnNlcnZhYmxlLnRzP2VjZTYiLCJ3ZWJwYWNrOi8vMjAyNC1rdHNzdHVkaW8taG9tZXdvcmtzLy4uL3NyYy91c2VBc09ic2VydmFibGVTb3VyY2UudHM/MmY2MiIsIndlYnBhY2s6Ly8yMDI0LWt0c3N0dWRpby1ob21ld29ya3MvLi4vc3JjL3VzZUxvY2FsU3RvcmUudHM/MjZmYyIsIndlYnBhY2s6Ly8yMDI0LWt0c3N0dWRpby1ob21ld29ya3MvLi4vc3JjL2luZGV4LnRzPzZmMzciLCJ3ZWJwYWNrOi8vMjAyNC1rdHNzdHVkaW8taG9tZXdvcmtzLy4vc3JjL2NvbXBvbmVudHMvTG9hZGVyL0xvYWRlci5tb2R1bGUuc2Nzcz81ZTRmIiwid2VicGFjazovLzIwMjQta3Rzc3R1ZGlvLWhvbWV3b3Jrcy8uL3NyYy9jb21wb25lbnRzL0xvYWRlci9Mb2FkZXIudHN4PzQ1YWYiLCJ3ZWJwYWNrOi8vMjAyNC1rdHNzdHVkaW8taG9tZXdvcmtzLy4vc3JjL2NvbXBvbmVudHMvTG9hZGVyL2luZGV4LnRzPzMwMWYiLCJ3ZWJwYWNrOi8vMjAyNC1rdHNzdHVkaW8taG9tZXdvcmtzLy4vc3JjL2NvbXBvbmVudHMvQnV0dG9uL0J1dHRvbi5tb2R1bGUuc2Nzcz85ZmJiIiwid2VicGFjazovLzIwMjQta3Rzc3R1ZGlvLWhvbWV3b3Jrcy8uL3NyYy9jb21wb25lbnRzL0J1dHRvbi9CdXR0b24udHN4PzBjNWEiLCJ3ZWJwYWNrOi8vMjAyNC1rdHNzdHVkaW8taG9tZXdvcmtzLy4vc3JjL2NvbXBvbmVudHMvQnV0dG9uL2luZGV4LnRzPzAxYTIiLCJ3ZWJwYWNrOi8vMjAyNC1rdHNzdHVkaW8taG9tZXdvcmtzLy4vc3JjL2NvbXBvbmVudHMvRXJyb3JCb3gvRXJyb3JCb3gubW9kdWxlLnNjc3M/NTM3ZSIsIndlYnBhY2s6Ly8yMDI0LWt0c3N0dWRpby1ob21ld29ya3MvLi9zcmMvY29tcG9uZW50cy9FcnJvckJveC9FcnJvckJveC50c3g/OTY5ZiIsIndlYnBhY2s6Ly8yMDI0LWt0c3N0dWRpby1ob21ld29ya3MvLi9zcmMvY29tcG9uZW50cy9FcnJvckJveC9pbmRleC50cz80ZTBlIiwid2VicGFjazovLzIwMjQta3Rzc3R1ZGlvLWhvbWV3b3Jrcy8uL3NyYy9zdHlsZXMvY3VzdG9tU3R5bGVzLm1vZHVsZS5zY3NzP2Q0NGQiLCJ3ZWJwYWNrOi8vMjAyNC1rdHNzdHVkaW8taG9tZXdvcmtzLy4vc3JjL2NvbXBvbmVudHMvaWNvbnMvQXJyb3dMZWZ0SWNvbi9BcnJvd0xlZnRJY29uLnRzeD82ZWM3Iiwid2VicGFjazovLzIwMjQta3Rzc3R1ZGlvLWhvbWV3b3Jrcy8uL3NyYy9jb21wb25lbnRzL2ljb25zL0Fycm93TGVmdEljb24vaW5kZXgudHM/YmE2MyIsIndlYnBhY2s6Ly8yMDI0LWt0c3N0dWRpby1ob21ld29ya3MvLi9zcmMvY29tcG9uZW50cy9pY29ucy9FcUljb24vRXFJY29uLnRzeD9jZjViIiwid2VicGFjazovLzIwMjQta3Rzc3R1ZGlvLWhvbWV3b3Jrcy8uL3NyYy9jb21wb25lbnRzL2ljb25zL0VxSWNvbi9pbmRleC50cz9jYzVmIiwid2VicGFjazovLzIwMjQta3Rzc3R1ZGlvLWhvbWV3b3Jrcy8uL3NyYy9jb21wb25lbnRzL2ljb25zL0luZ0ljb24vSW5nSWNvbi50c3g/ZTFmYyIsIndlYnBhY2s6Ly8yMDI0LWt0c3N0dWRpby1ob21ld29ya3MvLi9zcmMvY29tcG9uZW50cy9pY29ucy9JbmdJY29uL2luZGV4LnRzPzAzMjIiLCJ3ZWJwYWNrOi8vMjAyNC1rdHNzdHVkaW8taG9tZXdvcmtzLy4vc3JjL2hvb2tzL3VzZUxvY2FsU3RvcmUudHN4PzhhZTYiLCJ3ZWJwYWNrOi8vMjAyNC1rdHNzdHVkaW8taG9tZXdvcmtzLy4vc3JjL3N0b3JlL1JlY2lwZVN0b3JlL1JlY2lwZVN0b3JlLnRzeD9mMTg2Iiwid2VicGFjazovLzIwMjQta3Rzc3R1ZGlvLWhvbWV3b3Jrcy8uL3NyYy9zdG9yZS9SZWNpcGVTdG9yZS9pbmRleC50cz8yMzBlIiwid2VicGFjazovLzIwMjQta3Rzc3R1ZGlvLWhvbWV3b3Jrcy8uL3NyYy9BcHAvcGFnZXMvUmVjaXBlL2NvbXBvbmVudHMvUHJldmlld0Jsb2NrL1ByZXZpZXdCbG9jay50c3g/YWRiMyIsIndlYnBhY2s6Ly8yMDI0LWt0c3N0dWRpby1ob21ld29ya3MvLi9zcmMvQXBwL3BhZ2VzL1JlY2lwZS9jb21wb25lbnRzL1ByZXZpZXdCbG9jay9pbmRleC50cz8wZmRkIiwid2VicGFjazovLzIwMjQta3Rzc3R1ZGlvLWhvbWV3b3Jrcy8uL3NyYy9BcHAvcGFnZXMvUmVjaXBlL2NvbXBvbmVudHMvUmVjaXBlTmVlZC9SZWNpcGVOZWVkLm1vZHVsZS5zY3NzPzM1YWMiLCJ3ZWJwYWNrOi8vMjAyNC1rdHNzdHVkaW8taG9tZXdvcmtzLy4vc3JjL0FwcC9wYWdlcy9SZWNpcGUvY29tcG9uZW50cy9SZWNpcGVOZWVkL1JlY2lwZU5lZWQudHN4PzIwNjciLCJ3ZWJwYWNrOi8vMjAyNC1rdHNzdHVkaW8taG9tZXdvcmtzLy4vc3JjL0FwcC9wYWdlcy9SZWNpcGUvY29tcG9uZW50cy9SZWNpcGVOZWVkL2luZGV4LnRzP2IwYzMiLCJ3ZWJwYWNrOi8vMjAyNC1rdHNzdHVkaW8taG9tZXdvcmtzLy4vc3JjL0FwcC9wYWdlcy9SZWNpcGUvUmVjaXBlLm1vZHVsZS5zY3NzPzY5M2EiLCJ3ZWJwYWNrOi8vMjAyNC1rdHNzdHVkaW8taG9tZXdvcmtzLy4vc3JjL0FwcC9wYWdlcy9SZWNpcGUvUmVjaXBlLnRzeD9kOGM0Iiwid2VicGFjazovLzIwMjQta3Rzc3R1ZGlvLWhvbWV3b3Jrcy8uL3NyYy9BcHAvcGFnZXMvUmVjaXBlL2luZGV4LnRzP2Y3OWUiLCJ3ZWJwYWNrOi8vMjAyNC1rdHNzdHVkaW8taG9tZXdvcmtzLy4vc3JjL2NvbXBvbmVudHMvaWNvbnMvQXJyb3dSaWdodEljb24vQXJyb3dSaWdodEljb24udHN4PzMwOGQiLCJ3ZWJwYWNrOi8vMjAyNC1rdHNzdHVkaW8taG9tZXdvcmtzLy4vc3JjL2NvbXBvbmVudHMvaWNvbnMvQXJyb3dSaWdodEljb24vaW5kZXgudHM/ZWExMCIsIndlYnBhY2s6Ly8yMDI0LWt0c3N0dWRpby1ob21ld29ya3MvLi9zcmMvc3RvcmUvUGFnZUNvbnRyb2xsZXJTdG9yZS9QYWdlQ29udHJvbGxlclN0b3JlLnRzeD80ZGEyIiwid2VicGFjazovLzIwMjQta3Rzc3R1ZGlvLWhvbWV3b3Jrcy8uL3NyYy9jb21wb25lbnRzL1BhZ2VDb250cm9sbGVyL1BhZ2VDb250cm9sbGVyLm1vZHVsZS5zY3NzPzgwMzAiLCJ3ZWJwYWNrOi8vMjAyNC1rdHNzdHVkaW8taG9tZXdvcmtzLy4vc3JjL2NvbXBvbmVudHMvUGFnZUNvbnRyb2xsZXIvUGFnZUNvbnRyb2xsZXIudHN4PzQzZTMiLCJ3ZWJwYWNrOi8vMjAyNC1rdHNzdHVkaW8taG9tZXdvcmtzLy4vc3JjL2NvbXBvbmVudHMvUGFnZUNvbnRyb2xsZXIvaW5kZXgudHM/OGE4NyIsIndlYnBhY2s6Ly8yMDI0LWt0c3N0dWRpby1ob21ld29ya3MvLi9zcmMvY29tcG9uZW50cy9MaXN0U2hvd2VyL0xpc3RTaG93ZXIubW9kdWxlLnNjc3M/NWEzYiIsIndlYnBhY2s6Ly8yMDI0LWt0c3N0dWRpby1ob21ld29ya3MvLi9zcmMvc3RvcmUvU2VhcmNoUGFyYW1zU3RvcmUvU2VhcmNoUGFyYW1zU3RvcmUudHM/ZjM3YyIsIndlYnBhY2s6Ly8yMDI0LWt0c3N0dWRpby1ob21ld29ya3MvLi9zcmMvc3RvcmUvU2VhcmNoUGFyYW1zU3RvcmUvaW5kZXgudHM/MWZkZCIsIndlYnBhY2s6Ly8yMDI0LWt0c3N0dWRpby1ob21ld29ya3MvLi9zcmMvY29tcG9uZW50cy9MaXN0U2hvd2VyL0xpc3RTaG93ZXIudHN4PzYwNDkiLCJ3ZWJwYWNrOi8vMjAyNC1rdHNzdHVkaW8taG9tZXdvcmtzLy4vc3JjL2NvbXBvbmVudHMvTGlzdFNob3dlci9pbmRleC50cz84ZGE5Iiwid2VicGFjazovLzIwMjQta3Rzc3R1ZGlvLWhvbWV3b3Jrcy8uL3NyYy91dGlscy9jb2xsZWN0aW9uLnRzPzBlMjYiLCJ3ZWJwYWNrOi8vMjAyNC1rdHNzdHVkaW8taG9tZXdvcmtzLy4vc3JjL3N0b3JlL0Jhc2VMaXN0U3RvcmUvQmFzZUxpc3RTdG9yZS50c3g/NjBhZCIsIndlYnBhY2s6Ly8yMDI0LWt0c3N0dWRpby1ob21ld29ya3MvLi9zcmMvc3RvcmUvQmFzZUxpc3RTdG9yZS9pbmRleC50cz85ZjVkIiwid2VicGFjazovLzIwMjQta3Rzc3R1ZGlvLWhvbWV3b3Jrcy8uL3NyYy9zdG9yZS9SZWNpcGVMaXN0U3RvcmUvUmVjaXBlTGlzdFN0b3JlLnRzeD83ZTJiIiwid2VicGFjazovLzIwMjQta3Rzc3R1ZGlvLWhvbWV3b3Jrcy8uL3NyYy9zdG9yZS9SZWNpcGVMaXN0U3RvcmUvaW5kZXgudHM/YWU4MyIsIndlYnBhY2s6Ly8yMDI0LWt0c3N0dWRpby1ob21ld29ya3MvLi9zcmMvY29tcG9uZW50cy9JbnB1dC9JbnB1dC5tb2R1bGUuc2Nzcz9iNjhlIiwid2VicGFjazovLzIwMjQta3Rzc3R1ZGlvLWhvbWV3b3Jrcy8uL3NyYy9jb21wb25lbnRzL0lucHV0L0lucHV0LnRzeD9hMzRkIiwid2VicGFjazovLzIwMjQta3Rzc3R1ZGlvLWhvbWV3b3Jrcy8uL3NyYy9jb21wb25lbnRzL0lucHV0L2luZGV4LnRzP2Q0N2MiLCJ3ZWJwYWNrOi8vMjAyNC1rdHNzdHVkaW8taG9tZXdvcmtzLy4vc3JjL2NvbXBvbmVudHMvaWNvbnMvQXJyb3dEb3duSWNvbi9BcnJvd0Rvd25JY29uLnRzeD9mNjgyIiwid2VicGFjazovLzIwMjQta3Rzc3R1ZGlvLWhvbWV3b3Jrcy8uL3NyYy9jb21wb25lbnRzL2ljb25zL0Fycm93RG93bkljb24vaW5kZXgudHM/ZjE5NiIsIndlYnBhY2s6Ly8yMDI0LWt0c3N0dWRpby1ob21ld29ya3MvLi9zcmMvY29tcG9uZW50cy9NdWx0aURyb3Bkb3duL011bHRpRHJvcGRvd24ubW9kdWxlLnNjc3M/NGNhYSIsIndlYnBhY2s6Ly8yMDI0LWt0c3N0dWRpby1ob21ld29ya3MvLi9zcmMvY29tcG9uZW50cy9NdWx0aURyb3Bkb3duL011bHRpRHJvcGRvd24udHN4PzI2Y2YiLCJ3ZWJwYWNrOi8vMjAyNC1rdHNzdHVkaW8taG9tZXdvcmtzLy4vc3JjL2NvbXBvbmVudHMvTXVsdGlEcm9wZG93bi9pbmRleC50cz9mZTM2Iiwid2VicGFjazovLzIwMjQta3Rzc3R1ZGlvLWhvbWV3b3Jrcy8uL3NyYy9jb21wb25lbnRzL2ljb25zL1NlYXJjaEljb24vU2VhcmNoSWNvbi50c3g/MjNlOSIsIndlYnBhY2s6Ly8yMDI0LWt0c3N0dWRpby1ob21ld29ya3MvLi9zcmMvY29tcG9uZW50cy9pY29ucy9TZWFyY2hJY29uL2luZGV4LnRzPzliNTgiLCJ3ZWJwYWNrOi8vMjAyNC1rdHNzdHVkaW8taG9tZXdvcmtzLy4vc3JjL3N0b3JlL0ZpbHRlclN0b3JlL0ZpbHRlclN0b3JlLnRzeD9iMzNkIiwid2VicGFjazovLzIwMjQta3Rzc3R1ZGlvLWhvbWV3b3Jrcy8uL3NyYy9jb21wb25lbnRzL0NvbnRlbnRGaWx0ZXJzL0NvbnRlbnRGaWx0ZXJzLm1vZHVsZS5zY3NzP2I3NjEiLCJ3ZWJwYWNrOi8vMjAyNC1rdHNzdHVkaW8taG9tZXdvcmtzLy4vc3JjL2NvbXBvbmVudHMvZmlsdGVycy9GaWx0ZXIvRmlsdGVyLm1vZHVsZS5zY3NzP2E3Y2QiLCJ3ZWJwYWNrOi8vMjAyNC1rdHNzdHVkaW8taG9tZXdvcmtzLy4vc3JjL2NvbXBvbmVudHMvZmlsdGVycy9GaWx0ZXIvRmlsdGVyLnRzeD82NzlhIiwid2VicGFjazovLzIwMjQta3Rzc3R1ZGlvLWhvbWV3b3Jrcy8uL3NyYy9jb21wb25lbnRzL2ZpbHRlcnMvRmlsdGVyL2luZGV4LnRzPzhiMjAiLCJ3ZWJwYWNrOi8vMjAyNC1rdHNzdHVkaW8taG9tZXdvcmtzLy4vc3JjL2NvbXBvbmVudHMvZmlsdGVycy9NdWx0aVN0cmluZ0ZpbHRlci9NdWx0aVN0cmluZ0ZpbHRlci50c3g/YTdiOCIsIndlYnBhY2s6Ly8yMDI0LWt0c3N0dWRpby1ob21ld29ya3MvLi9zcmMvY29tcG9uZW50cy9maWx0ZXJzL011bHRpU3RyaW5nRmlsdGVyL2luZGV4LnRzPzlkYzIiLCJ3ZWJwYWNrOi8vMjAyNC1rdHNzdHVkaW8taG9tZXdvcmtzLy4vc3JjL2NvbXBvbmVudHMvZmlsdGVycy9TdHJpbmdGaWx0ZXIvU3RyaW5nRmlsdGVyLnRzeD84YzkwIiwid2VicGFjazovLzIwMjQta3Rzc3R1ZGlvLWhvbWV3b3Jrcy8uL3NyYy9jb21wb25lbnRzL2ZpbHRlcnMvU3RyaW5nRmlsdGVyL2luZGV4LnRzPzRkNjgiLCJ3ZWJwYWNrOi8vMjAyNC1rdHNzdHVkaW8taG9tZXdvcmtzLy4vc3JjL2NvbXBvbmVudHMvZmlsdGVycy9OdW1iZXJGaWx0ZXIvTnVtYmVyRmlsdGVyLnRzeD8wYmI5Iiwid2VicGFjazovLzIwMjQta3Rzc3R1ZGlvLWhvbWV3b3Jrcy8uL3NyYy9jb21wb25lbnRzL2ZpbHRlcnMvTnVtYmVyRmlsdGVyL2luZGV4LnRzPzYwMmIiLCJ3ZWJwYWNrOi8vMjAyNC1rdHNzdHVkaW8taG9tZXdvcmtzLy4vc3JjL2NvbXBvbmVudHMvaWNvbnMvQ2hlY2tJY29uL0NoZWNrSWNvbi50c3g/MmE0NyIsIndlYnBhY2s6Ly8yMDI0LWt0c3N0dWRpby1ob21ld29ya3MvLi9zcmMvY29tcG9uZW50cy9pY29ucy9DaGVja0ljb24vaW5kZXgudHM/NmJlMCIsIndlYnBhY2s6Ly8yMDI0LWt0c3N0dWRpby1ob21ld29ya3MvLi9zcmMvY29tcG9uZW50cy9DaGVja0JveC9DaGVja0JveC5tb2R1bGUuc2Nzcz83NjA0Iiwid2VicGFjazovLzIwMjQta3Rzc3R1ZGlvLWhvbWV3b3Jrcy8uL3NyYy9jb21wb25lbnRzL0NoZWNrQm94L0NoZWNrQm94LnRzeD85NmY1Iiwid2VicGFjazovLzIwMjQta3Rzc3R1ZGlvLWhvbWV3b3Jrcy8uL3NyYy9jb21wb25lbnRzL0NoZWNrQm94L2luZGV4LnRzP2JkNjciLCJ3ZWJwYWNrOi8vMjAyNC1rdHNzdHVkaW8taG9tZXdvcmtzLy4vc3JjL2NvbXBvbmVudHMvZmlsdGVycy9Cb29sZWFuRmlsdGVyL0Jvb2xlYW5GaWx0ZXIudHN4PzkxYWEiLCJ3ZWJwYWNrOi8vMjAyNC1rdHNzdHVkaW8taG9tZXdvcmtzLy4vc3JjL2NvbXBvbmVudHMvZmlsdGVycy9Cb29sZWFuRmlsdGVyL2luZGV4LnRzP2Q2NWUiLCJ3ZWJwYWNrOi8vMjAyNC1rdHNzdHVkaW8taG9tZXdvcmtzLy4vc3JjL2NvbXBvbmVudHMvQ29udGVudEZpbHRlcnMvQ29udGVudEZpbHRlcnMudHN4P2Y2NGQiLCJ3ZWJwYWNrOi8vMjAyNC1rdHNzdHVkaW8taG9tZXdvcmtzLy4vc3JjL2NvbXBvbmVudHMvQ29udGVudEZpbHRlcnMvaW5kZXgudHM/MzFkMSIsIndlYnBhY2s6Ly8yMDI0LWt0c3N0dWRpby1ob21ld29ya3MvLi9zcmMvQXBwL3BhZ2VzL1JlY2lwZXMvY29tcG9uZW50cy9Db250ZW50L0NvbnRlbnRIZWFkZXIvQ29udGVudEhlYWRlci50c3g/ZDg4OCIsIndlYnBhY2s6Ly8yMDI0LWt0c3N0dWRpby1ob21ld29ya3MvLi9zcmMvQXBwL3BhZ2VzL1JlY2lwZXMvY29tcG9uZW50cy9Db250ZW50L0NvbnRlbnRIZWFkZXIvaW5kZXgudHM/OWY1NyIsIndlYnBhY2s6Ly8yMDI0LWt0c3N0dWRpby1ob21ld29ya3MvLi9zcmMvY29tcG9uZW50cy9DYXJkL0NhcmQubW9kdWxlLnNjc3M/YmZhYiIsIndlYnBhY2s6Ly8yMDI0LWt0c3N0dWRpby1ob21ld29ya3MvLi9zcmMvY29tcG9uZW50cy9DYXJkL0NhcmQudHN4PzAyODgiLCJ3ZWJwYWNrOi8vMjAyNC1rdHNzdHVkaW8taG9tZXdvcmtzLy4vc3JjL2NvbXBvbmVudHMvQ2FyZC9pbmRleC50cz9hNDUzIiwid2VicGFjazovLzIwMjQta3Rzc3R1ZGlvLWhvbWV3b3Jrcy8uL3NyYy9jb21wb25lbnRzL2ljb25zL1RpbWVJY29uL1RpbWVJY29uLnRzeD80ZGJiIiwid2VicGFjazovLzIwMjQta3Rzc3R1ZGlvLWhvbWV3b3Jrcy8uL3NyYy9jb21wb25lbnRzL2ljb25zL1RpbWVJY29uL2luZGV4LnRzP2RjMDciLCJ3ZWJwYWNrOi8vMjAyNC1rdHNzdHVkaW8taG9tZXdvcmtzLy4vc3JjL2NvbXBvbmVudHMvUmVjaXBlQ2FyZC9jb21wb25lbnRzL1JlY2lwZUNhcmRDYXB0aW9uL1JlY2lwZUNhcmRDYXB0aW9uLm1vZHVsZS5zY3NzPzk0YTkiLCJ3ZWJwYWNrOi8vMjAyNC1rdHNzdHVkaW8taG9tZXdvcmtzLy4vc3JjL2NvbXBvbmVudHMvUmVjaXBlQ2FyZC9jb21wb25lbnRzL1JlY2lwZUNhcmRDYXB0aW9uL1JlY2lwZUNhcmRDYXB0aW9uLnRzeD9kOTNkIiwid2VicGFjazovLzIwMjQta3Rzc3R1ZGlvLWhvbWV3b3Jrcy8uL3NyYy9jb21wb25lbnRzL1JlY2lwZUNhcmQvY29tcG9uZW50cy9SZWNpcGVDYXJkQ2FwdGlvbi9pbmRleC50cz9jZTc5Iiwid2VicGFjazovLzIwMjQta3Rzc3R1ZGlvLWhvbWV3b3Jrcy8uL3NyYy9zdG9yZS9Mb2NhbFN0b3JhZ2UvTG9jYWxTdG9yYWdlLnRzeD9mOTU4Iiwid2VicGFjazovLzIwMjQta3Rzc3R1ZGlvLWhvbWV3b3Jrcy8uL3NyYy9zdG9yZS9Mb2NhbFN0b3JhZ2UvaW5kZXgudHM/ZDRjYyIsIndlYnBhY2s6Ly8yMDI0LWt0c3N0dWRpby1ob21ld29ya3MvLi9zcmMvY29tcG9uZW50cy9SZWNpcGVDYXJkL1JlY2lwZUNhcmQudHN4PzAwNTYiLCJ3ZWJwYWNrOi8vMjAyNC1rdHNzdHVkaW8taG9tZXdvcmtzLy4vc3JjL2NvbXBvbmVudHMvUmVjaXBlQ2FyZC9pbmRleC50cz8xZTgxIiwid2VicGFjazovLzIwMjQta3Rzc3R1ZGlvLWhvbWV3b3Jrcy8uL3NyYy9BcHAvcGFnZXMvUmVjaXBlcy9jb21wb25lbnRzL0NvbnRlbnQvQ29udGVudC5tb2R1bGUuc2Nzcz9lYzNlIiwid2VicGFjazovLzIwMjQta3Rzc3R1ZGlvLWhvbWV3b3Jrcy8uL3NyYy9BcHAvcGFnZXMvUmVjaXBlcy9jb21wb25lbnRzL0NvbnRlbnQvQ29udGVudC50c3g/MzY2OCIsIndlYnBhY2s6Ly8yMDI0LWt0c3N0dWRpby1ob21ld29ya3MvLi9zcmMvQXBwL3BhZ2VzL1JlY2lwZXMvY29tcG9uZW50cy9Db250ZW50L2luZGV4LnRzP2EwMzkiLCJ3ZWJwYWNrOi8vMjAyNC1rdHNzdHVkaW8taG9tZXdvcmtzLy4vc3JjL0FwcC9wYWdlcy9SZWNpcGVzL2NvbXBvbmVudHMvUHJldmlldy9QcmV2aWV3Lm1vZHVsZS5zY3NzP2U5NmUiLCJ3ZWJwYWNrOi8vMjAyNC1rdHNzdHVkaW8taG9tZXdvcmtzLy4vc3JjL0FwcC9wYWdlcy9SZWNpcGVzL2NvbXBvbmVudHMvUHJldmlldy9QcmV2aWV3LnRzeD8yODE3Iiwid2VicGFjazovLzIwMjQta3Rzc3R1ZGlvLWhvbWV3b3Jrcy8uL3NyYy9BcHAvcGFnZXMvUmVjaXBlcy9jb21wb25lbnRzL1ByZXZpZXcvaW5kZXgudHM/ZTQ2MiIsIndlYnBhY2s6Ly8yMDI0LWt0c3N0dWRpby1ob21ld29ya3MvLi9zcmMvQXBwL3BhZ2VzL1JlY2lwZXMvUmVjaXBlcy5tb2R1bGUuc2Nzcz8wOGRlIiwid2VicGFjazovLzIwMjQta3Rzc3R1ZGlvLWhvbWV3b3Jrcy8uL3NyYy9BcHAvcGFnZXMvUmVjaXBlcy9SZWNpcGVzLnRzeD85OWJhIiwid2VicGFjazovLzIwMjQta3Rzc3R1ZGlvLWhvbWV3b3Jrcy8uL3NyYy9BcHAvcGFnZXMvUmVjaXBlcy9pbmRleC50cz9lMGM3Iiwid2VicGFjazovLzIwMjQta3Rzc3R1ZGlvLWhvbWV3b3Jrcy8uL3NyYy9jb21wb25lbnRzL1BhZ2VUZW1wbGF0ZS9QYWdlVGVtcGxhdGUubW9kdWxlLnNjc3M/YzJiNCIsIndlYnBhY2s6Ly8yMDI0LWt0c3N0dWRpby1ob21ld29ya3MvLi9zcmMvY29tcG9uZW50cy9QYWdlVGVtcGxhdGUvUGFnZVRlbXBsYXRlLnRzeD9mYjNhIiwid2VicGFjazovLzIwMjQta3Rzc3R1ZGlvLWhvbWV3b3Jrcy8uL3NyYy9jb21wb25lbnRzL1BhZ2VUZW1wbGF0ZS9pbmRleC50cz82OGY1Iiwid2VicGFjazovLzIwMjQta3Rzc3R1ZGlvLWhvbWV3b3Jrcy8uL3NyYy9zdG9yZS9JbmdyZWRpZW50TGlzdFN0b3JlL0luZ3JlZGllbnRMaXN0U3RvcmUudHN4PzA5MWQiLCJ3ZWJwYWNrOi8vMjAyNC1rdHNzdHVkaW8taG9tZXdvcmtzLy4vc3JjL3N0b3JlL0luZ3JlZGllbnRMaXN0U3RvcmUvaW5kZXgudHM/YWQ1OCIsIndlYnBhY2s6Ly8yMDI0LWt0c3N0dWRpby1ob21ld29ya3MvLi9zcmMvQXBwL3BhZ2VzL0luZ3JlZGllbnRzL0luZ3JlZGllbnRzLnRzeD8wYWFmIiwid2VicGFjazovLzIwMjQta3Rzc3R1ZGlvLWhvbWV3b3Jrcy8uL3NyYy9BcHAvcGFnZXMvSW5ncmVkaWVudHMvaW5kZXgudHN4PzYyMTMiLCJ3ZWJwYWNrOi8vMjAyNC1rdHNzdHVkaW8taG9tZXdvcmtzLy4vc3JjL3N0b3JlL1Byb2R1Y3RMaXN0U3RvcmUvUHJvZHVjdExpc3RTdG9yZS50c3g/MTUzZSIsIndlYnBhY2s6Ly8yMDI0LWt0c3N0dWRpby1ob21ld29ya3MvLi9zcmMvc3RvcmUvUHJvZHVjdExpc3RTdG9yZS9pbmRleC50cz84MTZmIiwid2VicGFjazovLzIwMjQta3Rzc3R1ZGlvLWhvbWV3b3Jrcy8uL3NyYy9BcHAvcGFnZXMvUHJvZHVjdHMvUHJvZHVjdHMudHN4P2NkMDAiLCJ3ZWJwYWNrOi8vMjAyNC1rdHNzdHVkaW8taG9tZXdvcmtzLy4vc3JjL0FwcC9wYWdlcy9Qcm9kdWN0cy9pbmRleC50cz9mYjE3Iiwid2VicGFjazovLzIwMjQta3Rzc3R1ZGlvLWhvbWV3b3Jrcy8uL3NyYy9zdG9yZS9NZW51SXRlbUxpc3RTdG9yZS9NZW51SXRlbUxpc3RTdG9yZS50c3g/ZWVhYyIsIndlYnBhY2s6Ly8yMDI0LWt0c3N0dWRpby1ob21ld29ya3MvLi9zcmMvc3RvcmUvTWVudUl0ZW1MaXN0U3RvcmUvaW5kZXgudHM/YzZiNSIsIndlYnBhY2s6Ly8yMDI0LWt0c3N0dWRpby1ob21ld29ya3MvLi9zcmMvQXBwL3BhZ2VzL01lbnVJdGVtcy9NZW51SXRlbXMudHN4PzM4ZGMiLCJ3ZWJwYWNrOi8vMjAyNC1rdHNzdHVkaW8taG9tZXdvcmtzLy4vc3JjL0FwcC9wYWdlcy9NZW51SXRlbXMvaW5kZXgudHM/ZGVlNCIsIndlYnBhY2s6Ly8yMDI0LWt0c3N0dWRpby1ob21ld29ya3MvLi9zcmMvQXBwL3BhZ2VzL1NhdmVkL1NhdmVkLnRzeD80MjNmIiwid2VicGFjazovLzIwMjQta3Rzc3R1ZGlvLWhvbWV3b3Jrcy8uL3NyYy9BcHAvcGFnZXMvU2F2ZWQvaW5kZXgudHM/OTIwMCIsIndlYnBhY2s6Ly8yMDI0LWt0c3N0dWRpby1ob21ld29ya3MvLi9zcmMvQXBwL3BhZ2VzL0xvZ2luL0xvZ2luLm1vZHVsZS5zY3NzPzEyOTYiLCJ3ZWJwYWNrOi8vMjAyNC1rdHNzdHVkaW8taG9tZXdvcmtzLy4vc3JjL0FwcC9wYWdlcy9Mb2dpbi9Mb2dpbi50c3g/ZmE0YSIsIndlYnBhY2s6Ly8yMDI0LWt0c3N0dWRpby1ob21ld29ya3MvLi9zcmMvQXBwL3BhZ2VzL0xvZ2luL2luZGV4LnRzPzhmMTYiLCJ3ZWJwYWNrOi8vMjAyNC1rdHNzdHVkaW8taG9tZXdvcmtzLy4vc3JjL0FwcC9wYWdlcy9Vc2VyL1VzZXIubW9kdWxlLnNjc3M/OTdiMyIsIndlYnBhY2s6Ly8yMDI0LWt0c3N0dWRpby1ob21ld29ya3MvLi9zcmMvQXBwL3BhZ2VzL1VzZXIvVXNlci50c3g/NzE1OCIsIndlYnBhY2s6Ly8yMDI0LWt0c3N0dWRpby1ob21ld29ya3MvLi9zcmMvQXBwL3BhZ2VzL1VzZXIvaW5kZXgudHM/NDBiMyIsIndlYnBhY2s6Ly8yMDI0LWt0c3N0dWRpby1ob21ld29ya3MvLi9zcmMvc3RvcmUvTWVhbFBsYW5uaW5nU3RvcmUvTWVhbFBsYW5uaW5nU3RvcmUudHN4Pzg3NzciLCJ3ZWJwYWNrOi8vMjAyNC1rdHNzdHVkaW8taG9tZXdvcmtzLy4vc3JjL3N0b3JlL01lYWxQbGFubmluZ1N0b3JlL2luZGV4LnRzPzYzYmEiLCJ3ZWJwYWNrOi8vMjAyNC1rdHNzdHVkaW8taG9tZXdvcmtzLy4vc3JjL0FwcC9wYWdlcy9NZWFsUGxhbm5pbmcvY29tcG9uZW50cy9TbG90SW5mby9TbG90SW5mby5tb2R1bGUuc2Nzcz8xZDFlIiwid2VicGFjazovLzIwMjQta3Rzc3R1ZGlvLWhvbWV3b3Jrcy8uL3NyYy9BcHAvcGFnZXMvTWVhbFBsYW5uaW5nL2NvbXBvbmVudHMvU2xvdEluZm8vU2xvdEluZm8udHN4P2Q0ZTEiLCJ3ZWJwYWNrOi8vMjAyNC1rdHNzdHVkaW8taG9tZXdvcmtzLy4vc3JjL0FwcC9wYWdlcy9NZWFsUGxhbm5pbmcvY29tcG9uZW50cy9TbG90SW5mby9pbmRleC50cz8xYTQzIiwid2VicGFjazovLzIwMjQta3Rzc3R1ZGlvLWhvbWV3b3Jrcy8uL3NyYy9BcHAvcGFnZXMvTWVhbFBsYW5uaW5nL2NvbXBvbmVudHMvRGF5SW5mby9EYXlJbmZvLm1vZHVsZS5zY3NzPzYzNjEiLCJ3ZWJwYWNrOi8vMjAyNC1rdHNzdHVkaW8taG9tZXdvcmtzLy4vc3JjL0FwcC9wYWdlcy9NZWFsUGxhbm5pbmcvY29tcG9uZW50cy9EYXlJbmZvL0RheUluZm8udHN4PzAwZmQiLCJ3ZWJwYWNrOi8vMjAyNC1rdHNzdHVkaW8taG9tZXdvcmtzLy4vc3JjL0FwcC9wYWdlcy9NZWFsUGxhbm5pbmcvY29tcG9uZW50cy9EYXlJbmZvL2luZGV4LnRzP2RjY2IiLCJ3ZWJwYWNrOi8vMjAyNC1rdHNzdHVkaW8taG9tZXdvcmtzLy4vc3JjL0FwcC9wYWdlcy9NZWFsUGxhbm5pbmcvY29tcG9uZW50cy9XZWVrSW5mby9XZWVrSW5mby5tb2R1bGUuc2Nzcz8wMzg4Iiwid2VicGFjazovLzIwMjQta3Rzc3R1ZGlvLWhvbWV3b3Jrcy8uL3NyYy9BcHAvcGFnZXMvTWVhbFBsYW5uaW5nL2NvbXBvbmVudHMvV2Vla0luZm8vV2Vla0luZm8udHN4P2FiZDgiLCJ3ZWJwYWNrOi8vMjAyNC1rdHNzdHVkaW8taG9tZXdvcmtzLy4vc3JjL0FwcC9wYWdlcy9NZWFsUGxhbm5pbmcvY29tcG9uZW50cy9XZWVrSW5mby9pbmRleC50cz9jNGYzIiwid2VicGFjazovLzIwMjQta3Rzc3R1ZGlvLWhvbWV3b3Jrcy8uL3NyYy9BcHAvcGFnZXMvTWVhbFBsYW5uaW5nL01lYWxQbGFubmluZy5tb2R1bGUuc2Nzcz9mMzU0Iiwid2VicGFjazovLzIwMjQta3Rzc3R1ZGlvLWhvbWV3b3Jrcy8uL3NyYy9BcHAvcGFnZXMvTWVhbFBsYW5uaW5nL01lYWxQbGFubmluZy50c3g/YjUwNiIsIndlYnBhY2s6Ly8yMDI0LWt0c3N0dWRpby1ob21ld29ya3MvLi9zcmMvQXBwL3BhZ2VzL01lYWxQbGFubmluZy9pbmRleC50cz9lZjdkIiwid2VicGFjazovLzIwMjQta3Rzc3R1ZGlvLWhvbWV3b3Jrcy8uL3NyYy9BcHAvQXBwLnRzeD8wYTZhIiwid2VicGFjazovLzIwMjQta3Rzc3R1ZGlvLWhvbWV3b3Jrcy8uL3NyYy9BcHAvaW5kZXgudHM/YjViNyIsIndlYnBhY2s6Ly8yMDI0LWt0c3N0dWRpby1ob21ld29ya3MvLi9zcmMvY29uZmlnL2NvbmZpZ3VyZU1vYlgudHM/M2YyNyIsIndlYnBhY2s6Ly8yMDI0LWt0c3N0dWRpby1ob21ld29ya3MvLi9zcmMvc3R5bGVzL1JvYm90by9mb250cy5jc3M/MGM1NiIsIndlYnBhY2s6Ly8yMDI0LWt0c3N0dWRpby1ob21ld29ya3MvLi9zcmMvaW5kZXgudHN4P2Q5ODYiXSwic291cmNlc0NvbnRlbnQiOlsiXG4gICAgICBpbXBvcnQgQVBJIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICBpbXBvcnQgZG9tQVBJIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRGbiBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanNcIjtcbiAgICAgIGltcG9ydCBzZXRBdHRyaWJ1dGVzIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0U3R5bGVFbGVtZW50IGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzXCI7XG4gICAgICBpbXBvcnQgc3R5bGVUYWdUcmFuc2Zvcm1GbiBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzXCI7XG4gICAgICBpbXBvcnQgY29udGVudCwgKiBhcyBuYW1lZEV4cG9ydCBmcm9tIFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi9ub2RlX21vZHVsZXMvcG9zdGNzcy1sb2FkZXIvZGlzdC9janMuanM/P3J1bGVTZXRbMV0ucnVsZXNbMV0udXNlWzJdIS4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL3N0eWxlcy5zY3NzXCI7XG4gICAgICBcbiAgICAgIFxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtID0gc3R5bGVUYWdUcmFuc2Zvcm1Gbjtcbm9wdGlvbnMuc2V0QXR0cmlidXRlcyA9IHNldEF0dHJpYnV0ZXM7XG5vcHRpb25zLmluc2VydCA9IGluc2VydEZuLmJpbmQobnVsbCwgXCJoZWFkXCIpO1xub3B0aW9ucy5kb21BUEkgPSBkb21BUEk7XG5vcHRpb25zLmluc2VydFN0eWxlRWxlbWVudCA9IGluc2VydFN0eWxlRWxlbWVudDtcblxudmFyIHVwZGF0ZSA9IEFQSShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbmV4cG9ydCAqIGZyb20gXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uL25vZGVfbW9kdWxlcy9wb3N0Y3NzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cnVsZVNldFsxXS5ydWxlc1sxXS51c2VbMl0hLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vc3R5bGVzLnNjc3NcIjtcbiAgICAgICBleHBvcnQgZGVmYXVsdCBjb250ZW50ICYmIGNvbnRlbnQubG9jYWxzID8gY29udGVudC5sb2NhbHMgOiB1bmRlZmluZWQ7XG4iLCIvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuLy8jcmVnaW9uIFR5cGVzIGFuZCBDb25zdGFudHNcbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cbi8qKlxuICogQWN0aW9ucyByZXByZXNlbnQgdGhlIHR5cGUgb2YgY2hhbmdlIHRvIGEgbG9jYXRpb24gdmFsdWUuXG4gKi9cbmV4cG9ydCBlbnVtIEFjdGlvbiB7XG4gIC8qKlxuICAgKiBBIFBPUCBpbmRpY2F0ZXMgYSBjaGFuZ2UgdG8gYW4gYXJiaXRyYXJ5IGluZGV4IGluIHRoZSBoaXN0b3J5IHN0YWNrLCBzdWNoXG4gICAqIGFzIGEgYmFjayBvciBmb3J3YXJkIG5hdmlnYXRpb24uIEl0IGRvZXMgbm90IGRlc2NyaWJlIHRoZSBkaXJlY3Rpb24gb2YgdGhlXG4gICAqIG5hdmlnYXRpb24sIG9ubHkgdGhhdCB0aGUgY3VycmVudCBpbmRleCBjaGFuZ2VkLlxuICAgKlxuICAgKiBOb3RlOiBUaGlzIGlzIHRoZSBkZWZhdWx0IGFjdGlvbiBmb3IgbmV3bHkgY3JlYXRlZCBoaXN0b3J5IG9iamVjdHMuXG4gICAqL1xuICBQb3AgPSBcIlBPUFwiLFxuXG4gIC8qKlxuICAgKiBBIFBVU0ggaW5kaWNhdGVzIGEgbmV3IGVudHJ5IGJlaW5nIGFkZGVkIHRvIHRoZSBoaXN0b3J5IHN0YWNrLCBzdWNoIGFzIHdoZW5cbiAgICogYSBsaW5rIGlzIGNsaWNrZWQgYW5kIGEgbmV3IHBhZ2UgbG9hZHMuIFdoZW4gdGhpcyBoYXBwZW5zLCBhbGwgc3Vic2VxdWVudFxuICAgKiBlbnRyaWVzIGluIHRoZSBzdGFjayBhcmUgbG9zdC5cbiAgICovXG4gIFB1c2ggPSBcIlBVU0hcIixcblxuICAvKipcbiAgICogQSBSRVBMQUNFIGluZGljYXRlcyB0aGUgZW50cnkgYXQgdGhlIGN1cnJlbnQgaW5kZXggaW4gdGhlIGhpc3Rvcnkgc3RhY2tcbiAgICogYmVpbmcgcmVwbGFjZWQgYnkgYSBuZXcgb25lLlxuICAgKi9cbiAgUmVwbGFjZSA9IFwiUkVQTEFDRVwiLFxufVxuXG4vKipcbiAqIFRoZSBwYXRobmFtZSwgc2VhcmNoLCBhbmQgaGFzaCB2YWx1ZXMgb2YgYSBVUkwuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgUGF0aCB7XG4gIC8qKlxuICAgKiBBIFVSTCBwYXRobmFtZSwgYmVnaW5uaW5nIHdpdGggYSAvLlxuICAgKi9cbiAgcGF0aG5hbWU6IHN0cmluZztcblxuICAvKipcbiAgICogQSBVUkwgc2VhcmNoIHN0cmluZywgYmVnaW5uaW5nIHdpdGggYSA/LlxuICAgKi9cbiAgc2VhcmNoOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIEEgVVJMIGZyYWdtZW50IGlkZW50aWZpZXIsIGJlZ2lubmluZyB3aXRoIGEgIy5cbiAgICovXG4gIGhhc2g6IHN0cmluZztcbn1cblxuLy8gVE9ETzogKHY3KSBDaGFuZ2UgdGhlIExvY2F0aW9uIGdlbmVyaWMgZGVmYXVsdCBmcm9tIGBhbnlgIHRvIGB1bmtub3duYCBhbmRcbi8vIHJlbW92ZSBSZW1peCBgdXNlTG9jYXRpb25gIHdyYXBwZXIuXG5cbi8qKlxuICogQW4gZW50cnkgaW4gYSBoaXN0b3J5IHN0YWNrLiBBIGxvY2F0aW9uIGNvbnRhaW5zIGluZm9ybWF0aW9uIGFib3V0IHRoZVxuICogVVJMIHBhdGgsIGFzIHdlbGwgYXMgcG9zc2libHkgc29tZSBhcmJpdHJhcnkgc3RhdGUgYW5kIGEga2V5LlxuICovXG5leHBvcnQgaW50ZXJmYWNlIExvY2F0aW9uPFN0YXRlID0gYW55PiBleHRlbmRzIFBhdGgge1xuICAvKipcbiAgICogQSB2YWx1ZSBvZiBhcmJpdHJhcnkgZGF0YSBhc3NvY2lhdGVkIHdpdGggdGhpcyBsb2NhdGlvbi5cbiAgICovXG4gIHN0YXRlOiBTdGF0ZTtcblxuICAvKipcbiAgICogQSB1bmlxdWUgc3RyaW5nIGFzc29jaWF0ZWQgd2l0aCB0aGlzIGxvY2F0aW9uLiBNYXkgYmUgdXNlZCB0byBzYWZlbHkgc3RvcmVcbiAgICogYW5kIHJldHJpZXZlIGRhdGEgaW4gc29tZSBvdGhlciBzdG9yYWdlIEFQSSwgbGlrZSBgbG9jYWxTdG9yYWdlYC5cbiAgICpcbiAgICogTm90ZTogVGhpcyB2YWx1ZSBpcyBhbHdheXMgXCJkZWZhdWx0XCIgb24gdGhlIGluaXRpYWwgbG9jYXRpb24uXG4gICAqL1xuICBrZXk6IHN0cmluZztcbn1cblxuLyoqXG4gKiBBIGNoYW5nZSB0byB0aGUgY3VycmVudCBsb2NhdGlvbi5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBVcGRhdGUge1xuICAvKipcbiAgICogVGhlIGFjdGlvbiB0aGF0IHRyaWdnZXJlZCB0aGUgY2hhbmdlLlxuICAgKi9cbiAgYWN0aW9uOiBBY3Rpb247XG5cbiAgLyoqXG4gICAqIFRoZSBuZXcgbG9jYXRpb24uXG4gICAqL1xuICBsb2NhdGlvbjogTG9jYXRpb247XG5cbiAgLyoqXG4gICAqIFRoZSBkZWx0YSBiZXR3ZWVuIHRoaXMgbG9jYXRpb24gYW5kIHRoZSBmb3JtZXIgbG9jYXRpb24gaW4gdGhlIGhpc3Rvcnkgc3RhY2tcbiAgICovXG4gIGRlbHRhOiBudW1iZXIgfCBudWxsO1xufVxuXG4vKipcbiAqIEEgZnVuY3Rpb24gdGhhdCByZWNlaXZlcyBub3RpZmljYXRpb25zIGFib3V0IGxvY2F0aW9uIGNoYW5nZXMuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgTGlzdGVuZXIge1xuICAodXBkYXRlOiBVcGRhdGUpOiB2b2lkO1xufVxuXG4vKipcbiAqIERlc2NyaWJlcyBhIGxvY2F0aW9uIHRoYXQgaXMgdGhlIGRlc3RpbmF0aW9uIG9mIHNvbWUgbmF2aWdhdGlvbiwgZWl0aGVyIHZpYVxuICogYGhpc3RvcnkucHVzaGAgb3IgYGhpc3RvcnkucmVwbGFjZWAuIFRoaXMgbWF5IGJlIGVpdGhlciBhIFVSTCBvciB0aGUgcGllY2VzXG4gKiBvZiBhIFVSTCBwYXRoLlxuICovXG5leHBvcnQgdHlwZSBUbyA9IHN0cmluZyB8IFBhcnRpYWw8UGF0aD47XG5cbi8qKlxuICogQSBoaXN0b3J5IGlzIGFuIGludGVyZmFjZSB0byB0aGUgbmF2aWdhdGlvbiBzdGFjay4gVGhlIGhpc3Rvcnkgc2VydmVzIGFzIHRoZVxuICogc291cmNlIG9mIHRydXRoIGZvciB0aGUgY3VycmVudCBsb2NhdGlvbiwgYXMgd2VsbCBhcyBwcm92aWRlcyBhIHNldCBvZlxuICogbWV0aG9kcyB0aGF0IG1heSBiZSB1c2VkIHRvIGNoYW5nZSBpdC5cbiAqXG4gKiBJdCBpcyBzaW1pbGFyIHRvIHRoZSBET00ncyBgd2luZG93Lmhpc3RvcnlgIG9iamVjdCwgYnV0IHdpdGggYSBzbWFsbGVyLCBtb3JlXG4gKiBmb2N1c2VkIEFQSS5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBIaXN0b3J5IHtcbiAgLyoqXG4gICAqIFRoZSBsYXN0IGFjdGlvbiB0aGF0IG1vZGlmaWVkIHRoZSBjdXJyZW50IGxvY2F0aW9uLiBUaGlzIHdpbGwgYWx3YXlzIGJlXG4gICAqIEFjdGlvbi5Qb3Agd2hlbiBhIGhpc3RvcnkgaW5zdGFuY2UgaXMgZmlyc3QgY3JlYXRlZC4gVGhpcyB2YWx1ZSBpcyBtdXRhYmxlLlxuICAgKi9cbiAgcmVhZG9ubHkgYWN0aW9uOiBBY3Rpb247XG5cbiAgLyoqXG4gICAqIFRoZSBjdXJyZW50IGxvY2F0aW9uLiBUaGlzIHZhbHVlIGlzIG11dGFibGUuXG4gICAqL1xuICByZWFkb25seSBsb2NhdGlvbjogTG9jYXRpb247XG5cbiAgLyoqXG4gICAqIFJldHVybnMgYSB2YWxpZCBocmVmIGZvciB0aGUgZ2l2ZW4gYHRvYCB2YWx1ZSB0aGF0IG1heSBiZSB1c2VkIGFzXG4gICAqIHRoZSB2YWx1ZSBvZiBhbiA8YSBocmVmPiBhdHRyaWJ1dGUuXG4gICAqXG4gICAqIEBwYXJhbSB0byAtIFRoZSBkZXN0aW5hdGlvbiBVUkxcbiAgICovXG4gIGNyZWF0ZUhyZWYodG86IFRvKTogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGEgVVJMIGZvciB0aGUgZ2l2ZW4gYHRvYCB2YWx1ZVxuICAgKlxuICAgKiBAcGFyYW0gdG8gLSBUaGUgZGVzdGluYXRpb24gVVJMXG4gICAqL1xuICBjcmVhdGVVUkwodG86IFRvKTogVVJMO1xuXG4gIC8qKlxuICAgKiBFbmNvZGUgYSBsb2NhdGlvbiB0aGUgc2FtZSB3YXkgd2luZG93Lmhpc3Rvcnkgd291bGQgZG8gKG5vLW9wIGZvciBtZW1vcnlcbiAgICogaGlzdG9yeSkgc28gd2UgZW5zdXJlIG91ciBQVVNIL1JFUExBQ0UgbmF2aWdhdGlvbnMgZm9yIGRhdGEgcm91dGVyc1xuICAgKiBiZWhhdmUgdGhlIHNhbWUgYXMgUE9QXG4gICAqXG4gICAqIEBwYXJhbSB0byBVbmVuY29kZWQgcGF0aFxuICAgKi9cbiAgZW5jb2RlTG9jYXRpb24odG86IFRvKTogUGF0aDtcblxuICAvKipcbiAgICogUHVzaGVzIGEgbmV3IGxvY2F0aW9uIG9udG8gdGhlIGhpc3Rvcnkgc3RhY2ssIGluY3JlYXNpbmcgaXRzIGxlbmd0aCBieSBvbmUuXG4gICAqIElmIHRoZXJlIHdlcmUgYW55IGVudHJpZXMgaW4gdGhlIHN0YWNrIGFmdGVyIHRoZSBjdXJyZW50IG9uZSwgdGhleSBhcmVcbiAgICogbG9zdC5cbiAgICpcbiAgICogQHBhcmFtIHRvIC0gVGhlIG5ldyBVUkxcbiAgICogQHBhcmFtIHN0YXRlIC0gRGF0YSB0byBhc3NvY2lhdGUgd2l0aCB0aGUgbmV3IGxvY2F0aW9uXG4gICAqL1xuICBwdXNoKHRvOiBUbywgc3RhdGU/OiBhbnkpOiB2b2lkO1xuXG4gIC8qKlxuICAgKiBSZXBsYWNlcyB0aGUgY3VycmVudCBsb2NhdGlvbiBpbiB0aGUgaGlzdG9yeSBzdGFjayB3aXRoIGEgbmV3IG9uZS4gIFRoZVxuICAgKiBsb2NhdGlvbiB0aGF0IHdhcyByZXBsYWNlZCB3aWxsIG5vIGxvbmdlciBiZSBhdmFpbGFibGUuXG4gICAqXG4gICAqIEBwYXJhbSB0byAtIFRoZSBuZXcgVVJMXG4gICAqIEBwYXJhbSBzdGF0ZSAtIERhdGEgdG8gYXNzb2NpYXRlIHdpdGggdGhlIG5ldyBsb2NhdGlvblxuICAgKi9cbiAgcmVwbGFjZSh0bzogVG8sIHN0YXRlPzogYW55KTogdm9pZDtcblxuICAvKipcbiAgICogTmF2aWdhdGVzIGBuYCBlbnRyaWVzIGJhY2t3YXJkL2ZvcndhcmQgaW4gdGhlIGhpc3Rvcnkgc3RhY2sgcmVsYXRpdmUgdG8gdGhlXG4gICAqIGN1cnJlbnQgaW5kZXguIEZvciBleGFtcGxlLCBhIFwiYmFja1wiIG5hdmlnYXRpb24gd291bGQgdXNlIGdvKC0xKS5cbiAgICpcbiAgICogQHBhcmFtIGRlbHRhIC0gVGhlIGRlbHRhIGluIHRoZSBzdGFjayBpbmRleFxuICAgKi9cbiAgZ28oZGVsdGE6IG51bWJlcik6IHZvaWQ7XG5cbiAgLyoqXG4gICAqIFNldHMgdXAgYSBsaXN0ZW5lciB0aGF0IHdpbGwgYmUgY2FsbGVkIHdoZW5ldmVyIHRoZSBjdXJyZW50IGxvY2F0aW9uXG4gICAqIGNoYW5nZXMuXG4gICAqXG4gICAqIEBwYXJhbSBsaXN0ZW5lciAtIEEgZnVuY3Rpb24gdGhhdCB3aWxsIGJlIGNhbGxlZCB3aGVuIHRoZSBsb2NhdGlvbiBjaGFuZ2VzXG4gICAqIEByZXR1cm5zIHVubGlzdGVuIC0gQSBmdW5jdGlvbiB0aGF0IG1heSBiZSB1c2VkIHRvIHN0b3AgbGlzdGVuaW5nXG4gICAqL1xuICBsaXN0ZW4obGlzdGVuZXI6IExpc3RlbmVyKTogKCkgPT4gdm9pZDtcbn1cblxudHlwZSBIaXN0b3J5U3RhdGUgPSB7XG4gIHVzcjogYW55O1xuICBrZXk/OiBzdHJpbmc7XG4gIGlkeDogbnVtYmVyO1xufTtcblxuY29uc3QgUG9wU3RhdGVFdmVudFR5cGUgPSBcInBvcHN0YXRlXCI7XG4vLyNlbmRyZWdpb25cblxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbi8vI3JlZ2lvbiBNZW1vcnkgSGlzdG9yeVxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuLyoqXG4gKiBBIHVzZXItc3VwcGxpZWQgb2JqZWN0IHRoYXQgZGVzY3JpYmVzIGEgbG9jYXRpb24uIFVzZWQgd2hlbiBwcm92aWRpbmdcbiAqIGVudHJpZXMgdG8gYGNyZWF0ZU1lbW9yeUhpc3RvcnlgIHZpYSBpdHMgYGluaXRpYWxFbnRyaWVzYCBvcHRpb24uXG4gKi9cbmV4cG9ydCB0eXBlIEluaXRpYWxFbnRyeSA9IHN0cmluZyB8IFBhcnRpYWw8TG9jYXRpb24+O1xuXG5leHBvcnQgdHlwZSBNZW1vcnlIaXN0b3J5T3B0aW9ucyA9IHtcbiAgaW5pdGlhbEVudHJpZXM/OiBJbml0aWFsRW50cnlbXTtcbiAgaW5pdGlhbEluZGV4PzogbnVtYmVyO1xuICB2NUNvbXBhdD86IGJvb2xlYW47XG59O1xuXG4vKipcbiAqIEEgbWVtb3J5IGhpc3Rvcnkgc3RvcmVzIGxvY2F0aW9ucyBpbiBtZW1vcnkuIFRoaXMgaXMgdXNlZnVsIGluIHN0YXRlZnVsXG4gKiBlbnZpcm9ubWVudHMgd2hlcmUgdGhlcmUgaXMgbm8gd2ViIGJyb3dzZXIsIHN1Y2ggYXMgbm9kZSB0ZXN0cyBvciBSZWFjdFxuICogTmF0aXZlLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIE1lbW9yeUhpc3RvcnkgZXh0ZW5kcyBIaXN0b3J5IHtcbiAgLyoqXG4gICAqIFRoZSBjdXJyZW50IGluZGV4IGluIHRoZSBoaXN0b3J5IHN0YWNrLlxuICAgKi9cbiAgcmVhZG9ubHkgaW5kZXg6IG51bWJlcjtcbn1cblxuLyoqXG4gKiBNZW1vcnkgaGlzdG9yeSBzdG9yZXMgdGhlIGN1cnJlbnQgbG9jYXRpb24gaW4gbWVtb3J5LiBJdCBpcyBkZXNpZ25lZCBmb3IgdXNlXG4gKiBpbiBzdGF0ZWZ1bCBub24tYnJvd3NlciBlbnZpcm9ubWVudHMgbGlrZSB0ZXN0cyBhbmQgUmVhY3QgTmF0aXZlLlxuICovXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlTWVtb3J5SGlzdG9yeShcbiAgb3B0aW9uczogTWVtb3J5SGlzdG9yeU9wdGlvbnMgPSB7fVxuKTogTWVtb3J5SGlzdG9yeSB7XG4gIGxldCB7IGluaXRpYWxFbnRyaWVzID0gW1wiL1wiXSwgaW5pdGlhbEluZGV4LCB2NUNvbXBhdCA9IGZhbHNlIH0gPSBvcHRpb25zO1xuICBsZXQgZW50cmllczogTG9jYXRpb25bXTsgLy8gRGVjbGFyZSBzbyB3ZSBjYW4gYWNjZXNzIGZyb20gY3JlYXRlTWVtb3J5TG9jYXRpb25cbiAgZW50cmllcyA9IGluaXRpYWxFbnRyaWVzLm1hcCgoZW50cnksIGluZGV4KSA9PlxuICAgIGNyZWF0ZU1lbW9yeUxvY2F0aW9uKFxuICAgICAgZW50cnksXG4gICAgICB0eXBlb2YgZW50cnkgPT09IFwic3RyaW5nXCIgPyBudWxsIDogZW50cnkuc3RhdGUsXG4gICAgICBpbmRleCA9PT0gMCA/IFwiZGVmYXVsdFwiIDogdW5kZWZpbmVkXG4gICAgKVxuICApO1xuICBsZXQgaW5kZXggPSBjbGFtcEluZGV4KFxuICAgIGluaXRpYWxJbmRleCA9PSBudWxsID8gZW50cmllcy5sZW5ndGggLSAxIDogaW5pdGlhbEluZGV4XG4gICk7XG4gIGxldCBhY3Rpb24gPSBBY3Rpb24uUG9wO1xuICBsZXQgbGlzdGVuZXI6IExpc3RlbmVyIHwgbnVsbCA9IG51bGw7XG5cbiAgZnVuY3Rpb24gY2xhbXBJbmRleChuOiBudW1iZXIpOiBudW1iZXIge1xuICAgIHJldHVybiBNYXRoLm1pbihNYXRoLm1heChuLCAwKSwgZW50cmllcy5sZW5ndGggLSAxKTtcbiAgfVxuICBmdW5jdGlvbiBnZXRDdXJyZW50TG9jYXRpb24oKTogTG9jYXRpb24ge1xuICAgIHJldHVybiBlbnRyaWVzW2luZGV4XTtcbiAgfVxuICBmdW5jdGlvbiBjcmVhdGVNZW1vcnlMb2NhdGlvbihcbiAgICB0bzogVG8sXG4gICAgc3RhdGU6IGFueSA9IG51bGwsXG4gICAga2V5Pzogc3RyaW5nXG4gICk6IExvY2F0aW9uIHtcbiAgICBsZXQgbG9jYXRpb24gPSBjcmVhdGVMb2NhdGlvbihcbiAgICAgIGVudHJpZXMgPyBnZXRDdXJyZW50TG9jYXRpb24oKS5wYXRobmFtZSA6IFwiL1wiLFxuICAgICAgdG8sXG4gICAgICBzdGF0ZSxcbiAgICAgIGtleVxuICAgICk7XG4gICAgd2FybmluZyhcbiAgICAgIGxvY2F0aW9uLnBhdGhuYW1lLmNoYXJBdCgwKSA9PT0gXCIvXCIsXG4gICAgICBgcmVsYXRpdmUgcGF0aG5hbWVzIGFyZSBub3Qgc3VwcG9ydGVkIGluIG1lbW9yeSBoaXN0b3J5OiAke0pTT04uc3RyaW5naWZ5KFxuICAgICAgICB0b1xuICAgICAgKX1gXG4gICAgKTtcbiAgICByZXR1cm4gbG9jYXRpb247XG4gIH1cblxuICBmdW5jdGlvbiBjcmVhdGVIcmVmKHRvOiBUbykge1xuICAgIHJldHVybiB0eXBlb2YgdG8gPT09IFwic3RyaW5nXCIgPyB0byA6IGNyZWF0ZVBhdGgodG8pO1xuICB9XG5cbiAgbGV0IGhpc3Rvcnk6IE1lbW9yeUhpc3RvcnkgPSB7XG4gICAgZ2V0IGluZGV4KCkge1xuICAgICAgcmV0dXJuIGluZGV4O1xuICAgIH0sXG4gICAgZ2V0IGFjdGlvbigpIHtcbiAgICAgIHJldHVybiBhY3Rpb247XG4gICAgfSxcbiAgICBnZXQgbG9jYXRpb24oKSB7XG4gICAgICByZXR1cm4gZ2V0Q3VycmVudExvY2F0aW9uKCk7XG4gICAgfSxcbiAgICBjcmVhdGVIcmVmLFxuICAgIGNyZWF0ZVVSTCh0bykge1xuICAgICAgcmV0dXJuIG5ldyBVUkwoY3JlYXRlSHJlZih0byksIFwiaHR0cDovL2xvY2FsaG9zdFwiKTtcbiAgICB9LFxuICAgIGVuY29kZUxvY2F0aW9uKHRvOiBUbykge1xuICAgICAgbGV0IHBhdGggPSB0eXBlb2YgdG8gPT09IFwic3RyaW5nXCIgPyBwYXJzZVBhdGgodG8pIDogdG87XG4gICAgICByZXR1cm4ge1xuICAgICAgICBwYXRobmFtZTogcGF0aC5wYXRobmFtZSB8fCBcIlwiLFxuICAgICAgICBzZWFyY2g6IHBhdGguc2VhcmNoIHx8IFwiXCIsXG4gICAgICAgIGhhc2g6IHBhdGguaGFzaCB8fCBcIlwiLFxuICAgICAgfTtcbiAgICB9LFxuICAgIHB1c2godG8sIHN0YXRlKSB7XG4gICAgICBhY3Rpb24gPSBBY3Rpb24uUHVzaDtcbiAgICAgIGxldCBuZXh0TG9jYXRpb24gPSBjcmVhdGVNZW1vcnlMb2NhdGlvbih0bywgc3RhdGUpO1xuICAgICAgaW5kZXggKz0gMTtcbiAgICAgIGVudHJpZXMuc3BsaWNlKGluZGV4LCBlbnRyaWVzLmxlbmd0aCwgbmV4dExvY2F0aW9uKTtcbiAgICAgIGlmICh2NUNvbXBhdCAmJiBsaXN0ZW5lcikge1xuICAgICAgICBsaXN0ZW5lcih7IGFjdGlvbiwgbG9jYXRpb246IG5leHRMb2NhdGlvbiwgZGVsdGE6IDEgfSk7XG4gICAgICB9XG4gICAgfSxcbiAgICByZXBsYWNlKHRvLCBzdGF0ZSkge1xuICAgICAgYWN0aW9uID0gQWN0aW9uLlJlcGxhY2U7XG4gICAgICBsZXQgbmV4dExvY2F0aW9uID0gY3JlYXRlTWVtb3J5TG9jYXRpb24odG8sIHN0YXRlKTtcbiAgICAgIGVudHJpZXNbaW5kZXhdID0gbmV4dExvY2F0aW9uO1xuICAgICAgaWYgKHY1Q29tcGF0ICYmIGxpc3RlbmVyKSB7XG4gICAgICAgIGxpc3RlbmVyKHsgYWN0aW9uLCBsb2NhdGlvbjogbmV4dExvY2F0aW9uLCBkZWx0YTogMCB9KTtcbiAgICAgIH1cbiAgICB9LFxuICAgIGdvKGRlbHRhKSB7XG4gICAgICBhY3Rpb24gPSBBY3Rpb24uUG9wO1xuICAgICAgbGV0IG5leHRJbmRleCA9IGNsYW1wSW5kZXgoaW5kZXggKyBkZWx0YSk7XG4gICAgICBsZXQgbmV4dExvY2F0aW9uID0gZW50cmllc1tuZXh0SW5kZXhdO1xuICAgICAgaW5kZXggPSBuZXh0SW5kZXg7XG4gICAgICBpZiAobGlzdGVuZXIpIHtcbiAgICAgICAgbGlzdGVuZXIoeyBhY3Rpb24sIGxvY2F0aW9uOiBuZXh0TG9jYXRpb24sIGRlbHRhIH0pO1xuICAgICAgfVxuICAgIH0sXG4gICAgbGlzdGVuKGZuOiBMaXN0ZW5lcikge1xuICAgICAgbGlzdGVuZXIgPSBmbjtcbiAgICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAgIGxpc3RlbmVyID0gbnVsbDtcbiAgICAgIH07XG4gICAgfSxcbiAgfTtcblxuICByZXR1cm4gaGlzdG9yeTtcbn1cbi8vI2VuZHJlZ2lvblxuXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuLy8jcmVnaW9uIEJyb3dzZXIgSGlzdG9yeVxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuLyoqXG4gKiBBIGJyb3dzZXIgaGlzdG9yeSBzdG9yZXMgdGhlIGN1cnJlbnQgbG9jYXRpb24gaW4gcmVndWxhciBVUkxzIGluIGEgd2ViXG4gKiBicm93c2VyIGVudmlyb25tZW50LiBUaGlzIGlzIHRoZSBzdGFuZGFyZCBmb3IgbW9zdCB3ZWIgYXBwcyBhbmQgcHJvdmlkZXMgdGhlXG4gKiBjbGVhbmVzdCBVUkxzIHRoZSBicm93c2VyJ3MgYWRkcmVzcyBiYXIuXG4gKlxuICogQHNlZSBodHRwczovL2dpdGh1Yi5jb20vcmVtaXgtcnVuL2hpc3RvcnkvdHJlZS9tYWluL2RvY3MvYXBpLXJlZmVyZW5jZS5tZCNicm93c2VyaGlzdG9yeVxuICovXG5leHBvcnQgaW50ZXJmYWNlIEJyb3dzZXJIaXN0b3J5IGV4dGVuZHMgVXJsSGlzdG9yeSB7fVxuXG5leHBvcnQgdHlwZSBCcm93c2VySGlzdG9yeU9wdGlvbnMgPSBVcmxIaXN0b3J5T3B0aW9ucztcblxuLyoqXG4gKiBCcm93c2VyIGhpc3Rvcnkgc3RvcmVzIHRoZSBsb2NhdGlvbiBpbiByZWd1bGFyIFVSTHMuIFRoaXMgaXMgdGhlIHN0YW5kYXJkIGZvclxuICogbW9zdCB3ZWIgYXBwcywgYnV0IGl0IHJlcXVpcmVzIHNvbWUgY29uZmlndXJhdGlvbiBvbiB0aGUgc2VydmVyIHRvIGVuc3VyZSB5b3VcbiAqIHNlcnZlIHRoZSBzYW1lIGFwcCBhdCBtdWx0aXBsZSBVUkxzLlxuICpcbiAqIEBzZWUgaHR0cHM6Ly9naXRodWIuY29tL3JlbWl4LXJ1bi9oaXN0b3J5L3RyZWUvbWFpbi9kb2NzL2FwaS1yZWZlcmVuY2UubWQjY3JlYXRlYnJvd3Nlcmhpc3RvcnlcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUJyb3dzZXJIaXN0b3J5KFxuICBvcHRpb25zOiBCcm93c2VySGlzdG9yeU9wdGlvbnMgPSB7fVxuKTogQnJvd3Nlckhpc3Rvcnkge1xuICBmdW5jdGlvbiBjcmVhdGVCcm93c2VyTG9jYXRpb24oXG4gICAgd2luZG93OiBXaW5kb3csXG4gICAgZ2xvYmFsSGlzdG9yeTogV2luZG93W1wiaGlzdG9yeVwiXVxuICApIHtcbiAgICBsZXQgeyBwYXRobmFtZSwgc2VhcmNoLCBoYXNoIH0gPSB3aW5kb3cubG9jYXRpb247XG4gICAgcmV0dXJuIGNyZWF0ZUxvY2F0aW9uKFxuICAgICAgXCJcIixcbiAgICAgIHsgcGF0aG5hbWUsIHNlYXJjaCwgaGFzaCB9LFxuICAgICAgLy8gc3RhdGUgZGVmYXVsdHMgdG8gYG51bGxgIGJlY2F1c2UgYHdpbmRvdy5oaXN0b3J5LnN0YXRlYCBkb2VzXG4gICAgICAoZ2xvYmFsSGlzdG9yeS5zdGF0ZSAmJiBnbG9iYWxIaXN0b3J5LnN0YXRlLnVzcikgfHwgbnVsbCxcbiAgICAgIChnbG9iYWxIaXN0b3J5LnN0YXRlICYmIGdsb2JhbEhpc3Rvcnkuc3RhdGUua2V5KSB8fCBcImRlZmF1bHRcIlxuICAgICk7XG4gIH1cblxuICBmdW5jdGlvbiBjcmVhdGVCcm93c2VySHJlZih3aW5kb3c6IFdpbmRvdywgdG86IFRvKSB7XG4gICAgcmV0dXJuIHR5cGVvZiB0byA9PT0gXCJzdHJpbmdcIiA/IHRvIDogY3JlYXRlUGF0aCh0byk7XG4gIH1cblxuICByZXR1cm4gZ2V0VXJsQmFzZWRIaXN0b3J5KFxuICAgIGNyZWF0ZUJyb3dzZXJMb2NhdGlvbixcbiAgICBjcmVhdGVCcm93c2VySHJlZixcbiAgICBudWxsLFxuICAgIG9wdGlvbnNcbiAgKTtcbn1cbi8vI2VuZHJlZ2lvblxuXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuLy8jcmVnaW9uIEhhc2ggSGlzdG9yeVxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuLyoqXG4gKiBBIGhhc2ggaGlzdG9yeSBzdG9yZXMgdGhlIGN1cnJlbnQgbG9jYXRpb24gaW4gdGhlIGZyYWdtZW50IGlkZW50aWZpZXIgcG9ydGlvblxuICogb2YgdGhlIFVSTCBpbiBhIHdlYiBicm93c2VyIGVudmlyb25tZW50LlxuICpcbiAqIFRoaXMgaXMgaWRlYWwgZm9yIGFwcHMgdGhhdCBkbyBub3QgY29udHJvbCB0aGUgc2VydmVyIGZvciBzb21lIHJlYXNvblxuICogKGJlY2F1c2UgdGhlIGZyYWdtZW50IGlkZW50aWZpZXIgaXMgbmV2ZXIgc2VudCB0byB0aGUgc2VydmVyKSwgaW5jbHVkaW5nIHNvbWVcbiAqIHNoYXJlZCBob3N0aW5nIGVudmlyb25tZW50cyB0aGF0IGRvIG5vdCBwcm92aWRlIGZpbmUtZ3JhaW5lZCBjb250cm9scyBvdmVyXG4gKiB3aGljaCBwYWdlcyBhcmUgc2VydmVkIGF0IHdoaWNoIFVSTHMuXG4gKlxuICogQHNlZSBodHRwczovL2dpdGh1Yi5jb20vcmVtaXgtcnVuL2hpc3RvcnkvdHJlZS9tYWluL2RvY3MvYXBpLXJlZmVyZW5jZS5tZCNoYXNoaGlzdG9yeVxuICovXG5leHBvcnQgaW50ZXJmYWNlIEhhc2hIaXN0b3J5IGV4dGVuZHMgVXJsSGlzdG9yeSB7fVxuXG5leHBvcnQgdHlwZSBIYXNoSGlzdG9yeU9wdGlvbnMgPSBVcmxIaXN0b3J5T3B0aW9ucztcblxuLyoqXG4gKiBIYXNoIGhpc3Rvcnkgc3RvcmVzIHRoZSBsb2NhdGlvbiBpbiB3aW5kb3cubG9jYXRpb24uaGFzaC4gVGhpcyBtYWtlcyBpdCBpZGVhbFxuICogZm9yIHNpdHVhdGlvbnMgd2hlcmUgeW91IGRvbid0IHdhbnQgdG8gc2VuZCB0aGUgbG9jYXRpb24gdG8gdGhlIHNlcnZlciBmb3JcbiAqIHNvbWUgcmVhc29uLCBlaXRoZXIgYmVjYXVzZSB5b3UgZG8gY2Fubm90IGNvbmZpZ3VyZSBpdCBvciB0aGUgVVJMIHNwYWNlIGlzXG4gKiByZXNlcnZlZCBmb3Igc29tZXRoaW5nIGVsc2UuXG4gKlxuICogQHNlZSBodHRwczovL2dpdGh1Yi5jb20vcmVtaXgtcnVuL2hpc3RvcnkvdHJlZS9tYWluL2RvY3MvYXBpLXJlZmVyZW5jZS5tZCNjcmVhdGVoYXNoaGlzdG9yeVxuICovXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlSGFzaEhpc3RvcnkoXG4gIG9wdGlvbnM6IEhhc2hIaXN0b3J5T3B0aW9ucyA9IHt9XG4pOiBIYXNoSGlzdG9yeSB7XG4gIGZ1bmN0aW9uIGNyZWF0ZUhhc2hMb2NhdGlvbihcbiAgICB3aW5kb3c6IFdpbmRvdyxcbiAgICBnbG9iYWxIaXN0b3J5OiBXaW5kb3dbXCJoaXN0b3J5XCJdXG4gICkge1xuICAgIGxldCB7XG4gICAgICBwYXRobmFtZSA9IFwiL1wiLFxuICAgICAgc2VhcmNoID0gXCJcIixcbiAgICAgIGhhc2ggPSBcIlwiLFxuICAgIH0gPSBwYXJzZVBhdGgod2luZG93LmxvY2F0aW9uLmhhc2guc3Vic3RyKDEpKTtcblxuICAgIC8vIEhhc2ggVVJMIHNob3VsZCBhbHdheXMgaGF2ZSBhIGxlYWRpbmcgLyBqdXN0IGxpa2Ugd2luZG93LmxvY2F0aW9uLnBhdGhuYW1lXG4gICAgLy8gZG9lcywgc28gaWYgYW4gYXBwIGVuZHMgdXAgYXQgYSByb3V0ZSBsaWtlIC8jc29tZXRoaW5nIHRoZW4gd2UgYWRkIGFcbiAgICAvLyBsZWFkaW5nIHNsYXNoIHNvIGFsbCBvZiBvdXIgcGF0aC1tYXRjaGluZyBiZWhhdmVzIHRoZSBzYW1lIGFzIGlmIGl0IHdvdWxkXG4gICAgLy8gaW4gYSBicm93c2VyIHJvdXRlci4gIFRoaXMgaXMgcGFydGljdWxhcmx5IGltcG9ydGFudCB3aGVuIHRoZXJlIGV4aXN0cyBhXG4gICAgLy8gcm9vdCBzcGxhdCByb3V0ZSAoPFJvdXRlIHBhdGg9XCIqXCI+KSBzaW5jZSB0aGF0IG1hdGNoZXMgaW50ZXJuYWxseSBhZ2FpbnN0XG4gICAgLy8gXCIvKlwiIGFuZCB3ZSdkIGV4cGVjdCAvI3NvbWV0aGluZyB0byA0MDQgaW4gYSBoYXNoIHJvdXRlciBhcHAuXG4gICAgaWYgKCFwYXRobmFtZS5zdGFydHNXaXRoKFwiL1wiKSAmJiAhcGF0aG5hbWUuc3RhcnRzV2l0aChcIi5cIikpIHtcbiAgICAgIHBhdGhuYW1lID0gXCIvXCIgKyBwYXRobmFtZTtcbiAgICB9XG5cbiAgICByZXR1cm4gY3JlYXRlTG9jYXRpb24oXG4gICAgICBcIlwiLFxuICAgICAgeyBwYXRobmFtZSwgc2VhcmNoLCBoYXNoIH0sXG4gICAgICAvLyBzdGF0ZSBkZWZhdWx0cyB0byBgbnVsbGAgYmVjYXVzZSBgd2luZG93Lmhpc3Rvcnkuc3RhdGVgIGRvZXNcbiAgICAgIChnbG9iYWxIaXN0b3J5LnN0YXRlICYmIGdsb2JhbEhpc3Rvcnkuc3RhdGUudXNyKSB8fCBudWxsLFxuICAgICAgKGdsb2JhbEhpc3Rvcnkuc3RhdGUgJiYgZ2xvYmFsSGlzdG9yeS5zdGF0ZS5rZXkpIHx8IFwiZGVmYXVsdFwiXG4gICAgKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZUhhc2hIcmVmKHdpbmRvdzogV2luZG93LCB0bzogVG8pIHtcbiAgICBsZXQgYmFzZSA9IHdpbmRvdy5kb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiYmFzZVwiKTtcbiAgICBsZXQgaHJlZiA9IFwiXCI7XG5cbiAgICBpZiAoYmFzZSAmJiBiYXNlLmdldEF0dHJpYnV0ZShcImhyZWZcIikpIHtcbiAgICAgIGxldCB1cmwgPSB3aW5kb3cubG9jYXRpb24uaHJlZjtcbiAgICAgIGxldCBoYXNoSW5kZXggPSB1cmwuaW5kZXhPZihcIiNcIik7XG4gICAgICBocmVmID0gaGFzaEluZGV4ID09PSAtMSA/IHVybCA6IHVybC5zbGljZSgwLCBoYXNoSW5kZXgpO1xuICAgIH1cblxuICAgIHJldHVybiBocmVmICsgXCIjXCIgKyAodHlwZW9mIHRvID09PSBcInN0cmluZ1wiID8gdG8gOiBjcmVhdGVQYXRoKHRvKSk7XG4gIH1cblxuICBmdW5jdGlvbiB2YWxpZGF0ZUhhc2hMb2NhdGlvbihsb2NhdGlvbjogTG9jYXRpb24sIHRvOiBUbykge1xuICAgIHdhcm5pbmcoXG4gICAgICBsb2NhdGlvbi5wYXRobmFtZS5jaGFyQXQoMCkgPT09IFwiL1wiLFxuICAgICAgYHJlbGF0aXZlIHBhdGhuYW1lcyBhcmUgbm90IHN1cHBvcnRlZCBpbiBoYXNoIGhpc3RvcnkucHVzaCgke0pTT04uc3RyaW5naWZ5KFxuICAgICAgICB0b1xuICAgICAgKX0pYFxuICAgICk7XG4gIH1cblxuICByZXR1cm4gZ2V0VXJsQmFzZWRIaXN0b3J5KFxuICAgIGNyZWF0ZUhhc2hMb2NhdGlvbixcbiAgICBjcmVhdGVIYXNoSHJlZixcbiAgICB2YWxpZGF0ZUhhc2hMb2NhdGlvbixcbiAgICBvcHRpb25zXG4gICk7XG59XG4vLyNlbmRyZWdpb25cblxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbi8vI3JlZ2lvbiBVVElMU1xuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuLyoqXG4gKiBAcHJpdmF0ZVxuICovXG5leHBvcnQgZnVuY3Rpb24gaW52YXJpYW50KHZhbHVlOiBib29sZWFuLCBtZXNzYWdlPzogc3RyaW5nKTogYXNzZXJ0cyB2YWx1ZTtcbmV4cG9ydCBmdW5jdGlvbiBpbnZhcmlhbnQ8VD4oXG4gIHZhbHVlOiBUIHwgbnVsbCB8IHVuZGVmaW5lZCxcbiAgbWVzc2FnZT86IHN0cmluZ1xuKTogYXNzZXJ0cyB2YWx1ZSBpcyBUO1xuZXhwb3J0IGZ1bmN0aW9uIGludmFyaWFudCh2YWx1ZTogYW55LCBtZXNzYWdlPzogc3RyaW5nKSB7XG4gIGlmICh2YWx1ZSA9PT0gZmFsc2UgfHwgdmFsdWUgPT09IG51bGwgfHwgdHlwZW9mIHZhbHVlID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKG1lc3NhZ2UpO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB3YXJuaW5nKGNvbmQ6IGFueSwgbWVzc2FnZTogc3RyaW5nKSB7XG4gIGlmICghY29uZCkge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG4gICAgaWYgKHR5cGVvZiBjb25zb2xlICE9PSBcInVuZGVmaW5lZFwiKSBjb25zb2xlLndhcm4obWVzc2FnZSk7XG5cbiAgICB0cnkge1xuICAgICAgLy8gV2VsY29tZSB0byBkZWJ1Z2dpbmcgaGlzdG9yeSFcbiAgICAgIC8vXG4gICAgICAvLyBUaGlzIGVycm9yIGlzIHRocm93biBhcyBhIGNvbnZlbmllbmNlLCBzbyB5b3UgY2FuIG1vcmUgZWFzaWx5XG4gICAgICAvLyBmaW5kIHRoZSBzb3VyY2UgZm9yIGEgd2FybmluZyB0aGF0IGFwcGVhcnMgaW4gdGhlIGNvbnNvbGUgYnlcbiAgICAgIC8vIGVuYWJsaW5nIFwicGF1c2Ugb24gZXhjZXB0aW9uc1wiIGluIHlvdXIgSmF2YVNjcmlwdCBkZWJ1Z2dlci5cbiAgICAgIHRocm93IG5ldyBFcnJvcihtZXNzYWdlKTtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1lbXB0eVxuICAgIH0gY2F0Y2ggKGUpIHt9XG4gIH1cbn1cblxuZnVuY3Rpb24gY3JlYXRlS2V5KCkge1xuICByZXR1cm4gTWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc3Vic3RyKDIsIDgpO1xufVxuXG4vKipcbiAqIEZvciBicm93c2VyLWJhc2VkIGhpc3Rvcmllcywgd2UgY29tYmluZSB0aGUgc3RhdGUgYW5kIGtleSBpbnRvIGFuIG9iamVjdFxuICovXG5mdW5jdGlvbiBnZXRIaXN0b3J5U3RhdGUobG9jYXRpb246IExvY2F0aW9uLCBpbmRleDogbnVtYmVyKTogSGlzdG9yeVN0YXRlIHtcbiAgcmV0dXJuIHtcbiAgICB1c3I6IGxvY2F0aW9uLnN0YXRlLFxuICAgIGtleTogbG9jYXRpb24ua2V5LFxuICAgIGlkeDogaW5kZXgsXG4gIH07XG59XG5cbi8qKlxuICogQ3JlYXRlcyBhIExvY2F0aW9uIG9iamVjdCB3aXRoIGEgdW5pcXVlIGtleSBmcm9tIHRoZSBnaXZlbiBQYXRoXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVMb2NhdGlvbihcbiAgY3VycmVudDogc3RyaW5nIHwgTG9jYXRpb24sXG4gIHRvOiBUbyxcbiAgc3RhdGU6IGFueSA9IG51bGwsXG4gIGtleT86IHN0cmluZ1xuKTogUmVhZG9ubHk8TG9jYXRpb24+IHtcbiAgbGV0IGxvY2F0aW9uOiBSZWFkb25seTxMb2NhdGlvbj4gPSB7XG4gICAgcGF0aG5hbWU6IHR5cGVvZiBjdXJyZW50ID09PSBcInN0cmluZ1wiID8gY3VycmVudCA6IGN1cnJlbnQucGF0aG5hbWUsXG4gICAgc2VhcmNoOiBcIlwiLFxuICAgIGhhc2g6IFwiXCIsXG4gICAgLi4uKHR5cGVvZiB0byA9PT0gXCJzdHJpbmdcIiA/IHBhcnNlUGF0aCh0bykgOiB0byksXG4gICAgc3RhdGUsXG4gICAgLy8gVE9ETzogVGhpcyBjb3VsZCBiZSBjbGVhbmVkIHVwLiAgcHVzaC9yZXBsYWNlIHNob3VsZCBwcm9iYWJseSBqdXN0IHRha2VcbiAgICAvLyBmdWxsIExvY2F0aW9ucyBub3cgYW5kIGF2b2lkIHRoZSBuZWVkIHRvIHJ1biB0aHJvdWdoIHRoaXMgZmxvdyBhdCBhbGxcbiAgICAvLyBCdXQgdGhhdCdzIGEgcHJldHR5IGJpZyByZWZhY3RvciB0byB0aGUgY3VycmVudCB0ZXN0IHN1aXRlIHNvIGdvaW5nIHRvXG4gICAgLy8ga2VlcCBhcyBpcyBmb3IgdGhlIHRpbWUgYmVpbmcgYW5kIGp1c3QgbGV0IGFueSBpbmNvbWluZyBrZXlzIHRha2UgcHJlY2VkZW5jZVxuICAgIGtleTogKHRvICYmICh0byBhcyBMb2NhdGlvbikua2V5KSB8fCBrZXkgfHwgY3JlYXRlS2V5KCksXG4gIH07XG4gIHJldHVybiBsb2NhdGlvbjtcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgc3RyaW5nIFVSTCBwYXRoIGZyb20gdGhlIGdpdmVuIHBhdGhuYW1lLCBzZWFyY2gsIGFuZCBoYXNoIGNvbXBvbmVudHMuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVQYXRoKHtcbiAgcGF0aG5hbWUgPSBcIi9cIixcbiAgc2VhcmNoID0gXCJcIixcbiAgaGFzaCA9IFwiXCIsXG59OiBQYXJ0aWFsPFBhdGg+KSB7XG4gIGlmIChzZWFyY2ggJiYgc2VhcmNoICE9PSBcIj9cIilcbiAgICBwYXRobmFtZSArPSBzZWFyY2guY2hhckF0KDApID09PSBcIj9cIiA/IHNlYXJjaCA6IFwiP1wiICsgc2VhcmNoO1xuICBpZiAoaGFzaCAmJiBoYXNoICE9PSBcIiNcIilcbiAgICBwYXRobmFtZSArPSBoYXNoLmNoYXJBdCgwKSA9PT0gXCIjXCIgPyBoYXNoIDogXCIjXCIgKyBoYXNoO1xuICByZXR1cm4gcGF0aG5hbWU7XG59XG5cbi8qKlxuICogUGFyc2VzIGEgc3RyaW5nIFVSTCBwYXRoIGludG8gaXRzIHNlcGFyYXRlIHBhdGhuYW1lLCBzZWFyY2gsIGFuZCBoYXNoIGNvbXBvbmVudHMuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZVBhdGgocGF0aDogc3RyaW5nKTogUGFydGlhbDxQYXRoPiB7XG4gIGxldCBwYXJzZWRQYXRoOiBQYXJ0aWFsPFBhdGg+ID0ge307XG5cbiAgaWYgKHBhdGgpIHtcbiAgICBsZXQgaGFzaEluZGV4ID0gcGF0aC5pbmRleE9mKFwiI1wiKTtcbiAgICBpZiAoaGFzaEluZGV4ID49IDApIHtcbiAgICAgIHBhcnNlZFBhdGguaGFzaCA9IHBhdGguc3Vic3RyKGhhc2hJbmRleCk7XG4gICAgICBwYXRoID0gcGF0aC5zdWJzdHIoMCwgaGFzaEluZGV4KTtcbiAgICB9XG5cbiAgICBsZXQgc2VhcmNoSW5kZXggPSBwYXRoLmluZGV4T2YoXCI/XCIpO1xuICAgIGlmIChzZWFyY2hJbmRleCA+PSAwKSB7XG4gICAgICBwYXJzZWRQYXRoLnNlYXJjaCA9IHBhdGguc3Vic3RyKHNlYXJjaEluZGV4KTtcbiAgICAgIHBhdGggPSBwYXRoLnN1YnN0cigwLCBzZWFyY2hJbmRleCk7XG4gICAgfVxuXG4gICAgaWYgKHBhdGgpIHtcbiAgICAgIHBhcnNlZFBhdGgucGF0aG5hbWUgPSBwYXRoO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBwYXJzZWRQYXRoO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFVybEhpc3RvcnkgZXh0ZW5kcyBIaXN0b3J5IHt9XG5cbmV4cG9ydCB0eXBlIFVybEhpc3RvcnlPcHRpb25zID0ge1xuICB3aW5kb3c/OiBXaW5kb3c7XG4gIHY1Q29tcGF0PzogYm9vbGVhbjtcbn07XG5cbmZ1bmN0aW9uIGdldFVybEJhc2VkSGlzdG9yeShcbiAgZ2V0TG9jYXRpb246ICh3aW5kb3c6IFdpbmRvdywgZ2xvYmFsSGlzdG9yeTogV2luZG93W1wiaGlzdG9yeVwiXSkgPT4gTG9jYXRpb24sXG4gIGNyZWF0ZUhyZWY6ICh3aW5kb3c6IFdpbmRvdywgdG86IFRvKSA9PiBzdHJpbmcsXG4gIHZhbGlkYXRlTG9jYXRpb246ICgobG9jYXRpb246IExvY2F0aW9uLCB0bzogVG8pID0+IHZvaWQpIHwgbnVsbCxcbiAgb3B0aW9uczogVXJsSGlzdG9yeU9wdGlvbnMgPSB7fVxuKTogVXJsSGlzdG9yeSB7XG4gIGxldCB7IHdpbmRvdyA9IGRvY3VtZW50LmRlZmF1bHRWaWV3ISwgdjVDb21wYXQgPSBmYWxzZSB9ID0gb3B0aW9ucztcbiAgbGV0IGdsb2JhbEhpc3RvcnkgPSB3aW5kb3cuaGlzdG9yeTtcbiAgbGV0IGFjdGlvbiA9IEFjdGlvbi5Qb3A7XG4gIGxldCBsaXN0ZW5lcjogTGlzdGVuZXIgfCBudWxsID0gbnVsbDtcblxuICBsZXQgaW5kZXggPSBnZXRJbmRleCgpITtcbiAgLy8gSW5kZXggc2hvdWxkIG9ubHkgYmUgbnVsbCB3aGVuIHdlIGluaXRpYWxpemUuIElmIG5vdCwgaXQncyBiZWNhdXNlIHRoZVxuICAvLyB1c2VyIGNhbGxlZCBoaXN0b3J5LnB1c2hTdGF0ZSBvciBoaXN0b3J5LnJlcGxhY2VTdGF0ZSBkaXJlY3RseSwgaW4gd2hpY2hcbiAgLy8gY2FzZSB3ZSBzaG91bGQgbG9nIGEgd2FybmluZyBhcyBpdCB3aWxsIHJlc3VsdCBpbiBidWdzLlxuICBpZiAoaW5kZXggPT0gbnVsbCkge1xuICAgIGluZGV4ID0gMDtcbiAgICBnbG9iYWxIaXN0b3J5LnJlcGxhY2VTdGF0ZSh7IC4uLmdsb2JhbEhpc3Rvcnkuc3RhdGUsIGlkeDogaW5kZXggfSwgXCJcIik7XG4gIH1cblxuICBmdW5jdGlvbiBnZXRJbmRleCgpOiBudW1iZXIge1xuICAgIGxldCBzdGF0ZSA9IGdsb2JhbEhpc3Rvcnkuc3RhdGUgfHwgeyBpZHg6IG51bGwgfTtcbiAgICByZXR1cm4gc3RhdGUuaWR4O1xuICB9XG5cbiAgZnVuY3Rpb24gaGFuZGxlUG9wKCkge1xuICAgIGFjdGlvbiA9IEFjdGlvbi5Qb3A7XG4gICAgbGV0IG5leHRJbmRleCA9IGdldEluZGV4KCk7XG4gICAgbGV0IGRlbHRhID0gbmV4dEluZGV4ID09IG51bGwgPyBudWxsIDogbmV4dEluZGV4IC0gaW5kZXg7XG4gICAgaW5kZXggPSBuZXh0SW5kZXg7XG4gICAgaWYgKGxpc3RlbmVyKSB7XG4gICAgICBsaXN0ZW5lcih7IGFjdGlvbiwgbG9jYXRpb246IGhpc3RvcnkubG9jYXRpb24sIGRlbHRhIH0pO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHB1c2godG86IFRvLCBzdGF0ZT86IGFueSkge1xuICAgIGFjdGlvbiA9IEFjdGlvbi5QdXNoO1xuICAgIGxldCBsb2NhdGlvbiA9IGNyZWF0ZUxvY2F0aW9uKGhpc3RvcnkubG9jYXRpb24sIHRvLCBzdGF0ZSk7XG4gICAgaWYgKHZhbGlkYXRlTG9jYXRpb24pIHZhbGlkYXRlTG9jYXRpb24obG9jYXRpb24sIHRvKTtcblxuICAgIGluZGV4ID0gZ2V0SW5kZXgoKSArIDE7XG4gICAgbGV0IGhpc3RvcnlTdGF0ZSA9IGdldEhpc3RvcnlTdGF0ZShsb2NhdGlvbiwgaW5kZXgpO1xuICAgIGxldCB1cmwgPSBoaXN0b3J5LmNyZWF0ZUhyZWYobG9jYXRpb24pO1xuXG4gICAgLy8gdHJ5Li4uY2F0Y2ggYmVjYXVzZSBpT1MgbGltaXRzIHVzIHRvIDEwMCBwdXNoU3RhdGUgY2FsbHMgOi9cbiAgICB0cnkge1xuICAgICAgZ2xvYmFsSGlzdG9yeS5wdXNoU3RhdGUoaGlzdG9yeVN0YXRlLCBcIlwiLCB1cmwpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAvLyBJZiB0aGUgZXhjZXB0aW9uIGlzIGJlY2F1c2UgYHN0YXRlYCBjYW4ndCBiZSBzZXJpYWxpemVkLCBsZXQgdGhhdCB0aHJvd1xuICAgICAgLy8gb3V0d2FyZHMganVzdCBsaWtlIGEgcmVwbGFjZSBjYWxsIHdvdWxkIHNvIHRoZSBkZXYga25vd3MgdGhlIGNhdXNlXG4gICAgICAvLyBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9uYXYtaGlzdG9yeS1hcGlzLmh0bWwjc2hhcmVkLWhpc3RvcnktcHVzaC9yZXBsYWNlLXN0YXRlLXN0ZXBzXG4gICAgICAvLyBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9zdHJ1Y3R1cmVkLWRhdGEuaHRtbCNzdHJ1Y3R1cmVkc2VyaWFsaXplaW50ZXJuYWxcbiAgICAgIGlmIChlcnJvciBpbnN0YW5jZW9mIERPTUV4Y2VwdGlvbiAmJiBlcnJvci5uYW1lID09PSBcIkRhdGFDbG9uZUVycm9yXCIpIHtcbiAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICB9XG4gICAgICAvLyBUaGV5IGFyZSBnb2luZyB0byBsb3NlIHN0YXRlIGhlcmUsIGJ1dCB0aGVyZSBpcyBubyByZWFsXG4gICAgICAvLyB3YXkgdG8gd2FybiB0aGVtIGFib3V0IGl0IHNpbmNlIHRoZSBwYWdlIHdpbGwgcmVmcmVzaC4uLlxuICAgICAgd2luZG93LmxvY2F0aW9uLmFzc2lnbih1cmwpO1xuICAgIH1cblxuICAgIGlmICh2NUNvbXBhdCAmJiBsaXN0ZW5lcikge1xuICAgICAgbGlzdGVuZXIoeyBhY3Rpb24sIGxvY2F0aW9uOiBoaXN0b3J5LmxvY2F0aW9uLCBkZWx0YTogMSB9KTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiByZXBsYWNlKHRvOiBUbywgc3RhdGU/OiBhbnkpIHtcbiAgICBhY3Rpb24gPSBBY3Rpb24uUmVwbGFjZTtcbiAgICBsZXQgbG9jYXRpb24gPSBjcmVhdGVMb2NhdGlvbihoaXN0b3J5LmxvY2F0aW9uLCB0bywgc3RhdGUpO1xuICAgIGlmICh2YWxpZGF0ZUxvY2F0aW9uKSB2YWxpZGF0ZUxvY2F0aW9uKGxvY2F0aW9uLCB0byk7XG5cbiAgICBpbmRleCA9IGdldEluZGV4KCk7XG4gICAgbGV0IGhpc3RvcnlTdGF0ZSA9IGdldEhpc3RvcnlTdGF0ZShsb2NhdGlvbiwgaW5kZXgpO1xuICAgIGxldCB1cmwgPSBoaXN0b3J5LmNyZWF0ZUhyZWYobG9jYXRpb24pO1xuICAgIGdsb2JhbEhpc3RvcnkucmVwbGFjZVN0YXRlKGhpc3RvcnlTdGF0ZSwgXCJcIiwgdXJsKTtcblxuICAgIGlmICh2NUNvbXBhdCAmJiBsaXN0ZW5lcikge1xuICAgICAgbGlzdGVuZXIoeyBhY3Rpb24sIGxvY2F0aW9uOiBoaXN0b3J5LmxvY2F0aW9uLCBkZWx0YTogMCB9KTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBjcmVhdGVVUkwodG86IFRvKTogVVJMIHtcbiAgICAvLyB3aW5kb3cubG9jYXRpb24ub3JpZ2luIGlzIFwibnVsbFwiICh0aGUgbGl0ZXJhbCBzdHJpbmcgdmFsdWUpIGluIEZpcmVmb3hcbiAgICAvLyB1bmRlciBjZXJ0YWluIGNvbmRpdGlvbnMsIG5vdGFibHkgd2hlbiBzZXJ2aW5nIGZyb20gYSBsb2NhbCBIVE1MIGZpbGVcbiAgICAvLyBTZWUgaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9ODc4Mjk3XG4gICAgbGV0IGJhc2UgPVxuICAgICAgd2luZG93LmxvY2F0aW9uLm9yaWdpbiAhPT0gXCJudWxsXCJcbiAgICAgICAgPyB3aW5kb3cubG9jYXRpb24ub3JpZ2luXG4gICAgICAgIDogd2luZG93LmxvY2F0aW9uLmhyZWY7XG5cbiAgICBsZXQgaHJlZiA9IHR5cGVvZiB0byA9PT0gXCJzdHJpbmdcIiA/IHRvIDogY3JlYXRlUGF0aCh0byk7XG4gICAgLy8gVHJlYXRpbmcgdGhpcyBhcyBhIGZ1bGwgVVJMIHdpbGwgc3RyaXAgYW55IHRyYWlsaW5nIHNwYWNlcyBzbyB3ZSBuZWVkIHRvXG4gICAgLy8gcHJlLWVuY29kZSB0aGVtIHNpbmNlIHRoZXkgbWlnaHQgYmUgcGFydCBvZiBhIG1hdGNoaW5nIHNwbGF0IHBhcmFtIGZyb21cbiAgICAvLyBhbiBhbmNlc3RvciByb3V0ZVxuICAgIGhyZWYgPSBocmVmLnJlcGxhY2UoLyAkLywgXCIlMjBcIik7XG4gICAgaW52YXJpYW50KFxuICAgICAgYmFzZSxcbiAgICAgIGBObyB3aW5kb3cubG9jYXRpb24uKG9yaWdpbnxocmVmKSBhdmFpbGFibGUgdG8gY3JlYXRlIFVSTCBmb3IgaHJlZjogJHtocmVmfWBcbiAgICApO1xuICAgIHJldHVybiBuZXcgVVJMKGhyZWYsIGJhc2UpO1xuICB9XG5cbiAgbGV0IGhpc3Rvcnk6IEhpc3RvcnkgPSB7XG4gICAgZ2V0IGFjdGlvbigpIHtcbiAgICAgIHJldHVybiBhY3Rpb247XG4gICAgfSxcbiAgICBnZXQgbG9jYXRpb24oKSB7XG4gICAgICByZXR1cm4gZ2V0TG9jYXRpb24od2luZG93LCBnbG9iYWxIaXN0b3J5KTtcbiAgICB9LFxuICAgIGxpc3RlbihmbjogTGlzdGVuZXIpIHtcbiAgICAgIGlmIChsaXN0ZW5lcikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJBIGhpc3Rvcnkgb25seSBhY2NlcHRzIG9uZSBhY3RpdmUgbGlzdGVuZXJcIik7XG4gICAgICB9XG4gICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihQb3BTdGF0ZUV2ZW50VHlwZSwgaGFuZGxlUG9wKTtcbiAgICAgIGxpc3RlbmVyID0gZm47XG5cbiAgICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKFBvcFN0YXRlRXZlbnRUeXBlLCBoYW5kbGVQb3ApO1xuICAgICAgICBsaXN0ZW5lciA9IG51bGw7XG4gICAgICB9O1xuICAgIH0sXG4gICAgY3JlYXRlSHJlZih0bykge1xuICAgICAgcmV0dXJuIGNyZWF0ZUhyZWYod2luZG93LCB0byk7XG4gICAgfSxcbiAgICBjcmVhdGVVUkwsXG4gICAgZW5jb2RlTG9jYXRpb24odG8pIHtcbiAgICAgIC8vIEVuY29kZSBhIExvY2F0aW9uIHRoZSBzYW1lIHdheSB3aW5kb3cubG9jYXRpb24gd291bGRcbiAgICAgIGxldCB1cmwgPSBjcmVhdGVVUkwodG8pO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgcGF0aG5hbWU6IHVybC5wYXRobmFtZSxcbiAgICAgICAgc2VhcmNoOiB1cmwuc2VhcmNoLFxuICAgICAgICBoYXNoOiB1cmwuaGFzaCxcbiAgICAgIH07XG4gICAgfSxcbiAgICBwdXNoLFxuICAgIHJlcGxhY2UsXG4gICAgZ28obikge1xuICAgICAgcmV0dXJuIGdsb2JhbEhpc3RvcnkuZ28obik7XG4gICAgfSxcbiAgfTtcblxuICByZXR1cm4gaGlzdG9yeTtcbn1cblxuLy8jZW5kcmVnaW9uXG4iLCJpbXBvcnQgdHlwZSB7IExvY2F0aW9uLCBQYXRoLCBUbyB9IGZyb20gXCIuL2hpc3RvcnlcIjtcbmltcG9ydCB7IGludmFyaWFudCwgcGFyc2VQYXRoLCB3YXJuaW5nIH0gZnJvbSBcIi4vaGlzdG9yeVwiO1xuXG4vKipcbiAqIE1hcCBvZiByb3V0ZUlkIC0+IGRhdGEgcmV0dXJuZWQgZnJvbSBhIGxvYWRlci9hY3Rpb24vZXJyb3JcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBSb3V0ZURhdGEge1xuICBbcm91dGVJZDogc3RyaW5nXTogYW55O1xufVxuXG5leHBvcnQgZW51bSBSZXN1bHRUeXBlIHtcbiAgZGF0YSA9IFwiZGF0YVwiLFxuICBkZWZlcnJlZCA9IFwiZGVmZXJyZWRcIixcbiAgcmVkaXJlY3QgPSBcInJlZGlyZWN0XCIsXG4gIGVycm9yID0gXCJlcnJvclwiLFxufVxuXG4vKipcbiAqIFN1Y2Nlc3NmdWwgcmVzdWx0IGZyb20gYSBsb2FkZXIgb3IgYWN0aW9uXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgU3VjY2Vzc1Jlc3VsdCB7XG4gIHR5cGU6IFJlc3VsdFR5cGUuZGF0YTtcbiAgZGF0YTogYW55O1xuICBzdGF0dXNDb2RlPzogbnVtYmVyO1xuICBoZWFkZXJzPzogSGVhZGVycztcbn1cblxuLyoqXG4gKiBTdWNjZXNzZnVsIGRlZmVyKCkgcmVzdWx0IGZyb20gYSBsb2FkZXIgb3IgYWN0aW9uXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgRGVmZXJyZWRSZXN1bHQge1xuICB0eXBlOiBSZXN1bHRUeXBlLmRlZmVycmVkO1xuICBkZWZlcnJlZERhdGE6IERlZmVycmVkRGF0YTtcbiAgc3RhdHVzQ29kZT86IG51bWJlcjtcbiAgaGVhZGVycz86IEhlYWRlcnM7XG59XG5cbi8qKlxuICogUmVkaXJlY3QgcmVzdWx0IGZyb20gYSBsb2FkZXIgb3IgYWN0aW9uXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgUmVkaXJlY3RSZXN1bHQge1xuICB0eXBlOiBSZXN1bHRUeXBlLnJlZGlyZWN0O1xuICBzdGF0dXM6IG51bWJlcjtcbiAgbG9jYXRpb246IHN0cmluZztcbiAgcmV2YWxpZGF0ZTogYm9vbGVhbjtcbiAgcmVsb2FkRG9jdW1lbnQ/OiBib29sZWFuO1xufVxuXG4vKipcbiAqIFVuc3VjY2Vzc2Z1bCByZXN1bHQgZnJvbSBhIGxvYWRlciBvciBhY3Rpb25cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBFcnJvclJlc3VsdCB7XG4gIHR5cGU6IFJlc3VsdFR5cGUuZXJyb3I7XG4gIGVycm9yOiBhbnk7XG4gIGhlYWRlcnM/OiBIZWFkZXJzO1xufVxuXG4vKipcbiAqIFJlc3VsdCBmcm9tIGEgbG9hZGVyIG9yIGFjdGlvbiAtIHBvdGVudGlhbGx5IHN1Y2Nlc3NmdWwgb3IgdW5zdWNjZXNzZnVsXG4gKi9cbmV4cG9ydCB0eXBlIERhdGFSZXN1bHQgPVxuICB8IFN1Y2Nlc3NSZXN1bHRcbiAgfCBEZWZlcnJlZFJlc3VsdFxuICB8IFJlZGlyZWN0UmVzdWx0XG4gIHwgRXJyb3JSZXN1bHQ7XG5cbnR5cGUgTG93ZXJDYXNlRm9ybU1ldGhvZCA9IFwiZ2V0XCIgfCBcInBvc3RcIiB8IFwicHV0XCIgfCBcInBhdGNoXCIgfCBcImRlbGV0ZVwiO1xudHlwZSBVcHBlckNhc2VGb3JtTWV0aG9kID0gVXBwZXJjYXNlPExvd2VyQ2FzZUZvcm1NZXRob2Q+O1xuXG4vKipcbiAqIFVzZXJzIGNhbiBzcGVjaWZ5IGVpdGhlciBsb3dlcmNhc2Ugb3IgdXBwZXJjYXNlIGZvcm0gbWV0aG9kcyBvbiBgPEZvcm0+YCxcbiAqIHVzZVN1Ym1pdCgpLCBgPGZldGNoZXIuRm9ybT5gLCBldGMuXG4gKi9cbmV4cG9ydCB0eXBlIEhUTUxGb3JtTWV0aG9kID0gTG93ZXJDYXNlRm9ybU1ldGhvZCB8IFVwcGVyQ2FzZUZvcm1NZXRob2Q7XG5cbi8qKlxuICogQWN0aXZlIG5hdmlnYXRpb24vZmV0Y2hlciBmb3JtIG1ldGhvZHMgYXJlIGV4cG9zZWQgaW4gbG93ZXJjYXNlIG9uIHRoZVxuICogUm91dGVyU3RhdGVcbiAqL1xuZXhwb3J0IHR5cGUgRm9ybU1ldGhvZCA9IExvd2VyQ2FzZUZvcm1NZXRob2Q7XG5leHBvcnQgdHlwZSBNdXRhdGlvbkZvcm1NZXRob2QgPSBFeGNsdWRlPEZvcm1NZXRob2QsIFwiZ2V0XCI+O1xuXG4vKipcbiAqIEluIHY3LCBhY3RpdmUgbmF2aWdhdGlvbi9mZXRjaGVyIGZvcm0gbWV0aG9kcyBhcmUgZXhwb3NlZCBpbiB1cHBlcmNhc2Ugb24gdGhlXG4gKiBSb3V0ZXJTdGF0ZS4gIFRoaXMgaXMgdG8gYWxpZ24gd2l0aCB0aGUgbm9ybWFsaXphdGlvbiBkb25lIHZpYSBmZXRjaCgpLlxuICovXG5leHBvcnQgdHlwZSBWN19Gb3JtTWV0aG9kID0gVXBwZXJDYXNlRm9ybU1ldGhvZDtcbmV4cG9ydCB0eXBlIFY3X011dGF0aW9uRm9ybU1ldGhvZCA9IEV4Y2x1ZGU8VjdfRm9ybU1ldGhvZCwgXCJHRVRcIj47XG5cbmV4cG9ydCB0eXBlIEZvcm1FbmNUeXBlID1cbiAgfCBcImFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZFwiXG4gIHwgXCJtdWx0aXBhcnQvZm9ybS1kYXRhXCJcbiAgfCBcImFwcGxpY2F0aW9uL2pzb25cIlxuICB8IFwidGV4dC9wbGFpblwiO1xuXG4vLyBUaGFua3MgaHR0cHM6Ly9naXRodWIuY29tL3NpbmRyZXNvcmh1cy90eXBlLWZlc3QhXG50eXBlIEpzb25PYmplY3QgPSB7IFtLZXkgaW4gc3RyaW5nXTogSnNvblZhbHVlIH0gJiB7XG4gIFtLZXkgaW4gc3RyaW5nXT86IEpzb25WYWx1ZSB8IHVuZGVmaW5lZDtcbn07XG50eXBlIEpzb25BcnJheSA9IEpzb25WYWx1ZVtdIHwgcmVhZG9ubHkgSnNvblZhbHVlW107XG50eXBlIEpzb25QcmltaXRpdmUgPSBzdHJpbmcgfCBudW1iZXIgfCBib29sZWFuIHwgbnVsbDtcbnR5cGUgSnNvblZhbHVlID0gSnNvblByaW1pdGl2ZSB8IEpzb25PYmplY3QgfCBKc29uQXJyYXk7XG5cbi8qKlxuICogQHByaXZhdGVcbiAqIEludGVybmFsIGludGVyZmFjZSB0byBwYXNzIGFyb3VuZCBmb3IgYWN0aW9uIHN1Ym1pc3Npb25zLCBub3QgaW50ZW5kZWQgZm9yXG4gKiBleHRlcm5hbCBjb25zdW1wdGlvblxuICovXG5leHBvcnQgdHlwZSBTdWJtaXNzaW9uID1cbiAgfCB7XG4gICAgICBmb3JtTWV0aG9kOiBGb3JtTWV0aG9kIHwgVjdfRm9ybU1ldGhvZDtcbiAgICAgIGZvcm1BY3Rpb246IHN0cmluZztcbiAgICAgIGZvcm1FbmNUeXBlOiBGb3JtRW5jVHlwZTtcbiAgICAgIGZvcm1EYXRhOiBGb3JtRGF0YTtcbiAgICAgIGpzb246IHVuZGVmaW5lZDtcbiAgICAgIHRleHQ6IHVuZGVmaW5lZDtcbiAgICB9XG4gIHwge1xuICAgICAgZm9ybU1ldGhvZDogRm9ybU1ldGhvZCB8IFY3X0Zvcm1NZXRob2Q7XG4gICAgICBmb3JtQWN0aW9uOiBzdHJpbmc7XG4gICAgICBmb3JtRW5jVHlwZTogRm9ybUVuY1R5cGU7XG4gICAgICBmb3JtRGF0YTogdW5kZWZpbmVkO1xuICAgICAganNvbjogSnNvblZhbHVlO1xuICAgICAgdGV4dDogdW5kZWZpbmVkO1xuICAgIH1cbiAgfCB7XG4gICAgICBmb3JtTWV0aG9kOiBGb3JtTWV0aG9kIHwgVjdfRm9ybU1ldGhvZDtcbiAgICAgIGZvcm1BY3Rpb246IHN0cmluZztcbiAgICAgIGZvcm1FbmNUeXBlOiBGb3JtRW5jVHlwZTtcbiAgICAgIGZvcm1EYXRhOiB1bmRlZmluZWQ7XG4gICAgICBqc29uOiB1bmRlZmluZWQ7XG4gICAgICB0ZXh0OiBzdHJpbmc7XG4gICAgfTtcblxuLyoqXG4gKiBAcHJpdmF0ZVxuICogQXJndW1lbnRzIHBhc3NlZCB0byByb3V0ZSBsb2FkZXIvYWN0aW9uIGZ1bmN0aW9ucy4gIFNhbWUgZm9yIG5vdyBidXQgd2Uga2VlcFxuICogdGhpcyBhcyBhIHByaXZhdGUgaW1wbGVtZW50YXRpb24gZGV0YWlsIGluIGNhc2UgdGhleSBkaXZlcmdlIGluIHRoZSBmdXR1cmUuXG4gKi9cbmludGVyZmFjZSBEYXRhRnVuY3Rpb25BcmdzPENvbnRleHQ+IHtcbiAgcmVxdWVzdDogUmVxdWVzdDtcbiAgcGFyYW1zOiBQYXJhbXM7XG4gIGNvbnRleHQ/OiBDb250ZXh0O1xufVxuXG4vLyBUT0RPOiAodjcpIENoYW5nZSB0aGUgZGVmYXVsdHMgZnJvbSBhbnkgdG8gdW5rbm93biBpbiBhbmQgcmVtb3ZlIFJlbWl4IHdyYXBwZXJzOlxuLy8gICBBY3Rpb25GdW5jdGlvbiwgQWN0aW9uRnVuY3Rpb25BcmdzLCBMb2FkZXJGdW5jdGlvbiwgTG9hZGVyRnVuY3Rpb25BcmdzXG4vLyAgIEFsc28sIG1ha2UgdGhlbSBhIHR5cGUgYWxpYXMgaW5zdGVhZCBvZiBhbiBpbnRlcmZhY2VcblxuLyoqXG4gKiBBcmd1bWVudHMgcGFzc2VkIHRvIGxvYWRlciBmdW5jdGlvbnNcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBMb2FkZXJGdW5jdGlvbkFyZ3M8Q29udGV4dCA9IGFueT5cbiAgZXh0ZW5kcyBEYXRhRnVuY3Rpb25BcmdzPENvbnRleHQ+IHt9XG5cbi8qKlxuICogQXJndW1lbnRzIHBhc3NlZCB0byBhY3Rpb24gZnVuY3Rpb25zXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgQWN0aW9uRnVuY3Rpb25BcmdzPENvbnRleHQgPSBhbnk+XG4gIGV4dGVuZHMgRGF0YUZ1bmN0aW9uQXJnczxDb250ZXh0PiB7fVxuXG4vKipcbiAqIExvYWRlcnMgYW5kIGFjdGlvbnMgY2FuIHJldHVybiBhbnl0aGluZyBleGNlcHQgYHVuZGVmaW5lZGAgKGBudWxsYCBpcyBhXG4gKiB2YWxpZCByZXR1cm4gdmFsdWUgaWYgdGhlcmUgaXMgbm8gZGF0YSB0byByZXR1cm4pLiAgUmVzcG9uc2VzIGFyZSBwcmVmZXJyZWRcbiAqIGFuZCB3aWxsIGVhc2UgYW55IGZ1dHVyZSBtaWdyYXRpb24gdG8gUmVtaXhcbiAqL1xudHlwZSBEYXRhRnVuY3Rpb25WYWx1ZSA9IFJlc3BvbnNlIHwgTm9uTnVsbGFibGU8dW5rbm93bj4gfCBudWxsO1xuXG4vKipcbiAqIFJvdXRlIGxvYWRlciBmdW5jdGlvbiBzaWduYXR1cmVcbiAqL1xuZXhwb3J0IHR5cGUgTG9hZGVyRnVuY3Rpb248Q29udGV4dCA9IGFueT4gPSB7XG4gIChhcmdzOiBMb2FkZXJGdW5jdGlvbkFyZ3M8Q29udGV4dD4pOlxuICAgIHwgUHJvbWlzZTxEYXRhRnVuY3Rpb25WYWx1ZT5cbiAgICB8IERhdGFGdW5jdGlvblZhbHVlO1xufSAmIHsgaHlkcmF0ZT86IGJvb2xlYW4gfTtcblxuLyoqXG4gKiBSb3V0ZSBhY3Rpb24gZnVuY3Rpb24gc2lnbmF0dXJlXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgQWN0aW9uRnVuY3Rpb248Q29udGV4dCA9IGFueT4ge1xuICAoYXJnczogQWN0aW9uRnVuY3Rpb25BcmdzPENvbnRleHQ+KTpcbiAgICB8IFByb21pc2U8RGF0YUZ1bmN0aW9uVmFsdWU+XG4gICAgfCBEYXRhRnVuY3Rpb25WYWx1ZTtcbn1cblxuLyoqXG4gKiBBcmd1bWVudHMgcGFzc2VkIHRvIHNob3VsZFJldmFsaWRhdGUgZnVuY3Rpb25cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBTaG91bGRSZXZhbGlkYXRlRnVuY3Rpb25BcmdzIHtcbiAgY3VycmVudFVybDogVVJMO1xuICBjdXJyZW50UGFyYW1zOiBBZ25vc3RpY0RhdGFSb3V0ZU1hdGNoW1wicGFyYW1zXCJdO1xuICBuZXh0VXJsOiBVUkw7XG4gIG5leHRQYXJhbXM6IEFnbm9zdGljRGF0YVJvdXRlTWF0Y2hbXCJwYXJhbXNcIl07XG4gIGZvcm1NZXRob2Q/OiBTdWJtaXNzaW9uW1wiZm9ybU1ldGhvZFwiXTtcbiAgZm9ybUFjdGlvbj86IFN1Ym1pc3Npb25bXCJmb3JtQWN0aW9uXCJdO1xuICBmb3JtRW5jVHlwZT86IFN1Ym1pc3Npb25bXCJmb3JtRW5jVHlwZVwiXTtcbiAgdGV4dD86IFN1Ym1pc3Npb25bXCJ0ZXh0XCJdO1xuICBmb3JtRGF0YT86IFN1Ym1pc3Npb25bXCJmb3JtRGF0YVwiXTtcbiAganNvbj86IFN1Ym1pc3Npb25bXCJqc29uXCJdO1xuICBhY3Rpb25SZXN1bHQ/OiBhbnk7XG4gIGRlZmF1bHRTaG91bGRSZXZhbGlkYXRlOiBib29sZWFuO1xufVxuXG4vKipcbiAqIFJvdXRlIHNob3VsZFJldmFsaWRhdGUgZnVuY3Rpb24gc2lnbmF0dXJlLiAgVGhpcyBydW5zIGFmdGVyIGFueSBzdWJtaXNzaW9uXG4gKiAobmF2aWdhdGlvbiBvciBmZXRjaGVyKSwgc28gd2UgZmxhdHRlbiB0aGUgbmF2aWdhdGlvbi9mZXRjaGVyIHN1Ym1pc3Npb25cbiAqIG9udG8gdGhlIGFyZ3VtZW50cy4gIEl0IHNob3VsZG4ndCBtYXR0ZXIgd2hldGhlciBpdCBjYW1lIGZyb20gYSBuYXZpZ2F0aW9uXG4gKiBvciBhIGZldGNoZXIsIHdoYXQgcmVhbGx5IG1hdHRlcnMgaXMgdGhlIFVSTHMgYW5kIHRoZSBmb3JtRGF0YSBzaW5jZSBsb2FkZXJzXG4gKiBoYXZlIHRvIHJlLXJ1biBiYXNlZCBvbiB0aGUgZGF0YSBtb2RlbHMgdGhhdCB3ZXJlIHBvdGVudGlhbGx5IG11dGF0ZWQuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgU2hvdWxkUmV2YWxpZGF0ZUZ1bmN0aW9uIHtcbiAgKGFyZ3M6IFNob3VsZFJldmFsaWRhdGVGdW5jdGlvbkFyZ3MpOiBib29sZWFuO1xufVxuXG4vKipcbiAqIEZ1bmN0aW9uIHByb3ZpZGVkIGJ5IHRoZSBmcmFtZXdvcmstYXdhcmUgbGF5ZXJzIHRvIHNldCBgaGFzRXJyb3JCb3VuZGFyeWBcbiAqIGZyb20gdGhlIGZyYW1ld29yay1hd2FyZSBgZXJyb3JFbGVtZW50YCBwcm9wXG4gKlxuICogQGRlcHJlY2F0ZWQgVXNlIGBtYXBSb3V0ZVByb3BlcnRpZXNgIGluc3RlYWRcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBEZXRlY3RFcnJvckJvdW5kYXJ5RnVuY3Rpb24ge1xuICAocm91dGU6IEFnbm9zdGljUm91dGVPYmplY3QpOiBib29sZWFuO1xufVxuXG4vKipcbiAqIEZ1bmN0aW9uIHByb3ZpZGVkIGJ5IHRoZSBmcmFtZXdvcmstYXdhcmUgbGF5ZXJzIHRvIHNldCBhbnkgZnJhbWV3b3JrLXNwZWNpZmljXG4gKiBwcm9wZXJ0aWVzIGZyb20gZnJhbWV3b3JrLWFnbm9zdGljIHByb3BlcnRpZXNcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBNYXBSb3V0ZVByb3BlcnRpZXNGdW5jdGlvbiB7XG4gIChyb3V0ZTogQWdub3N0aWNSb3V0ZU9iamVjdCk6IHtcbiAgICBoYXNFcnJvckJvdW5kYXJ5OiBib29sZWFuO1xuICB9ICYgUmVjb3JkPHN0cmluZywgYW55Pjtcbn1cblxuLyoqXG4gKiBLZXlzIHdlIGNhbm5vdCBjaGFuZ2UgZnJvbSB3aXRoaW4gYSBsYXp5KCkgZnVuY3Rpb24uIFdlIHNwcmVhZCBhbGwgb3RoZXIga2V5c1xuICogb250byB0aGUgcm91dGUuIEVpdGhlciB0aGV5J3JlIG1lYW5pbmdmdWwgdG8gdGhlIHJvdXRlciwgb3IgdGhleSdsbCBnZXRcbiAqIGlnbm9yZWQuXG4gKi9cbmV4cG9ydCB0eXBlIEltbXV0YWJsZVJvdXRlS2V5ID1cbiAgfCBcImxhenlcIlxuICB8IFwiY2FzZVNlbnNpdGl2ZVwiXG4gIHwgXCJwYXRoXCJcbiAgfCBcImlkXCJcbiAgfCBcImluZGV4XCJcbiAgfCBcImNoaWxkcmVuXCI7XG5cbmV4cG9ydCBjb25zdCBpbW11dGFibGVSb3V0ZUtleXMgPSBuZXcgU2V0PEltbXV0YWJsZVJvdXRlS2V5PihbXG4gIFwibGF6eVwiLFxuICBcImNhc2VTZW5zaXRpdmVcIixcbiAgXCJwYXRoXCIsXG4gIFwiaWRcIixcbiAgXCJpbmRleFwiLFxuICBcImNoaWxkcmVuXCIsXG5dKTtcblxudHlwZSBSZXF1aXJlT25lPFQsIEtleSA9IGtleW9mIFQ+ID0gRXhjbHVkZTxcbiAge1xuICAgIFtLIGluIGtleW9mIFRdOiBLIGV4dGVuZHMgS2V5ID8gT21pdDxULCBLPiAmIFJlcXVpcmVkPFBpY2s8VCwgSz4+IDogbmV2ZXI7XG4gIH1ba2V5b2YgVF0sXG4gIHVuZGVmaW5lZFxuPjtcblxuLyoqXG4gKiBsYXp5KCkgZnVuY3Rpb24gdG8gbG9hZCBhIHJvdXRlIGRlZmluaXRpb24sIHdoaWNoIGNhbiBhZGQgbm9uLW1hdGNoaW5nXG4gKiByZWxhdGVkIHByb3BlcnRpZXMgdG8gYSByb3V0ZVxuICovXG5leHBvcnQgaW50ZXJmYWNlIExhenlSb3V0ZUZ1bmN0aW9uPFIgZXh0ZW5kcyBBZ25vc3RpY1JvdXRlT2JqZWN0PiB7XG4gICgpOiBQcm9taXNlPFJlcXVpcmVPbmU8T21pdDxSLCBJbW11dGFibGVSb3V0ZUtleT4+Pjtcbn1cblxuLyoqXG4gKiBCYXNlIFJvdXRlT2JqZWN0IHdpdGggY29tbW9uIHByb3BzIHNoYXJlZCBieSBhbGwgdHlwZXMgb2Ygcm91dGVzXG4gKi9cbnR5cGUgQWdub3N0aWNCYXNlUm91dGVPYmplY3QgPSB7XG4gIGNhc2VTZW5zaXRpdmU/OiBib29sZWFuO1xuICBwYXRoPzogc3RyaW5nO1xuICBpZD86IHN0cmluZztcbiAgbG9hZGVyPzogTG9hZGVyRnVuY3Rpb247XG4gIGFjdGlvbj86IEFjdGlvbkZ1bmN0aW9uO1xuICBoYXNFcnJvckJvdW5kYXJ5PzogYm9vbGVhbjtcbiAgc2hvdWxkUmV2YWxpZGF0ZT86IFNob3VsZFJldmFsaWRhdGVGdW5jdGlvbjtcbiAgaGFuZGxlPzogYW55O1xuICBsYXp5PzogTGF6eVJvdXRlRnVuY3Rpb248QWdub3N0aWNCYXNlUm91dGVPYmplY3Q+O1xufTtcblxuLyoqXG4gKiBJbmRleCByb3V0ZXMgbXVzdCBub3QgaGF2ZSBjaGlsZHJlblxuICovXG5leHBvcnQgdHlwZSBBZ25vc3RpY0luZGV4Um91dGVPYmplY3QgPSBBZ25vc3RpY0Jhc2VSb3V0ZU9iamVjdCAmIHtcbiAgY2hpbGRyZW4/OiB1bmRlZmluZWQ7XG4gIGluZGV4OiB0cnVlO1xufTtcblxuLyoqXG4gKiBOb24taW5kZXggcm91dGVzIG1heSBoYXZlIGNoaWxkcmVuLCBidXQgY2Fubm90IGhhdmUgaW5kZXhcbiAqL1xuZXhwb3J0IHR5cGUgQWdub3N0aWNOb25JbmRleFJvdXRlT2JqZWN0ID0gQWdub3N0aWNCYXNlUm91dGVPYmplY3QgJiB7XG4gIGNoaWxkcmVuPzogQWdub3N0aWNSb3V0ZU9iamVjdFtdO1xuICBpbmRleD86IGZhbHNlO1xufTtcblxuLyoqXG4gKiBBIHJvdXRlIG9iamVjdCByZXByZXNlbnRzIGEgbG9naWNhbCByb3V0ZSwgd2l0aCAob3B0aW9uYWxseSkgaXRzIGNoaWxkXG4gKiByb3V0ZXMgb3JnYW5pemVkIGluIGEgdHJlZS1saWtlIHN0cnVjdHVyZS5cbiAqL1xuZXhwb3J0IHR5cGUgQWdub3N0aWNSb3V0ZU9iamVjdCA9XG4gIHwgQWdub3N0aWNJbmRleFJvdXRlT2JqZWN0XG4gIHwgQWdub3N0aWNOb25JbmRleFJvdXRlT2JqZWN0O1xuXG5leHBvcnQgdHlwZSBBZ25vc3RpY0RhdGFJbmRleFJvdXRlT2JqZWN0ID0gQWdub3N0aWNJbmRleFJvdXRlT2JqZWN0ICYge1xuICBpZDogc3RyaW5nO1xufTtcblxuZXhwb3J0IHR5cGUgQWdub3N0aWNEYXRhTm9uSW5kZXhSb3V0ZU9iamVjdCA9IEFnbm9zdGljTm9uSW5kZXhSb3V0ZU9iamVjdCAmIHtcbiAgY2hpbGRyZW4/OiBBZ25vc3RpY0RhdGFSb3V0ZU9iamVjdFtdO1xuICBpZDogc3RyaW5nO1xufTtcblxuLyoqXG4gKiBBIGRhdGEgcm91dGUgb2JqZWN0LCB3aGljaCBpcyBqdXN0IGEgUm91dGVPYmplY3Qgd2l0aCBhIHJlcXVpcmVkIHVuaXF1ZSBJRFxuICovXG5leHBvcnQgdHlwZSBBZ25vc3RpY0RhdGFSb3V0ZU9iamVjdCA9XG4gIHwgQWdub3N0aWNEYXRhSW5kZXhSb3V0ZU9iamVjdFxuICB8IEFnbm9zdGljRGF0YU5vbkluZGV4Um91dGVPYmplY3Q7XG5cbmV4cG9ydCB0eXBlIFJvdXRlTWFuaWZlc3QgPSBSZWNvcmQ8c3RyaW5nLCBBZ25vc3RpY0RhdGFSb3V0ZU9iamVjdCB8IHVuZGVmaW5lZD47XG5cbi8vIFJlY3Vyc2l2ZSBoZWxwZXIgZm9yIGZpbmRpbmcgcGF0aCBwYXJhbWV0ZXJzIGluIHRoZSBhYnNlbmNlIG9mIHdpbGRjYXJkc1xudHlwZSBfUGF0aFBhcmFtPFBhdGggZXh0ZW5kcyBzdHJpbmc+ID1cbiAgLy8gc3BsaXQgcGF0aCBpbnRvIGluZGl2aWR1YWwgcGF0aCBzZWdtZW50c1xuICBQYXRoIGV4dGVuZHMgYCR7aW5mZXIgTH0vJHtpbmZlciBSfWBcbiAgICA/IF9QYXRoUGFyYW08TD4gfCBfUGF0aFBhcmFtPFI+XG4gICAgOiAvLyBmaW5kIHBhcmFtcyBhZnRlciBgOmBcbiAgICBQYXRoIGV4dGVuZHMgYDoke2luZmVyIFBhcmFtfWBcbiAgICA/IFBhcmFtIGV4dGVuZHMgYCR7aW5mZXIgT3B0aW9uYWx9P2BcbiAgICAgID8gT3B0aW9uYWxcbiAgICAgIDogUGFyYW1cbiAgICA6IC8vIG90aGVyd2lzZSwgdGhlcmUgYXJlbid0IGFueSBwYXJhbXMgcHJlc2VudFxuICAgICAgbmV2ZXI7XG5cbi8qKlxuICogRXhhbXBsZXM6XG4gKiBcIi9hL2IvKlwiIC0+IFwiKlwiXG4gKiBcIjphXCIgLT4gXCJhXCJcbiAqIFwiL2EvOmJcIiAtPiBcImJcIlxuICogXCIvYS9ibGFoYmxhaGJsYWg6YlwiIC0+IFwiYlwiXG4gKiBcIi86YS86YlwiIC0+IFwiYVwiIHwgXCJiXCJcbiAqIFwiLzphL2IvOmMvKlwiIC0+IFwiYVwiIHwgXCJjXCIgfCBcIipcIlxuICovXG5leHBvcnQgdHlwZSBQYXRoUGFyYW08UGF0aCBleHRlbmRzIHN0cmluZz4gPVxuICAvLyBjaGVjayBpZiBwYXRoIGlzIGp1c3QgYSB3aWxkY2FyZFxuICBQYXRoIGV4dGVuZHMgXCIqXCIgfCBcIi8qXCJcbiAgICA/IFwiKlwiXG4gICAgOiAvLyBsb29rIGZvciB3aWxkY2FyZCBhdCB0aGUgZW5kIG9mIHRoZSBwYXRoXG4gICAgUGF0aCBleHRlbmRzIGAke2luZmVyIFJlc3R9LypgXG4gICAgPyBcIipcIiB8IF9QYXRoUGFyYW08UmVzdD5cbiAgICA6IC8vIGxvb2sgZm9yIHBhcmFtcyBpbiB0aGUgYWJzZW5jZSBvZiB3aWxkY2FyZHNcbiAgICAgIF9QYXRoUGFyYW08UGF0aD47XG5cbi8vIEF0dGVtcHQgdG8gcGFyc2UgdGhlIGdpdmVuIHN0cmluZyBzZWdtZW50LiBJZiBpdCBmYWlscywgdGhlbiBqdXN0IHJldHVybiB0aGVcbi8vIHBsYWluIHN0cmluZyB0eXBlIGFzIGEgZGVmYXVsdCBmYWxsYmFjay4gT3RoZXJ3aXNlLCByZXR1cm4gdGhlIHVuaW9uIG9mIHRoZVxuLy8gcGFyc2VkIHN0cmluZyBsaXRlcmFscyB0aGF0IHdlcmUgcmVmZXJlbmNlZCBhcyBkeW5hbWljIHNlZ21lbnRzIGluIHRoZSByb3V0ZS5cbmV4cG9ydCB0eXBlIFBhcmFtUGFyc2VLZXk8U2VnbWVudCBleHRlbmRzIHN0cmluZz4gPVxuICAvLyBpZiB5b3UgY291bGQgbm90IGZpbmQgcGF0aCBwYXJhbXMsIGZhbGxiYWNrIHRvIGBzdHJpbmdgXG4gIFtQYXRoUGFyYW08U2VnbWVudD5dIGV4dGVuZHMgW25ldmVyXSA/IHN0cmluZyA6IFBhdGhQYXJhbTxTZWdtZW50PjtcblxuLyoqXG4gKiBUaGUgcGFyYW1ldGVycyB0aGF0IHdlcmUgcGFyc2VkIGZyb20gdGhlIFVSTCBwYXRoLlxuICovXG5leHBvcnQgdHlwZSBQYXJhbXM8S2V5IGV4dGVuZHMgc3RyaW5nID0gc3RyaW5nPiA9IHtcbiAgcmVhZG9ubHkgW2tleSBpbiBLZXldOiBzdHJpbmcgfCB1bmRlZmluZWQ7XG59O1xuXG4vKipcbiAqIEEgUm91dGVNYXRjaCBjb250YWlucyBpbmZvIGFib3V0IGhvdyBhIHJvdXRlIG1hdGNoZWQgYSBVUkwuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgQWdub3N0aWNSb3V0ZU1hdGNoPFxuICBQYXJhbUtleSBleHRlbmRzIHN0cmluZyA9IHN0cmluZyxcbiAgUm91dGVPYmplY3RUeXBlIGV4dGVuZHMgQWdub3N0aWNSb3V0ZU9iamVjdCA9IEFnbm9zdGljUm91dGVPYmplY3Rcbj4ge1xuICAvKipcbiAgICogVGhlIG5hbWVzIGFuZCB2YWx1ZXMgb2YgZHluYW1pYyBwYXJhbWV0ZXJzIGluIHRoZSBVUkwuXG4gICAqL1xuICBwYXJhbXM6IFBhcmFtczxQYXJhbUtleT47XG4gIC8qKlxuICAgKiBUaGUgcG9ydGlvbiBvZiB0aGUgVVJMIHBhdGhuYW1lIHRoYXQgd2FzIG1hdGNoZWQuXG4gICAqL1xuICBwYXRobmFtZTogc3RyaW5nO1xuICAvKipcbiAgICogVGhlIHBvcnRpb24gb2YgdGhlIFVSTCBwYXRobmFtZSB0aGF0IHdhcyBtYXRjaGVkIGJlZm9yZSBjaGlsZCByb3V0ZXMuXG4gICAqL1xuICBwYXRobmFtZUJhc2U6IHN0cmluZztcbiAgLyoqXG4gICAqIFRoZSByb3V0ZSBvYmplY3QgdGhhdCB3YXMgdXNlZCB0byBtYXRjaC5cbiAgICovXG4gIHJvdXRlOiBSb3V0ZU9iamVjdFR5cGU7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQWdub3N0aWNEYXRhUm91dGVNYXRjaFxuICBleHRlbmRzIEFnbm9zdGljUm91dGVNYXRjaDxzdHJpbmcsIEFnbm9zdGljRGF0YVJvdXRlT2JqZWN0PiB7fVxuXG5mdW5jdGlvbiBpc0luZGV4Um91dGUoXG4gIHJvdXRlOiBBZ25vc3RpY1JvdXRlT2JqZWN0XG4pOiByb3V0ZSBpcyBBZ25vc3RpY0luZGV4Um91dGVPYmplY3Qge1xuICByZXR1cm4gcm91dGUuaW5kZXggPT09IHRydWU7XG59XG5cbi8vIFdhbGsgdGhlIHJvdXRlIHRyZWUgZ2VuZXJhdGluZyB1bmlxdWUgSURzIHdoZXJlIG5lY2Vzc2FyeSwgc28gd2UgYXJlIHdvcmtpbmdcbi8vIHNvbGVseSB3aXRoIEFnbm9zdGljRGF0YVJvdXRlT2JqZWN0J3Mgd2l0aGluIHRoZSBSb3V0ZXJcbmV4cG9ydCBmdW5jdGlvbiBjb252ZXJ0Um91dGVzVG9EYXRhUm91dGVzKFxuICByb3V0ZXM6IEFnbm9zdGljUm91dGVPYmplY3RbXSxcbiAgbWFwUm91dGVQcm9wZXJ0aWVzOiBNYXBSb3V0ZVByb3BlcnRpZXNGdW5jdGlvbixcbiAgcGFyZW50UGF0aDogbnVtYmVyW10gPSBbXSxcbiAgbWFuaWZlc3Q6IFJvdXRlTWFuaWZlc3QgPSB7fVxuKTogQWdub3N0aWNEYXRhUm91dGVPYmplY3RbXSB7XG4gIHJldHVybiByb3V0ZXMubWFwKChyb3V0ZSwgaW5kZXgpID0+IHtcbiAgICBsZXQgdHJlZVBhdGggPSBbLi4ucGFyZW50UGF0aCwgaW5kZXhdO1xuICAgIGxldCBpZCA9IHR5cGVvZiByb3V0ZS5pZCA9PT0gXCJzdHJpbmdcIiA/IHJvdXRlLmlkIDogdHJlZVBhdGguam9pbihcIi1cIik7XG4gICAgaW52YXJpYW50KFxuICAgICAgcm91dGUuaW5kZXggIT09IHRydWUgfHwgIXJvdXRlLmNoaWxkcmVuLFxuICAgICAgYENhbm5vdCBzcGVjaWZ5IGNoaWxkcmVuIG9uIGFuIGluZGV4IHJvdXRlYFxuICAgICk7XG4gICAgaW52YXJpYW50KFxuICAgICAgIW1hbmlmZXN0W2lkXSxcbiAgICAgIGBGb3VuZCBhIHJvdXRlIGlkIGNvbGxpc2lvbiBvbiBpZCBcIiR7aWR9XCIuICBSb3V0ZSBgICtcbiAgICAgICAgXCJpZCdzIG11c3QgYmUgZ2xvYmFsbHkgdW5pcXVlIHdpdGhpbiBEYXRhIFJvdXRlciB1c2FnZXNcIlxuICAgICk7XG5cbiAgICBpZiAoaXNJbmRleFJvdXRlKHJvdXRlKSkge1xuICAgICAgbGV0IGluZGV4Um91dGU6IEFnbm9zdGljRGF0YUluZGV4Um91dGVPYmplY3QgPSB7XG4gICAgICAgIC4uLnJvdXRlLFxuICAgICAgICAuLi5tYXBSb3V0ZVByb3BlcnRpZXMocm91dGUpLFxuICAgICAgICBpZCxcbiAgICAgIH07XG4gICAgICBtYW5pZmVzdFtpZF0gPSBpbmRleFJvdXRlO1xuICAgICAgcmV0dXJuIGluZGV4Um91dGU7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxldCBwYXRoT3JMYXlvdXRSb3V0ZTogQWdub3N0aWNEYXRhTm9uSW5kZXhSb3V0ZU9iamVjdCA9IHtcbiAgICAgICAgLi4ucm91dGUsXG4gICAgICAgIC4uLm1hcFJvdXRlUHJvcGVydGllcyhyb3V0ZSksXG4gICAgICAgIGlkLFxuICAgICAgICBjaGlsZHJlbjogdW5kZWZpbmVkLFxuICAgICAgfTtcbiAgICAgIG1hbmlmZXN0W2lkXSA9IHBhdGhPckxheW91dFJvdXRlO1xuXG4gICAgICBpZiAocm91dGUuY2hpbGRyZW4pIHtcbiAgICAgICAgcGF0aE9yTGF5b3V0Um91dGUuY2hpbGRyZW4gPSBjb252ZXJ0Um91dGVzVG9EYXRhUm91dGVzKFxuICAgICAgICAgIHJvdXRlLmNoaWxkcmVuLFxuICAgICAgICAgIG1hcFJvdXRlUHJvcGVydGllcyxcbiAgICAgICAgICB0cmVlUGF0aCxcbiAgICAgICAgICBtYW5pZmVzdFxuICAgICAgICApO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gcGF0aE9yTGF5b3V0Um91dGU7XG4gICAgfVxuICB9KTtcbn1cblxuLyoqXG4gKiBNYXRjaGVzIHRoZSBnaXZlbiByb3V0ZXMgdG8gYSBsb2NhdGlvbiBhbmQgcmV0dXJucyB0aGUgbWF0Y2ggZGF0YS5cbiAqXG4gKiBAc2VlIGh0dHBzOi8vcmVhY3Ryb3V0ZXIuY29tL3V0aWxzL21hdGNoLXJvdXRlc1xuICovXG5leHBvcnQgZnVuY3Rpb24gbWF0Y2hSb3V0ZXM8XG4gIFJvdXRlT2JqZWN0VHlwZSBleHRlbmRzIEFnbm9zdGljUm91dGVPYmplY3QgPSBBZ25vc3RpY1JvdXRlT2JqZWN0XG4+KFxuICByb3V0ZXM6IFJvdXRlT2JqZWN0VHlwZVtdLFxuICBsb2NhdGlvbkFyZzogUGFydGlhbDxMb2NhdGlvbj4gfCBzdHJpbmcsXG4gIGJhc2VuYW1lID0gXCIvXCJcbik6IEFnbm9zdGljUm91dGVNYXRjaDxzdHJpbmcsIFJvdXRlT2JqZWN0VHlwZT5bXSB8IG51bGwge1xuICBsZXQgbG9jYXRpb24gPVxuICAgIHR5cGVvZiBsb2NhdGlvbkFyZyA9PT0gXCJzdHJpbmdcIiA/IHBhcnNlUGF0aChsb2NhdGlvbkFyZykgOiBsb2NhdGlvbkFyZztcblxuICBsZXQgcGF0aG5hbWUgPSBzdHJpcEJhc2VuYW1lKGxvY2F0aW9uLnBhdGhuYW1lIHx8IFwiL1wiLCBiYXNlbmFtZSk7XG5cbiAgaWYgKHBhdGhuYW1lID09IG51bGwpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIGxldCBicmFuY2hlcyA9IGZsYXR0ZW5Sb3V0ZXMocm91dGVzKTtcbiAgcmFua1JvdXRlQnJhbmNoZXMoYnJhbmNoZXMpO1xuXG4gIGxldCBtYXRjaGVzID0gbnVsbDtcbiAgZm9yIChsZXQgaSA9IDA7IG1hdGNoZXMgPT0gbnVsbCAmJiBpIDwgYnJhbmNoZXMubGVuZ3RoOyArK2kpIHtcbiAgICAvLyBJbmNvbWluZyBwYXRobmFtZXMgYXJlIGdlbmVyYWxseSBlbmNvZGVkIGZyb20gZWl0aGVyIHdpbmRvdy5sb2NhdGlvblxuICAgIC8vIG9yIGZyb20gcm91dGVyLm5hdmlnYXRlLCBidXQgd2Ugd2FudCB0byBtYXRjaCBhZ2FpbnN0IHRoZSB1bmVuY29kZWRcbiAgICAvLyBwYXRocyBpbiB0aGUgcm91dGUgZGVmaW5pdGlvbnMuICBNZW1vcnkgcm91dGVyIGxvY2F0aW9ucyB3b24ndCBiZVxuICAgIC8vIGVuY29kZWQgaGVyZSBidXQgdGhlcmUgYWxzbyBzaG91bGRuJ3QgYmUgYW55dGhpbmcgdG8gZGVjb2RlIHNvIHRoaXNcbiAgICAvLyBzaG91bGQgYmUgYSBzYWZlIG9wZXJhdGlvbi4gIFRoaXMgYXZvaWRzIG5lZWRpbmcgbWF0Y2hSb3V0ZXMgdG8gYmVcbiAgICAvLyBoaXN0b3J5LWF3YXJlLlxuICAgIGxldCBkZWNvZGVkID0gZGVjb2RlUGF0aChwYXRobmFtZSk7XG4gICAgbWF0Y2hlcyA9IG1hdGNoUm91dGVCcmFuY2g8c3RyaW5nLCBSb3V0ZU9iamVjdFR5cGU+KGJyYW5jaGVzW2ldLCBkZWNvZGVkKTtcbiAgfVxuXG4gIHJldHVybiBtYXRjaGVzO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFVJTWF0Y2g8RGF0YSA9IHVua25vd24sIEhhbmRsZSA9IHVua25vd24+IHtcbiAgaWQ6IHN0cmluZztcbiAgcGF0aG5hbWU6IHN0cmluZztcbiAgcGFyYW1zOiBBZ25vc3RpY1JvdXRlTWF0Y2hbXCJwYXJhbXNcIl07XG4gIGRhdGE6IERhdGE7XG4gIGhhbmRsZTogSGFuZGxlO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY29udmVydFJvdXRlTWF0Y2hUb1VpTWF0Y2goXG4gIG1hdGNoOiBBZ25vc3RpY0RhdGFSb3V0ZU1hdGNoLFxuICBsb2FkZXJEYXRhOiBSb3V0ZURhdGFcbik6IFVJTWF0Y2gge1xuICBsZXQgeyByb3V0ZSwgcGF0aG5hbWUsIHBhcmFtcyB9ID0gbWF0Y2g7XG4gIHJldHVybiB7XG4gICAgaWQ6IHJvdXRlLmlkLFxuICAgIHBhdGhuYW1lLFxuICAgIHBhcmFtcyxcbiAgICBkYXRhOiBsb2FkZXJEYXRhW3JvdXRlLmlkXSxcbiAgICBoYW5kbGU6IHJvdXRlLmhhbmRsZSxcbiAgfTtcbn1cblxuaW50ZXJmYWNlIFJvdXRlTWV0YTxcbiAgUm91dGVPYmplY3RUeXBlIGV4dGVuZHMgQWdub3N0aWNSb3V0ZU9iamVjdCA9IEFnbm9zdGljUm91dGVPYmplY3Rcbj4ge1xuICByZWxhdGl2ZVBhdGg6IHN0cmluZztcbiAgY2FzZVNlbnNpdGl2ZTogYm9vbGVhbjtcbiAgY2hpbGRyZW5JbmRleDogbnVtYmVyO1xuICByb3V0ZTogUm91dGVPYmplY3RUeXBlO1xufVxuXG5pbnRlcmZhY2UgUm91dGVCcmFuY2g8XG4gIFJvdXRlT2JqZWN0VHlwZSBleHRlbmRzIEFnbm9zdGljUm91dGVPYmplY3QgPSBBZ25vc3RpY1JvdXRlT2JqZWN0XG4+IHtcbiAgcGF0aDogc3RyaW5nO1xuICBzY29yZTogbnVtYmVyO1xuICByb3V0ZXNNZXRhOiBSb3V0ZU1ldGE8Um91dGVPYmplY3RUeXBlPltdO1xufVxuXG5mdW5jdGlvbiBmbGF0dGVuUm91dGVzPFxuICBSb3V0ZU9iamVjdFR5cGUgZXh0ZW5kcyBBZ25vc3RpY1JvdXRlT2JqZWN0ID0gQWdub3N0aWNSb3V0ZU9iamVjdFxuPihcbiAgcm91dGVzOiBSb3V0ZU9iamVjdFR5cGVbXSxcbiAgYnJhbmNoZXM6IFJvdXRlQnJhbmNoPFJvdXRlT2JqZWN0VHlwZT5bXSA9IFtdLFxuICBwYXJlbnRzTWV0YTogUm91dGVNZXRhPFJvdXRlT2JqZWN0VHlwZT5bXSA9IFtdLFxuICBwYXJlbnRQYXRoID0gXCJcIlxuKTogUm91dGVCcmFuY2g8Um91dGVPYmplY3RUeXBlPltdIHtcbiAgbGV0IGZsYXR0ZW5Sb3V0ZSA9IChcbiAgICByb3V0ZTogUm91dGVPYmplY3RUeXBlLFxuICAgIGluZGV4OiBudW1iZXIsXG4gICAgcmVsYXRpdmVQYXRoPzogc3RyaW5nXG4gICkgPT4ge1xuICAgIGxldCBtZXRhOiBSb3V0ZU1ldGE8Um91dGVPYmplY3RUeXBlPiA9IHtcbiAgICAgIHJlbGF0aXZlUGF0aDpcbiAgICAgICAgcmVsYXRpdmVQYXRoID09PSB1bmRlZmluZWQgPyByb3V0ZS5wYXRoIHx8IFwiXCIgOiByZWxhdGl2ZVBhdGgsXG4gICAgICBjYXNlU2Vuc2l0aXZlOiByb3V0ZS5jYXNlU2Vuc2l0aXZlID09PSB0cnVlLFxuICAgICAgY2hpbGRyZW5JbmRleDogaW5kZXgsXG4gICAgICByb3V0ZSxcbiAgICB9O1xuXG4gICAgaWYgKG1ldGEucmVsYXRpdmVQYXRoLnN0YXJ0c1dpdGgoXCIvXCIpKSB7XG4gICAgICBpbnZhcmlhbnQoXG4gICAgICAgIG1ldGEucmVsYXRpdmVQYXRoLnN0YXJ0c1dpdGgocGFyZW50UGF0aCksXG4gICAgICAgIGBBYnNvbHV0ZSByb3V0ZSBwYXRoIFwiJHttZXRhLnJlbGF0aXZlUGF0aH1cIiBuZXN0ZWQgdW5kZXIgcGF0aCBgICtcbiAgICAgICAgICBgXCIke3BhcmVudFBhdGh9XCIgaXMgbm90IHZhbGlkLiBBbiBhYnNvbHV0ZSBjaGlsZCByb3V0ZSBwYXRoIGAgK1xuICAgICAgICAgIGBtdXN0IHN0YXJ0IHdpdGggdGhlIGNvbWJpbmVkIHBhdGggb2YgYWxsIGl0cyBwYXJlbnQgcm91dGVzLmBcbiAgICAgICk7XG5cbiAgICAgIG1ldGEucmVsYXRpdmVQYXRoID0gbWV0YS5yZWxhdGl2ZVBhdGguc2xpY2UocGFyZW50UGF0aC5sZW5ndGgpO1xuICAgIH1cblxuICAgIGxldCBwYXRoID0gam9pblBhdGhzKFtwYXJlbnRQYXRoLCBtZXRhLnJlbGF0aXZlUGF0aF0pO1xuICAgIGxldCByb3V0ZXNNZXRhID0gcGFyZW50c01ldGEuY29uY2F0KG1ldGEpO1xuXG4gICAgLy8gQWRkIHRoZSBjaGlsZHJlbiBiZWZvcmUgYWRkaW5nIHRoaXMgcm91dGUgdG8gdGhlIGFycmF5LCBzbyB3ZSB0cmF2ZXJzZSB0aGVcbiAgICAvLyByb3V0ZSB0cmVlIGRlcHRoLWZpcnN0IGFuZCBjaGlsZCByb3V0ZXMgYXBwZWFyIGJlZm9yZSB0aGVpciBwYXJlbnRzIGluXG4gICAgLy8gdGhlIFwiZmxhdHRlbmVkXCIgdmVyc2lvbi5cbiAgICBpZiAocm91dGUuY2hpbGRyZW4gJiYgcm91dGUuY2hpbGRyZW4ubGVuZ3RoID4gMCkge1xuICAgICAgaW52YXJpYW50KFxuICAgICAgICAvLyBPdXIgdHlwZXMga25vdyBiZXR0ZXIsIGJ1dCBydW50aW1lIEpTIG1heSBub3QhXG4gICAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3JcbiAgICAgICAgcm91dGUuaW5kZXggIT09IHRydWUsXG4gICAgICAgIGBJbmRleCByb3V0ZXMgbXVzdCBub3QgaGF2ZSBjaGlsZCByb3V0ZXMuIFBsZWFzZSByZW1vdmUgYCArXG4gICAgICAgICAgYGFsbCBjaGlsZCByb3V0ZXMgZnJvbSByb3V0ZSBwYXRoIFwiJHtwYXRofVwiLmBcbiAgICAgICk7XG5cbiAgICAgIGZsYXR0ZW5Sb3V0ZXMocm91dGUuY2hpbGRyZW4sIGJyYW5jaGVzLCByb3V0ZXNNZXRhLCBwYXRoKTtcbiAgICB9XG5cbiAgICAvLyBSb3V0ZXMgd2l0aG91dCBhIHBhdGggc2hvdWxkbid0IGV2ZXIgbWF0Y2ggYnkgdGhlbXNlbHZlcyB1bmxlc3MgdGhleSBhcmVcbiAgICAvLyBpbmRleCByb3V0ZXMsIHNvIGRvbid0IGFkZCB0aGVtIHRvIHRoZSBsaXN0IG9mIHBvc3NpYmxlIGJyYW5jaGVzLlxuICAgIGlmIChyb3V0ZS5wYXRoID09IG51bGwgJiYgIXJvdXRlLmluZGV4KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgYnJhbmNoZXMucHVzaCh7XG4gICAgICBwYXRoLFxuICAgICAgc2NvcmU6IGNvbXB1dGVTY29yZShwYXRoLCByb3V0ZS5pbmRleCksXG4gICAgICByb3V0ZXNNZXRhLFxuICAgIH0pO1xuICB9O1xuICByb3V0ZXMuZm9yRWFjaCgocm91dGUsIGluZGV4KSA9PiB7XG4gICAgLy8gY29hcnNlLWdyYWluIGNoZWNrIGZvciBvcHRpb25hbCBwYXJhbXNcbiAgICBpZiAocm91dGUucGF0aCA9PT0gXCJcIiB8fCAhcm91dGUucGF0aD8uaW5jbHVkZXMoXCI/XCIpKSB7XG4gICAgICBmbGF0dGVuUm91dGUocm91dGUsIGluZGV4KTtcbiAgICB9IGVsc2Uge1xuICAgICAgZm9yIChsZXQgZXhwbG9kZWQgb2YgZXhwbG9kZU9wdGlvbmFsU2VnbWVudHMocm91dGUucGF0aCkpIHtcbiAgICAgICAgZmxhdHRlblJvdXRlKHJvdXRlLCBpbmRleCwgZXhwbG9kZWQpO1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuIGJyYW5jaGVzO1xufVxuXG4vKipcbiAqIENvbXB1dGVzIGFsbCBjb21iaW5hdGlvbnMgb2Ygb3B0aW9uYWwgcGF0aCBzZWdtZW50cyBmb3IgYSBnaXZlbiBwYXRoLFxuICogZXhjbHVkaW5nIGNvbWJpbmF0aW9ucyB0aGF0IGFyZSBhbWJpZ3VvdXMgYW5kIG9mIGxvd2VyIHByaW9yaXR5LlxuICpcbiAqIEZvciBleGFtcGxlLCBgL29uZS86dHdvPy90aHJlZS86Zm91cj8vOmZpdmU/YCBleHBsb2RlcyB0bzpcbiAqIC0gYC9vbmUvdGhyZWVgXG4gKiAtIGAvb25lLzp0d28vdGhyZWVgXG4gKiAtIGAvb25lL3RocmVlLzpmb3VyYFxuICogLSBgL29uZS90aHJlZS86Zml2ZWBcbiAqIC0gYC9vbmUvOnR3by90aHJlZS86Zm91cmBcbiAqIC0gYC9vbmUvOnR3by90aHJlZS86Zml2ZWBcbiAqIC0gYC9vbmUvdGhyZWUvOmZvdXIvOmZpdmVgXG4gKiAtIGAvb25lLzp0d28vdGhyZWUvOmZvdXIvOmZpdmVgXG4gKi9cbmZ1bmN0aW9uIGV4cGxvZGVPcHRpb25hbFNlZ21lbnRzKHBhdGg6IHN0cmluZyk6IHN0cmluZ1tdIHtcbiAgbGV0IHNlZ21lbnRzID0gcGF0aC5zcGxpdChcIi9cIik7XG4gIGlmIChzZWdtZW50cy5sZW5ndGggPT09IDApIHJldHVybiBbXTtcblxuICBsZXQgW2ZpcnN0LCAuLi5yZXN0XSA9IHNlZ21lbnRzO1xuXG4gIC8vIE9wdGlvbmFsIHBhdGggc2VnbWVudHMgYXJlIGRlbm90ZWQgYnkgYSB0cmFpbGluZyBgP2BcbiAgbGV0IGlzT3B0aW9uYWwgPSBmaXJzdC5lbmRzV2l0aChcIj9cIik7XG4gIC8vIENvbXB1dGUgdGhlIGNvcnJlc3BvbmRpbmcgcmVxdWlyZWQgc2VnbWVudDogYGZvbz9gIC0+IGBmb29gXG4gIGxldCByZXF1aXJlZCA9IGZpcnN0LnJlcGxhY2UoL1xcPyQvLCBcIlwiKTtcblxuICBpZiAocmVzdC5sZW5ndGggPT09IDApIHtcbiAgICAvLyBJbnRlcHJldCBlbXB0eSBzdHJpbmcgYXMgb21pdHRpbmcgYW4gb3B0aW9uYWwgc2VnbWVudFxuICAgIC8vIGBbXCJvbmVcIiwgXCJcIiwgXCJ0aHJlZVwiXWAgY29ycmVzcG9uZHMgdG8gb21pdHRpbmcgYDp0d29gIGZyb20gYC9vbmUvOnR3bz8vdGhyZWVgIC0+IGAvb25lL3RocmVlYFxuICAgIHJldHVybiBpc09wdGlvbmFsID8gW3JlcXVpcmVkLCBcIlwiXSA6IFtyZXF1aXJlZF07XG4gIH1cblxuICBsZXQgcmVzdEV4cGxvZGVkID0gZXhwbG9kZU9wdGlvbmFsU2VnbWVudHMocmVzdC5qb2luKFwiL1wiKSk7XG5cbiAgbGV0IHJlc3VsdDogc3RyaW5nW10gPSBbXTtcblxuICAvLyBBbGwgY2hpbGQgcGF0aHMgd2l0aCB0aGUgcHJlZml4LiAgRG8gdGhpcyBmb3IgYWxsIGNoaWxkcmVuIGJlZm9yZSB0aGVcbiAgLy8gb3B0aW9uYWwgdmVyc2lvbiBmb3IgYWxsIGNoaWxkcmVuLCBzbyB3ZSBnZXQgY29uc2lzdGVudCBvcmRlcmluZyB3aGVyZSB0aGVcbiAgLy8gcGFyZW50IG9wdGlvbmFsIGFzcGVjdCBpcyBwcmVmZXJyZWQgYXMgcmVxdWlyZWQuICBPdGhlcndpc2UsIHdlIGNhbiBnZXRcbiAgLy8gY2hpbGQgc2VjdGlvbnMgaW50ZXJzcGVyc2VkIHdoZXJlIGRlZXBlciBvcHRpb25hbCBzZWdtZW50cyBhcmUgaGlnaGVyIHRoYW5cbiAgLy8gcGFyZW50IG9wdGlvbmFsIHNlZ21lbnRzLCB3aGVyZSBmb3IgZXhhbXBsZSwgLzp0d28gd291bGQgZXhwbG9kZSBfZWFybGllcl9cbiAgLy8gdGhlbiAvOm9uZS4gIEJ5IGFsd2F5cyBpbmNsdWRpbmcgdGhlIHBhcmVudCBhcyByZXF1aXJlZCBfZm9yIGFsbCBjaGlsZHJlbl9cbiAgLy8gZmlyc3QsIHdlIGF2b2lkIHRoaXMgaXNzdWVcbiAgcmVzdWx0LnB1c2goXG4gICAgLi4ucmVzdEV4cGxvZGVkLm1hcCgoc3VicGF0aCkgPT5cbiAgICAgIHN1YnBhdGggPT09IFwiXCIgPyByZXF1aXJlZCA6IFtyZXF1aXJlZCwgc3VicGF0aF0uam9pbihcIi9cIilcbiAgICApXG4gICk7XG5cbiAgLy8gVGhlbiwgaWYgdGhpcyBpcyBhbiBvcHRpb25hbCB2YWx1ZSwgYWRkIGFsbCBjaGlsZCB2ZXJzaW9ucyB3aXRob3V0XG4gIGlmIChpc09wdGlvbmFsKSB7XG4gICAgcmVzdWx0LnB1c2goLi4ucmVzdEV4cGxvZGVkKTtcbiAgfVxuXG4gIC8vIGZvciBhYnNvbHV0ZSBwYXRocywgZW5zdXJlIGAvYCBpbnN0ZWFkIG9mIGVtcHR5IHNlZ21lbnRcbiAgcmV0dXJuIHJlc3VsdC5tYXAoKGV4cGxvZGVkKSA9PlxuICAgIHBhdGguc3RhcnRzV2l0aChcIi9cIikgJiYgZXhwbG9kZWQgPT09IFwiXCIgPyBcIi9cIiA6IGV4cGxvZGVkXG4gICk7XG59XG5cbmZ1bmN0aW9uIHJhbmtSb3V0ZUJyYW5jaGVzKGJyYW5jaGVzOiBSb3V0ZUJyYW5jaFtdKTogdm9pZCB7XG4gIGJyYW5jaGVzLnNvcnQoKGEsIGIpID0+XG4gICAgYS5zY29yZSAhPT0gYi5zY29yZVxuICAgICAgPyBiLnNjb3JlIC0gYS5zY29yZSAvLyBIaWdoZXIgc2NvcmUgZmlyc3RcbiAgICAgIDogY29tcGFyZUluZGV4ZXMoXG4gICAgICAgICAgYS5yb3V0ZXNNZXRhLm1hcCgobWV0YSkgPT4gbWV0YS5jaGlsZHJlbkluZGV4KSxcbiAgICAgICAgICBiLnJvdXRlc01ldGEubWFwKChtZXRhKSA9PiBtZXRhLmNoaWxkcmVuSW5kZXgpXG4gICAgICAgIClcbiAgKTtcbn1cblxuY29uc3QgcGFyYW1SZSA9IC9eOltcXHctXSskLztcbmNvbnN0IGR5bmFtaWNTZWdtZW50VmFsdWUgPSAzO1xuY29uc3QgaW5kZXhSb3V0ZVZhbHVlID0gMjtcbmNvbnN0IGVtcHR5U2VnbWVudFZhbHVlID0gMTtcbmNvbnN0IHN0YXRpY1NlZ21lbnRWYWx1ZSA9IDEwO1xuY29uc3Qgc3BsYXRQZW5hbHR5ID0gLTI7XG5jb25zdCBpc1NwbGF0ID0gKHM6IHN0cmluZykgPT4gcyA9PT0gXCIqXCI7XG5cbmZ1bmN0aW9uIGNvbXB1dGVTY29yZShwYXRoOiBzdHJpbmcsIGluZGV4OiBib29sZWFuIHwgdW5kZWZpbmVkKTogbnVtYmVyIHtcbiAgbGV0IHNlZ21lbnRzID0gcGF0aC5zcGxpdChcIi9cIik7XG4gIGxldCBpbml0aWFsU2NvcmUgPSBzZWdtZW50cy5sZW5ndGg7XG4gIGlmIChzZWdtZW50cy5zb21lKGlzU3BsYXQpKSB7XG4gICAgaW5pdGlhbFNjb3JlICs9IHNwbGF0UGVuYWx0eTtcbiAgfVxuXG4gIGlmIChpbmRleCkge1xuICAgIGluaXRpYWxTY29yZSArPSBpbmRleFJvdXRlVmFsdWU7XG4gIH1cblxuICByZXR1cm4gc2VnbWVudHNcbiAgICAuZmlsdGVyKChzKSA9PiAhaXNTcGxhdChzKSlcbiAgICAucmVkdWNlKFxuICAgICAgKHNjb3JlLCBzZWdtZW50KSA9PlxuICAgICAgICBzY29yZSArXG4gICAgICAgIChwYXJhbVJlLnRlc3Qoc2VnbWVudClcbiAgICAgICAgICA/IGR5bmFtaWNTZWdtZW50VmFsdWVcbiAgICAgICAgICA6IHNlZ21lbnQgPT09IFwiXCJcbiAgICAgICAgICA/IGVtcHR5U2VnbWVudFZhbHVlXG4gICAgICAgICAgOiBzdGF0aWNTZWdtZW50VmFsdWUpLFxuICAgICAgaW5pdGlhbFNjb3JlXG4gICAgKTtcbn1cblxuZnVuY3Rpb24gY29tcGFyZUluZGV4ZXMoYTogbnVtYmVyW10sIGI6IG51bWJlcltdKTogbnVtYmVyIHtcbiAgbGV0IHNpYmxpbmdzID1cbiAgICBhLmxlbmd0aCA9PT0gYi5sZW5ndGggJiYgYS5zbGljZSgwLCAtMSkuZXZlcnkoKG4sIGkpID0+IG4gPT09IGJbaV0pO1xuXG4gIHJldHVybiBzaWJsaW5nc1xuICAgID8gLy8gSWYgdHdvIHJvdXRlcyBhcmUgc2libGluZ3MsIHdlIHNob3VsZCB0cnkgdG8gbWF0Y2ggdGhlIGVhcmxpZXIgc2libGluZ1xuICAgICAgLy8gZmlyc3QuIFRoaXMgYWxsb3dzIHBlb3BsZSB0byBoYXZlIGZpbmUtZ3JhaW5lZCBjb250cm9sIG92ZXIgdGhlIG1hdGNoaW5nXG4gICAgICAvLyBiZWhhdmlvciBieSBzaW1wbHkgcHV0dGluZyByb3V0ZXMgd2l0aCBpZGVudGljYWwgcGF0aHMgaW4gdGhlIG9yZGVyIHRoZXlcbiAgICAgIC8vIHdhbnQgdGhlbSB0cmllZC5cbiAgICAgIGFbYS5sZW5ndGggLSAxXSAtIGJbYi5sZW5ndGggLSAxXVxuICAgIDogLy8gT3RoZXJ3aXNlLCBpdCBkb2Vzbid0IHJlYWxseSBtYWtlIHNlbnNlIHRvIHJhbmsgbm9uLXNpYmxpbmdzIGJ5IGluZGV4LFxuICAgICAgLy8gc28gdGhleSBzb3J0IGVxdWFsbHkuXG4gICAgICAwO1xufVxuXG5mdW5jdGlvbiBtYXRjaFJvdXRlQnJhbmNoPFxuICBQYXJhbUtleSBleHRlbmRzIHN0cmluZyA9IHN0cmluZyxcbiAgUm91dGVPYmplY3RUeXBlIGV4dGVuZHMgQWdub3N0aWNSb3V0ZU9iamVjdCA9IEFnbm9zdGljUm91dGVPYmplY3Rcbj4oXG4gIGJyYW5jaDogUm91dGVCcmFuY2g8Um91dGVPYmplY3RUeXBlPixcbiAgcGF0aG5hbWU6IHN0cmluZ1xuKTogQWdub3N0aWNSb3V0ZU1hdGNoPFBhcmFtS2V5LCBSb3V0ZU9iamVjdFR5cGU+W10gfCBudWxsIHtcbiAgbGV0IHsgcm91dGVzTWV0YSB9ID0gYnJhbmNoO1xuXG4gIGxldCBtYXRjaGVkUGFyYW1zID0ge307XG4gIGxldCBtYXRjaGVkUGF0aG5hbWUgPSBcIi9cIjtcbiAgbGV0IG1hdGNoZXM6IEFnbm9zdGljUm91dGVNYXRjaDxQYXJhbUtleSwgUm91dGVPYmplY3RUeXBlPltdID0gW107XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgcm91dGVzTWV0YS5sZW5ndGg7ICsraSkge1xuICAgIGxldCBtZXRhID0gcm91dGVzTWV0YVtpXTtcbiAgICBsZXQgZW5kID0gaSA9PT0gcm91dGVzTWV0YS5sZW5ndGggLSAxO1xuICAgIGxldCByZW1haW5pbmdQYXRobmFtZSA9XG4gICAgICBtYXRjaGVkUGF0aG5hbWUgPT09IFwiL1wiXG4gICAgICAgID8gcGF0aG5hbWVcbiAgICAgICAgOiBwYXRobmFtZS5zbGljZShtYXRjaGVkUGF0aG5hbWUubGVuZ3RoKSB8fCBcIi9cIjtcbiAgICBsZXQgbWF0Y2ggPSBtYXRjaFBhdGgoXG4gICAgICB7IHBhdGg6IG1ldGEucmVsYXRpdmVQYXRoLCBjYXNlU2Vuc2l0aXZlOiBtZXRhLmNhc2VTZW5zaXRpdmUsIGVuZCB9LFxuICAgICAgcmVtYWluaW5nUGF0aG5hbWVcbiAgICApO1xuXG4gICAgaWYgKCFtYXRjaCkgcmV0dXJuIG51bGw7XG5cbiAgICBPYmplY3QuYXNzaWduKG1hdGNoZWRQYXJhbXMsIG1hdGNoLnBhcmFtcyk7XG5cbiAgICBsZXQgcm91dGUgPSBtZXRhLnJvdXRlO1xuXG4gICAgbWF0Y2hlcy5wdXNoKHtcbiAgICAgIC8vIFRPRE86IENhbiB0aGlzIGFzIGJlIGF2b2lkZWQ/XG4gICAgICBwYXJhbXM6IG1hdGNoZWRQYXJhbXMgYXMgUGFyYW1zPFBhcmFtS2V5PixcbiAgICAgIHBhdGhuYW1lOiBqb2luUGF0aHMoW21hdGNoZWRQYXRobmFtZSwgbWF0Y2gucGF0aG5hbWVdKSxcbiAgICAgIHBhdGhuYW1lQmFzZTogbm9ybWFsaXplUGF0aG5hbWUoXG4gICAgICAgIGpvaW5QYXRocyhbbWF0Y2hlZFBhdGhuYW1lLCBtYXRjaC5wYXRobmFtZUJhc2VdKVxuICAgICAgKSxcbiAgICAgIHJvdXRlLFxuICAgIH0pO1xuXG4gICAgaWYgKG1hdGNoLnBhdGhuYW1lQmFzZSAhPT0gXCIvXCIpIHtcbiAgICAgIG1hdGNoZWRQYXRobmFtZSA9IGpvaW5QYXRocyhbbWF0Y2hlZFBhdGhuYW1lLCBtYXRjaC5wYXRobmFtZUJhc2VdKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gbWF0Y2hlcztcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgcGF0aCB3aXRoIHBhcmFtcyBpbnRlcnBvbGF0ZWQuXG4gKlxuICogQHNlZSBodHRwczovL3JlYWN0cm91dGVyLmNvbS91dGlscy9nZW5lcmF0ZS1wYXRoXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZW5lcmF0ZVBhdGg8UGF0aCBleHRlbmRzIHN0cmluZz4oXG4gIG9yaWdpbmFsUGF0aDogUGF0aCxcbiAgcGFyYW1zOiB7XG4gICAgW2tleSBpbiBQYXRoUGFyYW08UGF0aD5dOiBzdHJpbmcgfCBudWxsO1xuICB9ID0ge30gYXMgYW55XG4pOiBzdHJpbmcge1xuICBsZXQgcGF0aDogc3RyaW5nID0gb3JpZ2luYWxQYXRoO1xuICBpZiAocGF0aC5lbmRzV2l0aChcIipcIikgJiYgcGF0aCAhPT0gXCIqXCIgJiYgIXBhdGguZW5kc1dpdGgoXCIvKlwiKSkge1xuICAgIHdhcm5pbmcoXG4gICAgICBmYWxzZSxcbiAgICAgIGBSb3V0ZSBwYXRoIFwiJHtwYXRofVwiIHdpbGwgYmUgdHJlYXRlZCBhcyBpZiBpdCB3ZXJlIGAgK1xuICAgICAgICBgXCIke3BhdGgucmVwbGFjZSgvXFwqJC8sIFwiLypcIil9XCIgYmVjYXVzZSB0aGUgXFxgKlxcYCBjaGFyYWN0ZXIgbXVzdCBgICtcbiAgICAgICAgYGFsd2F5cyBmb2xsb3cgYSBcXGAvXFxgIGluIHRoZSBwYXR0ZXJuLiBUbyBnZXQgcmlkIG9mIHRoaXMgd2FybmluZywgYCArXG4gICAgICAgIGBwbGVhc2UgY2hhbmdlIHRoZSByb3V0ZSBwYXRoIHRvIFwiJHtwYXRoLnJlcGxhY2UoL1xcKiQvLCBcIi8qXCIpfVwiLmBcbiAgICApO1xuICAgIHBhdGggPSBwYXRoLnJlcGxhY2UoL1xcKiQvLCBcIi8qXCIpIGFzIFBhdGg7XG4gIH1cblxuICAvLyBlbnN1cmUgYC9gIGlzIGFkZGVkIGF0IHRoZSBiZWdpbm5pbmcgaWYgdGhlIHBhdGggaXMgYWJzb2x1dGVcbiAgY29uc3QgcHJlZml4ID0gcGF0aC5zdGFydHNXaXRoKFwiL1wiKSA/IFwiL1wiIDogXCJcIjtcblxuICBjb25zdCBzdHJpbmdpZnkgPSAocDogYW55KSA9PlxuICAgIHAgPT0gbnVsbCA/IFwiXCIgOiB0eXBlb2YgcCA9PT0gXCJzdHJpbmdcIiA/IHAgOiBTdHJpbmcocCk7XG5cbiAgY29uc3Qgc2VnbWVudHMgPSBwYXRoXG4gICAgLnNwbGl0KC9cXC8rLylcbiAgICAubWFwKChzZWdtZW50LCBpbmRleCwgYXJyYXkpID0+IHtcbiAgICAgIGNvbnN0IGlzTGFzdFNlZ21lbnQgPSBpbmRleCA9PT0gYXJyYXkubGVuZ3RoIC0gMTtcblxuICAgICAgLy8gb25seSBhcHBseSB0aGUgc3BsYXQgaWYgaXQncyB0aGUgbGFzdCBzZWdtZW50XG4gICAgICBpZiAoaXNMYXN0U2VnbWVudCAmJiBzZWdtZW50ID09PSBcIipcIikge1xuICAgICAgICBjb25zdCBzdGFyID0gXCIqXCIgYXMgUGF0aFBhcmFtPFBhdGg+O1xuICAgICAgICAvLyBBcHBseSB0aGUgc3BsYXRcbiAgICAgICAgcmV0dXJuIHN0cmluZ2lmeShwYXJhbXNbc3Rhcl0pO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBrZXlNYXRjaCA9IHNlZ21lbnQubWF0Y2goL146KFtcXHctXSspKFxcPz8pJC8pO1xuICAgICAgaWYgKGtleU1hdGNoKSB7XG4gICAgICAgIGNvbnN0IFssIGtleSwgb3B0aW9uYWxdID0ga2V5TWF0Y2g7XG4gICAgICAgIGxldCBwYXJhbSA9IHBhcmFtc1trZXkgYXMgUGF0aFBhcmFtPFBhdGg+XTtcbiAgICAgICAgaW52YXJpYW50KG9wdGlvbmFsID09PSBcIj9cIiB8fCBwYXJhbSAhPSBudWxsLCBgTWlzc2luZyBcIjoke2tleX1cIiBwYXJhbWApO1xuICAgICAgICByZXR1cm4gc3RyaW5naWZ5KHBhcmFtKTtcbiAgICAgIH1cblxuICAgICAgLy8gUmVtb3ZlIGFueSBvcHRpb25hbCBtYXJrZXJzIGZyb20gb3B0aW9uYWwgc3RhdGljIHNlZ21lbnRzXG4gICAgICByZXR1cm4gc2VnbWVudC5yZXBsYWNlKC9cXD8kL2csIFwiXCIpO1xuICAgIH0pXG4gICAgLy8gUmVtb3ZlIGVtcHR5IHNlZ21lbnRzXG4gICAgLmZpbHRlcigoc2VnbWVudCkgPT4gISFzZWdtZW50KTtcblxuICByZXR1cm4gcHJlZml4ICsgc2VnbWVudHMuam9pbihcIi9cIik7XG59XG5cbi8qKlxuICogQSBQYXRoUGF0dGVybiBpcyB1c2VkIHRvIG1hdGNoIG9uIHNvbWUgcG9ydGlvbiBvZiBhIFVSTCBwYXRobmFtZS5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBQYXRoUGF0dGVybjxQYXRoIGV4dGVuZHMgc3RyaW5nID0gc3RyaW5nPiB7XG4gIC8qKlxuICAgKiBBIHN0cmluZyB0byBtYXRjaCBhZ2FpbnN0IGEgVVJMIHBhdGhuYW1lLiBNYXkgY29udGFpbiBgOmlkYC1zdHlsZSBzZWdtZW50c1xuICAgKiB0byBpbmRpY2F0ZSBwbGFjZWhvbGRlcnMgZm9yIGR5bmFtaWMgcGFyYW1ldGVycy4gTWF5IGFsc28gZW5kIHdpdGggYC8qYCB0b1xuICAgKiBpbmRpY2F0ZSBtYXRjaGluZyB0aGUgcmVzdCBvZiB0aGUgVVJMIHBhdGhuYW1lLlxuICAgKi9cbiAgcGF0aDogUGF0aDtcbiAgLyoqXG4gICAqIFNob3VsZCBiZSBgdHJ1ZWAgaWYgdGhlIHN0YXRpYyBwb3J0aW9ucyBvZiB0aGUgYHBhdGhgIHNob3VsZCBiZSBtYXRjaGVkIGluXG4gICAqIHRoZSBzYW1lIGNhc2UuXG4gICAqL1xuICBjYXNlU2Vuc2l0aXZlPzogYm9vbGVhbjtcbiAgLyoqXG4gICAqIFNob3VsZCBiZSBgdHJ1ZWAgaWYgdGhpcyBwYXR0ZXJuIHNob3VsZCBtYXRjaCB0aGUgZW50aXJlIFVSTCBwYXRobmFtZS5cbiAgICovXG4gIGVuZD86IGJvb2xlYW47XG59XG5cbi8qKlxuICogQSBQYXRoTWF0Y2ggY29udGFpbnMgaW5mbyBhYm91dCBob3cgYSBQYXRoUGF0dGVybiBtYXRjaGVkIG9uIGEgVVJMIHBhdGhuYW1lLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIFBhdGhNYXRjaDxQYXJhbUtleSBleHRlbmRzIHN0cmluZyA9IHN0cmluZz4ge1xuICAvKipcbiAgICogVGhlIG5hbWVzIGFuZCB2YWx1ZXMgb2YgZHluYW1pYyBwYXJhbWV0ZXJzIGluIHRoZSBVUkwuXG4gICAqL1xuICBwYXJhbXM6IFBhcmFtczxQYXJhbUtleT47XG4gIC8qKlxuICAgKiBUaGUgcG9ydGlvbiBvZiB0aGUgVVJMIHBhdGhuYW1lIHRoYXQgd2FzIG1hdGNoZWQuXG4gICAqL1xuICBwYXRobmFtZTogc3RyaW5nO1xuICAvKipcbiAgICogVGhlIHBvcnRpb24gb2YgdGhlIFVSTCBwYXRobmFtZSB0aGF0IHdhcyBtYXRjaGVkIGJlZm9yZSBjaGlsZCByb3V0ZXMuXG4gICAqL1xuICBwYXRobmFtZUJhc2U6IHN0cmluZztcbiAgLyoqXG4gICAqIFRoZSBwYXR0ZXJuIHRoYXQgd2FzIHVzZWQgdG8gbWF0Y2guXG4gICAqL1xuICBwYXR0ZXJuOiBQYXRoUGF0dGVybjtcbn1cblxudHlwZSBNdXRhYmxlPFQ+ID0ge1xuICAtcmVhZG9ubHkgW1AgaW4ga2V5b2YgVF06IFRbUF07XG59O1xuXG4vKipcbiAqIFBlcmZvcm1zIHBhdHRlcm4gbWF0Y2hpbmcgb24gYSBVUkwgcGF0aG5hbWUgYW5kIHJldHVybnMgaW5mb3JtYXRpb24gYWJvdXRcbiAqIHRoZSBtYXRjaC5cbiAqXG4gKiBAc2VlIGh0dHBzOi8vcmVhY3Ryb3V0ZXIuY29tL3V0aWxzL21hdGNoLXBhdGhcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG1hdGNoUGF0aDxcbiAgUGFyYW1LZXkgZXh0ZW5kcyBQYXJhbVBhcnNlS2V5PFBhdGg+LFxuICBQYXRoIGV4dGVuZHMgc3RyaW5nXG4+KFxuICBwYXR0ZXJuOiBQYXRoUGF0dGVybjxQYXRoPiB8IFBhdGgsXG4gIHBhdGhuYW1lOiBzdHJpbmdcbik6IFBhdGhNYXRjaDxQYXJhbUtleT4gfCBudWxsIHtcbiAgaWYgKHR5cGVvZiBwYXR0ZXJuID09PSBcInN0cmluZ1wiKSB7XG4gICAgcGF0dGVybiA9IHsgcGF0aDogcGF0dGVybiwgY2FzZVNlbnNpdGl2ZTogZmFsc2UsIGVuZDogdHJ1ZSB9O1xuICB9XG5cbiAgbGV0IFttYXRjaGVyLCBjb21waWxlZFBhcmFtc10gPSBjb21waWxlUGF0aChcbiAgICBwYXR0ZXJuLnBhdGgsXG4gICAgcGF0dGVybi5jYXNlU2Vuc2l0aXZlLFxuICAgIHBhdHRlcm4uZW5kXG4gICk7XG5cbiAgbGV0IG1hdGNoID0gcGF0aG5hbWUubWF0Y2gobWF0Y2hlcik7XG4gIGlmICghbWF0Y2gpIHJldHVybiBudWxsO1xuXG4gIGxldCBtYXRjaGVkUGF0aG5hbWUgPSBtYXRjaFswXTtcbiAgbGV0IHBhdGhuYW1lQmFzZSA9IG1hdGNoZWRQYXRobmFtZS5yZXBsYWNlKC8oLilcXC8rJC8sIFwiJDFcIik7XG4gIGxldCBjYXB0dXJlR3JvdXBzID0gbWF0Y2guc2xpY2UoMSk7XG4gIGxldCBwYXJhbXM6IFBhcmFtcyA9IGNvbXBpbGVkUGFyYW1zLnJlZHVjZTxNdXRhYmxlPFBhcmFtcz4+KFxuICAgIChtZW1vLCB7IHBhcmFtTmFtZSwgaXNPcHRpb25hbCB9LCBpbmRleCkgPT4ge1xuICAgICAgLy8gV2UgbmVlZCB0byBjb21wdXRlIHRoZSBwYXRobmFtZUJhc2UgaGVyZSB1c2luZyB0aGUgcmF3IHNwbGF0IHZhbHVlXG4gICAgICAvLyBpbnN0ZWFkIG9mIHVzaW5nIHBhcmFtc1tcIipcIl0gbGF0ZXIgYmVjYXVzZSBpdCB3aWxsIGJlIGRlY29kZWQgdGhlblxuICAgICAgaWYgKHBhcmFtTmFtZSA9PT0gXCIqXCIpIHtcbiAgICAgICAgbGV0IHNwbGF0VmFsdWUgPSBjYXB0dXJlR3JvdXBzW2luZGV4XSB8fCBcIlwiO1xuICAgICAgICBwYXRobmFtZUJhc2UgPSBtYXRjaGVkUGF0aG5hbWVcbiAgICAgICAgICAuc2xpY2UoMCwgbWF0Y2hlZFBhdGhuYW1lLmxlbmd0aCAtIHNwbGF0VmFsdWUubGVuZ3RoKVxuICAgICAgICAgIC5yZXBsYWNlKC8oLilcXC8rJC8sIFwiJDFcIik7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IHZhbHVlID0gY2FwdHVyZUdyb3Vwc1tpbmRleF07XG4gICAgICBpZiAoaXNPcHRpb25hbCAmJiAhdmFsdWUpIHtcbiAgICAgICAgbWVtb1twYXJhbU5hbWVdID0gdW5kZWZpbmVkO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbWVtb1twYXJhbU5hbWVdID0gKHZhbHVlIHx8IFwiXCIpLnJlcGxhY2UoLyUyRi9nLCBcIi9cIik7XG4gICAgICB9XG4gICAgICByZXR1cm4gbWVtbztcbiAgICB9LFxuICAgIHt9XG4gICk7XG5cbiAgcmV0dXJuIHtcbiAgICBwYXJhbXMsXG4gICAgcGF0aG5hbWU6IG1hdGNoZWRQYXRobmFtZSxcbiAgICBwYXRobmFtZUJhc2UsXG4gICAgcGF0dGVybixcbiAgfTtcbn1cblxudHlwZSBDb21waWxlZFBhdGhQYXJhbSA9IHsgcGFyYW1OYW1lOiBzdHJpbmc7IGlzT3B0aW9uYWw/OiBib29sZWFuIH07XG5cbmZ1bmN0aW9uIGNvbXBpbGVQYXRoKFxuICBwYXRoOiBzdHJpbmcsXG4gIGNhc2VTZW5zaXRpdmUgPSBmYWxzZSxcbiAgZW5kID0gdHJ1ZVxuKTogW1JlZ0V4cCwgQ29tcGlsZWRQYXRoUGFyYW1bXV0ge1xuICB3YXJuaW5nKFxuICAgIHBhdGggPT09IFwiKlwiIHx8ICFwYXRoLmVuZHNXaXRoKFwiKlwiKSB8fCBwYXRoLmVuZHNXaXRoKFwiLypcIiksXG4gICAgYFJvdXRlIHBhdGggXCIke3BhdGh9XCIgd2lsbCBiZSB0cmVhdGVkIGFzIGlmIGl0IHdlcmUgYCArXG4gICAgICBgXCIke3BhdGgucmVwbGFjZSgvXFwqJC8sIFwiLypcIil9XCIgYmVjYXVzZSB0aGUgXFxgKlxcYCBjaGFyYWN0ZXIgbXVzdCBgICtcbiAgICAgIGBhbHdheXMgZm9sbG93IGEgXFxgL1xcYCBpbiB0aGUgcGF0dGVybi4gVG8gZ2V0IHJpZCBvZiB0aGlzIHdhcm5pbmcsIGAgK1xuICAgICAgYHBsZWFzZSBjaGFuZ2UgdGhlIHJvdXRlIHBhdGggdG8gXCIke3BhdGgucmVwbGFjZSgvXFwqJC8sIFwiLypcIil9XCIuYFxuICApO1xuXG4gIGxldCBwYXJhbXM6IENvbXBpbGVkUGF0aFBhcmFtW10gPSBbXTtcbiAgbGV0IHJlZ2V4cFNvdXJjZSA9XG4gICAgXCJeXCIgK1xuICAgIHBhdGhcbiAgICAgIC5yZXBsYWNlKC9cXC8qXFwqPyQvLCBcIlwiKSAvLyBJZ25vcmUgdHJhaWxpbmcgLyBhbmQgLyosIHdlJ2xsIGhhbmRsZSBpdCBiZWxvd1xuICAgICAgLnJlcGxhY2UoL15cXC8qLywgXCIvXCIpIC8vIE1ha2Ugc3VyZSBpdCBoYXMgYSBsZWFkaW5nIC9cbiAgICAgIC5yZXBsYWNlKC9bXFxcXC4qK14ke318KClbXFxdXS9nLCBcIlxcXFwkJlwiKSAvLyBFc2NhcGUgc3BlY2lhbCByZWdleCBjaGFyc1xuICAgICAgLnJlcGxhY2UoXG4gICAgICAgIC9cXC86KFtcXHctXSspKFxcPyk/L2csXG4gICAgICAgIChfOiBzdHJpbmcsIHBhcmFtTmFtZTogc3RyaW5nLCBpc09wdGlvbmFsKSA9PiB7XG4gICAgICAgICAgcGFyYW1zLnB1c2goeyBwYXJhbU5hbWUsIGlzT3B0aW9uYWw6IGlzT3B0aW9uYWwgIT0gbnVsbCB9KTtcbiAgICAgICAgICByZXR1cm4gaXNPcHRpb25hbCA/IFwiLz8oW15cXFxcL10rKT9cIiA6IFwiLyhbXlxcXFwvXSspXCI7XG4gICAgICAgIH1cbiAgICAgICk7XG5cbiAgaWYgKHBhdGguZW5kc1dpdGgoXCIqXCIpKSB7XG4gICAgcGFyYW1zLnB1c2goeyBwYXJhbU5hbWU6IFwiKlwiIH0pO1xuICAgIHJlZ2V4cFNvdXJjZSArPVxuICAgICAgcGF0aCA9PT0gXCIqXCIgfHwgcGF0aCA9PT0gXCIvKlwiXG4gICAgICAgID8gXCIoLiopJFwiIC8vIEFscmVhZHkgbWF0Y2hlZCB0aGUgaW5pdGlhbCAvLCBqdXN0IG1hdGNoIHRoZSByZXN0XG4gICAgICAgIDogXCIoPzpcXFxcLyguKyl8XFxcXC8qKSRcIjsgLy8gRG9uJ3QgaW5jbHVkZSB0aGUgLyBpbiBwYXJhbXNbXCIqXCJdXG4gIH0gZWxzZSBpZiAoZW5kKSB7XG4gICAgLy8gV2hlbiBtYXRjaGluZyB0byB0aGUgZW5kLCBpZ25vcmUgdHJhaWxpbmcgc2xhc2hlc1xuICAgIHJlZ2V4cFNvdXJjZSArPSBcIlxcXFwvKiRcIjtcbiAgfSBlbHNlIGlmIChwYXRoICE9PSBcIlwiICYmIHBhdGggIT09IFwiL1wiKSB7XG4gICAgLy8gSWYgb3VyIHBhdGggaXMgbm9uLWVtcHR5IGFuZCBjb250YWlucyBhbnl0aGluZyBiZXlvbmQgYW4gaW5pdGlhbCBzbGFzaCxcbiAgICAvLyB0aGVuIHdlIGhhdmUgX3NvbWVfIGZvcm0gb2YgcGF0aCBpbiBvdXIgcmVnZXgsIHNvIHdlIHNob3VsZCBleHBlY3QgdG9cbiAgICAvLyBtYXRjaCBvbmx5IGlmIHdlIGZpbmQgdGhlIGVuZCBvZiB0aGlzIHBhdGggc2VnbWVudC4gIExvb2sgZm9yIGFuIG9wdGlvbmFsXG4gICAgLy8gbm9uLWNhcHR1cmVkIHRyYWlsaW5nIHNsYXNoICh0byBtYXRjaCBhIHBvcnRpb24gb2YgdGhlIFVSTCkgb3IgdGhlIGVuZFxuICAgIC8vIG9mIHRoZSBwYXRoIChpZiB3ZSd2ZSBtYXRjaGVkIHRvIHRoZSBlbmQpLiAgV2UgdXNlZCB0byBkbyB0aGlzIHdpdGggYVxuICAgIC8vIHdvcmQgYm91bmRhcnkgYnV0IHRoYXQgZ2l2ZXMgZmFsc2UgcG9zaXRpdmVzIG9uIHJvdXRlcyBsaWtlXG4gICAgLy8gL3VzZXItcHJlZmVyZW5jZXMgc2luY2UgYC1gIGNvdW50cyBhcyBhIHdvcmQgYm91bmRhcnkuXG4gICAgcmVnZXhwU291cmNlICs9IFwiKD86KD89XFxcXC98JCkpXCI7XG4gIH0gZWxzZSB7XG4gICAgLy8gTm90aGluZyB0byBtYXRjaCBmb3IgXCJcIiBvciBcIi9cIlxuICB9XG5cbiAgbGV0IG1hdGNoZXIgPSBuZXcgUmVnRXhwKHJlZ2V4cFNvdXJjZSwgY2FzZVNlbnNpdGl2ZSA/IHVuZGVmaW5lZCA6IFwiaVwiKTtcblxuICByZXR1cm4gW21hdGNoZXIsIHBhcmFtc107XG59XG5cbmZ1bmN0aW9uIGRlY29kZVBhdGgodmFsdWU6IHN0cmluZykge1xuICB0cnkge1xuICAgIHJldHVybiB2YWx1ZVxuICAgICAgLnNwbGl0KFwiL1wiKVxuICAgICAgLm1hcCgodikgPT4gZGVjb2RlVVJJQ29tcG9uZW50KHYpLnJlcGxhY2UoL1xcLy9nLCBcIiUyRlwiKSlcbiAgICAgIC5qb2luKFwiL1wiKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICB3YXJuaW5nKFxuICAgICAgZmFsc2UsXG4gICAgICBgVGhlIFVSTCBwYXRoIFwiJHt2YWx1ZX1cIiBjb3VsZCBub3QgYmUgZGVjb2RlZCBiZWNhdXNlIGl0IGlzIGlzIGEgYCArXG4gICAgICAgIGBtYWxmb3JtZWQgVVJMIHNlZ21lbnQuIFRoaXMgaXMgcHJvYmFibHkgZHVlIHRvIGEgYmFkIHBlcmNlbnQgYCArXG4gICAgICAgIGBlbmNvZGluZyAoJHtlcnJvcn0pLmBcbiAgICApO1xuXG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG59XG5cbi8qKlxuICogQHByaXZhdGVcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHN0cmlwQmFzZW5hbWUoXG4gIHBhdGhuYW1lOiBzdHJpbmcsXG4gIGJhc2VuYW1lOiBzdHJpbmdcbik6IHN0cmluZyB8IG51bGwge1xuICBpZiAoYmFzZW5hbWUgPT09IFwiL1wiKSByZXR1cm4gcGF0aG5hbWU7XG5cbiAgaWYgKCFwYXRobmFtZS50b0xvd2VyQ2FzZSgpLnN0YXJ0c1dpdGgoYmFzZW5hbWUudG9Mb3dlckNhc2UoKSkpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIC8vIFdlIHdhbnQgdG8gbGVhdmUgdHJhaWxpbmcgc2xhc2ggYmVoYXZpb3IgaW4gdGhlIHVzZXIncyBjb250cm9sLCBzbyBpZiB0aGV5XG4gIC8vIHNwZWNpZnkgYSBiYXNlbmFtZSB3aXRoIGEgdHJhaWxpbmcgc2xhc2gsIHdlIHNob3VsZCBzdXBwb3J0IGl0XG4gIGxldCBzdGFydEluZGV4ID0gYmFzZW5hbWUuZW5kc1dpdGgoXCIvXCIpXG4gICAgPyBiYXNlbmFtZS5sZW5ndGggLSAxXG4gICAgOiBiYXNlbmFtZS5sZW5ndGg7XG4gIGxldCBuZXh0Q2hhciA9IHBhdGhuYW1lLmNoYXJBdChzdGFydEluZGV4KTtcbiAgaWYgKG5leHRDaGFyICYmIG5leHRDaGFyICE9PSBcIi9cIikge1xuICAgIC8vIHBhdGhuYW1lIGRvZXMgbm90IHN0YXJ0IHdpdGggYmFzZW5hbWUvXG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICByZXR1cm4gcGF0aG5hbWUuc2xpY2Uoc3RhcnRJbmRleCkgfHwgXCIvXCI7XG59XG5cbi8qKlxuICogUmV0dXJucyBhIHJlc29sdmVkIHBhdGggb2JqZWN0IHJlbGF0aXZlIHRvIHRoZSBnaXZlbiBwYXRobmFtZS5cbiAqXG4gKiBAc2VlIGh0dHBzOi8vcmVhY3Ryb3V0ZXIuY29tL3V0aWxzL3Jlc29sdmUtcGF0aFxuICovXG5leHBvcnQgZnVuY3Rpb24gcmVzb2x2ZVBhdGgodG86IFRvLCBmcm9tUGF0aG5hbWUgPSBcIi9cIik6IFBhdGgge1xuICBsZXQge1xuICAgIHBhdGhuYW1lOiB0b1BhdGhuYW1lLFxuICAgIHNlYXJjaCA9IFwiXCIsXG4gICAgaGFzaCA9IFwiXCIsXG4gIH0gPSB0eXBlb2YgdG8gPT09IFwic3RyaW5nXCIgPyBwYXJzZVBhdGgodG8pIDogdG87XG5cbiAgbGV0IHBhdGhuYW1lID0gdG9QYXRobmFtZVxuICAgID8gdG9QYXRobmFtZS5zdGFydHNXaXRoKFwiL1wiKVxuICAgICAgPyB0b1BhdGhuYW1lXG4gICAgICA6IHJlc29sdmVQYXRobmFtZSh0b1BhdGhuYW1lLCBmcm9tUGF0aG5hbWUpXG4gICAgOiBmcm9tUGF0aG5hbWU7XG5cbiAgcmV0dXJuIHtcbiAgICBwYXRobmFtZSxcbiAgICBzZWFyY2g6IG5vcm1hbGl6ZVNlYXJjaChzZWFyY2gpLFxuICAgIGhhc2g6IG5vcm1hbGl6ZUhhc2goaGFzaCksXG4gIH07XG59XG5cbmZ1bmN0aW9uIHJlc29sdmVQYXRobmFtZShyZWxhdGl2ZVBhdGg6IHN0cmluZywgZnJvbVBhdGhuYW1lOiBzdHJpbmcpOiBzdHJpbmcge1xuICBsZXQgc2VnbWVudHMgPSBmcm9tUGF0aG5hbWUucmVwbGFjZSgvXFwvKyQvLCBcIlwiKS5zcGxpdChcIi9cIik7XG4gIGxldCByZWxhdGl2ZVNlZ21lbnRzID0gcmVsYXRpdmVQYXRoLnNwbGl0KFwiL1wiKTtcblxuICByZWxhdGl2ZVNlZ21lbnRzLmZvckVhY2goKHNlZ21lbnQpID0+IHtcbiAgICBpZiAoc2VnbWVudCA9PT0gXCIuLlwiKSB7XG4gICAgICAvLyBLZWVwIHRoZSByb290IFwiXCIgc2VnbWVudCBzbyB0aGUgcGF0aG5hbWUgc3RhcnRzIGF0IC9cbiAgICAgIGlmIChzZWdtZW50cy5sZW5ndGggPiAxKSBzZWdtZW50cy5wb3AoKTtcbiAgICB9IGVsc2UgaWYgKHNlZ21lbnQgIT09IFwiLlwiKSB7XG4gICAgICBzZWdtZW50cy5wdXNoKHNlZ21lbnQpO1xuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuIHNlZ21lbnRzLmxlbmd0aCA+IDEgPyBzZWdtZW50cy5qb2luKFwiL1wiKSA6IFwiL1wiO1xufVxuXG5mdW5jdGlvbiBnZXRJbnZhbGlkUGF0aEVycm9yKFxuICBjaGFyOiBzdHJpbmcsXG4gIGZpZWxkOiBzdHJpbmcsXG4gIGRlc3Q6IHN0cmluZyxcbiAgcGF0aDogUGFydGlhbDxQYXRoPlxuKSB7XG4gIHJldHVybiAoXG4gICAgYENhbm5vdCBpbmNsdWRlIGEgJyR7Y2hhcn0nIGNoYXJhY3RlciBpbiBhIG1hbnVhbGx5IHNwZWNpZmllZCBgICtcbiAgICBgXFxgdG8uJHtmaWVsZH1cXGAgZmllbGQgWyR7SlNPTi5zdHJpbmdpZnkoXG4gICAgICBwYXRoXG4gICAgKX1dLiAgUGxlYXNlIHNlcGFyYXRlIGl0IG91dCB0byB0aGUgYCArXG4gICAgYFxcYHRvLiR7ZGVzdH1cXGAgZmllbGQuIEFsdGVybmF0aXZlbHkgeW91IG1heSBwcm92aWRlIHRoZSBmdWxsIHBhdGggYXMgYCArXG4gICAgYGEgc3RyaW5nIGluIDxMaW5rIHRvPVwiLi4uXCI+IGFuZCB0aGUgcm91dGVyIHdpbGwgcGFyc2UgaXQgZm9yIHlvdS5gXG4gICk7XG59XG5cbi8qKlxuICogQHByaXZhdGVcbiAqXG4gKiBXaGVuIHByb2Nlc3NpbmcgcmVsYXRpdmUgbmF2aWdhdGlvbiB3ZSB3YW50IHRvIGlnbm9yZSBhbmNlc3RvciByb3V0ZXMgdGhhdFxuICogZG8gbm90IGNvbnRyaWJ1dGUgdG8gdGhlIHBhdGgsIHN1Y2ggdGhhdCBpbmRleC9wYXRobGVzcyBsYXlvdXQgcm91dGVzIGRvbid0XG4gKiBpbnRlcmZlcmUuXG4gKlxuICogRm9yIGV4YW1wbGUsIHdoZW4gbW92aW5nIGEgcm91dGUgZWxlbWVudCBpbnRvIGFuIGluZGV4IHJvdXRlIGFuZC9vciBhXG4gKiBwYXRobGVzcyBsYXlvdXQgcm91dGUsIHJlbGF0aXZlIGxpbmsgYmVoYXZpb3IgY29udGFpbmVkIHdpdGhpbiBzaG91bGQgc3RheVxuICogdGhlIHNhbWUuICBCb3RoIG9mIHRoZSBmb2xsb3dpbmcgZXhhbXBsZXMgc2hvdWxkIGxpbmsgYmFjayB0byB0aGUgcm9vdDpcbiAqXG4gKiAgIDxSb3V0ZSBwYXRoPVwiL1wiPlxuICogICAgIDxSb3V0ZSBwYXRoPVwiYWNjb3VudHNcIiBlbGVtZW50PXs8TGluayB0bz1cIi4uXCJ9PlxuICogICA8L1JvdXRlPlxuICpcbiAqICAgPFJvdXRlIHBhdGg9XCIvXCI+XG4gKiAgICAgPFJvdXRlIHBhdGg9XCJhY2NvdW50c1wiPlxuICogICAgICAgPFJvdXRlIGVsZW1lbnQ9ezxBY2NvdW50c0xheW91dCAvPn0+ICAgICAgIC8vIDwtLSBEb2VzIG5vdCBjb250cmlidXRlXG4gKiAgICAgICAgIDxSb3V0ZSBpbmRleCBlbGVtZW50PXs8TGluayB0bz1cIi4uXCJ9IC8+ICAvLyA8LS0gRG9lcyBub3QgY29udHJpYnV0ZVxuICogICAgICAgPC9Sb3V0ZVxuICogICAgIDwvUm91dGU+XG4gKiAgIDwvUm91dGU+XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRQYXRoQ29udHJpYnV0aW5nTWF0Y2hlczxcbiAgVCBleHRlbmRzIEFnbm9zdGljUm91dGVNYXRjaCA9IEFnbm9zdGljUm91dGVNYXRjaFxuPihtYXRjaGVzOiBUW10pIHtcbiAgcmV0dXJuIG1hdGNoZXMuZmlsdGVyKFxuICAgIChtYXRjaCwgaW5kZXgpID0+XG4gICAgICBpbmRleCA9PT0gMCB8fCAobWF0Y2gucm91dGUucGF0aCAmJiBtYXRjaC5yb3V0ZS5wYXRoLmxlbmd0aCA+IDApXG4gICk7XG59XG5cbi8vIFJldHVybiB0aGUgYXJyYXkgb2YgcGF0aG5hbWVzIGZvciB0aGUgY3VycmVudCByb3V0ZSBtYXRjaGVzIC0gdXNlZCB0b1xuLy8gZ2VuZXJhdGUgdGhlIHJvdXRlUGF0aG5hbWVzIGlucHV0IGZvciByZXNvbHZlVG8oKVxuZXhwb3J0IGZ1bmN0aW9uIGdldFJlc29sdmVUb01hdGNoZXM8XG4gIFQgZXh0ZW5kcyBBZ25vc3RpY1JvdXRlTWF0Y2ggPSBBZ25vc3RpY1JvdXRlTWF0Y2hcbj4obWF0Y2hlczogVFtdLCB2N19yZWxhdGl2ZVNwbGF0UGF0aDogYm9vbGVhbikge1xuICBsZXQgcGF0aE1hdGNoZXMgPSBnZXRQYXRoQ29udHJpYnV0aW5nTWF0Y2hlcyhtYXRjaGVzKTtcblxuICAvLyBXaGVuIHY3X3JlbGF0aXZlU3BsYXRQYXRoIGlzIGVuYWJsZWQsIHVzZSB0aGUgZnVsbCBwYXRobmFtZSBmb3IgdGhlIGxlYWZcbiAgLy8gbWF0Y2ggc28gd2UgaW5jbHVkZSBzcGxhdCB2YWx1ZXMgZm9yIFwiLlwiIGxpbmtzLiAgU2VlOlxuICAvLyBodHRwczovL2dpdGh1Yi5jb20vcmVtaXgtcnVuL3JlYWN0LXJvdXRlci9pc3N1ZXMvMTEwNTIjaXNzdWVjb21tZW50LTE4MzY1ODkzMjlcbiAgaWYgKHY3X3JlbGF0aXZlU3BsYXRQYXRoKSB7XG4gICAgcmV0dXJuIHBhdGhNYXRjaGVzLm1hcCgobWF0Y2gsIGlkeCkgPT5cbiAgICAgIGlkeCA9PT0gbWF0Y2hlcy5sZW5ndGggLSAxID8gbWF0Y2gucGF0aG5hbWUgOiBtYXRjaC5wYXRobmFtZUJhc2VcbiAgICApO1xuICB9XG5cbiAgcmV0dXJuIHBhdGhNYXRjaGVzLm1hcCgobWF0Y2gpID0+IG1hdGNoLnBhdGhuYW1lQmFzZSk7XG59XG5cbi8qKlxuICogQHByaXZhdGVcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJlc29sdmVUbyhcbiAgdG9Bcmc6IFRvLFxuICByb3V0ZVBhdGhuYW1lczogc3RyaW5nW10sXG4gIGxvY2F0aW9uUGF0aG5hbWU6IHN0cmluZyxcbiAgaXNQYXRoUmVsYXRpdmUgPSBmYWxzZVxuKTogUGF0aCB7XG4gIGxldCB0bzogUGFydGlhbDxQYXRoPjtcbiAgaWYgKHR5cGVvZiB0b0FyZyA9PT0gXCJzdHJpbmdcIikge1xuICAgIHRvID0gcGFyc2VQYXRoKHRvQXJnKTtcbiAgfSBlbHNlIHtcbiAgICB0byA9IHsgLi4udG9BcmcgfTtcblxuICAgIGludmFyaWFudChcbiAgICAgICF0by5wYXRobmFtZSB8fCAhdG8ucGF0aG5hbWUuaW5jbHVkZXMoXCI/XCIpLFxuICAgICAgZ2V0SW52YWxpZFBhdGhFcnJvcihcIj9cIiwgXCJwYXRobmFtZVwiLCBcInNlYXJjaFwiLCB0bylcbiAgICApO1xuICAgIGludmFyaWFudChcbiAgICAgICF0by5wYXRobmFtZSB8fCAhdG8ucGF0aG5hbWUuaW5jbHVkZXMoXCIjXCIpLFxuICAgICAgZ2V0SW52YWxpZFBhdGhFcnJvcihcIiNcIiwgXCJwYXRobmFtZVwiLCBcImhhc2hcIiwgdG8pXG4gICAgKTtcbiAgICBpbnZhcmlhbnQoXG4gICAgICAhdG8uc2VhcmNoIHx8ICF0by5zZWFyY2guaW5jbHVkZXMoXCIjXCIpLFxuICAgICAgZ2V0SW52YWxpZFBhdGhFcnJvcihcIiNcIiwgXCJzZWFyY2hcIiwgXCJoYXNoXCIsIHRvKVxuICAgICk7XG4gIH1cblxuICBsZXQgaXNFbXB0eVBhdGggPSB0b0FyZyA9PT0gXCJcIiB8fCB0by5wYXRobmFtZSA9PT0gXCJcIjtcbiAgbGV0IHRvUGF0aG5hbWUgPSBpc0VtcHR5UGF0aCA/IFwiL1wiIDogdG8ucGF0aG5hbWU7XG5cbiAgbGV0IGZyb206IHN0cmluZztcblxuICAvLyBSb3V0aW5nIGlzIHJlbGF0aXZlIHRvIHRoZSBjdXJyZW50IHBhdGhuYW1lIGlmIGV4cGxpY2l0bHkgcmVxdWVzdGVkLlxuICAvL1xuICAvLyBJZiBhIHBhdGhuYW1lIGlzIGV4cGxpY2l0bHkgcHJvdmlkZWQgaW4gYHRvYCwgaXQgc2hvdWxkIGJlIHJlbGF0aXZlIHRvIHRoZVxuICAvLyByb3V0ZSBjb250ZXh0LiBUaGlzIGlzIGV4cGxhaW5lZCBpbiBgTm90ZSBvbiBgPExpbmsgdG8+YCB2YWx1ZXNgIGluIG91clxuICAvLyBtaWdyYXRpb24gZ3VpZGUgZnJvbSB2NSBhcyBhIG1lYW5zIG9mIGRpc2FtYmlndWF0aW9uIGJldHdlZW4gYHRvYCB2YWx1ZXNcbiAgLy8gdGhhdCBiZWdpbiB3aXRoIGAvYCBhbmQgdGhvc2UgdGhhdCBkbyBub3QuIEhvd2V2ZXIsIHRoaXMgaXMgcHJvYmxlbWF0aWMgZm9yXG4gIC8vIGB0b2AgdmFsdWVzIHRoYXQgZG8gbm90IHByb3ZpZGUgYSBwYXRobmFtZS4gYHRvYCBjYW4gc2ltcGx5IGJlIGEgc2VhcmNoIG9yXG4gIC8vIGhhc2ggc3RyaW5nLCBpbiB3aGljaCBjYXNlIHdlIHNob3VsZCBhc3N1bWUgdGhhdCB0aGUgbmF2aWdhdGlvbiBpcyByZWxhdGl2ZVxuICAvLyB0byB0aGUgY3VycmVudCBsb2NhdGlvbidzIHBhdGhuYW1lIGFuZCAqbm90KiB0aGUgcm91dGUgcGF0aG5hbWUuXG4gIGlmICh0b1BhdGhuYW1lID09IG51bGwpIHtcbiAgICBmcm9tID0gbG9jYXRpb25QYXRobmFtZTtcbiAgfSBlbHNlIHtcbiAgICBsZXQgcm91dGVQYXRobmFtZUluZGV4ID0gcm91dGVQYXRobmFtZXMubGVuZ3RoIC0gMTtcblxuICAgIC8vIFdpdGggcmVsYXRpdmU9XCJyb3V0ZVwiICh0aGUgZGVmYXVsdCksIGVhY2ggbGVhZGluZyAuLiBzZWdtZW50IG1lYW5zXG4gICAgLy8gXCJnbyB1cCBvbmUgcm91dGVcIiBpbnN0ZWFkIG9mIFwiZ28gdXAgb25lIFVSTCBzZWdtZW50XCIuICBUaGlzIGlzIGEga2V5XG4gICAgLy8gZGlmZmVyZW5jZSBmcm9tIGhvdyA8YSBocmVmPiB3b3JrcyBhbmQgYSBtYWpvciByZWFzb24gd2UgY2FsbCB0aGlzIGFcbiAgICAvLyBcInRvXCIgdmFsdWUgaW5zdGVhZCBvZiBhIFwiaHJlZlwiLlxuICAgIGlmICghaXNQYXRoUmVsYXRpdmUgJiYgdG9QYXRobmFtZS5zdGFydHNXaXRoKFwiLi5cIikpIHtcbiAgICAgIGxldCB0b1NlZ21lbnRzID0gdG9QYXRobmFtZS5zcGxpdChcIi9cIik7XG5cbiAgICAgIHdoaWxlICh0b1NlZ21lbnRzWzBdID09PSBcIi4uXCIpIHtcbiAgICAgICAgdG9TZWdtZW50cy5zaGlmdCgpO1xuICAgICAgICByb3V0ZVBhdGhuYW1lSW5kZXggLT0gMTtcbiAgICAgIH1cblxuICAgICAgdG8ucGF0aG5hbWUgPSB0b1NlZ21lbnRzLmpvaW4oXCIvXCIpO1xuICAgIH1cblxuICAgIGZyb20gPSByb3V0ZVBhdGhuYW1lSW5kZXggPj0gMCA/IHJvdXRlUGF0aG5hbWVzW3JvdXRlUGF0aG5hbWVJbmRleF0gOiBcIi9cIjtcbiAgfVxuXG4gIGxldCBwYXRoID0gcmVzb2x2ZVBhdGgodG8sIGZyb20pO1xuXG4gIC8vIEVuc3VyZSB0aGUgcGF0aG5hbWUgaGFzIGEgdHJhaWxpbmcgc2xhc2ggaWYgdGhlIG9yaWdpbmFsIFwidG9cIiBoYWQgb25lXG4gIGxldCBoYXNFeHBsaWNpdFRyYWlsaW5nU2xhc2ggPVxuICAgIHRvUGF0aG5hbWUgJiYgdG9QYXRobmFtZSAhPT0gXCIvXCIgJiYgdG9QYXRobmFtZS5lbmRzV2l0aChcIi9cIik7XG4gIC8vIE9yIGlmIHRoaXMgd2FzIGEgbGluayB0byB0aGUgY3VycmVudCBwYXRoIHdoaWNoIGhhcyBhIHRyYWlsaW5nIHNsYXNoXG4gIGxldCBoYXNDdXJyZW50VHJhaWxpbmdTbGFzaCA9XG4gICAgKGlzRW1wdHlQYXRoIHx8IHRvUGF0aG5hbWUgPT09IFwiLlwiKSAmJiBsb2NhdGlvblBhdGhuYW1lLmVuZHNXaXRoKFwiL1wiKTtcbiAgaWYgKFxuICAgICFwYXRoLnBhdGhuYW1lLmVuZHNXaXRoKFwiL1wiKSAmJlxuICAgIChoYXNFeHBsaWNpdFRyYWlsaW5nU2xhc2ggfHwgaGFzQ3VycmVudFRyYWlsaW5nU2xhc2gpXG4gICkge1xuICAgIHBhdGgucGF0aG5hbWUgKz0gXCIvXCI7XG4gIH1cblxuICByZXR1cm4gcGF0aDtcbn1cblxuLyoqXG4gKiBAcHJpdmF0ZVxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0VG9QYXRobmFtZSh0bzogVG8pOiBzdHJpbmcgfCB1bmRlZmluZWQge1xuICAvLyBFbXB0eSBzdHJpbmdzIHNob3VsZCBiZSB0cmVhdGVkIHRoZSBzYW1lIGFzIC8gcGF0aHNcbiAgcmV0dXJuIHRvID09PSBcIlwiIHx8ICh0byBhcyBQYXRoKS5wYXRobmFtZSA9PT0gXCJcIlxuICAgID8gXCIvXCJcbiAgICA6IHR5cGVvZiB0byA9PT0gXCJzdHJpbmdcIlxuICAgID8gcGFyc2VQYXRoKHRvKS5wYXRobmFtZVxuICAgIDogdG8ucGF0aG5hbWU7XG59XG5cbi8qKlxuICogQHByaXZhdGVcbiAqL1xuZXhwb3J0IGNvbnN0IGpvaW5QYXRocyA9IChwYXRoczogc3RyaW5nW10pOiBzdHJpbmcgPT5cbiAgcGF0aHMuam9pbihcIi9cIikucmVwbGFjZSgvXFwvXFwvKy9nLCBcIi9cIik7XG5cbi8qKlxuICogQHByaXZhdGVcbiAqL1xuZXhwb3J0IGNvbnN0IG5vcm1hbGl6ZVBhdGhuYW1lID0gKHBhdGhuYW1lOiBzdHJpbmcpOiBzdHJpbmcgPT5cbiAgcGF0aG5hbWUucmVwbGFjZSgvXFwvKyQvLCBcIlwiKS5yZXBsYWNlKC9eXFwvKi8sIFwiL1wiKTtcblxuLyoqXG4gKiBAcHJpdmF0ZVxuICovXG5leHBvcnQgY29uc3Qgbm9ybWFsaXplU2VhcmNoID0gKHNlYXJjaDogc3RyaW5nKTogc3RyaW5nID0+XG4gICFzZWFyY2ggfHwgc2VhcmNoID09PSBcIj9cIlxuICAgID8gXCJcIlxuICAgIDogc2VhcmNoLnN0YXJ0c1dpdGgoXCI/XCIpXG4gICAgPyBzZWFyY2hcbiAgICA6IFwiP1wiICsgc2VhcmNoO1xuXG4vKipcbiAqIEBwcml2YXRlXG4gKi9cbmV4cG9ydCBjb25zdCBub3JtYWxpemVIYXNoID0gKGhhc2g6IHN0cmluZyk6IHN0cmluZyA9PlxuICAhaGFzaCB8fCBoYXNoID09PSBcIiNcIiA/IFwiXCIgOiBoYXNoLnN0YXJ0c1dpdGgoXCIjXCIpID8gaGFzaCA6IFwiI1wiICsgaGFzaDtcblxuZXhwb3J0IHR5cGUgSnNvbkZ1bmN0aW9uID0gPERhdGE+KFxuICBkYXRhOiBEYXRhLFxuICBpbml0PzogbnVtYmVyIHwgUmVzcG9uc2VJbml0XG4pID0+IFJlc3BvbnNlO1xuXG4vKipcbiAqIFRoaXMgaXMgYSBzaG9ydGN1dCBmb3IgY3JlYXRpbmcgYGFwcGxpY2F0aW9uL2pzb25gIHJlc3BvbnNlcy4gQ29udmVydHMgYGRhdGFgXG4gKiB0byBKU09OIGFuZCBzZXRzIHRoZSBgQ29udGVudC1UeXBlYCBoZWFkZXIuXG4gKi9cbmV4cG9ydCBjb25zdCBqc29uOiBKc29uRnVuY3Rpb24gPSAoZGF0YSwgaW5pdCA9IHt9KSA9PiB7XG4gIGxldCByZXNwb25zZUluaXQgPSB0eXBlb2YgaW5pdCA9PT0gXCJudW1iZXJcIiA/IHsgc3RhdHVzOiBpbml0IH0gOiBpbml0O1xuXG4gIGxldCBoZWFkZXJzID0gbmV3IEhlYWRlcnMocmVzcG9uc2VJbml0LmhlYWRlcnMpO1xuICBpZiAoIWhlYWRlcnMuaGFzKFwiQ29udGVudC1UeXBlXCIpKSB7XG4gICAgaGVhZGVycy5zZXQoXCJDb250ZW50LVR5cGVcIiwgXCJhcHBsaWNhdGlvbi9qc29uOyBjaGFyc2V0PXV0Zi04XCIpO1xuICB9XG5cbiAgcmV0dXJuIG5ldyBSZXNwb25zZShKU09OLnN0cmluZ2lmeShkYXRhKSwge1xuICAgIC4uLnJlc3BvbnNlSW5pdCxcbiAgICBoZWFkZXJzLFxuICB9KTtcbn07XG5cbmV4cG9ydCBpbnRlcmZhY2UgVHJhY2tlZFByb21pc2UgZXh0ZW5kcyBQcm9taXNlPGFueT4ge1xuICBfdHJhY2tlZD86IGJvb2xlYW47XG4gIF9kYXRhPzogYW55O1xuICBfZXJyb3I/OiBhbnk7XG59XG5cbmV4cG9ydCBjbGFzcyBBYm9ydGVkRGVmZXJyZWRFcnJvciBleHRlbmRzIEVycm9yIHt9XG5cbmV4cG9ydCBjbGFzcyBEZWZlcnJlZERhdGEge1xuICBwcml2YXRlIHBlbmRpbmdLZXlzU2V0OiBTZXQ8c3RyaW5nPiA9IG5ldyBTZXQ8c3RyaW5nPigpO1xuICBwcml2YXRlIGNvbnRyb2xsZXI6IEFib3J0Q29udHJvbGxlcjtcbiAgcHJpdmF0ZSBhYm9ydFByb21pc2U6IFByb21pc2U8dm9pZD47XG4gIHByaXZhdGUgdW5saXN0ZW5BYm9ydFNpZ25hbDogKCkgPT4gdm9pZDtcbiAgcHJpdmF0ZSBzdWJzY3JpYmVyczogU2V0PChhYm9ydGVkOiBib29sZWFuLCBzZXR0bGVkS2V5Pzogc3RyaW5nKSA9PiB2b2lkPiA9XG4gICAgbmV3IFNldCgpO1xuICBkYXRhOiBSZWNvcmQ8c3RyaW5nLCB1bmtub3duPjtcbiAgaW5pdD86IFJlc3BvbnNlSW5pdDtcbiAgZGVmZXJyZWRLZXlzOiBzdHJpbmdbXSA9IFtdO1xuXG4gIGNvbnN0cnVjdG9yKGRhdGE6IFJlY29yZDxzdHJpbmcsIHVua25vd24+LCByZXNwb25zZUluaXQ/OiBSZXNwb25zZUluaXQpIHtcbiAgICBpbnZhcmlhbnQoXG4gICAgICBkYXRhICYmIHR5cGVvZiBkYXRhID09PSBcIm9iamVjdFwiICYmICFBcnJheS5pc0FycmF5KGRhdGEpLFxuICAgICAgXCJkZWZlcigpIG9ubHkgYWNjZXB0cyBwbGFpbiBvYmplY3RzXCJcbiAgICApO1xuXG4gICAgLy8gU2V0IHVwIGFuIEFib3J0Q29udHJvbGxlciArIFByb21pc2Ugd2UgY2FuIHJhY2UgYWdhaW5zdCB0byBleGl0IGVhcmx5XG4gICAgLy8gY2FuY2VsbGF0aW9uXG4gICAgbGV0IHJlamVjdDogKGU6IEFib3J0ZWREZWZlcnJlZEVycm9yKSA9PiB2b2lkO1xuICAgIHRoaXMuYWJvcnRQcm9taXNlID0gbmV3IFByb21pc2UoKF8sIHIpID0+IChyZWplY3QgPSByKSk7XG4gICAgdGhpcy5jb250cm9sbGVyID0gbmV3IEFib3J0Q29udHJvbGxlcigpO1xuICAgIGxldCBvbkFib3J0ID0gKCkgPT5cbiAgICAgIHJlamVjdChuZXcgQWJvcnRlZERlZmVycmVkRXJyb3IoXCJEZWZlcnJlZCBkYXRhIGFib3J0ZWRcIikpO1xuICAgIHRoaXMudW5saXN0ZW5BYm9ydFNpZ25hbCA9ICgpID0+XG4gICAgICB0aGlzLmNvbnRyb2xsZXIuc2lnbmFsLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJhYm9ydFwiLCBvbkFib3J0KTtcbiAgICB0aGlzLmNvbnRyb2xsZXIuc2lnbmFsLmFkZEV2ZW50TGlzdGVuZXIoXCJhYm9ydFwiLCBvbkFib3J0KTtcblxuICAgIHRoaXMuZGF0YSA9IE9iamVjdC5lbnRyaWVzKGRhdGEpLnJlZHVjZShcbiAgICAgIChhY2MsIFtrZXksIHZhbHVlXSkgPT5cbiAgICAgICAgT2JqZWN0LmFzc2lnbihhY2MsIHtcbiAgICAgICAgICBba2V5XTogdGhpcy50cmFja1Byb21pc2Uoa2V5LCB2YWx1ZSksXG4gICAgICAgIH0pLFxuICAgICAge31cbiAgICApO1xuXG4gICAgaWYgKHRoaXMuZG9uZSkge1xuICAgICAgLy8gQWxsIGluY29taW5nIHZhbHVlcyB3ZXJlIHJlc29sdmVkXG4gICAgICB0aGlzLnVubGlzdGVuQWJvcnRTaWduYWwoKTtcbiAgICB9XG5cbiAgICB0aGlzLmluaXQgPSByZXNwb25zZUluaXQ7XG4gIH1cblxuICBwcml2YXRlIHRyYWNrUHJvbWlzZShcbiAgICBrZXk6IHN0cmluZyxcbiAgICB2YWx1ZTogUHJvbWlzZTx1bmtub3duPiB8IHVua25vd25cbiAgKTogVHJhY2tlZFByb21pc2UgfCB1bmtub3duIHtcbiAgICBpZiAoISh2YWx1ZSBpbnN0YW5jZW9mIFByb21pc2UpKSB7XG4gICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuXG4gICAgdGhpcy5kZWZlcnJlZEtleXMucHVzaChrZXkpO1xuICAgIHRoaXMucGVuZGluZ0tleXNTZXQuYWRkKGtleSk7XG5cbiAgICAvLyBXZSBzdG9yZSBhIGxpdHRsZSB3cmFwcGVyIHByb21pc2UgdGhhdCB3aWxsIGJlIGV4dGVuZGVkIHdpdGhcbiAgICAvLyBfZGF0YS9fZXJyb3IgcHJvcHMgdXBvbiByZXNvbHZlL3JlamVjdFxuICAgIGxldCBwcm9taXNlOiBUcmFja2VkUHJvbWlzZSA9IFByb21pc2UucmFjZShbdmFsdWUsIHRoaXMuYWJvcnRQcm9taXNlXSkudGhlbihcbiAgICAgIChkYXRhKSA9PiB0aGlzLm9uU2V0dGxlKHByb21pc2UsIGtleSwgdW5kZWZpbmVkLCBkYXRhIGFzIHVua25vd24pLFxuICAgICAgKGVycm9yKSA9PiB0aGlzLm9uU2V0dGxlKHByb21pc2UsIGtleSwgZXJyb3IgYXMgdW5rbm93bilcbiAgICApO1xuXG4gICAgLy8gUmVnaXN0ZXIgcmVqZWN0aW9uIGxpc3RlbmVycyB0byBhdm9pZCB1bmNhdWdodCBwcm9taXNlIHJlamVjdGlvbnMgb25cbiAgICAvLyBlcnJvcnMgb3IgYWJvcnRlZCBkZWZlcnJlZCB2YWx1ZXNcbiAgICBwcm9taXNlLmNhdGNoKCgpID0+IHt9KTtcblxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShwcm9taXNlLCBcIl90cmFja2VkXCIsIHsgZ2V0OiAoKSA9PiB0cnVlIH0pO1xuICAgIHJldHVybiBwcm9taXNlO1xuICB9XG5cbiAgcHJpdmF0ZSBvblNldHRsZShcbiAgICBwcm9taXNlOiBUcmFja2VkUHJvbWlzZSxcbiAgICBrZXk6IHN0cmluZyxcbiAgICBlcnJvcjogdW5rbm93bixcbiAgICBkYXRhPzogdW5rbm93blxuICApOiB1bmtub3duIHtcbiAgICBpZiAoXG4gICAgICB0aGlzLmNvbnRyb2xsZXIuc2lnbmFsLmFib3J0ZWQgJiZcbiAgICAgIGVycm9yIGluc3RhbmNlb2YgQWJvcnRlZERlZmVycmVkRXJyb3JcbiAgICApIHtcbiAgICAgIHRoaXMudW5saXN0ZW5BYm9ydFNpZ25hbCgpO1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHByb21pc2UsIFwiX2Vycm9yXCIsIHsgZ2V0OiAoKSA9PiBlcnJvciB9KTtcbiAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChlcnJvcik7XG4gICAgfVxuXG4gICAgdGhpcy5wZW5kaW5nS2V5c1NldC5kZWxldGUoa2V5KTtcblxuICAgIGlmICh0aGlzLmRvbmUpIHtcbiAgICAgIC8vIE5vdGhpbmcgbGVmdCB0byBhYm9ydCFcbiAgICAgIHRoaXMudW5saXN0ZW5BYm9ydFNpZ25hbCgpO1xuICAgIH1cblxuICAgIC8vIElmIHRoZSBwcm9taXNlIHdhcyByZXNvbHZlZC9yZWplY3RlZCB3aXRoIHVuZGVmaW5lZCwgd2UnbGwgdGhyb3cgYW4gZXJyb3IgYXMgeW91XG4gICAgLy8gc2hvdWxkIGFsd2F5cyByZXNvbHZlIHdpdGggYSB2YWx1ZSBvciBudWxsXG4gICAgaWYgKGVycm9yID09PSB1bmRlZmluZWQgJiYgZGF0YSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBsZXQgdW5kZWZpbmVkRXJyb3IgPSBuZXcgRXJyb3IoXG4gICAgICAgIGBEZWZlcnJlZCBkYXRhIGZvciBrZXkgXCIke2tleX1cIiByZXNvbHZlZC9yZWplY3RlZCB3aXRoIFxcYHVuZGVmaW5lZFxcYCwgYCArXG4gICAgICAgICAgYHlvdSBtdXN0IHJlc29sdmUvcmVqZWN0IHdpdGggYSB2YWx1ZSBvciBcXGBudWxsXFxgLmBcbiAgICAgICk7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkocHJvbWlzZSwgXCJfZXJyb3JcIiwgeyBnZXQ6ICgpID0+IHVuZGVmaW5lZEVycm9yIH0pO1xuICAgICAgdGhpcy5lbWl0KGZhbHNlLCBrZXkpO1xuICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KHVuZGVmaW5lZEVycm9yKTtcbiAgICB9XG5cbiAgICBpZiAoZGF0YSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkocHJvbWlzZSwgXCJfZXJyb3JcIiwgeyBnZXQ6ICgpID0+IGVycm9yIH0pO1xuICAgICAgdGhpcy5lbWl0KGZhbHNlLCBrZXkpO1xuICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KGVycm9yKTtcbiAgICB9XG5cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkocHJvbWlzZSwgXCJfZGF0YVwiLCB7IGdldDogKCkgPT4gZGF0YSB9KTtcbiAgICB0aGlzLmVtaXQoZmFsc2UsIGtleSk7XG4gICAgcmV0dXJuIGRhdGE7XG4gIH1cblxuICBwcml2YXRlIGVtaXQoYWJvcnRlZDogYm9vbGVhbiwgc2V0dGxlZEtleT86IHN0cmluZykge1xuICAgIHRoaXMuc3Vic2NyaWJlcnMuZm9yRWFjaCgoc3Vic2NyaWJlcikgPT4gc3Vic2NyaWJlcihhYm9ydGVkLCBzZXR0bGVkS2V5KSk7XG4gIH1cblxuICBzdWJzY3JpYmUoZm46IChhYm9ydGVkOiBib29sZWFuLCBzZXR0bGVkS2V5Pzogc3RyaW5nKSA9PiB2b2lkKSB7XG4gICAgdGhpcy5zdWJzY3JpYmVycy5hZGQoZm4pO1xuICAgIHJldHVybiAoKSA9PiB0aGlzLnN1YnNjcmliZXJzLmRlbGV0ZShmbik7XG4gIH1cblxuICBjYW5jZWwoKSB7XG4gICAgdGhpcy5jb250cm9sbGVyLmFib3J0KCk7XG4gICAgdGhpcy5wZW5kaW5nS2V5c1NldC5mb3JFYWNoKCh2LCBrKSA9PiB0aGlzLnBlbmRpbmdLZXlzU2V0LmRlbGV0ZShrKSk7XG4gICAgdGhpcy5lbWl0KHRydWUpO1xuICB9XG5cbiAgYXN5bmMgcmVzb2x2ZURhdGEoc2lnbmFsOiBBYm9ydFNpZ25hbCkge1xuICAgIGxldCBhYm9ydGVkID0gZmFsc2U7XG4gICAgaWYgKCF0aGlzLmRvbmUpIHtcbiAgICAgIGxldCBvbkFib3J0ID0gKCkgPT4gdGhpcy5jYW5jZWwoKTtcbiAgICAgIHNpZ25hbC5hZGRFdmVudExpc3RlbmVyKFwiYWJvcnRcIiwgb25BYm9ydCk7XG4gICAgICBhYm9ydGVkID0gYXdhaXQgbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHtcbiAgICAgICAgdGhpcy5zdWJzY3JpYmUoKGFib3J0ZWQpID0+IHtcbiAgICAgICAgICBzaWduYWwucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImFib3J0XCIsIG9uQWJvcnQpO1xuICAgICAgICAgIGlmIChhYm9ydGVkIHx8IHRoaXMuZG9uZSkge1xuICAgICAgICAgICAgcmVzb2x2ZShhYm9ydGVkKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiBhYm9ydGVkO1xuICB9XG5cbiAgZ2V0IGRvbmUoKSB7XG4gICAgcmV0dXJuIHRoaXMucGVuZGluZ0tleXNTZXQuc2l6ZSA9PT0gMDtcbiAgfVxuXG4gIGdldCB1bndyYXBwZWREYXRhKCkge1xuICAgIGludmFyaWFudChcbiAgICAgIHRoaXMuZGF0YSAhPT0gbnVsbCAmJiB0aGlzLmRvbmUsXG4gICAgICBcIkNhbiBvbmx5IHVud3JhcCBkYXRhIG9uIGluaXRpYWxpemVkIGFuZCBzZXR0bGVkIGRlZmVycmVkc1wiXG4gICAgKTtcblxuICAgIHJldHVybiBPYmplY3QuZW50cmllcyh0aGlzLmRhdGEpLnJlZHVjZShcbiAgICAgIChhY2MsIFtrZXksIHZhbHVlXSkgPT5cbiAgICAgICAgT2JqZWN0LmFzc2lnbihhY2MsIHtcbiAgICAgICAgICBba2V5XTogdW53cmFwVHJhY2tlZFByb21pc2UodmFsdWUpLFxuICAgICAgICB9KSxcbiAgICAgIHt9XG4gICAgKTtcbiAgfVxuXG4gIGdldCBwZW5kaW5nS2V5cygpIHtcbiAgICByZXR1cm4gQXJyYXkuZnJvbSh0aGlzLnBlbmRpbmdLZXlzU2V0KTtcbiAgfVxufVxuXG5mdW5jdGlvbiBpc1RyYWNrZWRQcm9taXNlKHZhbHVlOiBhbnkpOiB2YWx1ZSBpcyBUcmFja2VkUHJvbWlzZSB7XG4gIHJldHVybiAoXG4gICAgdmFsdWUgaW5zdGFuY2VvZiBQcm9taXNlICYmICh2YWx1ZSBhcyBUcmFja2VkUHJvbWlzZSkuX3RyYWNrZWQgPT09IHRydWVcbiAgKTtcbn1cblxuZnVuY3Rpb24gdW53cmFwVHJhY2tlZFByb21pc2UodmFsdWU6IGFueSkge1xuICBpZiAoIWlzVHJhY2tlZFByb21pc2UodmFsdWUpKSB7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG5cbiAgaWYgKHZhbHVlLl9lcnJvcikge1xuICAgIHRocm93IHZhbHVlLl9lcnJvcjtcbiAgfVxuICByZXR1cm4gdmFsdWUuX2RhdGE7XG59XG5cbmV4cG9ydCB0eXBlIERlZmVyRnVuY3Rpb24gPSAoXG4gIGRhdGE6IFJlY29yZDxzdHJpbmcsIHVua25vd24+LFxuICBpbml0PzogbnVtYmVyIHwgUmVzcG9uc2VJbml0XG4pID0+IERlZmVycmVkRGF0YTtcblxuZXhwb3J0IGNvbnN0IGRlZmVyOiBEZWZlckZ1bmN0aW9uID0gKGRhdGEsIGluaXQgPSB7fSkgPT4ge1xuICBsZXQgcmVzcG9uc2VJbml0ID0gdHlwZW9mIGluaXQgPT09IFwibnVtYmVyXCIgPyB7IHN0YXR1czogaW5pdCB9IDogaW5pdDtcblxuICByZXR1cm4gbmV3IERlZmVycmVkRGF0YShkYXRhLCByZXNwb25zZUluaXQpO1xufTtcblxuZXhwb3J0IHR5cGUgUmVkaXJlY3RGdW5jdGlvbiA9IChcbiAgdXJsOiBzdHJpbmcsXG4gIGluaXQ/OiBudW1iZXIgfCBSZXNwb25zZUluaXRcbikgPT4gUmVzcG9uc2U7XG5cbi8qKlxuICogQSByZWRpcmVjdCByZXNwb25zZS4gU2V0cyB0aGUgc3RhdHVzIGNvZGUgYW5kIHRoZSBgTG9jYXRpb25gIGhlYWRlci5cbiAqIERlZmF1bHRzIHRvIFwiMzAyIEZvdW5kXCIuXG4gKi9cbmV4cG9ydCBjb25zdCByZWRpcmVjdDogUmVkaXJlY3RGdW5jdGlvbiA9ICh1cmwsIGluaXQgPSAzMDIpID0+IHtcbiAgbGV0IHJlc3BvbnNlSW5pdCA9IGluaXQ7XG4gIGlmICh0eXBlb2YgcmVzcG9uc2VJbml0ID09PSBcIm51bWJlclwiKSB7XG4gICAgcmVzcG9uc2VJbml0ID0geyBzdGF0dXM6IHJlc3BvbnNlSW5pdCB9O1xuICB9IGVsc2UgaWYgKHR5cGVvZiByZXNwb25zZUluaXQuc3RhdHVzID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgcmVzcG9uc2VJbml0LnN0YXR1cyA9IDMwMjtcbiAgfVxuXG4gIGxldCBoZWFkZXJzID0gbmV3IEhlYWRlcnMocmVzcG9uc2VJbml0LmhlYWRlcnMpO1xuICBoZWFkZXJzLnNldChcIkxvY2F0aW9uXCIsIHVybCk7XG5cbiAgcmV0dXJuIG5ldyBSZXNwb25zZShudWxsLCB7XG4gICAgLi4ucmVzcG9uc2VJbml0LFxuICAgIGhlYWRlcnMsXG4gIH0pO1xufTtcblxuLyoqXG4gKiBBIHJlZGlyZWN0IHJlc3BvbnNlIHRoYXQgd2lsbCBmb3JjZSBhIGRvY3VtZW50IHJlbG9hZCB0byB0aGUgbmV3IGxvY2F0aW9uLlxuICogU2V0cyB0aGUgc3RhdHVzIGNvZGUgYW5kIHRoZSBgTG9jYXRpb25gIGhlYWRlci5cbiAqIERlZmF1bHRzIHRvIFwiMzAyIEZvdW5kXCIuXG4gKi9cbmV4cG9ydCBjb25zdCByZWRpcmVjdERvY3VtZW50OiBSZWRpcmVjdEZ1bmN0aW9uID0gKHVybCwgaW5pdCkgPT4ge1xuICBsZXQgcmVzcG9uc2UgPSByZWRpcmVjdCh1cmwsIGluaXQpO1xuICByZXNwb25zZS5oZWFkZXJzLnNldChcIlgtUmVtaXgtUmVsb2FkLURvY3VtZW50XCIsIFwidHJ1ZVwiKTtcbiAgcmV0dXJuIHJlc3BvbnNlO1xufTtcblxuZXhwb3J0IHR5cGUgRXJyb3JSZXNwb25zZSA9IHtcbiAgc3RhdHVzOiBudW1iZXI7XG4gIHN0YXR1c1RleHQ6IHN0cmluZztcbiAgZGF0YTogYW55O1xufTtcblxuLyoqXG4gKiBAcHJpdmF0ZVxuICogVXRpbGl0eSBjbGFzcyB3ZSB1c2UgdG8gaG9sZCBhdXRvLXVud3JhcHBlZCA0eHgvNXh4IFJlc3BvbnNlIGJvZGllc1xuICpcbiAqIFdlIGRvbid0IGV4cG9ydCB0aGUgY2xhc3MgZm9yIHB1YmxpYyB1c2Ugc2luY2UgaXQncyBhbiBpbXBsZW1lbnRhdGlvblxuICogZGV0YWlsLCBidXQgd2UgZXhwb3J0IHRoZSBpbnRlcmZhY2UgYWJvdmUgc28gZm9sa3MgY2FuIGJ1aWxkIHRoZWlyIG93blxuICogYWJzdHJhY3Rpb25zIGFyb3VuZCBpbnN0YW5jZXMgdmlhIGlzUm91dGVFcnJvclJlc3BvbnNlKClcbiAqL1xuZXhwb3J0IGNsYXNzIEVycm9yUmVzcG9uc2VJbXBsIGltcGxlbWVudHMgRXJyb3JSZXNwb25zZSB7XG4gIHN0YXR1czogbnVtYmVyO1xuICBzdGF0dXNUZXh0OiBzdHJpbmc7XG4gIGRhdGE6IGFueTtcbiAgcHJpdmF0ZSBlcnJvcj86IEVycm9yO1xuICBwcml2YXRlIGludGVybmFsOiBib29sZWFuO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHN0YXR1czogbnVtYmVyLFxuICAgIHN0YXR1c1RleHQ6IHN0cmluZyB8IHVuZGVmaW5lZCxcbiAgICBkYXRhOiBhbnksXG4gICAgaW50ZXJuYWwgPSBmYWxzZVxuICApIHtcbiAgICB0aGlzLnN0YXR1cyA9IHN0YXR1cztcbiAgICB0aGlzLnN0YXR1c1RleHQgPSBzdGF0dXNUZXh0IHx8IFwiXCI7XG4gICAgdGhpcy5pbnRlcm5hbCA9IGludGVybmFsO1xuICAgIGlmIChkYXRhIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICAgIHRoaXMuZGF0YSA9IGRhdGEudG9TdHJpbmcoKTtcbiAgICAgIHRoaXMuZXJyb3IgPSBkYXRhO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmRhdGEgPSBkYXRhO1xuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIENoZWNrIGlmIHRoZSBnaXZlbiBlcnJvciBpcyBhbiBFcnJvclJlc3BvbnNlIGdlbmVyYXRlZCBmcm9tIGEgNHh4LzV4eFxuICogUmVzcG9uc2UgdGhyb3duIGZyb20gYW4gYWN0aW9uL2xvYWRlclxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNSb3V0ZUVycm9yUmVzcG9uc2UoZXJyb3I6IGFueSk6IGVycm9yIGlzIEVycm9yUmVzcG9uc2Uge1xuICByZXR1cm4gKFxuICAgIGVycm9yICE9IG51bGwgJiZcbiAgICB0eXBlb2YgZXJyb3Iuc3RhdHVzID09PSBcIm51bWJlclwiICYmXG4gICAgdHlwZW9mIGVycm9yLnN0YXR1c1RleHQgPT09IFwic3RyaW5nXCIgJiZcbiAgICB0eXBlb2YgZXJyb3IuaW50ZXJuYWwgPT09IFwiYm9vbGVhblwiICYmXG4gICAgXCJkYXRhXCIgaW4gZXJyb3JcbiAgKTtcbn1cbiIsImltcG9ydCB0eXBlIHsgSGlzdG9yeSwgTG9jYXRpb24sIFBhdGgsIFRvIH0gZnJvbSBcIi4vaGlzdG9yeVwiO1xuaW1wb3J0IHtcbiAgQWN0aW9uIGFzIEhpc3RvcnlBY3Rpb24sXG4gIGNyZWF0ZUxvY2F0aW9uLFxuICBjcmVhdGVQYXRoLFxuICBpbnZhcmlhbnQsXG4gIHBhcnNlUGF0aCxcbiAgd2FybmluZyxcbn0gZnJvbSBcIi4vaGlzdG9yeVwiO1xuaW1wb3J0IHR5cGUge1xuICBBY3Rpb25GdW5jdGlvbixcbiAgQWdub3N0aWNEYXRhUm91dGVNYXRjaCxcbiAgQWdub3N0aWNEYXRhUm91dGVPYmplY3QsXG4gIEFnbm9zdGljUm91dGVPYmplY3QsXG4gIERhdGFSZXN1bHQsXG4gIERlZmVycmVkRGF0YSxcbiAgRGVmZXJyZWRSZXN1bHQsXG4gIERldGVjdEVycm9yQm91bmRhcnlGdW5jdGlvbixcbiAgRXJyb3JSZXN1bHQsXG4gIEZvcm1FbmNUeXBlLFxuICBGb3JtTWV0aG9kLFxuICBIVE1MRm9ybU1ldGhvZCxcbiAgSW1tdXRhYmxlUm91dGVLZXksXG4gIExvYWRlckZ1bmN0aW9uLFxuICBNYXBSb3V0ZVByb3BlcnRpZXNGdW5jdGlvbixcbiAgTXV0YXRpb25Gb3JtTWV0aG9kLFxuICBSZWRpcmVjdFJlc3VsdCxcbiAgUm91dGVEYXRhLFxuICBSb3V0ZU1hbmlmZXN0LFxuICBTaG91bGRSZXZhbGlkYXRlRnVuY3Rpb25BcmdzLFxuICBTdWJtaXNzaW9uLFxuICBTdWNjZXNzUmVzdWx0LFxuICBVSU1hdGNoLFxuICBWN19Gb3JtTWV0aG9kLFxuICBWN19NdXRhdGlvbkZvcm1NZXRob2QsXG59IGZyb20gXCIuL3V0aWxzXCI7XG5pbXBvcnQge1xuICBFcnJvclJlc3BvbnNlSW1wbCxcbiAgUmVzdWx0VHlwZSxcbiAgY29udmVydFJvdXRlTWF0Y2hUb1VpTWF0Y2gsXG4gIGNvbnZlcnRSb3V0ZXNUb0RhdGFSb3V0ZXMsXG4gIGdldFBhdGhDb250cmlidXRpbmdNYXRjaGVzLFxuICBnZXRSZXNvbHZlVG9NYXRjaGVzLFxuICBpbW11dGFibGVSb3V0ZUtleXMsXG4gIGlzUm91dGVFcnJvclJlc3BvbnNlLFxuICBqb2luUGF0aHMsXG4gIG1hdGNoUm91dGVzLFxuICByZXNvbHZlVG8sXG4gIHN0cmlwQmFzZW5hbWUsXG59IGZyb20gXCIuL3V0aWxzXCI7XG5cbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyNyZWdpb24gVHlwZXMgYW5kIENvbnN0YW50c1xuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuLyoqXG4gKiBBIFJvdXRlciBpbnN0YW5jZSBtYW5hZ2VzIGFsbCBuYXZpZ2F0aW9uIGFuZCBkYXRhIGxvYWRpbmcvbXV0YXRpb25zXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgUm91dGVyIHtcbiAgLyoqXG4gICAqIEBpbnRlcm5hbFxuICAgKiBQUklWQVRFIC0gRE8gTk9UIFVTRVxuICAgKlxuICAgKiBSZXR1cm4gdGhlIGJhc2VuYW1lIGZvciB0aGUgcm91dGVyXG4gICAqL1xuICBnZXQgYmFzZW5hbWUoKTogUm91dGVySW5pdFtcImJhc2VuYW1lXCJdO1xuXG4gIC8qKlxuICAgKiBAaW50ZXJuYWxcbiAgICogUFJJVkFURSAtIERPIE5PVCBVU0VcbiAgICpcbiAgICogUmV0dXJuIHRoZSBmdXR1cmUgY29uZmlnIGZvciB0aGUgcm91dGVyXG4gICAqL1xuICBnZXQgZnV0dXJlKCk6IEZ1dHVyZUNvbmZpZztcblxuICAvKipcbiAgICogQGludGVybmFsXG4gICAqIFBSSVZBVEUgLSBETyBOT1QgVVNFXG4gICAqXG4gICAqIFJldHVybiB0aGUgY3VycmVudCBzdGF0ZSBvZiB0aGUgcm91dGVyXG4gICAqL1xuICBnZXQgc3RhdGUoKTogUm91dGVyU3RhdGU7XG5cbiAgLyoqXG4gICAqIEBpbnRlcm5hbFxuICAgKiBQUklWQVRFIC0gRE8gTk9UIFVTRVxuICAgKlxuICAgKiBSZXR1cm4gdGhlIHJvdXRlcyBmb3IgdGhpcyByb3V0ZXIgaW5zdGFuY2VcbiAgICovXG4gIGdldCByb3V0ZXMoKTogQWdub3N0aWNEYXRhUm91dGVPYmplY3RbXTtcblxuICAvKipcbiAgICogQGludGVybmFsXG4gICAqIFBSSVZBVEUgLSBETyBOT1QgVVNFXG4gICAqXG4gICAqIFJldHVybiB0aGUgd2luZG93IGFzc29jaWF0ZWQgd2l0aCB0aGUgcm91dGVyXG4gICAqL1xuICBnZXQgd2luZG93KCk6IFJvdXRlckluaXRbXCJ3aW5kb3dcIl07XG5cbiAgLyoqXG4gICAqIEBpbnRlcm5hbFxuICAgKiBQUklWQVRFIC0gRE8gTk9UIFVTRVxuICAgKlxuICAgKiBJbml0aWFsaXplIHRoZSByb3V0ZXIsIGluY2x1ZGluZyBhZGRpbmcgaGlzdG9yeSBsaXN0ZW5lcnMgYW5kIGtpY2tpbmcgb2ZmXG4gICAqIGluaXRpYWwgZGF0YSBmZXRjaGVzLiAgUmV0dXJucyBhIGZ1bmN0aW9uIHRvIGNsZWFudXAgbGlzdGVuZXJzIGFuZCBhYm9ydFxuICAgKiBhbnkgaW4tcHJvZ3Jlc3MgbG9hZHNcbiAgICovXG4gIGluaXRpYWxpemUoKTogUm91dGVyO1xuXG4gIC8qKlxuICAgKiBAaW50ZXJuYWxcbiAgICogUFJJVkFURSAtIERPIE5PVCBVU0VcbiAgICpcbiAgICogU3Vic2NyaWJlIHRvIHJvdXRlci5zdGF0ZSB1cGRhdGVzXG4gICAqXG4gICAqIEBwYXJhbSBmbiBmdW5jdGlvbiB0byBjYWxsIHdpdGggdGhlIG5ldyBzdGF0ZVxuICAgKi9cbiAgc3Vic2NyaWJlKGZuOiBSb3V0ZXJTdWJzY3JpYmVyKTogKCkgPT4gdm9pZDtcblxuICAvKipcbiAgICogQGludGVybmFsXG4gICAqIFBSSVZBVEUgLSBETyBOT1QgVVNFXG4gICAqXG4gICAqIEVuYWJsZSBzY3JvbGwgcmVzdG9yYXRpb24gYmVoYXZpb3IgaW4gdGhlIHJvdXRlclxuICAgKlxuICAgKiBAcGFyYW0gc2F2ZWRTY3JvbGxQb3NpdGlvbnMgT2JqZWN0IHRoYXQgd2lsbCBtYW5hZ2UgcG9zaXRpb25zLCBpbiBjYXNlXG4gICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdCdzIGJlaW5nIHJlc3RvcmVkIGZyb20gc2Vzc2lvblN0b3JhZ2VcbiAgICogQHBhcmFtIGdldFNjcm9sbFBvc2l0aW9uICAgIEZ1bmN0aW9uIHRvIGdldCB0aGUgYWN0aXZlIFkgc2Nyb2xsIHBvc2l0aW9uXG4gICAqIEBwYXJhbSBnZXRLZXkgICAgICAgICAgICAgICBGdW5jdGlvbiB0byBnZXQgdGhlIGtleSB0byB1c2UgZm9yIHJlc3RvcmF0aW9uXG4gICAqL1xuICBlbmFibGVTY3JvbGxSZXN0b3JhdGlvbihcbiAgICBzYXZlZFNjcm9sbFBvc2l0aW9uczogUmVjb3JkPHN0cmluZywgbnVtYmVyPixcbiAgICBnZXRTY3JvbGxQb3NpdGlvbjogR2V0U2Nyb2xsUG9zaXRpb25GdW5jdGlvbixcbiAgICBnZXRLZXk/OiBHZXRTY3JvbGxSZXN0b3JhdGlvbktleUZ1bmN0aW9uXG4gICk6ICgpID0+IHZvaWQ7XG5cbiAgLyoqXG4gICAqIEBpbnRlcm5hbFxuICAgKiBQUklWQVRFIC0gRE8gTk9UIFVTRVxuICAgKlxuICAgKiBOYXZpZ2F0ZSBmb3J3YXJkL2JhY2t3YXJkIGluIHRoZSBoaXN0b3J5IHN0YWNrXG4gICAqIEBwYXJhbSB0byBEZWx0YSB0byBtb3ZlIGluIHRoZSBoaXN0b3J5IHN0YWNrXG4gICAqL1xuICBuYXZpZ2F0ZSh0bzogbnVtYmVyKTogUHJvbWlzZTx2b2lkPjtcblxuICAvKipcbiAgICogTmF2aWdhdGUgdG8gdGhlIGdpdmVuIHBhdGhcbiAgICogQHBhcmFtIHRvIFBhdGggdG8gbmF2aWdhdGUgdG9cbiAgICogQHBhcmFtIG9wdHMgTmF2aWdhdGlvbiBvcHRpb25zIChtZXRob2QsIHN1Ym1pc3Npb24sIGV0Yy4pXG4gICAqL1xuICBuYXZpZ2F0ZSh0bzogVG8gfCBudWxsLCBvcHRzPzogUm91dGVyTmF2aWdhdGVPcHRpb25zKTogUHJvbWlzZTx2b2lkPjtcblxuICAvKipcbiAgICogQGludGVybmFsXG4gICAqIFBSSVZBVEUgLSBETyBOT1QgVVNFXG4gICAqXG4gICAqIFRyaWdnZXIgYSBmZXRjaGVyIGxvYWQvc3VibWlzc2lvblxuICAgKlxuICAgKiBAcGFyYW0ga2V5ICAgICBGZXRjaGVyIGtleVxuICAgKiBAcGFyYW0gcm91dGVJZCBSb3V0ZSB0aGF0IG93bnMgdGhlIGZldGNoZXJcbiAgICogQHBhcmFtIGhyZWYgICAgaHJlZiB0byBmZXRjaFxuICAgKiBAcGFyYW0gb3B0cyAgICBGZXRjaGVyIG9wdGlvbnMsIChtZXRob2QsIHN1Ym1pc3Npb24sIGV0Yy4pXG4gICAqL1xuICBmZXRjaChcbiAgICBrZXk6IHN0cmluZyxcbiAgICByb3V0ZUlkOiBzdHJpbmcsXG4gICAgaHJlZjogc3RyaW5nIHwgbnVsbCxcbiAgICBvcHRzPzogUm91dGVyRmV0Y2hPcHRpb25zXG4gICk6IHZvaWQ7XG5cbiAgLyoqXG4gICAqIEBpbnRlcm5hbFxuICAgKiBQUklWQVRFIC0gRE8gTk9UIFVTRVxuICAgKlxuICAgKiBUcmlnZ2VyIGEgcmV2YWxpZGF0aW9uIG9mIGFsbCBjdXJyZW50IHJvdXRlIGxvYWRlcnMgYW5kIGZldGNoZXIgbG9hZHNcbiAgICovXG4gIHJldmFsaWRhdGUoKTogdm9pZDtcblxuICAvKipcbiAgICogQGludGVybmFsXG4gICAqIFBSSVZBVEUgLSBETyBOT1QgVVNFXG4gICAqXG4gICAqIFV0aWxpdHkgZnVuY3Rpb24gdG8gY3JlYXRlIGFuIGhyZWYgZm9yIHRoZSBnaXZlbiBsb2NhdGlvblxuICAgKiBAcGFyYW0gbG9jYXRpb25cbiAgICovXG4gIGNyZWF0ZUhyZWYobG9jYXRpb246IExvY2F0aW9uIHwgVVJMKTogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBAaW50ZXJuYWxcbiAgICogUFJJVkFURSAtIERPIE5PVCBVU0VcbiAgICpcbiAgICogVXRpbGl0eSBmdW5jdGlvbiB0byBVUkwgZW5jb2RlIGEgZGVzdGluYXRpb24gcGF0aCBhY2NvcmRpbmcgdG8gdGhlIGludGVybmFsXG4gICAqIGhpc3RvcnkgaW1wbGVtZW50YXRpb25cbiAgICogQHBhcmFtIHRvXG4gICAqL1xuICBlbmNvZGVMb2NhdGlvbih0bzogVG8pOiBQYXRoO1xuXG4gIC8qKlxuICAgKiBAaW50ZXJuYWxcbiAgICogUFJJVkFURSAtIERPIE5PVCBVU0VcbiAgICpcbiAgICogR2V0L2NyZWF0ZSBhIGZldGNoZXIgZm9yIHRoZSBnaXZlbiBrZXlcbiAgICogQHBhcmFtIGtleVxuICAgKi9cbiAgZ2V0RmV0Y2hlcjxURGF0YSA9IGFueT4oa2V5OiBzdHJpbmcpOiBGZXRjaGVyPFREYXRhPjtcblxuICAvKipcbiAgICogQGludGVybmFsXG4gICAqIFBSSVZBVEUgLSBETyBOT1QgVVNFXG4gICAqXG4gICAqIERlbGV0ZSB0aGUgZmV0Y2hlciBmb3IgYSBnaXZlbiBrZXlcbiAgICogQHBhcmFtIGtleVxuICAgKi9cbiAgZGVsZXRlRmV0Y2hlcihrZXk6IHN0cmluZyk6IHZvaWQ7XG5cbiAgLyoqXG4gICAqIEBpbnRlcm5hbFxuICAgKiBQUklWQVRFIC0gRE8gTk9UIFVTRVxuICAgKlxuICAgKiBDbGVhbnVwIGxpc3RlbmVycyBhbmQgYWJvcnQgYW55IGluLXByb2dyZXNzIGxvYWRzXG4gICAqL1xuICBkaXNwb3NlKCk6IHZvaWQ7XG5cbiAgLyoqXG4gICAqIEBpbnRlcm5hbFxuICAgKiBQUklWQVRFIC0gRE8gTk9UIFVTRVxuICAgKlxuICAgKiBHZXQgYSBuYXZpZ2F0aW9uIGJsb2NrZXJcbiAgICogQHBhcmFtIGtleSBUaGUgaWRlbnRpZmllciBmb3IgdGhlIGJsb2NrZXJcbiAgICogQHBhcmFtIGZuIFRoZSBibG9ja2VyIGZ1bmN0aW9uIGltcGxlbWVudGF0aW9uXG4gICAqL1xuICBnZXRCbG9ja2VyKGtleTogc3RyaW5nLCBmbjogQmxvY2tlckZ1bmN0aW9uKTogQmxvY2tlcjtcblxuICAvKipcbiAgICogQGludGVybmFsXG4gICAqIFBSSVZBVEUgLSBETyBOT1QgVVNFXG4gICAqXG4gICAqIERlbGV0ZSBhIG5hdmlnYXRpb24gYmxvY2tlclxuICAgKiBAcGFyYW0ga2V5IFRoZSBpZGVudGlmaWVyIGZvciB0aGUgYmxvY2tlclxuICAgKi9cbiAgZGVsZXRlQmxvY2tlcihrZXk6IHN0cmluZyk6IHZvaWQ7XG5cbiAgLyoqXG4gICAqIEBpbnRlcm5hbFxuICAgKiBQUklWQVRFIC0gRE8gTk9UIFVTRVxuICAgKlxuICAgKiBITVIgbmVlZHMgdG8gcGFzcyBpbi1mbGlnaHQgcm91dGUgdXBkYXRlcyB0byBSZWFjdCBSb3V0ZXJcbiAgICogVE9ETzogUmVwbGFjZSB0aGlzIHdpdGggZ3JhbnVsYXIgcm91dGUgdXBkYXRlIEFQSXMgKGFkZFJvdXRlLCB1cGRhdGVSb3V0ZSwgZGVsZXRlUm91dGUpXG4gICAqL1xuICBfaW50ZXJuYWxTZXRSb3V0ZXMocm91dGVzOiBBZ25vc3RpY1JvdXRlT2JqZWN0W10pOiB2b2lkO1xuXG4gIC8qKlxuICAgKiBAaW50ZXJuYWxcbiAgICogUFJJVkFURSAtIERPIE5PVCBVU0VcbiAgICpcbiAgICogSW50ZXJuYWwgZmV0Y2ggQWJvcnRDb250cm9sbGVycyBhY2Nlc3NlZCBieSB1bml0IHRlc3RzXG4gICAqL1xuICBfaW50ZXJuYWxGZXRjaENvbnRyb2xsZXJzOiBNYXA8c3RyaW5nLCBBYm9ydENvbnRyb2xsZXI+O1xuXG4gIC8qKlxuICAgKiBAaW50ZXJuYWxcbiAgICogUFJJVkFURSAtIERPIE5PVCBVU0VcbiAgICpcbiAgICogSW50ZXJuYWwgcGVuZGluZyBEZWZlcnJlZERhdGEgaW5zdGFuY2VzIGFjY2Vzc2VkIGJ5IHVuaXQgdGVzdHNcbiAgICovXG4gIF9pbnRlcm5hbEFjdGl2ZURlZmVycmVkczogTWFwPHN0cmluZywgRGVmZXJyZWREYXRhPjtcbn1cblxuLyoqXG4gKiBTdGF0ZSBtYWludGFpbmVkIGludGVybmFsbHkgYnkgdGhlIHJvdXRlci4gIER1cmluZyBhIG5hdmlnYXRpb24sIGFsbCBzdGF0ZXNcbiAqIHJlZmxlY3QgdGhlIHRoZSBcIm9sZFwiIGxvY2F0aW9uIHVubGVzcyBvdGhlcndpc2Ugbm90ZWQuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgUm91dGVyU3RhdGUge1xuICAvKipcbiAgICogVGhlIGFjdGlvbiBvZiB0aGUgbW9zdCByZWNlbnQgbmF2aWdhdGlvblxuICAgKi9cbiAgaGlzdG9yeUFjdGlvbjogSGlzdG9yeUFjdGlvbjtcblxuICAvKipcbiAgICogVGhlIGN1cnJlbnQgbG9jYXRpb24gcmVmbGVjdGVkIGJ5IHRoZSByb3V0ZXJcbiAgICovXG4gIGxvY2F0aW9uOiBMb2NhdGlvbjtcblxuICAvKipcbiAgICogVGhlIGN1cnJlbnQgc2V0IG9mIHJvdXRlIG1hdGNoZXNcbiAgICovXG4gIG1hdGNoZXM6IEFnbm9zdGljRGF0YVJvdXRlTWF0Y2hbXTtcblxuICAvKipcbiAgICogVHJhY2tzIHdoZXRoZXIgd2UndmUgY29tcGxldGVkIG91ciBpbml0aWFsIGRhdGEgbG9hZFxuICAgKi9cbiAgaW5pdGlhbGl6ZWQ6IGJvb2xlYW47XG5cbiAgLyoqXG4gICAqIEN1cnJlbnQgc2Nyb2xsIHBvc2l0aW9uIHdlIHNob3VsZCBzdGFydCBhdCBmb3IgYSBuZXcgdmlld1xuICAgKiAgLSBudW1iZXIgLT4gc2Nyb2xsIHBvc2l0aW9uIHRvIHJlc3RvcmUgdG9cbiAgICogIC0gZmFsc2UgLT4gZG8gbm90IHJlc3RvcmUgc2Nyb2xsIGF0IGFsbCAodXNlZCBkdXJpbmcgc3VibWlzc2lvbnMpXG4gICAqICAtIG51bGwgLT4gZG9uJ3QgaGF2ZSBhIHNhdmVkIHBvc2l0aW9uLCBzY3JvbGwgdG8gaGFzaCBvciB0b3Agb2YgcGFnZVxuICAgKi9cbiAgcmVzdG9yZVNjcm9sbFBvc2l0aW9uOiBudW1iZXIgfCBmYWxzZSB8IG51bGw7XG5cbiAgLyoqXG4gICAqIEluZGljYXRlIHdoZXRoZXIgdGhpcyBuYXZpZ2F0aW9uIHNob3VsZCBza2lwIHJlc2V0dGluZyB0aGUgc2Nyb2xsIHBvc2l0aW9uXG4gICAqIGlmIHdlIGFyZSB1bmFibGUgdG8gcmVzdG9yZSB0aGUgc2Nyb2xsIHBvc2l0aW9uXG4gICAqL1xuICBwcmV2ZW50U2Nyb2xsUmVzZXQ6IGJvb2xlYW47XG5cbiAgLyoqXG4gICAqIFRyYWNrcyB0aGUgc3RhdGUgb2YgdGhlIGN1cnJlbnQgbmF2aWdhdGlvblxuICAgKi9cbiAgbmF2aWdhdGlvbjogTmF2aWdhdGlvbjtcblxuICAvKipcbiAgICogVHJhY2tzIGFueSBpbi1wcm9ncmVzcyByZXZhbGlkYXRpb25zXG4gICAqL1xuICByZXZhbGlkYXRpb246IFJldmFsaWRhdGlvblN0YXRlO1xuXG4gIC8qKlxuICAgKiBEYXRhIGZyb20gdGhlIGxvYWRlcnMgZm9yIHRoZSBjdXJyZW50IG1hdGNoZXNcbiAgICovXG4gIGxvYWRlckRhdGE6IFJvdXRlRGF0YTtcblxuICAvKipcbiAgICogRGF0YSBmcm9tIHRoZSBhY3Rpb24gZm9yIHRoZSBjdXJyZW50IG1hdGNoZXNcbiAgICovXG4gIGFjdGlvbkRhdGE6IFJvdXRlRGF0YSB8IG51bGw7XG5cbiAgLyoqXG4gICAqIEVycm9ycyBjYXVnaHQgZnJvbSBsb2FkZXJzIGZvciB0aGUgY3VycmVudCBtYXRjaGVzXG4gICAqL1xuICBlcnJvcnM6IFJvdXRlRGF0YSB8IG51bGw7XG5cbiAgLyoqXG4gICAqIE1hcCBvZiBjdXJyZW50IGZldGNoZXJzXG4gICAqL1xuICBmZXRjaGVyczogTWFwPHN0cmluZywgRmV0Y2hlcj47XG5cbiAgLyoqXG4gICAqIE1hcCBvZiBjdXJyZW50IGJsb2NrZXJzXG4gICAqL1xuICBibG9ja2VyczogTWFwPHN0cmluZywgQmxvY2tlcj47XG59XG5cbi8qKlxuICogRGF0YSB0aGF0IGNhbiBiZSBwYXNzZWQgaW50byBoeWRyYXRlIGEgUm91dGVyIGZyb20gU1NSXG4gKi9cbmV4cG9ydCB0eXBlIEh5ZHJhdGlvblN0YXRlID0gUGFydGlhbDxcbiAgUGljazxSb3V0ZXJTdGF0ZSwgXCJsb2FkZXJEYXRhXCIgfCBcImFjdGlvbkRhdGFcIiB8IFwiZXJyb3JzXCI+XG4+O1xuXG4vKipcbiAqIEZ1dHVyZSBmbGFncyB0byB0b2dnbGUgbmV3IGZlYXR1cmUgYmVoYXZpb3JcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBGdXR1cmVDb25maWcge1xuICB2N19mZXRjaGVyUGVyc2lzdDogYm9vbGVhbjtcbiAgdjdfbm9ybWFsaXplRm9ybU1ldGhvZDogYm9vbGVhbjtcbiAgdjdfcGFydGlhbEh5ZHJhdGlvbjogYm9vbGVhbjtcbiAgdjdfcHJlcGVuZEJhc2VuYW1lOiBib29sZWFuO1xuICB2N19yZWxhdGl2ZVNwbGF0UGF0aDogYm9vbGVhbjtcbn1cblxuLyoqXG4gKiBJbml0aWFsaXphdGlvbiBvcHRpb25zIGZvciBjcmVhdGVSb3V0ZXJcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBSb3V0ZXJJbml0IHtcbiAgcm91dGVzOiBBZ25vc3RpY1JvdXRlT2JqZWN0W107XG4gIGhpc3Rvcnk6IEhpc3Rvcnk7XG4gIGJhc2VuYW1lPzogc3RyaW5nO1xuICAvKipcbiAgICogQGRlcHJlY2F0ZWQgVXNlIGBtYXBSb3V0ZVByb3BlcnRpZXNgIGluc3RlYWRcbiAgICovXG4gIGRldGVjdEVycm9yQm91bmRhcnk/OiBEZXRlY3RFcnJvckJvdW5kYXJ5RnVuY3Rpb247XG4gIG1hcFJvdXRlUHJvcGVydGllcz86IE1hcFJvdXRlUHJvcGVydGllc0Z1bmN0aW9uO1xuICBmdXR1cmU/OiBQYXJ0aWFsPEZ1dHVyZUNvbmZpZz47XG4gIGh5ZHJhdGlvbkRhdGE/OiBIeWRyYXRpb25TdGF0ZTtcbiAgd2luZG93PzogV2luZG93O1xufVxuXG4vKipcbiAqIFN0YXRlIHJldHVybmVkIGZyb20gYSBzZXJ2ZXItc2lkZSBxdWVyeSgpIGNhbGxcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBTdGF0aWNIYW5kbGVyQ29udGV4dCB7XG4gIGJhc2VuYW1lOiBSb3V0ZXJbXCJiYXNlbmFtZVwiXTtcbiAgbG9jYXRpb246IFJvdXRlclN0YXRlW1wibG9jYXRpb25cIl07XG4gIG1hdGNoZXM6IFJvdXRlclN0YXRlW1wibWF0Y2hlc1wiXTtcbiAgbG9hZGVyRGF0YTogUm91dGVyU3RhdGVbXCJsb2FkZXJEYXRhXCJdO1xuICBhY3Rpb25EYXRhOiBSb3V0ZXJTdGF0ZVtcImFjdGlvbkRhdGFcIl07XG4gIGVycm9yczogUm91dGVyU3RhdGVbXCJlcnJvcnNcIl07XG4gIHN0YXR1c0NvZGU6IG51bWJlcjtcbiAgbG9hZGVySGVhZGVyczogUmVjb3JkPHN0cmluZywgSGVhZGVycz47XG4gIGFjdGlvbkhlYWRlcnM6IFJlY29yZDxzdHJpbmcsIEhlYWRlcnM+O1xuICBhY3RpdmVEZWZlcnJlZHM6IFJlY29yZDxzdHJpbmcsIERlZmVycmVkRGF0YT4gfCBudWxsO1xuICBfZGVlcGVzdFJlbmRlcmVkQm91bmRhcnlJZD86IHN0cmluZyB8IG51bGw7XG59XG5cbi8qKlxuICogQSBTdGF0aWNIYW5kbGVyIGluc3RhbmNlIG1hbmFnZXMgYSBzaW5ndWxhciBTU1IgbmF2aWdhdGlvbi9mZXRjaCBldmVudFxuICovXG5leHBvcnQgaW50ZXJmYWNlIFN0YXRpY0hhbmRsZXIge1xuICBkYXRhUm91dGVzOiBBZ25vc3RpY0RhdGFSb3V0ZU9iamVjdFtdO1xuICBxdWVyeShcbiAgICByZXF1ZXN0OiBSZXF1ZXN0LFxuICAgIG9wdHM/OiB7IHJlcXVlc3RDb250ZXh0PzogdW5rbm93biB9XG4gICk6IFByb21pc2U8U3RhdGljSGFuZGxlckNvbnRleHQgfCBSZXNwb25zZT47XG4gIHF1ZXJ5Um91dGUoXG4gICAgcmVxdWVzdDogUmVxdWVzdCxcbiAgICBvcHRzPzogeyByb3V0ZUlkPzogc3RyaW5nOyByZXF1ZXN0Q29udGV4dD86IHVua25vd24gfVxuICApOiBQcm9taXNlPGFueT47XG59XG5cbnR5cGUgVmlld1RyYW5zaXRpb25PcHRzID0ge1xuICBjdXJyZW50TG9jYXRpb246IExvY2F0aW9uO1xuICBuZXh0TG9jYXRpb246IExvY2F0aW9uO1xufTtcblxuLyoqXG4gKiBTdWJzY3JpYmVyIGZ1bmN0aW9uIHNpZ25hdHVyZSBmb3IgY2hhbmdlcyB0byByb3V0ZXIgc3RhdGVcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBSb3V0ZXJTdWJzY3JpYmVyIHtcbiAgKFxuICAgIHN0YXRlOiBSb3V0ZXJTdGF0ZSxcbiAgICBvcHRzOiB7XG4gICAgICBkZWxldGVkRmV0Y2hlcnM6IHN0cmluZ1tdO1xuICAgICAgdW5zdGFibGVfdmlld1RyYW5zaXRpb25PcHRzPzogVmlld1RyYW5zaXRpb25PcHRzO1xuICAgICAgdW5zdGFibGVfZmx1c2hTeW5jOiBib29sZWFuO1xuICAgIH1cbiAgKTogdm9pZDtcbn1cblxuLyoqXG4gKiBGdW5jdGlvbiBzaWduYXR1cmUgZm9yIGRldGVybWluaW5nIHRoZSBrZXkgdG8gYmUgdXNlZCBpbiBzY3JvbGwgcmVzdG9yYXRpb25cbiAqIGZvciBhIGdpdmVuIGxvY2F0aW9uXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgR2V0U2Nyb2xsUmVzdG9yYXRpb25LZXlGdW5jdGlvbiB7XG4gIChsb2NhdGlvbjogTG9jYXRpb24sIG1hdGNoZXM6IFVJTWF0Y2hbXSk6IHN0cmluZyB8IG51bGw7XG59XG5cbi8qKlxuICogRnVuY3Rpb24gc2lnbmF0dXJlIGZvciBkZXRlcm1pbmluZyB0aGUgY3VycmVudCBzY3JvbGwgcG9zaXRpb25cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBHZXRTY3JvbGxQb3NpdGlvbkZ1bmN0aW9uIHtcbiAgKCk6IG51bWJlcjtcbn1cblxuZXhwb3J0IHR5cGUgUmVsYXRpdmVSb3V0aW5nVHlwZSA9IFwicm91dGVcIiB8IFwicGF0aFwiO1xuXG4vLyBBbGxvd2VkIGZvciBhbnkgbmF2aWdhdGlvbiBvciBmZXRjaFxudHlwZSBCYXNlTmF2aWdhdGVPckZldGNoT3B0aW9ucyA9IHtcbiAgcHJldmVudFNjcm9sbFJlc2V0PzogYm9vbGVhbjtcbiAgcmVsYXRpdmU/OiBSZWxhdGl2ZVJvdXRpbmdUeXBlO1xuICB1bnN0YWJsZV9mbHVzaFN5bmM/OiBib29sZWFuO1xufTtcblxuLy8gT25seSBhbGxvd2VkIGZvciBuYXZpZ2F0aW9uc1xudHlwZSBCYXNlTmF2aWdhdGVPcHRpb25zID0gQmFzZU5hdmlnYXRlT3JGZXRjaE9wdGlvbnMgJiB7XG4gIHJlcGxhY2U/OiBib29sZWFuO1xuICBzdGF0ZT86IGFueTtcbiAgZnJvbVJvdXRlSWQ/OiBzdHJpbmc7XG4gIHVuc3RhYmxlX3ZpZXdUcmFuc2l0aW9uPzogYm9vbGVhbjtcbn07XG5cbi8vIE9ubHkgYWxsb3dlZCBmb3Igc3VibWlzc2lvbiBuYXZpZ2F0aW9uc1xudHlwZSBCYXNlU3VibWlzc2lvbk9wdGlvbnMgPSB7XG4gIGZvcm1NZXRob2Q/OiBIVE1MRm9ybU1ldGhvZDtcbiAgZm9ybUVuY1R5cGU/OiBGb3JtRW5jVHlwZTtcbn0gJiAoXG4gIHwgeyBmb3JtRGF0YTogRm9ybURhdGE7IGJvZHk/OiB1bmRlZmluZWQgfVxuICB8IHsgZm9ybURhdGE/OiB1bmRlZmluZWQ7IGJvZHk6IGFueSB9XG4pO1xuXG4vKipcbiAqIE9wdGlvbnMgZm9yIGEgbmF2aWdhdGUoKSBjYWxsIGZvciBhIG5vcm1hbCAobm9uLXN1Ym1pc3Npb24pIG5hdmlnYXRpb25cbiAqL1xudHlwZSBMaW5rTmF2aWdhdGVPcHRpb25zID0gQmFzZU5hdmlnYXRlT3B0aW9ucztcblxuLyoqXG4gKiBPcHRpb25zIGZvciBhIG5hdmlnYXRlKCkgY2FsbCBmb3IgYSBzdWJtaXNzaW9uIG5hdmlnYXRpb25cbiAqL1xudHlwZSBTdWJtaXNzaW9uTmF2aWdhdGVPcHRpb25zID0gQmFzZU5hdmlnYXRlT3B0aW9ucyAmIEJhc2VTdWJtaXNzaW9uT3B0aW9ucztcblxuLyoqXG4gKiBPcHRpb25zIHRvIHBhc3MgdG8gbmF2aWdhdGUoKSBmb3IgYSBuYXZpZ2F0aW9uXG4gKi9cbmV4cG9ydCB0eXBlIFJvdXRlck5hdmlnYXRlT3B0aW9ucyA9XG4gIHwgTGlua05hdmlnYXRlT3B0aW9uc1xuICB8IFN1Ym1pc3Npb25OYXZpZ2F0ZU9wdGlvbnM7XG5cbi8qKlxuICogT3B0aW9ucyBmb3IgYSBmZXRjaCgpIGxvYWRcbiAqL1xudHlwZSBMb2FkRmV0Y2hPcHRpb25zID0gQmFzZU5hdmlnYXRlT3JGZXRjaE9wdGlvbnM7XG5cbi8qKlxuICogT3B0aW9ucyBmb3IgYSBmZXRjaCgpIHN1Ym1pc3Npb25cbiAqL1xudHlwZSBTdWJtaXRGZXRjaE9wdGlvbnMgPSBCYXNlTmF2aWdhdGVPckZldGNoT3B0aW9ucyAmIEJhc2VTdWJtaXNzaW9uT3B0aW9ucztcblxuLyoqXG4gKiBPcHRpb25zIHRvIHBhc3MgdG8gZmV0Y2goKVxuICovXG5leHBvcnQgdHlwZSBSb3V0ZXJGZXRjaE9wdGlvbnMgPSBMb2FkRmV0Y2hPcHRpb25zIHwgU3VibWl0RmV0Y2hPcHRpb25zO1xuXG4vKipcbiAqIFBvdGVudGlhbCBzdGF0ZXMgZm9yIHN0YXRlLm5hdmlnYXRpb25cbiAqL1xuZXhwb3J0IHR5cGUgTmF2aWdhdGlvblN0YXRlcyA9IHtcbiAgSWRsZToge1xuICAgIHN0YXRlOiBcImlkbGVcIjtcbiAgICBsb2NhdGlvbjogdW5kZWZpbmVkO1xuICAgIGZvcm1NZXRob2Q6IHVuZGVmaW5lZDtcbiAgICBmb3JtQWN0aW9uOiB1bmRlZmluZWQ7XG4gICAgZm9ybUVuY1R5cGU6IHVuZGVmaW5lZDtcbiAgICBmb3JtRGF0YTogdW5kZWZpbmVkO1xuICAgIGpzb246IHVuZGVmaW5lZDtcbiAgICB0ZXh0OiB1bmRlZmluZWQ7XG4gIH07XG4gIExvYWRpbmc6IHtcbiAgICBzdGF0ZTogXCJsb2FkaW5nXCI7XG4gICAgbG9jYXRpb246IExvY2F0aW9uO1xuICAgIGZvcm1NZXRob2Q6IFN1Ym1pc3Npb25bXCJmb3JtTWV0aG9kXCJdIHwgdW5kZWZpbmVkO1xuICAgIGZvcm1BY3Rpb246IFN1Ym1pc3Npb25bXCJmb3JtQWN0aW9uXCJdIHwgdW5kZWZpbmVkO1xuICAgIGZvcm1FbmNUeXBlOiBTdWJtaXNzaW9uW1wiZm9ybUVuY1R5cGVcIl0gfCB1bmRlZmluZWQ7XG4gICAgZm9ybURhdGE6IFN1Ym1pc3Npb25bXCJmb3JtRGF0YVwiXSB8IHVuZGVmaW5lZDtcbiAgICBqc29uOiBTdWJtaXNzaW9uW1wianNvblwiXSB8IHVuZGVmaW5lZDtcbiAgICB0ZXh0OiBTdWJtaXNzaW9uW1widGV4dFwiXSB8IHVuZGVmaW5lZDtcbiAgfTtcbiAgU3VibWl0dGluZzoge1xuICAgIHN0YXRlOiBcInN1Ym1pdHRpbmdcIjtcbiAgICBsb2NhdGlvbjogTG9jYXRpb247XG4gICAgZm9ybU1ldGhvZDogU3VibWlzc2lvbltcImZvcm1NZXRob2RcIl07XG4gICAgZm9ybUFjdGlvbjogU3VibWlzc2lvbltcImZvcm1BY3Rpb25cIl07XG4gICAgZm9ybUVuY1R5cGU6IFN1Ym1pc3Npb25bXCJmb3JtRW5jVHlwZVwiXTtcbiAgICBmb3JtRGF0YTogU3VibWlzc2lvbltcImZvcm1EYXRhXCJdO1xuICAgIGpzb246IFN1Ym1pc3Npb25bXCJqc29uXCJdO1xuICAgIHRleHQ6IFN1Ym1pc3Npb25bXCJ0ZXh0XCJdO1xuICB9O1xufTtcblxuZXhwb3J0IHR5cGUgTmF2aWdhdGlvbiA9IE5hdmlnYXRpb25TdGF0ZXNba2V5b2YgTmF2aWdhdGlvblN0YXRlc107XG5cbmV4cG9ydCB0eXBlIFJldmFsaWRhdGlvblN0YXRlID0gXCJpZGxlXCIgfCBcImxvYWRpbmdcIjtcblxuLyoqXG4gKiBQb3RlbnRpYWwgc3RhdGVzIGZvciBmZXRjaGVyc1xuICovXG50eXBlIEZldGNoZXJTdGF0ZXM8VERhdGEgPSBhbnk+ID0ge1xuICBJZGxlOiB7XG4gICAgc3RhdGU6IFwiaWRsZVwiO1xuICAgIGZvcm1NZXRob2Q6IHVuZGVmaW5lZDtcbiAgICBmb3JtQWN0aW9uOiB1bmRlZmluZWQ7XG4gICAgZm9ybUVuY1R5cGU6IHVuZGVmaW5lZDtcbiAgICB0ZXh0OiB1bmRlZmluZWQ7XG4gICAgZm9ybURhdGE6IHVuZGVmaW5lZDtcbiAgICBqc29uOiB1bmRlZmluZWQ7XG4gICAgZGF0YTogVERhdGEgfCB1bmRlZmluZWQ7XG4gIH07XG4gIExvYWRpbmc6IHtcbiAgICBzdGF0ZTogXCJsb2FkaW5nXCI7XG4gICAgZm9ybU1ldGhvZDogU3VibWlzc2lvbltcImZvcm1NZXRob2RcIl0gfCB1bmRlZmluZWQ7XG4gICAgZm9ybUFjdGlvbjogU3VibWlzc2lvbltcImZvcm1BY3Rpb25cIl0gfCB1bmRlZmluZWQ7XG4gICAgZm9ybUVuY1R5cGU6IFN1Ym1pc3Npb25bXCJmb3JtRW5jVHlwZVwiXSB8IHVuZGVmaW5lZDtcbiAgICB0ZXh0OiBTdWJtaXNzaW9uW1widGV4dFwiXSB8IHVuZGVmaW5lZDtcbiAgICBmb3JtRGF0YTogU3VibWlzc2lvbltcImZvcm1EYXRhXCJdIHwgdW5kZWZpbmVkO1xuICAgIGpzb246IFN1Ym1pc3Npb25bXCJqc29uXCJdIHwgdW5kZWZpbmVkO1xuICAgIGRhdGE6IFREYXRhIHwgdW5kZWZpbmVkO1xuICB9O1xuICBTdWJtaXR0aW5nOiB7XG4gICAgc3RhdGU6IFwic3VibWl0dGluZ1wiO1xuICAgIGZvcm1NZXRob2Q6IFN1Ym1pc3Npb25bXCJmb3JtTWV0aG9kXCJdO1xuICAgIGZvcm1BY3Rpb246IFN1Ym1pc3Npb25bXCJmb3JtQWN0aW9uXCJdO1xuICAgIGZvcm1FbmNUeXBlOiBTdWJtaXNzaW9uW1wiZm9ybUVuY1R5cGVcIl07XG4gICAgdGV4dDogU3VibWlzc2lvbltcInRleHRcIl07XG4gICAgZm9ybURhdGE6IFN1Ym1pc3Npb25bXCJmb3JtRGF0YVwiXTtcbiAgICBqc29uOiBTdWJtaXNzaW9uW1wianNvblwiXTtcbiAgICBkYXRhOiBURGF0YSB8IHVuZGVmaW5lZDtcbiAgfTtcbn07XG5cbmV4cG9ydCB0eXBlIEZldGNoZXI8VERhdGEgPSBhbnk+ID1cbiAgRmV0Y2hlclN0YXRlczxURGF0YT5ba2V5b2YgRmV0Y2hlclN0YXRlczxURGF0YT5dO1xuXG5pbnRlcmZhY2UgQmxvY2tlckJsb2NrZWQge1xuICBzdGF0ZTogXCJibG9ja2VkXCI7XG4gIHJlc2V0KCk6IHZvaWQ7XG4gIHByb2NlZWQoKTogdm9pZDtcbiAgbG9jYXRpb246IExvY2F0aW9uO1xufVxuXG5pbnRlcmZhY2UgQmxvY2tlclVuYmxvY2tlZCB7XG4gIHN0YXRlOiBcInVuYmxvY2tlZFwiO1xuICByZXNldDogdW5kZWZpbmVkO1xuICBwcm9jZWVkOiB1bmRlZmluZWQ7XG4gIGxvY2F0aW9uOiB1bmRlZmluZWQ7XG59XG5cbmludGVyZmFjZSBCbG9ja2VyUHJvY2VlZGluZyB7XG4gIHN0YXRlOiBcInByb2NlZWRpbmdcIjtcbiAgcmVzZXQ6IHVuZGVmaW5lZDtcbiAgcHJvY2VlZDogdW5kZWZpbmVkO1xuICBsb2NhdGlvbjogTG9jYXRpb247XG59XG5cbmV4cG9ydCB0eXBlIEJsb2NrZXIgPSBCbG9ja2VyVW5ibG9ja2VkIHwgQmxvY2tlckJsb2NrZWQgfCBCbG9ja2VyUHJvY2VlZGluZztcblxuZXhwb3J0IHR5cGUgQmxvY2tlckZ1bmN0aW9uID0gKGFyZ3M6IHtcbiAgY3VycmVudExvY2F0aW9uOiBMb2NhdGlvbjtcbiAgbmV4dExvY2F0aW9uOiBMb2NhdGlvbjtcbiAgaGlzdG9yeUFjdGlvbjogSGlzdG9yeUFjdGlvbjtcbn0pID0+IGJvb2xlYW47XG5cbmludGVyZmFjZSBTaG9ydENpcmN1aXRhYmxlIHtcbiAgLyoqXG4gICAqIHN0YXJ0TmF2aWdhdGlvbiBkb2VzIG5vdCBuZWVkIHRvIGNvbXBsZXRlIHRoZSBuYXZpZ2F0aW9uIGJlY2F1c2Ugd2VcbiAgICogcmVkaXJlY3RlZCBvciBnb3QgaW50ZXJydXB0ZWRcbiAgICovXG4gIHNob3J0Q2lyY3VpdGVkPzogYm9vbGVhbjtcbn1cblxuaW50ZXJmYWNlIEhhbmRsZUFjdGlvblJlc3VsdCBleHRlbmRzIFNob3J0Q2lyY3VpdGFibGUge1xuICAvKipcbiAgICogRXJyb3IgdGhyb3duIGZyb20gdGhlIGN1cnJlbnQgYWN0aW9uLCBrZXllZCBieSB0aGUgcm91dGUgY29udGFpbmluZyB0aGVcbiAgICogZXJyb3IgYm91bmRhcnkgdG8gcmVuZGVyIHRoZSBlcnJvci4gIFRvIGJlIGNvbW1pdHRlZCB0byB0aGUgc3RhdGUgYWZ0ZXJcbiAgICogbG9hZGVycyBoYXZlIGNvbXBsZXRlZFxuICAgKi9cbiAgcGVuZGluZ0FjdGlvbkVycm9yPzogUm91dGVEYXRhO1xuICAvKipcbiAgICogRGF0YSByZXR1cm5lZCBmcm9tIHRoZSBjdXJyZW50IGFjdGlvbiwga2V5ZWQgYnkgdGhlIHJvdXRlIG93bmluZyB0aGUgYWN0aW9uLlxuICAgKiBUbyBiZSBjb21taXR0ZWQgdG8gdGhlIHN0YXRlIGFmdGVyIGxvYWRlcnMgaGF2ZSBjb21wbGV0ZWRcbiAgICovXG4gIHBlbmRpbmdBY3Rpb25EYXRhPzogUm91dGVEYXRhO1xufVxuXG5pbnRlcmZhY2UgSGFuZGxlTG9hZGVyc1Jlc3VsdCBleHRlbmRzIFNob3J0Q2lyY3VpdGFibGUge1xuICAvKipcbiAgICogbG9hZGVyRGF0YSByZXR1cm5lZCBmcm9tIHRoZSBjdXJyZW50IHNldCBvZiBsb2FkZXJzXG4gICAqL1xuICBsb2FkZXJEYXRhPzogUm91dGVyU3RhdGVbXCJsb2FkZXJEYXRhXCJdO1xuICAvKipcbiAgICogZXJyb3JzIHRocm93biBmcm9tIHRoZSBjdXJyZW50IHNldCBvZiBsb2FkZXJzXG4gICAqL1xuICBlcnJvcnM/OiBSb3V0ZXJTdGF0ZVtcImVycm9yc1wiXTtcbn1cblxuLyoqXG4gKiBDYWNoZWQgaW5mbyBmb3IgYWN0aXZlIGZldGNoZXIubG9hZCgpIGluc3RhbmNlcyBzbyB0aGV5IGNhbiBwYXJ0aWNpcGF0ZVxuICogaW4gcmV2YWxpZGF0aW9uXG4gKi9cbmludGVyZmFjZSBGZXRjaExvYWRNYXRjaCB7XG4gIHJvdXRlSWQ6IHN0cmluZztcbiAgcGF0aDogc3RyaW5nO1xufVxuXG4vKipcbiAqIElkZW50aWZpZWQgZmV0Y2hlci5sb2FkKCkgY2FsbHMgdGhhdCBuZWVkIHRvIGJlIHJldmFsaWRhdGVkXG4gKi9cbmludGVyZmFjZSBSZXZhbGlkYXRpbmdGZXRjaGVyIGV4dGVuZHMgRmV0Y2hMb2FkTWF0Y2gge1xuICBrZXk6IHN0cmluZztcbiAgbWF0Y2g6IEFnbm9zdGljRGF0YVJvdXRlTWF0Y2ggfCBudWxsO1xuICBtYXRjaGVzOiBBZ25vc3RpY0RhdGFSb3V0ZU1hdGNoW10gfCBudWxsO1xuICBjb250cm9sbGVyOiBBYm9ydENvbnRyb2xsZXIgfCBudWxsO1xufVxuXG4vKipcbiAqIFdyYXBwZXIgb2JqZWN0IHRvIGFsbG93IHVzIHRvIHRocm93IGFueSByZXNwb25zZSBvdXQgZnJvbSBjYWxsTG9hZGVyT3JBY3Rpb25cbiAqIGZvciBxdWVyeVJvdXRlciB3aGlsZSBwcmVzZXJ2aW5nIHdoZXRoZXIgb3Igbm90IGl0IHdhcyB0aHJvd24gb3IgcmV0dXJuZWRcbiAqIGZyb20gdGhlIGxvYWRlci9hY3Rpb25cbiAqL1xuaW50ZXJmYWNlIFF1ZXJ5Um91dGVSZXNwb25zZSB7XG4gIHR5cGU6IFJlc3VsdFR5cGUuZGF0YSB8IFJlc3VsdFR5cGUuZXJyb3I7XG4gIHJlc3BvbnNlOiBSZXNwb25zZTtcbn1cblxuY29uc3QgdmFsaWRNdXRhdGlvbk1ldGhvZHNBcnI6IE11dGF0aW9uRm9ybU1ldGhvZFtdID0gW1xuICBcInBvc3RcIixcbiAgXCJwdXRcIixcbiAgXCJwYXRjaFwiLFxuICBcImRlbGV0ZVwiLFxuXTtcbmNvbnN0IHZhbGlkTXV0YXRpb25NZXRob2RzID0gbmV3IFNldDxNdXRhdGlvbkZvcm1NZXRob2Q+KFxuICB2YWxpZE11dGF0aW9uTWV0aG9kc0FyclxuKTtcblxuY29uc3QgdmFsaWRSZXF1ZXN0TWV0aG9kc0FycjogRm9ybU1ldGhvZFtdID0gW1xuICBcImdldFwiLFxuICAuLi52YWxpZE11dGF0aW9uTWV0aG9kc0Fycixcbl07XG5jb25zdCB2YWxpZFJlcXVlc3RNZXRob2RzID0gbmV3IFNldDxGb3JtTWV0aG9kPih2YWxpZFJlcXVlc3RNZXRob2RzQXJyKTtcblxuY29uc3QgcmVkaXJlY3RTdGF0dXNDb2RlcyA9IG5ldyBTZXQoWzMwMSwgMzAyLCAzMDMsIDMwNywgMzA4XSk7XG5jb25zdCByZWRpcmVjdFByZXNlcnZlTWV0aG9kU3RhdHVzQ29kZXMgPSBuZXcgU2V0KFszMDcsIDMwOF0pO1xuXG5leHBvcnQgY29uc3QgSURMRV9OQVZJR0FUSU9OOiBOYXZpZ2F0aW9uU3RhdGVzW1wiSWRsZVwiXSA9IHtcbiAgc3RhdGU6IFwiaWRsZVwiLFxuICBsb2NhdGlvbjogdW5kZWZpbmVkLFxuICBmb3JtTWV0aG9kOiB1bmRlZmluZWQsXG4gIGZvcm1BY3Rpb246IHVuZGVmaW5lZCxcbiAgZm9ybUVuY1R5cGU6IHVuZGVmaW5lZCxcbiAgZm9ybURhdGE6IHVuZGVmaW5lZCxcbiAganNvbjogdW5kZWZpbmVkLFxuICB0ZXh0OiB1bmRlZmluZWQsXG59O1xuXG5leHBvcnQgY29uc3QgSURMRV9GRVRDSEVSOiBGZXRjaGVyU3RhdGVzW1wiSWRsZVwiXSA9IHtcbiAgc3RhdGU6IFwiaWRsZVwiLFxuICBkYXRhOiB1bmRlZmluZWQsXG4gIGZvcm1NZXRob2Q6IHVuZGVmaW5lZCxcbiAgZm9ybUFjdGlvbjogdW5kZWZpbmVkLFxuICBmb3JtRW5jVHlwZTogdW5kZWZpbmVkLFxuICBmb3JtRGF0YTogdW5kZWZpbmVkLFxuICBqc29uOiB1bmRlZmluZWQsXG4gIHRleHQ6IHVuZGVmaW5lZCxcbn07XG5cbmV4cG9ydCBjb25zdCBJRExFX0JMT0NLRVI6IEJsb2NrZXJVbmJsb2NrZWQgPSB7XG4gIHN0YXRlOiBcInVuYmxvY2tlZFwiLFxuICBwcm9jZWVkOiB1bmRlZmluZWQsXG4gIHJlc2V0OiB1bmRlZmluZWQsXG4gIGxvY2F0aW9uOiB1bmRlZmluZWQsXG59O1xuXG5jb25zdCBBQlNPTFVURV9VUkxfUkVHRVggPSAvXig/OlthLXpdW2EtejAtOSsuLV0qOnxcXC9cXC8pL2k7XG5cbmNvbnN0IGRlZmF1bHRNYXBSb3V0ZVByb3BlcnRpZXM6IE1hcFJvdXRlUHJvcGVydGllc0Z1bmN0aW9uID0gKHJvdXRlKSA9PiAoe1xuICBoYXNFcnJvckJvdW5kYXJ5OiBCb29sZWFuKHJvdXRlLmhhc0Vycm9yQm91bmRhcnkpLFxufSk7XG5cbmNvbnN0IFRSQU5TSVRJT05TX1NUT1JBR0VfS0VZID0gXCJyZW1peC1yb3V0ZXItdHJhbnNpdGlvbnNcIjtcblxuLy8jZW5kcmVnaW9uXG5cbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyNyZWdpb24gY3JlYXRlUm91dGVyXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG4vKipcbiAqIENyZWF0ZSBhIHJvdXRlciBhbmQgbGlzdGVuIHRvIGhpc3RvcnkgUE9QIG5hdmlnYXRpb25zXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVSb3V0ZXIoaW5pdDogUm91dGVySW5pdCk6IFJvdXRlciB7XG4gIGNvbnN0IHJvdXRlcldpbmRvdyA9IGluaXQud2luZG93XG4gICAgPyBpbml0LndpbmRvd1xuICAgIDogdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIlxuICAgID8gd2luZG93XG4gICAgOiB1bmRlZmluZWQ7XG4gIGNvbnN0IGlzQnJvd3NlciA9XG4gICAgdHlwZW9mIHJvdXRlcldpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiAmJlxuICAgIHR5cGVvZiByb3V0ZXJXaW5kb3cuZG9jdW1lbnQgIT09IFwidW5kZWZpbmVkXCIgJiZcbiAgICB0eXBlb2Ygcm91dGVyV2luZG93LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQgIT09IFwidW5kZWZpbmVkXCI7XG4gIGNvbnN0IGlzU2VydmVyID0gIWlzQnJvd3NlcjtcblxuICBpbnZhcmlhbnQoXG4gICAgaW5pdC5yb3V0ZXMubGVuZ3RoID4gMCxcbiAgICBcIllvdSBtdXN0IHByb3ZpZGUgYSBub24tZW1wdHkgcm91dGVzIGFycmF5IHRvIGNyZWF0ZVJvdXRlclwiXG4gICk7XG5cbiAgbGV0IG1hcFJvdXRlUHJvcGVydGllczogTWFwUm91dGVQcm9wZXJ0aWVzRnVuY3Rpb247XG4gIGlmIChpbml0Lm1hcFJvdXRlUHJvcGVydGllcykge1xuICAgIG1hcFJvdXRlUHJvcGVydGllcyA9IGluaXQubWFwUm91dGVQcm9wZXJ0aWVzO1xuICB9IGVsc2UgaWYgKGluaXQuZGV0ZWN0RXJyb3JCb3VuZGFyeSkge1xuICAgIC8vIElmIHRoZXkgYXJlIHN0aWxsIHVzaW5nIHRoZSBkZXByZWNhdGVkIHZlcnNpb24sIHdyYXAgaXQgd2l0aCB0aGUgbmV3IEFQSVxuICAgIGxldCBkZXRlY3RFcnJvckJvdW5kYXJ5ID0gaW5pdC5kZXRlY3RFcnJvckJvdW5kYXJ5O1xuICAgIG1hcFJvdXRlUHJvcGVydGllcyA9IChyb3V0ZSkgPT4gKHtcbiAgICAgIGhhc0Vycm9yQm91bmRhcnk6IGRldGVjdEVycm9yQm91bmRhcnkocm91dGUpLFxuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIG1hcFJvdXRlUHJvcGVydGllcyA9IGRlZmF1bHRNYXBSb3V0ZVByb3BlcnRpZXM7XG4gIH1cblxuICAvLyBSb3V0ZXMga2V5ZWQgYnkgSURcbiAgbGV0IG1hbmlmZXN0OiBSb3V0ZU1hbmlmZXN0ID0ge307XG4gIC8vIFJvdXRlcyBpbiB0cmVlIGZvcm1hdCBmb3IgbWF0Y2hpbmdcbiAgbGV0IGRhdGFSb3V0ZXMgPSBjb252ZXJ0Um91dGVzVG9EYXRhUm91dGVzKFxuICAgIGluaXQucm91dGVzLFxuICAgIG1hcFJvdXRlUHJvcGVydGllcyxcbiAgICB1bmRlZmluZWQsXG4gICAgbWFuaWZlc3RcbiAgKTtcbiAgbGV0IGluRmxpZ2h0RGF0YVJvdXRlczogQWdub3N0aWNEYXRhUm91dGVPYmplY3RbXSB8IHVuZGVmaW5lZDtcbiAgbGV0IGJhc2VuYW1lID0gaW5pdC5iYXNlbmFtZSB8fCBcIi9cIjtcbiAgLy8gQ29uZmlnIGRyaXZlbiBiZWhhdmlvciBmbGFnc1xuICBsZXQgZnV0dXJlOiBGdXR1cmVDb25maWcgPSB7XG4gICAgdjdfZmV0Y2hlclBlcnNpc3Q6IGZhbHNlLFxuICAgIHY3X25vcm1hbGl6ZUZvcm1NZXRob2Q6IGZhbHNlLFxuICAgIHY3X3BhcnRpYWxIeWRyYXRpb246IGZhbHNlLFxuICAgIHY3X3ByZXBlbmRCYXNlbmFtZTogZmFsc2UsXG4gICAgdjdfcmVsYXRpdmVTcGxhdFBhdGg6IGZhbHNlLFxuICAgIC4uLmluaXQuZnV0dXJlLFxuICB9O1xuICAvLyBDbGVhbnVwIGZ1bmN0aW9uIGZvciBoaXN0b3J5XG4gIGxldCB1bmxpc3Rlbkhpc3Rvcnk6ICgoKSA9PiB2b2lkKSB8IG51bGwgPSBudWxsO1xuICAvLyBFeHRlcm5hbGx5LXByb3ZpZGVkIGZ1bmN0aW9ucyB0byBjYWxsIG9uIGFsbCBzdGF0ZSBjaGFuZ2VzXG4gIGxldCBzdWJzY3JpYmVycyA9IG5ldyBTZXQ8Um91dGVyU3Vic2NyaWJlcj4oKTtcbiAgLy8gRXh0ZXJuYWxseS1wcm92aWRlZCBvYmplY3QgdG8gaG9sZCBzY3JvbGwgcmVzdG9yYXRpb24gbG9jYXRpb25zIGR1cmluZyByb3V0aW5nXG4gIGxldCBzYXZlZFNjcm9sbFBvc2l0aW9uczogUmVjb3JkPHN0cmluZywgbnVtYmVyPiB8IG51bGwgPSBudWxsO1xuICAvLyBFeHRlcm5hbGx5LXByb3ZpZGVkIGZ1bmN0aW9uIHRvIGdldCBzY3JvbGwgcmVzdG9yYXRpb24ga2V5c1xuICBsZXQgZ2V0U2Nyb2xsUmVzdG9yYXRpb25LZXk6IEdldFNjcm9sbFJlc3RvcmF0aW9uS2V5RnVuY3Rpb24gfCBudWxsID0gbnVsbDtcbiAgLy8gRXh0ZXJuYWxseS1wcm92aWRlZCBmdW5jdGlvbiB0byBnZXQgY3VycmVudCBzY3JvbGwgcG9zaXRpb25cbiAgbGV0IGdldFNjcm9sbFBvc2l0aW9uOiBHZXRTY3JvbGxQb3NpdGlvbkZ1bmN0aW9uIHwgbnVsbCA9IG51bGw7XG4gIC8vIE9uZS10aW1lIGZsYWcgdG8gY29udHJvbCB0aGUgaW5pdGlhbCBoeWRyYXRpb24gc2Nyb2xsIHJlc3RvcmF0aW9uLiAgQmVjYXVzZVxuICAvLyB3ZSBkb24ndCBnZXQgdGhlIHNhdmVkIHBvc2l0aW9ucyBmcm9tIDxTY3JvbGxSZXN0b3JhdGlvbiAvPiB1bnRpbCBfYWZ0ZXJfXG4gIC8vIHRoZSBpbml0aWFsIHJlbmRlciwgd2UgbmVlZCB0byBtYW51YWxseSB0cmlnZ2VyIGEgc2VwYXJhdGUgdXBkYXRlU3RhdGUgdG9cbiAgLy8gc2VuZCBhbG9uZyB0aGUgcmVzdG9yZVNjcm9sbFBvc2l0aW9uXG4gIC8vIFNldCB0byB0cnVlIGlmIHdlIGhhdmUgYGh5ZHJhdGlvbkRhdGFgIHNpbmNlIHdlIGFzc3VtZSB3ZSB3ZXJlIFNTUidkIGFuZCB0aGF0XG4gIC8vIFNTUiBkaWQgdGhlIGluaXRpYWwgc2Nyb2xsIHJlc3RvcmF0aW9uLlxuICBsZXQgaW5pdGlhbFNjcm9sbFJlc3RvcmVkID0gaW5pdC5oeWRyYXRpb25EYXRhICE9IG51bGw7XG5cbiAgbGV0IGluaXRpYWxNYXRjaGVzID0gbWF0Y2hSb3V0ZXMoZGF0YVJvdXRlcywgaW5pdC5oaXN0b3J5LmxvY2F0aW9uLCBiYXNlbmFtZSk7XG4gIGxldCBpbml0aWFsRXJyb3JzOiBSb3V0ZURhdGEgfCBudWxsID0gbnVsbDtcblxuICBpZiAoaW5pdGlhbE1hdGNoZXMgPT0gbnVsbCkge1xuICAgIC8vIElmIHdlIGRvIG5vdCBtYXRjaCBhIHVzZXItcHJvdmlkZWQtcm91dGUsIGZhbGwgYmFjayB0byB0aGUgcm9vdFxuICAgIC8vIHRvIGFsbG93IHRoZSBlcnJvciBib3VuZGFyeSB0byB0YWtlIG92ZXJcbiAgICBsZXQgZXJyb3IgPSBnZXRJbnRlcm5hbFJvdXRlckVycm9yKDQwNCwge1xuICAgICAgcGF0aG5hbWU6IGluaXQuaGlzdG9yeS5sb2NhdGlvbi5wYXRobmFtZSxcbiAgICB9KTtcbiAgICBsZXQgeyBtYXRjaGVzLCByb3V0ZSB9ID0gZ2V0U2hvcnRDaXJjdWl0TWF0Y2hlcyhkYXRhUm91dGVzKTtcbiAgICBpbml0aWFsTWF0Y2hlcyA9IG1hdGNoZXM7XG4gICAgaW5pdGlhbEVycm9ycyA9IHsgW3JvdXRlLmlkXTogZXJyb3IgfTtcbiAgfVxuXG4gIGxldCBpbml0aWFsaXplZDogYm9vbGVhbjtcbiAgbGV0IGhhc0xhenlSb3V0ZXMgPSBpbml0aWFsTWF0Y2hlcy5zb21lKChtKSA9PiBtLnJvdXRlLmxhenkpO1xuICBsZXQgaGFzTG9hZGVycyA9IGluaXRpYWxNYXRjaGVzLnNvbWUoKG0pID0+IG0ucm91dGUubG9hZGVyKTtcbiAgaWYgKGhhc0xhenlSb3V0ZXMpIHtcbiAgICAvLyBBbGwgaW5pdGlhbE1hdGNoZXMgbmVlZCB0byBiZSBsb2FkZWQgYmVmb3JlIHdlJ3JlIHJlYWR5LiAgSWYgd2UgaGF2ZSBsYXp5XG4gICAgLy8gZnVuY3Rpb25zIGFyb3VuZCBzdGlsbCB0aGVuIHdlJ2xsIG5lZWQgdG8gcnVuIHRoZW0gaW4gaW5pdGlhbGl6ZSgpXG4gICAgaW5pdGlhbGl6ZWQgPSBmYWxzZTtcbiAgfSBlbHNlIGlmICghaGFzTG9hZGVycykge1xuICAgIC8vIElmIHdlJ3ZlIGdvdCBubyBsb2FkZXJzIHRvIHJ1biwgdGhlbiB3ZSdyZSBnb29kIHRvIGdvXG4gICAgaW5pdGlhbGl6ZWQgPSB0cnVlO1xuICB9IGVsc2UgaWYgKGZ1dHVyZS52N19wYXJ0aWFsSHlkcmF0aW9uKSB7XG4gICAgLy8gSWYgcGFydGlhbCBoeWRyYXRpb24gaXMgZW5hYmxlZCwgd2UncmUgaW5pdGlhbGl6ZWQgc28gbG9uZyBhcyB3ZSB3ZXJlXG4gICAgLy8gcHJvdmlkZWQgd2l0aCBoeWRyYXRpb25EYXRhIGZvciBldmVyeSByb3V0ZSB3aXRoIGEgbG9hZGVyLCBhbmQgbm8gbG9hZGVyc1xuICAgIC8vIHdlcmUgbWFya2VkIGZvciBleHBsaWNpdCBoeWRyYXRpb25cbiAgICBsZXQgbG9hZGVyRGF0YSA9IGluaXQuaHlkcmF0aW9uRGF0YSA/IGluaXQuaHlkcmF0aW9uRGF0YS5sb2FkZXJEYXRhIDogbnVsbDtcbiAgICBsZXQgZXJyb3JzID0gaW5pdC5oeWRyYXRpb25EYXRhID8gaW5pdC5oeWRyYXRpb25EYXRhLmVycm9ycyA6IG51bGw7XG4gICAgbGV0IGlzUm91dGVJbml0aWFsaXplZCA9IChtOiBBZ25vc3RpY0RhdGFSb3V0ZU1hdGNoKSA9PiB7XG4gICAgICAvLyBObyBsb2FkZXIsIG5vdGhpbmcgdG8gaW5pdGlhbGl6ZVxuICAgICAgaWYgKCFtLnJvdXRlLmxvYWRlcikgcmV0dXJuIHRydWU7XG4gICAgICAvLyBFeHBsaWNpdGx5IG9wdGluZy1pbiB0byBydW5uaW5nIG9uIGh5ZHJhdGlvblxuICAgICAgaWYgKG0ucm91dGUubG9hZGVyLmh5ZHJhdGUgPT09IHRydWUpIHJldHVybiBmYWxzZTtcbiAgICAgIC8vIE90aGVyd2lzZSwgaW5pdGlhbGl6ZWQgaWYgaHlkcmF0ZWQgd2l0aCBkYXRhIG9yIGFuIGVycm9yXG4gICAgICByZXR1cm4gKFxuICAgICAgICAobG9hZGVyRGF0YSAmJiBsb2FkZXJEYXRhW20ucm91dGUuaWRdICE9PSB1bmRlZmluZWQpIHx8XG4gICAgICAgIChlcnJvcnMgJiYgZXJyb3JzW20ucm91dGUuaWRdICE9PSB1bmRlZmluZWQpXG4gICAgICApO1xuICAgIH07XG5cbiAgICAvLyBJZiBlcnJvcnMgZXhpc3QsIGRvbid0IGNvbnNpZGVyIHJvdXRlcyBiZWxvdyB0aGUgYm91bmRhcnlcbiAgICBpZiAoZXJyb3JzKSB7XG4gICAgICBsZXQgaWR4ID0gaW5pdGlhbE1hdGNoZXMuZmluZEluZGV4KFxuICAgICAgICAobSkgPT4gZXJyb3JzIVttLnJvdXRlLmlkXSAhPT0gdW5kZWZpbmVkXG4gICAgICApO1xuICAgICAgaW5pdGlhbGl6ZWQgPSBpbml0aWFsTWF0Y2hlcy5zbGljZSgwLCBpZHggKyAxKS5ldmVyeShpc1JvdXRlSW5pdGlhbGl6ZWQpO1xuICAgIH0gZWxzZSB7XG4gICAgICBpbml0aWFsaXplZCA9IGluaXRpYWxNYXRjaGVzLmV2ZXJ5KGlzUm91dGVJbml0aWFsaXplZCk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIC8vIFdpdGhvdXQgcGFydGlhbCBoeWRyYXRpb24gLSB3ZSdyZSBpbml0aWFsaXplZCBpZiB3ZSB3ZXJlIHByb3ZpZGVkIGFueVxuICAgIC8vIGh5ZHJhdGlvbkRhdGEgLSB3aGljaCBpcyBleHBlY3RlZCB0byBiZSBjb21wbGV0ZVxuICAgIGluaXRpYWxpemVkID0gaW5pdC5oeWRyYXRpb25EYXRhICE9IG51bGw7XG4gIH1cblxuICBsZXQgcm91dGVyOiBSb3V0ZXI7XG4gIGxldCBzdGF0ZTogUm91dGVyU3RhdGUgPSB7XG4gICAgaGlzdG9yeUFjdGlvbjogaW5pdC5oaXN0b3J5LmFjdGlvbixcbiAgICBsb2NhdGlvbjogaW5pdC5oaXN0b3J5LmxvY2F0aW9uLFxuICAgIG1hdGNoZXM6IGluaXRpYWxNYXRjaGVzLFxuICAgIGluaXRpYWxpemVkLFxuICAgIG5hdmlnYXRpb246IElETEVfTkFWSUdBVElPTixcbiAgICAvLyBEb24ndCByZXN0b3JlIG9uIGluaXRpYWwgdXBkYXRlU3RhdGUoKSBpZiB3ZSB3ZXJlIFNTUidkXG4gICAgcmVzdG9yZVNjcm9sbFBvc2l0aW9uOiBpbml0Lmh5ZHJhdGlvbkRhdGEgIT0gbnVsbCA/IGZhbHNlIDogbnVsbCxcbiAgICBwcmV2ZW50U2Nyb2xsUmVzZXQ6IGZhbHNlLFxuICAgIHJldmFsaWRhdGlvbjogXCJpZGxlXCIsXG4gICAgbG9hZGVyRGF0YTogKGluaXQuaHlkcmF0aW9uRGF0YSAmJiBpbml0Lmh5ZHJhdGlvbkRhdGEubG9hZGVyRGF0YSkgfHwge30sXG4gICAgYWN0aW9uRGF0YTogKGluaXQuaHlkcmF0aW9uRGF0YSAmJiBpbml0Lmh5ZHJhdGlvbkRhdGEuYWN0aW9uRGF0YSkgfHwgbnVsbCxcbiAgICBlcnJvcnM6IChpbml0Lmh5ZHJhdGlvbkRhdGEgJiYgaW5pdC5oeWRyYXRpb25EYXRhLmVycm9ycykgfHwgaW5pdGlhbEVycm9ycyxcbiAgICBmZXRjaGVyczogbmV3IE1hcCgpLFxuICAgIGJsb2NrZXJzOiBuZXcgTWFwKCksXG4gIH07XG5cbiAgLy8gLS0gU3RhdGVmdWwgaW50ZXJuYWwgdmFyaWFibGVzIHRvIG1hbmFnZSBuYXZpZ2F0aW9ucyAtLVxuICAvLyBDdXJyZW50IG5hdmlnYXRpb24gaW4gcHJvZ3Jlc3MgKHRvIGJlIGNvbW1pdHRlZCBpbiBjb21wbGV0ZU5hdmlnYXRpb24pXG4gIGxldCBwZW5kaW5nQWN0aW9uOiBIaXN0b3J5QWN0aW9uID0gSGlzdG9yeUFjdGlvbi5Qb3A7XG5cbiAgLy8gU2hvdWxkIHRoZSBjdXJyZW50IG5hdmlnYXRpb24gcHJldmVudCB0aGUgc2Nyb2xsIHJlc2V0IGlmIHNjcm9sbCBjYW5ub3RcbiAgLy8gYmUgcmVzdG9yZWQ/XG4gIGxldCBwZW5kaW5nUHJldmVudFNjcm9sbFJlc2V0ID0gZmFsc2U7XG5cbiAgLy8gQWJvcnRDb250cm9sbGVyIGZvciB0aGUgYWN0aXZlIG5hdmlnYXRpb25cbiAgbGV0IHBlbmRpbmdOYXZpZ2F0aW9uQ29udHJvbGxlcjogQWJvcnRDb250cm9sbGVyIHwgbnVsbDtcblxuICAvLyBTaG91bGQgdGhlIGN1cnJlbnQgbmF2aWdhdGlvbiBlbmFibGUgZG9jdW1lbnQuc3RhcnRWaWV3VHJhbnNpdGlvbj9cbiAgbGV0IHBlbmRpbmdWaWV3VHJhbnNpdGlvbkVuYWJsZWQgPSBmYWxzZTtcblxuICAvLyBTdG9yZSBhcHBsaWVkIHZpZXcgdHJhbnNpdGlvbnMgc28gd2UgY2FuIGFwcGx5IHRoZW0gb24gUE9QXG4gIGxldCBhcHBsaWVkVmlld1RyYW5zaXRpb25zOiBNYXA8c3RyaW5nLCBTZXQ8c3RyaW5nPj4gPSBuZXcgTWFwPFxuICAgIHN0cmluZyxcbiAgICBTZXQ8c3RyaW5nPlxuICA+KCk7XG5cbiAgLy8gQ2xlYW51cCBmdW5jdGlvbiBmb3IgcGVyc2lzdGluZyBhcHBsaWVkIHRyYW5zaXRpb25zIHRvIHNlc3Npb25TdG9yYWdlXG4gIGxldCByZW1vdmVQYWdlSGlkZUV2ZW50TGlzdGVuZXI6ICgoKSA9PiB2b2lkKSB8IG51bGwgPSBudWxsO1xuXG4gIC8vIFdlIHVzZSB0aGlzIHRvIGF2b2lkIHRvdWNoaW5nIGhpc3RvcnkgaW4gY29tcGxldGVOYXZpZ2F0aW9uIGlmIGFcbiAgLy8gcmV2YWxpZGF0aW9uIGlzIGVudGlyZWx5IHVuaW50ZXJydXB0ZWRcbiAgbGV0IGlzVW5pbnRlcnJ1cHRlZFJldmFsaWRhdGlvbiA9IGZhbHNlO1xuXG4gIC8vIFVzZSB0aGlzIGludGVybmFsIGZsYWcgdG8gZm9yY2UgcmV2YWxpZGF0aW9uIG9mIGFsbCBsb2FkZXJzOlxuICAvLyAgLSBzdWJtaXNzaW9ucyAoY29tcGxldGVkIG9yIGludGVycnVwdGVkKVxuICAvLyAgLSB1c2VSZXZhbGlkYXRvcigpXG4gIC8vICAtIFgtUmVtaXgtUmV2YWxpZGF0ZSAoZnJvbSByZWRpcmVjdClcbiAgbGV0IGlzUmV2YWxpZGF0aW9uUmVxdWlyZWQgPSBmYWxzZTtcblxuICAvLyBVc2UgdGhpcyBpbnRlcm5hbCBhcnJheSB0byBjYXB0dXJlIHJvdXRlcyB0aGF0IHJlcXVpcmUgcmV2YWxpZGF0aW9uIGR1ZVxuICAvLyB0byBhIGNhbmNlbGxlZCBkZWZlcnJlZCBvbiBhY3Rpb24gc3VibWlzc2lvblxuICBsZXQgY2FuY2VsbGVkRGVmZXJyZWRSb3V0ZXM6IHN0cmluZ1tdID0gW107XG5cbiAgLy8gVXNlIHRoaXMgaW50ZXJuYWwgYXJyYXkgdG8gY2FwdHVyZSBmZXRjaGVyIGxvYWRzIHRoYXQgd2VyZSBjYW5jZWxsZWQgYnkgYW5cbiAgLy8gYWN0aW9uIG5hdmlnYXRpb24gYW5kIHJlcXVpcmUgcmV2YWxpZGF0aW9uXG4gIGxldCBjYW5jZWxsZWRGZXRjaGVyTG9hZHM6IHN0cmluZ1tdID0gW107XG5cbiAgLy8gQWJvcnRDb250cm9sbGVycyBmb3IgYW55IGluLWZsaWdodCBmZXRjaGVyc1xuICBsZXQgZmV0Y2hDb250cm9sbGVycyA9IG5ldyBNYXA8c3RyaW5nLCBBYm9ydENvbnRyb2xsZXI+KCk7XG5cbiAgLy8gVHJhY2sgbG9hZHMgYmFzZWQgb24gdGhlIG9yZGVyIGluIHdoaWNoIHRoZXkgc3RhcnRlZFxuICBsZXQgaW5jcmVtZW50aW5nTG9hZElkID0gMDtcblxuICAvLyBUcmFjayB0aGUgb3V0c3RhbmRpbmcgcGVuZGluZyBuYXZpZ2F0aW9uIGRhdGEgbG9hZCB0byBiZSBjb21wYXJlZCBhZ2FpbnN0XG4gIC8vIHRoZSBnbG9iYWxseSBpbmNyZW1lbnRpbmcgbG9hZCB3aGVuIGEgZmV0Y2hlciBsb2FkIGxhbmRzIGFmdGVyIGEgY29tcGxldGVkXG4gIC8vIG5hdmlnYXRpb25cbiAgbGV0IHBlbmRpbmdOYXZpZ2F0aW9uTG9hZElkID0gLTE7XG5cbiAgLy8gRmV0Y2hlcnMgdGhhdCB0cmlnZ2VyZWQgZGF0YSByZWxvYWRzIGFzIGEgcmVzdWx0IG9mIHRoZWlyIGFjdGlvbnNcbiAgbGV0IGZldGNoUmVsb2FkSWRzID0gbmV3IE1hcDxzdHJpbmcsIG51bWJlcj4oKTtcblxuICAvLyBGZXRjaGVycyB0aGF0IHRyaWdnZXJlZCByZWRpcmVjdCBuYXZpZ2F0aW9uc1xuICBsZXQgZmV0Y2hSZWRpcmVjdElkcyA9IG5ldyBTZXQ8c3RyaW5nPigpO1xuXG4gIC8vIE1vc3QgcmVjZW50IGhyZWYvbWF0Y2ggZm9yIGZldGNoZXIubG9hZCBjYWxscyBmb3IgZmV0Y2hlcnNcbiAgbGV0IGZldGNoTG9hZE1hdGNoZXMgPSBuZXcgTWFwPHN0cmluZywgRmV0Y2hMb2FkTWF0Y2g+KCk7XG5cbiAgLy8gUmVmLWNvdW50IG1vdW50ZWQgZmV0Y2hlcnMgc28gd2Uga25vdyB3aGVuIGl0J3Mgb2sgdG8gY2xlYW4gdGhlbSB1cFxuICBsZXQgYWN0aXZlRmV0Y2hlcnMgPSBuZXcgTWFwPHN0cmluZywgbnVtYmVyPigpO1xuXG4gIC8vIEZldGNoZXJzIHRoYXQgaGF2ZSByZXF1ZXN0ZWQgYSBkZWxldGUgd2hlbiB1c2luZyB2N19mZXRjaGVyUGVyc2lzdCxcbiAgLy8gdGhleSdsbCBiZSBvZmZpY2lhbGx5IHJlbW92ZWQgYWZ0ZXIgdGhleSByZXR1cm4gdG8gaWRsZVxuICBsZXQgZGVsZXRlZEZldGNoZXJzID0gbmV3IFNldDxzdHJpbmc+KCk7XG5cbiAgLy8gU3RvcmUgRGVmZXJyZWREYXRhIGluc3RhbmNlcyBmb3IgYWN0aXZlIHJvdXRlIG1hdGNoZXMuICBXaGVuIGFcbiAgLy8gcm91dGUgbG9hZGVyIHJldHVybnMgZGVmZXIoKSB3ZSBzdGljayBvbmUgaW4gaGVyZS4gIFRoZW4sIHdoZW4gYSBuZXN0ZWRcbiAgLy8gcHJvbWlzZSByZXNvbHZlcyB3ZSB1cGRhdGUgbG9hZGVyRGF0YS4gIElmIGEgbmV3IG5hdmlnYXRpb24gc3RhcnRzIHdlXG4gIC8vIGNhbmNlbCBhY3RpdmUgZGVmZXJyZWRzIGZvciBlbGltaW5hdGVkIHJvdXRlcy5cbiAgbGV0IGFjdGl2ZURlZmVycmVkcyA9IG5ldyBNYXA8c3RyaW5nLCBEZWZlcnJlZERhdGE+KCk7XG5cbiAgLy8gU3RvcmUgYmxvY2tlciBmdW5jdGlvbnMgaW4gYSBzZXBhcmF0ZSBNYXAgb3V0c2lkZSBvZiByb3V0ZXIgc3RhdGUgc2luY2VcbiAgLy8gd2UgZG9uJ3QgbmVlZCB0byB1cGRhdGUgVUkgc3RhdGUgaWYgdGhleSBjaGFuZ2VcbiAgbGV0IGJsb2NrZXJGdW5jdGlvbnMgPSBuZXcgTWFwPHN0cmluZywgQmxvY2tlckZ1bmN0aW9uPigpO1xuXG4gIC8vIEZsYWcgdG8gaWdub3JlIHRoZSBuZXh0IGhpc3RvcnkgdXBkYXRlLCBzbyB3ZSBjYW4gcmV2ZXJ0IHRoZSBVUkwgY2hhbmdlIG9uXG4gIC8vIGEgUE9QIG5hdmlnYXRpb24gdGhhdCB3YXMgYmxvY2tlZCBieSB0aGUgdXNlciB3aXRob3V0IHRvdWNoaW5nIHJvdXRlciBzdGF0ZVxuICBsZXQgaWdub3JlTmV4dEhpc3RvcnlVcGRhdGUgPSBmYWxzZTtcblxuICAvLyBJbml0aWFsaXplIHRoZSByb3V0ZXIsIGFsbCBzaWRlIGVmZmVjdHMgc2hvdWxkIGJlIGtpY2tlZCBvZmYgZnJvbSBoZXJlLlxuICAvLyBJbXBsZW1lbnRlZCBhcyBhIEZsdWVudCBBUEkgZm9yIGVhc2Ugb2Y6XG4gIC8vICAgbGV0IHJvdXRlciA9IGNyZWF0ZVJvdXRlcihpbml0KS5pbml0aWFsaXplKCk7XG4gIGZ1bmN0aW9uIGluaXRpYWxpemUoKSB7XG4gICAgLy8gSWYgaGlzdG9yeSBpbmZvcm1zIHVzIG9mIGEgUE9QIG5hdmlnYXRpb24sIHN0YXJ0IHRoZSBuYXZpZ2F0aW9uIGJ1dCBkbyBub3QgdXBkYXRlXG4gICAgLy8gc3RhdGUuICBXZSdsbCB1cGRhdGUgb3VyIG93biBzdGF0ZSBvbmNlIHRoZSBuYXZpZ2F0aW9uIGNvbXBsZXRlc1xuICAgIHVubGlzdGVuSGlzdG9yeSA9IGluaXQuaGlzdG9yeS5saXN0ZW4oXG4gICAgICAoeyBhY3Rpb246IGhpc3RvcnlBY3Rpb24sIGxvY2F0aW9uLCBkZWx0YSB9KSA9PiB7XG4gICAgICAgIC8vIElnbm9yZSB0aGlzIGV2ZW50IGlmIGl0IHdhcyBqdXN0IHVzIHJlc2V0dGluZyB0aGUgVVJMIGZyb20gYVxuICAgICAgICAvLyBibG9ja2VkIFBPUCBuYXZpZ2F0aW9uXG4gICAgICAgIGlmIChpZ25vcmVOZXh0SGlzdG9yeVVwZGF0ZSkge1xuICAgICAgICAgIGlnbm9yZU5leHRIaXN0b3J5VXBkYXRlID0gZmFsc2U7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgd2FybmluZyhcbiAgICAgICAgICBibG9ja2VyRnVuY3Rpb25zLnNpemUgPT09IDAgfHwgZGVsdGEgIT0gbnVsbCxcbiAgICAgICAgICBcIllvdSBhcmUgdHJ5aW5nIHRvIHVzZSBhIGJsb2NrZXIgb24gYSBQT1AgbmF2aWdhdGlvbiB0byBhIGxvY2F0aW9uIFwiICtcbiAgICAgICAgICAgIFwidGhhdCB3YXMgbm90IGNyZWF0ZWQgYnkgQHJlbWl4LXJ1bi9yb3V0ZXIuIFRoaXMgd2lsbCBmYWlsIHNpbGVudGx5IGluIFwiICtcbiAgICAgICAgICAgIFwicHJvZHVjdGlvbi4gVGhpcyBjYW4gaGFwcGVuIGlmIHlvdSBhcmUgbmF2aWdhdGluZyBvdXRzaWRlIHRoZSByb3V0ZXIgXCIgK1xuICAgICAgICAgICAgXCJ2aWEgYHdpbmRvdy5oaXN0b3J5LnB1c2hTdGF0ZWAvYHdpbmRvdy5sb2NhdGlvbi5oYXNoYCBpbnN0ZWFkIG9mIHVzaW5nIFwiICtcbiAgICAgICAgICAgIFwicm91dGVyIG5hdmlnYXRpb24gQVBJcy4gIFRoaXMgY2FuIGFsc28gaGFwcGVuIGlmIHlvdSBhcmUgdXNpbmcgXCIgK1xuICAgICAgICAgICAgXCJjcmVhdGVIYXNoUm91dGVyIGFuZCB0aGUgdXNlciBtYW51YWxseSBjaGFuZ2VzIHRoZSBVUkwuXCJcbiAgICAgICAgKTtcblxuICAgICAgICBsZXQgYmxvY2tlcktleSA9IHNob3VsZEJsb2NrTmF2aWdhdGlvbih7XG4gICAgICAgICAgY3VycmVudExvY2F0aW9uOiBzdGF0ZS5sb2NhdGlvbixcbiAgICAgICAgICBuZXh0TG9jYXRpb246IGxvY2F0aW9uLFxuICAgICAgICAgIGhpc3RvcnlBY3Rpb24sXG4gICAgICAgIH0pO1xuXG4gICAgICAgIGlmIChibG9ja2VyS2V5ICYmIGRlbHRhICE9IG51bGwpIHtcbiAgICAgICAgICAvLyBSZXN0b3JlIHRoZSBVUkwgdG8gbWF0Y2ggdGhlIGN1cnJlbnQgVUksIGJ1dCBkb24ndCB1cGRhdGUgcm91dGVyIHN0YXRlXG4gICAgICAgICAgaWdub3JlTmV4dEhpc3RvcnlVcGRhdGUgPSB0cnVlO1xuICAgICAgICAgIGluaXQuaGlzdG9yeS5nbyhkZWx0YSAqIC0xKTtcblxuICAgICAgICAgIC8vIFB1dCB0aGUgYmxvY2tlciBpbnRvIGEgYmxvY2tlZCBzdGF0ZVxuICAgICAgICAgIHVwZGF0ZUJsb2NrZXIoYmxvY2tlcktleSwge1xuICAgICAgICAgICAgc3RhdGU6IFwiYmxvY2tlZFwiLFxuICAgICAgICAgICAgbG9jYXRpb24sXG4gICAgICAgICAgICBwcm9jZWVkKCkge1xuICAgICAgICAgICAgICB1cGRhdGVCbG9ja2VyKGJsb2NrZXJLZXkhLCB7XG4gICAgICAgICAgICAgICAgc3RhdGU6IFwicHJvY2VlZGluZ1wiLFxuICAgICAgICAgICAgICAgIHByb2NlZWQ6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgICByZXNldDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgIGxvY2F0aW9uLFxuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgLy8gUmUtZG8gdGhlIHNhbWUgUE9QIG5hdmlnYXRpb24gd2UganVzdCBibG9ja2VkXG4gICAgICAgICAgICAgIGluaXQuaGlzdG9yeS5nbyhkZWx0YSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcmVzZXQoKSB7XG4gICAgICAgICAgICAgIGxldCBibG9ja2VycyA9IG5ldyBNYXAoc3RhdGUuYmxvY2tlcnMpO1xuICAgICAgICAgICAgICBibG9ja2Vycy5zZXQoYmxvY2tlcktleSEsIElETEVfQkxPQ0tFUik7XG4gICAgICAgICAgICAgIHVwZGF0ZVN0YXRlKHsgYmxvY2tlcnMgfSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgIH0pO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBzdGFydE5hdmlnYXRpb24oaGlzdG9yeUFjdGlvbiwgbG9jYXRpb24pO1xuICAgICAgfVxuICAgICk7XG5cbiAgICBpZiAoaXNCcm93c2VyKSB7XG4gICAgICAvLyBGSVhNRTogVGhpcyBmZWVscyBncm9zcy4gIEhvdyBjYW4gd2UgY2xlYW51cCB0aGUgbGluZXMgYmV0d2VlblxuICAgICAgLy8gc2Nyb2xsUmVzdG9yYXRpb24vYXBwbGllZFRyYW5zaXRpb25zIHBlcnNpc3RhbmNlP1xuICAgICAgcmVzdG9yZUFwcGxpZWRUcmFuc2l0aW9ucyhyb3V0ZXJXaW5kb3csIGFwcGxpZWRWaWV3VHJhbnNpdGlvbnMpO1xuICAgICAgbGV0IF9zYXZlQXBwbGllZFRyYW5zaXRpb25zID0gKCkgPT5cbiAgICAgICAgcGVyc2lzdEFwcGxpZWRUcmFuc2l0aW9ucyhyb3V0ZXJXaW5kb3csIGFwcGxpZWRWaWV3VHJhbnNpdGlvbnMpO1xuICAgICAgcm91dGVyV2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJwYWdlaGlkZVwiLCBfc2F2ZUFwcGxpZWRUcmFuc2l0aW9ucyk7XG4gICAgICByZW1vdmVQYWdlSGlkZUV2ZW50TGlzdGVuZXIgPSAoKSA9PlxuICAgICAgICByb3V0ZXJXaW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInBhZ2VoaWRlXCIsIF9zYXZlQXBwbGllZFRyYW5zaXRpb25zKTtcbiAgICB9XG5cbiAgICAvLyBLaWNrIG9mZiBpbml0aWFsIGRhdGEgbG9hZCBpZiBuZWVkZWQuICBVc2UgUG9wIHRvIGF2b2lkIG1vZGlmeWluZyBoaXN0b3J5XG4gICAgLy8gTm90ZSB3ZSBkb24ndCBkbyBhbnkgaGFuZGxpbmcgb2YgbGF6eSBoZXJlLiAgRm9yIFNQQSdzIGl0J2xsIGdldCBoYW5kbGVkXG4gICAgLy8gaW4gdGhlIG5vcm1hbCBuYXZpZ2F0aW9uIGZsb3cuICBGb3IgU1NSIGl0J3MgZXhwZWN0ZWQgdGhhdCBsYXp5IG1vZHVsZXMgYXJlXG4gICAgLy8gcmVzb2x2ZWQgcHJpb3IgdG8gcm91dGVyIGNyZWF0aW9uIHNpbmNlIHdlIGNhbid0IGdvIGludG8gYSBmYWxsYmFja0VsZW1lbnRcbiAgICAvLyBVSSBmb3IgU1NSJ2QgYXBwc1xuICAgIGlmICghc3RhdGUuaW5pdGlhbGl6ZWQpIHtcbiAgICAgIHN0YXJ0TmF2aWdhdGlvbihIaXN0b3J5QWN0aW9uLlBvcCwgc3RhdGUubG9jYXRpb24sIHtcbiAgICAgICAgaW5pdGlhbEh5ZHJhdGlvbjogdHJ1ZSxcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiByb3V0ZXI7XG4gIH1cblxuICAvLyBDbGVhbiB1cCBhIHJvdXRlciBhbmQgaXQncyBzaWRlIGVmZmVjdHNcbiAgZnVuY3Rpb24gZGlzcG9zZSgpIHtcbiAgICBpZiAodW5saXN0ZW5IaXN0b3J5KSB7XG4gICAgICB1bmxpc3Rlbkhpc3RvcnkoKTtcbiAgICB9XG4gICAgaWYgKHJlbW92ZVBhZ2VIaWRlRXZlbnRMaXN0ZW5lcikge1xuICAgICAgcmVtb3ZlUGFnZUhpZGVFdmVudExpc3RlbmVyKCk7XG4gICAgfVxuICAgIHN1YnNjcmliZXJzLmNsZWFyKCk7XG4gICAgcGVuZGluZ05hdmlnYXRpb25Db250cm9sbGVyICYmIHBlbmRpbmdOYXZpZ2F0aW9uQ29udHJvbGxlci5hYm9ydCgpO1xuICAgIHN0YXRlLmZldGNoZXJzLmZvckVhY2goKF8sIGtleSkgPT4gZGVsZXRlRmV0Y2hlcihrZXkpKTtcbiAgICBzdGF0ZS5ibG9ja2Vycy5mb3JFYWNoKChfLCBrZXkpID0+IGRlbGV0ZUJsb2NrZXIoa2V5KSk7XG4gIH1cblxuICAvLyBTdWJzY3JpYmUgdG8gc3RhdGUgdXBkYXRlcyBmb3IgdGhlIHJvdXRlclxuICBmdW5jdGlvbiBzdWJzY3JpYmUoZm46IFJvdXRlclN1YnNjcmliZXIpIHtcbiAgICBzdWJzY3JpYmVycy5hZGQoZm4pO1xuICAgIHJldHVybiAoKSA9PiBzdWJzY3JpYmVycy5kZWxldGUoZm4pO1xuICB9XG5cbiAgLy8gVXBkYXRlIG91ciBzdGF0ZSBhbmQgbm90aWZ5IHRoZSBjYWxsaW5nIGNvbnRleHQgb2YgdGhlIGNoYW5nZVxuICBmdW5jdGlvbiB1cGRhdGVTdGF0ZShcbiAgICBuZXdTdGF0ZTogUGFydGlhbDxSb3V0ZXJTdGF0ZT4sXG4gICAgb3B0czoge1xuICAgICAgZmx1c2hTeW5jPzogYm9vbGVhbjtcbiAgICAgIHZpZXdUcmFuc2l0aW9uT3B0cz86IFZpZXdUcmFuc2l0aW9uT3B0cztcbiAgICB9ID0ge31cbiAgKTogdm9pZCB7XG4gICAgc3RhdGUgPSB7XG4gICAgICAuLi5zdGF0ZSxcbiAgICAgIC4uLm5ld1N0YXRlLFxuICAgIH07XG5cbiAgICAvLyBQcmVwIGZldGNoZXIgY2xlYW51cCBzbyB3ZSBjYW4gdGVsbCB0aGUgVUkgd2hpY2ggZmV0Y2hlciBkYXRhIGVudHJpZXNcbiAgICAvLyBjYW4gYmUgcmVtb3ZlZFxuICAgIGxldCBjb21wbGV0ZWRGZXRjaGVyczogc3RyaW5nW10gPSBbXTtcbiAgICBsZXQgZGVsZXRlZEZldGNoZXJzS2V5czogc3RyaW5nW10gPSBbXTtcblxuICAgIGlmIChmdXR1cmUudjdfZmV0Y2hlclBlcnNpc3QpIHtcbiAgICAgIHN0YXRlLmZldGNoZXJzLmZvckVhY2goKGZldGNoZXIsIGtleSkgPT4ge1xuICAgICAgICBpZiAoZmV0Y2hlci5zdGF0ZSA9PT0gXCJpZGxlXCIpIHtcbiAgICAgICAgICBpZiAoZGVsZXRlZEZldGNoZXJzLmhhcyhrZXkpKSB7XG4gICAgICAgICAgICAvLyBVbm1vdW50ZWQgZnJvbSB0aGUgVUkgYW5kIGNhbiBiZSB0b3RhbGx5IHJlbW92ZWRcbiAgICAgICAgICAgIGRlbGV0ZWRGZXRjaGVyc0tleXMucHVzaChrZXkpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBSZXR1cm5lZCB0byBpZGxlIGJ1dCBzdGlsbCBtb3VudGVkIGluIHRoZSBVSSwgc28gc2VtaS1yZW1haW5zIGZvclxuICAgICAgICAgICAgLy8gcmV2YWxpZGF0aW9ucyBhbmQgc3VjaFxuICAgICAgICAgICAgY29tcGxldGVkRmV0Y2hlcnMucHVzaChrZXkpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLy8gSXRlcmF0ZSBvdmVyIGEgbG9jYWwgY29weSBzbyB0aGF0IGlmIGZsdXNoU3luYyBpcyB1c2VkIGFuZCB3ZSBlbmQgdXBcbiAgICAvLyByZW1vdmluZyBhbmQgYWRkaW5nIGEgbmV3IHN1YnNjcmliZXIgZHVlIHRvIHRoZSB1c2VDYWxsYmFjayBkZXBlbmRlbmNpZXMsXG4gICAgLy8gd2UgZG9uJ3QgZ2V0IG91cnNlbHZlcyBpbnRvIGEgbG9vcCBjYWxsaW5nIHRoZSBuZXcgc3Vic2NyaWJlciBpbW1lZGlhdGVseVxuICAgIFsuLi5zdWJzY3JpYmVyc10uZm9yRWFjaCgoc3Vic2NyaWJlcikgPT5cbiAgICAgIHN1YnNjcmliZXIoc3RhdGUsIHtcbiAgICAgICAgZGVsZXRlZEZldGNoZXJzOiBkZWxldGVkRmV0Y2hlcnNLZXlzLFxuICAgICAgICB1bnN0YWJsZV92aWV3VHJhbnNpdGlvbk9wdHM6IG9wdHMudmlld1RyYW5zaXRpb25PcHRzLFxuICAgICAgICB1bnN0YWJsZV9mbHVzaFN5bmM6IG9wdHMuZmx1c2hTeW5jID09PSB0cnVlLFxuICAgICAgfSlcbiAgICApO1xuXG4gICAgLy8gUmVtb3ZlIGlkbGUgZmV0Y2hlcnMgZnJvbSBzdGF0ZSBzaW5jZSB3ZSBvbmx5IGNhcmUgYWJvdXQgaW4tZmxpZ2h0IGZldGNoZXJzLlxuICAgIGlmIChmdXR1cmUudjdfZmV0Y2hlclBlcnNpc3QpIHtcbiAgICAgIGNvbXBsZXRlZEZldGNoZXJzLmZvckVhY2goKGtleSkgPT4gc3RhdGUuZmV0Y2hlcnMuZGVsZXRlKGtleSkpO1xuICAgICAgZGVsZXRlZEZldGNoZXJzS2V5cy5mb3JFYWNoKChrZXkpID0+IGRlbGV0ZUZldGNoZXIoa2V5KSk7XG4gICAgfVxuICB9XG5cbiAgLy8gQ29tcGxldGUgYSBuYXZpZ2F0aW9uIHJldHVybmluZyB0aGUgc3RhdGUubmF2aWdhdGlvbiBiYWNrIHRvIHRoZSBJRExFX05BVklHQVRJT05cbiAgLy8gYW5kIHNldHRpbmcgc3RhdGUuW2hpc3RvcnlBY3Rpb24vbG9jYXRpb24vbWF0Y2hlc10gdG8gdGhlIG5ldyByb3V0ZS5cbiAgLy8gLSBMb2NhdGlvbiBpcyBhIHJlcXVpcmVkIHBhcmFtXG4gIC8vIC0gTmF2aWdhdGlvbiB3aWxsIGFsd2F5cyBiZSBzZXQgdG8gSURMRV9OQVZJR0FUSU9OXG4gIC8vIC0gQ2FuIHBhc3MgYW55IG90aGVyIHN0YXRlIGluIG5ld1N0YXRlXG4gIGZ1bmN0aW9uIGNvbXBsZXRlTmF2aWdhdGlvbihcbiAgICBsb2NhdGlvbjogTG9jYXRpb24sXG4gICAgbmV3U3RhdGU6IFBhcnRpYWw8T21pdDxSb3V0ZXJTdGF0ZSwgXCJhY3Rpb25cIiB8IFwibG9jYXRpb25cIiB8IFwibmF2aWdhdGlvblwiPj4sXG4gICAgeyBmbHVzaFN5bmMgfTogeyBmbHVzaFN5bmM/OiBib29sZWFuIH0gPSB7fVxuICApOiB2b2lkIHtcbiAgICAvLyBEZWR1Y2UgaWYgd2UncmUgaW4gYSBsb2FkaW5nL2FjdGlvblJlbG9hZCBzdGF0ZTpcbiAgICAvLyAtIFdlIGhhdmUgY29tbWl0dGVkIGFjdGlvbkRhdGEgaW4gdGhlIHN0b3JlXG4gICAgLy8gLSBUaGUgY3VycmVudCBuYXZpZ2F0aW9uIHdhcyBhIG11dGF0aW9uIHN1Ym1pc3Npb25cbiAgICAvLyAtIFdlJ3JlIHBhc3QgdGhlIHN1Ym1pdHRpbmcgc3RhdGUgYW5kIGludG8gdGhlIGxvYWRpbmcgc3RhdGVcbiAgICAvLyAtIFRoZSBsb2NhdGlvbiBiZWluZyBsb2FkZWQgaXMgbm90IHRoZSByZXN1bHQgb2YgYSByZWRpcmVjdFxuICAgIGxldCBpc0FjdGlvblJlbG9hZCA9XG4gICAgICBzdGF0ZS5hY3Rpb25EYXRhICE9IG51bGwgJiZcbiAgICAgIHN0YXRlLm5hdmlnYXRpb24uZm9ybU1ldGhvZCAhPSBudWxsICYmXG4gICAgICBpc011dGF0aW9uTWV0aG9kKHN0YXRlLm5hdmlnYXRpb24uZm9ybU1ldGhvZCkgJiZcbiAgICAgIHN0YXRlLm5hdmlnYXRpb24uc3RhdGUgPT09IFwibG9hZGluZ1wiICYmXG4gICAgICBsb2NhdGlvbi5zdGF0ZT8uX2lzUmVkaXJlY3QgIT09IHRydWU7XG5cbiAgICBsZXQgYWN0aW9uRGF0YTogUm91dGVEYXRhIHwgbnVsbDtcbiAgICBpZiAobmV3U3RhdGUuYWN0aW9uRGF0YSkge1xuICAgICAgaWYgKE9iamVjdC5rZXlzKG5ld1N0YXRlLmFjdGlvbkRhdGEpLmxlbmd0aCA+IDApIHtcbiAgICAgICAgYWN0aW9uRGF0YSA9IG5ld1N0YXRlLmFjdGlvbkRhdGE7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBFbXB0eSBhY3Rpb25EYXRhIC0+IGNsZWFyIHByaW9yIGFjdGlvbkRhdGEgZHVlIHRvIGFuIGFjdGlvbiBlcnJvclxuICAgICAgICBhY3Rpb25EYXRhID0gbnVsbDtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGlzQWN0aW9uUmVsb2FkKSB7XG4gICAgICAvLyBLZWVwIHRoZSBjdXJyZW50IGRhdGEgaWYgd2UncmUgd3JhcHBpbmcgdXAgdGhlIGFjdGlvbiByZWxvYWRcbiAgICAgIGFjdGlvbkRhdGEgPSBzdGF0ZS5hY3Rpb25EYXRhO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBDbGVhciBhY3Rpb25EYXRhIG9uIGFueSBvdGhlciBjb21wbGV0ZWQgbmF2aWdhdGlvbnNcbiAgICAgIGFjdGlvbkRhdGEgPSBudWxsO1xuICAgIH1cblxuICAgIC8vIEFsd2F5cyBwcmVzZXJ2ZSBhbnkgZXhpc3RpbmcgbG9hZGVyRGF0YSBmcm9tIHJlLXVzZWQgcm91dGVzXG4gICAgbGV0IGxvYWRlckRhdGEgPSBuZXdTdGF0ZS5sb2FkZXJEYXRhXG4gICAgICA/IG1lcmdlTG9hZGVyRGF0YShcbiAgICAgICAgICBzdGF0ZS5sb2FkZXJEYXRhLFxuICAgICAgICAgIG5ld1N0YXRlLmxvYWRlckRhdGEsXG4gICAgICAgICAgbmV3U3RhdGUubWF0Y2hlcyB8fCBbXSxcbiAgICAgICAgICBuZXdTdGF0ZS5lcnJvcnNcbiAgICAgICAgKVxuICAgICAgOiBzdGF0ZS5sb2FkZXJEYXRhO1xuXG4gICAgLy8gT24gYSBzdWNjZXNzZnVsIG5hdmlnYXRpb24gd2UgY2FuIGFzc3VtZSB3ZSBnb3QgdGhyb3VnaCBhbGwgYmxvY2tlcnNcbiAgICAvLyBzbyB3ZSBjYW4gc3RhcnQgZnJlc2hcbiAgICBsZXQgYmxvY2tlcnMgPSBzdGF0ZS5ibG9ja2VycztcbiAgICBpZiAoYmxvY2tlcnMuc2l6ZSA+IDApIHtcbiAgICAgIGJsb2NrZXJzID0gbmV3IE1hcChibG9ja2Vycyk7XG4gICAgICBibG9ja2Vycy5mb3JFYWNoKChfLCBrKSA9PiBibG9ja2Vycy5zZXQoaywgSURMRV9CTE9DS0VSKSk7XG4gICAgfVxuXG4gICAgLy8gQWx3YXlzIHJlc3BlY3QgdGhlIHVzZXIgZmxhZy4gIE90aGVyd2lzZSBkb24ndCByZXNldCBvbiBtdXRhdGlvblxuICAgIC8vIHN1Ym1pc3Npb24gbmF2aWdhdGlvbnMgdW5sZXNzIHRoZXkgcmVkaXJlY3RcbiAgICBsZXQgcHJldmVudFNjcm9sbFJlc2V0ID1cbiAgICAgIHBlbmRpbmdQcmV2ZW50U2Nyb2xsUmVzZXQgPT09IHRydWUgfHxcbiAgICAgIChzdGF0ZS5uYXZpZ2F0aW9uLmZvcm1NZXRob2QgIT0gbnVsbCAmJlxuICAgICAgICBpc011dGF0aW9uTWV0aG9kKHN0YXRlLm5hdmlnYXRpb24uZm9ybU1ldGhvZCkgJiZcbiAgICAgICAgbG9jYXRpb24uc3RhdGU/Ll9pc1JlZGlyZWN0ICE9PSB0cnVlKTtcblxuICAgIGlmIChpbkZsaWdodERhdGFSb3V0ZXMpIHtcbiAgICAgIGRhdGFSb3V0ZXMgPSBpbkZsaWdodERhdGFSb3V0ZXM7XG4gICAgICBpbkZsaWdodERhdGFSb3V0ZXMgPSB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgaWYgKGlzVW5pbnRlcnJ1cHRlZFJldmFsaWRhdGlvbikge1xuICAgICAgLy8gSWYgdGhpcyB3YXMgYW4gdW5pbnRlcnJ1cHRlZCByZXZhbGlkYXRpb24gdGhlbiBkbyBub3QgdG91Y2ggaGlzdG9yeVxuICAgIH0gZWxzZSBpZiAocGVuZGluZ0FjdGlvbiA9PT0gSGlzdG9yeUFjdGlvbi5Qb3ApIHtcbiAgICAgIC8vIERvIG5vdGhpbmcgZm9yIFBPUCAtIFVSTCBoYXMgYWxyZWFkeSBiZWVuIHVwZGF0ZWRcbiAgICB9IGVsc2UgaWYgKHBlbmRpbmdBY3Rpb24gPT09IEhpc3RvcnlBY3Rpb24uUHVzaCkge1xuICAgICAgaW5pdC5oaXN0b3J5LnB1c2gobG9jYXRpb24sIGxvY2F0aW9uLnN0YXRlKTtcbiAgICB9IGVsc2UgaWYgKHBlbmRpbmdBY3Rpb24gPT09IEhpc3RvcnlBY3Rpb24uUmVwbGFjZSkge1xuICAgICAgaW5pdC5oaXN0b3J5LnJlcGxhY2UobG9jYXRpb24sIGxvY2F0aW9uLnN0YXRlKTtcbiAgICB9XG5cbiAgICBsZXQgdmlld1RyYW5zaXRpb25PcHRzOiBWaWV3VHJhbnNpdGlvbk9wdHMgfCB1bmRlZmluZWQ7XG5cbiAgICAvLyBPbiBQT1AsIGVuYWJsZSB0cmFuc2l0aW9ucyBpZiB0aGV5IHdlcmUgZW5hYmxlZCBvbiB0aGUgb3JpZ2luYWwgbmF2aWdhdGlvblxuICAgIGlmIChwZW5kaW5nQWN0aW9uID09PSBIaXN0b3J5QWN0aW9uLlBvcCkge1xuICAgICAgLy8gRm9yd2FyZCB0YWtlcyBwcmVjZWRlbmNlIHNvIHRoZXkgYmVoYXZlIGxpa2UgdGhlIG9yaWdpbmFsIG5hdmlnYXRpb25cbiAgICAgIGxldCBwcmlvclBhdGhzID0gYXBwbGllZFZpZXdUcmFuc2l0aW9ucy5nZXQoc3RhdGUubG9jYXRpb24ucGF0aG5hbWUpO1xuICAgICAgaWYgKHByaW9yUGF0aHMgJiYgcHJpb3JQYXRocy5oYXMobG9jYXRpb24ucGF0aG5hbWUpKSB7XG4gICAgICAgIHZpZXdUcmFuc2l0aW9uT3B0cyA9IHtcbiAgICAgICAgICBjdXJyZW50TG9jYXRpb246IHN0YXRlLmxvY2F0aW9uLFxuICAgICAgICAgIG5leHRMb2NhdGlvbjogbG9jYXRpb24sXG4gICAgICAgIH07XG4gICAgICB9IGVsc2UgaWYgKGFwcGxpZWRWaWV3VHJhbnNpdGlvbnMuaGFzKGxvY2F0aW9uLnBhdGhuYW1lKSkge1xuICAgICAgICAvLyBJZiB3ZSBkb24ndCBoYXZlIGEgcHJldmlvdXMgZm9yd2FyZCBuYXYsIGFzc3VtZSB3ZSdyZSBwb3BwaW5nIGJhY2sgdG9cbiAgICAgICAgLy8gdGhlIG5ldyBsb2NhdGlvbiBhbmQgZW5hYmxlIGlmIHRoYXQgbG9jYXRpb24gcHJldmlvdXNseSBlbmFibGVkXG4gICAgICAgIHZpZXdUcmFuc2l0aW9uT3B0cyA9IHtcbiAgICAgICAgICBjdXJyZW50TG9jYXRpb246IGxvY2F0aW9uLFxuICAgICAgICAgIG5leHRMb2NhdGlvbjogc3RhdGUubG9jYXRpb24sXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChwZW5kaW5nVmlld1RyYW5zaXRpb25FbmFibGVkKSB7XG4gICAgICAvLyBTdG9yZSB0aGUgYXBwbGllZCB0cmFuc2l0aW9uIG9uIFBVU0gvUkVQTEFDRVxuICAgICAgbGV0IHRvUGF0aHMgPSBhcHBsaWVkVmlld1RyYW5zaXRpb25zLmdldChzdGF0ZS5sb2NhdGlvbi5wYXRobmFtZSk7XG4gICAgICBpZiAodG9QYXRocykge1xuICAgICAgICB0b1BhdGhzLmFkZChsb2NhdGlvbi5wYXRobmFtZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0b1BhdGhzID0gbmV3IFNldDxzdHJpbmc+KFtsb2NhdGlvbi5wYXRobmFtZV0pO1xuICAgICAgICBhcHBsaWVkVmlld1RyYW5zaXRpb25zLnNldChzdGF0ZS5sb2NhdGlvbi5wYXRobmFtZSwgdG9QYXRocyk7XG4gICAgICB9XG4gICAgICB2aWV3VHJhbnNpdGlvbk9wdHMgPSB7XG4gICAgICAgIGN1cnJlbnRMb2NhdGlvbjogc3RhdGUubG9jYXRpb24sXG4gICAgICAgIG5leHRMb2NhdGlvbjogbG9jYXRpb24sXG4gICAgICB9O1xuICAgIH1cblxuICAgIHVwZGF0ZVN0YXRlKFxuICAgICAge1xuICAgICAgICAuLi5uZXdTdGF0ZSwgLy8gbWF0Y2hlcywgZXJyb3JzLCBmZXRjaGVycyBnbyB0aHJvdWdoIGFzLWlzXG4gICAgICAgIGFjdGlvbkRhdGEsXG4gICAgICAgIGxvYWRlckRhdGEsXG4gICAgICAgIGhpc3RvcnlBY3Rpb246IHBlbmRpbmdBY3Rpb24sXG4gICAgICAgIGxvY2F0aW9uLFxuICAgICAgICBpbml0aWFsaXplZDogdHJ1ZSxcbiAgICAgICAgbmF2aWdhdGlvbjogSURMRV9OQVZJR0FUSU9OLFxuICAgICAgICByZXZhbGlkYXRpb246IFwiaWRsZVwiLFxuICAgICAgICByZXN0b3JlU2Nyb2xsUG9zaXRpb246IGdldFNhdmVkU2Nyb2xsUG9zaXRpb24oXG4gICAgICAgICAgbG9jYXRpb24sXG4gICAgICAgICAgbmV3U3RhdGUubWF0Y2hlcyB8fCBzdGF0ZS5tYXRjaGVzXG4gICAgICAgICksXG4gICAgICAgIHByZXZlbnRTY3JvbGxSZXNldCxcbiAgICAgICAgYmxvY2tlcnMsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICB2aWV3VHJhbnNpdGlvbk9wdHMsXG4gICAgICAgIGZsdXNoU3luYzogZmx1c2hTeW5jID09PSB0cnVlLFxuICAgICAgfVxuICAgICk7XG5cbiAgICAvLyBSZXNldCBzdGF0ZWZ1bCBuYXZpZ2F0aW9uIHZhcnNcbiAgICBwZW5kaW5nQWN0aW9uID0gSGlzdG9yeUFjdGlvbi5Qb3A7XG4gICAgcGVuZGluZ1ByZXZlbnRTY3JvbGxSZXNldCA9IGZhbHNlO1xuICAgIHBlbmRpbmdWaWV3VHJhbnNpdGlvbkVuYWJsZWQgPSBmYWxzZTtcbiAgICBpc1VuaW50ZXJydXB0ZWRSZXZhbGlkYXRpb24gPSBmYWxzZTtcbiAgICBpc1JldmFsaWRhdGlvblJlcXVpcmVkID0gZmFsc2U7XG4gICAgY2FuY2VsbGVkRGVmZXJyZWRSb3V0ZXMgPSBbXTtcbiAgICBjYW5jZWxsZWRGZXRjaGVyTG9hZHMgPSBbXTtcbiAgfVxuXG4gIC8vIFRyaWdnZXIgYSBuYXZpZ2F0aW9uIGV2ZW50LCB3aGljaCBjYW4gZWl0aGVyIGJlIGEgbnVtZXJpY2FsIFBPUCBvciBhIFBVU0hcbiAgLy8gcmVwbGFjZSB3aXRoIGFuIG9wdGlvbmFsIHN1Ym1pc3Npb25cbiAgYXN5bmMgZnVuY3Rpb24gbmF2aWdhdGUoXG4gICAgdG86IG51bWJlciB8IFRvIHwgbnVsbCxcbiAgICBvcHRzPzogUm91dGVyTmF2aWdhdGVPcHRpb25zXG4gICk6IFByb21pc2U8dm9pZD4ge1xuICAgIGlmICh0eXBlb2YgdG8gPT09IFwibnVtYmVyXCIpIHtcbiAgICAgIGluaXQuaGlzdG9yeS5nbyh0byk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgbGV0IG5vcm1hbGl6ZWRQYXRoID0gbm9ybWFsaXplVG8oXG4gICAgICBzdGF0ZS5sb2NhdGlvbixcbiAgICAgIHN0YXRlLm1hdGNoZXMsXG4gICAgICBiYXNlbmFtZSxcbiAgICAgIGZ1dHVyZS52N19wcmVwZW5kQmFzZW5hbWUsXG4gICAgICB0byxcbiAgICAgIGZ1dHVyZS52N19yZWxhdGl2ZVNwbGF0UGF0aCxcbiAgICAgIG9wdHM/LmZyb21Sb3V0ZUlkLFxuICAgICAgb3B0cz8ucmVsYXRpdmVcbiAgICApO1xuICAgIGxldCB7IHBhdGgsIHN1Ym1pc3Npb24sIGVycm9yIH0gPSBub3JtYWxpemVOYXZpZ2F0ZU9wdGlvbnMoXG4gICAgICBmdXR1cmUudjdfbm9ybWFsaXplRm9ybU1ldGhvZCxcbiAgICAgIGZhbHNlLFxuICAgICAgbm9ybWFsaXplZFBhdGgsXG4gICAgICBvcHRzXG4gICAgKTtcblxuICAgIGxldCBjdXJyZW50TG9jYXRpb24gPSBzdGF0ZS5sb2NhdGlvbjtcbiAgICBsZXQgbmV4dExvY2F0aW9uID0gY3JlYXRlTG9jYXRpb24oc3RhdGUubG9jYXRpb24sIHBhdGgsIG9wdHMgJiYgb3B0cy5zdGF0ZSk7XG5cbiAgICAvLyBXaGVuIHVzaW5nIG5hdmlnYXRlIGFzIGEgUFVTSC9SRVBMQUNFIHdlIGFyZW4ndCByZWFkaW5nIGFuIGFscmVhZHktZW5jb2RlZFxuICAgIC8vIFVSTCBmcm9tIHdpbmRvdy5sb2NhdGlvbiwgc28gd2UgbmVlZCB0byBlbmNvZGUgaXQgaGVyZSBzbyB0aGUgYmVoYXZpb3JcbiAgICAvLyByZW1haW5zIHRoZSBzYW1lIGFzIFBPUCBhbmQgbm9uLWRhdGEtcm91dGVyIHVzYWdlcy4gIG5ldyBVUkwoKSBkb2VzIGFsbFxuICAgIC8vIHRoZSBzYW1lIGVuY29kaW5nIHdlJ2QgZ2V0IGZyb20gYSBoaXN0b3J5LnB1c2hTdGF0ZS93aW5kb3cubG9jYXRpb24gcmVhZFxuICAgIC8vIHdpdGhvdXQgaGF2aW5nIHRvIHRvdWNoIGhpc3RvcnlcbiAgICBuZXh0TG9jYXRpb24gPSB7XG4gICAgICAuLi5uZXh0TG9jYXRpb24sXG4gICAgICAuLi5pbml0Lmhpc3RvcnkuZW5jb2RlTG9jYXRpb24obmV4dExvY2F0aW9uKSxcbiAgICB9O1xuXG4gICAgbGV0IHVzZXJSZXBsYWNlID0gb3B0cyAmJiBvcHRzLnJlcGxhY2UgIT0gbnVsbCA/IG9wdHMucmVwbGFjZSA6IHVuZGVmaW5lZDtcblxuICAgIGxldCBoaXN0b3J5QWN0aW9uID0gSGlzdG9yeUFjdGlvbi5QdXNoO1xuXG4gICAgaWYgKHVzZXJSZXBsYWNlID09PSB0cnVlKSB7XG4gICAgICBoaXN0b3J5QWN0aW9uID0gSGlzdG9yeUFjdGlvbi5SZXBsYWNlO1xuICAgIH0gZWxzZSBpZiAodXNlclJlcGxhY2UgPT09IGZhbHNlKSB7XG4gICAgICAvLyBuby1vcFxuICAgIH0gZWxzZSBpZiAoXG4gICAgICBzdWJtaXNzaW9uICE9IG51bGwgJiZcbiAgICAgIGlzTXV0YXRpb25NZXRob2Qoc3VibWlzc2lvbi5mb3JtTWV0aG9kKSAmJlxuICAgICAgc3VibWlzc2lvbi5mb3JtQWN0aW9uID09PSBzdGF0ZS5sb2NhdGlvbi5wYXRobmFtZSArIHN0YXRlLmxvY2F0aW9uLnNlYXJjaFxuICAgICkge1xuICAgICAgLy8gQnkgZGVmYXVsdCBvbiBzdWJtaXNzaW9ucyB0byB0aGUgY3VycmVudCBsb2NhdGlvbiB3ZSBSRVBMQUNFIHNvIHRoYXRcbiAgICAgIC8vIHVzZXJzIGRvbid0IGhhdmUgdG8gZG91YmxlLWNsaWNrIHRoZSBiYWNrIGJ1dHRvbiB0byBnZXQgdG8gdGhlIHByaW9yXG4gICAgICAvLyBsb2NhdGlvbi4gIElmIHRoZSB1c2VyIHJlZGlyZWN0cyB0byBhIGRpZmZlcmVudCBsb2NhdGlvbiBmcm9tIHRoZVxuICAgICAgLy8gYWN0aW9uL2xvYWRlciB0aGlzIHdpbGwgYmUgaWdub3JlZCBhbmQgdGhlIHJlZGlyZWN0IHdpbGwgYmUgYSBQVVNIXG4gICAgICBoaXN0b3J5QWN0aW9uID0gSGlzdG9yeUFjdGlvbi5SZXBsYWNlO1xuICAgIH1cblxuICAgIGxldCBwcmV2ZW50U2Nyb2xsUmVzZXQgPVxuICAgICAgb3B0cyAmJiBcInByZXZlbnRTY3JvbGxSZXNldFwiIGluIG9wdHNcbiAgICAgICAgPyBvcHRzLnByZXZlbnRTY3JvbGxSZXNldCA9PT0gdHJ1ZVxuICAgICAgICA6IHVuZGVmaW5lZDtcblxuICAgIGxldCBmbHVzaFN5bmMgPSAob3B0cyAmJiBvcHRzLnVuc3RhYmxlX2ZsdXNoU3luYykgPT09IHRydWU7XG5cbiAgICBsZXQgYmxvY2tlcktleSA9IHNob3VsZEJsb2NrTmF2aWdhdGlvbih7XG4gICAgICBjdXJyZW50TG9jYXRpb24sXG4gICAgICBuZXh0TG9jYXRpb24sXG4gICAgICBoaXN0b3J5QWN0aW9uLFxuICAgIH0pO1xuXG4gICAgaWYgKGJsb2NrZXJLZXkpIHtcbiAgICAgIC8vIFB1dCB0aGUgYmxvY2tlciBpbnRvIGEgYmxvY2tlZCBzdGF0ZVxuICAgICAgdXBkYXRlQmxvY2tlcihibG9ja2VyS2V5LCB7XG4gICAgICAgIHN0YXRlOiBcImJsb2NrZWRcIixcbiAgICAgICAgbG9jYXRpb246IG5leHRMb2NhdGlvbixcbiAgICAgICAgcHJvY2VlZCgpIHtcbiAgICAgICAgICB1cGRhdGVCbG9ja2VyKGJsb2NrZXJLZXkhLCB7XG4gICAgICAgICAgICBzdGF0ZTogXCJwcm9jZWVkaW5nXCIsXG4gICAgICAgICAgICBwcm9jZWVkOiB1bmRlZmluZWQsXG4gICAgICAgICAgICByZXNldDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgbG9jYXRpb246IG5leHRMb2NhdGlvbixcbiAgICAgICAgICB9KTtcbiAgICAgICAgICAvLyBTZW5kIHRoZSBzYW1lIG5hdmlnYXRpb24gdGhyb3VnaFxuICAgICAgICAgIG5hdmlnYXRlKHRvLCBvcHRzKTtcbiAgICAgICAgfSxcbiAgICAgICAgcmVzZXQoKSB7XG4gICAgICAgICAgbGV0IGJsb2NrZXJzID0gbmV3IE1hcChzdGF0ZS5ibG9ja2Vycyk7XG4gICAgICAgICAgYmxvY2tlcnMuc2V0KGJsb2NrZXJLZXkhLCBJRExFX0JMT0NLRVIpO1xuICAgICAgICAgIHVwZGF0ZVN0YXRlKHsgYmxvY2tlcnMgfSk7XG4gICAgICAgIH0sXG4gICAgICB9KTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICByZXR1cm4gYXdhaXQgc3RhcnROYXZpZ2F0aW9uKGhpc3RvcnlBY3Rpb24sIG5leHRMb2NhdGlvbiwge1xuICAgICAgc3VibWlzc2lvbixcbiAgICAgIC8vIFNlbmQgdGhyb3VnaCB0aGUgZm9ybURhdGEgc2VyaWFsaXphdGlvbiBlcnJvciBpZiB3ZSBoYXZlIG9uZSBzbyB3ZSBjYW5cbiAgICAgIC8vIHJlbmRlciBhdCB0aGUgcmlnaHQgZXJyb3IgYm91bmRhcnkgYWZ0ZXIgd2UgbWF0Y2ggcm91dGVzXG4gICAgICBwZW5kaW5nRXJyb3I6IGVycm9yLFxuICAgICAgcHJldmVudFNjcm9sbFJlc2V0LFxuICAgICAgcmVwbGFjZTogb3B0cyAmJiBvcHRzLnJlcGxhY2UsXG4gICAgICBlbmFibGVWaWV3VHJhbnNpdGlvbjogb3B0cyAmJiBvcHRzLnVuc3RhYmxlX3ZpZXdUcmFuc2l0aW9uLFxuICAgICAgZmx1c2hTeW5jLFxuICAgIH0pO1xuICB9XG5cbiAgLy8gUmV2YWxpZGF0ZSBhbGwgY3VycmVudCBsb2FkZXJzLiAgSWYgYSBuYXZpZ2F0aW9uIGlzIGluIHByb2dyZXNzIG9yIGlmIHRoaXNcbiAgLy8gaXMgaW50ZXJydXB0ZWQgYnkgYSBuYXZpZ2F0aW9uLCBhbGxvdyB0aGlzIHRvIFwic3VjY2VlZFwiIGJ5IGNhbGxpbmcgYWxsXG4gIC8vIGxvYWRlcnMgZHVyaW5nIHRoZSBuZXh0IGxvYWRlciByb3VuZFxuICBmdW5jdGlvbiByZXZhbGlkYXRlKCkge1xuICAgIGludGVycnVwdEFjdGl2ZUxvYWRzKCk7XG4gICAgdXBkYXRlU3RhdGUoeyByZXZhbGlkYXRpb246IFwibG9hZGluZ1wiIH0pO1xuXG4gICAgLy8gSWYgd2UncmUgY3VycmVudGx5IHN1Ym1pdHRpbmcgYW4gYWN0aW9uLCB3ZSBkb24ndCBuZWVkIHRvIHN0YXJ0IGEgbmV3XG4gICAgLy8gbmF2aWdhdGlvbiwgd2UnbGwganVzdCBsZXQgdGhlIGZvbGxvdyB1cCBsb2FkZXIgZXhlY3V0aW9uIGNhbGwgYWxsIGxvYWRlcnNcbiAgICBpZiAoc3RhdGUubmF2aWdhdGlvbi5zdGF0ZSA9PT0gXCJzdWJtaXR0aW5nXCIpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBJZiB3ZSdyZSBjdXJyZW50bHkgaW4gYW4gaWRsZSBzdGF0ZSwgc3RhcnQgYSBuZXcgbmF2aWdhdGlvbiBmb3IgdGhlIGN1cnJlbnRcbiAgICAvLyBhY3Rpb24vbG9jYXRpb24gYW5kIG1hcmsgaXQgYXMgdW5pbnRlcnJ1cHRlZCwgd2hpY2ggd2lsbCBza2lwIHRoZSBoaXN0b3J5XG4gICAgLy8gdXBkYXRlIGluIGNvbXBsZXRlTmF2aWdhdGlvblxuICAgIGlmIChzdGF0ZS5uYXZpZ2F0aW9uLnN0YXRlID09PSBcImlkbGVcIikge1xuICAgICAgc3RhcnROYXZpZ2F0aW9uKHN0YXRlLmhpc3RvcnlBY3Rpb24sIHN0YXRlLmxvY2F0aW9uLCB7XG4gICAgICAgIHN0YXJ0VW5pbnRlcnJ1cHRlZFJldmFsaWRhdGlvbjogdHJ1ZSxcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIE90aGVyd2lzZSwgaWYgd2UncmUgY3VycmVudGx5IGluIGEgbG9hZGluZyBzdGF0ZSwganVzdCBzdGFydCBhIG5ld1xuICAgIC8vIG5hdmlnYXRpb24gdG8gdGhlIG5hdmlnYXRpb24ubG9jYXRpb24gYnV0IGRvIG5vdCB0cmlnZ2VyIGFuIHVuaW50ZXJydXB0ZWRcbiAgICAvLyByZXZhbGlkYXRpb24gc28gdGhhdCBoaXN0b3J5IGNvcnJlY3RseSB1cGRhdGVzIG9uY2UgdGhlIG5hdmlnYXRpb24gY29tcGxldGVzXG4gICAgc3RhcnROYXZpZ2F0aW9uKFxuICAgICAgcGVuZGluZ0FjdGlvbiB8fCBzdGF0ZS5oaXN0b3J5QWN0aW9uLFxuICAgICAgc3RhdGUubmF2aWdhdGlvbi5sb2NhdGlvbixcbiAgICAgIHsgb3ZlcnJpZGVOYXZpZ2F0aW9uOiBzdGF0ZS5uYXZpZ2F0aW9uIH1cbiAgICApO1xuICB9XG5cbiAgLy8gU3RhcnQgYSBuYXZpZ2F0aW9uIHRvIHRoZSBnaXZlbiBhY3Rpb24vbG9jYXRpb24uICBDYW4gb3B0aW9uYWxseSBwcm92aWRlIGFcbiAgLy8gb3ZlcnJpZGVOYXZpZ2F0aW9uIHdoaWNoIHdpbGwgb3ZlcnJpZGUgdGhlIG5vcm1hbExvYWQgaW4gdGhlIGNhc2Ugb2YgYSByZWRpcmVjdFxuICAvLyBuYXZpZ2F0aW9uXG4gIGFzeW5jIGZ1bmN0aW9uIHN0YXJ0TmF2aWdhdGlvbihcbiAgICBoaXN0b3J5QWN0aW9uOiBIaXN0b3J5QWN0aW9uLFxuICAgIGxvY2F0aW9uOiBMb2NhdGlvbixcbiAgICBvcHRzPzoge1xuICAgICAgaW5pdGlhbEh5ZHJhdGlvbj86IGJvb2xlYW47XG4gICAgICBzdWJtaXNzaW9uPzogU3VibWlzc2lvbjtcbiAgICAgIGZldGNoZXJTdWJtaXNzaW9uPzogU3VibWlzc2lvbjtcbiAgICAgIG92ZXJyaWRlTmF2aWdhdGlvbj86IE5hdmlnYXRpb247XG4gICAgICBwZW5kaW5nRXJyb3I/OiBFcnJvclJlc3BvbnNlSW1wbDtcbiAgICAgIHN0YXJ0VW5pbnRlcnJ1cHRlZFJldmFsaWRhdGlvbj86IGJvb2xlYW47XG4gICAgICBwcmV2ZW50U2Nyb2xsUmVzZXQ/OiBib29sZWFuO1xuICAgICAgcmVwbGFjZT86IGJvb2xlYW47XG4gICAgICBlbmFibGVWaWV3VHJhbnNpdGlvbj86IGJvb2xlYW47XG4gICAgICBmbHVzaFN5bmM/OiBib29sZWFuO1xuICAgIH1cbiAgKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgLy8gQWJvcnQgYW55IGluLXByb2dyZXNzIG5hdmlnYXRpb25zIGFuZCBzdGFydCBhIG5ldyBvbmUuIFVuc2V0IGFueSBvbmdvaW5nXG4gICAgLy8gdW5pbnRlcnJ1cHRlZCByZXZhbGlkYXRpb25zIHVubGVzcyB0b2xkIG90aGVyd2lzZSwgc2luY2Ugd2Ugd2FudCB0aGlzXG4gICAgLy8gbmV3IG5hdmlnYXRpb24gdG8gdXBkYXRlIGhpc3Rvcnkgbm9ybWFsbHlcbiAgICBwZW5kaW5nTmF2aWdhdGlvbkNvbnRyb2xsZXIgJiYgcGVuZGluZ05hdmlnYXRpb25Db250cm9sbGVyLmFib3J0KCk7XG4gICAgcGVuZGluZ05hdmlnYXRpb25Db250cm9sbGVyID0gbnVsbDtcbiAgICBwZW5kaW5nQWN0aW9uID0gaGlzdG9yeUFjdGlvbjtcbiAgICBpc1VuaW50ZXJydXB0ZWRSZXZhbGlkYXRpb24gPVxuICAgICAgKG9wdHMgJiYgb3B0cy5zdGFydFVuaW50ZXJydXB0ZWRSZXZhbGlkYXRpb24pID09PSB0cnVlO1xuXG4gICAgLy8gU2F2ZSB0aGUgY3VycmVudCBzY3JvbGwgcG9zaXRpb24gZXZlcnkgdGltZSB3ZSBzdGFydCBhIG5ldyBuYXZpZ2F0aW9uLFxuICAgIC8vIGFuZCB0cmFjayB3aGV0aGVyIHdlIHNob3VsZCByZXNldCBzY3JvbGwgb24gY29tcGxldGlvblxuICAgIHNhdmVTY3JvbGxQb3NpdGlvbihzdGF0ZS5sb2NhdGlvbiwgc3RhdGUubWF0Y2hlcyk7XG4gICAgcGVuZGluZ1ByZXZlbnRTY3JvbGxSZXNldCA9IChvcHRzICYmIG9wdHMucHJldmVudFNjcm9sbFJlc2V0KSA9PT0gdHJ1ZTtcblxuICAgIHBlbmRpbmdWaWV3VHJhbnNpdGlvbkVuYWJsZWQgPSAob3B0cyAmJiBvcHRzLmVuYWJsZVZpZXdUcmFuc2l0aW9uKSA9PT0gdHJ1ZTtcblxuICAgIGxldCByb3V0ZXNUb1VzZSA9IGluRmxpZ2h0RGF0YVJvdXRlcyB8fCBkYXRhUm91dGVzO1xuICAgIGxldCBsb2FkaW5nTmF2aWdhdGlvbiA9IG9wdHMgJiYgb3B0cy5vdmVycmlkZU5hdmlnYXRpb247XG4gICAgbGV0IG1hdGNoZXMgPSBtYXRjaFJvdXRlcyhyb3V0ZXNUb1VzZSwgbG9jYXRpb24sIGJhc2VuYW1lKTtcbiAgICBsZXQgZmx1c2hTeW5jID0gKG9wdHMgJiYgb3B0cy5mbHVzaFN5bmMpID09PSB0cnVlO1xuXG4gICAgLy8gU2hvcnQgY2lyY3VpdCB3aXRoIGEgNDA0IG9uIHRoZSByb290IGVycm9yIGJvdW5kYXJ5IGlmIHdlIG1hdGNoIG5vdGhpbmdcbiAgICBpZiAoIW1hdGNoZXMpIHtcbiAgICAgIGxldCBlcnJvciA9IGdldEludGVybmFsUm91dGVyRXJyb3IoNDA0LCB7IHBhdGhuYW1lOiBsb2NhdGlvbi5wYXRobmFtZSB9KTtcbiAgICAgIGxldCB7IG1hdGNoZXM6IG5vdEZvdW5kTWF0Y2hlcywgcm91dGUgfSA9XG4gICAgICAgIGdldFNob3J0Q2lyY3VpdE1hdGNoZXMocm91dGVzVG9Vc2UpO1xuICAgICAgLy8gQ2FuY2VsIGFsbCBwZW5kaW5nIGRlZmVycmVkIG9uIDQwNHMgc2luY2Ugd2UgZG9uJ3Qga2VlcCBhbnkgcm91dGVzXG4gICAgICBjYW5jZWxBY3RpdmVEZWZlcnJlZHMoKTtcbiAgICAgIGNvbXBsZXRlTmF2aWdhdGlvbihcbiAgICAgICAgbG9jYXRpb24sXG4gICAgICAgIHtcbiAgICAgICAgICBtYXRjaGVzOiBub3RGb3VuZE1hdGNoZXMsXG4gICAgICAgICAgbG9hZGVyRGF0YToge30sXG4gICAgICAgICAgZXJyb3JzOiB7XG4gICAgICAgICAgICBbcm91dGUuaWRdOiBlcnJvcixcbiAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgICAgICB7IGZsdXNoU3luYyB9XG4gICAgICApO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIFNob3J0IGNpcmN1aXQgaWYgaXQncyBvbmx5IGEgaGFzaCBjaGFuZ2UgYW5kIG5vdCBhIHJldmFsaWRhdGlvbiBvclxuICAgIC8vIG11dGF0aW9uIHN1Ym1pc3Npb24uXG4gICAgLy9cbiAgICAvLyBJZ25vcmUgb24gaW5pdGlhbCBwYWdlIGxvYWRzIGJlY2F1c2Ugc2luY2UgdGhlIGluaXRpYWwgbG9hZCB3aWxsIGFsd2F5c1xuICAgIC8vIGJlIFwic2FtZSBoYXNoXCIuICBGb3IgZXhhbXBsZSwgb24gL3BhZ2UjaGFzaCBhbmQgc3VibWl0IGEgPEZvcm0gbWV0aG9kPVwicG9zdFwiPlxuICAgIC8vIHdoaWNoIHdpbGwgZGVmYXVsdCB0byBhIG5hdmlnYXRpb24gdG8gL3BhZ2VcbiAgICBpZiAoXG4gICAgICBzdGF0ZS5pbml0aWFsaXplZCAmJlxuICAgICAgIWlzUmV2YWxpZGF0aW9uUmVxdWlyZWQgJiZcbiAgICAgIGlzSGFzaENoYW5nZU9ubHkoc3RhdGUubG9jYXRpb24sIGxvY2F0aW9uKSAmJlxuICAgICAgIShvcHRzICYmIG9wdHMuc3VibWlzc2lvbiAmJiBpc011dGF0aW9uTWV0aG9kKG9wdHMuc3VibWlzc2lvbi5mb3JtTWV0aG9kKSlcbiAgICApIHtcbiAgICAgIGNvbXBsZXRlTmF2aWdhdGlvbihsb2NhdGlvbiwgeyBtYXRjaGVzIH0sIHsgZmx1c2hTeW5jIH0pO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIENyZWF0ZSBhIGNvbnRyb2xsZXIvUmVxdWVzdCBmb3IgdGhpcyBuYXZpZ2F0aW9uXG4gICAgcGVuZGluZ05hdmlnYXRpb25Db250cm9sbGVyID0gbmV3IEFib3J0Q29udHJvbGxlcigpO1xuICAgIGxldCByZXF1ZXN0ID0gY3JlYXRlQ2xpZW50U2lkZVJlcXVlc3QoXG4gICAgICBpbml0Lmhpc3RvcnksXG4gICAgICBsb2NhdGlvbixcbiAgICAgIHBlbmRpbmdOYXZpZ2F0aW9uQ29udHJvbGxlci5zaWduYWwsXG4gICAgICBvcHRzICYmIG9wdHMuc3VibWlzc2lvblxuICAgICk7XG4gICAgbGV0IHBlbmRpbmdBY3Rpb25EYXRhOiBSb3V0ZURhdGEgfCB1bmRlZmluZWQ7XG4gICAgbGV0IHBlbmRpbmdFcnJvcjogUm91dGVEYXRhIHwgdW5kZWZpbmVkO1xuXG4gICAgaWYgKG9wdHMgJiYgb3B0cy5wZW5kaW5nRXJyb3IpIHtcbiAgICAgIC8vIElmIHdlIGhhdmUgYSBwZW5kaW5nRXJyb3IsIGl0IG1lYW5zIHRoZSB1c2VyIGF0dGVtcHRlZCBhIEdFVCBzdWJtaXNzaW9uXG4gICAgICAvLyB3aXRoIGJpbmFyeSBGb3JtRGF0YSBzbyBhc3NpZ24gaGVyZSBhbmQgc2tpcCB0byBoYW5kbGVMb2FkZXJzLiAgVGhhdFxuICAgICAgLy8gd2F5IHdlIGhhbmRsZSBjYWxsaW5nIGxvYWRlcnMgYWJvdmUgdGhlIGJvdW5kYXJ5IGV0Yy4gIEl0J3Mgbm90IHJlYWxseVxuICAgICAgLy8gZGlmZmVyZW50IGZyb20gYW4gYWN0aW9uRXJyb3IgaW4gdGhhdCBzZW5zZS5cbiAgICAgIHBlbmRpbmdFcnJvciA9IHtcbiAgICAgICAgW2ZpbmROZWFyZXN0Qm91bmRhcnkobWF0Y2hlcykucm91dGUuaWRdOiBvcHRzLnBlbmRpbmdFcnJvcixcbiAgICAgIH07XG4gICAgfSBlbHNlIGlmIChcbiAgICAgIG9wdHMgJiZcbiAgICAgIG9wdHMuc3VibWlzc2lvbiAmJlxuICAgICAgaXNNdXRhdGlvbk1ldGhvZChvcHRzLnN1Ym1pc3Npb24uZm9ybU1ldGhvZClcbiAgICApIHtcbiAgICAgIC8vIENhbGwgYWN0aW9uIGlmIHdlIHJlY2VpdmVkIGFuIGFjdGlvbiBzdWJtaXNzaW9uXG4gICAgICBsZXQgYWN0aW9uT3V0cHV0ID0gYXdhaXQgaGFuZGxlQWN0aW9uKFxuICAgICAgICByZXF1ZXN0LFxuICAgICAgICBsb2NhdGlvbixcbiAgICAgICAgb3B0cy5zdWJtaXNzaW9uLFxuICAgICAgICBtYXRjaGVzLFxuICAgICAgICB7IHJlcGxhY2U6IG9wdHMucmVwbGFjZSwgZmx1c2hTeW5jIH1cbiAgICAgICk7XG5cbiAgICAgIGlmIChhY3Rpb25PdXRwdXQuc2hvcnRDaXJjdWl0ZWQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBwZW5kaW5nQWN0aW9uRGF0YSA9IGFjdGlvbk91dHB1dC5wZW5kaW5nQWN0aW9uRGF0YTtcbiAgICAgIHBlbmRpbmdFcnJvciA9IGFjdGlvbk91dHB1dC5wZW5kaW5nQWN0aW9uRXJyb3I7XG4gICAgICBsb2FkaW5nTmF2aWdhdGlvbiA9IGdldExvYWRpbmdOYXZpZ2F0aW9uKGxvY2F0aW9uLCBvcHRzLnN1Ym1pc3Npb24pO1xuICAgICAgZmx1c2hTeW5jID0gZmFsc2U7XG5cbiAgICAgIC8vIENyZWF0ZSBhIEdFVCByZXF1ZXN0IGZvciB0aGUgbG9hZGVyc1xuICAgICAgcmVxdWVzdCA9IG5ldyBSZXF1ZXN0KHJlcXVlc3QudXJsLCB7IHNpZ25hbDogcmVxdWVzdC5zaWduYWwgfSk7XG4gICAgfVxuXG4gICAgLy8gQ2FsbCBsb2FkZXJzXG4gICAgbGV0IHsgc2hvcnRDaXJjdWl0ZWQsIGxvYWRlckRhdGEsIGVycm9ycyB9ID0gYXdhaXQgaGFuZGxlTG9hZGVycyhcbiAgICAgIHJlcXVlc3QsXG4gICAgICBsb2NhdGlvbixcbiAgICAgIG1hdGNoZXMsXG4gICAgICBsb2FkaW5nTmF2aWdhdGlvbixcbiAgICAgIG9wdHMgJiYgb3B0cy5zdWJtaXNzaW9uLFxuICAgICAgb3B0cyAmJiBvcHRzLmZldGNoZXJTdWJtaXNzaW9uLFxuICAgICAgb3B0cyAmJiBvcHRzLnJlcGxhY2UsXG4gICAgICBvcHRzICYmIG9wdHMuaW5pdGlhbEh5ZHJhdGlvbiA9PT0gdHJ1ZSxcbiAgICAgIGZsdXNoU3luYyxcbiAgICAgIHBlbmRpbmdBY3Rpb25EYXRhLFxuICAgICAgcGVuZGluZ0Vycm9yXG4gICAgKTtcblxuICAgIGlmIChzaG9ydENpcmN1aXRlZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIENsZWFuIHVwIG5vdyB0aGF0IHRoZSBhY3Rpb24vbG9hZGVycyBoYXZlIGNvbXBsZXRlZC4gIERvbid0IGNsZWFuIHVwIGlmXG4gICAgLy8gd2Ugc2hvcnQgY2lyY3VpdGVkIGJlY2F1c2UgcGVuZGluZ05hdmlnYXRpb25Db250cm9sbGVyIHdpbGwgaGF2ZSBhbHJlYWR5XG4gICAgLy8gYmVlbiBhc3NpZ25lZCB0byBhIG5ldyBjb250cm9sbGVyIGZvciB0aGUgbmV4dCBuYXZpZ2F0aW9uXG4gICAgcGVuZGluZ05hdmlnYXRpb25Db250cm9sbGVyID0gbnVsbDtcblxuICAgIGNvbXBsZXRlTmF2aWdhdGlvbihsb2NhdGlvbiwge1xuICAgICAgbWF0Y2hlcyxcbiAgICAgIC4uLihwZW5kaW5nQWN0aW9uRGF0YSA/IHsgYWN0aW9uRGF0YTogcGVuZGluZ0FjdGlvbkRhdGEgfSA6IHt9KSxcbiAgICAgIGxvYWRlckRhdGEsXG4gICAgICBlcnJvcnMsXG4gICAgfSk7XG4gIH1cblxuICAvLyBDYWxsIHRoZSBhY3Rpb24gbWF0Y2hlZCBieSB0aGUgbGVhZiByb3V0ZSBmb3IgdGhpcyBuYXZpZ2F0aW9uIGFuZCBoYW5kbGVcbiAgLy8gcmVkaXJlY3RzL2Vycm9yc1xuICBhc3luYyBmdW5jdGlvbiBoYW5kbGVBY3Rpb24oXG4gICAgcmVxdWVzdDogUmVxdWVzdCxcbiAgICBsb2NhdGlvbjogTG9jYXRpb24sXG4gICAgc3VibWlzc2lvbjogU3VibWlzc2lvbixcbiAgICBtYXRjaGVzOiBBZ25vc3RpY0RhdGFSb3V0ZU1hdGNoW10sXG4gICAgb3B0czogeyByZXBsYWNlPzogYm9vbGVhbjsgZmx1c2hTeW5jPzogYm9vbGVhbiB9ID0ge31cbiAgKTogUHJvbWlzZTxIYW5kbGVBY3Rpb25SZXN1bHQ+IHtcbiAgICBpbnRlcnJ1cHRBY3RpdmVMb2FkcygpO1xuXG4gICAgLy8gUHV0IHVzIGluIGEgc3VibWl0dGluZyBzdGF0ZVxuICAgIGxldCBuYXZpZ2F0aW9uID0gZ2V0U3VibWl0dGluZ05hdmlnYXRpb24obG9jYXRpb24sIHN1Ym1pc3Npb24pO1xuICAgIHVwZGF0ZVN0YXRlKHsgbmF2aWdhdGlvbiB9LCB7IGZsdXNoU3luYzogb3B0cy5mbHVzaFN5bmMgPT09IHRydWUgfSk7XG5cbiAgICAvLyBDYWxsIG91ciBhY3Rpb24gYW5kIGdldCB0aGUgcmVzdWx0XG4gICAgbGV0IHJlc3VsdDogRGF0YVJlc3VsdDtcbiAgICBsZXQgYWN0aW9uTWF0Y2ggPSBnZXRUYXJnZXRNYXRjaChtYXRjaGVzLCBsb2NhdGlvbik7XG5cbiAgICBpZiAoIWFjdGlvbk1hdGNoLnJvdXRlLmFjdGlvbiAmJiAhYWN0aW9uTWF0Y2gucm91dGUubGF6eSkge1xuICAgICAgcmVzdWx0ID0ge1xuICAgICAgICB0eXBlOiBSZXN1bHRUeXBlLmVycm9yLFxuICAgICAgICBlcnJvcjogZ2V0SW50ZXJuYWxSb3V0ZXJFcnJvcig0MDUsIHtcbiAgICAgICAgICBtZXRob2Q6IHJlcXVlc3QubWV0aG9kLFxuICAgICAgICAgIHBhdGhuYW1lOiBsb2NhdGlvbi5wYXRobmFtZSxcbiAgICAgICAgICByb3V0ZUlkOiBhY3Rpb25NYXRjaC5yb3V0ZS5pZCxcbiAgICAgICAgfSksXG4gICAgICB9O1xuICAgIH0gZWxzZSB7XG4gICAgICByZXN1bHQgPSBhd2FpdCBjYWxsTG9hZGVyT3JBY3Rpb24oXG4gICAgICAgIFwiYWN0aW9uXCIsXG4gICAgICAgIHJlcXVlc3QsXG4gICAgICAgIGFjdGlvbk1hdGNoLFxuICAgICAgICBtYXRjaGVzLFxuICAgICAgICBtYW5pZmVzdCxcbiAgICAgICAgbWFwUm91dGVQcm9wZXJ0aWVzLFxuICAgICAgICBiYXNlbmFtZSxcbiAgICAgICAgZnV0dXJlLnY3X3JlbGF0aXZlU3BsYXRQYXRoXG4gICAgICApO1xuXG4gICAgICBpZiAocmVxdWVzdC5zaWduYWwuYWJvcnRlZCkge1xuICAgICAgICByZXR1cm4geyBzaG9ydENpcmN1aXRlZDogdHJ1ZSB9O1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChpc1JlZGlyZWN0UmVzdWx0KHJlc3VsdCkpIHtcbiAgICAgIGxldCByZXBsYWNlOiBib29sZWFuO1xuICAgICAgaWYgKG9wdHMgJiYgb3B0cy5yZXBsYWNlICE9IG51bGwpIHtcbiAgICAgICAgcmVwbGFjZSA9IG9wdHMucmVwbGFjZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIElmIHRoZSB1c2VyIGRpZG4ndCBleHBsaWNpdHkgaW5kaWNhdGUgcmVwbGFjZSBiZWhhdmlvciwgcmVwbGFjZSBpZlxuICAgICAgICAvLyB3ZSByZWRpcmVjdGVkIHRvIHRoZSBleGFjdCBzYW1lIGxvY2F0aW9uIHdlJ3JlIGN1cnJlbnRseSBhdCB0byBhdm9pZFxuICAgICAgICAvLyBkb3VibGUgYmFjay1idXR0b25zXG4gICAgICAgIHJlcGxhY2UgPVxuICAgICAgICAgIHJlc3VsdC5sb2NhdGlvbiA9PT0gc3RhdGUubG9jYXRpb24ucGF0aG5hbWUgKyBzdGF0ZS5sb2NhdGlvbi5zZWFyY2g7XG4gICAgICB9XG4gICAgICBhd2FpdCBzdGFydFJlZGlyZWN0TmF2aWdhdGlvbihzdGF0ZSwgcmVzdWx0LCB7IHN1Ym1pc3Npb24sIHJlcGxhY2UgfSk7XG4gICAgICByZXR1cm4geyBzaG9ydENpcmN1aXRlZDogdHJ1ZSB9O1xuICAgIH1cblxuICAgIGlmIChpc0Vycm9yUmVzdWx0KHJlc3VsdCkpIHtcbiAgICAgIC8vIFN0b3JlIG9mZiB0aGUgcGVuZGluZyBlcnJvciAtIHdlIHVzZSBpdCB0byBkZXRlcm1pbmUgd2hpY2ggbG9hZGVyc1xuICAgICAgLy8gdG8gY2FsbCBhbmQgd2lsbCBjb21taXQgaXQgd2hlbiB3ZSBjb21wbGV0ZSB0aGUgbmF2aWdhdGlvblxuICAgICAgbGV0IGJvdW5kYXJ5TWF0Y2ggPSBmaW5kTmVhcmVzdEJvdW5kYXJ5KG1hdGNoZXMsIGFjdGlvbk1hdGNoLnJvdXRlLmlkKTtcblxuICAgICAgLy8gQnkgZGVmYXVsdCwgYWxsIHN1Ym1pc3Npb25zIGFyZSBSRVBMQUNFIG5hdmlnYXRpb25zLCBidXQgaWYgdGhlXG4gICAgICAvLyBhY3Rpb24gdGhyZXcgYW4gZXJyb3IgdGhhdCdsbCBiZSByZW5kZXJlZCBpbiBhbiBlcnJvckVsZW1lbnQsIHdlIGZhbGxcbiAgICAgIC8vIGJhY2sgdG8gUFVTSCBzbyB0aGF0IHRoZSB1c2VyIGNhbiB1c2UgdGhlIGJhY2sgYnV0dG9uIHRvIGdldCBiYWNrIHRvXG4gICAgICAvLyB0aGUgcHJlLXN1Ym1pc3Npb24gZm9ybSBsb2NhdGlvbiB0byB0cnkgYWdhaW5cbiAgICAgIGlmICgob3B0cyAmJiBvcHRzLnJlcGxhY2UpICE9PSB0cnVlKSB7XG4gICAgICAgIHBlbmRpbmdBY3Rpb24gPSBIaXN0b3J5QWN0aW9uLlB1c2g7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIC8vIFNlbmQgYmFjayBhbiBlbXB0eSBvYmplY3Qgd2UgY2FuIHVzZSB0byBjbGVhciBvdXQgYW55IHByaW9yIGFjdGlvbkRhdGFcbiAgICAgICAgcGVuZGluZ0FjdGlvbkRhdGE6IHt9LFxuICAgICAgICBwZW5kaW5nQWN0aW9uRXJyb3I6IHsgW2JvdW5kYXJ5TWF0Y2gucm91dGUuaWRdOiByZXN1bHQuZXJyb3IgfSxcbiAgICAgIH07XG4gICAgfVxuXG4gICAgaWYgKGlzRGVmZXJyZWRSZXN1bHQocmVzdWx0KSkge1xuICAgICAgdGhyb3cgZ2V0SW50ZXJuYWxSb3V0ZXJFcnJvcig0MDAsIHsgdHlwZTogXCJkZWZlci1hY3Rpb25cIiB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgcGVuZGluZ0FjdGlvbkRhdGE6IHsgW2FjdGlvbk1hdGNoLnJvdXRlLmlkXTogcmVzdWx0LmRhdGEgfSxcbiAgICB9O1xuICB9XG5cbiAgLy8gQ2FsbCBhbGwgYXBwbGljYWJsZSBsb2FkZXJzIGZvciB0aGUgZ2l2ZW4gbWF0Y2hlcywgaGFuZGxpbmcgcmVkaXJlY3RzLFxuICAvLyBlcnJvcnMsIGV0Yy5cbiAgYXN5bmMgZnVuY3Rpb24gaGFuZGxlTG9hZGVycyhcbiAgICByZXF1ZXN0OiBSZXF1ZXN0LFxuICAgIGxvY2F0aW9uOiBMb2NhdGlvbixcbiAgICBtYXRjaGVzOiBBZ25vc3RpY0RhdGFSb3V0ZU1hdGNoW10sXG4gICAgb3ZlcnJpZGVOYXZpZ2F0aW9uPzogTmF2aWdhdGlvbixcbiAgICBzdWJtaXNzaW9uPzogU3VibWlzc2lvbixcbiAgICBmZXRjaGVyU3VibWlzc2lvbj86IFN1Ym1pc3Npb24sXG4gICAgcmVwbGFjZT86IGJvb2xlYW4sXG4gICAgaW5pdGlhbEh5ZHJhdGlvbj86IGJvb2xlYW4sXG4gICAgZmx1c2hTeW5jPzogYm9vbGVhbixcbiAgICBwZW5kaW5nQWN0aW9uRGF0YT86IFJvdXRlRGF0YSxcbiAgICBwZW5kaW5nRXJyb3I/OiBSb3V0ZURhdGFcbiAgKTogUHJvbWlzZTxIYW5kbGVMb2FkZXJzUmVzdWx0PiB7XG4gICAgLy8gRmlndXJlIG91dCB0aGUgcmlnaHQgbmF2aWdhdGlvbiB3ZSB3YW50IHRvIHVzZSBmb3IgZGF0YSBsb2FkaW5nXG4gICAgbGV0IGxvYWRpbmdOYXZpZ2F0aW9uID1cbiAgICAgIG92ZXJyaWRlTmF2aWdhdGlvbiB8fCBnZXRMb2FkaW5nTmF2aWdhdGlvbihsb2NhdGlvbiwgc3VibWlzc2lvbik7XG5cbiAgICAvLyBJZiB0aGlzIHdhcyBhIHJlZGlyZWN0IGZyb20gYW4gYWN0aW9uIHdlIGRvbid0IGhhdmUgYSBcInN1Ym1pc3Npb25cIiBidXRcbiAgICAvLyB3ZSBoYXZlIGl0IG9uIHRoZSBsb2FkaW5nIG5hdmlnYXRpb24gc28gdXNlIHRoYXQgaWYgYXZhaWxhYmxlXG4gICAgbGV0IGFjdGl2ZVN1Ym1pc3Npb24gPVxuICAgICAgc3VibWlzc2lvbiB8fFxuICAgICAgZmV0Y2hlclN1Ym1pc3Npb24gfHxcbiAgICAgIGdldFN1Ym1pc3Npb25Gcm9tTmF2aWdhdGlvbihsb2FkaW5nTmF2aWdhdGlvbik7XG5cbiAgICBsZXQgcm91dGVzVG9Vc2UgPSBpbkZsaWdodERhdGFSb3V0ZXMgfHwgZGF0YVJvdXRlcztcbiAgICBsZXQgW21hdGNoZXNUb0xvYWQsIHJldmFsaWRhdGluZ0ZldGNoZXJzXSA9IGdldE1hdGNoZXNUb0xvYWQoXG4gICAgICBpbml0Lmhpc3RvcnksXG4gICAgICBzdGF0ZSxcbiAgICAgIG1hdGNoZXMsXG4gICAgICBhY3RpdmVTdWJtaXNzaW9uLFxuICAgICAgbG9jYXRpb24sXG4gICAgICBmdXR1cmUudjdfcGFydGlhbEh5ZHJhdGlvbiAmJiBpbml0aWFsSHlkcmF0aW9uID09PSB0cnVlLFxuICAgICAgaXNSZXZhbGlkYXRpb25SZXF1aXJlZCxcbiAgICAgIGNhbmNlbGxlZERlZmVycmVkUm91dGVzLFxuICAgICAgY2FuY2VsbGVkRmV0Y2hlckxvYWRzLFxuICAgICAgZGVsZXRlZEZldGNoZXJzLFxuICAgICAgZmV0Y2hMb2FkTWF0Y2hlcyxcbiAgICAgIGZldGNoUmVkaXJlY3RJZHMsXG4gICAgICByb3V0ZXNUb1VzZSxcbiAgICAgIGJhc2VuYW1lLFxuICAgICAgcGVuZGluZ0FjdGlvbkRhdGEsXG4gICAgICBwZW5kaW5nRXJyb3JcbiAgICApO1xuXG4gICAgLy8gQ2FuY2VsIHBlbmRpbmcgZGVmZXJyZWRzIGZvciBuby1sb25nZXItbWF0Y2hlZCByb3V0ZXMgb3Igcm91dGVzIHdlJ3JlXG4gICAgLy8gYWJvdXQgdG8gcmVsb2FkLiAgTm90ZSB0aGF0IGlmIHRoaXMgaXMgYW4gYWN0aW9uIHJlbG9hZCB3ZSB3b3VsZCBoYXZlXG4gICAgLy8gYWxyZWFkeSBjYW5jZWxsZWQgYWxsIHBlbmRpbmcgZGVmZXJyZWRzIHNvIHRoaXMgd291bGQgYmUgYSBuby1vcFxuICAgIGNhbmNlbEFjdGl2ZURlZmVycmVkcyhcbiAgICAgIChyb3V0ZUlkKSA9PlxuICAgICAgICAhKG1hdGNoZXMgJiYgbWF0Y2hlcy5zb21lKChtKSA9PiBtLnJvdXRlLmlkID09PSByb3V0ZUlkKSkgfHxcbiAgICAgICAgKG1hdGNoZXNUb0xvYWQgJiYgbWF0Y2hlc1RvTG9hZC5zb21lKChtKSA9PiBtLnJvdXRlLmlkID09PSByb3V0ZUlkKSlcbiAgICApO1xuXG4gICAgcGVuZGluZ05hdmlnYXRpb25Mb2FkSWQgPSArK2luY3JlbWVudGluZ0xvYWRJZDtcblxuICAgIC8vIFNob3J0IGNpcmN1aXQgaWYgd2UgaGF2ZSBubyBsb2FkZXJzIHRvIHJ1blxuICAgIGlmIChtYXRjaGVzVG9Mb2FkLmxlbmd0aCA9PT0gMCAmJiByZXZhbGlkYXRpbmdGZXRjaGVycy5sZW5ndGggPT09IDApIHtcbiAgICAgIGxldCB1cGRhdGVkRmV0Y2hlcnMgPSBtYXJrRmV0Y2hSZWRpcmVjdHNEb25lKCk7XG4gICAgICBjb21wbGV0ZU5hdmlnYXRpb24oXG4gICAgICAgIGxvY2F0aW9uLFxuICAgICAgICB7XG4gICAgICAgICAgbWF0Y2hlcyxcbiAgICAgICAgICBsb2FkZXJEYXRhOiB7fSxcbiAgICAgICAgICAvLyBDb21taXQgcGVuZGluZyBlcnJvciBpZiB3ZSdyZSBzaG9ydCBjaXJjdWl0aW5nXG4gICAgICAgICAgZXJyb3JzOiBwZW5kaW5nRXJyb3IgfHwgbnVsbCxcbiAgICAgICAgICAuLi4ocGVuZGluZ0FjdGlvbkRhdGEgPyB7IGFjdGlvbkRhdGE6IHBlbmRpbmdBY3Rpb25EYXRhIH0gOiB7fSksXG4gICAgICAgICAgLi4uKHVwZGF0ZWRGZXRjaGVycyA/IHsgZmV0Y2hlcnM6IG5ldyBNYXAoc3RhdGUuZmV0Y2hlcnMpIH0gOiB7fSksXG4gICAgICAgIH0sXG4gICAgICAgIHsgZmx1c2hTeW5jIH1cbiAgICAgICk7XG4gICAgICByZXR1cm4geyBzaG9ydENpcmN1aXRlZDogdHJ1ZSB9O1xuICAgIH1cblxuICAgIC8vIElmIHRoaXMgaXMgYW4gdW5pbnRlcnJ1cHRlZCByZXZhbGlkYXRpb24sIHdlIHJlbWFpbiBpbiBvdXIgY3VycmVudCBpZGxlXG4gICAgLy8gc3RhdGUuICBJZiBub3QsIHdlIG5lZWQgdG8gc3dpdGNoIHRvIG91ciBsb2FkaW5nIHN0YXRlIGFuZCBsb2FkIGRhdGEsXG4gICAgLy8gcHJlc2VydmluZyBhbnkgbmV3IGFjdGlvbiBkYXRhIG9yIGV4aXN0aW5nIGFjdGlvbiBkYXRhIChpbiB0aGUgY2FzZSBvZlxuICAgIC8vIGEgcmV2YWxpZGF0aW9uIGludGVycnVwdGluZyBhbiBhY3Rpb25SZWxvYWQpXG4gICAgLy8gSWYgd2UgaGF2ZSBwYXJ0aWFsSHlkcmF0aW9uIGVuYWJsZWQsIHRoZW4gZG9uJ3QgdXBkYXRlIHRoZSBzdGF0ZSBmb3IgdGhlXG4gICAgLy8gaW5pdGlhbCBkYXRhIGxvYWQgc2luY2UgaXQncyBub3QgYSBcIm5hdmlnYXRpb25cIlxuICAgIGlmIChcbiAgICAgICFpc1VuaW50ZXJydXB0ZWRSZXZhbGlkYXRpb24gJiZcbiAgICAgICghZnV0dXJlLnY3X3BhcnRpYWxIeWRyYXRpb24gfHwgIWluaXRpYWxIeWRyYXRpb24pXG4gICAgKSB7XG4gICAgICByZXZhbGlkYXRpbmdGZXRjaGVycy5mb3JFYWNoKChyZikgPT4ge1xuICAgICAgICBsZXQgZmV0Y2hlciA9IHN0YXRlLmZldGNoZXJzLmdldChyZi5rZXkpO1xuICAgICAgICBsZXQgcmV2YWxpZGF0aW5nRmV0Y2hlciA9IGdldExvYWRpbmdGZXRjaGVyKFxuICAgICAgICAgIHVuZGVmaW5lZCxcbiAgICAgICAgICBmZXRjaGVyID8gZmV0Y2hlci5kYXRhIDogdW5kZWZpbmVkXG4gICAgICAgICk7XG4gICAgICAgIHN0YXRlLmZldGNoZXJzLnNldChyZi5rZXksIHJldmFsaWRhdGluZ0ZldGNoZXIpO1xuICAgICAgfSk7XG4gICAgICBsZXQgYWN0aW9uRGF0YSA9IHBlbmRpbmdBY3Rpb25EYXRhIHx8IHN0YXRlLmFjdGlvbkRhdGE7XG4gICAgICB1cGRhdGVTdGF0ZShcbiAgICAgICAge1xuICAgICAgICAgIG5hdmlnYXRpb246IGxvYWRpbmdOYXZpZ2F0aW9uLFxuICAgICAgICAgIC4uLihhY3Rpb25EYXRhXG4gICAgICAgICAgICA/IE9iamVjdC5rZXlzKGFjdGlvbkRhdGEpLmxlbmd0aCA9PT0gMFxuICAgICAgICAgICAgICA/IHsgYWN0aW9uRGF0YTogbnVsbCB9XG4gICAgICAgICAgICAgIDogeyBhY3Rpb25EYXRhIH1cbiAgICAgICAgICAgIDoge30pLFxuICAgICAgICAgIC4uLihyZXZhbGlkYXRpbmdGZXRjaGVycy5sZW5ndGggPiAwXG4gICAgICAgICAgICA/IHsgZmV0Y2hlcnM6IG5ldyBNYXAoc3RhdGUuZmV0Y2hlcnMpIH1cbiAgICAgICAgICAgIDoge30pLFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgZmx1c2hTeW5jLFxuICAgICAgICB9XG4gICAgICApO1xuICAgIH1cblxuICAgIHJldmFsaWRhdGluZ0ZldGNoZXJzLmZvckVhY2goKHJmKSA9PiB7XG4gICAgICBpZiAoZmV0Y2hDb250cm9sbGVycy5oYXMocmYua2V5KSkge1xuICAgICAgICBhYm9ydEZldGNoZXIocmYua2V5KTtcbiAgICAgIH1cbiAgICAgIGlmIChyZi5jb250cm9sbGVyKSB7XG4gICAgICAgIC8vIEZldGNoZXJzIHVzZSBhbiBpbmRlcGVuZGVudCBBYm9ydENvbnRyb2xsZXIgc28gdGhhdCBhYm9ydGluZyBhIGZldGNoZXJcbiAgICAgICAgLy8gKHZpYSBkZWxldGVGZXRjaGVyKSBkb2VzIG5vdCBhYm9ydCB0aGUgdHJpZ2dlcmluZyBuYXZpZ2F0aW9uIHRoYXRcbiAgICAgICAgLy8gdHJpZ2dlcmVkIHRoZSByZXZhbGlkYXRpb25cbiAgICAgICAgZmV0Y2hDb250cm9sbGVycy5zZXQocmYua2V5LCByZi5jb250cm9sbGVyKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIC8vIFByb3h5IG5hdmlnYXRpb24gYWJvcnQgdGhyb3VnaCB0byByZXZhbGlkYXRpb24gZmV0Y2hlcnNcbiAgICBsZXQgYWJvcnRQZW5kaW5nRmV0Y2hSZXZhbGlkYXRpb25zID0gKCkgPT5cbiAgICAgIHJldmFsaWRhdGluZ0ZldGNoZXJzLmZvckVhY2goKGYpID0+IGFib3J0RmV0Y2hlcihmLmtleSkpO1xuICAgIGlmIChwZW5kaW5nTmF2aWdhdGlvbkNvbnRyb2xsZXIpIHtcbiAgICAgIHBlbmRpbmdOYXZpZ2F0aW9uQ29udHJvbGxlci5zaWduYWwuYWRkRXZlbnRMaXN0ZW5lcihcbiAgICAgICAgXCJhYm9ydFwiLFxuICAgICAgICBhYm9ydFBlbmRpbmdGZXRjaFJldmFsaWRhdGlvbnNcbiAgICAgICk7XG4gICAgfVxuXG4gICAgbGV0IHsgcmVzdWx0cywgbG9hZGVyUmVzdWx0cywgZmV0Y2hlclJlc3VsdHMgfSA9XG4gICAgICBhd2FpdCBjYWxsTG9hZGVyc0FuZE1heWJlUmVzb2x2ZURhdGEoXG4gICAgICAgIHN0YXRlLm1hdGNoZXMsXG4gICAgICAgIG1hdGNoZXMsXG4gICAgICAgIG1hdGNoZXNUb0xvYWQsXG4gICAgICAgIHJldmFsaWRhdGluZ0ZldGNoZXJzLFxuICAgICAgICByZXF1ZXN0XG4gICAgICApO1xuXG4gICAgaWYgKHJlcXVlc3Quc2lnbmFsLmFib3J0ZWQpIHtcbiAgICAgIHJldHVybiB7IHNob3J0Q2lyY3VpdGVkOiB0cnVlIH07XG4gICAgfVxuXG4gICAgLy8gQ2xlYW4gdXAgX2FmdGVyXyBsb2FkZXJzIGhhdmUgY29tcGxldGVkLiAgRG9uJ3QgY2xlYW4gdXAgaWYgd2Ugc2hvcnRcbiAgICAvLyBjaXJjdWl0ZWQgYmVjYXVzZSBmZXRjaENvbnRyb2xsZXJzIHdvdWxkIGhhdmUgYmVlbiBhYm9ydGVkIGFuZFxuICAgIC8vIHJlYXNzaWduZWQgdG8gbmV3IGNvbnRyb2xsZXJzIGZvciB0aGUgbmV4dCBuYXZpZ2F0aW9uXG4gICAgaWYgKHBlbmRpbmdOYXZpZ2F0aW9uQ29udHJvbGxlcikge1xuICAgICAgcGVuZGluZ05hdmlnYXRpb25Db250cm9sbGVyLnNpZ25hbC5yZW1vdmVFdmVudExpc3RlbmVyKFxuICAgICAgICBcImFib3J0XCIsXG4gICAgICAgIGFib3J0UGVuZGluZ0ZldGNoUmV2YWxpZGF0aW9uc1xuICAgICAgKTtcbiAgICB9XG4gICAgcmV2YWxpZGF0aW5nRmV0Y2hlcnMuZm9yRWFjaCgocmYpID0+IGZldGNoQ29udHJvbGxlcnMuZGVsZXRlKHJmLmtleSkpO1xuXG4gICAgLy8gSWYgYW55IGxvYWRlcnMgcmV0dXJuZWQgYSByZWRpcmVjdCBSZXNwb25zZSwgc3RhcnQgYSBuZXcgUkVQTEFDRSBuYXZpZ2F0aW9uXG4gICAgbGV0IHJlZGlyZWN0ID0gZmluZFJlZGlyZWN0KHJlc3VsdHMpO1xuICAgIGlmIChyZWRpcmVjdCkge1xuICAgICAgaWYgKHJlZGlyZWN0LmlkeCA+PSBtYXRjaGVzVG9Mb2FkLmxlbmd0aCkge1xuICAgICAgICAvLyBJZiB0aGlzIHJlZGlyZWN0IGNhbWUgZnJvbSBhIGZldGNoZXIgbWFrZSBzdXJlIHdlIG1hcmsgaXQgaW5cbiAgICAgICAgLy8gZmV0Y2hSZWRpcmVjdElkcyBzbyBpdCBkb2Vzbid0IGdldCByZXZhbGlkYXRlZCBvbiB0aGUgbmV4dCBzZXQgb2ZcbiAgICAgICAgLy8gbG9hZGVyIGV4ZWN1dGlvbnNcbiAgICAgICAgbGV0IGZldGNoZXJLZXkgPVxuICAgICAgICAgIHJldmFsaWRhdGluZ0ZldGNoZXJzW3JlZGlyZWN0LmlkeCAtIG1hdGNoZXNUb0xvYWQubGVuZ3RoXS5rZXk7XG4gICAgICAgIGZldGNoUmVkaXJlY3RJZHMuYWRkKGZldGNoZXJLZXkpO1xuICAgICAgfVxuICAgICAgYXdhaXQgc3RhcnRSZWRpcmVjdE5hdmlnYXRpb24oc3RhdGUsIHJlZGlyZWN0LnJlc3VsdCwgeyByZXBsYWNlIH0pO1xuICAgICAgcmV0dXJuIHsgc2hvcnRDaXJjdWl0ZWQ6IHRydWUgfTtcbiAgICB9XG5cbiAgICAvLyBQcm9jZXNzIGFuZCBjb21taXQgb3V0cHV0IGZyb20gbG9hZGVyc1xuICAgIGxldCB7IGxvYWRlckRhdGEsIGVycm9ycyB9ID0gcHJvY2Vzc0xvYWRlckRhdGEoXG4gICAgICBzdGF0ZSxcbiAgICAgIG1hdGNoZXMsXG4gICAgICBtYXRjaGVzVG9Mb2FkLFxuICAgICAgbG9hZGVyUmVzdWx0cyxcbiAgICAgIHBlbmRpbmdFcnJvcixcbiAgICAgIHJldmFsaWRhdGluZ0ZldGNoZXJzLFxuICAgICAgZmV0Y2hlclJlc3VsdHMsXG4gICAgICBhY3RpdmVEZWZlcnJlZHNcbiAgICApO1xuXG4gICAgLy8gV2lyZSB1cCBzdWJzY3JpYmVycyB0byB1cGRhdGUgbG9hZGVyRGF0YSBhcyBwcm9taXNlcyBzZXR0bGVcbiAgICBhY3RpdmVEZWZlcnJlZHMuZm9yRWFjaCgoZGVmZXJyZWREYXRhLCByb3V0ZUlkKSA9PiB7XG4gICAgICBkZWZlcnJlZERhdGEuc3Vic2NyaWJlKChhYm9ydGVkKSA9PiB7XG4gICAgICAgIC8vIE5vdGU6IE5vIG5lZWQgdG8gdXBkYXRlU3RhdGUgaGVyZSBzaW5jZSB0aGUgVHJhY2tlZFByb21pc2Ugb25cbiAgICAgICAgLy8gbG9hZGVyRGF0YSBpcyBzdGFibGUgYWNyb3NzIHJlc29sdmUvcmVqZWN0XG4gICAgICAgIC8vIFJlbW92ZSB0aGlzIGluc3RhbmNlIGlmIHdlIHdlcmUgYWJvcnRlZCBvciBpZiBwcm9taXNlcyBoYXZlIHNldHRsZWRcbiAgICAgICAgaWYgKGFib3J0ZWQgfHwgZGVmZXJyZWREYXRhLmRvbmUpIHtcbiAgICAgICAgICBhY3RpdmVEZWZlcnJlZHMuZGVsZXRlKHJvdXRlSWQpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIC8vIER1cmluZyBwYXJ0aWFsIGh5ZHJhdGlvbiwgcHJlc2VydmUgU1NSIGVycm9ycyBmb3Igcm91dGVzIHRoYXQgZG9uJ3QgcmUtcnVuXG4gICAgaWYgKGZ1dHVyZS52N19wYXJ0aWFsSHlkcmF0aW9uICYmIGluaXRpYWxIeWRyYXRpb24gJiYgc3RhdGUuZXJyb3JzKSB7XG4gICAgICBPYmplY3QuZW50cmllcyhzdGF0ZS5lcnJvcnMpXG4gICAgICAgIC5maWx0ZXIoKFtpZF0pID0+ICFtYXRjaGVzVG9Mb2FkLnNvbWUoKG0pID0+IG0ucm91dGUuaWQgPT09IGlkKSlcbiAgICAgICAgLmZvckVhY2goKFtyb3V0ZUlkLCBlcnJvcl0pID0+IHtcbiAgICAgICAgICBlcnJvcnMgPSBPYmplY3QuYXNzaWduKGVycm9ycyB8fCB7fSwgeyBbcm91dGVJZF06IGVycm9yIH0pO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBsZXQgdXBkYXRlZEZldGNoZXJzID0gbWFya0ZldGNoUmVkaXJlY3RzRG9uZSgpO1xuICAgIGxldCBkaWRBYm9ydEZldGNoTG9hZHMgPSBhYm9ydFN0YWxlRmV0Y2hMb2FkcyhwZW5kaW5nTmF2aWdhdGlvbkxvYWRJZCk7XG4gICAgbGV0IHNob3VsZFVwZGF0ZUZldGNoZXJzID1cbiAgICAgIHVwZGF0ZWRGZXRjaGVycyB8fCBkaWRBYm9ydEZldGNoTG9hZHMgfHwgcmV2YWxpZGF0aW5nRmV0Y2hlcnMubGVuZ3RoID4gMDtcblxuICAgIHJldHVybiB7XG4gICAgICBsb2FkZXJEYXRhLFxuICAgICAgZXJyb3JzLFxuICAgICAgLi4uKHNob3VsZFVwZGF0ZUZldGNoZXJzID8geyBmZXRjaGVyczogbmV3IE1hcChzdGF0ZS5mZXRjaGVycykgfSA6IHt9KSxcbiAgICB9O1xuICB9XG5cbiAgLy8gVHJpZ2dlciBhIGZldGNoZXIgbG9hZC9zdWJtaXQgZm9yIHRoZSBnaXZlbiBmZXRjaGVyIGtleVxuICBmdW5jdGlvbiBmZXRjaChcbiAgICBrZXk6IHN0cmluZyxcbiAgICByb3V0ZUlkOiBzdHJpbmcsXG4gICAgaHJlZjogc3RyaW5nIHwgbnVsbCxcbiAgICBvcHRzPzogUm91dGVyRmV0Y2hPcHRpb25zXG4gICkge1xuICAgIGlmIChpc1NlcnZlcikge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICBcInJvdXRlci5mZXRjaCgpIHdhcyBjYWxsZWQgZHVyaW5nIHRoZSBzZXJ2ZXIgcmVuZGVyLCBidXQgaXQgc2hvdWxkbid0IGJlLiBcIiArXG4gICAgICAgICAgXCJZb3UgYXJlIGxpa2VseSBjYWxsaW5nIGEgdXNlRmV0Y2hlcigpIG1ldGhvZCBpbiB0aGUgYm9keSBvZiB5b3VyIGNvbXBvbmVudC4gXCIgK1xuICAgICAgICAgIFwiVHJ5IG1vdmluZyBpdCB0byBhIHVzZUVmZmVjdCBvciBhIGNhbGxiYWNrLlwiXG4gICAgICApO1xuICAgIH1cblxuICAgIGlmIChmZXRjaENvbnRyb2xsZXJzLmhhcyhrZXkpKSBhYm9ydEZldGNoZXIoa2V5KTtcbiAgICBsZXQgZmx1c2hTeW5jID0gKG9wdHMgJiYgb3B0cy51bnN0YWJsZV9mbHVzaFN5bmMpID09PSB0cnVlO1xuXG4gICAgbGV0IHJvdXRlc1RvVXNlID0gaW5GbGlnaHREYXRhUm91dGVzIHx8IGRhdGFSb3V0ZXM7XG4gICAgbGV0IG5vcm1hbGl6ZWRQYXRoID0gbm9ybWFsaXplVG8oXG4gICAgICBzdGF0ZS5sb2NhdGlvbixcbiAgICAgIHN0YXRlLm1hdGNoZXMsXG4gICAgICBiYXNlbmFtZSxcbiAgICAgIGZ1dHVyZS52N19wcmVwZW5kQmFzZW5hbWUsXG4gICAgICBocmVmLFxuICAgICAgZnV0dXJlLnY3X3JlbGF0aXZlU3BsYXRQYXRoLFxuICAgICAgcm91dGVJZCxcbiAgICAgIG9wdHM/LnJlbGF0aXZlXG4gICAgKTtcbiAgICBsZXQgbWF0Y2hlcyA9IG1hdGNoUm91dGVzKHJvdXRlc1RvVXNlLCBub3JtYWxpemVkUGF0aCwgYmFzZW5hbWUpO1xuXG4gICAgaWYgKCFtYXRjaGVzKSB7XG4gICAgICBzZXRGZXRjaGVyRXJyb3IoXG4gICAgICAgIGtleSxcbiAgICAgICAgcm91dGVJZCxcbiAgICAgICAgZ2V0SW50ZXJuYWxSb3V0ZXJFcnJvcig0MDQsIHsgcGF0aG5hbWU6IG5vcm1hbGl6ZWRQYXRoIH0pLFxuICAgICAgICB7IGZsdXNoU3luYyB9XG4gICAgICApO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGxldCB7IHBhdGgsIHN1Ym1pc3Npb24sIGVycm9yIH0gPSBub3JtYWxpemVOYXZpZ2F0ZU9wdGlvbnMoXG4gICAgICBmdXR1cmUudjdfbm9ybWFsaXplRm9ybU1ldGhvZCxcbiAgICAgIHRydWUsXG4gICAgICBub3JtYWxpemVkUGF0aCxcbiAgICAgIG9wdHNcbiAgICApO1xuXG4gICAgaWYgKGVycm9yKSB7XG4gICAgICBzZXRGZXRjaGVyRXJyb3Ioa2V5LCByb3V0ZUlkLCBlcnJvciwgeyBmbHVzaFN5bmMgfSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgbGV0IG1hdGNoID0gZ2V0VGFyZ2V0TWF0Y2gobWF0Y2hlcywgcGF0aCk7XG5cbiAgICBwZW5kaW5nUHJldmVudFNjcm9sbFJlc2V0ID0gKG9wdHMgJiYgb3B0cy5wcmV2ZW50U2Nyb2xsUmVzZXQpID09PSB0cnVlO1xuXG4gICAgaWYgKHN1Ym1pc3Npb24gJiYgaXNNdXRhdGlvbk1ldGhvZChzdWJtaXNzaW9uLmZvcm1NZXRob2QpKSB7XG4gICAgICBoYW5kbGVGZXRjaGVyQWN0aW9uKFxuICAgICAgICBrZXksXG4gICAgICAgIHJvdXRlSWQsXG4gICAgICAgIHBhdGgsXG4gICAgICAgIG1hdGNoLFxuICAgICAgICBtYXRjaGVzLFxuICAgICAgICBmbHVzaFN5bmMsXG4gICAgICAgIHN1Ym1pc3Npb25cbiAgICAgICk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gU3RvcmUgb2ZmIHRoZSBtYXRjaCBzbyB3ZSBjYW4gY2FsbCBpdCdzIHNob3VsZFJldmFsaWRhdGUgb24gc3Vic2VxdWVudFxuICAgIC8vIHJldmFsaWRhdGlvbnNcbiAgICBmZXRjaExvYWRNYXRjaGVzLnNldChrZXksIHsgcm91dGVJZCwgcGF0aCB9KTtcbiAgICBoYW5kbGVGZXRjaGVyTG9hZGVyKFxuICAgICAga2V5LFxuICAgICAgcm91dGVJZCxcbiAgICAgIHBhdGgsXG4gICAgICBtYXRjaCxcbiAgICAgIG1hdGNoZXMsXG4gICAgICBmbHVzaFN5bmMsXG4gICAgICBzdWJtaXNzaW9uXG4gICAgKTtcbiAgfVxuXG4gIC8vIENhbGwgdGhlIGFjdGlvbiBmb3IgdGhlIG1hdGNoZWQgZmV0Y2hlci5zdWJtaXQoKSwgYW5kIHRoZW4gaGFuZGxlIHJlZGlyZWN0cyxcbiAgLy8gZXJyb3JzLCBhbmQgcmV2YWxpZGF0aW9uXG4gIGFzeW5jIGZ1bmN0aW9uIGhhbmRsZUZldGNoZXJBY3Rpb24oXG4gICAga2V5OiBzdHJpbmcsXG4gICAgcm91dGVJZDogc3RyaW5nLFxuICAgIHBhdGg6IHN0cmluZyxcbiAgICBtYXRjaDogQWdub3N0aWNEYXRhUm91dGVNYXRjaCxcbiAgICByZXF1ZXN0TWF0Y2hlczogQWdub3N0aWNEYXRhUm91dGVNYXRjaFtdLFxuICAgIGZsdXNoU3luYzogYm9vbGVhbixcbiAgICBzdWJtaXNzaW9uOiBTdWJtaXNzaW9uXG4gICkge1xuICAgIGludGVycnVwdEFjdGl2ZUxvYWRzKCk7XG4gICAgZmV0Y2hMb2FkTWF0Y2hlcy5kZWxldGUoa2V5KTtcblxuICAgIGlmICghbWF0Y2gucm91dGUuYWN0aW9uICYmICFtYXRjaC5yb3V0ZS5sYXp5KSB7XG4gICAgICBsZXQgZXJyb3IgPSBnZXRJbnRlcm5hbFJvdXRlckVycm9yKDQwNSwge1xuICAgICAgICBtZXRob2Q6IHN1Ym1pc3Npb24uZm9ybU1ldGhvZCxcbiAgICAgICAgcGF0aG5hbWU6IHBhdGgsXG4gICAgICAgIHJvdXRlSWQ6IHJvdXRlSWQsXG4gICAgICB9KTtcbiAgICAgIHNldEZldGNoZXJFcnJvcihrZXksIHJvdXRlSWQsIGVycm9yLCB7IGZsdXNoU3luYyB9KTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBQdXQgdGhpcyBmZXRjaGVyIGludG8gaXQncyBzdWJtaXR0aW5nIHN0YXRlXG4gICAgbGV0IGV4aXN0aW5nRmV0Y2hlciA9IHN0YXRlLmZldGNoZXJzLmdldChrZXkpO1xuICAgIHVwZGF0ZUZldGNoZXJTdGF0ZShrZXksIGdldFN1Ym1pdHRpbmdGZXRjaGVyKHN1Ym1pc3Npb24sIGV4aXN0aW5nRmV0Y2hlciksIHtcbiAgICAgIGZsdXNoU3luYyxcbiAgICB9KTtcblxuICAgIC8vIENhbGwgdGhlIGFjdGlvbiBmb3IgdGhlIGZldGNoZXJcbiAgICBsZXQgYWJvcnRDb250cm9sbGVyID0gbmV3IEFib3J0Q29udHJvbGxlcigpO1xuICAgIGxldCBmZXRjaFJlcXVlc3QgPSBjcmVhdGVDbGllbnRTaWRlUmVxdWVzdChcbiAgICAgIGluaXQuaGlzdG9yeSxcbiAgICAgIHBhdGgsXG4gICAgICBhYm9ydENvbnRyb2xsZXIuc2lnbmFsLFxuICAgICAgc3VibWlzc2lvblxuICAgICk7XG4gICAgZmV0Y2hDb250cm9sbGVycy5zZXQoa2V5LCBhYm9ydENvbnRyb2xsZXIpO1xuXG4gICAgbGV0IG9yaWdpbmF0aW5nTG9hZElkID0gaW5jcmVtZW50aW5nTG9hZElkO1xuICAgIGxldCBhY3Rpb25SZXN1bHQgPSBhd2FpdCBjYWxsTG9hZGVyT3JBY3Rpb24oXG4gICAgICBcImFjdGlvblwiLFxuICAgICAgZmV0Y2hSZXF1ZXN0LFxuICAgICAgbWF0Y2gsXG4gICAgICByZXF1ZXN0TWF0Y2hlcyxcbiAgICAgIG1hbmlmZXN0LFxuICAgICAgbWFwUm91dGVQcm9wZXJ0aWVzLFxuICAgICAgYmFzZW5hbWUsXG4gICAgICBmdXR1cmUudjdfcmVsYXRpdmVTcGxhdFBhdGhcbiAgICApO1xuXG4gICAgaWYgKGZldGNoUmVxdWVzdC5zaWduYWwuYWJvcnRlZCkge1xuICAgICAgLy8gV2UgY2FuIGRlbGV0ZSB0aGlzIHNvIGxvbmcgYXMgd2Ugd2VyZW4ndCBhYm9ydGVkIGJ5IG91ciBvd24gZmV0Y2hlclxuICAgICAgLy8gcmUtc3VibWl0IHdoaWNoIHdvdWxkIGhhdmUgcHV0IF9uZXdfIGNvbnRyb2xsZXIgaXMgaW4gZmV0Y2hDb250cm9sbGVyc1xuICAgICAgaWYgKGZldGNoQ29udHJvbGxlcnMuZ2V0KGtleSkgPT09IGFib3J0Q29udHJvbGxlcikge1xuICAgICAgICBmZXRjaENvbnRyb2xsZXJzLmRlbGV0ZShrZXkpO1xuICAgICAgfVxuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIFdoZW4gdXNpbmcgdjdfZmV0Y2hlclBlcnNpc3QsIHdlIGRvbid0IHdhbnQgZXJyb3JzIGJ1YmJsaW5nIHVwIHRvIHRoZSBVSVxuICAgIC8vIG9yIHJlZGlyZWN0cyBwcm9jZXNzZWQgZm9yIHVubW91bnRlZCBmZXRjaGVycyBzbyB3ZSBqdXN0IHJldmVydCB0aGVtIHRvXG4gICAgLy8gaWRsZVxuICAgIGlmIChmdXR1cmUudjdfZmV0Y2hlclBlcnNpc3QgJiYgZGVsZXRlZEZldGNoZXJzLmhhcyhrZXkpKSB7XG4gICAgICBpZiAoaXNSZWRpcmVjdFJlc3VsdChhY3Rpb25SZXN1bHQpIHx8IGlzRXJyb3JSZXN1bHQoYWN0aW9uUmVzdWx0KSkge1xuICAgICAgICB1cGRhdGVGZXRjaGVyU3RhdGUoa2V5LCBnZXREb25lRmV0Y2hlcih1bmRlZmluZWQpKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgLy8gTGV0IFN1Y2Nlc3NSZXN1bHQncyBmYWxsIHRocm91Z2ggZm9yIHJldmFsaWRhdGlvblxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoaXNSZWRpcmVjdFJlc3VsdChhY3Rpb25SZXN1bHQpKSB7XG4gICAgICAgIGZldGNoQ29udHJvbGxlcnMuZGVsZXRlKGtleSk7XG4gICAgICAgIGlmIChwZW5kaW5nTmF2aWdhdGlvbkxvYWRJZCA+IG9yaWdpbmF0aW5nTG9hZElkKSB7XG4gICAgICAgICAgLy8gQSBuZXcgbmF2aWdhdGlvbiB3YXMga2lja2VkIG9mZiBhZnRlciBvdXIgYWN0aW9uIHN0YXJ0ZWQsIHNvIHRoYXRcbiAgICAgICAgICAvLyBzaG91bGQgdGFrZSBwcmVjZWRlbmNlIG92ZXIgdGhpcyByZWRpcmVjdCBuYXZpZ2F0aW9uLiAgV2UgYWxyZWFkeVxuICAgICAgICAgIC8vIHNldCBpc1JldmFsaWRhdGlvblJlcXVpcmVkIHNvIGFsbCBsb2FkZXJzIGZvciB0aGUgbmV3IHJvdXRlIHNob3VsZFxuICAgICAgICAgIC8vIGZpcmUgdW5sZXNzIG9wdGVkIG91dCB2aWEgc2hvdWxkUmV2YWxpZGF0ZVxuICAgICAgICAgIHVwZGF0ZUZldGNoZXJTdGF0ZShrZXksIGdldERvbmVGZXRjaGVyKHVuZGVmaW5lZCkpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBmZXRjaFJlZGlyZWN0SWRzLmFkZChrZXkpO1xuICAgICAgICAgIHVwZGF0ZUZldGNoZXJTdGF0ZShrZXksIGdldExvYWRpbmdGZXRjaGVyKHN1Ym1pc3Npb24pKTtcbiAgICAgICAgICByZXR1cm4gc3RhcnRSZWRpcmVjdE5hdmlnYXRpb24oc3RhdGUsIGFjdGlvblJlc3VsdCwge1xuICAgICAgICAgICAgZmV0Y2hlclN1Ym1pc3Npb246IHN1Ym1pc3Npb24sXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gUHJvY2VzcyBhbnkgbm9uLXJlZGlyZWN0IGVycm9ycyB0aHJvd25cbiAgICAgIGlmIChpc0Vycm9yUmVzdWx0KGFjdGlvblJlc3VsdCkpIHtcbiAgICAgICAgc2V0RmV0Y2hlckVycm9yKGtleSwgcm91dGVJZCwgYWN0aW9uUmVzdWx0LmVycm9yKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChpc0RlZmVycmVkUmVzdWx0KGFjdGlvblJlc3VsdCkpIHtcbiAgICAgIHRocm93IGdldEludGVybmFsUm91dGVyRXJyb3IoNDAwLCB7IHR5cGU6IFwiZGVmZXItYWN0aW9uXCIgfSk7XG4gICAgfVxuXG4gICAgLy8gU3RhcnQgdGhlIGRhdGEgbG9hZCBmb3IgY3VycmVudCBtYXRjaGVzLCBvciB0aGUgbmV4dCBsb2NhdGlvbiBpZiB3ZSdyZVxuICAgIC8vIGluIHRoZSBtaWRkbGUgb2YgYSBuYXZpZ2F0aW9uXG4gICAgbGV0IG5leHRMb2NhdGlvbiA9IHN0YXRlLm5hdmlnYXRpb24ubG9jYXRpb24gfHwgc3RhdGUubG9jYXRpb247XG4gICAgbGV0IHJldmFsaWRhdGlvblJlcXVlc3QgPSBjcmVhdGVDbGllbnRTaWRlUmVxdWVzdChcbiAgICAgIGluaXQuaGlzdG9yeSxcbiAgICAgIG5leHRMb2NhdGlvbixcbiAgICAgIGFib3J0Q29udHJvbGxlci5zaWduYWxcbiAgICApO1xuICAgIGxldCByb3V0ZXNUb1VzZSA9IGluRmxpZ2h0RGF0YVJvdXRlcyB8fCBkYXRhUm91dGVzO1xuICAgIGxldCBtYXRjaGVzID1cbiAgICAgIHN0YXRlLm5hdmlnYXRpb24uc3RhdGUgIT09IFwiaWRsZVwiXG4gICAgICAgID8gbWF0Y2hSb3V0ZXMocm91dGVzVG9Vc2UsIHN0YXRlLm5hdmlnYXRpb24ubG9jYXRpb24sIGJhc2VuYW1lKVxuICAgICAgICA6IHN0YXRlLm1hdGNoZXM7XG5cbiAgICBpbnZhcmlhbnQobWF0Y2hlcywgXCJEaWRuJ3QgZmluZCBhbnkgbWF0Y2hlcyBhZnRlciBmZXRjaGVyIGFjdGlvblwiKTtcblxuICAgIGxldCBsb2FkSWQgPSArK2luY3JlbWVudGluZ0xvYWRJZDtcbiAgICBmZXRjaFJlbG9hZElkcy5zZXQoa2V5LCBsb2FkSWQpO1xuXG4gICAgbGV0IGxvYWRGZXRjaGVyID0gZ2V0TG9hZGluZ0ZldGNoZXIoc3VibWlzc2lvbiwgYWN0aW9uUmVzdWx0LmRhdGEpO1xuICAgIHN0YXRlLmZldGNoZXJzLnNldChrZXksIGxvYWRGZXRjaGVyKTtcblxuICAgIGxldCBbbWF0Y2hlc1RvTG9hZCwgcmV2YWxpZGF0aW5nRmV0Y2hlcnNdID0gZ2V0TWF0Y2hlc1RvTG9hZChcbiAgICAgIGluaXQuaGlzdG9yeSxcbiAgICAgIHN0YXRlLFxuICAgICAgbWF0Y2hlcyxcbiAgICAgIHN1Ym1pc3Npb24sXG4gICAgICBuZXh0TG9jYXRpb24sXG4gICAgICBmYWxzZSxcbiAgICAgIGlzUmV2YWxpZGF0aW9uUmVxdWlyZWQsXG4gICAgICBjYW5jZWxsZWREZWZlcnJlZFJvdXRlcyxcbiAgICAgIGNhbmNlbGxlZEZldGNoZXJMb2FkcyxcbiAgICAgIGRlbGV0ZWRGZXRjaGVycyxcbiAgICAgIGZldGNoTG9hZE1hdGNoZXMsXG4gICAgICBmZXRjaFJlZGlyZWN0SWRzLFxuICAgICAgcm91dGVzVG9Vc2UsXG4gICAgICBiYXNlbmFtZSxcbiAgICAgIHsgW21hdGNoLnJvdXRlLmlkXTogYWN0aW9uUmVzdWx0LmRhdGEgfSxcbiAgICAgIHVuZGVmaW5lZCAvLyBObyBuZWVkIHRvIHNlbmQgdGhyb3VnaCBlcnJvcnMgc2luY2Ugd2Ugc2hvcnQgY2lyY3VpdCBhYm92ZVxuICAgICk7XG5cbiAgICAvLyBQdXQgYWxsIHJldmFsaWRhdGluZyBmZXRjaGVycyBpbnRvIHRoZSBsb2FkaW5nIHN0YXRlLCBleGNlcHQgZm9yIHRoZVxuICAgIC8vIGN1cnJlbnQgZmV0Y2hlciB3aGljaCB3ZSB3YW50IHRvIGtlZXAgaW4gaXQncyBjdXJyZW50IGxvYWRpbmcgc3RhdGUgd2hpY2hcbiAgICAvLyBjb250YWlucyBpdCdzIGFjdGlvbiBzdWJtaXNzaW9uIGluZm8gKyBhY3Rpb24gZGF0YVxuICAgIHJldmFsaWRhdGluZ0ZldGNoZXJzXG4gICAgICAuZmlsdGVyKChyZikgPT4gcmYua2V5ICE9PSBrZXkpXG4gICAgICAuZm9yRWFjaCgocmYpID0+IHtcbiAgICAgICAgbGV0IHN0YWxlS2V5ID0gcmYua2V5O1xuICAgICAgICBsZXQgZXhpc3RpbmdGZXRjaGVyID0gc3RhdGUuZmV0Y2hlcnMuZ2V0KHN0YWxlS2V5KTtcbiAgICAgICAgbGV0IHJldmFsaWRhdGluZ0ZldGNoZXIgPSBnZXRMb2FkaW5nRmV0Y2hlcihcbiAgICAgICAgICB1bmRlZmluZWQsXG4gICAgICAgICAgZXhpc3RpbmdGZXRjaGVyID8gZXhpc3RpbmdGZXRjaGVyLmRhdGEgOiB1bmRlZmluZWRcbiAgICAgICAgKTtcbiAgICAgICAgc3RhdGUuZmV0Y2hlcnMuc2V0KHN0YWxlS2V5LCByZXZhbGlkYXRpbmdGZXRjaGVyKTtcbiAgICAgICAgaWYgKGZldGNoQ29udHJvbGxlcnMuaGFzKHN0YWxlS2V5KSkge1xuICAgICAgICAgIGFib3J0RmV0Y2hlcihzdGFsZUtleSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHJmLmNvbnRyb2xsZXIpIHtcbiAgICAgICAgICBmZXRjaENvbnRyb2xsZXJzLnNldChzdGFsZUtleSwgcmYuY29udHJvbGxlcik7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgdXBkYXRlU3RhdGUoeyBmZXRjaGVyczogbmV3IE1hcChzdGF0ZS5mZXRjaGVycykgfSk7XG5cbiAgICBsZXQgYWJvcnRQZW5kaW5nRmV0Y2hSZXZhbGlkYXRpb25zID0gKCkgPT5cbiAgICAgIHJldmFsaWRhdGluZ0ZldGNoZXJzLmZvckVhY2goKHJmKSA9PiBhYm9ydEZldGNoZXIocmYua2V5KSk7XG5cbiAgICBhYm9ydENvbnRyb2xsZXIuc2lnbmFsLmFkZEV2ZW50TGlzdGVuZXIoXG4gICAgICBcImFib3J0XCIsXG4gICAgICBhYm9ydFBlbmRpbmdGZXRjaFJldmFsaWRhdGlvbnNcbiAgICApO1xuXG4gICAgbGV0IHsgcmVzdWx0cywgbG9hZGVyUmVzdWx0cywgZmV0Y2hlclJlc3VsdHMgfSA9XG4gICAgICBhd2FpdCBjYWxsTG9hZGVyc0FuZE1heWJlUmVzb2x2ZURhdGEoXG4gICAgICAgIHN0YXRlLm1hdGNoZXMsXG4gICAgICAgIG1hdGNoZXMsXG4gICAgICAgIG1hdGNoZXNUb0xvYWQsXG4gICAgICAgIHJldmFsaWRhdGluZ0ZldGNoZXJzLFxuICAgICAgICByZXZhbGlkYXRpb25SZXF1ZXN0XG4gICAgICApO1xuXG4gICAgaWYgKGFib3J0Q29udHJvbGxlci5zaWduYWwuYWJvcnRlZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGFib3J0Q29udHJvbGxlci5zaWduYWwucmVtb3ZlRXZlbnRMaXN0ZW5lcihcbiAgICAgIFwiYWJvcnRcIixcbiAgICAgIGFib3J0UGVuZGluZ0ZldGNoUmV2YWxpZGF0aW9uc1xuICAgICk7XG5cbiAgICBmZXRjaFJlbG9hZElkcy5kZWxldGUoa2V5KTtcbiAgICBmZXRjaENvbnRyb2xsZXJzLmRlbGV0ZShrZXkpO1xuICAgIHJldmFsaWRhdGluZ0ZldGNoZXJzLmZvckVhY2goKHIpID0+IGZldGNoQ29udHJvbGxlcnMuZGVsZXRlKHIua2V5KSk7XG5cbiAgICBsZXQgcmVkaXJlY3QgPSBmaW5kUmVkaXJlY3QocmVzdWx0cyk7XG4gICAgaWYgKHJlZGlyZWN0KSB7XG4gICAgICBpZiAocmVkaXJlY3QuaWR4ID49IG1hdGNoZXNUb0xvYWQubGVuZ3RoKSB7XG4gICAgICAgIC8vIElmIHRoaXMgcmVkaXJlY3QgY2FtZSBmcm9tIGEgZmV0Y2hlciBtYWtlIHN1cmUgd2UgbWFyayBpdCBpblxuICAgICAgICAvLyBmZXRjaFJlZGlyZWN0SWRzIHNvIGl0IGRvZXNuJ3QgZ2V0IHJldmFsaWRhdGVkIG9uIHRoZSBuZXh0IHNldCBvZlxuICAgICAgICAvLyBsb2FkZXIgZXhlY3V0aW9uc1xuICAgICAgICBsZXQgZmV0Y2hlcktleSA9XG4gICAgICAgICAgcmV2YWxpZGF0aW5nRmV0Y2hlcnNbcmVkaXJlY3QuaWR4IC0gbWF0Y2hlc1RvTG9hZC5sZW5ndGhdLmtleTtcbiAgICAgICAgZmV0Y2hSZWRpcmVjdElkcy5hZGQoZmV0Y2hlcktleSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gc3RhcnRSZWRpcmVjdE5hdmlnYXRpb24oc3RhdGUsIHJlZGlyZWN0LnJlc3VsdCk7XG4gICAgfVxuXG4gICAgLy8gUHJvY2VzcyBhbmQgY29tbWl0IG91dHB1dCBmcm9tIGxvYWRlcnNcbiAgICBsZXQgeyBsb2FkZXJEYXRhLCBlcnJvcnMgfSA9IHByb2Nlc3NMb2FkZXJEYXRhKFxuICAgICAgc3RhdGUsXG4gICAgICBzdGF0ZS5tYXRjaGVzLFxuICAgICAgbWF0Y2hlc1RvTG9hZCxcbiAgICAgIGxvYWRlclJlc3VsdHMsXG4gICAgICB1bmRlZmluZWQsXG4gICAgICByZXZhbGlkYXRpbmdGZXRjaGVycyxcbiAgICAgIGZldGNoZXJSZXN1bHRzLFxuICAgICAgYWN0aXZlRGVmZXJyZWRzXG4gICAgKTtcblxuICAgIC8vIFNpbmNlIHdlIGxldCByZXZhbGlkYXRpb25zIGNvbXBsZXRlIGV2ZW4gaWYgdGhlIHN1Ym1pdHRpbmcgZmV0Y2hlciB3YXNcbiAgICAvLyBkZWxldGVkLCBvbmx5IHB1dCBpdCBiYWNrIHRvIGlkbGUgaWYgaXQgaGFzbid0IGJlZW4gZGVsZXRlZFxuICAgIGlmIChzdGF0ZS5mZXRjaGVycy5oYXMoa2V5KSkge1xuICAgICAgbGV0IGRvbmVGZXRjaGVyID0gZ2V0RG9uZUZldGNoZXIoYWN0aW9uUmVzdWx0LmRhdGEpO1xuICAgICAgc3RhdGUuZmV0Y2hlcnMuc2V0KGtleSwgZG9uZUZldGNoZXIpO1xuICAgIH1cblxuICAgIGFib3J0U3RhbGVGZXRjaExvYWRzKGxvYWRJZCk7XG5cbiAgICAvLyBJZiB3ZSBhcmUgY3VycmVudGx5IGluIGEgbmF2aWdhdGlvbiBsb2FkaW5nIHN0YXRlIGFuZCB0aGlzIGZldGNoZXIgaXNcbiAgICAvLyBtb3JlIHJlY2VudCB0aGFuIHRoZSBuYXZpZ2F0aW9uLCB3ZSB3YW50IHRoZSBuZXdlciBkYXRhIHNvIGFib3J0IHRoZVxuICAgIC8vIG5hdmlnYXRpb24gYW5kIGNvbXBsZXRlIGl0IHdpdGggdGhlIGZldGNoZXIgZGF0YVxuICAgIGlmIChcbiAgICAgIHN0YXRlLm5hdmlnYXRpb24uc3RhdGUgPT09IFwibG9hZGluZ1wiICYmXG4gICAgICBsb2FkSWQgPiBwZW5kaW5nTmF2aWdhdGlvbkxvYWRJZFxuICAgICkge1xuICAgICAgaW52YXJpYW50KHBlbmRpbmdBY3Rpb24sIFwiRXhwZWN0ZWQgcGVuZGluZyBhY3Rpb25cIik7XG4gICAgICBwZW5kaW5nTmF2aWdhdGlvbkNvbnRyb2xsZXIgJiYgcGVuZGluZ05hdmlnYXRpb25Db250cm9sbGVyLmFib3J0KCk7XG5cbiAgICAgIGNvbXBsZXRlTmF2aWdhdGlvbihzdGF0ZS5uYXZpZ2F0aW9uLmxvY2F0aW9uLCB7XG4gICAgICAgIG1hdGNoZXMsXG4gICAgICAgIGxvYWRlckRhdGEsXG4gICAgICAgIGVycm9ycyxcbiAgICAgICAgZmV0Y2hlcnM6IG5ldyBNYXAoc3RhdGUuZmV0Y2hlcnMpLFxuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIG90aGVyd2lzZSBqdXN0IHVwZGF0ZSB3aXRoIHRoZSBmZXRjaGVyIGRhdGEsIHByZXNlcnZpbmcgYW55IGV4aXN0aW5nXG4gICAgICAvLyBsb2FkZXJEYXRhIGZvciBsb2FkZXJzIHRoYXQgZGlkIG5vdCBuZWVkIHRvIHJlbG9hZC4gIFdlIGhhdmUgdG9cbiAgICAgIC8vIG1hbnVhbGx5IG1lcmdlIGhlcmUgc2luY2Ugd2UgYXJlbid0IGdvaW5nIHRocm91Z2ggY29tcGxldGVOYXZpZ2F0aW9uXG4gICAgICB1cGRhdGVTdGF0ZSh7XG4gICAgICAgIGVycm9ycyxcbiAgICAgICAgbG9hZGVyRGF0YTogbWVyZ2VMb2FkZXJEYXRhKFxuICAgICAgICAgIHN0YXRlLmxvYWRlckRhdGEsXG4gICAgICAgICAgbG9hZGVyRGF0YSxcbiAgICAgICAgICBtYXRjaGVzLFxuICAgICAgICAgIGVycm9yc1xuICAgICAgICApLFxuICAgICAgICBmZXRjaGVyczogbmV3IE1hcChzdGF0ZS5mZXRjaGVycyksXG4gICAgICB9KTtcbiAgICAgIGlzUmV2YWxpZGF0aW9uUmVxdWlyZWQgPSBmYWxzZTtcbiAgICB9XG4gIH1cblxuICAvLyBDYWxsIHRoZSBtYXRjaGVkIGxvYWRlciBmb3IgZmV0Y2hlci5sb2FkKCksIGhhbmRsaW5nIHJlZGlyZWN0cywgZXJyb3JzLCBldGMuXG4gIGFzeW5jIGZ1bmN0aW9uIGhhbmRsZUZldGNoZXJMb2FkZXIoXG4gICAga2V5OiBzdHJpbmcsXG4gICAgcm91dGVJZDogc3RyaW5nLFxuICAgIHBhdGg6IHN0cmluZyxcbiAgICBtYXRjaDogQWdub3N0aWNEYXRhUm91dGVNYXRjaCxcbiAgICBtYXRjaGVzOiBBZ25vc3RpY0RhdGFSb3V0ZU1hdGNoW10sXG4gICAgZmx1c2hTeW5jOiBib29sZWFuLFxuICAgIHN1Ym1pc3Npb24/OiBTdWJtaXNzaW9uXG4gICkge1xuICAgIGxldCBleGlzdGluZ0ZldGNoZXIgPSBzdGF0ZS5mZXRjaGVycy5nZXQoa2V5KTtcbiAgICB1cGRhdGVGZXRjaGVyU3RhdGUoXG4gICAgICBrZXksXG4gICAgICBnZXRMb2FkaW5nRmV0Y2hlcihcbiAgICAgICAgc3VibWlzc2lvbixcbiAgICAgICAgZXhpc3RpbmdGZXRjaGVyID8gZXhpc3RpbmdGZXRjaGVyLmRhdGEgOiB1bmRlZmluZWRcbiAgICAgICksXG4gICAgICB7IGZsdXNoU3luYyB9XG4gICAgKTtcblxuICAgIC8vIENhbGwgdGhlIGxvYWRlciBmb3IgdGhpcyBmZXRjaGVyIHJvdXRlIG1hdGNoXG4gICAgbGV0IGFib3J0Q29udHJvbGxlciA9IG5ldyBBYm9ydENvbnRyb2xsZXIoKTtcbiAgICBsZXQgZmV0Y2hSZXF1ZXN0ID0gY3JlYXRlQ2xpZW50U2lkZVJlcXVlc3QoXG4gICAgICBpbml0Lmhpc3RvcnksXG4gICAgICBwYXRoLFxuICAgICAgYWJvcnRDb250cm9sbGVyLnNpZ25hbFxuICAgICk7XG4gICAgZmV0Y2hDb250cm9sbGVycy5zZXQoa2V5LCBhYm9ydENvbnRyb2xsZXIpO1xuXG4gICAgbGV0IG9yaWdpbmF0aW5nTG9hZElkID0gaW5jcmVtZW50aW5nTG9hZElkO1xuICAgIGxldCByZXN1bHQ6IERhdGFSZXN1bHQgPSBhd2FpdCBjYWxsTG9hZGVyT3JBY3Rpb24oXG4gICAgICBcImxvYWRlclwiLFxuICAgICAgZmV0Y2hSZXF1ZXN0LFxuICAgICAgbWF0Y2gsXG4gICAgICBtYXRjaGVzLFxuICAgICAgbWFuaWZlc3QsXG4gICAgICBtYXBSb3V0ZVByb3BlcnRpZXMsXG4gICAgICBiYXNlbmFtZSxcbiAgICAgIGZ1dHVyZS52N19yZWxhdGl2ZVNwbGF0UGF0aFxuICAgICk7XG5cbiAgICAvLyBEZWZlcnJlZCBpc24ndCBzdXBwb3J0ZWQgZm9yIGZldGNoZXIgbG9hZHMsIGF3YWl0IGV2ZXJ5dGhpbmcgYW5kIHRyZWF0IGl0XG4gICAgLy8gYXMgYSBub3JtYWwgbG9hZC4gIHJlc29sdmVEZWZlcnJlZERhdGEgd2lsbCByZXR1cm4gdW5kZWZpbmVkIGlmIHRoaXNcbiAgICAvLyBmZXRjaGVyIGdldHMgYWJvcnRlZCwgc28gd2UganVzdCBsZWF2ZSByZXN1bHQgdW50b3VjaGVkIGFuZCBzaG9ydCBjaXJjdWl0XG4gICAgLy8gYmVsb3cgaWYgdGhhdCBoYXBwZW5zXG4gICAgaWYgKGlzRGVmZXJyZWRSZXN1bHQocmVzdWx0KSkge1xuICAgICAgcmVzdWx0ID1cbiAgICAgICAgKGF3YWl0IHJlc29sdmVEZWZlcnJlZERhdGEocmVzdWx0LCBmZXRjaFJlcXVlc3Quc2lnbmFsLCB0cnVlKSkgfHxcbiAgICAgICAgcmVzdWx0O1xuICAgIH1cblxuICAgIC8vIFdlIGNhbiBkZWxldGUgdGhpcyBzbyBsb25nIGFzIHdlIHdlcmVuJ3QgYWJvcnRlZCBieSBvdXIgb3VyIG93biBmZXRjaGVyXG4gICAgLy8gcmUtbG9hZCB3aGljaCB3b3VsZCBoYXZlIHB1dCBfbmV3XyBjb250cm9sbGVyIGlzIGluIGZldGNoQ29udHJvbGxlcnNcbiAgICBpZiAoZmV0Y2hDb250cm9sbGVycy5nZXQoa2V5KSA9PT0gYWJvcnRDb250cm9sbGVyKSB7XG4gICAgICBmZXRjaENvbnRyb2xsZXJzLmRlbGV0ZShrZXkpO1xuICAgIH1cblxuICAgIGlmIChmZXRjaFJlcXVlc3Quc2lnbmFsLmFib3J0ZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBXZSBkb24ndCB3YW50IGVycm9ycyBidWJibGluZyB1cCBvciByZWRpcmVjdHMgZm9sbG93ZWQgZm9yIHVubW91bnRlZFxuICAgIC8vIGZldGNoZXJzLCBzbyBzaG9ydCBjaXJjdWl0IGhlcmUgaWYgaXQgd2FzIHJlbW92ZWQgZnJvbSB0aGUgVUlcbiAgICBpZiAoZGVsZXRlZEZldGNoZXJzLmhhcyhrZXkpKSB7XG4gICAgICB1cGRhdGVGZXRjaGVyU3RhdGUoa2V5LCBnZXREb25lRmV0Y2hlcih1bmRlZmluZWQpKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBJZiB0aGUgbG9hZGVyIHRocmV3IGEgcmVkaXJlY3QgUmVzcG9uc2UsIHN0YXJ0IGEgbmV3IFJFUExBQ0UgbmF2aWdhdGlvblxuICAgIGlmIChpc1JlZGlyZWN0UmVzdWx0KHJlc3VsdCkpIHtcbiAgICAgIGlmIChwZW5kaW5nTmF2aWdhdGlvbkxvYWRJZCA+IG9yaWdpbmF0aW5nTG9hZElkKSB7XG4gICAgICAgIC8vIEEgbmV3IG5hdmlnYXRpb24gd2FzIGtpY2tlZCBvZmYgYWZ0ZXIgb3VyIGxvYWRlciBzdGFydGVkLCBzbyB0aGF0XG4gICAgICAgIC8vIHNob3VsZCB0YWtlIHByZWNlZGVuY2Ugb3ZlciB0aGlzIHJlZGlyZWN0IG5hdmlnYXRpb25cbiAgICAgICAgdXBkYXRlRmV0Y2hlclN0YXRlKGtleSwgZ2V0RG9uZUZldGNoZXIodW5kZWZpbmVkKSk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGZldGNoUmVkaXJlY3RJZHMuYWRkKGtleSk7XG4gICAgICAgIGF3YWl0IHN0YXJ0UmVkaXJlY3ROYXZpZ2F0aW9uKHN0YXRlLCByZXN1bHQpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gUHJvY2VzcyBhbnkgbm9uLXJlZGlyZWN0IGVycm9ycyB0aHJvd25cbiAgICBpZiAoaXNFcnJvclJlc3VsdChyZXN1bHQpKSB7XG4gICAgICBzZXRGZXRjaGVyRXJyb3Ioa2V5LCByb3V0ZUlkLCByZXN1bHQuZXJyb3IpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGludmFyaWFudCghaXNEZWZlcnJlZFJlc3VsdChyZXN1bHQpLCBcIlVuaGFuZGxlZCBmZXRjaGVyIGRlZmVycmVkIGRhdGFcIik7XG5cbiAgICAvLyBQdXQgdGhlIGZldGNoZXIgYmFjayBpbnRvIGFuIGlkbGUgc3RhdGVcbiAgICB1cGRhdGVGZXRjaGVyU3RhdGUoa2V5LCBnZXREb25lRmV0Y2hlcihyZXN1bHQuZGF0YSkpO1xuICB9XG5cbiAgLyoqXG4gICAqIFV0aWxpdHkgZnVuY3Rpb24gdG8gaGFuZGxlIHJlZGlyZWN0cyByZXR1cm5lZCBmcm9tIGFuIGFjdGlvbiBvciBsb2FkZXIuXG4gICAqIE5vcm1hbGx5LCBhIHJlZGlyZWN0IFwicmVwbGFjZXNcIiB0aGUgbmF2aWdhdGlvbiB0aGF0IHRyaWdnZXJlZCBpdC4gIFNvLCBmb3JcbiAgICogZXhhbXBsZTpcbiAgICpcbiAgICogIC0gdXNlciBpcyBvbiAvYVxuICAgKiAgLSB1c2VyIGNsaWNrcyBhIGxpbmsgdG8gL2JcbiAgICogIC0gbG9hZGVyIGZvciAvYiByZWRpcmVjdHMgdG8gL2NcbiAgICpcbiAgICogSW4gYSBub24tSlMgYXBwIHRoZSBicm93c2VyIHdvdWxkIHRyYWNrIHRoZSBpbi1mbGlnaHQgbmF2aWdhdGlvbiB0byAvYiBhbmRcbiAgICogdGhlbiByZXBsYWNlIGl0IHdpdGggL2Mgd2hlbiBpdCBlbmNvdW50ZXJlZCB0aGUgcmVkaXJlY3QgcmVzcG9uc2UuICBJblxuICAgKiB0aGUgZW5kIGl0IHdvdWxkIG9ubHkgZXZlciB1cGRhdGUgdGhlIFVSTCBiYXIgd2l0aCAvYy5cbiAgICpcbiAgICogSW4gY2xpZW50LXNpZGUgcm91dGluZyB1c2luZyBwdXNoU3RhdGUvcmVwbGFjZVN0YXRlLCB3ZSBhaW0gdG8gZW11bGF0ZVxuICAgKiB0aGlzIGJlaGF2aW9yIGFuZCB3ZSBhbHNvIGRvIG5vdCB1cGRhdGUgaGlzdG9yeSB1bnRpbCB0aGUgZW5kIG9mIHRoZVxuICAgKiBuYXZpZ2F0aW9uIChpbmNsdWRpbmcgcHJvY2Vzc2VkIHJlZGlyZWN0cykuICBUaGlzIG1lYW5zIHRoYXQgd2UgbmV2ZXJcbiAgICogYWN0dWFsbHkgdG91Y2ggaGlzdG9yeSB1bnRpbCB3ZSd2ZSBwcm9jZXNzZWQgcmVkaXJlY3RzLCBzbyB3ZSBqdXN0IHVzZVxuICAgKiB0aGUgaGlzdG9yeSBhY3Rpb24gZnJvbSB0aGUgb3JpZ2luYWwgbmF2aWdhdGlvbiAoUFVTSCBvciBSRVBMQUNFKS5cbiAgICovXG4gIGFzeW5jIGZ1bmN0aW9uIHN0YXJ0UmVkaXJlY3ROYXZpZ2F0aW9uKFxuICAgIHN0YXRlOiBSb3V0ZXJTdGF0ZSxcbiAgICByZWRpcmVjdDogUmVkaXJlY3RSZXN1bHQsXG4gICAge1xuICAgICAgc3VibWlzc2lvbixcbiAgICAgIGZldGNoZXJTdWJtaXNzaW9uLFxuICAgICAgcmVwbGFjZSxcbiAgICB9OiB7XG4gICAgICBzdWJtaXNzaW9uPzogU3VibWlzc2lvbjtcbiAgICAgIGZldGNoZXJTdWJtaXNzaW9uPzogU3VibWlzc2lvbjtcbiAgICAgIHJlcGxhY2U/OiBib29sZWFuO1xuICAgIH0gPSB7fVxuICApIHtcbiAgICBpZiAocmVkaXJlY3QucmV2YWxpZGF0ZSkge1xuICAgICAgaXNSZXZhbGlkYXRpb25SZXF1aXJlZCA9IHRydWU7XG4gICAgfVxuXG4gICAgbGV0IHJlZGlyZWN0TG9jYXRpb24gPSBjcmVhdGVMb2NhdGlvbihzdGF0ZS5sb2NhdGlvbiwgcmVkaXJlY3QubG9jYXRpb24sIHtcbiAgICAgIF9pc1JlZGlyZWN0OiB0cnVlLFxuICAgIH0pO1xuICAgIGludmFyaWFudChcbiAgICAgIHJlZGlyZWN0TG9jYXRpb24sXG4gICAgICBcIkV4cGVjdGVkIGEgbG9jYXRpb24gb24gdGhlIHJlZGlyZWN0IG5hdmlnYXRpb25cIlxuICAgICk7XG5cbiAgICBpZiAoaXNCcm93c2VyKSB7XG4gICAgICBsZXQgaXNEb2N1bWVudFJlbG9hZCA9IGZhbHNlO1xuXG4gICAgICBpZiAocmVkaXJlY3QucmVsb2FkRG9jdW1lbnQpIHtcbiAgICAgICAgLy8gSGFyZCByZWxvYWQgaWYgdGhlIHJlc3BvbnNlIGNvbnRhaW5lZCBYLVJlbWl4LVJlbG9hZC1Eb2N1bWVudFxuICAgICAgICBpc0RvY3VtZW50UmVsb2FkID0gdHJ1ZTtcbiAgICAgIH0gZWxzZSBpZiAoQUJTT0xVVEVfVVJMX1JFR0VYLnRlc3QocmVkaXJlY3QubG9jYXRpb24pKSB7XG4gICAgICAgIGNvbnN0IHVybCA9IGluaXQuaGlzdG9yeS5jcmVhdGVVUkwocmVkaXJlY3QubG9jYXRpb24pO1xuICAgICAgICBpc0RvY3VtZW50UmVsb2FkID1cbiAgICAgICAgICAvLyBIYXJkIHJlbG9hZCBpZiBpdCdzIGFuIGFic29sdXRlIFVSTCB0byBhIG5ldyBvcmlnaW5cbiAgICAgICAgICB1cmwub3JpZ2luICE9PSByb3V0ZXJXaW5kb3cubG9jYXRpb24ub3JpZ2luIHx8XG4gICAgICAgICAgLy8gSGFyZCByZWxvYWQgaWYgaXQncyBhbiBhYnNvbHV0ZSBVUkwgdGhhdCBkb2VzIG5vdCBtYXRjaCBvdXIgYmFzZW5hbWVcbiAgICAgICAgICBzdHJpcEJhc2VuYW1lKHVybC5wYXRobmFtZSwgYmFzZW5hbWUpID09IG51bGw7XG4gICAgICB9XG5cbiAgICAgIGlmIChpc0RvY3VtZW50UmVsb2FkKSB7XG4gICAgICAgIGlmIChyZXBsYWNlKSB7XG4gICAgICAgICAgcm91dGVyV2luZG93LmxvY2F0aW9uLnJlcGxhY2UocmVkaXJlY3QubG9jYXRpb24pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJvdXRlcldpbmRvdy5sb2NhdGlvbi5hc3NpZ24ocmVkaXJlY3QubG9jYXRpb24pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBUaGVyZSdzIG5vIG5lZWQgdG8gYWJvcnQgb24gcmVkaXJlY3RzLCBzaW5jZSB3ZSBkb24ndCBkZXRlY3QgdGhlXG4gICAgLy8gcmVkaXJlY3QgdW50aWwgdGhlIGFjdGlvbi9sb2FkZXJzIGhhdmUgc2V0dGxlZFxuICAgIHBlbmRpbmdOYXZpZ2F0aW9uQ29udHJvbGxlciA9IG51bGw7XG5cbiAgICBsZXQgcmVkaXJlY3RIaXN0b3J5QWN0aW9uID1cbiAgICAgIHJlcGxhY2UgPT09IHRydWUgPyBIaXN0b3J5QWN0aW9uLlJlcGxhY2UgOiBIaXN0b3J5QWN0aW9uLlB1c2g7XG5cbiAgICAvLyBVc2UgdGhlIGluY29taW5nIHN1Ym1pc3Npb24gaWYgcHJvdmlkZWQsIGZhbGxiYWNrIG9uIHRoZSBhY3RpdmUgb25lIGluXG4gICAgLy8gc3RhdGUubmF2aWdhdGlvblxuICAgIGxldCB7IGZvcm1NZXRob2QsIGZvcm1BY3Rpb24sIGZvcm1FbmNUeXBlIH0gPSBzdGF0ZS5uYXZpZ2F0aW9uO1xuICAgIGlmIChcbiAgICAgICFzdWJtaXNzaW9uICYmXG4gICAgICAhZmV0Y2hlclN1Ym1pc3Npb24gJiZcbiAgICAgIGZvcm1NZXRob2QgJiZcbiAgICAgIGZvcm1BY3Rpb24gJiZcbiAgICAgIGZvcm1FbmNUeXBlXG4gICAgKSB7XG4gICAgICBzdWJtaXNzaW9uID0gZ2V0U3VibWlzc2lvbkZyb21OYXZpZ2F0aW9uKHN0YXRlLm5hdmlnYXRpb24pO1xuICAgIH1cblxuICAgIC8vIElmIHRoaXMgd2FzIGEgMzA3LzMwOCBzdWJtaXNzaW9uIHdlIHdhbnQgdG8gcHJlc2VydmUgdGhlIEhUVFAgbWV0aG9kIGFuZFxuICAgIC8vIHJlLXN1Ym1pdCB0aGUgR0VUL1BPU1QvUFVUL1BBVENIL0RFTEVURSBhcyBhIHN1Ym1pc3Npb24gbmF2aWdhdGlvbiB0byB0aGVcbiAgICAvLyByZWRpcmVjdGVkIGxvY2F0aW9uXG4gICAgbGV0IGFjdGl2ZVN1Ym1pc3Npb24gPSBzdWJtaXNzaW9uIHx8IGZldGNoZXJTdWJtaXNzaW9uO1xuICAgIGlmIChcbiAgICAgIHJlZGlyZWN0UHJlc2VydmVNZXRob2RTdGF0dXNDb2Rlcy5oYXMocmVkaXJlY3Quc3RhdHVzKSAmJlxuICAgICAgYWN0aXZlU3VibWlzc2lvbiAmJlxuICAgICAgaXNNdXRhdGlvbk1ldGhvZChhY3RpdmVTdWJtaXNzaW9uLmZvcm1NZXRob2QpXG4gICAgKSB7XG4gICAgICBhd2FpdCBzdGFydE5hdmlnYXRpb24ocmVkaXJlY3RIaXN0b3J5QWN0aW9uLCByZWRpcmVjdExvY2F0aW9uLCB7XG4gICAgICAgIHN1Ym1pc3Npb246IHtcbiAgICAgICAgICAuLi5hY3RpdmVTdWJtaXNzaW9uLFxuICAgICAgICAgIGZvcm1BY3Rpb246IHJlZGlyZWN0LmxvY2F0aW9uLFxuICAgICAgICB9LFxuICAgICAgICAvLyBQcmVzZXJ2ZSB0aGlzIGZsYWcgYWNyb3NzIHJlZGlyZWN0c1xuICAgICAgICBwcmV2ZW50U2Nyb2xsUmVzZXQ6IHBlbmRpbmdQcmV2ZW50U2Nyb2xsUmVzZXQsXG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gSWYgd2UgaGF2ZSBhIG5hdmlnYXRpb24gc3VibWlzc2lvbiwgd2Ugd2lsbCBwcmVzZXJ2ZSBpdCB0aHJvdWdoIHRoZVxuICAgICAgLy8gcmVkaXJlY3QgbmF2aWdhdGlvblxuICAgICAgbGV0IG92ZXJyaWRlTmF2aWdhdGlvbiA9IGdldExvYWRpbmdOYXZpZ2F0aW9uKFxuICAgICAgICByZWRpcmVjdExvY2F0aW9uLFxuICAgICAgICBzdWJtaXNzaW9uXG4gICAgICApO1xuICAgICAgYXdhaXQgc3RhcnROYXZpZ2F0aW9uKHJlZGlyZWN0SGlzdG9yeUFjdGlvbiwgcmVkaXJlY3RMb2NhdGlvbiwge1xuICAgICAgICBvdmVycmlkZU5hdmlnYXRpb24sXG4gICAgICAgIC8vIFNlbmQgZmV0Y2hlciBzdWJtaXNzaW9ucyB0aHJvdWdoIGZvciBzaG91bGRSZXZhbGlkYXRlXG4gICAgICAgIGZldGNoZXJTdWJtaXNzaW9uLFxuICAgICAgICAvLyBQcmVzZXJ2ZSB0aGlzIGZsYWcgYWNyb3NzIHJlZGlyZWN0c1xuICAgICAgICBwcmV2ZW50U2Nyb2xsUmVzZXQ6IHBlbmRpbmdQcmV2ZW50U2Nyb2xsUmVzZXQsXG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICBhc3luYyBmdW5jdGlvbiBjYWxsTG9hZGVyc0FuZE1heWJlUmVzb2x2ZURhdGEoXG4gICAgY3VycmVudE1hdGNoZXM6IEFnbm9zdGljRGF0YVJvdXRlTWF0Y2hbXSxcbiAgICBtYXRjaGVzOiBBZ25vc3RpY0RhdGFSb3V0ZU1hdGNoW10sXG4gICAgbWF0Y2hlc1RvTG9hZDogQWdub3N0aWNEYXRhUm91dGVNYXRjaFtdLFxuICAgIGZldGNoZXJzVG9Mb2FkOiBSZXZhbGlkYXRpbmdGZXRjaGVyW10sXG4gICAgcmVxdWVzdDogUmVxdWVzdFxuICApIHtcbiAgICAvLyBDYWxsIGFsbCBuYXZpZ2F0aW9uIGxvYWRlcnMgYW5kIHJldmFsaWRhdGluZyBmZXRjaGVyIGxvYWRlcnMgaW4gcGFyYWxsZWwsXG4gICAgLy8gdGhlbiBzbGljZSBvZmYgdGhlIHJlc3VsdHMgaW50byBzZXBhcmF0ZSBhcnJheXMgc28gd2UgY2FuIGhhbmRsZSB0aGVtXG4gICAgLy8gYWNjb3JkaW5nbHlcbiAgICBsZXQgcmVzdWx0cyA9IGF3YWl0IFByb21pc2UuYWxsKFtcbiAgICAgIC4uLm1hdGNoZXNUb0xvYWQubWFwKChtYXRjaCkgPT5cbiAgICAgICAgY2FsbExvYWRlck9yQWN0aW9uKFxuICAgICAgICAgIFwibG9hZGVyXCIsXG4gICAgICAgICAgcmVxdWVzdCxcbiAgICAgICAgICBtYXRjaCxcbiAgICAgICAgICBtYXRjaGVzLFxuICAgICAgICAgIG1hbmlmZXN0LFxuICAgICAgICAgIG1hcFJvdXRlUHJvcGVydGllcyxcbiAgICAgICAgICBiYXNlbmFtZSxcbiAgICAgICAgICBmdXR1cmUudjdfcmVsYXRpdmVTcGxhdFBhdGhcbiAgICAgICAgKVxuICAgICAgKSxcbiAgICAgIC4uLmZldGNoZXJzVG9Mb2FkLm1hcCgoZikgPT4ge1xuICAgICAgICBpZiAoZi5tYXRjaGVzICYmIGYubWF0Y2ggJiYgZi5jb250cm9sbGVyKSB7XG4gICAgICAgICAgcmV0dXJuIGNhbGxMb2FkZXJPckFjdGlvbihcbiAgICAgICAgICAgIFwibG9hZGVyXCIsXG4gICAgICAgICAgICBjcmVhdGVDbGllbnRTaWRlUmVxdWVzdChpbml0Lmhpc3RvcnksIGYucGF0aCwgZi5jb250cm9sbGVyLnNpZ25hbCksXG4gICAgICAgICAgICBmLm1hdGNoLFxuICAgICAgICAgICAgZi5tYXRjaGVzLFxuICAgICAgICAgICAgbWFuaWZlc3QsXG4gICAgICAgICAgICBtYXBSb3V0ZVByb3BlcnRpZXMsXG4gICAgICAgICAgICBiYXNlbmFtZSxcbiAgICAgICAgICAgIGZ1dHVyZS52N19yZWxhdGl2ZVNwbGF0UGF0aFxuICAgICAgICAgICk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbGV0IGVycm9yOiBFcnJvclJlc3VsdCA9IHtcbiAgICAgICAgICAgIHR5cGU6IFJlc3VsdFR5cGUuZXJyb3IsXG4gICAgICAgICAgICBlcnJvcjogZ2V0SW50ZXJuYWxSb3V0ZXJFcnJvcig0MDQsIHsgcGF0aG5hbWU6IGYucGF0aCB9KSxcbiAgICAgICAgICB9O1xuICAgICAgICAgIHJldHVybiBlcnJvcjtcbiAgICAgICAgfVxuICAgICAgfSksXG4gICAgXSk7XG4gICAgbGV0IGxvYWRlclJlc3VsdHMgPSByZXN1bHRzLnNsaWNlKDAsIG1hdGNoZXNUb0xvYWQubGVuZ3RoKTtcbiAgICBsZXQgZmV0Y2hlclJlc3VsdHMgPSByZXN1bHRzLnNsaWNlKG1hdGNoZXNUb0xvYWQubGVuZ3RoKTtcblxuICAgIGF3YWl0IFByb21pc2UuYWxsKFtcbiAgICAgIHJlc29sdmVEZWZlcnJlZFJlc3VsdHMoXG4gICAgICAgIGN1cnJlbnRNYXRjaGVzLFxuICAgICAgICBtYXRjaGVzVG9Mb2FkLFxuICAgICAgICBsb2FkZXJSZXN1bHRzLFxuICAgICAgICBsb2FkZXJSZXN1bHRzLm1hcCgoKSA9PiByZXF1ZXN0LnNpZ25hbCksXG4gICAgICAgIGZhbHNlLFxuICAgICAgICBzdGF0ZS5sb2FkZXJEYXRhXG4gICAgICApLFxuICAgICAgcmVzb2x2ZURlZmVycmVkUmVzdWx0cyhcbiAgICAgICAgY3VycmVudE1hdGNoZXMsXG4gICAgICAgIGZldGNoZXJzVG9Mb2FkLm1hcCgoZikgPT4gZi5tYXRjaCksXG4gICAgICAgIGZldGNoZXJSZXN1bHRzLFxuICAgICAgICBmZXRjaGVyc1RvTG9hZC5tYXAoKGYpID0+IChmLmNvbnRyb2xsZXIgPyBmLmNvbnRyb2xsZXIuc2lnbmFsIDogbnVsbCkpLFxuICAgICAgICB0cnVlXG4gICAgICApLFxuICAgIF0pO1xuXG4gICAgcmV0dXJuIHsgcmVzdWx0cywgbG9hZGVyUmVzdWx0cywgZmV0Y2hlclJlc3VsdHMgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGludGVycnVwdEFjdGl2ZUxvYWRzKCkge1xuICAgIC8vIEV2ZXJ5IGludGVycnVwdGlvbiB0cmlnZ2VycyBhIHJldmFsaWRhdGlvblxuICAgIGlzUmV2YWxpZGF0aW9uUmVxdWlyZWQgPSB0cnVlO1xuXG4gICAgLy8gQ2FuY2VsIHBlbmRpbmcgcm91dGUtbGV2ZWwgZGVmZXJyZWRzIGFuZCBtYXJrIGNhbmNlbGxlZCByb3V0ZXMgZm9yXG4gICAgLy8gcmV2YWxpZGF0aW9uXG4gICAgY2FuY2VsbGVkRGVmZXJyZWRSb3V0ZXMucHVzaCguLi5jYW5jZWxBY3RpdmVEZWZlcnJlZHMoKSk7XG5cbiAgICAvLyBBYm9ydCBpbi1mbGlnaHQgZmV0Y2hlciBsb2Fkc1xuICAgIGZldGNoTG9hZE1hdGNoZXMuZm9yRWFjaCgoXywga2V5KSA9PiB7XG4gICAgICBpZiAoZmV0Y2hDb250cm9sbGVycy5oYXMoa2V5KSkge1xuICAgICAgICBjYW5jZWxsZWRGZXRjaGVyTG9hZHMucHVzaChrZXkpO1xuICAgICAgICBhYm9ydEZldGNoZXIoa2V5KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHVwZGF0ZUZldGNoZXJTdGF0ZShcbiAgICBrZXk6IHN0cmluZyxcbiAgICBmZXRjaGVyOiBGZXRjaGVyLFxuICAgIG9wdHM6IHsgZmx1c2hTeW5jPzogYm9vbGVhbiB9ID0ge31cbiAgKSB7XG4gICAgc3RhdGUuZmV0Y2hlcnMuc2V0KGtleSwgZmV0Y2hlcik7XG4gICAgdXBkYXRlU3RhdGUoXG4gICAgICB7IGZldGNoZXJzOiBuZXcgTWFwKHN0YXRlLmZldGNoZXJzKSB9LFxuICAgICAgeyBmbHVzaFN5bmM6IChvcHRzICYmIG9wdHMuZmx1c2hTeW5jKSA9PT0gdHJ1ZSB9XG4gICAgKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHNldEZldGNoZXJFcnJvcihcbiAgICBrZXk6IHN0cmluZyxcbiAgICByb3V0ZUlkOiBzdHJpbmcsXG4gICAgZXJyb3I6IGFueSxcbiAgICBvcHRzOiB7IGZsdXNoU3luYz86IGJvb2xlYW4gfSA9IHt9XG4gICkge1xuICAgIGxldCBib3VuZGFyeU1hdGNoID0gZmluZE5lYXJlc3RCb3VuZGFyeShzdGF0ZS5tYXRjaGVzLCByb3V0ZUlkKTtcbiAgICBkZWxldGVGZXRjaGVyKGtleSk7XG4gICAgdXBkYXRlU3RhdGUoXG4gICAgICB7XG4gICAgICAgIGVycm9yczoge1xuICAgICAgICAgIFtib3VuZGFyeU1hdGNoLnJvdXRlLmlkXTogZXJyb3IsXG4gICAgICAgIH0sXG4gICAgICAgIGZldGNoZXJzOiBuZXcgTWFwKHN0YXRlLmZldGNoZXJzKSxcbiAgICAgIH0sXG4gICAgICB7IGZsdXNoU3luYzogKG9wdHMgJiYgb3B0cy5mbHVzaFN5bmMpID09PSB0cnVlIH1cbiAgICApO1xuICB9XG5cbiAgZnVuY3Rpb24gZ2V0RmV0Y2hlcjxURGF0YSA9IGFueT4oa2V5OiBzdHJpbmcpOiBGZXRjaGVyPFREYXRhPiB7XG4gICAgaWYgKGZ1dHVyZS52N19mZXRjaGVyUGVyc2lzdCkge1xuICAgICAgYWN0aXZlRmV0Y2hlcnMuc2V0KGtleSwgKGFjdGl2ZUZldGNoZXJzLmdldChrZXkpIHx8IDApICsgMSk7XG4gICAgICAvLyBJZiB0aGlzIGZldGNoZXIgd2FzIHByZXZpb3VzbHkgbWFya2VkIGZvciBkZWxldGlvbiwgdW5tYXJrIGl0IHNpbmNlIHdlXG4gICAgICAvLyBoYXZlIGEgbmV3IGluc3RhbmNlXG4gICAgICBpZiAoZGVsZXRlZEZldGNoZXJzLmhhcyhrZXkpKSB7XG4gICAgICAgIGRlbGV0ZWRGZXRjaGVycy5kZWxldGUoa2V5KTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHN0YXRlLmZldGNoZXJzLmdldChrZXkpIHx8IElETEVfRkVUQ0hFUjtcbiAgfVxuXG4gIGZ1bmN0aW9uIGRlbGV0ZUZldGNoZXIoa2V5OiBzdHJpbmcpOiB2b2lkIHtcbiAgICBsZXQgZmV0Y2hlciA9IHN0YXRlLmZldGNoZXJzLmdldChrZXkpO1xuICAgIC8vIERvbid0IGFib3J0IHRoZSBjb250cm9sbGVyIGlmIHRoaXMgaXMgYSBkZWxldGlvbiBvZiBhIGZldGNoZXIuc3VibWl0KClcbiAgICAvLyBpbiBpdCdzIGxvYWRpbmcgcGhhc2Ugc2luY2UgLSB3ZSBkb24ndCB3YW50IHRvIGFib3J0IHRoZSBjb3JyZXNwb25kaW5nXG4gICAgLy8gcmV2YWxpZGF0aW9uIGFuZCB3YW50IHRoZW0gdG8gY29tcGxldGUgYW5kIGxhbmRcbiAgICBpZiAoXG4gICAgICBmZXRjaENvbnRyb2xsZXJzLmhhcyhrZXkpICYmXG4gICAgICAhKGZldGNoZXIgJiYgZmV0Y2hlci5zdGF0ZSA9PT0gXCJsb2FkaW5nXCIgJiYgZmV0Y2hSZWxvYWRJZHMuaGFzKGtleSkpXG4gICAgKSB7XG4gICAgICBhYm9ydEZldGNoZXIoa2V5KTtcbiAgICB9XG4gICAgZmV0Y2hMb2FkTWF0Y2hlcy5kZWxldGUoa2V5KTtcbiAgICBmZXRjaFJlbG9hZElkcy5kZWxldGUoa2V5KTtcbiAgICBmZXRjaFJlZGlyZWN0SWRzLmRlbGV0ZShrZXkpO1xuICAgIGRlbGV0ZWRGZXRjaGVycy5kZWxldGUoa2V5KTtcbiAgICBzdGF0ZS5mZXRjaGVycy5kZWxldGUoa2V5KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGRlbGV0ZUZldGNoZXJBbmRVcGRhdGVTdGF0ZShrZXk6IHN0cmluZyk6IHZvaWQge1xuICAgIGlmIChmdXR1cmUudjdfZmV0Y2hlclBlcnNpc3QpIHtcbiAgICAgIGxldCBjb3VudCA9IChhY3RpdmVGZXRjaGVycy5nZXQoa2V5KSB8fCAwKSAtIDE7XG4gICAgICBpZiAoY291bnQgPD0gMCkge1xuICAgICAgICBhY3RpdmVGZXRjaGVycy5kZWxldGUoa2V5KTtcbiAgICAgICAgZGVsZXRlZEZldGNoZXJzLmFkZChrZXkpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYWN0aXZlRmV0Y2hlcnMuc2V0KGtleSwgY291bnQpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBkZWxldGVGZXRjaGVyKGtleSk7XG4gICAgfVxuICAgIHVwZGF0ZVN0YXRlKHsgZmV0Y2hlcnM6IG5ldyBNYXAoc3RhdGUuZmV0Y2hlcnMpIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gYWJvcnRGZXRjaGVyKGtleTogc3RyaW5nKSB7XG4gICAgbGV0IGNvbnRyb2xsZXIgPSBmZXRjaENvbnRyb2xsZXJzLmdldChrZXkpO1xuICAgIGludmFyaWFudChjb250cm9sbGVyLCBgRXhwZWN0ZWQgZmV0Y2ggY29udHJvbGxlcjogJHtrZXl9YCk7XG4gICAgY29udHJvbGxlci5hYm9ydCgpO1xuICAgIGZldGNoQ29udHJvbGxlcnMuZGVsZXRlKGtleSk7XG4gIH1cblxuICBmdW5jdGlvbiBtYXJrRmV0Y2hlcnNEb25lKGtleXM6IHN0cmluZ1tdKSB7XG4gICAgZm9yIChsZXQga2V5IG9mIGtleXMpIHtcbiAgICAgIGxldCBmZXRjaGVyID0gZ2V0RmV0Y2hlcihrZXkpO1xuICAgICAgbGV0IGRvbmVGZXRjaGVyID0gZ2V0RG9uZUZldGNoZXIoZmV0Y2hlci5kYXRhKTtcbiAgICAgIHN0YXRlLmZldGNoZXJzLnNldChrZXksIGRvbmVGZXRjaGVyKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBtYXJrRmV0Y2hSZWRpcmVjdHNEb25lKCk6IGJvb2xlYW4ge1xuICAgIGxldCBkb25lS2V5cyA9IFtdO1xuICAgIGxldCB1cGRhdGVkRmV0Y2hlcnMgPSBmYWxzZTtcbiAgICBmb3IgKGxldCBrZXkgb2YgZmV0Y2hSZWRpcmVjdElkcykge1xuICAgICAgbGV0IGZldGNoZXIgPSBzdGF0ZS5mZXRjaGVycy5nZXQoa2V5KTtcbiAgICAgIGludmFyaWFudChmZXRjaGVyLCBgRXhwZWN0ZWQgZmV0Y2hlcjogJHtrZXl9YCk7XG4gICAgICBpZiAoZmV0Y2hlci5zdGF0ZSA9PT0gXCJsb2FkaW5nXCIpIHtcbiAgICAgICAgZmV0Y2hSZWRpcmVjdElkcy5kZWxldGUoa2V5KTtcbiAgICAgICAgZG9uZUtleXMucHVzaChrZXkpO1xuICAgICAgICB1cGRhdGVkRmV0Y2hlcnMgPSB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgICBtYXJrRmV0Y2hlcnNEb25lKGRvbmVLZXlzKTtcbiAgICByZXR1cm4gdXBkYXRlZEZldGNoZXJzO1xuICB9XG5cbiAgZnVuY3Rpb24gYWJvcnRTdGFsZUZldGNoTG9hZHMobGFuZGVkSWQ6IG51bWJlcik6IGJvb2xlYW4ge1xuICAgIGxldCB5ZWV0ZWRLZXlzID0gW107XG4gICAgZm9yIChsZXQgW2tleSwgaWRdIG9mIGZldGNoUmVsb2FkSWRzKSB7XG4gICAgICBpZiAoaWQgPCBsYW5kZWRJZCkge1xuICAgICAgICBsZXQgZmV0Y2hlciA9IHN0YXRlLmZldGNoZXJzLmdldChrZXkpO1xuICAgICAgICBpbnZhcmlhbnQoZmV0Y2hlciwgYEV4cGVjdGVkIGZldGNoZXI6ICR7a2V5fWApO1xuICAgICAgICBpZiAoZmV0Y2hlci5zdGF0ZSA9PT0gXCJsb2FkaW5nXCIpIHtcbiAgICAgICAgICBhYm9ydEZldGNoZXIoa2V5KTtcbiAgICAgICAgICBmZXRjaFJlbG9hZElkcy5kZWxldGUoa2V5KTtcbiAgICAgICAgICB5ZWV0ZWRLZXlzLnB1c2goa2V5KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBtYXJrRmV0Y2hlcnNEb25lKHllZXRlZEtleXMpO1xuICAgIHJldHVybiB5ZWV0ZWRLZXlzLmxlbmd0aCA+IDA7XG4gIH1cblxuICBmdW5jdGlvbiBnZXRCbG9ja2VyKGtleTogc3RyaW5nLCBmbjogQmxvY2tlckZ1bmN0aW9uKSB7XG4gICAgbGV0IGJsb2NrZXI6IEJsb2NrZXIgPSBzdGF0ZS5ibG9ja2Vycy5nZXQoa2V5KSB8fCBJRExFX0JMT0NLRVI7XG5cbiAgICBpZiAoYmxvY2tlckZ1bmN0aW9ucy5nZXQoa2V5KSAhPT0gZm4pIHtcbiAgICAgIGJsb2NrZXJGdW5jdGlvbnMuc2V0KGtleSwgZm4pO1xuICAgIH1cblxuICAgIHJldHVybiBibG9ja2VyO1xuICB9XG5cbiAgZnVuY3Rpb24gZGVsZXRlQmxvY2tlcihrZXk6IHN0cmluZykge1xuICAgIHN0YXRlLmJsb2NrZXJzLmRlbGV0ZShrZXkpO1xuICAgIGJsb2NrZXJGdW5jdGlvbnMuZGVsZXRlKGtleSk7XG4gIH1cblxuICAvLyBVdGlsaXR5IGZ1bmN0aW9uIHRvIHVwZGF0ZSBibG9ja2VycywgZW5zdXJpbmcgdmFsaWQgc3RhdGUgdHJhbnNpdGlvbnNcbiAgZnVuY3Rpb24gdXBkYXRlQmxvY2tlcihrZXk6IHN0cmluZywgbmV3QmxvY2tlcjogQmxvY2tlcikge1xuICAgIGxldCBibG9ja2VyID0gc3RhdGUuYmxvY2tlcnMuZ2V0KGtleSkgfHwgSURMRV9CTE9DS0VSO1xuXG4gICAgLy8gUG9vciBtYW5zIHN0YXRlIG1hY2hpbmUgOilcbiAgICAvLyBodHRwczovL21lcm1haWQubGl2ZS9lZGl0I3Bha286ZU5xVmtjOU93ekFNeGw4bDhubmpBWXJFdERJT0hFQklnd3ZLSlRSZUd5M19sRHBJcU8yN2s2YXdNRzBYY3JMbG56ODdud2RvbkVTb2dLWFhCdUU3OXJxNzVYWk8zLXlIZHMwUkpWdXY3MFlyUGxVckNFZTJIZnJPUlMzcnVicVpmdWh0cGc1Qzl3azV0WjRWS2NSVXE4OHE5WjhSUzAtNDhjRTFpSEprTDB1Z2JIdUZMdXM5TDZzcFp5OG5YOU1QMkNOZG9tVmFwb3NxdTNmR2F5VDhUOC1qSlF3aGVwb19VdHBnQlFhREVVb20wNGRaaEFOMWFKQkRsVUtKQnhFMWNlQjJTbWowTWxuLUlCVzVBRlUyZHdVaWt0dF8yUWFxMmRCZmFLZEV1cDg1VVY3WWQtZEtqbG5rYWJsMlB2cjBEVGtUcmVNXG4gICAgaW52YXJpYW50KFxuICAgICAgKGJsb2NrZXIuc3RhdGUgPT09IFwidW5ibG9ja2VkXCIgJiYgbmV3QmxvY2tlci5zdGF0ZSA9PT0gXCJibG9ja2VkXCIpIHx8XG4gICAgICAgIChibG9ja2VyLnN0YXRlID09PSBcImJsb2NrZWRcIiAmJiBuZXdCbG9ja2VyLnN0YXRlID09PSBcImJsb2NrZWRcIikgfHxcbiAgICAgICAgKGJsb2NrZXIuc3RhdGUgPT09IFwiYmxvY2tlZFwiICYmIG5ld0Jsb2NrZXIuc3RhdGUgPT09IFwicHJvY2VlZGluZ1wiKSB8fFxuICAgICAgICAoYmxvY2tlci5zdGF0ZSA9PT0gXCJibG9ja2VkXCIgJiYgbmV3QmxvY2tlci5zdGF0ZSA9PT0gXCJ1bmJsb2NrZWRcIikgfHxcbiAgICAgICAgKGJsb2NrZXIuc3RhdGUgPT09IFwicHJvY2VlZGluZ1wiICYmIG5ld0Jsb2NrZXIuc3RhdGUgPT09IFwidW5ibG9ja2VkXCIpLFxuICAgICAgYEludmFsaWQgYmxvY2tlciBzdGF0ZSB0cmFuc2l0aW9uOiAke2Jsb2NrZXIuc3RhdGV9IC0+ICR7bmV3QmxvY2tlci5zdGF0ZX1gXG4gICAgKTtcblxuICAgIGxldCBibG9ja2VycyA9IG5ldyBNYXAoc3RhdGUuYmxvY2tlcnMpO1xuICAgIGJsb2NrZXJzLnNldChrZXksIG5ld0Jsb2NrZXIpO1xuICAgIHVwZGF0ZVN0YXRlKHsgYmxvY2tlcnMgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBzaG91bGRCbG9ja05hdmlnYXRpb24oe1xuICAgIGN1cnJlbnRMb2NhdGlvbixcbiAgICBuZXh0TG9jYXRpb24sXG4gICAgaGlzdG9yeUFjdGlvbixcbiAgfToge1xuICAgIGN1cnJlbnRMb2NhdGlvbjogTG9jYXRpb247XG4gICAgbmV4dExvY2F0aW9uOiBMb2NhdGlvbjtcbiAgICBoaXN0b3J5QWN0aW9uOiBIaXN0b3J5QWN0aW9uO1xuICB9KTogc3RyaW5nIHwgdW5kZWZpbmVkIHtcbiAgICBpZiAoYmxvY2tlckZ1bmN0aW9ucy5zaXplID09PSAwKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gV2Ugb255IHN1cHBvcnQgYSBzaW5nbGUgYWN0aXZlIGJsb2NrZXIgYXQgdGhlIG1vbWVudCBzaW5jZSB3ZSBkb24ndCBoYXZlXG4gICAgLy8gYW55IGNvbXBlbGxpbmcgdXNlIGNhc2VzIGZvciBtdWx0aS1ibG9ja2VyIHlldFxuICAgIGlmIChibG9ja2VyRnVuY3Rpb25zLnNpemUgPiAxKSB7XG4gICAgICB3YXJuaW5nKGZhbHNlLCBcIkEgcm91dGVyIG9ubHkgc3VwcG9ydHMgb25lIGJsb2NrZXIgYXQgYSB0aW1lXCIpO1xuICAgIH1cblxuICAgIGxldCBlbnRyaWVzID0gQXJyYXkuZnJvbShibG9ja2VyRnVuY3Rpb25zLmVudHJpZXMoKSk7XG4gICAgbGV0IFtibG9ja2VyS2V5LCBibG9ja2VyRnVuY3Rpb25dID0gZW50cmllc1tlbnRyaWVzLmxlbmd0aCAtIDFdO1xuICAgIGxldCBibG9ja2VyID0gc3RhdGUuYmxvY2tlcnMuZ2V0KGJsb2NrZXJLZXkpO1xuXG4gICAgaWYgKGJsb2NrZXIgJiYgYmxvY2tlci5zdGF0ZSA9PT0gXCJwcm9jZWVkaW5nXCIpIHtcbiAgICAgIC8vIElmIHRoZSBibG9ja2VyIGlzIGN1cnJlbnRseSBwcm9jZWVkaW5nLCB3ZSBkb24ndCBuZWVkIHRvIHJlLWNoZWNrXG4gICAgICAvLyBpdCBhbmQgY2FuIGxldCB0aGlzIG5hdmlnYXRpb24gY29udGludWVcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBBdCB0aGlzIHBvaW50LCB3ZSBrbm93IHdlJ3JlIHVuYmxvY2tlZC9ibG9ja2VkIHNvIHdlIG5lZWQgdG8gY2hlY2sgdGhlXG4gICAgLy8gdXNlci1wcm92aWRlZCBibG9ja2VyIGZ1bmN0aW9uXG4gICAgaWYgKGJsb2NrZXJGdW5jdGlvbih7IGN1cnJlbnRMb2NhdGlvbiwgbmV4dExvY2F0aW9uLCBoaXN0b3J5QWN0aW9uIH0pKSB7XG4gICAgICByZXR1cm4gYmxvY2tlcktleTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBjYW5jZWxBY3RpdmVEZWZlcnJlZHMoXG4gICAgcHJlZGljYXRlPzogKHJvdXRlSWQ6IHN0cmluZykgPT4gYm9vbGVhblxuICApOiBzdHJpbmdbXSB7XG4gICAgbGV0IGNhbmNlbGxlZFJvdXRlSWRzOiBzdHJpbmdbXSA9IFtdO1xuICAgIGFjdGl2ZURlZmVycmVkcy5mb3JFYWNoKChkZmQsIHJvdXRlSWQpID0+IHtcbiAgICAgIGlmICghcHJlZGljYXRlIHx8IHByZWRpY2F0ZShyb3V0ZUlkKSkge1xuICAgICAgICAvLyBDYW5jZWwgdGhlIGRlZmVycmVkIC0gYnV0IGRvIG5vdCByZW1vdmUgZnJvbSBhY3RpdmVEZWZlcnJlZHMgaGVyZSAtXG4gICAgICAgIC8vIHdlIHJlbHkgb24gdGhlIHN1YnNjcmliZXJzIHRvIGRvIHRoYXQgc28gb3VyIHRlc3RzIGNhbiBhc3NlcnQgcHJvcGVyXG4gICAgICAgIC8vIGNsZWFudXAgdmlhIF9pbnRlcm5hbEFjdGl2ZURlZmVycmVkc1xuICAgICAgICBkZmQuY2FuY2VsKCk7XG4gICAgICAgIGNhbmNlbGxlZFJvdXRlSWRzLnB1c2gocm91dGVJZCk7XG4gICAgICAgIGFjdGl2ZURlZmVycmVkcy5kZWxldGUocm91dGVJZCk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIGNhbmNlbGxlZFJvdXRlSWRzO1xuICB9XG5cbiAgLy8gT3B0IGluIHRvIGNhcHR1cmluZyBhbmQgcmVwb3J0aW5nIHNjcm9sbCBwb3NpdGlvbnMgZHVyaW5nIG5hdmlnYXRpb25zLFxuICAvLyB1c2VkIGJ5IHRoZSA8U2Nyb2xsUmVzdG9yYXRpb24+IGNvbXBvbmVudFxuICBmdW5jdGlvbiBlbmFibGVTY3JvbGxSZXN0b3JhdGlvbihcbiAgICBwb3NpdGlvbnM6IFJlY29yZDxzdHJpbmcsIG51bWJlcj4sXG4gICAgZ2V0UG9zaXRpb246IEdldFNjcm9sbFBvc2l0aW9uRnVuY3Rpb24sXG4gICAgZ2V0S2V5PzogR2V0U2Nyb2xsUmVzdG9yYXRpb25LZXlGdW5jdGlvblxuICApIHtcbiAgICBzYXZlZFNjcm9sbFBvc2l0aW9ucyA9IHBvc2l0aW9ucztcbiAgICBnZXRTY3JvbGxQb3NpdGlvbiA9IGdldFBvc2l0aW9uO1xuICAgIGdldFNjcm9sbFJlc3RvcmF0aW9uS2V5ID0gZ2V0S2V5IHx8IG51bGw7XG5cbiAgICAvLyBQZXJmb3JtIGluaXRpYWwgaHlkcmF0aW9uIHNjcm9sbCByZXN0b3JhdGlvbiwgc2luY2Ugd2UgbWlzcyB0aGUgYm9hdCBvblxuICAgIC8vIHRoZSBpbml0aWFsIHVwZGF0ZVN0YXRlKCkgYmVjYXVzZSB3ZSd2ZSBub3QgeWV0IHJlbmRlcmVkIDxTY3JvbGxSZXN0b3JhdGlvbi8+XG4gICAgLy8gYW5kIHRoZXJlZm9yZSBoYXZlIG5vIHNhdmVkU2Nyb2xsUG9zaXRpb25zIGF2YWlsYWJsZVxuICAgIGlmICghaW5pdGlhbFNjcm9sbFJlc3RvcmVkICYmIHN0YXRlLm5hdmlnYXRpb24gPT09IElETEVfTkFWSUdBVElPTikge1xuICAgICAgaW5pdGlhbFNjcm9sbFJlc3RvcmVkID0gdHJ1ZTtcbiAgICAgIGxldCB5ID0gZ2V0U2F2ZWRTY3JvbGxQb3NpdGlvbihzdGF0ZS5sb2NhdGlvbiwgc3RhdGUubWF0Y2hlcyk7XG4gICAgICBpZiAoeSAhPSBudWxsKSB7XG4gICAgICAgIHVwZGF0ZVN0YXRlKHsgcmVzdG9yZVNjcm9sbFBvc2l0aW9uOiB5IH0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICBzYXZlZFNjcm9sbFBvc2l0aW9ucyA9IG51bGw7XG4gICAgICBnZXRTY3JvbGxQb3NpdGlvbiA9IG51bGw7XG4gICAgICBnZXRTY3JvbGxSZXN0b3JhdGlvbktleSA9IG51bGw7XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdldFNjcm9sbEtleShsb2NhdGlvbjogTG9jYXRpb24sIG1hdGNoZXM6IEFnbm9zdGljRGF0YVJvdXRlTWF0Y2hbXSkge1xuICAgIGlmIChnZXRTY3JvbGxSZXN0b3JhdGlvbktleSkge1xuICAgICAgbGV0IGtleSA9IGdldFNjcm9sbFJlc3RvcmF0aW9uS2V5KFxuICAgICAgICBsb2NhdGlvbixcbiAgICAgICAgbWF0Y2hlcy5tYXAoKG0pID0+IGNvbnZlcnRSb3V0ZU1hdGNoVG9VaU1hdGNoKG0sIHN0YXRlLmxvYWRlckRhdGEpKVxuICAgICAgKTtcbiAgICAgIHJldHVybiBrZXkgfHwgbG9jYXRpb24ua2V5O1xuICAgIH1cbiAgICByZXR1cm4gbG9jYXRpb24ua2V5O1xuICB9XG5cbiAgZnVuY3Rpb24gc2F2ZVNjcm9sbFBvc2l0aW9uKFxuICAgIGxvY2F0aW9uOiBMb2NhdGlvbixcbiAgICBtYXRjaGVzOiBBZ25vc3RpY0RhdGFSb3V0ZU1hdGNoW11cbiAgKTogdm9pZCB7XG4gICAgaWYgKHNhdmVkU2Nyb2xsUG9zaXRpb25zICYmIGdldFNjcm9sbFBvc2l0aW9uKSB7XG4gICAgICBsZXQga2V5ID0gZ2V0U2Nyb2xsS2V5KGxvY2F0aW9uLCBtYXRjaGVzKTtcbiAgICAgIHNhdmVkU2Nyb2xsUG9zaXRpb25zW2tleV0gPSBnZXRTY3JvbGxQb3NpdGlvbigpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGdldFNhdmVkU2Nyb2xsUG9zaXRpb24oXG4gICAgbG9jYXRpb246IExvY2F0aW9uLFxuICAgIG1hdGNoZXM6IEFnbm9zdGljRGF0YVJvdXRlTWF0Y2hbXVxuICApOiBudW1iZXIgfCBudWxsIHtcbiAgICBpZiAoc2F2ZWRTY3JvbGxQb3NpdGlvbnMpIHtcbiAgICAgIGxldCBrZXkgPSBnZXRTY3JvbGxLZXkobG9jYXRpb24sIG1hdGNoZXMpO1xuICAgICAgbGV0IHkgPSBzYXZlZFNjcm9sbFBvc2l0aW9uc1trZXldO1xuICAgICAgaWYgKHR5cGVvZiB5ID09PSBcIm51bWJlclwiKSB7XG4gICAgICAgIHJldHVybiB5O1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIGZ1bmN0aW9uIF9pbnRlcm5hbFNldFJvdXRlcyhuZXdSb3V0ZXM6IEFnbm9zdGljRGF0YVJvdXRlT2JqZWN0W10pIHtcbiAgICBtYW5pZmVzdCA9IHt9O1xuICAgIGluRmxpZ2h0RGF0YVJvdXRlcyA9IGNvbnZlcnRSb3V0ZXNUb0RhdGFSb3V0ZXMoXG4gICAgICBuZXdSb3V0ZXMsXG4gICAgICBtYXBSb3V0ZVByb3BlcnRpZXMsXG4gICAgICB1bmRlZmluZWQsXG4gICAgICBtYW5pZmVzdFxuICAgICk7XG4gIH1cblxuICByb3V0ZXIgPSB7XG4gICAgZ2V0IGJhc2VuYW1lKCkge1xuICAgICAgcmV0dXJuIGJhc2VuYW1lO1xuICAgIH0sXG4gICAgZ2V0IGZ1dHVyZSgpIHtcbiAgICAgIHJldHVybiBmdXR1cmU7XG4gICAgfSxcbiAgICBnZXQgc3RhdGUoKSB7XG4gICAgICByZXR1cm4gc3RhdGU7XG4gICAgfSxcbiAgICBnZXQgcm91dGVzKCkge1xuICAgICAgcmV0dXJuIGRhdGFSb3V0ZXM7XG4gICAgfSxcbiAgICBnZXQgd2luZG93KCkge1xuICAgICAgcmV0dXJuIHJvdXRlcldpbmRvdztcbiAgICB9LFxuICAgIGluaXRpYWxpemUsXG4gICAgc3Vic2NyaWJlLFxuICAgIGVuYWJsZVNjcm9sbFJlc3RvcmF0aW9uLFxuICAgIG5hdmlnYXRlLFxuICAgIGZldGNoLFxuICAgIHJldmFsaWRhdGUsXG4gICAgLy8gUGFzc3Rocm91Z2ggdG8gaGlzdG9yeS1hd2FyZSBjcmVhdGVIcmVmIHVzZWQgYnkgdXNlSHJlZiBzbyB3ZSBnZXQgcHJvcGVyXG4gICAgLy8gaGFzaC1hd2FyZSBVUkxzIGluIERPTSBwYXRoc1xuICAgIGNyZWF0ZUhyZWY6ICh0bzogVG8pID0+IGluaXQuaGlzdG9yeS5jcmVhdGVIcmVmKHRvKSxcbiAgICBlbmNvZGVMb2NhdGlvbjogKHRvOiBUbykgPT4gaW5pdC5oaXN0b3J5LmVuY29kZUxvY2F0aW9uKHRvKSxcbiAgICBnZXRGZXRjaGVyLFxuICAgIGRlbGV0ZUZldGNoZXI6IGRlbGV0ZUZldGNoZXJBbmRVcGRhdGVTdGF0ZSxcbiAgICBkaXNwb3NlLFxuICAgIGdldEJsb2NrZXIsXG4gICAgZGVsZXRlQmxvY2tlcixcbiAgICBfaW50ZXJuYWxGZXRjaENvbnRyb2xsZXJzOiBmZXRjaENvbnRyb2xsZXJzLFxuICAgIF9pbnRlcm5hbEFjdGl2ZURlZmVycmVkczogYWN0aXZlRGVmZXJyZWRzLFxuICAgIC8vIFRPRE86IFJlbW92ZSBzZXRSb3V0ZXMsIGl0J3MgdGVtcG9yYXJ5IHRvIGF2b2lkIGRlYWxpbmcgd2l0aFxuICAgIC8vIHVwZGF0aW5nIHRoZSB0cmVlIHdoaWxlIHZhbGlkYXRpbmcgdGhlIHVwZGF0ZSBhbGdvcml0aG0uXG4gICAgX2ludGVybmFsU2V0Um91dGVzLFxuICB9O1xuXG4gIHJldHVybiByb3V0ZXI7XG59XG4vLyNlbmRyZWdpb25cblxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbi8vI3JlZ2lvbiBjcmVhdGVTdGF0aWNIYW5kbGVyXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG5leHBvcnQgY29uc3QgVU5TQUZFX0RFRkVSUkVEX1NZTUJPTCA9IFN5bWJvbChcImRlZmVycmVkXCIpO1xuXG4vKipcbiAqIEZ1dHVyZSBmbGFncyB0byB0b2dnbGUgbmV3IGZlYXR1cmUgYmVoYXZpb3JcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBTdGF0aWNIYW5kbGVyRnV0dXJlQ29uZmlnIHtcbiAgdjdfcmVsYXRpdmVTcGxhdFBhdGg6IGJvb2xlYW47XG4gIHY3X3Rocm93QWJvcnRSZWFzb246IGJvb2xlYW47XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQ3JlYXRlU3RhdGljSGFuZGxlck9wdGlvbnMge1xuICBiYXNlbmFtZT86IHN0cmluZztcbiAgLyoqXG4gICAqIEBkZXByZWNhdGVkIFVzZSBgbWFwUm91dGVQcm9wZXJ0aWVzYCBpbnN0ZWFkXG4gICAqL1xuICBkZXRlY3RFcnJvckJvdW5kYXJ5PzogRGV0ZWN0RXJyb3JCb3VuZGFyeUZ1bmN0aW9uO1xuICBtYXBSb3V0ZVByb3BlcnRpZXM/OiBNYXBSb3V0ZVByb3BlcnRpZXNGdW5jdGlvbjtcbiAgZnV0dXJlPzogUGFydGlhbDxTdGF0aWNIYW5kbGVyRnV0dXJlQ29uZmlnPjtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVN0YXRpY0hhbmRsZXIoXG4gIHJvdXRlczogQWdub3N0aWNSb3V0ZU9iamVjdFtdLFxuICBvcHRzPzogQ3JlYXRlU3RhdGljSGFuZGxlck9wdGlvbnNcbik6IFN0YXRpY0hhbmRsZXIge1xuICBpbnZhcmlhbnQoXG4gICAgcm91dGVzLmxlbmd0aCA+IDAsXG4gICAgXCJZb3UgbXVzdCBwcm92aWRlIGEgbm9uLWVtcHR5IHJvdXRlcyBhcnJheSB0byBjcmVhdGVTdGF0aWNIYW5kbGVyXCJcbiAgKTtcblxuICBsZXQgbWFuaWZlc3Q6IFJvdXRlTWFuaWZlc3QgPSB7fTtcbiAgbGV0IGJhc2VuYW1lID0gKG9wdHMgPyBvcHRzLmJhc2VuYW1lIDogbnVsbCkgfHwgXCIvXCI7XG4gIGxldCBtYXBSb3V0ZVByb3BlcnRpZXM6IE1hcFJvdXRlUHJvcGVydGllc0Z1bmN0aW9uO1xuICBpZiAob3B0cz8ubWFwUm91dGVQcm9wZXJ0aWVzKSB7XG4gICAgbWFwUm91dGVQcm9wZXJ0aWVzID0gb3B0cy5tYXBSb3V0ZVByb3BlcnRpZXM7XG4gIH0gZWxzZSBpZiAob3B0cz8uZGV0ZWN0RXJyb3JCb3VuZGFyeSkge1xuICAgIC8vIElmIHRoZXkgYXJlIHN0aWxsIHVzaW5nIHRoZSBkZXByZWNhdGVkIHZlcnNpb24sIHdyYXAgaXQgd2l0aCB0aGUgbmV3IEFQSVxuICAgIGxldCBkZXRlY3RFcnJvckJvdW5kYXJ5ID0gb3B0cy5kZXRlY3RFcnJvckJvdW5kYXJ5O1xuICAgIG1hcFJvdXRlUHJvcGVydGllcyA9IChyb3V0ZSkgPT4gKHtcbiAgICAgIGhhc0Vycm9yQm91bmRhcnk6IGRldGVjdEVycm9yQm91bmRhcnkocm91dGUpLFxuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIG1hcFJvdXRlUHJvcGVydGllcyA9IGRlZmF1bHRNYXBSb3V0ZVByb3BlcnRpZXM7XG4gIH1cbiAgLy8gQ29uZmlnIGRyaXZlbiBiZWhhdmlvciBmbGFnc1xuICBsZXQgZnV0dXJlOiBTdGF0aWNIYW5kbGVyRnV0dXJlQ29uZmlnID0ge1xuICAgIHY3X3JlbGF0aXZlU3BsYXRQYXRoOiBmYWxzZSxcbiAgICB2N190aHJvd0Fib3J0UmVhc29uOiBmYWxzZSxcbiAgICAuLi4ob3B0cyA/IG9wdHMuZnV0dXJlIDogbnVsbCksXG4gIH07XG5cbiAgbGV0IGRhdGFSb3V0ZXMgPSBjb252ZXJ0Um91dGVzVG9EYXRhUm91dGVzKFxuICAgIHJvdXRlcyxcbiAgICBtYXBSb3V0ZVByb3BlcnRpZXMsXG4gICAgdW5kZWZpbmVkLFxuICAgIG1hbmlmZXN0XG4gICk7XG5cbiAgLyoqXG4gICAqIFRoZSBxdWVyeSgpIG1ldGhvZCBpcyBpbnRlbmRlZCBmb3IgZG9jdW1lbnQgcmVxdWVzdHMsIGluIHdoaWNoIHdlIHdhbnQgdG9cbiAgICogY2FsbCBhbiBvcHRpb25hbCBhY3Rpb24gYW5kIHBvdGVudGlhbGx5IG11bHRpcGxlIGxvYWRlcnMgZm9yIGFsbCBuZXN0ZWRcbiAgICogcm91dGVzLiAgSXQgcmV0dXJucyBhIFN0YXRpY0hhbmRsZXJDb250ZXh0IG9iamVjdCwgd2hpY2ggaXMgdmVyeSBzaW1pbGFyXG4gICAqIHRvIHRoZSByb3V0ZXIgc3RhdGUgKGxvY2F0aW9uLCBsb2FkZXJEYXRhLCBhY3Rpb25EYXRhLCBlcnJvcnMsIGV0Yy4pIGFuZFxuICAgKiBhbHNvIGFkZHMgU1NSLXNwZWNpZmljIGluZm9ybWF0aW9uIHN1Y2ggYXMgdGhlIHN0YXR1c0NvZGUgYW5kIGhlYWRlcnNcbiAgICogZnJvbSBhY3Rpb24vbG9hZGVycyBSZXNwb25zZXMuXG4gICAqXG4gICAqIEl0IF9zaG91bGRfIG5ldmVyIHRocm93IGFuZCBzaG91bGQgcmVwb3J0IGFsbCBlcnJvcnMgdGhyb3VnaCB0aGVcbiAgICogcmV0dXJuZWQgY29udGV4dC5lcnJvcnMgb2JqZWN0LCBwcm9wZXJseSBhc3NvY2lhdGluZyBlcnJvcnMgdG8gdGhlaXIgZXJyb3JcbiAgICogYm91bmRhcnkuICBBZGRpdGlvbmFsbHksIGl0IHRyYWNrcyBfZGVlcGVzdFJlbmRlcmVkQm91bmRhcnlJZCB3aGljaCBjYW4gYmVcbiAgICogdXNlZCB0byBlbXVsYXRlIFJlYWN0IGVycm9yIGJvdW5kYXJpZXMgZHVyaW5nIFNTciBieSBwZXJmb3JtaW5nIGEgc2Vjb25kXG4gICAqIHBhc3Mgb25seSBkb3duIHRvIHRoZSBib3VuZGFyeUlkLlxuICAgKlxuICAgKiBUaGUgb25lIGV4Y2VwdGlvbiB3aGVyZSB3ZSBkbyBub3QgcmV0dXJuIGEgU3RhdGljSGFuZGxlckNvbnRleHQgaXMgd2hlbiBhXG4gICAqIHJlZGlyZWN0IHJlc3BvbnNlIGlzIHJldHVybmVkIG9yIHRocm93biBmcm9tIGFueSBhY3Rpb24vbG9hZGVyLiAgV2VcbiAgICogcHJvcGFnYXRlIHRoYXQgb3V0IGFuZCByZXR1cm4gdGhlIHJhdyBSZXNwb25zZSBzbyB0aGUgSFRUUCBzZXJ2ZXIgY2FuXG4gICAqIHJldHVybiBpdCBkaXJlY3RseS5cbiAgICovXG4gIGFzeW5jIGZ1bmN0aW9uIHF1ZXJ5KFxuICAgIHJlcXVlc3Q6IFJlcXVlc3QsXG4gICAgeyByZXF1ZXN0Q29udGV4dCB9OiB7IHJlcXVlc3RDb250ZXh0PzogdW5rbm93biB9ID0ge31cbiAgKTogUHJvbWlzZTxTdGF0aWNIYW5kbGVyQ29udGV4dCB8IFJlc3BvbnNlPiB7XG4gICAgbGV0IHVybCA9IG5ldyBVUkwocmVxdWVzdC51cmwpO1xuICAgIGxldCBtZXRob2QgPSByZXF1ZXN0Lm1ldGhvZDtcbiAgICBsZXQgbG9jYXRpb24gPSBjcmVhdGVMb2NhdGlvbihcIlwiLCBjcmVhdGVQYXRoKHVybCksIG51bGwsIFwiZGVmYXVsdFwiKTtcbiAgICBsZXQgbWF0Y2hlcyA9IG1hdGNoUm91dGVzKGRhdGFSb3V0ZXMsIGxvY2F0aW9uLCBiYXNlbmFtZSk7XG5cbiAgICAvLyBTU1Igc3VwcG9ydHMgSEVBRCByZXF1ZXN0cyB3aGlsZSBTUEEgZG9lc24ndFxuICAgIGlmICghaXNWYWxpZE1ldGhvZChtZXRob2QpICYmIG1ldGhvZCAhPT0gXCJIRUFEXCIpIHtcbiAgICAgIGxldCBlcnJvciA9IGdldEludGVybmFsUm91dGVyRXJyb3IoNDA1LCB7IG1ldGhvZCB9KTtcbiAgICAgIGxldCB7IG1hdGNoZXM6IG1ldGhvZE5vdEFsbG93ZWRNYXRjaGVzLCByb3V0ZSB9ID1cbiAgICAgICAgZ2V0U2hvcnRDaXJjdWl0TWF0Y2hlcyhkYXRhUm91dGVzKTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGJhc2VuYW1lLFxuICAgICAgICBsb2NhdGlvbixcbiAgICAgICAgbWF0Y2hlczogbWV0aG9kTm90QWxsb3dlZE1hdGNoZXMsXG4gICAgICAgIGxvYWRlckRhdGE6IHt9LFxuICAgICAgICBhY3Rpb25EYXRhOiBudWxsLFxuICAgICAgICBlcnJvcnM6IHtcbiAgICAgICAgICBbcm91dGUuaWRdOiBlcnJvcixcbiAgICAgICAgfSxcbiAgICAgICAgc3RhdHVzQ29kZTogZXJyb3Iuc3RhdHVzLFxuICAgICAgICBsb2FkZXJIZWFkZXJzOiB7fSxcbiAgICAgICAgYWN0aW9uSGVhZGVyczoge30sXG4gICAgICAgIGFjdGl2ZURlZmVycmVkczogbnVsbCxcbiAgICAgIH07XG4gICAgfSBlbHNlIGlmICghbWF0Y2hlcykge1xuICAgICAgbGV0IGVycm9yID0gZ2V0SW50ZXJuYWxSb3V0ZXJFcnJvcig0MDQsIHsgcGF0aG5hbWU6IGxvY2F0aW9uLnBhdGhuYW1lIH0pO1xuICAgICAgbGV0IHsgbWF0Y2hlczogbm90Rm91bmRNYXRjaGVzLCByb3V0ZSB9ID1cbiAgICAgICAgZ2V0U2hvcnRDaXJjdWl0TWF0Y2hlcyhkYXRhUm91dGVzKTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGJhc2VuYW1lLFxuICAgICAgICBsb2NhdGlvbixcbiAgICAgICAgbWF0Y2hlczogbm90Rm91bmRNYXRjaGVzLFxuICAgICAgICBsb2FkZXJEYXRhOiB7fSxcbiAgICAgICAgYWN0aW9uRGF0YTogbnVsbCxcbiAgICAgICAgZXJyb3JzOiB7XG4gICAgICAgICAgW3JvdXRlLmlkXTogZXJyb3IsXG4gICAgICAgIH0sXG4gICAgICAgIHN0YXR1c0NvZGU6IGVycm9yLnN0YXR1cyxcbiAgICAgICAgbG9hZGVySGVhZGVyczoge30sXG4gICAgICAgIGFjdGlvbkhlYWRlcnM6IHt9LFxuICAgICAgICBhY3RpdmVEZWZlcnJlZHM6IG51bGwsXG4gICAgICB9O1xuICAgIH1cblxuICAgIGxldCByZXN1bHQgPSBhd2FpdCBxdWVyeUltcGwocmVxdWVzdCwgbG9jYXRpb24sIG1hdGNoZXMsIHJlcXVlc3RDb250ZXh0KTtcbiAgICBpZiAoaXNSZXNwb25zZShyZXN1bHQpKSB7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8vIFdoZW4gcmV0dXJuaW5nIFN0YXRpY0hhbmRsZXJDb250ZXh0LCB3ZSBwYXRjaCBiYWNrIGluIHRoZSBsb2NhdGlvbiBoZXJlXG4gICAgLy8gc2luY2Ugd2UgbmVlZCBpdCBmb3IgUmVhY3QgQ29udGV4dC4gIEJ1dCB0aGlzIGhlbHBzIGtlZXAgb3VyIHN1Ym1pdCBhbmRcbiAgICAvLyBsb2FkUm91dGVEYXRhIG9wZXJhdGluZyBvbiBhIFJlcXVlc3QgaW5zdGVhZCBvZiBhIExvY2F0aW9uXG4gICAgcmV0dXJuIHsgbG9jYXRpb24sIGJhc2VuYW1lLCAuLi5yZXN1bHQgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgcXVlcnlSb3V0ZSgpIG1ldGhvZCBpcyBpbnRlbmRlZCBmb3IgdGFyZ2V0ZWQgcm91dGUgcmVxdWVzdHMsIGVpdGhlclxuICAgKiBmb3IgZmV0Y2ggP19kYXRhIHJlcXVlc3RzIG9yIHJlc291cmNlIHJvdXRlIHJlcXVlc3RzLiAgSW4gdGhpcyBjYXNlLCB3ZVxuICAgKiBhcmUgb25seSBldmVyIGNhbGxpbmcgYSBzaW5nbGUgYWN0aW9uIG9yIGxvYWRlciwgYW5kIHdlIGFyZSByZXR1cm5pbmcgdGhlXG4gICAqIHJldHVybmVkIHZhbHVlIGRpcmVjdGx5LiAgSW4gbW9zdCBjYXNlcywgdGhpcyB3aWxsIGJlIGEgUmVzcG9uc2UgcmV0dXJuZWRcbiAgICogZnJvbSB0aGUgYWN0aW9uL2xvYWRlciwgYnV0IGl0IG1heSBiZSBhIHByaW1pdGl2ZSBvciBvdGhlciB2YWx1ZSBhcyB3ZWxsIC1cbiAgICogYW5kIGluIHN1Y2ggY2FzZXMgdGhlIGNhbGxpbmcgY29udGV4dCBzaG91bGQgaGFuZGxlIHRoYXQgYWNjb3JkaW5nbHkuXG4gICAqXG4gICAqIFdlIGRvIHJlc3BlY3QgdGhlIHRocm93L3JldHVybiBkaWZmZXJlbnRpYXRpb24sIHNvIGlmIGFuIGFjdGlvbi9sb2FkZXJcbiAgICogdGhyb3dzLCB0aGVuIHRoaXMgbWV0aG9kIHdpbGwgdGhyb3cgdGhlIHZhbHVlLiAgVGhpcyBpcyBpbXBvcnRhbnQgc28gd2VcbiAgICogY2FuIGRvIHByb3BlciBib3VuZGFyeSBpZGVudGlmaWNhdGlvbiBpbiBSZW1peCB3aGVyZSBhIHRocm93biBSZXNwb25zZVxuICAgKiBtdXN0IGdvIHRvIHRoZSBDYXRjaCBCb3VuZGFyeSBidXQgYSByZXR1cm5lZCBSZXNwb25zZSBpcyBoYXBweS1wYXRoLlxuICAgKlxuICAgKiBPbmUgdGhpbmcgdG8gbm90ZSBpcyB0aGF0IGFueSBSb3V0ZXItaW5pdGlhdGVkIEVycm9ycyB0aGF0IG1ha2Ugc2Vuc2VcbiAgICogdG8gYXNzb2NpYXRlIHdpdGggYSBzdGF0dXMgY29kZSB3aWxsIGJlIHRocm93biBhcyBhbiBFcnJvclJlc3BvbnNlXG4gICAqIGluc3RhbmNlIHdoaWNoIGluY2x1ZGUgdGhlIHJhdyBFcnJvciwgc3VjaCB0aGF0IHRoZSBjYWxsaW5nIGNvbnRleHQgY2FuXG4gICAqIHNlcmlhbGl6ZSB0aGUgZXJyb3IgYXMgdGhleSBzZWUgZml0IHdoaWxlIGluY2x1ZGluZyB0aGUgcHJvcGVyIHJlc3BvbnNlXG4gICAqIGNvZGUuICBFeGFtcGxlcyBoZXJlIGFyZSA0MDQgYW5kIDQwNSBlcnJvcnMgdGhhdCBvY2N1ciBwcmlvciB0byByZWFjaGluZ1xuICAgKiBhbnkgdXNlci1kZWZpbmVkIGxvYWRlcnMuXG4gICAqL1xuICBhc3luYyBmdW5jdGlvbiBxdWVyeVJvdXRlKFxuICAgIHJlcXVlc3Q6IFJlcXVlc3QsXG4gICAge1xuICAgICAgcm91dGVJZCxcbiAgICAgIHJlcXVlc3RDb250ZXh0LFxuICAgIH06IHsgcmVxdWVzdENvbnRleHQ/OiB1bmtub3duOyByb3V0ZUlkPzogc3RyaW5nIH0gPSB7fVxuICApOiBQcm9taXNlPGFueT4ge1xuICAgIGxldCB1cmwgPSBuZXcgVVJMKHJlcXVlc3QudXJsKTtcbiAgICBsZXQgbWV0aG9kID0gcmVxdWVzdC5tZXRob2Q7XG4gICAgbGV0IGxvY2F0aW9uID0gY3JlYXRlTG9jYXRpb24oXCJcIiwgY3JlYXRlUGF0aCh1cmwpLCBudWxsLCBcImRlZmF1bHRcIik7XG4gICAgbGV0IG1hdGNoZXMgPSBtYXRjaFJvdXRlcyhkYXRhUm91dGVzLCBsb2NhdGlvbiwgYmFzZW5hbWUpO1xuXG4gICAgLy8gU1NSIHN1cHBvcnRzIEhFQUQgcmVxdWVzdHMgd2hpbGUgU1BBIGRvZXNuJ3RcbiAgICBpZiAoIWlzVmFsaWRNZXRob2QobWV0aG9kKSAmJiBtZXRob2QgIT09IFwiSEVBRFwiICYmIG1ldGhvZCAhPT0gXCJPUFRJT05TXCIpIHtcbiAgICAgIHRocm93IGdldEludGVybmFsUm91dGVyRXJyb3IoNDA1LCB7IG1ldGhvZCB9KTtcbiAgICB9IGVsc2UgaWYgKCFtYXRjaGVzKSB7XG4gICAgICB0aHJvdyBnZXRJbnRlcm5hbFJvdXRlckVycm9yKDQwNCwgeyBwYXRobmFtZTogbG9jYXRpb24ucGF0aG5hbWUgfSk7XG4gICAgfVxuXG4gICAgbGV0IG1hdGNoID0gcm91dGVJZFxuICAgICAgPyBtYXRjaGVzLmZpbmQoKG0pID0+IG0ucm91dGUuaWQgPT09IHJvdXRlSWQpXG4gICAgICA6IGdldFRhcmdldE1hdGNoKG1hdGNoZXMsIGxvY2F0aW9uKTtcblxuICAgIGlmIChyb3V0ZUlkICYmICFtYXRjaCkge1xuICAgICAgdGhyb3cgZ2V0SW50ZXJuYWxSb3V0ZXJFcnJvcig0MDMsIHtcbiAgICAgICAgcGF0aG5hbWU6IGxvY2F0aW9uLnBhdGhuYW1lLFxuICAgICAgICByb3V0ZUlkLFxuICAgICAgfSk7XG4gICAgfSBlbHNlIGlmICghbWF0Y2gpIHtcbiAgICAgIC8vIFRoaXMgc2hvdWxkIG5ldmVyIGhpdCBJIGRvbid0IHRoaW5rP1xuICAgICAgdGhyb3cgZ2V0SW50ZXJuYWxSb3V0ZXJFcnJvcig0MDQsIHsgcGF0aG5hbWU6IGxvY2F0aW9uLnBhdGhuYW1lIH0pO1xuICAgIH1cblxuICAgIGxldCByZXN1bHQgPSBhd2FpdCBxdWVyeUltcGwoXG4gICAgICByZXF1ZXN0LFxuICAgICAgbG9jYXRpb24sXG4gICAgICBtYXRjaGVzLFxuICAgICAgcmVxdWVzdENvbnRleHQsXG4gICAgICBtYXRjaFxuICAgICk7XG4gICAgaWYgKGlzUmVzcG9uc2UocmVzdWx0KSkge1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICBsZXQgZXJyb3IgPSByZXN1bHQuZXJyb3JzID8gT2JqZWN0LnZhbHVlcyhyZXN1bHQuZXJyb3JzKVswXSA6IHVuZGVmaW5lZDtcbiAgICBpZiAoZXJyb3IgIT09IHVuZGVmaW5lZCkge1xuICAgICAgLy8gSWYgd2UgZ290IGJhY2sgcmVzdWx0LmVycm9ycywgdGhhdCBtZWFucyB0aGUgbG9hZGVyL2FjdGlvbiB0aHJld1xuICAgICAgLy8gX3NvbWV0aGluZ18gdGhhdCB3YXNuJ3QgYSBSZXNwb25zZSwgYnV0IGl0J3Mgbm90IGd1YXJhbnRlZWQvcmVxdWlyZWRcbiAgICAgIC8vIHRvIGJlIGFuIGBpbnN0YW5jZW9mIEVycm9yYCBlaXRoZXIsIHNvIHdlIGhhdmUgdG8gdXNlIHRocm93IGhlcmUgdG9cbiAgICAgIC8vIHByZXNlcnZlIHRoZSBcImVycm9yXCIgc3RhdGUgb3V0c2lkZSBvZiBxdWVyeUltcGwuXG4gICAgICB0aHJvdyBlcnJvcjtcbiAgICB9XG5cbiAgICAvLyBQaWNrIG9mZiB0aGUgcmlnaHQgc3RhdGUgdmFsdWUgdG8gcmV0dXJuXG4gICAgaWYgKHJlc3VsdC5hY3Rpb25EYXRhKSB7XG4gICAgICByZXR1cm4gT2JqZWN0LnZhbHVlcyhyZXN1bHQuYWN0aW9uRGF0YSlbMF07XG4gICAgfVxuXG4gICAgaWYgKHJlc3VsdC5sb2FkZXJEYXRhKSB7XG4gICAgICBsZXQgZGF0YSA9IE9iamVjdC52YWx1ZXMocmVzdWx0LmxvYWRlckRhdGEpWzBdO1xuICAgICAgaWYgKHJlc3VsdC5hY3RpdmVEZWZlcnJlZHM/LlttYXRjaC5yb3V0ZS5pZF0pIHtcbiAgICAgICAgZGF0YVtVTlNBRkVfREVGRVJSRURfU1lNQk9MXSA9IHJlc3VsdC5hY3RpdmVEZWZlcnJlZHNbbWF0Y2gucm91dGUuaWRdO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGRhdGE7XG4gICAgfVxuXG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfVxuXG4gIGFzeW5jIGZ1bmN0aW9uIHF1ZXJ5SW1wbChcbiAgICByZXF1ZXN0OiBSZXF1ZXN0LFxuICAgIGxvY2F0aW9uOiBMb2NhdGlvbixcbiAgICBtYXRjaGVzOiBBZ25vc3RpY0RhdGFSb3V0ZU1hdGNoW10sXG4gICAgcmVxdWVzdENvbnRleHQ6IHVua25vd24sXG4gICAgcm91dGVNYXRjaD86IEFnbm9zdGljRGF0YVJvdXRlTWF0Y2hcbiAgKTogUHJvbWlzZTxPbWl0PFN0YXRpY0hhbmRsZXJDb250ZXh0LCBcImxvY2F0aW9uXCIgfCBcImJhc2VuYW1lXCI+IHwgUmVzcG9uc2U+IHtcbiAgICBpbnZhcmlhbnQoXG4gICAgICByZXF1ZXN0LnNpZ25hbCxcbiAgICAgIFwicXVlcnkoKS9xdWVyeVJvdXRlKCkgcmVxdWVzdHMgbXVzdCBjb250YWluIGFuIEFib3J0Q29udHJvbGxlciBzaWduYWxcIlxuICAgICk7XG5cbiAgICB0cnkge1xuICAgICAgaWYgKGlzTXV0YXRpb25NZXRob2QocmVxdWVzdC5tZXRob2QudG9Mb3dlckNhc2UoKSkpIHtcbiAgICAgICAgbGV0IHJlc3VsdCA9IGF3YWl0IHN1Ym1pdChcbiAgICAgICAgICByZXF1ZXN0LFxuICAgICAgICAgIG1hdGNoZXMsXG4gICAgICAgICAgcm91dGVNYXRjaCB8fCBnZXRUYXJnZXRNYXRjaChtYXRjaGVzLCBsb2NhdGlvbiksXG4gICAgICAgICAgcmVxdWVzdENvbnRleHQsXG4gICAgICAgICAgcm91dGVNYXRjaCAhPSBudWxsXG4gICAgICAgICk7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9XG5cbiAgICAgIGxldCByZXN1bHQgPSBhd2FpdCBsb2FkUm91dGVEYXRhKFxuICAgICAgICByZXF1ZXN0LFxuICAgICAgICBtYXRjaGVzLFxuICAgICAgICByZXF1ZXN0Q29udGV4dCxcbiAgICAgICAgcm91dGVNYXRjaFxuICAgICAgKTtcbiAgICAgIHJldHVybiBpc1Jlc3BvbnNlKHJlc3VsdClcbiAgICAgICAgPyByZXN1bHRcbiAgICAgICAgOiB7XG4gICAgICAgICAgICAuLi5yZXN1bHQsXG4gICAgICAgICAgICBhY3Rpb25EYXRhOiBudWxsLFxuICAgICAgICAgICAgYWN0aW9uSGVhZGVyczoge30sXG4gICAgICAgICAgfTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAvLyBJZiB0aGUgdXNlciB0aHJldy9yZXR1cm5lZCBhIFJlc3BvbnNlIGluIGNhbGxMb2FkZXJPckFjdGlvbiwgd2UgdGhyb3dcbiAgICAgIC8vIGl0IHRvIGJhaWwgb3V0IGFuZCB0aGVuIHJldHVybiBvciB0aHJvdyBoZXJlIGJhc2VkIG9uIHdoZXRoZXIgdGhlIHVzZXJcbiAgICAgIC8vIHJldHVybmVkIG9yIHRocmV3XG4gICAgICBpZiAoaXNRdWVyeVJvdXRlUmVzcG9uc2UoZSkpIHtcbiAgICAgICAgaWYgKGUudHlwZSA9PT0gUmVzdWx0VHlwZS5lcnJvcikge1xuICAgICAgICAgIHRocm93IGUucmVzcG9uc2U7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGUucmVzcG9uc2U7XG4gICAgICB9XG4gICAgICAvLyBSZWRpcmVjdHMgYXJlIGFsd2F5cyByZXR1cm5lZCBzaW5jZSB0aGV5IGRvbid0IHByb3BhZ2F0ZSB0byBjYXRjaFxuICAgICAgLy8gYm91bmRhcmllc1xuICAgICAgaWYgKGlzUmVkaXJlY3RSZXNwb25zZShlKSkge1xuICAgICAgICByZXR1cm4gZTtcbiAgICAgIH1cbiAgICAgIHRocm93IGU7XG4gICAgfVxuICB9XG5cbiAgYXN5bmMgZnVuY3Rpb24gc3VibWl0KFxuICAgIHJlcXVlc3Q6IFJlcXVlc3QsXG4gICAgbWF0Y2hlczogQWdub3N0aWNEYXRhUm91dGVNYXRjaFtdLFxuICAgIGFjdGlvbk1hdGNoOiBBZ25vc3RpY0RhdGFSb3V0ZU1hdGNoLFxuICAgIHJlcXVlc3RDb250ZXh0OiB1bmtub3duLFxuICAgIGlzUm91dGVSZXF1ZXN0OiBib29sZWFuXG4gICk6IFByb21pc2U8T21pdDxTdGF0aWNIYW5kbGVyQ29udGV4dCwgXCJsb2NhdGlvblwiIHwgXCJiYXNlbmFtZVwiPiB8IFJlc3BvbnNlPiB7XG4gICAgbGV0IHJlc3VsdDogRGF0YVJlc3VsdDtcblxuICAgIGlmICghYWN0aW9uTWF0Y2gucm91dGUuYWN0aW9uICYmICFhY3Rpb25NYXRjaC5yb3V0ZS5sYXp5KSB7XG4gICAgICBsZXQgZXJyb3IgPSBnZXRJbnRlcm5hbFJvdXRlckVycm9yKDQwNSwge1xuICAgICAgICBtZXRob2Q6IHJlcXVlc3QubWV0aG9kLFxuICAgICAgICBwYXRobmFtZTogbmV3IFVSTChyZXF1ZXN0LnVybCkucGF0aG5hbWUsXG4gICAgICAgIHJvdXRlSWQ6IGFjdGlvbk1hdGNoLnJvdXRlLmlkLFxuICAgICAgfSk7XG4gICAgICBpZiAoaXNSb3V0ZVJlcXVlc3QpIHtcbiAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICB9XG4gICAgICByZXN1bHQgPSB7XG4gICAgICAgIHR5cGU6IFJlc3VsdFR5cGUuZXJyb3IsXG4gICAgICAgIGVycm9yLFxuICAgICAgfTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVzdWx0ID0gYXdhaXQgY2FsbExvYWRlck9yQWN0aW9uKFxuICAgICAgICBcImFjdGlvblwiLFxuICAgICAgICByZXF1ZXN0LFxuICAgICAgICBhY3Rpb25NYXRjaCxcbiAgICAgICAgbWF0Y2hlcyxcbiAgICAgICAgbWFuaWZlc3QsXG4gICAgICAgIG1hcFJvdXRlUHJvcGVydGllcyxcbiAgICAgICAgYmFzZW5hbWUsXG4gICAgICAgIGZ1dHVyZS52N19yZWxhdGl2ZVNwbGF0UGF0aCxcbiAgICAgICAgeyBpc1N0YXRpY1JlcXVlc3Q6IHRydWUsIGlzUm91dGVSZXF1ZXN0LCByZXF1ZXN0Q29udGV4dCB9XG4gICAgICApO1xuXG4gICAgICBpZiAocmVxdWVzdC5zaWduYWwuYWJvcnRlZCkge1xuICAgICAgICB0aHJvd1N0YXRpY0hhbmRsZXJBYm9ydGVkRXJyb3IocmVxdWVzdCwgaXNSb3V0ZVJlcXVlc3QsIGZ1dHVyZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGlzUmVkaXJlY3RSZXN1bHQocmVzdWx0KSkge1xuICAgICAgLy8gVWhoaGggLSB0aGlzIHNob3VsZCBuZXZlciBoYXBwZW4sIHdlIHNob3VsZCBhbHdheXMgdGhyb3cgdGhlc2UgZnJvbVxuICAgICAgLy8gY2FsbExvYWRlck9yQWN0aW9uLCBidXQgdGhlIHR5cGUgbmFycm93aW5nIGhlcmUga2VlcHMgVFMgaGFwcHkgYW5kIHdlXG4gICAgICAvLyBjYW4gZ2V0IGJhY2sgb24gdGhlIFwidGhyb3cgYWxsIHJlZGlyZWN0IHJlc3BvbnNlc1wiIHRyYWluIGhlcmUgc2hvdWxkXG4gICAgICAvLyB0aGlzIGV2ZXIgaGFwcGVuIDovXG4gICAgICB0aHJvdyBuZXcgUmVzcG9uc2UobnVsbCwge1xuICAgICAgICBzdGF0dXM6IHJlc3VsdC5zdGF0dXMsXG4gICAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgICBMb2NhdGlvbjogcmVzdWx0LmxvY2F0aW9uLFxuICAgICAgICB9LFxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWYgKGlzRGVmZXJyZWRSZXN1bHQocmVzdWx0KSkge1xuICAgICAgbGV0IGVycm9yID0gZ2V0SW50ZXJuYWxSb3V0ZXJFcnJvcig0MDAsIHsgdHlwZTogXCJkZWZlci1hY3Rpb25cIiB9KTtcbiAgICAgIGlmIChpc1JvdXRlUmVxdWVzdCkge1xuICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgIH1cbiAgICAgIHJlc3VsdCA9IHtcbiAgICAgICAgdHlwZTogUmVzdWx0VHlwZS5lcnJvcixcbiAgICAgICAgZXJyb3IsXG4gICAgICB9O1xuICAgIH1cblxuICAgIGlmIChpc1JvdXRlUmVxdWVzdCkge1xuICAgICAgLy8gTm90ZTogVGhpcyBzaG91bGQgb25seSBiZSBub24tUmVzcG9uc2UgdmFsdWVzIGlmIHdlIGdldCBoZXJlLCBzaW5jZVxuICAgICAgLy8gaXNSb3V0ZVJlcXVlc3Qgc2hvdWxkIHRocm93IGFueSBSZXNwb25zZSByZWNlaXZlZCBpbiBjYWxsTG9hZGVyT3JBY3Rpb25cbiAgICAgIGlmIChpc0Vycm9yUmVzdWx0KHJlc3VsdCkpIHtcbiAgICAgICAgdGhyb3cgcmVzdWx0LmVycm9yO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4ge1xuICAgICAgICBtYXRjaGVzOiBbYWN0aW9uTWF0Y2hdLFxuICAgICAgICBsb2FkZXJEYXRhOiB7fSxcbiAgICAgICAgYWN0aW9uRGF0YTogeyBbYWN0aW9uTWF0Y2gucm91dGUuaWRdOiByZXN1bHQuZGF0YSB9LFxuICAgICAgICBlcnJvcnM6IG51bGwsXG4gICAgICAgIC8vIE5vdGU6IHN0YXR1c0NvZGUgKyBoZWFkZXJzIGFyZSB1bnVzZWQgaGVyZSBzaW5jZSBxdWVyeVJvdXRlIHdpbGxcbiAgICAgICAgLy8gcmV0dXJuIHRoZSByYXcgUmVzcG9uc2Ugb3IgdmFsdWVcbiAgICAgICAgc3RhdHVzQ29kZTogMjAwLFxuICAgICAgICBsb2FkZXJIZWFkZXJzOiB7fSxcbiAgICAgICAgYWN0aW9uSGVhZGVyczoge30sXG4gICAgICAgIGFjdGl2ZURlZmVycmVkczogbnVsbCxcbiAgICAgIH07XG4gICAgfVxuXG4gICAgaWYgKGlzRXJyb3JSZXN1bHQocmVzdWx0KSkge1xuICAgICAgLy8gU3RvcmUgb2ZmIHRoZSBwZW5kaW5nIGVycm9yIC0gd2UgdXNlIGl0IHRvIGRldGVybWluZSB3aGljaCBsb2FkZXJzXG4gICAgICAvLyB0byBjYWxsIGFuZCB3aWxsIGNvbW1pdCBpdCB3aGVuIHdlIGNvbXBsZXRlIHRoZSBuYXZpZ2F0aW9uXG4gICAgICBsZXQgYm91bmRhcnlNYXRjaCA9IGZpbmROZWFyZXN0Qm91bmRhcnkobWF0Y2hlcywgYWN0aW9uTWF0Y2gucm91dGUuaWQpO1xuICAgICAgbGV0IGNvbnRleHQgPSBhd2FpdCBsb2FkUm91dGVEYXRhKFxuICAgICAgICByZXF1ZXN0LFxuICAgICAgICBtYXRjaGVzLFxuICAgICAgICByZXF1ZXN0Q29udGV4dCxcbiAgICAgICAgdW5kZWZpbmVkLFxuICAgICAgICB7XG4gICAgICAgICAgW2JvdW5kYXJ5TWF0Y2gucm91dGUuaWRdOiByZXN1bHQuZXJyb3IsXG4gICAgICAgIH1cbiAgICAgICk7XG5cbiAgICAgIC8vIGFjdGlvbiBzdGF0dXMgY29kZXMgdGFrZSBwcmVjZWRlbmNlIG92ZXIgbG9hZGVyIHN0YXR1cyBjb2Rlc1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgLi4uY29udGV4dCxcbiAgICAgICAgc3RhdHVzQ29kZTogaXNSb3V0ZUVycm9yUmVzcG9uc2UocmVzdWx0LmVycm9yKVxuICAgICAgICAgID8gcmVzdWx0LmVycm9yLnN0YXR1c1xuICAgICAgICAgIDogNTAwLFxuICAgICAgICBhY3Rpb25EYXRhOiBudWxsLFxuICAgICAgICBhY3Rpb25IZWFkZXJzOiB7XG4gICAgICAgICAgLi4uKHJlc3VsdC5oZWFkZXJzID8geyBbYWN0aW9uTWF0Y2gucm91dGUuaWRdOiByZXN1bHQuaGVhZGVycyB9IDoge30pLFxuICAgICAgICB9LFxuICAgICAgfTtcbiAgICB9XG5cbiAgICAvLyBDcmVhdGUgYSBHRVQgcmVxdWVzdCBmb3IgdGhlIGxvYWRlcnNcbiAgICBsZXQgbG9hZGVyUmVxdWVzdCA9IG5ldyBSZXF1ZXN0KHJlcXVlc3QudXJsLCB7XG4gICAgICBoZWFkZXJzOiByZXF1ZXN0LmhlYWRlcnMsXG4gICAgICByZWRpcmVjdDogcmVxdWVzdC5yZWRpcmVjdCxcbiAgICAgIHNpZ25hbDogcmVxdWVzdC5zaWduYWwsXG4gICAgfSk7XG4gICAgbGV0IGNvbnRleHQgPSBhd2FpdCBsb2FkUm91dGVEYXRhKGxvYWRlclJlcXVlc3QsIG1hdGNoZXMsIHJlcXVlc3RDb250ZXh0KTtcblxuICAgIHJldHVybiB7XG4gICAgICAuLi5jb250ZXh0LFxuICAgICAgLy8gYWN0aW9uIHN0YXR1cyBjb2RlcyB0YWtlIHByZWNlZGVuY2Ugb3ZlciBsb2FkZXIgc3RhdHVzIGNvZGVzXG4gICAgICAuLi4ocmVzdWx0LnN0YXR1c0NvZGUgPyB7IHN0YXR1c0NvZGU6IHJlc3VsdC5zdGF0dXNDb2RlIH0gOiB7fSksXG4gICAgICBhY3Rpb25EYXRhOiB7XG4gICAgICAgIFthY3Rpb25NYXRjaC5yb3V0ZS5pZF06IHJlc3VsdC5kYXRhLFxuICAgICAgfSxcbiAgICAgIGFjdGlvbkhlYWRlcnM6IHtcbiAgICAgICAgLi4uKHJlc3VsdC5oZWFkZXJzID8geyBbYWN0aW9uTWF0Y2gucm91dGUuaWRdOiByZXN1bHQuaGVhZGVycyB9IDoge30pLFxuICAgICAgfSxcbiAgICB9O1xuICB9XG5cbiAgYXN5bmMgZnVuY3Rpb24gbG9hZFJvdXRlRGF0YShcbiAgICByZXF1ZXN0OiBSZXF1ZXN0LFxuICAgIG1hdGNoZXM6IEFnbm9zdGljRGF0YVJvdXRlTWF0Y2hbXSxcbiAgICByZXF1ZXN0Q29udGV4dDogdW5rbm93bixcbiAgICByb3V0ZU1hdGNoPzogQWdub3N0aWNEYXRhUm91dGVNYXRjaCxcbiAgICBwZW5kaW5nQWN0aW9uRXJyb3I/OiBSb3V0ZURhdGFcbiAgKTogUHJvbWlzZTxcbiAgICB8IE9taXQ8XG4gICAgICAgIFN0YXRpY0hhbmRsZXJDb250ZXh0LFxuICAgICAgICBcImxvY2F0aW9uXCIgfCBcImJhc2VuYW1lXCIgfCBcImFjdGlvbkRhdGFcIiB8IFwiYWN0aW9uSGVhZGVyc1wiXG4gICAgICA+XG4gICAgfCBSZXNwb25zZVxuICA+IHtcbiAgICBsZXQgaXNSb3V0ZVJlcXVlc3QgPSByb3V0ZU1hdGNoICE9IG51bGw7XG5cbiAgICAvLyBTaG9ydCBjaXJjdWl0IGlmIHdlIGhhdmUgbm8gbG9hZGVycyB0byBydW4gKHF1ZXJ5Um91dGUoKSlcbiAgICBpZiAoXG4gICAgICBpc1JvdXRlUmVxdWVzdCAmJlxuICAgICAgIXJvdXRlTWF0Y2g/LnJvdXRlLmxvYWRlciAmJlxuICAgICAgIXJvdXRlTWF0Y2g/LnJvdXRlLmxhenlcbiAgICApIHtcbiAgICAgIHRocm93IGdldEludGVybmFsUm91dGVyRXJyb3IoNDAwLCB7XG4gICAgICAgIG1ldGhvZDogcmVxdWVzdC5tZXRob2QsXG4gICAgICAgIHBhdGhuYW1lOiBuZXcgVVJMKHJlcXVlc3QudXJsKS5wYXRobmFtZSxcbiAgICAgICAgcm91dGVJZDogcm91dGVNYXRjaD8ucm91dGUuaWQsXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBsZXQgcmVxdWVzdE1hdGNoZXMgPSByb3V0ZU1hdGNoXG4gICAgICA/IFtyb3V0ZU1hdGNoXVxuICAgICAgOiBnZXRMb2FkZXJNYXRjaGVzVW50aWxCb3VuZGFyeShcbiAgICAgICAgICBtYXRjaGVzLFxuICAgICAgICAgIE9iamVjdC5rZXlzKHBlbmRpbmdBY3Rpb25FcnJvciB8fCB7fSlbMF1cbiAgICAgICAgKTtcbiAgICBsZXQgbWF0Y2hlc1RvTG9hZCA9IHJlcXVlc3RNYXRjaGVzLmZpbHRlcihcbiAgICAgIChtKSA9PiBtLnJvdXRlLmxvYWRlciB8fCBtLnJvdXRlLmxhenlcbiAgICApO1xuXG4gICAgLy8gU2hvcnQgY2lyY3VpdCBpZiB3ZSBoYXZlIG5vIGxvYWRlcnMgdG8gcnVuIChxdWVyeSgpKVxuICAgIGlmIChtYXRjaGVzVG9Mb2FkLmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgbWF0Y2hlcyxcbiAgICAgICAgLy8gQWRkIGEgbnVsbCBmb3IgYWxsIG1hdGNoZWQgcm91dGVzIGZvciBwcm9wZXIgcmV2YWxpZGF0aW9uIG9uIHRoZSBjbGllbnRcbiAgICAgICAgbG9hZGVyRGF0YTogbWF0Y2hlcy5yZWR1Y2UoXG4gICAgICAgICAgKGFjYywgbSkgPT4gT2JqZWN0LmFzc2lnbihhY2MsIHsgW20ucm91dGUuaWRdOiBudWxsIH0pLFxuICAgICAgICAgIHt9XG4gICAgICAgICksXG4gICAgICAgIGVycm9yczogcGVuZGluZ0FjdGlvbkVycm9yIHx8IG51bGwsXG4gICAgICAgIHN0YXR1c0NvZGU6IDIwMCxcbiAgICAgICAgbG9hZGVySGVhZGVyczoge30sXG4gICAgICAgIGFjdGl2ZURlZmVycmVkczogbnVsbCxcbiAgICAgIH07XG4gICAgfVxuXG4gICAgbGV0IHJlc3VsdHMgPSBhd2FpdCBQcm9taXNlLmFsbChbXG4gICAgICAuLi5tYXRjaGVzVG9Mb2FkLm1hcCgobWF0Y2gpID0+XG4gICAgICAgIGNhbGxMb2FkZXJPckFjdGlvbihcbiAgICAgICAgICBcImxvYWRlclwiLFxuICAgICAgICAgIHJlcXVlc3QsXG4gICAgICAgICAgbWF0Y2gsXG4gICAgICAgICAgbWF0Y2hlcyxcbiAgICAgICAgICBtYW5pZmVzdCxcbiAgICAgICAgICBtYXBSb3V0ZVByb3BlcnRpZXMsXG4gICAgICAgICAgYmFzZW5hbWUsXG4gICAgICAgICAgZnV0dXJlLnY3X3JlbGF0aXZlU3BsYXRQYXRoLFxuICAgICAgICAgIHsgaXNTdGF0aWNSZXF1ZXN0OiB0cnVlLCBpc1JvdXRlUmVxdWVzdCwgcmVxdWVzdENvbnRleHQgfVxuICAgICAgICApXG4gICAgICApLFxuICAgIF0pO1xuXG4gICAgaWYgKHJlcXVlc3Quc2lnbmFsLmFib3J0ZWQpIHtcbiAgICAgIHRocm93U3RhdGljSGFuZGxlckFib3J0ZWRFcnJvcihyZXF1ZXN0LCBpc1JvdXRlUmVxdWVzdCwgZnV0dXJlKTtcbiAgICB9XG5cbiAgICAvLyBQcm9jZXNzIGFuZCBjb21taXQgb3V0cHV0IGZyb20gbG9hZGVyc1xuICAgIGxldCBhY3RpdmVEZWZlcnJlZHMgPSBuZXcgTWFwPHN0cmluZywgRGVmZXJyZWREYXRhPigpO1xuICAgIGxldCBjb250ZXh0ID0gcHJvY2Vzc1JvdXRlTG9hZGVyRGF0YShcbiAgICAgIG1hdGNoZXMsXG4gICAgICBtYXRjaGVzVG9Mb2FkLFxuICAgICAgcmVzdWx0cyxcbiAgICAgIHBlbmRpbmdBY3Rpb25FcnJvcixcbiAgICAgIGFjdGl2ZURlZmVycmVkc1xuICAgICk7XG5cbiAgICAvLyBBZGQgYSBudWxsIGZvciBhbnkgbm9uLWxvYWRlciBtYXRjaGVzIGZvciBwcm9wZXIgcmV2YWxpZGF0aW9uIG9uIHRoZSBjbGllbnRcbiAgICBsZXQgZXhlY3V0ZWRMb2FkZXJzID0gbmV3IFNldDxzdHJpbmc+KFxuICAgICAgbWF0Y2hlc1RvTG9hZC5tYXAoKG1hdGNoKSA9PiBtYXRjaC5yb3V0ZS5pZClcbiAgICApO1xuICAgIG1hdGNoZXMuZm9yRWFjaCgobWF0Y2gpID0+IHtcbiAgICAgIGlmICghZXhlY3V0ZWRMb2FkZXJzLmhhcyhtYXRjaC5yb3V0ZS5pZCkpIHtcbiAgICAgICAgY29udGV4dC5sb2FkZXJEYXRhW21hdGNoLnJvdXRlLmlkXSA9IG51bGw7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4ge1xuICAgICAgLi4uY29udGV4dCxcbiAgICAgIG1hdGNoZXMsXG4gICAgICBhY3RpdmVEZWZlcnJlZHM6XG4gICAgICAgIGFjdGl2ZURlZmVycmVkcy5zaXplID4gMFxuICAgICAgICAgID8gT2JqZWN0LmZyb21FbnRyaWVzKGFjdGl2ZURlZmVycmVkcy5lbnRyaWVzKCkpXG4gICAgICAgICAgOiBudWxsLFxuICAgIH07XG4gIH1cblxuICByZXR1cm4ge1xuICAgIGRhdGFSb3V0ZXMsXG4gICAgcXVlcnksXG4gICAgcXVlcnlSb3V0ZSxcbiAgfTtcbn1cblxuLy8jZW5kcmVnaW9uXG5cbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyNyZWdpb24gSGVscGVyc1xuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuLyoqXG4gKiBHaXZlbiBhbiBleGlzdGluZyBTdGF0aWNIYW5kbGVyQ29udGV4dCBhbmQgYW4gZXJyb3IgdGhyb3duIGF0IHJlbmRlciB0aW1lLFxuICogcHJvdmlkZSBhbiB1cGRhdGVkIFN0YXRpY0hhbmRsZXJDb250ZXh0IHN1aXRhYmxlIGZvciBhIHNlY29uZCBTU1IgcmVuZGVyXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRTdGF0aWNDb250ZXh0RnJvbUVycm9yKFxuICByb3V0ZXM6IEFnbm9zdGljRGF0YVJvdXRlT2JqZWN0W10sXG4gIGNvbnRleHQ6IFN0YXRpY0hhbmRsZXJDb250ZXh0LFxuICBlcnJvcjogYW55XG4pIHtcbiAgbGV0IG5ld0NvbnRleHQ6IFN0YXRpY0hhbmRsZXJDb250ZXh0ID0ge1xuICAgIC4uLmNvbnRleHQsXG4gICAgc3RhdHVzQ29kZTogaXNSb3V0ZUVycm9yUmVzcG9uc2UoZXJyb3IpID8gZXJyb3Iuc3RhdHVzIDogNTAwLFxuICAgIGVycm9yczoge1xuICAgICAgW2NvbnRleHQuX2RlZXBlc3RSZW5kZXJlZEJvdW5kYXJ5SWQgfHwgcm91dGVzWzBdLmlkXTogZXJyb3IsXG4gICAgfSxcbiAgfTtcbiAgcmV0dXJuIG5ld0NvbnRleHQ7XG59XG5cbmZ1bmN0aW9uIHRocm93U3RhdGljSGFuZGxlckFib3J0ZWRFcnJvcihcbiAgcmVxdWVzdDogUmVxdWVzdCxcbiAgaXNSb3V0ZVJlcXVlc3Q6IGJvb2xlYW4sXG4gIGZ1dHVyZTogU3RhdGljSGFuZGxlckZ1dHVyZUNvbmZpZ1xuKSB7XG4gIGlmIChmdXR1cmUudjdfdGhyb3dBYm9ydFJlYXNvbiAmJiByZXF1ZXN0LnNpZ25hbC5yZWFzb24gIT09IHVuZGVmaW5lZCkge1xuICAgIHRocm93IHJlcXVlc3Quc2lnbmFsLnJlYXNvbjtcbiAgfVxuXG4gIGxldCBtZXRob2QgPSBpc1JvdXRlUmVxdWVzdCA/IFwicXVlcnlSb3V0ZVwiIDogXCJxdWVyeVwiO1xuICB0aHJvdyBuZXcgRXJyb3IoYCR7bWV0aG9kfSgpIGNhbGwgYWJvcnRlZDogJHtyZXF1ZXN0Lm1ldGhvZH0gJHtyZXF1ZXN0LnVybH1gKTtcbn1cblxuZnVuY3Rpb24gaXNTdWJtaXNzaW9uTmF2aWdhdGlvbihcbiAgb3B0czogQmFzZU5hdmlnYXRlT3JGZXRjaE9wdGlvbnNcbik6IG9wdHMgaXMgU3VibWlzc2lvbk5hdmlnYXRlT3B0aW9ucyB7XG4gIHJldHVybiAoXG4gICAgb3B0cyAhPSBudWxsICYmXG4gICAgKChcImZvcm1EYXRhXCIgaW4gb3B0cyAmJiBvcHRzLmZvcm1EYXRhICE9IG51bGwpIHx8XG4gICAgICAoXCJib2R5XCIgaW4gb3B0cyAmJiBvcHRzLmJvZHkgIT09IHVuZGVmaW5lZCkpXG4gICk7XG59XG5cbmZ1bmN0aW9uIG5vcm1hbGl6ZVRvKFxuICBsb2NhdGlvbjogUGF0aCxcbiAgbWF0Y2hlczogQWdub3N0aWNEYXRhUm91dGVNYXRjaFtdLFxuICBiYXNlbmFtZTogc3RyaW5nLFxuICBwcmVwZW5kQmFzZW5hbWU6IGJvb2xlYW4sXG4gIHRvOiBUbyB8IG51bGwsXG4gIHY3X3JlbGF0aXZlU3BsYXRQYXRoOiBib29sZWFuLFxuICBmcm9tUm91dGVJZD86IHN0cmluZyxcbiAgcmVsYXRpdmU/OiBSZWxhdGl2ZVJvdXRpbmdUeXBlXG4pIHtcbiAgbGV0IGNvbnRleHR1YWxNYXRjaGVzOiBBZ25vc3RpY0RhdGFSb3V0ZU1hdGNoW107XG4gIGxldCBhY3RpdmVSb3V0ZU1hdGNoOiBBZ25vc3RpY0RhdGFSb3V0ZU1hdGNoIHwgdW5kZWZpbmVkO1xuICBpZiAoZnJvbVJvdXRlSWQpIHtcbiAgICAvLyBHcmFiIG1hdGNoZXMgdXAgdG8gdGhlIGNhbGxpbmcgcm91dGUgc28gb3VyIHJvdXRlLXJlbGF0aXZlIGxvZ2ljIGlzXG4gICAgLy8gcmVsYXRpdmUgdG8gdGhlIGNvcnJlY3Qgc291cmNlIHJvdXRlXG4gICAgY29udGV4dHVhbE1hdGNoZXMgPSBbXTtcbiAgICBmb3IgKGxldCBtYXRjaCBvZiBtYXRjaGVzKSB7XG4gICAgICBjb250ZXh0dWFsTWF0Y2hlcy5wdXNoKG1hdGNoKTtcbiAgICAgIGlmIChtYXRjaC5yb3V0ZS5pZCA9PT0gZnJvbVJvdXRlSWQpIHtcbiAgICAgICAgYWN0aXZlUm91dGVNYXRjaCA9IG1hdGNoO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgY29udGV4dHVhbE1hdGNoZXMgPSBtYXRjaGVzO1xuICAgIGFjdGl2ZVJvdXRlTWF0Y2ggPSBtYXRjaGVzW21hdGNoZXMubGVuZ3RoIC0gMV07XG4gIH1cblxuICAvLyBSZXNvbHZlIHRoZSByZWxhdGl2ZSBwYXRoXG4gIGxldCBwYXRoID0gcmVzb2x2ZVRvKFxuICAgIHRvID8gdG8gOiBcIi5cIixcbiAgICBnZXRSZXNvbHZlVG9NYXRjaGVzKGNvbnRleHR1YWxNYXRjaGVzLCB2N19yZWxhdGl2ZVNwbGF0UGF0aCksXG4gICAgc3RyaXBCYXNlbmFtZShsb2NhdGlvbi5wYXRobmFtZSwgYmFzZW5hbWUpIHx8IGxvY2F0aW9uLnBhdGhuYW1lLFxuICAgIHJlbGF0aXZlID09PSBcInBhdGhcIlxuICApO1xuXG4gIC8vIFdoZW4gYHRvYCBpcyBub3Qgc3BlY2lmaWVkIHdlIGluaGVyaXQgc2VhcmNoL2hhc2ggZnJvbSB0aGUgY3VycmVudFxuICAvLyBsb2NhdGlvbiwgdW5saWtlIHdoZW4gdG89XCIuXCIgYW5kIHdlIGp1c3QgaW5oZXJpdCB0aGUgcGF0aC5cbiAgLy8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9yZW1peC1ydW4vcmVtaXgvaXNzdWVzLzkyN1xuICBpZiAodG8gPT0gbnVsbCkge1xuICAgIHBhdGguc2VhcmNoID0gbG9jYXRpb24uc2VhcmNoO1xuICAgIHBhdGguaGFzaCA9IGxvY2F0aW9uLmhhc2g7XG4gIH1cblxuICAvLyBBZGQgYW4gP2luZGV4IHBhcmFtIGZvciBtYXRjaGVkIGluZGV4IHJvdXRlcyBpZiB3ZSBkb24ndCBhbHJlYWR5IGhhdmUgb25lXG4gIGlmIChcbiAgICAodG8gPT0gbnVsbCB8fCB0byA9PT0gXCJcIiB8fCB0byA9PT0gXCIuXCIpICYmXG4gICAgYWN0aXZlUm91dGVNYXRjaCAmJlxuICAgIGFjdGl2ZVJvdXRlTWF0Y2gucm91dGUuaW5kZXggJiZcbiAgICAhaGFzTmFrZWRJbmRleFF1ZXJ5KHBhdGguc2VhcmNoKVxuICApIHtcbiAgICBwYXRoLnNlYXJjaCA9IHBhdGguc2VhcmNoXG4gICAgICA/IHBhdGguc2VhcmNoLnJlcGxhY2UoL15cXD8vLCBcIj9pbmRleCZcIilcbiAgICAgIDogXCI/aW5kZXhcIjtcbiAgfVxuXG4gIC8vIElmIHdlJ3JlIG9wZXJhdGluZyB3aXRoaW4gYSBiYXNlbmFtZSwgcHJlcGVuZCBpdCB0byB0aGUgcGF0aG5hbWUuICBJZlxuICAvLyB0aGlzIGlzIGEgcm9vdCBuYXZpZ2F0aW9uLCB0aGVuIGp1c3QgdXNlIHRoZSByYXcgYmFzZW5hbWUgd2hpY2ggYWxsb3dzXG4gIC8vIHRoZSBiYXNlbmFtZSB0byBoYXZlIGZ1bGwgY29udHJvbCBvdmVyIHRoZSBwcmVzZW5jZSBvZiBhIHRyYWlsaW5nIHNsYXNoXG4gIC8vIG9uIHJvb3QgYWN0aW9uc1xuICBpZiAocHJlcGVuZEJhc2VuYW1lICYmIGJhc2VuYW1lICE9PSBcIi9cIikge1xuICAgIHBhdGgucGF0aG5hbWUgPVxuICAgICAgcGF0aC5wYXRobmFtZSA9PT0gXCIvXCIgPyBiYXNlbmFtZSA6IGpvaW5QYXRocyhbYmFzZW5hbWUsIHBhdGgucGF0aG5hbWVdKTtcbiAgfVxuXG4gIHJldHVybiBjcmVhdGVQYXRoKHBhdGgpO1xufVxuXG4vLyBOb3JtYWxpemUgbmF2aWdhdGlvbiBvcHRpb25zIGJ5IGNvbnZlcnRpbmcgZm9ybU1ldGhvZD1HRVQgZm9ybURhdGEgb2JqZWN0cyB0b1xuLy8gVVJMU2VhcmNoUGFyYW1zIHNvIHRoZXkgYmVoYXZlIGlkZW50aWNhbGx5IHRvIGxpbmtzIHdpdGggcXVlcnkgcGFyYW1zXG5mdW5jdGlvbiBub3JtYWxpemVOYXZpZ2F0ZU9wdGlvbnMoXG4gIG5vcm1hbGl6ZUZvcm1NZXRob2Q6IGJvb2xlYW4sXG4gIGlzRmV0Y2hlcjogYm9vbGVhbixcbiAgcGF0aDogc3RyaW5nLFxuICBvcHRzPzogQmFzZU5hdmlnYXRlT3JGZXRjaE9wdGlvbnNcbik6IHtcbiAgcGF0aDogc3RyaW5nO1xuICBzdWJtaXNzaW9uPzogU3VibWlzc2lvbjtcbiAgZXJyb3I/OiBFcnJvclJlc3BvbnNlSW1wbDtcbn0ge1xuICAvLyBSZXR1cm4gbG9jYXRpb24gdmVyYmF0aW0gb24gbm9uLXN1Ym1pc3Npb24gbmF2aWdhdGlvbnNcbiAgaWYgKCFvcHRzIHx8ICFpc1N1Ym1pc3Npb25OYXZpZ2F0aW9uKG9wdHMpKSB7XG4gICAgcmV0dXJuIHsgcGF0aCB9O1xuICB9XG5cbiAgaWYgKG9wdHMuZm9ybU1ldGhvZCAmJiAhaXNWYWxpZE1ldGhvZChvcHRzLmZvcm1NZXRob2QpKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHBhdGgsXG4gICAgICBlcnJvcjogZ2V0SW50ZXJuYWxSb3V0ZXJFcnJvcig0MDUsIHsgbWV0aG9kOiBvcHRzLmZvcm1NZXRob2QgfSksXG4gICAgfTtcbiAgfVxuXG4gIGxldCBnZXRJbnZhbGlkQm9keUVycm9yID0gKCkgPT4gKHtcbiAgICBwYXRoLFxuICAgIGVycm9yOiBnZXRJbnRlcm5hbFJvdXRlckVycm9yKDQwMCwgeyB0eXBlOiBcImludmFsaWQtYm9keVwiIH0pLFxuICB9KTtcblxuICAvLyBDcmVhdGUgYSBTdWJtaXNzaW9uIG9uIG5vbi1HRVQgbmF2aWdhdGlvbnNcbiAgbGV0IHJhd0Zvcm1NZXRob2QgPSBvcHRzLmZvcm1NZXRob2QgfHwgXCJnZXRcIjtcbiAgbGV0IGZvcm1NZXRob2QgPSBub3JtYWxpemVGb3JtTWV0aG9kXG4gICAgPyAocmF3Rm9ybU1ldGhvZC50b1VwcGVyQ2FzZSgpIGFzIFY3X0Zvcm1NZXRob2QpXG4gICAgOiAocmF3Rm9ybU1ldGhvZC50b0xvd2VyQ2FzZSgpIGFzIEZvcm1NZXRob2QpO1xuICBsZXQgZm9ybUFjdGlvbiA9IHN0cmlwSGFzaEZyb21QYXRoKHBhdGgpO1xuXG4gIGlmIChvcHRzLmJvZHkgIT09IHVuZGVmaW5lZCkge1xuICAgIGlmIChvcHRzLmZvcm1FbmNUeXBlID09PSBcInRleHQvcGxhaW5cIikge1xuICAgICAgLy8gdGV4dCBvbmx5IHN1cHBvcnQgUE9TVC9QVVQvUEFUQ0gvREVMRVRFIHN1Ym1pc3Npb25zXG4gICAgICBpZiAoIWlzTXV0YXRpb25NZXRob2QoZm9ybU1ldGhvZCkpIHtcbiAgICAgICAgcmV0dXJuIGdldEludmFsaWRCb2R5RXJyb3IoKTtcbiAgICAgIH1cblxuICAgICAgbGV0IHRleHQgPVxuICAgICAgICB0eXBlb2Ygb3B0cy5ib2R5ID09PSBcInN0cmluZ1wiXG4gICAgICAgICAgPyBvcHRzLmJvZHlcbiAgICAgICAgICA6IG9wdHMuYm9keSBpbnN0YW5jZW9mIEZvcm1EYXRhIHx8XG4gICAgICAgICAgICBvcHRzLmJvZHkgaW5zdGFuY2VvZiBVUkxTZWFyY2hQYXJhbXNcbiAgICAgICAgICA/IC8vIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL2Zvcm0tY29udHJvbC1pbmZyYXN0cnVjdHVyZS5odG1sI3BsYWluLXRleHQtZm9ybS1kYXRhXG4gICAgICAgICAgICBBcnJheS5mcm9tKG9wdHMuYm9keS5lbnRyaWVzKCkpLnJlZHVjZShcbiAgICAgICAgICAgICAgKGFjYywgW25hbWUsIHZhbHVlXSkgPT4gYCR7YWNjfSR7bmFtZX09JHt2YWx1ZX1cXG5gLFxuICAgICAgICAgICAgICBcIlwiXG4gICAgICAgICAgICApXG4gICAgICAgICAgOiBTdHJpbmcob3B0cy5ib2R5KTtcblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgcGF0aCxcbiAgICAgICAgc3VibWlzc2lvbjoge1xuICAgICAgICAgIGZvcm1NZXRob2QsXG4gICAgICAgICAgZm9ybUFjdGlvbixcbiAgICAgICAgICBmb3JtRW5jVHlwZTogb3B0cy5mb3JtRW5jVHlwZSxcbiAgICAgICAgICBmb3JtRGF0YTogdW5kZWZpbmVkLFxuICAgICAgICAgIGpzb246IHVuZGVmaW5lZCxcbiAgICAgICAgICB0ZXh0LFxuICAgICAgICB9LFxuICAgICAgfTtcbiAgICB9IGVsc2UgaWYgKG9wdHMuZm9ybUVuY1R5cGUgPT09IFwiYXBwbGljYXRpb24vanNvblwiKSB7XG4gICAgICAvLyBqc29uIG9ubHkgc3VwcG9ydHMgUE9TVC9QVVQvUEFUQ0gvREVMRVRFIHN1Ym1pc3Npb25zXG4gICAgICBpZiAoIWlzTXV0YXRpb25NZXRob2QoZm9ybU1ldGhvZCkpIHtcbiAgICAgICAgcmV0dXJuIGdldEludmFsaWRCb2R5RXJyb3IoKTtcbiAgICAgIH1cblxuICAgICAgdHJ5IHtcbiAgICAgICAgbGV0IGpzb24gPVxuICAgICAgICAgIHR5cGVvZiBvcHRzLmJvZHkgPT09IFwic3RyaW5nXCIgPyBKU09OLnBhcnNlKG9wdHMuYm9keSkgOiBvcHRzLmJvZHk7XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBwYXRoLFxuICAgICAgICAgIHN1Ym1pc3Npb246IHtcbiAgICAgICAgICAgIGZvcm1NZXRob2QsXG4gICAgICAgICAgICBmb3JtQWN0aW9uLFxuICAgICAgICAgICAgZm9ybUVuY1R5cGU6IG9wdHMuZm9ybUVuY1R5cGUsXG4gICAgICAgICAgICBmb3JtRGF0YTogdW5kZWZpbmVkLFxuICAgICAgICAgICAganNvbixcbiAgICAgICAgICAgIHRleHQ6IHVuZGVmaW5lZCxcbiAgICAgICAgICB9LFxuICAgICAgICB9O1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICByZXR1cm4gZ2V0SW52YWxpZEJvZHlFcnJvcigpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGludmFyaWFudChcbiAgICB0eXBlb2YgRm9ybURhdGEgPT09IFwiZnVuY3Rpb25cIixcbiAgICBcIkZvcm1EYXRhIGlzIG5vdCBhdmFpbGFibGUgaW4gdGhpcyBlbnZpcm9ubWVudFwiXG4gICk7XG5cbiAgbGV0IHNlYXJjaFBhcmFtczogVVJMU2VhcmNoUGFyYW1zO1xuICBsZXQgZm9ybURhdGE6IEZvcm1EYXRhO1xuXG4gIGlmIChvcHRzLmZvcm1EYXRhKSB7XG4gICAgc2VhcmNoUGFyYW1zID0gY29udmVydEZvcm1EYXRhVG9TZWFyY2hQYXJhbXMob3B0cy5mb3JtRGF0YSk7XG4gICAgZm9ybURhdGEgPSBvcHRzLmZvcm1EYXRhO1xuICB9IGVsc2UgaWYgKG9wdHMuYm9keSBpbnN0YW5jZW9mIEZvcm1EYXRhKSB7XG4gICAgc2VhcmNoUGFyYW1zID0gY29udmVydEZvcm1EYXRhVG9TZWFyY2hQYXJhbXMob3B0cy5ib2R5KTtcbiAgICBmb3JtRGF0YSA9IG9wdHMuYm9keTtcbiAgfSBlbHNlIGlmIChvcHRzLmJvZHkgaW5zdGFuY2VvZiBVUkxTZWFyY2hQYXJhbXMpIHtcbiAgICBzZWFyY2hQYXJhbXMgPSBvcHRzLmJvZHk7XG4gICAgZm9ybURhdGEgPSBjb252ZXJ0U2VhcmNoUGFyYW1zVG9Gb3JtRGF0YShzZWFyY2hQYXJhbXMpO1xuICB9IGVsc2UgaWYgKG9wdHMuYm9keSA9PSBudWxsKSB7XG4gICAgc2VhcmNoUGFyYW1zID0gbmV3IFVSTFNlYXJjaFBhcmFtcygpO1xuICAgIGZvcm1EYXRhID0gbmV3IEZvcm1EYXRhKCk7XG4gIH0gZWxzZSB7XG4gICAgdHJ5IHtcbiAgICAgIHNlYXJjaFBhcmFtcyA9IG5ldyBVUkxTZWFyY2hQYXJhbXMob3B0cy5ib2R5KTtcbiAgICAgIGZvcm1EYXRhID0gY29udmVydFNlYXJjaFBhcmFtc1RvRm9ybURhdGEoc2VhcmNoUGFyYW1zKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICByZXR1cm4gZ2V0SW52YWxpZEJvZHlFcnJvcigpO1xuICAgIH1cbiAgfVxuXG4gIGxldCBzdWJtaXNzaW9uOiBTdWJtaXNzaW9uID0ge1xuICAgIGZvcm1NZXRob2QsXG4gICAgZm9ybUFjdGlvbixcbiAgICBmb3JtRW5jVHlwZTpcbiAgICAgIChvcHRzICYmIG9wdHMuZm9ybUVuY1R5cGUpIHx8IFwiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkXCIsXG4gICAgZm9ybURhdGEsXG4gICAganNvbjogdW5kZWZpbmVkLFxuICAgIHRleHQ6IHVuZGVmaW5lZCxcbiAgfTtcblxuICBpZiAoaXNNdXRhdGlvbk1ldGhvZChzdWJtaXNzaW9uLmZvcm1NZXRob2QpKSB7XG4gICAgcmV0dXJuIHsgcGF0aCwgc3VibWlzc2lvbiB9O1xuICB9XG5cbiAgLy8gRmxhdHRlbiBzdWJtaXNzaW9uIG9udG8gVVJMU2VhcmNoUGFyYW1zIGZvciBHRVQgc3VibWlzc2lvbnNcbiAgbGV0IHBhcnNlZFBhdGggPSBwYXJzZVBhdGgocGF0aCk7XG4gIC8vIE9uIEdFVCBuYXZpZ2F0aW9uIHN1Ym1pc3Npb25zIHdlIGNhbiBkcm9wIHRoZSA/aW5kZXggcGFyYW0gZnJvbSB0aGVcbiAgLy8gcmVzdWx0aW5nIGxvY2F0aW9uIHNpbmNlIGFsbCBsb2FkZXJzIHdpbGwgcnVuLiAgQnV0IGZldGNoZXIgR0VUIHN1Ym1pc3Npb25zXG4gIC8vIG9ubHkgcnVuIGEgc2luZ2xlIGxvYWRlciBzbyB3ZSBuZWVkIHRvIHByZXNlcnZlIGFueSBpbmNvbWluZyA/aW5kZXggcGFyYW1zXG4gIGlmIChpc0ZldGNoZXIgJiYgcGFyc2VkUGF0aC5zZWFyY2ggJiYgaGFzTmFrZWRJbmRleFF1ZXJ5KHBhcnNlZFBhdGguc2VhcmNoKSkge1xuICAgIHNlYXJjaFBhcmFtcy5hcHBlbmQoXCJpbmRleFwiLCBcIlwiKTtcbiAgfVxuICBwYXJzZWRQYXRoLnNlYXJjaCA9IGA/JHtzZWFyY2hQYXJhbXN9YDtcblxuICByZXR1cm4geyBwYXRoOiBjcmVhdGVQYXRoKHBhcnNlZFBhdGgpLCBzdWJtaXNzaW9uIH07XG59XG5cbi8vIEZpbHRlciBvdXQgYWxsIHJvdXRlcyBiZWxvdyBhbnkgY2F1Z2h0IGVycm9yIGFzIHRoZXkgYXJlbid0IGdvaW5nIHRvXG4vLyByZW5kZXIgc28gd2UgZG9uJ3QgbmVlZCB0byBsb2FkIHRoZW1cbmZ1bmN0aW9uIGdldExvYWRlck1hdGNoZXNVbnRpbEJvdW5kYXJ5KFxuICBtYXRjaGVzOiBBZ25vc3RpY0RhdGFSb3V0ZU1hdGNoW10sXG4gIGJvdW5kYXJ5SWQ/OiBzdHJpbmdcbikge1xuICBsZXQgYm91bmRhcnlNYXRjaGVzID0gbWF0Y2hlcztcbiAgaWYgKGJvdW5kYXJ5SWQpIHtcbiAgICBsZXQgaW5kZXggPSBtYXRjaGVzLmZpbmRJbmRleCgobSkgPT4gbS5yb3V0ZS5pZCA9PT0gYm91bmRhcnlJZCk7XG4gICAgaWYgKGluZGV4ID49IDApIHtcbiAgICAgIGJvdW5kYXJ5TWF0Y2hlcyA9IG1hdGNoZXMuc2xpY2UoMCwgaW5kZXgpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gYm91bmRhcnlNYXRjaGVzO1xufVxuXG5mdW5jdGlvbiBnZXRNYXRjaGVzVG9Mb2FkKFxuICBoaXN0b3J5OiBIaXN0b3J5LFxuICBzdGF0ZTogUm91dGVyU3RhdGUsXG4gIG1hdGNoZXM6IEFnbm9zdGljRGF0YVJvdXRlTWF0Y2hbXSxcbiAgc3VibWlzc2lvbjogU3VibWlzc2lvbiB8IHVuZGVmaW5lZCxcbiAgbG9jYXRpb246IExvY2F0aW9uLFxuICBpc0luaXRpYWxMb2FkOiBib29sZWFuLFxuICBpc1JldmFsaWRhdGlvblJlcXVpcmVkOiBib29sZWFuLFxuICBjYW5jZWxsZWREZWZlcnJlZFJvdXRlczogc3RyaW5nW10sXG4gIGNhbmNlbGxlZEZldGNoZXJMb2Fkczogc3RyaW5nW10sXG4gIGRlbGV0ZWRGZXRjaGVyczogU2V0PHN0cmluZz4sXG4gIGZldGNoTG9hZE1hdGNoZXM6IE1hcDxzdHJpbmcsIEZldGNoTG9hZE1hdGNoPixcbiAgZmV0Y2hSZWRpcmVjdElkczogU2V0PHN0cmluZz4sXG4gIHJvdXRlc1RvVXNlOiBBZ25vc3RpY0RhdGFSb3V0ZU9iamVjdFtdLFxuICBiYXNlbmFtZTogc3RyaW5nIHwgdW5kZWZpbmVkLFxuICBwZW5kaW5nQWN0aW9uRGF0YT86IFJvdXRlRGF0YSxcbiAgcGVuZGluZ0Vycm9yPzogUm91dGVEYXRhXG4pOiBbQWdub3N0aWNEYXRhUm91dGVNYXRjaFtdLCBSZXZhbGlkYXRpbmdGZXRjaGVyW11dIHtcbiAgbGV0IGFjdGlvblJlc3VsdCA9IHBlbmRpbmdFcnJvclxuICAgID8gT2JqZWN0LnZhbHVlcyhwZW5kaW5nRXJyb3IpWzBdXG4gICAgOiBwZW5kaW5nQWN0aW9uRGF0YVxuICAgID8gT2JqZWN0LnZhbHVlcyhwZW5kaW5nQWN0aW9uRGF0YSlbMF1cbiAgICA6IHVuZGVmaW5lZDtcblxuICBsZXQgY3VycmVudFVybCA9IGhpc3RvcnkuY3JlYXRlVVJMKHN0YXRlLmxvY2F0aW9uKTtcbiAgbGV0IG5leHRVcmwgPSBoaXN0b3J5LmNyZWF0ZVVSTChsb2NhdGlvbik7XG5cbiAgLy8gUGljayBuYXZpZ2F0aW9uIG1hdGNoZXMgdGhhdCBhcmUgbmV0LW5ldyBvciBxdWFsaWZ5IGZvciByZXZhbGlkYXRpb25cbiAgbGV0IGJvdW5kYXJ5SWQgPSBwZW5kaW5nRXJyb3IgPyBPYmplY3Qua2V5cyhwZW5kaW5nRXJyb3IpWzBdIDogdW5kZWZpbmVkO1xuICBsZXQgYm91bmRhcnlNYXRjaGVzID0gZ2V0TG9hZGVyTWF0Y2hlc1VudGlsQm91bmRhcnkobWF0Y2hlcywgYm91bmRhcnlJZCk7XG5cbiAgbGV0IG5hdmlnYXRpb25NYXRjaGVzID0gYm91bmRhcnlNYXRjaGVzLmZpbHRlcigobWF0Y2gsIGluZGV4KSA9PiB7XG4gICAgbGV0IHsgcm91dGUgfSA9IG1hdGNoO1xuICAgIGlmIChyb3V0ZS5sYXp5KSB7XG4gICAgICAvLyBXZSBoYXZlbid0IGxvYWRlZCB0aGlzIHJvdXRlIHlldCBzbyB3ZSBkb24ndCBrbm93IGlmIGl0J3MgZ290IGEgbG9hZGVyIVxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgaWYgKHJvdXRlLmxvYWRlciA9PSBudWxsKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgaWYgKGlzSW5pdGlhbExvYWQpIHtcbiAgICAgIGlmIChyb3V0ZS5sb2FkZXIuaHlkcmF0ZSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiAoXG4gICAgICAgIHN0YXRlLmxvYWRlckRhdGFbcm91dGUuaWRdID09PSB1bmRlZmluZWQgJiZcbiAgICAgICAgLy8gRG9uJ3QgcmUtcnVuIGlmIHRoZSBsb2FkZXIgcmFuIGFuZCB0aHJldyBhbiBlcnJvclxuICAgICAgICAoIXN0YXRlLmVycm9ycyB8fCBzdGF0ZS5lcnJvcnNbcm91dGUuaWRdID09PSB1bmRlZmluZWQpXG4gICAgICApO1xuICAgIH1cblxuICAgIC8vIEFsd2F5cyBjYWxsIHRoZSBsb2FkZXIgb24gbmV3IHJvdXRlIGluc3RhbmNlcyBhbmQgcGVuZGluZyBkZWZlciBjYW5jZWxsYXRpb25zXG4gICAgaWYgKFxuICAgICAgaXNOZXdMb2FkZXIoc3RhdGUubG9hZGVyRGF0YSwgc3RhdGUubWF0Y2hlc1tpbmRleF0sIG1hdGNoKSB8fFxuICAgICAgY2FuY2VsbGVkRGVmZXJyZWRSb3V0ZXMuc29tZSgoaWQpID0+IGlkID09PSBtYXRjaC5yb3V0ZS5pZClcbiAgICApIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIC8vIFRoaXMgaXMgdGhlIGRlZmF1bHQgaW1wbGVtZW50YXRpb24gZm9yIHdoZW4gd2UgcmV2YWxpZGF0ZS4gIElmIHRoZSByb3V0ZVxuICAgIC8vIHByb3ZpZGVzIGl0J3Mgb3duIGltcGxlbWVudGF0aW9uLCB0aGVuIHdlIGdpdmUgdGhlbSBmdWxsIGNvbnRyb2wgYnV0XG4gICAgLy8gcHJvdmlkZSB0aGlzIHZhbHVlIHNvIHRoZXkgY2FuIGxldmVyYWdlIGl0IGlmIG5lZWRlZCBhZnRlciB0aGV5IGNoZWNrXG4gICAgLy8gdGhlaXIgb3duIHNwZWNpZmljIHVzZSBjYXNlc1xuICAgIGxldCBjdXJyZW50Um91dGVNYXRjaCA9IHN0YXRlLm1hdGNoZXNbaW5kZXhdO1xuICAgIGxldCBuZXh0Um91dGVNYXRjaCA9IG1hdGNoO1xuXG4gICAgcmV0dXJuIHNob3VsZFJldmFsaWRhdGVMb2FkZXIobWF0Y2gsIHtcbiAgICAgIGN1cnJlbnRVcmwsXG4gICAgICBjdXJyZW50UGFyYW1zOiBjdXJyZW50Um91dGVNYXRjaC5wYXJhbXMsXG4gICAgICBuZXh0VXJsLFxuICAgICAgbmV4dFBhcmFtczogbmV4dFJvdXRlTWF0Y2gucGFyYW1zLFxuICAgICAgLi4uc3VibWlzc2lvbixcbiAgICAgIGFjdGlvblJlc3VsdCxcbiAgICAgIGRlZmF1bHRTaG91bGRSZXZhbGlkYXRlOlxuICAgICAgICAvLyBGb3JjZWQgcmV2YWxpZGF0aW9uIGR1ZSB0byBzdWJtaXNzaW9uLCB1c2VSZXZhbGlkYXRvciwgb3IgWC1SZW1peC1SZXZhbGlkYXRlXG4gICAgICAgIGlzUmV2YWxpZGF0aW9uUmVxdWlyZWQgfHxcbiAgICAgICAgLy8gQ2xpY2tlZCB0aGUgc2FtZSBsaW5rLCByZXN1Ym1pdHRlZCBhIEdFVCBmb3JtXG4gICAgICAgIGN1cnJlbnRVcmwucGF0aG5hbWUgKyBjdXJyZW50VXJsLnNlYXJjaCA9PT1cbiAgICAgICAgICBuZXh0VXJsLnBhdGhuYW1lICsgbmV4dFVybC5zZWFyY2ggfHxcbiAgICAgICAgLy8gU2VhcmNoIHBhcmFtcyBhZmZlY3QgYWxsIGxvYWRlcnNcbiAgICAgICAgY3VycmVudFVybC5zZWFyY2ggIT09IG5leHRVcmwuc2VhcmNoIHx8XG4gICAgICAgIGlzTmV3Um91dGVJbnN0YW5jZShjdXJyZW50Um91dGVNYXRjaCwgbmV4dFJvdXRlTWF0Y2gpLFxuICAgIH0pO1xuICB9KTtcblxuICAvLyBQaWNrIGZldGNoZXIubG9hZHMgdGhhdCBuZWVkIHRvIGJlIHJldmFsaWRhdGVkXG4gIGxldCByZXZhbGlkYXRpbmdGZXRjaGVyczogUmV2YWxpZGF0aW5nRmV0Y2hlcltdID0gW107XG4gIGZldGNoTG9hZE1hdGNoZXMuZm9yRWFjaCgoZiwga2V5KSA9PiB7XG4gICAgLy8gRG9uJ3QgcmV2YWxpZGF0ZTpcbiAgICAvLyAgLSBvbiBpbml0aWFsIGxvYWQgKHNob3VsZG4ndCBiZSBhbnkgZmV0Y2hlcnMgdGhlbiBhbnl3YXkpXG4gICAgLy8gIC0gaWYgZmV0Y2hlciB3b24ndCBiZSBwcmVzZW50IGluIHRoZSBzdWJzZXF1ZW50IHJlbmRlclxuICAgIC8vICAgIC0gbm8gbG9uZ2VyIG1hdGNoZXMgdGhlIFVSTCAodjdfZmV0Y2hlclBlcnNpc3Q9ZmFsc2UpXG4gICAgLy8gICAgLSB3YXMgdW5tb3VudGVkIGJ1dCBwZXJzaXN0ZWQgZHVlIHRvIHY3X2ZldGNoZXJQZXJzaXN0PXRydWVcbiAgICBpZiAoXG4gICAgICBpc0luaXRpYWxMb2FkIHx8XG4gICAgICAhbWF0Y2hlcy5zb21lKChtKSA9PiBtLnJvdXRlLmlkID09PSBmLnJvdXRlSWQpIHx8XG4gICAgICBkZWxldGVkRmV0Y2hlcnMuaGFzKGtleSlcbiAgICApIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBsZXQgZmV0Y2hlck1hdGNoZXMgPSBtYXRjaFJvdXRlcyhyb3V0ZXNUb1VzZSwgZi5wYXRoLCBiYXNlbmFtZSk7XG5cbiAgICAvLyBJZiB0aGUgZmV0Y2hlciBwYXRoIG5vIGxvbmdlciBtYXRjaGVzLCBwdXNoIGl0IGluIHdpdGggbnVsbCBtYXRjaGVzIHNvXG4gICAgLy8gd2UgY2FuIHRyaWdnZXIgYSA0MDQgaW4gY2FsbExvYWRlcnNBbmRNYXliZVJlc29sdmVEYXRhLiAgTm90ZSB0aGlzIGlzXG4gICAgLy8gY3VycmVudGx5IG9ubHkgYSB1c2UtY2FzZSBmb3IgUmVtaXggSE1SIHdoZXJlIHRoZSByb3V0ZSB0cmVlIGNhbiBjaGFuZ2VcbiAgICAvLyBhdCBydW50aW1lIGFuZCByZW1vdmUgYSByb3V0ZSBwcmV2aW91c2x5IGxvYWRlZCB2aWEgYSBmZXRjaGVyXG4gICAgaWYgKCFmZXRjaGVyTWF0Y2hlcykge1xuICAgICAgcmV2YWxpZGF0aW5nRmV0Y2hlcnMucHVzaCh7XG4gICAgICAgIGtleSxcbiAgICAgICAgcm91dGVJZDogZi5yb3V0ZUlkLFxuICAgICAgICBwYXRoOiBmLnBhdGgsXG4gICAgICAgIG1hdGNoZXM6IG51bGwsXG4gICAgICAgIG1hdGNoOiBudWxsLFxuICAgICAgICBjb250cm9sbGVyOiBudWxsLFxuICAgICAgfSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gUmV2YWxpZGF0aW5nIGZldGNoZXJzIGFyZSBkZWNvdXBsZWQgZnJvbSB0aGUgcm91dGUgbWF0Y2hlcyBzaW5jZSB0aGV5XG4gICAgLy8gbG9hZCBmcm9tIGEgc3RhdGljIGhyZWYuICBUaGV5IHJldmFsaWRhdGUgYmFzZWQgb24gZXhwbGljaXQgcmV2YWxpZGF0aW9uXG4gICAgLy8gKHN1Ym1pc3Npb24sIHVzZVJldmFsaWRhdG9yLCBvciBYLVJlbWl4LVJldmFsaWRhdGUpXG4gICAgbGV0IGZldGNoZXIgPSBzdGF0ZS5mZXRjaGVycy5nZXQoa2V5KTtcbiAgICBsZXQgZmV0Y2hlck1hdGNoID0gZ2V0VGFyZ2V0TWF0Y2goZmV0Y2hlck1hdGNoZXMsIGYucGF0aCk7XG5cbiAgICBsZXQgc2hvdWxkUmV2YWxpZGF0ZSA9IGZhbHNlO1xuICAgIGlmIChmZXRjaFJlZGlyZWN0SWRzLmhhcyhrZXkpKSB7XG4gICAgICAvLyBOZXZlciB0cmlnZ2VyIGEgcmV2YWxpZGF0aW9uIG9mIGFuIGFjdGl2ZWx5IHJlZGlyZWN0aW5nIGZldGNoZXJcbiAgICAgIHNob3VsZFJldmFsaWRhdGUgPSBmYWxzZTtcbiAgICB9IGVsc2UgaWYgKGNhbmNlbGxlZEZldGNoZXJMb2Fkcy5pbmNsdWRlcyhrZXkpKSB7XG4gICAgICAvLyBBbHdheXMgcmV2YWxpZGF0ZSBpZiB0aGUgZmV0Y2hlciB3YXMgY2FuY2VsbGVkXG4gICAgICBzaG91bGRSZXZhbGlkYXRlID0gdHJ1ZTtcbiAgICB9IGVsc2UgaWYgKFxuICAgICAgZmV0Y2hlciAmJlxuICAgICAgZmV0Y2hlci5zdGF0ZSAhPT0gXCJpZGxlXCIgJiZcbiAgICAgIGZldGNoZXIuZGF0YSA9PT0gdW5kZWZpbmVkXG4gICAgKSB7XG4gICAgICAvLyBJZiB0aGUgZmV0Y2hlciBoYXNuJ3QgZXZlciBjb21wbGV0ZWQgbG9hZGluZyB5ZXQsIHRoZW4gdGhpcyBpc24ndCBhXG4gICAgICAvLyByZXZhbGlkYXRpb24sIGl0IHdvdWxkIGp1c3QgYmUgYSBicmFuZCBuZXcgbG9hZCBpZiBhbiBleHBsaWNpdFxuICAgICAgLy8gcmV2YWxpZGF0aW9uIGlzIHJlcXVpcmVkXG4gICAgICBzaG91bGRSZXZhbGlkYXRlID0gaXNSZXZhbGlkYXRpb25SZXF1aXJlZDtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gT3RoZXJ3aXNlIGZhbGwgYmFjayBvbiBhbnkgdXNlci1kZWZpbmVkIHNob3VsZFJldmFsaWRhdGUsIGRlZmF1bHRpbmdcbiAgICAgIC8vIHRvIGV4cGxpY2l0IHJldmFsaWRhdGlvbnMgb25seVxuICAgICAgc2hvdWxkUmV2YWxpZGF0ZSA9IHNob3VsZFJldmFsaWRhdGVMb2FkZXIoZmV0Y2hlck1hdGNoLCB7XG4gICAgICAgIGN1cnJlbnRVcmwsXG4gICAgICAgIGN1cnJlbnRQYXJhbXM6IHN0YXRlLm1hdGNoZXNbc3RhdGUubWF0Y2hlcy5sZW5ndGggLSAxXS5wYXJhbXMsXG4gICAgICAgIG5leHRVcmwsXG4gICAgICAgIG5leHRQYXJhbXM6IG1hdGNoZXNbbWF0Y2hlcy5sZW5ndGggLSAxXS5wYXJhbXMsXG4gICAgICAgIC4uLnN1Ym1pc3Npb24sXG4gICAgICAgIGFjdGlvblJlc3VsdCxcbiAgICAgICAgZGVmYXVsdFNob3VsZFJldmFsaWRhdGU6IGlzUmV2YWxpZGF0aW9uUmVxdWlyZWQsXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZiAoc2hvdWxkUmV2YWxpZGF0ZSkge1xuICAgICAgcmV2YWxpZGF0aW5nRmV0Y2hlcnMucHVzaCh7XG4gICAgICAgIGtleSxcbiAgICAgICAgcm91dGVJZDogZi5yb3V0ZUlkLFxuICAgICAgICBwYXRoOiBmLnBhdGgsXG4gICAgICAgIG1hdGNoZXM6IGZldGNoZXJNYXRjaGVzLFxuICAgICAgICBtYXRjaDogZmV0Y2hlck1hdGNoLFxuICAgICAgICBjb250cm9sbGVyOiBuZXcgQWJvcnRDb250cm9sbGVyKCksXG4gICAgICB9KTtcbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiBbbmF2aWdhdGlvbk1hdGNoZXMsIHJldmFsaWRhdGluZ0ZldGNoZXJzXTtcbn1cblxuZnVuY3Rpb24gaXNOZXdMb2FkZXIoXG4gIGN1cnJlbnRMb2FkZXJEYXRhOiBSb3V0ZURhdGEsXG4gIGN1cnJlbnRNYXRjaDogQWdub3N0aWNEYXRhUm91dGVNYXRjaCxcbiAgbWF0Y2g6IEFnbm9zdGljRGF0YVJvdXRlTWF0Y2hcbikge1xuICBsZXQgaXNOZXcgPVxuICAgIC8vIFthXSAtPiBbYSwgYl1cbiAgICAhY3VycmVudE1hdGNoIHx8XG4gICAgLy8gW2EsIGJdIC0+IFthLCBjXVxuICAgIG1hdGNoLnJvdXRlLmlkICE9PSBjdXJyZW50TWF0Y2gucm91dGUuaWQ7XG5cbiAgLy8gSGFuZGxlIHRoZSBjYXNlIHRoYXQgd2UgZG9uJ3QgaGF2ZSBkYXRhIGZvciBhIHJlLXVzZWQgcm91dGUsIHBvdGVudGlhbGx5XG4gIC8vIGZyb20gYSBwcmlvciBlcnJvciBvciBmcm9tIGEgY2FuY2VsbGVkIHBlbmRpbmcgZGVmZXJyZWRcbiAgbGV0IGlzTWlzc2luZ0RhdGEgPSBjdXJyZW50TG9hZGVyRGF0YVttYXRjaC5yb3V0ZS5pZF0gPT09IHVuZGVmaW5lZDtcblxuICAvLyBBbHdheXMgbG9hZCBpZiB0aGlzIGlzIGEgbmV0LW5ldyByb3V0ZSBvciB3ZSBkb24ndCB5ZXQgaGF2ZSBkYXRhXG4gIHJldHVybiBpc05ldyB8fCBpc01pc3NpbmdEYXRhO1xufVxuXG5mdW5jdGlvbiBpc05ld1JvdXRlSW5zdGFuY2UoXG4gIGN1cnJlbnRNYXRjaDogQWdub3N0aWNEYXRhUm91dGVNYXRjaCxcbiAgbWF0Y2g6IEFnbm9zdGljRGF0YVJvdXRlTWF0Y2hcbikge1xuICBsZXQgY3VycmVudFBhdGggPSBjdXJyZW50TWF0Y2gucm91dGUucGF0aDtcbiAgcmV0dXJuIChcbiAgICAvLyBwYXJhbSBjaGFuZ2UgZm9yIHRoaXMgbWF0Y2gsIC91c2Vycy8xMjMgLT4gL3VzZXJzLzQ1NlxuICAgIGN1cnJlbnRNYXRjaC5wYXRobmFtZSAhPT0gbWF0Y2gucGF0aG5hbWUgfHxcbiAgICAvLyBzcGxhdCBwYXJhbSBjaGFuZ2VkLCB3aGljaCBpcyBub3QgcHJlc2VudCBpbiBtYXRjaC5wYXRoXG4gICAgLy8gZS5nLiAvZmlsZXMvaW1hZ2VzL2F2YXRhci5qcGcgLT4gZmlsZXMvZmluYW5jZXMueGxzXG4gICAgKGN1cnJlbnRQYXRoICE9IG51bGwgJiZcbiAgICAgIGN1cnJlbnRQYXRoLmVuZHNXaXRoKFwiKlwiKSAmJlxuICAgICAgY3VycmVudE1hdGNoLnBhcmFtc1tcIipcIl0gIT09IG1hdGNoLnBhcmFtc1tcIipcIl0pXG4gICk7XG59XG5cbmZ1bmN0aW9uIHNob3VsZFJldmFsaWRhdGVMb2FkZXIoXG4gIGxvYWRlck1hdGNoOiBBZ25vc3RpY0RhdGFSb3V0ZU1hdGNoLFxuICBhcmc6IFNob3VsZFJldmFsaWRhdGVGdW5jdGlvbkFyZ3Ncbikge1xuICBpZiAobG9hZGVyTWF0Y2gucm91dGUuc2hvdWxkUmV2YWxpZGF0ZSkge1xuICAgIGxldCByb3V0ZUNob2ljZSA9IGxvYWRlck1hdGNoLnJvdXRlLnNob3VsZFJldmFsaWRhdGUoYXJnKTtcbiAgICBpZiAodHlwZW9mIHJvdXRlQ2hvaWNlID09PSBcImJvb2xlYW5cIikge1xuICAgICAgcmV0dXJuIHJvdXRlQ2hvaWNlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBhcmcuZGVmYXVsdFNob3VsZFJldmFsaWRhdGU7XG59XG5cbi8qKlxuICogRXhlY3V0ZSByb3V0ZS5sYXp5KCkgbWV0aG9kcyB0byBsYXppbHkgbG9hZCByb3V0ZSBtb2R1bGVzIChsb2FkZXIsIGFjdGlvbixcbiAqIHNob3VsZFJldmFsaWRhdGUpIGFuZCB1cGRhdGUgdGhlIHJvdXRlTWFuaWZlc3QgaW4gcGxhY2Ugd2hpY2ggc2hhcmVzIG9iamVjdHNcbiAqIHdpdGggZGF0YVJvdXRlcyBzbyB0aG9zZSBnZXQgdXBkYXRlZCBhcyB3ZWxsLlxuICovXG5hc3luYyBmdW5jdGlvbiBsb2FkTGF6eVJvdXRlTW9kdWxlKFxuICByb3V0ZTogQWdub3N0aWNEYXRhUm91dGVPYmplY3QsXG4gIG1hcFJvdXRlUHJvcGVydGllczogTWFwUm91dGVQcm9wZXJ0aWVzRnVuY3Rpb24sXG4gIG1hbmlmZXN0OiBSb3V0ZU1hbmlmZXN0XG4pIHtcbiAgaWYgKCFyb3V0ZS5sYXp5KSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgbGV0IGxhenlSb3V0ZSA9IGF3YWl0IHJvdXRlLmxhenkoKTtcblxuICAvLyBJZiB0aGUgbGF6eSByb3V0ZSBmdW5jdGlvbiB3YXMgZXhlY3V0ZWQgYW5kIHJlbW92ZWQgYnkgYW5vdGhlciBwYXJhbGxlbFxuICAvLyBjYWxsIHRoZW4gd2UgY2FuIHJldHVybiAtIGZpcnN0IGxhenkoKSB0byBmaW5pc2ggd2lucyBiZWNhdXNlIHRoZSByZXR1cm5cbiAgLy8gdmFsdWUgb2YgbGF6eSBpcyBleHBlY3RlZCB0byBiZSBzdGF0aWNcbiAgaWYgKCFyb3V0ZS5sYXp5KSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgbGV0IHJvdXRlVG9VcGRhdGUgPSBtYW5pZmVzdFtyb3V0ZS5pZF07XG4gIGludmFyaWFudChyb3V0ZVRvVXBkYXRlLCBcIk5vIHJvdXRlIGZvdW5kIGluIG1hbmlmZXN0XCIpO1xuXG4gIC8vIFVwZGF0ZSB0aGUgcm91dGUgaW4gcGxhY2UuICBUaGlzIHNob3VsZCBiZSBzYWZlIGJlY2F1c2UgdGhlcmUncyBubyB3YXlcbiAgLy8gd2UgY291bGQgeWV0IGJlIHNpdHRpbmcgb24gdGhpcyByb3V0ZSBhcyB3ZSBjYW4ndCBnZXQgdGhlcmUgd2l0aG91dFxuICAvLyByZXNvbHZpbmcgbGF6eSgpIGZpcnN0LlxuICAvL1xuICAvLyBUaGlzIGlzIGRpZmZlcmVudCB0aGFuIHRoZSBITVIgXCJ1cGRhdGVcIiB1c2UtY2FzZSB3aGVyZSB3ZSBtYXkgYWN0aXZlbHkgYmVcbiAgLy8gb24gdGhlIHJvdXRlIGJlaW5nIHVwZGF0ZWQuICBUaGUgbWFpbiBjb25jZXJuIGJvaWxzIGRvd24gdG8gXCJkb2VzIHRoaXNcbiAgLy8gbXV0YXRpb24gYWZmZWN0IGFueSBvbmdvaW5nIG5hdmlnYXRpb25zIG9yIGFueSBjdXJyZW50IHN0YXRlLm1hdGNoZXNcbiAgLy8gdmFsdWVzP1wiLiAgSWYgbm90LCBpdCBzaG91bGQgYmUgc2FmZSB0byB1cGRhdGUgaW4gcGxhY2UuXG4gIGxldCByb3V0ZVVwZGF0ZXM6IFJlY29yZDxzdHJpbmcsIGFueT4gPSB7fTtcbiAgZm9yIChsZXQgbGF6eVJvdXRlUHJvcGVydHkgaW4gbGF6eVJvdXRlKSB7XG4gICAgbGV0IHN0YXRpY1JvdXRlVmFsdWUgPVxuICAgICAgcm91dGVUb1VwZGF0ZVtsYXp5Um91dGVQcm9wZXJ0eSBhcyBrZXlvZiB0eXBlb2Ygcm91dGVUb1VwZGF0ZV07XG5cbiAgICBsZXQgaXNQcm9wZXJ0eVN0YXRpY2FsbHlEZWZpbmVkID1cbiAgICAgIHN0YXRpY1JvdXRlVmFsdWUgIT09IHVuZGVmaW5lZCAmJlxuICAgICAgLy8gVGhpcyBwcm9wZXJ0eSBpc24ndCBzdGF0aWMgc2luY2UgaXQgc2hvdWxkIGFsd2F5cyBiZSB1cGRhdGVkIGJhc2VkXG4gICAgICAvLyBvbiB0aGUgcm91dGUgdXBkYXRlc1xuICAgICAgbGF6eVJvdXRlUHJvcGVydHkgIT09IFwiaGFzRXJyb3JCb3VuZGFyeVwiO1xuXG4gICAgd2FybmluZyhcbiAgICAgICFpc1Byb3BlcnR5U3RhdGljYWxseURlZmluZWQsXG4gICAgICBgUm91dGUgXCIke3JvdXRlVG9VcGRhdGUuaWR9XCIgaGFzIGEgc3RhdGljIHByb3BlcnR5IFwiJHtsYXp5Um91dGVQcm9wZXJ0eX1cIiBgICtcbiAgICAgICAgYGRlZmluZWQgYnV0IGl0cyBsYXp5IGZ1bmN0aW9uIGlzIGFsc28gcmV0dXJuaW5nIGEgdmFsdWUgZm9yIHRoaXMgcHJvcGVydHkuIGAgK1xuICAgICAgICBgVGhlIGxhenkgcm91dGUgcHJvcGVydHkgXCIke2xhenlSb3V0ZVByb3BlcnR5fVwiIHdpbGwgYmUgaWdub3JlZC5gXG4gICAgKTtcblxuICAgIGlmIChcbiAgICAgICFpc1Byb3BlcnR5U3RhdGljYWxseURlZmluZWQgJiZcbiAgICAgICFpbW11dGFibGVSb3V0ZUtleXMuaGFzKGxhenlSb3V0ZVByb3BlcnR5IGFzIEltbXV0YWJsZVJvdXRlS2V5KVxuICAgICkge1xuICAgICAgcm91dGVVcGRhdGVzW2xhenlSb3V0ZVByb3BlcnR5XSA9XG4gICAgICAgIGxhenlSb3V0ZVtsYXp5Um91dGVQcm9wZXJ0eSBhcyBrZXlvZiB0eXBlb2YgbGF6eVJvdXRlXTtcbiAgICB9XG4gIH1cblxuICAvLyBNdXRhdGUgdGhlIHJvdXRlIHdpdGggdGhlIHByb3ZpZGVkIHVwZGF0ZXMuICBEbyB0aGlzIGZpcnN0IHNvIHdlIHBhc3NcbiAgLy8gdGhlIHVwZGF0ZWQgdmVyc2lvbiB0byBtYXBSb3V0ZVByb3BlcnRpZXNcbiAgT2JqZWN0LmFzc2lnbihyb3V0ZVRvVXBkYXRlLCByb3V0ZVVwZGF0ZXMpO1xuXG4gIC8vIE11dGF0ZSB0aGUgYGhhc0Vycm9yQm91bmRhcnlgIHByb3BlcnR5IG9uIHRoZSByb3V0ZSBiYXNlZCBvbiB0aGUgcm91dGVcbiAgLy8gdXBkYXRlcyBhbmQgcmVtb3ZlIHRoZSBgbGF6eWAgZnVuY3Rpb24gc28gd2UgZG9uJ3QgcmVzb2x2ZSB0aGUgbGF6eVxuICAvLyByb3V0ZSBhZ2Fpbi5cbiAgT2JqZWN0LmFzc2lnbihyb3V0ZVRvVXBkYXRlLCB7XG4gICAgLy8gVG8ga2VlcCB0aGluZ3MgZnJhbWV3b3JrIGFnbm9zdGljLCB3ZSB1c2UgdGhlIHByb3ZpZGVkXG4gICAgLy8gYG1hcFJvdXRlUHJvcGVydGllc2AgKG9yIHdyYXBwZWQgYGRldGVjdEVycm9yQm91bmRhcnlgKSBmdW5jdGlvbiB0b1xuICAgIC8vIHNldCB0aGUgZnJhbWV3b3JrLWF3YXJlIHByb3BlcnRpZXMgKGBlbGVtZW50YC9gaGFzRXJyb3JCb3VuZGFyeWApIHNpbmNlXG4gICAgLy8gdGhlIGxvZ2ljIHdpbGwgZGlmZmVyIGJldHdlZW4gZnJhbWV3b3Jrcy5cbiAgICAuLi5tYXBSb3V0ZVByb3BlcnRpZXMocm91dGVUb1VwZGF0ZSksXG4gICAgbGF6eTogdW5kZWZpbmVkLFxuICB9KTtcbn1cblxuYXN5bmMgZnVuY3Rpb24gY2FsbExvYWRlck9yQWN0aW9uKFxuICB0eXBlOiBcImxvYWRlclwiIHwgXCJhY3Rpb25cIixcbiAgcmVxdWVzdDogUmVxdWVzdCxcbiAgbWF0Y2g6IEFnbm9zdGljRGF0YVJvdXRlTWF0Y2gsXG4gIG1hdGNoZXM6IEFnbm9zdGljRGF0YVJvdXRlTWF0Y2hbXSxcbiAgbWFuaWZlc3Q6IFJvdXRlTWFuaWZlc3QsXG4gIG1hcFJvdXRlUHJvcGVydGllczogTWFwUm91dGVQcm9wZXJ0aWVzRnVuY3Rpb24sXG4gIGJhc2VuYW1lOiBzdHJpbmcsXG4gIHY3X3JlbGF0aXZlU3BsYXRQYXRoOiBib29sZWFuLFxuICBvcHRzOiB7XG4gICAgaXNTdGF0aWNSZXF1ZXN0PzogYm9vbGVhbjtcbiAgICBpc1JvdXRlUmVxdWVzdD86IGJvb2xlYW47XG4gICAgcmVxdWVzdENvbnRleHQ/OiB1bmtub3duO1xuICB9ID0ge31cbik6IFByb21pc2U8RGF0YVJlc3VsdD4ge1xuICBsZXQgcmVzdWx0VHlwZTtcbiAgbGV0IHJlc3VsdDtcbiAgbGV0IG9uUmVqZWN0OiAoKCkgPT4gdm9pZCkgfCB1bmRlZmluZWQ7XG5cbiAgbGV0IHJ1bkhhbmRsZXIgPSAoaGFuZGxlcjogQWN0aW9uRnVuY3Rpb24gfCBMb2FkZXJGdW5jdGlvbikgPT4ge1xuICAgIC8vIFNldHVwIGEgcHJvbWlzZSB3ZSBjYW4gcmFjZSBhZ2FpbnN0IHNvIHRoYXQgYWJvcnQgc2lnbmFscyBzaG9ydCBjaXJjdWl0XG4gICAgbGV0IHJlamVjdDogKCkgPT4gdm9pZDtcbiAgICBsZXQgYWJvcnRQcm9taXNlID0gbmV3IFByb21pc2UoKF8sIHIpID0+IChyZWplY3QgPSByKSk7XG4gICAgb25SZWplY3QgPSAoKSA9PiByZWplY3QoKTtcbiAgICByZXF1ZXN0LnNpZ25hbC5hZGRFdmVudExpc3RlbmVyKFwiYWJvcnRcIiwgb25SZWplY3QpO1xuICAgIHJldHVybiBQcm9taXNlLnJhY2UoW1xuICAgICAgaGFuZGxlcih7XG4gICAgICAgIHJlcXVlc3QsXG4gICAgICAgIHBhcmFtczogbWF0Y2gucGFyYW1zLFxuICAgICAgICBjb250ZXh0OiBvcHRzLnJlcXVlc3RDb250ZXh0LFxuICAgICAgfSksXG4gICAgICBhYm9ydFByb21pc2UsXG4gICAgXSk7XG4gIH07XG5cbiAgdHJ5IHtcbiAgICBsZXQgaGFuZGxlciA9IG1hdGNoLnJvdXRlW3R5cGVdO1xuXG4gICAgaWYgKG1hdGNoLnJvdXRlLmxhenkpIHtcbiAgICAgIGlmIChoYW5kbGVyKSB7XG4gICAgICAgIC8vIFJ1biBzdGF0aWNhbGx5IGRlZmluZWQgaGFuZGxlciBpbiBwYXJhbGxlbCB3aXRoIGxhenkoKVxuICAgICAgICBsZXQgaGFuZGxlckVycm9yO1xuICAgICAgICBsZXQgdmFsdWVzID0gYXdhaXQgUHJvbWlzZS5hbGwoW1xuICAgICAgICAgIC8vIElmIHRoZSBoYW5kbGVyIHRocm93cywgZG9uJ3QgbGV0IGl0IGltbWVkaWF0ZWx5IGJ1YmJsZSBvdXQsXG4gICAgICAgICAgLy8gc2luY2Ugd2UgbmVlZCB0byBsZXQgdGhlIGxhenkoKSBleGVjdXRpb24gZmluaXNoIHNvIHdlIGtub3cgaWYgdGhpc1xuICAgICAgICAgIC8vIHJvdXRlIGhhcyBhIGJvdW5kYXJ5IHRoYXQgY2FuIGhhbmRsZSB0aGUgZXJyb3JcbiAgICAgICAgICBydW5IYW5kbGVyKGhhbmRsZXIpLmNhdGNoKChlKSA9PiB7XG4gICAgICAgICAgICBoYW5kbGVyRXJyb3IgPSBlO1xuICAgICAgICAgIH0pLFxuICAgICAgICAgIGxvYWRMYXp5Um91dGVNb2R1bGUobWF0Y2gucm91dGUsIG1hcFJvdXRlUHJvcGVydGllcywgbWFuaWZlc3QpLFxuICAgICAgICBdKTtcbiAgICAgICAgaWYgKGhhbmRsZXJFcnJvcikge1xuICAgICAgICAgIHRocm93IGhhbmRsZXJFcnJvcjtcbiAgICAgICAgfVxuICAgICAgICByZXN1bHQgPSB2YWx1ZXNbMF07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBMb2FkIGxhenkgcm91dGUgbW9kdWxlLCB0aGVuIHJ1biBhbnkgcmV0dXJuZWQgaGFuZGxlclxuICAgICAgICBhd2FpdCBsb2FkTGF6eVJvdXRlTW9kdWxlKG1hdGNoLnJvdXRlLCBtYXBSb3V0ZVByb3BlcnRpZXMsIG1hbmlmZXN0KTtcblxuICAgICAgICBoYW5kbGVyID0gbWF0Y2gucm91dGVbdHlwZV07XG4gICAgICAgIGlmIChoYW5kbGVyKSB7XG4gICAgICAgICAgLy8gSGFuZGxlciBzdGlsbCBydW4gZXZlbiBpZiB3ZSBnb3QgaW50ZXJydXB0ZWQgdG8gbWFpbnRhaW4gY29uc2lzdGVuY3lcbiAgICAgICAgICAvLyB3aXRoIHVuLWFib3J0YWJsZSBiZWhhdmlvciBvZiBoYW5kbGVyIGV4ZWN1dGlvbiBvbiBub24tbGF6eSBvclxuICAgICAgICAgIC8vIHByZXZpb3VzbHktbGF6eS1sb2FkZWQgcm91dGVzXG4gICAgICAgICAgcmVzdWx0ID0gYXdhaXQgcnVuSGFuZGxlcihoYW5kbGVyKTtcbiAgICAgICAgfSBlbHNlIGlmICh0eXBlID09PSBcImFjdGlvblwiKSB7XG4gICAgICAgICAgbGV0IHVybCA9IG5ldyBVUkwocmVxdWVzdC51cmwpO1xuICAgICAgICAgIGxldCBwYXRobmFtZSA9IHVybC5wYXRobmFtZSArIHVybC5zZWFyY2g7XG4gICAgICAgICAgdGhyb3cgZ2V0SW50ZXJuYWxSb3V0ZXJFcnJvcig0MDUsIHtcbiAgICAgICAgICAgIG1ldGhvZDogcmVxdWVzdC5tZXRob2QsXG4gICAgICAgICAgICBwYXRobmFtZSxcbiAgICAgICAgICAgIHJvdXRlSWQ6IG1hdGNoLnJvdXRlLmlkLFxuICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIGxhenkoKSByb3V0ZSBoYXMgbm8gbG9hZGVyIHRvIHJ1bi4gIFNob3J0IGNpcmN1aXQgaGVyZSBzbyB3ZSBkb24ndFxuICAgICAgICAgIC8vIGhpdCB0aGUgaW52YXJpYW50IGJlbG93IHRoYXQgZXJyb3JzIG9uIHJldHVybmluZyB1bmRlZmluZWQuXG4gICAgICAgICAgcmV0dXJuIHsgdHlwZTogUmVzdWx0VHlwZS5kYXRhLCBkYXRhOiB1bmRlZmluZWQgfTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoIWhhbmRsZXIpIHtcbiAgICAgIGxldCB1cmwgPSBuZXcgVVJMKHJlcXVlc3QudXJsKTtcbiAgICAgIGxldCBwYXRobmFtZSA9IHVybC5wYXRobmFtZSArIHVybC5zZWFyY2g7XG4gICAgICB0aHJvdyBnZXRJbnRlcm5hbFJvdXRlckVycm9yKDQwNCwge1xuICAgICAgICBwYXRobmFtZSxcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXN1bHQgPSBhd2FpdCBydW5IYW5kbGVyKGhhbmRsZXIpO1xuICAgIH1cblxuICAgIGludmFyaWFudChcbiAgICAgIHJlc3VsdCAhPT0gdW5kZWZpbmVkLFxuICAgICAgYFlvdSBkZWZpbmVkICR7dHlwZSA9PT0gXCJhY3Rpb25cIiA/IFwiYW4gYWN0aW9uXCIgOiBcImEgbG9hZGVyXCJ9IGZvciByb3V0ZSBgICtcbiAgICAgICAgYFwiJHttYXRjaC5yb3V0ZS5pZH1cIiBidXQgZGlkbid0IHJldHVybiBhbnl0aGluZyBmcm9tIHlvdXIgXFxgJHt0eXBlfVxcYCBgICtcbiAgICAgICAgYGZ1bmN0aW9uLiBQbGVhc2UgcmV0dXJuIGEgdmFsdWUgb3IgXFxgbnVsbFxcYC5gXG4gICAgKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJlc3VsdFR5cGUgPSBSZXN1bHRUeXBlLmVycm9yO1xuICAgIHJlc3VsdCA9IGU7XG4gIH0gZmluYWxseSB7XG4gICAgaWYgKG9uUmVqZWN0KSB7XG4gICAgICByZXF1ZXN0LnNpZ25hbC5yZW1vdmVFdmVudExpc3RlbmVyKFwiYWJvcnRcIiwgb25SZWplY3QpO1xuICAgIH1cbiAgfVxuXG4gIGlmIChpc1Jlc3BvbnNlKHJlc3VsdCkpIHtcbiAgICBsZXQgc3RhdHVzID0gcmVzdWx0LnN0YXR1cztcblxuICAgIC8vIFByb2Nlc3MgcmVkaXJlY3RzXG4gICAgaWYgKHJlZGlyZWN0U3RhdHVzQ29kZXMuaGFzKHN0YXR1cykpIHtcbiAgICAgIGxldCBsb2NhdGlvbiA9IHJlc3VsdC5oZWFkZXJzLmdldChcIkxvY2F0aW9uXCIpO1xuICAgICAgaW52YXJpYW50KFxuICAgICAgICBsb2NhdGlvbixcbiAgICAgICAgXCJSZWRpcmVjdHMgcmV0dXJuZWQvdGhyb3duIGZyb20gbG9hZGVycy9hY3Rpb25zIG11c3QgaGF2ZSBhIExvY2F0aW9uIGhlYWRlclwiXG4gICAgICApO1xuXG4gICAgICAvLyBTdXBwb3J0IHJlbGF0aXZlIHJvdXRpbmcgaW4gaW50ZXJuYWwgcmVkaXJlY3RzXG4gICAgICBpZiAoIUFCU09MVVRFX1VSTF9SRUdFWC50ZXN0KGxvY2F0aW9uKSkge1xuICAgICAgICBsb2NhdGlvbiA9IG5vcm1hbGl6ZVRvKFxuICAgICAgICAgIG5ldyBVUkwocmVxdWVzdC51cmwpLFxuICAgICAgICAgIG1hdGNoZXMuc2xpY2UoMCwgbWF0Y2hlcy5pbmRleE9mKG1hdGNoKSArIDEpLFxuICAgICAgICAgIGJhc2VuYW1lLFxuICAgICAgICAgIHRydWUsXG4gICAgICAgICAgbG9jYXRpb24sXG4gICAgICAgICAgdjdfcmVsYXRpdmVTcGxhdFBhdGhcbiAgICAgICAgKTtcbiAgICAgIH0gZWxzZSBpZiAoIW9wdHMuaXNTdGF0aWNSZXF1ZXN0KSB7XG4gICAgICAgIC8vIFN0cmlwIG9mZiB0aGUgcHJvdG9jb2wrb3JpZ2luIGZvciBzYW1lLW9yaWdpbiArIHNhbWUtYmFzZW5hbWUgYWJzb2x1dGVcbiAgICAgICAgLy8gcmVkaXJlY3RzLiBJZiB0aGlzIGlzIGEgc3RhdGljIHJlcXVlc3QsIHdlIGNhbiBsZXQgaXQgZ28gYmFjayB0byB0aGVcbiAgICAgICAgLy8gYnJvd3NlciBhcy1pc1xuICAgICAgICBsZXQgY3VycmVudFVybCA9IG5ldyBVUkwocmVxdWVzdC51cmwpO1xuICAgICAgICBsZXQgdXJsID0gbG9jYXRpb24uc3RhcnRzV2l0aChcIi8vXCIpXG4gICAgICAgICAgPyBuZXcgVVJMKGN1cnJlbnRVcmwucHJvdG9jb2wgKyBsb2NhdGlvbilcbiAgICAgICAgICA6IG5ldyBVUkwobG9jYXRpb24pO1xuICAgICAgICBsZXQgaXNTYW1lQmFzZW5hbWUgPSBzdHJpcEJhc2VuYW1lKHVybC5wYXRobmFtZSwgYmFzZW5hbWUpICE9IG51bGw7XG4gICAgICAgIGlmICh1cmwub3JpZ2luID09PSBjdXJyZW50VXJsLm9yaWdpbiAmJiBpc1NhbWVCYXNlbmFtZSkge1xuICAgICAgICAgIGxvY2F0aW9uID0gdXJsLnBhdGhuYW1lICsgdXJsLnNlYXJjaCArIHVybC5oYXNoO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIERvbid0IHByb2Nlc3MgcmVkaXJlY3RzIGluIHRoZSByb3V0ZXIgZHVyaW5nIHN0YXRpYyByZXF1ZXN0cyByZXF1ZXN0cy5cbiAgICAgIC8vIEluc3RlYWQsIHRocm93IHRoZSBSZXNwb25zZSBhbmQgbGV0IHRoZSBzZXJ2ZXIgaGFuZGxlIGl0IHdpdGggYW4gSFRUUFxuICAgICAgLy8gcmVkaXJlY3QuICBXZSBhbHNvIHVwZGF0ZSB0aGUgTG9jYXRpb24gaGVhZGVyIGluIHBsYWNlIGluIHRoaXMgZmxvdyBzb1xuICAgICAgLy8gYmFzZW5hbWUgYW5kIHJlbGF0aXZlIHJvdXRpbmcgaXMgdGFrZW4gaW50byBhY2NvdW50XG4gICAgICBpZiAob3B0cy5pc1N0YXRpY1JlcXVlc3QpIHtcbiAgICAgICAgcmVzdWx0LmhlYWRlcnMuc2V0KFwiTG9jYXRpb25cIiwgbG9jYXRpb24pO1xuICAgICAgICB0aHJvdyByZXN1bHQ7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIHR5cGU6IFJlc3VsdFR5cGUucmVkaXJlY3QsXG4gICAgICAgIHN0YXR1cyxcbiAgICAgICAgbG9jYXRpb24sXG4gICAgICAgIHJldmFsaWRhdGU6IHJlc3VsdC5oZWFkZXJzLmdldChcIlgtUmVtaXgtUmV2YWxpZGF0ZVwiKSAhPT0gbnVsbCxcbiAgICAgICAgcmVsb2FkRG9jdW1lbnQ6IHJlc3VsdC5oZWFkZXJzLmdldChcIlgtUmVtaXgtUmVsb2FkLURvY3VtZW50XCIpICE9PSBudWxsLFxuICAgICAgfTtcbiAgICB9XG5cbiAgICAvLyBGb3IgU1NSIHNpbmdsZS1yb3V0ZSByZXF1ZXN0cywgd2Ugd2FudCB0byBoYW5kIFJlc3BvbnNlcyBiYWNrIGRpcmVjdGx5XG4gICAgLy8gd2l0aG91dCB1bndyYXBwaW5nLiAgV2UgZG8gdGhpcyB3aXRoIHRoZSBRdWVyeVJvdXRlUmVzcG9uc2Ugd3JhcHBlclxuICAgIC8vIGludGVyZmFjZSBzbyB3ZSBjYW4ga25vdyB3aGV0aGVyIGl0IHdhcyByZXR1cm5lZCBvciB0aHJvd25cbiAgICBpZiAob3B0cy5pc1JvdXRlUmVxdWVzdCkge1xuICAgICAgbGV0IHF1ZXJ5Um91dGVSZXNwb25zZTogUXVlcnlSb3V0ZVJlc3BvbnNlID0ge1xuICAgICAgICB0eXBlOlxuICAgICAgICAgIHJlc3VsdFR5cGUgPT09IFJlc3VsdFR5cGUuZXJyb3IgPyBSZXN1bHRUeXBlLmVycm9yIDogUmVzdWx0VHlwZS5kYXRhLFxuICAgICAgICByZXNwb25zZTogcmVzdWx0LFxuICAgICAgfTtcbiAgICAgIHRocm93IHF1ZXJ5Um91dGVSZXNwb25zZTtcbiAgICB9XG5cbiAgICBsZXQgZGF0YTogYW55O1xuXG4gICAgdHJ5IHtcbiAgICAgIGxldCBjb250ZW50VHlwZSA9IHJlc3VsdC5oZWFkZXJzLmdldChcIkNvbnRlbnQtVHlwZVwiKTtcbiAgICAgIC8vIENoZWNrIGJldHdlZW4gd29yZCBib3VuZGFyaWVzIGluc3RlYWQgb2Ygc3RhcnRzV2l0aCgpIGR1ZSB0byB0aGUgbGFzdFxuICAgICAgLy8gcGFyYWdyYXBoIG9mIGh0dHBzOi8vaHR0cHdnLm9yZy9zcGVjcy9yZmM5MTEwLmh0bWwjZmllbGQuY29udGVudC10eXBlXG4gICAgICBpZiAoY29udGVudFR5cGUgJiYgL1xcYmFwcGxpY2F0aW9uXFwvanNvblxcYi8udGVzdChjb250ZW50VHlwZSkpIHtcbiAgICAgICAgaWYgKHJlc3VsdC5ib2R5ID09IG51bGwpIHtcbiAgICAgICAgICBkYXRhID0gbnVsbDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBkYXRhID0gYXdhaXQgcmVzdWx0Lmpzb24oKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZGF0YSA9IGF3YWl0IHJlc3VsdC50ZXh0KCk7XG4gICAgICB9XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgcmV0dXJuIHsgdHlwZTogUmVzdWx0VHlwZS5lcnJvciwgZXJyb3I6IGUgfTtcbiAgICB9XG5cbiAgICBpZiAocmVzdWx0VHlwZSA9PT0gUmVzdWx0VHlwZS5lcnJvcikge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdHlwZTogcmVzdWx0VHlwZSxcbiAgICAgICAgZXJyb3I6IG5ldyBFcnJvclJlc3BvbnNlSW1wbChzdGF0dXMsIHJlc3VsdC5zdGF0dXNUZXh0LCBkYXRhKSxcbiAgICAgICAgaGVhZGVyczogcmVzdWx0LmhlYWRlcnMsXG4gICAgICB9O1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICB0eXBlOiBSZXN1bHRUeXBlLmRhdGEsXG4gICAgICBkYXRhLFxuICAgICAgc3RhdHVzQ29kZTogcmVzdWx0LnN0YXR1cyxcbiAgICAgIGhlYWRlcnM6IHJlc3VsdC5oZWFkZXJzLFxuICAgIH07XG4gIH1cblxuICBpZiAocmVzdWx0VHlwZSA9PT0gUmVzdWx0VHlwZS5lcnJvcikge1xuICAgIHJldHVybiB7IHR5cGU6IHJlc3VsdFR5cGUsIGVycm9yOiByZXN1bHQgfTtcbiAgfVxuXG4gIGlmIChpc0RlZmVycmVkRGF0YShyZXN1bHQpKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHR5cGU6IFJlc3VsdFR5cGUuZGVmZXJyZWQsXG4gICAgICBkZWZlcnJlZERhdGE6IHJlc3VsdCxcbiAgICAgIHN0YXR1c0NvZGU6IHJlc3VsdC5pbml0Py5zdGF0dXMsXG4gICAgICBoZWFkZXJzOiByZXN1bHQuaW5pdD8uaGVhZGVycyAmJiBuZXcgSGVhZGVycyhyZXN1bHQuaW5pdC5oZWFkZXJzKSxcbiAgICB9O1xuICB9XG5cbiAgcmV0dXJuIHsgdHlwZTogUmVzdWx0VHlwZS5kYXRhLCBkYXRhOiByZXN1bHQgfTtcbn1cblxuLy8gVXRpbGl0eSBtZXRob2QgZm9yIGNyZWF0aW5nIHRoZSBSZXF1ZXN0IGluc3RhbmNlcyBmb3IgbG9hZGVycy9hY3Rpb25zIGR1cmluZ1xuLy8gY2xpZW50LXNpZGUgbmF2aWdhdGlvbnMgYW5kIGZldGNoZXMuICBEdXJpbmcgU1NSIHdlIHdpbGwgYWx3YXlzIGhhdmUgYVxuLy8gUmVxdWVzdCBpbnN0YW5jZSBmcm9tIHRoZSBzdGF0aWMgaGFuZGxlciAocXVlcnkvcXVlcnlSb3V0ZSlcbmZ1bmN0aW9uIGNyZWF0ZUNsaWVudFNpZGVSZXF1ZXN0KFxuICBoaXN0b3J5OiBIaXN0b3J5LFxuICBsb2NhdGlvbjogc3RyaW5nIHwgTG9jYXRpb24sXG4gIHNpZ25hbDogQWJvcnRTaWduYWwsXG4gIHN1Ym1pc3Npb24/OiBTdWJtaXNzaW9uXG4pOiBSZXF1ZXN0IHtcbiAgbGV0IHVybCA9IGhpc3RvcnkuY3JlYXRlVVJMKHN0cmlwSGFzaEZyb21QYXRoKGxvY2F0aW9uKSkudG9TdHJpbmcoKTtcbiAgbGV0IGluaXQ6IFJlcXVlc3RJbml0ID0geyBzaWduYWwgfTtcblxuICBpZiAoc3VibWlzc2lvbiAmJiBpc011dGF0aW9uTWV0aG9kKHN1Ym1pc3Npb24uZm9ybU1ldGhvZCkpIHtcbiAgICBsZXQgeyBmb3JtTWV0aG9kLCBmb3JtRW5jVHlwZSB9ID0gc3VibWlzc2lvbjtcbiAgICAvLyBEaWRuJ3QgdGhpbmsgd2UgbmVlZGVkIHRoaXMgYnV0IGl0IHR1cm5zIG91dCB1bmxpa2Ugb3RoZXIgbWV0aG9kcywgcGF0Y2hcbiAgICAvLyB3b24ndCBiZSBwcm9wZXJseSBub3JtYWxpemVkIHRvIHVwcGVyY2FzZSBhbmQgcmVzdWx0cyBpbiBhIDQwNSBlcnJvci5cbiAgICAvLyBTZWU6IGh0dHBzOi8vZmV0Y2guc3BlYy53aGF0d2cub3JnLyNjb25jZXB0LW1ldGhvZFxuICAgIGluaXQubWV0aG9kID0gZm9ybU1ldGhvZC50b1VwcGVyQ2FzZSgpO1xuXG4gICAgaWYgKGZvcm1FbmNUeXBlID09PSBcImFwcGxpY2F0aW9uL2pzb25cIikge1xuICAgICAgaW5pdC5oZWFkZXJzID0gbmV3IEhlYWRlcnMoeyBcIkNvbnRlbnQtVHlwZVwiOiBmb3JtRW5jVHlwZSB9KTtcbiAgICAgIGluaXQuYm9keSA9IEpTT04uc3RyaW5naWZ5KHN1Ym1pc3Npb24uanNvbik7XG4gICAgfSBlbHNlIGlmIChmb3JtRW5jVHlwZSA9PT0gXCJ0ZXh0L3BsYWluXCIpIHtcbiAgICAgIC8vIENvbnRlbnQtVHlwZSBpcyBpbmZlcnJlZCAoaHR0cHM6Ly9mZXRjaC5zcGVjLndoYXR3Zy5vcmcvI2RvbS1yZXF1ZXN0KVxuICAgICAgaW5pdC5ib2R5ID0gc3VibWlzc2lvbi50ZXh0O1xuICAgIH0gZWxzZSBpZiAoXG4gICAgICBmb3JtRW5jVHlwZSA9PT0gXCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWRcIiAmJlxuICAgICAgc3VibWlzc2lvbi5mb3JtRGF0YVxuICAgICkge1xuICAgICAgLy8gQ29udGVudC1UeXBlIGlzIGluZmVycmVkIChodHRwczovL2ZldGNoLnNwZWMud2hhdHdnLm9yZy8jZG9tLXJlcXVlc3QpXG4gICAgICBpbml0LmJvZHkgPSBjb252ZXJ0Rm9ybURhdGFUb1NlYXJjaFBhcmFtcyhzdWJtaXNzaW9uLmZvcm1EYXRhKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gQ29udGVudC1UeXBlIGlzIGluZmVycmVkIChodHRwczovL2ZldGNoLnNwZWMud2hhdHdnLm9yZy8jZG9tLXJlcXVlc3QpXG4gICAgICBpbml0LmJvZHkgPSBzdWJtaXNzaW9uLmZvcm1EYXRhO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBuZXcgUmVxdWVzdCh1cmwsIGluaXQpO1xufVxuXG5mdW5jdGlvbiBjb252ZXJ0Rm9ybURhdGFUb1NlYXJjaFBhcmFtcyhmb3JtRGF0YTogRm9ybURhdGEpOiBVUkxTZWFyY2hQYXJhbXMge1xuICBsZXQgc2VhcmNoUGFyYW1zID0gbmV3IFVSTFNlYXJjaFBhcmFtcygpO1xuXG4gIGZvciAobGV0IFtrZXksIHZhbHVlXSBvZiBmb3JtRGF0YS5lbnRyaWVzKCkpIHtcbiAgICAvLyBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9mb3JtLWNvbnRyb2wtaW5mcmFzdHJ1Y3R1cmUuaHRtbCNjb252ZXJ0aW5nLWFuLWVudHJ5LWxpc3QtdG8tYS1saXN0LW9mLW5hbWUtdmFsdWUtcGFpcnNcbiAgICBzZWFyY2hQYXJhbXMuYXBwZW5kKGtleSwgdHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiID8gdmFsdWUgOiB2YWx1ZS5uYW1lKTtcbiAgfVxuXG4gIHJldHVybiBzZWFyY2hQYXJhbXM7XG59XG5cbmZ1bmN0aW9uIGNvbnZlcnRTZWFyY2hQYXJhbXNUb0Zvcm1EYXRhKFxuICBzZWFyY2hQYXJhbXM6IFVSTFNlYXJjaFBhcmFtc1xuKTogRm9ybURhdGEge1xuICBsZXQgZm9ybURhdGEgPSBuZXcgRm9ybURhdGEoKTtcbiAgZm9yIChsZXQgW2tleSwgdmFsdWVdIG9mIHNlYXJjaFBhcmFtcy5lbnRyaWVzKCkpIHtcbiAgICBmb3JtRGF0YS5hcHBlbmQoa2V5LCB2YWx1ZSk7XG4gIH1cbiAgcmV0dXJuIGZvcm1EYXRhO1xufVxuXG5mdW5jdGlvbiBwcm9jZXNzUm91dGVMb2FkZXJEYXRhKFxuICBtYXRjaGVzOiBBZ25vc3RpY0RhdGFSb3V0ZU1hdGNoW10sXG4gIG1hdGNoZXNUb0xvYWQ6IEFnbm9zdGljRGF0YVJvdXRlTWF0Y2hbXSxcbiAgcmVzdWx0czogRGF0YVJlc3VsdFtdLFxuICBwZW5kaW5nRXJyb3I6IFJvdXRlRGF0YSB8IHVuZGVmaW5lZCxcbiAgYWN0aXZlRGVmZXJyZWRzOiBNYXA8c3RyaW5nLCBEZWZlcnJlZERhdGE+XG4pOiB7XG4gIGxvYWRlckRhdGE6IFJvdXRlclN0YXRlW1wibG9hZGVyRGF0YVwiXTtcbiAgZXJyb3JzOiBSb3V0ZXJTdGF0ZVtcImVycm9yc1wiXSB8IG51bGw7XG4gIHN0YXR1c0NvZGU6IG51bWJlcjtcbiAgbG9hZGVySGVhZGVyczogUmVjb3JkPHN0cmluZywgSGVhZGVycz47XG59IHtcbiAgLy8gRmlsbCBpbiBsb2FkZXJEYXRhL2Vycm9ycyBmcm9tIG91ciBsb2FkZXJzXG4gIGxldCBsb2FkZXJEYXRhOiBSb3V0ZXJTdGF0ZVtcImxvYWRlckRhdGFcIl0gPSB7fTtcbiAgbGV0IGVycm9yczogUm91dGVyU3RhdGVbXCJlcnJvcnNcIl0gfCBudWxsID0gbnVsbDtcbiAgbGV0IHN0YXR1c0NvZGU6IG51bWJlciB8IHVuZGVmaW5lZDtcbiAgbGV0IGZvdW5kRXJyb3IgPSBmYWxzZTtcbiAgbGV0IGxvYWRlckhlYWRlcnM6IFJlY29yZDxzdHJpbmcsIEhlYWRlcnM+ID0ge307XG5cbiAgLy8gUHJvY2VzcyBsb2FkZXIgcmVzdWx0cyBpbnRvIHN0YXRlLmxvYWRlckRhdGEvc3RhdGUuZXJyb3JzXG4gIHJlc3VsdHMuZm9yRWFjaCgocmVzdWx0LCBpbmRleCkgPT4ge1xuICAgIGxldCBpZCA9IG1hdGNoZXNUb0xvYWRbaW5kZXhdLnJvdXRlLmlkO1xuICAgIGludmFyaWFudChcbiAgICAgICFpc1JlZGlyZWN0UmVzdWx0KHJlc3VsdCksXG4gICAgICBcIkNhbm5vdCBoYW5kbGUgcmVkaXJlY3QgcmVzdWx0cyBpbiBwcm9jZXNzTG9hZGVyRGF0YVwiXG4gICAgKTtcbiAgICBpZiAoaXNFcnJvclJlc3VsdChyZXN1bHQpKSB7XG4gICAgICAvLyBMb29rIHVwd2FyZHMgZnJvbSB0aGUgbWF0Y2hlZCByb3V0ZSBmb3IgdGhlIGNsb3Nlc3QgYW5jZXN0b3JcbiAgICAgIC8vIGVycm9yIGJvdW5kYXJ5LCBkZWZhdWx0aW5nIHRvIHRoZSByb290IG1hdGNoXG4gICAgICBsZXQgYm91bmRhcnlNYXRjaCA9IGZpbmROZWFyZXN0Qm91bmRhcnkobWF0Y2hlcywgaWQpO1xuICAgICAgbGV0IGVycm9yID0gcmVzdWx0LmVycm9yO1xuICAgICAgLy8gSWYgd2UgaGF2ZSBhIHBlbmRpbmcgYWN0aW9uIGVycm9yLCB3ZSByZXBvcnQgaXQgYXQgdGhlIGhpZ2hlc3Qtcm91dGVcbiAgICAgIC8vIHRoYXQgdGhyb3dzIGEgbG9hZGVyIGVycm9yLCBhbmQgdGhlbiBjbGVhciBpdCBvdXQgdG8gaW5kaWNhdGUgdGhhdFxuICAgICAgLy8gaXQgd2FzIGNvbnN1bWVkXG4gICAgICBpZiAocGVuZGluZ0Vycm9yKSB7XG4gICAgICAgIGVycm9yID0gT2JqZWN0LnZhbHVlcyhwZW5kaW5nRXJyb3IpWzBdO1xuICAgICAgICBwZW5kaW5nRXJyb3IgPSB1bmRlZmluZWQ7XG4gICAgICB9XG5cbiAgICAgIGVycm9ycyA9IGVycm9ycyB8fCB7fTtcblxuICAgICAgLy8gUHJlZmVyIGhpZ2hlciBlcnJvciB2YWx1ZXMgaWYgbG93ZXIgZXJyb3JzIGJ1YmJsZSB0byB0aGUgc2FtZSBib3VuZGFyeVxuICAgICAgaWYgKGVycm9yc1tib3VuZGFyeU1hdGNoLnJvdXRlLmlkXSA9PSBudWxsKSB7XG4gICAgICAgIGVycm9yc1tib3VuZGFyeU1hdGNoLnJvdXRlLmlkXSA9IGVycm9yO1xuICAgICAgfVxuXG4gICAgICAvLyBDbGVhciBvdXIgYW55IHByaW9yIGxvYWRlckRhdGEgZm9yIHRoZSB0aHJvd2luZyByb3V0ZVxuICAgICAgbG9hZGVyRGF0YVtpZF0gPSB1bmRlZmluZWQ7XG5cbiAgICAgIC8vIE9uY2Ugd2UgZmluZCBvdXIgZmlyc3QgKGhpZ2hlc3QpIGVycm9yLCB3ZSBzZXQgdGhlIHN0YXR1cyBjb2RlIGFuZFxuICAgICAgLy8gcHJldmVudCBkZWVwZXIgc3RhdHVzIGNvZGVzIGZyb20gb3ZlcnJpZGluZ1xuICAgICAgaWYgKCFmb3VuZEVycm9yKSB7XG4gICAgICAgIGZvdW5kRXJyb3IgPSB0cnVlO1xuICAgICAgICBzdGF0dXNDb2RlID0gaXNSb3V0ZUVycm9yUmVzcG9uc2UocmVzdWx0LmVycm9yKVxuICAgICAgICAgID8gcmVzdWx0LmVycm9yLnN0YXR1c1xuICAgICAgICAgIDogNTAwO1xuICAgICAgfVxuICAgICAgaWYgKHJlc3VsdC5oZWFkZXJzKSB7XG4gICAgICAgIGxvYWRlckhlYWRlcnNbaWRdID0gcmVzdWx0LmhlYWRlcnM7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChpc0RlZmVycmVkUmVzdWx0KHJlc3VsdCkpIHtcbiAgICAgICAgYWN0aXZlRGVmZXJyZWRzLnNldChpZCwgcmVzdWx0LmRlZmVycmVkRGF0YSk7XG4gICAgICAgIGxvYWRlckRhdGFbaWRdID0gcmVzdWx0LmRlZmVycmVkRGF0YS5kYXRhO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbG9hZGVyRGF0YVtpZF0gPSByZXN1bHQuZGF0YTtcbiAgICAgIH1cblxuICAgICAgLy8gRXJyb3Igc3RhdHVzIGNvZGVzIGFsd2F5cyBvdmVycmlkZSBzdWNjZXNzIHN0YXR1cyBjb2RlcywgYnV0IGlmIGFsbFxuICAgICAgLy8gbG9hZGVycyBhcmUgc3VjY2Vzc2Z1bCB3ZSB0YWtlIHRoZSBkZWVwZXN0IHN0YXR1cyBjb2RlLlxuICAgICAgaWYgKFxuICAgICAgICByZXN1bHQuc3RhdHVzQ29kZSAhPSBudWxsICYmXG4gICAgICAgIHJlc3VsdC5zdGF0dXNDb2RlICE9PSAyMDAgJiZcbiAgICAgICAgIWZvdW5kRXJyb3JcbiAgICAgICkge1xuICAgICAgICBzdGF0dXNDb2RlID0gcmVzdWx0LnN0YXR1c0NvZGU7XG4gICAgICB9XG4gICAgICBpZiAocmVzdWx0LmhlYWRlcnMpIHtcbiAgICAgICAgbG9hZGVySGVhZGVyc1tpZF0gPSByZXN1bHQuaGVhZGVycztcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xuXG4gIC8vIElmIHdlIGRpZG4ndCBjb25zdW1lIHRoZSBwZW5kaW5nIGFjdGlvbiBlcnJvciAoaS5lLiwgYWxsIGxvYWRlcnNcbiAgLy8gcmVzb2x2ZWQpLCB0aGVuIGNvbnN1bWUgaXQgaGVyZS4gIEFsc28gY2xlYXIgb3V0IGFueSBsb2FkZXJEYXRhIGZvciB0aGVcbiAgLy8gdGhyb3dpbmcgcm91dGVcbiAgaWYgKHBlbmRpbmdFcnJvcikge1xuICAgIGVycm9ycyA9IHBlbmRpbmdFcnJvcjtcbiAgICBsb2FkZXJEYXRhW09iamVjdC5rZXlzKHBlbmRpbmdFcnJvcilbMF1dID0gdW5kZWZpbmVkO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBsb2FkZXJEYXRhLFxuICAgIGVycm9ycyxcbiAgICBzdGF0dXNDb2RlOiBzdGF0dXNDb2RlIHx8IDIwMCxcbiAgICBsb2FkZXJIZWFkZXJzLFxuICB9O1xufVxuXG5mdW5jdGlvbiBwcm9jZXNzTG9hZGVyRGF0YShcbiAgc3RhdGU6IFJvdXRlclN0YXRlLFxuICBtYXRjaGVzOiBBZ25vc3RpY0RhdGFSb3V0ZU1hdGNoW10sXG4gIG1hdGNoZXNUb0xvYWQ6IEFnbm9zdGljRGF0YVJvdXRlTWF0Y2hbXSxcbiAgcmVzdWx0czogRGF0YVJlc3VsdFtdLFxuICBwZW5kaW5nRXJyb3I6IFJvdXRlRGF0YSB8IHVuZGVmaW5lZCxcbiAgcmV2YWxpZGF0aW5nRmV0Y2hlcnM6IFJldmFsaWRhdGluZ0ZldGNoZXJbXSxcbiAgZmV0Y2hlclJlc3VsdHM6IERhdGFSZXN1bHRbXSxcbiAgYWN0aXZlRGVmZXJyZWRzOiBNYXA8c3RyaW5nLCBEZWZlcnJlZERhdGE+XG4pOiB7XG4gIGxvYWRlckRhdGE6IFJvdXRlclN0YXRlW1wibG9hZGVyRGF0YVwiXTtcbiAgZXJyb3JzPzogUm91dGVyU3RhdGVbXCJlcnJvcnNcIl07XG59IHtcbiAgbGV0IHsgbG9hZGVyRGF0YSwgZXJyb3JzIH0gPSBwcm9jZXNzUm91dGVMb2FkZXJEYXRhKFxuICAgIG1hdGNoZXMsXG4gICAgbWF0Y2hlc1RvTG9hZCxcbiAgICByZXN1bHRzLFxuICAgIHBlbmRpbmdFcnJvcixcbiAgICBhY3RpdmVEZWZlcnJlZHNcbiAgKTtcblxuICAvLyBQcm9jZXNzIHJlc3VsdHMgZnJvbSBvdXIgcmV2YWxpZGF0aW5nIGZldGNoZXJzXG4gIGZvciAobGV0IGluZGV4ID0gMDsgaW5kZXggPCByZXZhbGlkYXRpbmdGZXRjaGVycy5sZW5ndGg7IGluZGV4KyspIHtcbiAgICBsZXQgeyBrZXksIG1hdGNoLCBjb250cm9sbGVyIH0gPSByZXZhbGlkYXRpbmdGZXRjaGVyc1tpbmRleF07XG4gICAgaW52YXJpYW50KFxuICAgICAgZmV0Y2hlclJlc3VsdHMgIT09IHVuZGVmaW5lZCAmJiBmZXRjaGVyUmVzdWx0c1tpbmRleF0gIT09IHVuZGVmaW5lZCxcbiAgICAgIFwiRGlkIG5vdCBmaW5kIGNvcnJlc3BvbmRpbmcgZmV0Y2hlciByZXN1bHRcIlxuICAgICk7XG4gICAgbGV0IHJlc3VsdCA9IGZldGNoZXJSZXN1bHRzW2luZGV4XTtcblxuICAgIC8vIFByb2Nlc3MgZmV0Y2hlciBub24tcmVkaXJlY3QgZXJyb3JzXG4gICAgaWYgKGNvbnRyb2xsZXIgJiYgY29udHJvbGxlci5zaWduYWwuYWJvcnRlZCkge1xuICAgICAgLy8gTm90aGluZyB0byBkbyBmb3IgYWJvcnRlZCBmZXRjaGVyc1xuICAgICAgY29udGludWU7XG4gICAgfSBlbHNlIGlmIChpc0Vycm9yUmVzdWx0KHJlc3VsdCkpIHtcbiAgICAgIGxldCBib3VuZGFyeU1hdGNoID0gZmluZE5lYXJlc3RCb3VuZGFyeShzdGF0ZS5tYXRjaGVzLCBtYXRjaD8ucm91dGUuaWQpO1xuICAgICAgaWYgKCEoZXJyb3JzICYmIGVycm9yc1tib3VuZGFyeU1hdGNoLnJvdXRlLmlkXSkpIHtcbiAgICAgICAgZXJyb3JzID0ge1xuICAgICAgICAgIC4uLmVycm9ycyxcbiAgICAgICAgICBbYm91bmRhcnlNYXRjaC5yb3V0ZS5pZF06IHJlc3VsdC5lcnJvcixcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICAgIHN0YXRlLmZldGNoZXJzLmRlbGV0ZShrZXkpO1xuICAgIH0gZWxzZSBpZiAoaXNSZWRpcmVjdFJlc3VsdChyZXN1bHQpKSB7XG4gICAgICAvLyBTaG91bGQgbmV2ZXIgZ2V0IGhlcmUsIHJlZGlyZWN0cyBzaG91bGQgZ2V0IHByb2Nlc3NlZCBhYm92ZSwgYnV0IHdlXG4gICAgICAvLyBrZWVwIHRoaXMgdG8gdHlwZSBuYXJyb3cgdG8gYSBzdWNjZXNzIHJlc3VsdCBpbiB0aGUgZWxzZVxuICAgICAgaW52YXJpYW50KGZhbHNlLCBcIlVuaGFuZGxlZCBmZXRjaGVyIHJldmFsaWRhdGlvbiByZWRpcmVjdFwiKTtcbiAgICB9IGVsc2UgaWYgKGlzRGVmZXJyZWRSZXN1bHQocmVzdWx0KSkge1xuICAgICAgLy8gU2hvdWxkIG5ldmVyIGdldCBoZXJlLCBkZWZlcnJlZCBkYXRhIHNob3VsZCBiZSBhd2FpdGVkIGZvciBmZXRjaGVyc1xuICAgICAgLy8gaW4gcmVzb2x2ZURlZmVycmVkUmVzdWx0c1xuICAgICAgaW52YXJpYW50KGZhbHNlLCBcIlVuaGFuZGxlZCBmZXRjaGVyIGRlZmVycmVkIGRhdGFcIik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxldCBkb25lRmV0Y2hlciA9IGdldERvbmVGZXRjaGVyKHJlc3VsdC5kYXRhKTtcbiAgICAgIHN0YXRlLmZldGNoZXJzLnNldChrZXksIGRvbmVGZXRjaGVyKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4geyBsb2FkZXJEYXRhLCBlcnJvcnMgfTtcbn1cblxuZnVuY3Rpb24gbWVyZ2VMb2FkZXJEYXRhKFxuICBsb2FkZXJEYXRhOiBSb3V0ZURhdGEsXG4gIG5ld0xvYWRlckRhdGE6IFJvdXRlRGF0YSxcbiAgbWF0Y2hlczogQWdub3N0aWNEYXRhUm91dGVNYXRjaFtdLFxuICBlcnJvcnM6IFJvdXRlRGF0YSB8IG51bGwgfCB1bmRlZmluZWRcbik6IFJvdXRlRGF0YSB7XG4gIGxldCBtZXJnZWRMb2FkZXJEYXRhID0geyAuLi5uZXdMb2FkZXJEYXRhIH07XG4gIGZvciAobGV0IG1hdGNoIG9mIG1hdGNoZXMpIHtcbiAgICBsZXQgaWQgPSBtYXRjaC5yb3V0ZS5pZDtcbiAgICBpZiAobmV3TG9hZGVyRGF0YS5oYXNPd25Qcm9wZXJ0eShpZCkpIHtcbiAgICAgIGlmIChuZXdMb2FkZXJEYXRhW2lkXSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIG1lcmdlZExvYWRlckRhdGFbaWRdID0gbmV3TG9hZGVyRGF0YVtpZF07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBOby1vcCAtIHRoaXMgaXMgc28gd2UgaWdub3JlIGV4aXN0aW5nIGRhdGEgaWYgd2UgaGF2ZSBhIGtleSBpbiB0aGVcbiAgICAgICAgLy8gaW5jb21pbmcgb2JqZWN0IHdpdGggYW4gdW5kZWZpbmVkIHZhbHVlLCB3aGljaCBpcyBob3cgd2UgdW5zZXQgYSBwcmlvclxuICAgICAgICAvLyBsb2FkZXJEYXRhIGlmIHdlIGVuY291bnRlciBhIGxvYWRlciBlcnJvclxuICAgICAgfVxuICAgIH0gZWxzZSBpZiAobG9hZGVyRGF0YVtpZF0gIT09IHVuZGVmaW5lZCAmJiBtYXRjaC5yb3V0ZS5sb2FkZXIpIHtcbiAgICAgIC8vIFByZXNlcnZlIGV4aXN0aW5nIGtleXMgbm90IGluY2x1ZGVkIGluIG5ld0xvYWRlckRhdGEgYW5kIHdoZXJlIGEgbG9hZGVyXG4gICAgICAvLyB3YXNuJ3QgcmVtb3ZlZCBieSBITVJcbiAgICAgIG1lcmdlZExvYWRlckRhdGFbaWRdID0gbG9hZGVyRGF0YVtpZF07XG4gICAgfVxuXG4gICAgaWYgKGVycm9ycyAmJiBlcnJvcnMuaGFzT3duUHJvcGVydHkoaWQpKSB7XG4gICAgICAvLyBEb24ndCBrZWVwIGFueSBsb2FkZXIgZGF0YSBiZWxvdyB0aGUgYm91bmRhcnlcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuICByZXR1cm4gbWVyZ2VkTG9hZGVyRGF0YTtcbn1cblxuLy8gRmluZCB0aGUgbmVhcmVzdCBlcnJvciBib3VuZGFyeSwgbG9va2luZyB1cHdhcmRzIGZyb20gdGhlIGxlYWYgcm91dGUgKG9yIHRoZVxuLy8gcm91dGUgc3BlY2lmaWVkIGJ5IHJvdXRlSWQpIGZvciB0aGUgY2xvc2VzdCBhbmNlc3RvciBlcnJvciBib3VuZGFyeSxcbi8vIGRlZmF1bHRpbmcgdG8gdGhlIHJvb3QgbWF0Y2hcbmZ1bmN0aW9uIGZpbmROZWFyZXN0Qm91bmRhcnkoXG4gIG1hdGNoZXM6IEFnbm9zdGljRGF0YVJvdXRlTWF0Y2hbXSxcbiAgcm91dGVJZD86IHN0cmluZ1xuKTogQWdub3N0aWNEYXRhUm91dGVNYXRjaCB7XG4gIGxldCBlbGlnaWJsZU1hdGNoZXMgPSByb3V0ZUlkXG4gICAgPyBtYXRjaGVzLnNsaWNlKDAsIG1hdGNoZXMuZmluZEluZGV4KChtKSA9PiBtLnJvdXRlLmlkID09PSByb3V0ZUlkKSArIDEpXG4gICAgOiBbLi4ubWF0Y2hlc107XG4gIHJldHVybiAoXG4gICAgZWxpZ2libGVNYXRjaGVzLnJldmVyc2UoKS5maW5kKChtKSA9PiBtLnJvdXRlLmhhc0Vycm9yQm91bmRhcnkgPT09IHRydWUpIHx8XG4gICAgbWF0Y2hlc1swXVxuICApO1xufVxuXG5mdW5jdGlvbiBnZXRTaG9ydENpcmN1aXRNYXRjaGVzKHJvdXRlczogQWdub3N0aWNEYXRhUm91dGVPYmplY3RbXSk6IHtcbiAgbWF0Y2hlczogQWdub3N0aWNEYXRhUm91dGVNYXRjaFtdO1xuICByb3V0ZTogQWdub3N0aWNEYXRhUm91dGVPYmplY3Q7XG59IHtcbiAgLy8gUHJlZmVyIGEgcm9vdCBsYXlvdXQgcm91dGUgaWYgcHJlc2VudCwgb3RoZXJ3aXNlIHNoaW0gaW4gYSByb3V0ZSBvYmplY3RcbiAgbGV0IHJvdXRlID1cbiAgICByb3V0ZXMubGVuZ3RoID09PSAxXG4gICAgICA/IHJvdXRlc1swXVxuICAgICAgOiByb3V0ZXMuZmluZCgocikgPT4gci5pbmRleCB8fCAhci5wYXRoIHx8IHIucGF0aCA9PT0gXCIvXCIpIHx8IHtcbiAgICAgICAgICBpZDogYF9fc2hpbS1lcnJvci1yb3V0ZV9fYCxcbiAgICAgICAgfTtcblxuICByZXR1cm4ge1xuICAgIG1hdGNoZXM6IFtcbiAgICAgIHtcbiAgICAgICAgcGFyYW1zOiB7fSxcbiAgICAgICAgcGF0aG5hbWU6IFwiXCIsXG4gICAgICAgIHBhdGhuYW1lQmFzZTogXCJcIixcbiAgICAgICAgcm91dGUsXG4gICAgICB9LFxuICAgIF0sXG4gICAgcm91dGUsXG4gIH07XG59XG5cbmZ1bmN0aW9uIGdldEludGVybmFsUm91dGVyRXJyb3IoXG4gIHN0YXR1czogbnVtYmVyLFxuICB7XG4gICAgcGF0aG5hbWUsXG4gICAgcm91dGVJZCxcbiAgICBtZXRob2QsXG4gICAgdHlwZSxcbiAgfToge1xuICAgIHBhdGhuYW1lPzogc3RyaW5nO1xuICAgIHJvdXRlSWQ/OiBzdHJpbmc7XG4gICAgbWV0aG9kPzogc3RyaW5nO1xuICAgIHR5cGU/OiBcImRlZmVyLWFjdGlvblwiIHwgXCJpbnZhbGlkLWJvZHlcIjtcbiAgfSA9IHt9XG4pIHtcbiAgbGV0IHN0YXR1c1RleHQgPSBcIlVua25vd24gU2VydmVyIEVycm9yXCI7XG4gIGxldCBlcnJvck1lc3NhZ2UgPSBcIlVua25vd24gQHJlbWl4LXJ1bi9yb3V0ZXIgZXJyb3JcIjtcblxuICBpZiAoc3RhdHVzID09PSA0MDApIHtcbiAgICBzdGF0dXNUZXh0ID0gXCJCYWQgUmVxdWVzdFwiO1xuICAgIGlmIChtZXRob2QgJiYgcGF0aG5hbWUgJiYgcm91dGVJZCkge1xuICAgICAgZXJyb3JNZXNzYWdlID1cbiAgICAgICAgYFlvdSBtYWRlIGEgJHttZXRob2R9IHJlcXVlc3QgdG8gXCIke3BhdGhuYW1lfVwiIGJ1dCBgICtcbiAgICAgICAgYGRpZCBub3QgcHJvdmlkZSBhIFxcYGxvYWRlclxcYCBmb3Igcm91dGUgXCIke3JvdXRlSWR9XCIsIGAgK1xuICAgICAgICBgc28gdGhlcmUgaXMgbm8gd2F5IHRvIGhhbmRsZSB0aGUgcmVxdWVzdC5gO1xuICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gXCJkZWZlci1hY3Rpb25cIikge1xuICAgICAgZXJyb3JNZXNzYWdlID0gXCJkZWZlcigpIGlzIG5vdCBzdXBwb3J0ZWQgaW4gYWN0aW9uc1wiO1xuICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gXCJpbnZhbGlkLWJvZHlcIikge1xuICAgICAgZXJyb3JNZXNzYWdlID0gXCJVbmFibGUgdG8gZW5jb2RlIHN1Ym1pc3Npb24gYm9keVwiO1xuICAgIH1cbiAgfSBlbHNlIGlmIChzdGF0dXMgPT09IDQwMykge1xuICAgIHN0YXR1c1RleHQgPSBcIkZvcmJpZGRlblwiO1xuICAgIGVycm9yTWVzc2FnZSA9IGBSb3V0ZSBcIiR7cm91dGVJZH1cIiBkb2VzIG5vdCBtYXRjaCBVUkwgXCIke3BhdGhuYW1lfVwiYDtcbiAgfSBlbHNlIGlmIChzdGF0dXMgPT09IDQwNCkge1xuICAgIHN0YXR1c1RleHQgPSBcIk5vdCBGb3VuZFwiO1xuICAgIGVycm9yTWVzc2FnZSA9IGBObyByb3V0ZSBtYXRjaGVzIFVSTCBcIiR7cGF0aG5hbWV9XCJgO1xuICB9IGVsc2UgaWYgKHN0YXR1cyA9PT0gNDA1KSB7XG4gICAgc3RhdHVzVGV4dCA9IFwiTWV0aG9kIE5vdCBBbGxvd2VkXCI7XG4gICAgaWYgKG1ldGhvZCAmJiBwYXRobmFtZSAmJiByb3V0ZUlkKSB7XG4gICAgICBlcnJvck1lc3NhZ2UgPVxuICAgICAgICBgWW91IG1hZGUgYSAke21ldGhvZC50b1VwcGVyQ2FzZSgpfSByZXF1ZXN0IHRvIFwiJHtwYXRobmFtZX1cIiBidXQgYCArXG4gICAgICAgIGBkaWQgbm90IHByb3ZpZGUgYW4gXFxgYWN0aW9uXFxgIGZvciByb3V0ZSBcIiR7cm91dGVJZH1cIiwgYCArXG4gICAgICAgIGBzbyB0aGVyZSBpcyBubyB3YXkgdG8gaGFuZGxlIHRoZSByZXF1ZXN0LmA7XG4gICAgfSBlbHNlIGlmIChtZXRob2QpIHtcbiAgICAgIGVycm9yTWVzc2FnZSA9IGBJbnZhbGlkIHJlcXVlc3QgbWV0aG9kIFwiJHttZXRob2QudG9VcHBlckNhc2UoKX1cImA7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG5ldyBFcnJvclJlc3BvbnNlSW1wbChcbiAgICBzdGF0dXMgfHwgNTAwLFxuICAgIHN0YXR1c1RleHQsXG4gICAgbmV3IEVycm9yKGVycm9yTWVzc2FnZSksXG4gICAgdHJ1ZVxuICApO1xufVxuXG4vLyBGaW5kIGFueSByZXR1cm5lZCByZWRpcmVjdCBlcnJvcnMsIHN0YXJ0aW5nIGZyb20gdGhlIGxvd2VzdCBtYXRjaFxuZnVuY3Rpb24gZmluZFJlZGlyZWN0KFxuICByZXN1bHRzOiBEYXRhUmVzdWx0W11cbik6IHsgcmVzdWx0OiBSZWRpcmVjdFJlc3VsdDsgaWR4OiBudW1iZXIgfSB8IHVuZGVmaW5lZCB7XG4gIGZvciAobGV0IGkgPSByZXN1bHRzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgbGV0IHJlc3VsdCA9IHJlc3VsdHNbaV07XG4gICAgaWYgKGlzUmVkaXJlY3RSZXN1bHQocmVzdWx0KSkge1xuICAgICAgcmV0dXJuIHsgcmVzdWx0LCBpZHg6IGkgfTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gc3RyaXBIYXNoRnJvbVBhdGgocGF0aDogVG8pIHtcbiAgbGV0IHBhcnNlZFBhdGggPSB0eXBlb2YgcGF0aCA9PT0gXCJzdHJpbmdcIiA/IHBhcnNlUGF0aChwYXRoKSA6IHBhdGg7XG4gIHJldHVybiBjcmVhdGVQYXRoKHsgLi4ucGFyc2VkUGF0aCwgaGFzaDogXCJcIiB9KTtcbn1cblxuZnVuY3Rpb24gaXNIYXNoQ2hhbmdlT25seShhOiBMb2NhdGlvbiwgYjogTG9jYXRpb24pOiBib29sZWFuIHtcbiAgaWYgKGEucGF0aG5hbWUgIT09IGIucGF0aG5hbWUgfHwgYS5zZWFyY2ggIT09IGIuc2VhcmNoKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgaWYgKGEuaGFzaCA9PT0gXCJcIikge1xuICAgIC8vIC9wYWdlIC0+IC9wYWdlI2hhc2hcbiAgICByZXR1cm4gYi5oYXNoICE9PSBcIlwiO1xuICB9IGVsc2UgaWYgKGEuaGFzaCA9PT0gYi5oYXNoKSB7XG4gICAgLy8gL3BhZ2UjaGFzaCAtPiAvcGFnZSNoYXNoXG4gICAgcmV0dXJuIHRydWU7XG4gIH0gZWxzZSBpZiAoYi5oYXNoICE9PSBcIlwiKSB7XG4gICAgLy8gL3BhZ2UjaGFzaCAtPiAvcGFnZSNvdGhlclxuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgLy8gSWYgdGhlIGhhc2ggaXMgcmVtb3ZlZCB0aGUgYnJvd3NlciB3aWxsIHJlLXBlcmZvcm0gYSByZXF1ZXN0IHRvIHRoZSBzZXJ2ZXJcbiAgLy8gL3BhZ2UjaGFzaCAtPiAvcGFnZVxuICByZXR1cm4gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIGlzRGVmZXJyZWRSZXN1bHQocmVzdWx0OiBEYXRhUmVzdWx0KTogcmVzdWx0IGlzIERlZmVycmVkUmVzdWx0IHtcbiAgcmV0dXJuIHJlc3VsdC50eXBlID09PSBSZXN1bHRUeXBlLmRlZmVycmVkO1xufVxuXG5mdW5jdGlvbiBpc0Vycm9yUmVzdWx0KHJlc3VsdDogRGF0YVJlc3VsdCk6IHJlc3VsdCBpcyBFcnJvclJlc3VsdCB7XG4gIHJldHVybiByZXN1bHQudHlwZSA9PT0gUmVzdWx0VHlwZS5lcnJvcjtcbn1cblxuZnVuY3Rpb24gaXNSZWRpcmVjdFJlc3VsdChyZXN1bHQ/OiBEYXRhUmVzdWx0KTogcmVzdWx0IGlzIFJlZGlyZWN0UmVzdWx0IHtcbiAgcmV0dXJuIChyZXN1bHQgJiYgcmVzdWx0LnR5cGUpID09PSBSZXN1bHRUeXBlLnJlZGlyZWN0O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNEZWZlcnJlZERhdGEodmFsdWU6IGFueSk6IHZhbHVlIGlzIERlZmVycmVkRGF0YSB7XG4gIGxldCBkZWZlcnJlZDogRGVmZXJyZWREYXRhID0gdmFsdWU7XG4gIHJldHVybiAoXG4gICAgZGVmZXJyZWQgJiZcbiAgICB0eXBlb2YgZGVmZXJyZWQgPT09IFwib2JqZWN0XCIgJiZcbiAgICB0eXBlb2YgZGVmZXJyZWQuZGF0YSA9PT0gXCJvYmplY3RcIiAmJlxuICAgIHR5cGVvZiBkZWZlcnJlZC5zdWJzY3JpYmUgPT09IFwiZnVuY3Rpb25cIiAmJlxuICAgIHR5cGVvZiBkZWZlcnJlZC5jYW5jZWwgPT09IFwiZnVuY3Rpb25cIiAmJlxuICAgIHR5cGVvZiBkZWZlcnJlZC5yZXNvbHZlRGF0YSA9PT0gXCJmdW5jdGlvblwiXG4gICk7XG59XG5cbmZ1bmN0aW9uIGlzUmVzcG9uc2UodmFsdWU6IGFueSk6IHZhbHVlIGlzIFJlc3BvbnNlIHtcbiAgcmV0dXJuIChcbiAgICB2YWx1ZSAhPSBudWxsICYmXG4gICAgdHlwZW9mIHZhbHVlLnN0YXR1cyA9PT0gXCJudW1iZXJcIiAmJlxuICAgIHR5cGVvZiB2YWx1ZS5zdGF0dXNUZXh0ID09PSBcInN0cmluZ1wiICYmXG4gICAgdHlwZW9mIHZhbHVlLmhlYWRlcnMgPT09IFwib2JqZWN0XCIgJiZcbiAgICB0eXBlb2YgdmFsdWUuYm9keSAhPT0gXCJ1bmRlZmluZWRcIlxuICApO1xufVxuXG5mdW5jdGlvbiBpc1JlZGlyZWN0UmVzcG9uc2UocmVzdWx0OiBhbnkpOiByZXN1bHQgaXMgUmVzcG9uc2Uge1xuICBpZiAoIWlzUmVzcG9uc2UocmVzdWx0KSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGxldCBzdGF0dXMgPSByZXN1bHQuc3RhdHVzO1xuICBsZXQgbG9jYXRpb24gPSByZXN1bHQuaGVhZGVycy5nZXQoXCJMb2NhdGlvblwiKTtcbiAgcmV0dXJuIHN0YXR1cyA+PSAzMDAgJiYgc3RhdHVzIDw9IDM5OSAmJiBsb2NhdGlvbiAhPSBudWxsO1xufVxuXG5mdW5jdGlvbiBpc1F1ZXJ5Um91dGVSZXNwb25zZShvYmo6IGFueSk6IG9iaiBpcyBRdWVyeVJvdXRlUmVzcG9uc2Uge1xuICByZXR1cm4gKFxuICAgIG9iaiAmJlxuICAgIGlzUmVzcG9uc2Uob2JqLnJlc3BvbnNlKSAmJlxuICAgIChvYmoudHlwZSA9PT0gUmVzdWx0VHlwZS5kYXRhIHx8IG9iai50eXBlID09PSBSZXN1bHRUeXBlLmVycm9yKVxuICApO1xufVxuXG5mdW5jdGlvbiBpc1ZhbGlkTWV0aG9kKG1ldGhvZDogc3RyaW5nKTogbWV0aG9kIGlzIEZvcm1NZXRob2QgfCBWN19Gb3JtTWV0aG9kIHtcbiAgcmV0dXJuIHZhbGlkUmVxdWVzdE1ldGhvZHMuaGFzKG1ldGhvZC50b0xvd2VyQ2FzZSgpIGFzIEZvcm1NZXRob2QpO1xufVxuXG5mdW5jdGlvbiBpc011dGF0aW9uTWV0aG9kKFxuICBtZXRob2Q6IHN0cmluZ1xuKTogbWV0aG9kIGlzIE11dGF0aW9uRm9ybU1ldGhvZCB8IFY3X011dGF0aW9uRm9ybU1ldGhvZCB7XG4gIHJldHVybiB2YWxpZE11dGF0aW9uTWV0aG9kcy5oYXMobWV0aG9kLnRvTG93ZXJDYXNlKCkgYXMgTXV0YXRpb25Gb3JtTWV0aG9kKTtcbn1cblxuYXN5bmMgZnVuY3Rpb24gcmVzb2x2ZURlZmVycmVkUmVzdWx0cyhcbiAgY3VycmVudE1hdGNoZXM6IEFnbm9zdGljRGF0YVJvdXRlTWF0Y2hbXSxcbiAgbWF0Y2hlc1RvTG9hZDogKEFnbm9zdGljRGF0YVJvdXRlTWF0Y2ggfCBudWxsKVtdLFxuICByZXN1bHRzOiBEYXRhUmVzdWx0W10sXG4gIHNpZ25hbHM6IChBYm9ydFNpZ25hbCB8IG51bGwpW10sXG4gIGlzRmV0Y2hlcjogYm9vbGVhbixcbiAgY3VycmVudExvYWRlckRhdGE/OiBSb3V0ZURhdGFcbikge1xuICBmb3IgKGxldCBpbmRleCA9IDA7IGluZGV4IDwgcmVzdWx0cy5sZW5ndGg7IGluZGV4KyspIHtcbiAgICBsZXQgcmVzdWx0ID0gcmVzdWx0c1tpbmRleF07XG4gICAgbGV0IG1hdGNoID0gbWF0Y2hlc1RvTG9hZFtpbmRleF07XG4gICAgLy8gSWYgd2UgZG9uJ3QgaGF2ZSBhIG1hdGNoLCB0aGVuIHdlIGNhbiBoYXZlIGEgZGVmZXJyZWQgcmVzdWx0IHRvIGRvXG4gICAgLy8gYW55dGhpbmcgd2l0aC4gIFRoaXMgaXMgZm9yIHJldmFsaWRhdGluZyBmZXRjaGVycyB3aGVyZSB0aGUgcm91dGUgd2FzXG4gICAgLy8gcmVtb3ZlZCBkdXJpbmcgSE1SXG4gICAgaWYgKCFtYXRjaCkge1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgbGV0IGN1cnJlbnRNYXRjaCA9IGN1cnJlbnRNYXRjaGVzLmZpbmQoXG4gICAgICAobSkgPT4gbS5yb3V0ZS5pZCA9PT0gbWF0Y2ghLnJvdXRlLmlkXG4gICAgKTtcbiAgICBsZXQgaXNSZXZhbGlkYXRpbmdMb2FkZXIgPVxuICAgICAgY3VycmVudE1hdGNoICE9IG51bGwgJiZcbiAgICAgICFpc05ld1JvdXRlSW5zdGFuY2UoY3VycmVudE1hdGNoLCBtYXRjaCkgJiZcbiAgICAgIChjdXJyZW50TG9hZGVyRGF0YSAmJiBjdXJyZW50TG9hZGVyRGF0YVttYXRjaC5yb3V0ZS5pZF0pICE9PSB1bmRlZmluZWQ7XG5cbiAgICBpZiAoaXNEZWZlcnJlZFJlc3VsdChyZXN1bHQpICYmIChpc0ZldGNoZXIgfHwgaXNSZXZhbGlkYXRpbmdMb2FkZXIpKSB7XG4gICAgICAvLyBOb3RlOiB3ZSBkbyBub3QgaGF2ZSB0byB0b3VjaCBhY3RpdmVEZWZlcnJlZHMgaGVyZSBzaW5jZSB3ZSByYWNlIHRoZW1cbiAgICAgIC8vIGFnYWluc3QgdGhlIHNpZ25hbCBpbiByZXNvbHZlRGVmZXJyZWREYXRhIGFuZCB0aGV5J2xsIGdldCBhYm9ydGVkXG4gICAgICAvLyB0aGVyZSBpZiBuZWVkZWRcbiAgICAgIGxldCBzaWduYWwgPSBzaWduYWxzW2luZGV4XTtcbiAgICAgIGludmFyaWFudChcbiAgICAgICAgc2lnbmFsLFxuICAgICAgICBcIkV4cGVjdGVkIGFuIEFib3J0U2lnbmFsIGZvciByZXZhbGlkYXRpbmcgZmV0Y2hlciBkZWZlcnJlZCByZXN1bHRcIlxuICAgICAgKTtcbiAgICAgIGF3YWl0IHJlc29sdmVEZWZlcnJlZERhdGEocmVzdWx0LCBzaWduYWwsIGlzRmV0Y2hlcikudGhlbigocmVzdWx0KSA9PiB7XG4gICAgICAgIGlmIChyZXN1bHQpIHtcbiAgICAgICAgICByZXN1bHRzW2luZGV4XSA9IHJlc3VsdCB8fCByZXN1bHRzW2luZGV4XTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9XG59XG5cbmFzeW5jIGZ1bmN0aW9uIHJlc29sdmVEZWZlcnJlZERhdGEoXG4gIHJlc3VsdDogRGVmZXJyZWRSZXN1bHQsXG4gIHNpZ25hbDogQWJvcnRTaWduYWwsXG4gIHVud3JhcCA9IGZhbHNlXG4pOiBQcm9taXNlPFN1Y2Nlc3NSZXN1bHQgfCBFcnJvclJlc3VsdCB8IHVuZGVmaW5lZD4ge1xuICBsZXQgYWJvcnRlZCA9IGF3YWl0IHJlc3VsdC5kZWZlcnJlZERhdGEucmVzb2x2ZURhdGEoc2lnbmFsKTtcbiAgaWYgKGFib3J0ZWQpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBpZiAodW53cmFwKSB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHR5cGU6IFJlc3VsdFR5cGUuZGF0YSxcbiAgICAgICAgZGF0YTogcmVzdWx0LmRlZmVycmVkRGF0YS51bndyYXBwZWREYXRhLFxuICAgICAgfTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAvLyBIYW5kbGUgYW55IFRyYWNrZWRQcm9taXNlLl9lcnJvciB2YWx1ZXMgZW5jb3VudGVyZWQgd2hpbGUgdW53cmFwcGluZ1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdHlwZTogUmVzdWx0VHlwZS5lcnJvcixcbiAgICAgICAgZXJyb3I6IGUsXG4gICAgICB9O1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB7XG4gICAgdHlwZTogUmVzdWx0VHlwZS5kYXRhLFxuICAgIGRhdGE6IHJlc3VsdC5kZWZlcnJlZERhdGEuZGF0YSxcbiAgfTtcbn1cblxuZnVuY3Rpb24gaGFzTmFrZWRJbmRleFF1ZXJ5KHNlYXJjaDogc3RyaW5nKTogYm9vbGVhbiB7XG4gIHJldHVybiBuZXcgVVJMU2VhcmNoUGFyYW1zKHNlYXJjaCkuZ2V0QWxsKFwiaW5kZXhcIikuc29tZSgodikgPT4gdiA9PT0gXCJcIik7XG59XG5cbmZ1bmN0aW9uIGdldFRhcmdldE1hdGNoKFxuICBtYXRjaGVzOiBBZ25vc3RpY0RhdGFSb3V0ZU1hdGNoW10sXG4gIGxvY2F0aW9uOiBMb2NhdGlvbiB8IHN0cmluZ1xuKSB7XG4gIGxldCBzZWFyY2ggPVxuICAgIHR5cGVvZiBsb2NhdGlvbiA9PT0gXCJzdHJpbmdcIiA/IHBhcnNlUGF0aChsb2NhdGlvbikuc2VhcmNoIDogbG9jYXRpb24uc2VhcmNoO1xuICBpZiAoXG4gICAgbWF0Y2hlc1ttYXRjaGVzLmxlbmd0aCAtIDFdLnJvdXRlLmluZGV4ICYmXG4gICAgaGFzTmFrZWRJbmRleFF1ZXJ5KHNlYXJjaCB8fCBcIlwiKVxuICApIHtcbiAgICAvLyBSZXR1cm4gdGhlIGxlYWYgaW5kZXggcm91dGUgd2hlbiBpbmRleCBpcyBwcmVzZW50XG4gICAgcmV0dXJuIG1hdGNoZXNbbWF0Y2hlcy5sZW5ndGggLSAxXTtcbiAgfVxuICAvLyBPdGhlcndpc2UgZ3JhYiB0aGUgZGVlcGVzdCBcInBhdGggY29udHJpYnV0aW5nXCIgbWF0Y2ggKGlnbm9yaW5nIGluZGV4IGFuZFxuICAvLyBwYXRobGVzcyBsYXlvdXQgcm91dGVzKVxuICBsZXQgcGF0aE1hdGNoZXMgPSBnZXRQYXRoQ29udHJpYnV0aW5nTWF0Y2hlcyhtYXRjaGVzKTtcbiAgcmV0dXJuIHBhdGhNYXRjaGVzW3BhdGhNYXRjaGVzLmxlbmd0aCAtIDFdO1xufVxuXG5mdW5jdGlvbiBnZXRTdWJtaXNzaW9uRnJvbU5hdmlnYXRpb24oXG4gIG5hdmlnYXRpb246IE5hdmlnYXRpb25cbik6IFN1Ym1pc3Npb24gfCB1bmRlZmluZWQge1xuICBsZXQgeyBmb3JtTWV0aG9kLCBmb3JtQWN0aW9uLCBmb3JtRW5jVHlwZSwgdGV4dCwgZm9ybURhdGEsIGpzb24gfSA9XG4gICAgbmF2aWdhdGlvbjtcbiAgaWYgKCFmb3JtTWV0aG9kIHx8ICFmb3JtQWN0aW9uIHx8ICFmb3JtRW5jVHlwZSkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGlmICh0ZXh0ICE9IG51bGwpIHtcbiAgICByZXR1cm4ge1xuICAgICAgZm9ybU1ldGhvZCxcbiAgICAgIGZvcm1BY3Rpb24sXG4gICAgICBmb3JtRW5jVHlwZSxcbiAgICAgIGZvcm1EYXRhOiB1bmRlZmluZWQsXG4gICAgICBqc29uOiB1bmRlZmluZWQsXG4gICAgICB0ZXh0LFxuICAgIH07XG4gIH0gZWxzZSBpZiAoZm9ybURhdGEgIT0gbnVsbCkge1xuICAgIHJldHVybiB7XG4gICAgICBmb3JtTWV0aG9kLFxuICAgICAgZm9ybUFjdGlvbixcbiAgICAgIGZvcm1FbmNUeXBlLFxuICAgICAgZm9ybURhdGEsXG4gICAgICBqc29uOiB1bmRlZmluZWQsXG4gICAgICB0ZXh0OiB1bmRlZmluZWQsXG4gICAgfTtcbiAgfSBlbHNlIGlmIChqc29uICE9PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4ge1xuICAgICAgZm9ybU1ldGhvZCxcbiAgICAgIGZvcm1BY3Rpb24sXG4gICAgICBmb3JtRW5jVHlwZSxcbiAgICAgIGZvcm1EYXRhOiB1bmRlZmluZWQsXG4gICAgICBqc29uLFxuICAgICAgdGV4dDogdW5kZWZpbmVkLFxuICAgIH07XG4gIH1cbn1cblxuZnVuY3Rpb24gZ2V0TG9hZGluZ05hdmlnYXRpb24oXG4gIGxvY2F0aW9uOiBMb2NhdGlvbixcbiAgc3VibWlzc2lvbj86IFN1Ym1pc3Npb25cbik6IE5hdmlnYXRpb25TdGF0ZXNbXCJMb2FkaW5nXCJdIHtcbiAgaWYgKHN1Ym1pc3Npb24pIHtcbiAgICBsZXQgbmF2aWdhdGlvbjogTmF2aWdhdGlvblN0YXRlc1tcIkxvYWRpbmdcIl0gPSB7XG4gICAgICBzdGF0ZTogXCJsb2FkaW5nXCIsXG4gICAgICBsb2NhdGlvbixcbiAgICAgIGZvcm1NZXRob2Q6IHN1Ym1pc3Npb24uZm9ybU1ldGhvZCxcbiAgICAgIGZvcm1BY3Rpb246IHN1Ym1pc3Npb24uZm9ybUFjdGlvbixcbiAgICAgIGZvcm1FbmNUeXBlOiBzdWJtaXNzaW9uLmZvcm1FbmNUeXBlLFxuICAgICAgZm9ybURhdGE6IHN1Ym1pc3Npb24uZm9ybURhdGEsXG4gICAgICBqc29uOiBzdWJtaXNzaW9uLmpzb24sXG4gICAgICB0ZXh0OiBzdWJtaXNzaW9uLnRleHQsXG4gICAgfTtcbiAgICByZXR1cm4gbmF2aWdhdGlvbjtcbiAgfSBlbHNlIHtcbiAgICBsZXQgbmF2aWdhdGlvbjogTmF2aWdhdGlvblN0YXRlc1tcIkxvYWRpbmdcIl0gPSB7XG4gICAgICBzdGF0ZTogXCJsb2FkaW5nXCIsXG4gICAgICBsb2NhdGlvbixcbiAgICAgIGZvcm1NZXRob2Q6IHVuZGVmaW5lZCxcbiAgICAgIGZvcm1BY3Rpb246IHVuZGVmaW5lZCxcbiAgICAgIGZvcm1FbmNUeXBlOiB1bmRlZmluZWQsXG4gICAgICBmb3JtRGF0YTogdW5kZWZpbmVkLFxuICAgICAganNvbjogdW5kZWZpbmVkLFxuICAgICAgdGV4dDogdW5kZWZpbmVkLFxuICAgIH07XG4gICAgcmV0dXJuIG5hdmlnYXRpb247XG4gIH1cbn1cblxuZnVuY3Rpb24gZ2V0U3VibWl0dGluZ05hdmlnYXRpb24oXG4gIGxvY2F0aW9uOiBMb2NhdGlvbixcbiAgc3VibWlzc2lvbjogU3VibWlzc2lvblxuKTogTmF2aWdhdGlvblN0YXRlc1tcIlN1Ym1pdHRpbmdcIl0ge1xuICBsZXQgbmF2aWdhdGlvbjogTmF2aWdhdGlvblN0YXRlc1tcIlN1Ym1pdHRpbmdcIl0gPSB7XG4gICAgc3RhdGU6IFwic3VibWl0dGluZ1wiLFxuICAgIGxvY2F0aW9uLFxuICAgIGZvcm1NZXRob2Q6IHN1Ym1pc3Npb24uZm9ybU1ldGhvZCxcbiAgICBmb3JtQWN0aW9uOiBzdWJtaXNzaW9uLmZvcm1BY3Rpb24sXG4gICAgZm9ybUVuY1R5cGU6IHN1Ym1pc3Npb24uZm9ybUVuY1R5cGUsXG4gICAgZm9ybURhdGE6IHN1Ym1pc3Npb24uZm9ybURhdGEsXG4gICAganNvbjogc3VibWlzc2lvbi5qc29uLFxuICAgIHRleHQ6IHN1Ym1pc3Npb24udGV4dCxcbiAgfTtcbiAgcmV0dXJuIG5hdmlnYXRpb247XG59XG5cbmZ1bmN0aW9uIGdldExvYWRpbmdGZXRjaGVyKFxuICBzdWJtaXNzaW9uPzogU3VibWlzc2lvbixcbiAgZGF0YT86IEZldGNoZXJbXCJkYXRhXCJdXG4pOiBGZXRjaGVyU3RhdGVzW1wiTG9hZGluZ1wiXSB7XG4gIGlmIChzdWJtaXNzaW9uKSB7XG4gICAgbGV0IGZldGNoZXI6IEZldGNoZXJTdGF0ZXNbXCJMb2FkaW5nXCJdID0ge1xuICAgICAgc3RhdGU6IFwibG9hZGluZ1wiLFxuICAgICAgZm9ybU1ldGhvZDogc3VibWlzc2lvbi5mb3JtTWV0aG9kLFxuICAgICAgZm9ybUFjdGlvbjogc3VibWlzc2lvbi5mb3JtQWN0aW9uLFxuICAgICAgZm9ybUVuY1R5cGU6IHN1Ym1pc3Npb24uZm9ybUVuY1R5cGUsXG4gICAgICBmb3JtRGF0YTogc3VibWlzc2lvbi5mb3JtRGF0YSxcbiAgICAgIGpzb246IHN1Ym1pc3Npb24uanNvbixcbiAgICAgIHRleHQ6IHN1Ym1pc3Npb24udGV4dCxcbiAgICAgIGRhdGEsXG4gICAgfTtcbiAgICByZXR1cm4gZmV0Y2hlcjtcbiAgfSBlbHNlIHtcbiAgICBsZXQgZmV0Y2hlcjogRmV0Y2hlclN0YXRlc1tcIkxvYWRpbmdcIl0gPSB7XG4gICAgICBzdGF0ZTogXCJsb2FkaW5nXCIsXG4gICAgICBmb3JtTWV0aG9kOiB1bmRlZmluZWQsXG4gICAgICBmb3JtQWN0aW9uOiB1bmRlZmluZWQsXG4gICAgICBmb3JtRW5jVHlwZTogdW5kZWZpbmVkLFxuICAgICAgZm9ybURhdGE6IHVuZGVmaW5lZCxcbiAgICAgIGpzb246IHVuZGVmaW5lZCxcbiAgICAgIHRleHQ6IHVuZGVmaW5lZCxcbiAgICAgIGRhdGEsXG4gICAgfTtcbiAgICByZXR1cm4gZmV0Y2hlcjtcbiAgfVxufVxuXG5mdW5jdGlvbiBnZXRTdWJtaXR0aW5nRmV0Y2hlcihcbiAgc3VibWlzc2lvbjogU3VibWlzc2lvbixcbiAgZXhpc3RpbmdGZXRjaGVyPzogRmV0Y2hlclxuKTogRmV0Y2hlclN0YXRlc1tcIlN1Ym1pdHRpbmdcIl0ge1xuICBsZXQgZmV0Y2hlcjogRmV0Y2hlclN0YXRlc1tcIlN1Ym1pdHRpbmdcIl0gPSB7XG4gICAgc3RhdGU6IFwic3VibWl0dGluZ1wiLFxuICAgIGZvcm1NZXRob2Q6IHN1Ym1pc3Npb24uZm9ybU1ldGhvZCxcbiAgICBmb3JtQWN0aW9uOiBzdWJtaXNzaW9uLmZvcm1BY3Rpb24sXG4gICAgZm9ybUVuY1R5cGU6IHN1Ym1pc3Npb24uZm9ybUVuY1R5cGUsXG4gICAgZm9ybURhdGE6IHN1Ym1pc3Npb24uZm9ybURhdGEsXG4gICAganNvbjogc3VibWlzc2lvbi5qc29uLFxuICAgIHRleHQ6IHN1Ym1pc3Npb24udGV4dCxcbiAgICBkYXRhOiBleGlzdGluZ0ZldGNoZXIgPyBleGlzdGluZ0ZldGNoZXIuZGF0YSA6IHVuZGVmaW5lZCxcbiAgfTtcbiAgcmV0dXJuIGZldGNoZXI7XG59XG5cbmZ1bmN0aW9uIGdldERvbmVGZXRjaGVyKGRhdGE6IEZldGNoZXJbXCJkYXRhXCJdKTogRmV0Y2hlclN0YXRlc1tcIklkbGVcIl0ge1xuICBsZXQgZmV0Y2hlcjogRmV0Y2hlclN0YXRlc1tcIklkbGVcIl0gPSB7XG4gICAgc3RhdGU6IFwiaWRsZVwiLFxuICAgIGZvcm1NZXRob2Q6IHVuZGVmaW5lZCxcbiAgICBmb3JtQWN0aW9uOiB1bmRlZmluZWQsXG4gICAgZm9ybUVuY1R5cGU6IHVuZGVmaW5lZCxcbiAgICBmb3JtRGF0YTogdW5kZWZpbmVkLFxuICAgIGpzb246IHVuZGVmaW5lZCxcbiAgICB0ZXh0OiB1bmRlZmluZWQsXG4gICAgZGF0YSxcbiAgfTtcbiAgcmV0dXJuIGZldGNoZXI7XG59XG5cbmZ1bmN0aW9uIHJlc3RvcmVBcHBsaWVkVHJhbnNpdGlvbnMoXG4gIF93aW5kb3c6IFdpbmRvdyxcbiAgdHJhbnNpdGlvbnM6IE1hcDxzdHJpbmcsIFNldDxzdHJpbmc+PlxuKSB7XG4gIHRyeSB7XG4gICAgbGV0IHNlc3Npb25Qb3NpdGlvbnMgPSBfd2luZG93LnNlc3Npb25TdG9yYWdlLmdldEl0ZW0oXG4gICAgICBUUkFOU0lUSU9OU19TVE9SQUdFX0tFWVxuICAgICk7XG4gICAgaWYgKHNlc3Npb25Qb3NpdGlvbnMpIHtcbiAgICAgIGxldCBqc29uID0gSlNPTi5wYXJzZShzZXNzaW9uUG9zaXRpb25zKTtcbiAgICAgIGZvciAobGV0IFtrLCB2XSBvZiBPYmplY3QuZW50cmllcyhqc29uIHx8IHt9KSkge1xuICAgICAgICBpZiAodiAmJiBBcnJheS5pc0FycmF5KHYpKSB7XG4gICAgICAgICAgdHJhbnNpdGlvbnMuc2V0KGssIG5ldyBTZXQodiB8fCBbXSkpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9IGNhdGNoIChlKSB7XG4gICAgLy8gbm8tb3AsIHVzZSBkZWZhdWx0IGVtcHR5IG9iamVjdFxuICB9XG59XG5cbmZ1bmN0aW9uIHBlcnNpc3RBcHBsaWVkVHJhbnNpdGlvbnMoXG4gIF93aW5kb3c6IFdpbmRvdyxcbiAgdHJhbnNpdGlvbnM6IE1hcDxzdHJpbmcsIFNldDxzdHJpbmc+PlxuKSB7XG4gIGlmICh0cmFuc2l0aW9ucy5zaXplID4gMCkge1xuICAgIGxldCBqc29uOiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmdbXT4gPSB7fTtcbiAgICBmb3IgKGxldCBbaywgdl0gb2YgdHJhbnNpdGlvbnMpIHtcbiAgICAgIGpzb25ba10gPSBbLi4udl07XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICBfd2luZG93LnNlc3Npb25TdG9yYWdlLnNldEl0ZW0oXG4gICAgICAgIFRSQU5TSVRJT05TX1NUT1JBR0VfS0VZLFxuICAgICAgICBKU09OLnN0cmluZ2lmeShqc29uKVxuICAgICAgKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgd2FybmluZyhcbiAgICAgICAgZmFsc2UsXG4gICAgICAgIGBGYWlsZWQgdG8gc2F2ZSBhcHBsaWVkIHZpZXcgdHJhbnNpdGlvbnMgaW4gc2Vzc2lvblN0b3JhZ2UgKCR7ZXJyb3J9KS5gXG4gICAgICApO1xuICAgIH1cbiAgfVxufVxuXG4vLyNlbmRyZWdpb25cbiIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHR5cGUge1xuICBBZ25vc3RpY0luZGV4Um91dGVPYmplY3QsXG4gIEFnbm9zdGljTm9uSW5kZXhSb3V0ZU9iamVjdCxcbiAgQWdub3N0aWNSb3V0ZU1hdGNoLFxuICBIaXN0b3J5LFxuICBMYXp5Um91dGVGdW5jdGlvbixcbiAgTG9jYXRpb24sXG4gIEFjdGlvbiBhcyBOYXZpZ2F0aW9uVHlwZSxcbiAgUmVsYXRpdmVSb3V0aW5nVHlwZSxcbiAgUm91dGVyLFxuICBTdGF0aWNIYW5kbGVyQ29udGV4dCxcbiAgVG8sXG4gIFRyYWNrZWRQcm9taXNlLFxufSBmcm9tIFwiQHJlbWl4LXJ1bi9yb3V0ZXJcIjtcblxuLy8gQ3JlYXRlIHJlYWN0LXNwZWNpZmljIHR5cGVzIGZyb20gdGhlIGFnbm9zdGljIHR5cGVzIGluIEByZW1peC1ydW4vcm91dGVyIHRvXG4vLyBleHBvcnQgZnJvbSByZWFjdC1yb3V0ZXJcbmV4cG9ydCBpbnRlcmZhY2UgSW5kZXhSb3V0ZU9iamVjdCB7XG4gIGNhc2VTZW5zaXRpdmU/OiBBZ25vc3RpY0luZGV4Um91dGVPYmplY3RbXCJjYXNlU2Vuc2l0aXZlXCJdO1xuICBwYXRoPzogQWdub3N0aWNJbmRleFJvdXRlT2JqZWN0W1wicGF0aFwiXTtcbiAgaWQ/OiBBZ25vc3RpY0luZGV4Um91dGVPYmplY3RbXCJpZFwiXTtcbiAgbG9hZGVyPzogQWdub3N0aWNJbmRleFJvdXRlT2JqZWN0W1wibG9hZGVyXCJdO1xuICBhY3Rpb24/OiBBZ25vc3RpY0luZGV4Um91dGVPYmplY3RbXCJhY3Rpb25cIl07XG4gIGhhc0Vycm9yQm91bmRhcnk/OiBBZ25vc3RpY0luZGV4Um91dGVPYmplY3RbXCJoYXNFcnJvckJvdW5kYXJ5XCJdO1xuICBzaG91bGRSZXZhbGlkYXRlPzogQWdub3N0aWNJbmRleFJvdXRlT2JqZWN0W1wic2hvdWxkUmV2YWxpZGF0ZVwiXTtcbiAgaGFuZGxlPzogQWdub3N0aWNJbmRleFJvdXRlT2JqZWN0W1wiaGFuZGxlXCJdO1xuICBpbmRleDogdHJ1ZTtcbiAgY2hpbGRyZW4/OiB1bmRlZmluZWQ7XG4gIGVsZW1lbnQ/OiBSZWFjdC5SZWFjdE5vZGUgfCBudWxsO1xuICBoeWRyYXRlRmFsbGJhY2tFbGVtZW50PzogUmVhY3QuUmVhY3ROb2RlIHwgbnVsbDtcbiAgZXJyb3JFbGVtZW50PzogUmVhY3QuUmVhY3ROb2RlIHwgbnVsbDtcbiAgQ29tcG9uZW50PzogUmVhY3QuQ29tcG9uZW50VHlwZSB8IG51bGw7XG4gIEh5ZHJhdGVGYWxsYmFjaz86IFJlYWN0LkNvbXBvbmVudFR5cGUgfCBudWxsO1xuICBFcnJvckJvdW5kYXJ5PzogUmVhY3QuQ29tcG9uZW50VHlwZSB8IG51bGw7XG4gIGxhenk/OiBMYXp5Um91dGVGdW5jdGlvbjxSb3V0ZU9iamVjdD47XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgTm9uSW5kZXhSb3V0ZU9iamVjdCB7XG4gIGNhc2VTZW5zaXRpdmU/OiBBZ25vc3RpY05vbkluZGV4Um91dGVPYmplY3RbXCJjYXNlU2Vuc2l0aXZlXCJdO1xuICBwYXRoPzogQWdub3N0aWNOb25JbmRleFJvdXRlT2JqZWN0W1wicGF0aFwiXTtcbiAgaWQ/OiBBZ25vc3RpY05vbkluZGV4Um91dGVPYmplY3RbXCJpZFwiXTtcbiAgbG9hZGVyPzogQWdub3N0aWNOb25JbmRleFJvdXRlT2JqZWN0W1wibG9hZGVyXCJdO1xuICBhY3Rpb24/OiBBZ25vc3RpY05vbkluZGV4Um91dGVPYmplY3RbXCJhY3Rpb25cIl07XG4gIGhhc0Vycm9yQm91bmRhcnk/OiBBZ25vc3RpY05vbkluZGV4Um91dGVPYmplY3RbXCJoYXNFcnJvckJvdW5kYXJ5XCJdO1xuICBzaG91bGRSZXZhbGlkYXRlPzogQWdub3N0aWNOb25JbmRleFJvdXRlT2JqZWN0W1wic2hvdWxkUmV2YWxpZGF0ZVwiXTtcbiAgaGFuZGxlPzogQWdub3N0aWNOb25JbmRleFJvdXRlT2JqZWN0W1wiaGFuZGxlXCJdO1xuICBpbmRleD86IGZhbHNlO1xuICBjaGlsZHJlbj86IFJvdXRlT2JqZWN0W107XG4gIGVsZW1lbnQ/OiBSZWFjdC5SZWFjdE5vZGUgfCBudWxsO1xuICBoeWRyYXRlRmFsbGJhY2tFbGVtZW50PzogUmVhY3QuUmVhY3ROb2RlIHwgbnVsbDtcbiAgZXJyb3JFbGVtZW50PzogUmVhY3QuUmVhY3ROb2RlIHwgbnVsbDtcbiAgQ29tcG9uZW50PzogUmVhY3QuQ29tcG9uZW50VHlwZSB8IG51bGw7XG4gIEh5ZHJhdGVGYWxsYmFjaz86IFJlYWN0LkNvbXBvbmVudFR5cGUgfCBudWxsO1xuICBFcnJvckJvdW5kYXJ5PzogUmVhY3QuQ29tcG9uZW50VHlwZSB8IG51bGw7XG4gIGxhenk/OiBMYXp5Um91dGVGdW5jdGlvbjxSb3V0ZU9iamVjdD47XG59XG5cbmV4cG9ydCB0eXBlIFJvdXRlT2JqZWN0ID0gSW5kZXhSb3V0ZU9iamVjdCB8IE5vbkluZGV4Um91dGVPYmplY3Q7XG5cbmV4cG9ydCB0eXBlIERhdGFSb3V0ZU9iamVjdCA9IFJvdXRlT2JqZWN0ICYge1xuICBjaGlsZHJlbj86IERhdGFSb3V0ZU9iamVjdFtdO1xuICBpZDogc3RyaW5nO1xufTtcblxuZXhwb3J0IGludGVyZmFjZSBSb3V0ZU1hdGNoPFxuICBQYXJhbUtleSBleHRlbmRzIHN0cmluZyA9IHN0cmluZyxcbiAgUm91dGVPYmplY3RUeXBlIGV4dGVuZHMgUm91dGVPYmplY3QgPSBSb3V0ZU9iamVjdFxuPiBleHRlbmRzIEFnbm9zdGljUm91dGVNYXRjaDxQYXJhbUtleSwgUm91dGVPYmplY3RUeXBlPiB7fVxuXG5leHBvcnQgaW50ZXJmYWNlIERhdGFSb3V0ZU1hdGNoIGV4dGVuZHMgUm91dGVNYXRjaDxzdHJpbmcsIERhdGFSb3V0ZU9iamVjdD4ge31cblxuZXhwb3J0IGludGVyZmFjZSBEYXRhUm91dGVyQ29udGV4dE9iamVjdFxuICAvLyBPbWl0IGBmdXR1cmVgIHNpbmNlIHRob3NlIGNhbiBiZSBwdWxsZWQgZnJvbSB0aGUgYHJvdXRlcmBcbiAgLy8gYE5hdmlnYXRpb25Db250ZXh0YCBuZWVkcyBmdXR1cmUgc2luY2UgaXQgZG9lc24ndCBoYXZlIGEgYHJvdXRlcmAgaW4gYWxsIGNhc2VzXG4gIGV4dGVuZHMgT21pdDxOYXZpZ2F0aW9uQ29udGV4dE9iamVjdCwgXCJmdXR1cmVcIj4ge1xuICByb3V0ZXI6IFJvdXRlcjtcbiAgc3RhdGljQ29udGV4dD86IFN0YXRpY0hhbmRsZXJDb250ZXh0O1xufVxuXG5leHBvcnQgY29uc3QgRGF0YVJvdXRlckNvbnRleHQgPVxuICBSZWFjdC5jcmVhdGVDb250ZXh0PERhdGFSb3V0ZXJDb250ZXh0T2JqZWN0IHwgbnVsbD4obnVsbCk7XG5pZiAoX19ERVZfXykge1xuICBEYXRhUm91dGVyQ29udGV4dC5kaXNwbGF5TmFtZSA9IFwiRGF0YVJvdXRlclwiO1xufVxuXG5leHBvcnQgY29uc3QgRGF0YVJvdXRlclN0YXRlQ29udGV4dCA9IFJlYWN0LmNyZWF0ZUNvbnRleHQ8XG4gIFJvdXRlcltcInN0YXRlXCJdIHwgbnVsbFxuPihudWxsKTtcbmlmIChfX0RFVl9fKSB7XG4gIERhdGFSb3V0ZXJTdGF0ZUNvbnRleHQuZGlzcGxheU5hbWUgPSBcIkRhdGFSb3V0ZXJTdGF0ZVwiO1xufVxuXG5leHBvcnQgY29uc3QgQXdhaXRDb250ZXh0ID0gUmVhY3QuY3JlYXRlQ29udGV4dDxUcmFja2VkUHJvbWlzZSB8IG51bGw+KG51bGwpO1xuaWYgKF9fREVWX18pIHtcbiAgQXdhaXRDb250ZXh0LmRpc3BsYXlOYW1lID0gXCJBd2FpdFwiO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIE5hdmlnYXRlT3B0aW9ucyB7XG4gIHJlcGxhY2U/OiBib29sZWFuO1xuICBzdGF0ZT86IGFueTtcbiAgcHJldmVudFNjcm9sbFJlc2V0PzogYm9vbGVhbjtcbiAgcmVsYXRpdmU/OiBSZWxhdGl2ZVJvdXRpbmdUeXBlO1xuICB1bnN0YWJsZV9mbHVzaFN5bmM/OiBib29sZWFuO1xuICB1bnN0YWJsZV92aWV3VHJhbnNpdGlvbj86IGJvb2xlYW47XG59XG5cbi8qKlxuICogQSBOYXZpZ2F0b3IgaXMgYSBcImxvY2F0aW9uIGNoYW5nZXJcIjsgaXQncyBob3cgeW91IGdldCB0byBkaWZmZXJlbnQgbG9jYXRpb25zLlxuICpcbiAqIEV2ZXJ5IGhpc3RvcnkgaW5zdGFuY2UgY29uZm9ybXMgdG8gdGhlIE5hdmlnYXRvciBpbnRlcmZhY2UsIGJ1dCB0aGVcbiAqIGRpc3RpbmN0aW9uIGlzIHVzZWZ1bCBwcmltYXJpbHkgd2hlbiBpdCBjb21lcyB0byB0aGUgbG93LWxldmVsIGA8Um91dGVyPmAgQVBJXG4gKiB3aGVyZSBib3RoIHRoZSBsb2NhdGlvbiBhbmQgYSBuYXZpZ2F0b3IgbXVzdCBiZSBwcm92aWRlZCBzZXBhcmF0ZWx5IGluIG9yZGVyXG4gKiB0byBhdm9pZCBcInRlYXJpbmdcIiB0aGF0IG1heSBvY2N1ciBpbiBhIHN1c3BlbnNlLWVuYWJsZWQgYXBwIGlmIHRoZSBhY3Rpb25cbiAqIGFuZC9vciBsb2NhdGlvbiB3ZXJlIHRvIGJlIHJlYWQgZGlyZWN0bHkgZnJvbSB0aGUgaGlzdG9yeSBpbnN0YW5jZS5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBOYXZpZ2F0b3Ige1xuICBjcmVhdGVIcmVmOiBIaXN0b3J5W1wiY3JlYXRlSHJlZlwiXTtcbiAgLy8gT3B0aW9uYWwgZm9yIGJhY2t3YXJkcy1jb21wYXQgd2l0aCBSb3V0ZXIvSGlzdG9yeVJvdXRlciB1c2FnZSAoZWRnZSBjYXNlKVxuICBlbmNvZGVMb2NhdGlvbj86IEhpc3RvcnlbXCJlbmNvZGVMb2NhdGlvblwiXTtcbiAgZ286IEhpc3RvcnlbXCJnb1wiXTtcbiAgcHVzaCh0bzogVG8sIHN0YXRlPzogYW55LCBvcHRzPzogTmF2aWdhdGVPcHRpb25zKTogdm9pZDtcbiAgcmVwbGFjZSh0bzogVG8sIHN0YXRlPzogYW55LCBvcHRzPzogTmF2aWdhdGVPcHRpb25zKTogdm9pZDtcbn1cblxuaW50ZXJmYWNlIE5hdmlnYXRpb25Db250ZXh0T2JqZWN0IHtcbiAgYmFzZW5hbWU6IHN0cmluZztcbiAgbmF2aWdhdG9yOiBOYXZpZ2F0b3I7XG4gIHN0YXRpYzogYm9vbGVhbjtcbiAgZnV0dXJlOiB7XG4gICAgdjdfcmVsYXRpdmVTcGxhdFBhdGg6IGJvb2xlYW47XG4gIH07XG59XG5cbmV4cG9ydCBjb25zdCBOYXZpZ2F0aW9uQ29udGV4dCA9IFJlYWN0LmNyZWF0ZUNvbnRleHQ8TmF2aWdhdGlvbkNvbnRleHRPYmplY3Q+KFxuICBudWxsIVxuKTtcblxuaWYgKF9fREVWX18pIHtcbiAgTmF2aWdhdGlvbkNvbnRleHQuZGlzcGxheU5hbWUgPSBcIk5hdmlnYXRpb25cIjtcbn1cblxuaW50ZXJmYWNlIExvY2F0aW9uQ29udGV4dE9iamVjdCB7XG4gIGxvY2F0aW9uOiBMb2NhdGlvbjtcbiAgbmF2aWdhdGlvblR5cGU6IE5hdmlnYXRpb25UeXBlO1xufVxuXG5leHBvcnQgY29uc3QgTG9jYXRpb25Db250ZXh0ID0gUmVhY3QuY3JlYXRlQ29udGV4dDxMb2NhdGlvbkNvbnRleHRPYmplY3Q+KFxuICBudWxsIVxuKTtcblxuaWYgKF9fREVWX18pIHtcbiAgTG9jYXRpb25Db250ZXh0LmRpc3BsYXlOYW1lID0gXCJMb2NhdGlvblwiO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFJvdXRlQ29udGV4dE9iamVjdCB7XG4gIG91dGxldDogUmVhY3QuUmVhY3RFbGVtZW50IHwgbnVsbDtcbiAgbWF0Y2hlczogUm91dGVNYXRjaFtdO1xuICBpc0RhdGFSb3V0ZTogYm9vbGVhbjtcbn1cblxuZXhwb3J0IGNvbnN0IFJvdXRlQ29udGV4dCA9IFJlYWN0LmNyZWF0ZUNvbnRleHQ8Um91dGVDb250ZXh0T2JqZWN0Pih7XG4gIG91dGxldDogbnVsbCxcbiAgbWF0Y2hlczogW10sXG4gIGlzRGF0YVJvdXRlOiBmYWxzZSxcbn0pO1xuXG5pZiAoX19ERVZfXykge1xuICBSb3V0ZUNvbnRleHQuZGlzcGxheU5hbWUgPSBcIlJvdXRlXCI7XG59XG5cbmV4cG9ydCBjb25zdCBSb3V0ZUVycm9yQ29udGV4dCA9IFJlYWN0LmNyZWF0ZUNvbnRleHQ8YW55PihudWxsKTtcblxuaWYgKF9fREVWX18pIHtcbiAgUm91dGVFcnJvckNvbnRleHQuZGlzcGxheU5hbWUgPSBcIlJvdXRlRXJyb3JcIjtcbn1cbiIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHR5cGUge1xuICBCbG9ja2VyLFxuICBCbG9ja2VyRnVuY3Rpb24sXG4gIExvY2F0aW9uLFxuICBQYXJhbVBhcnNlS2V5LFxuICBQYXJhbXMsXG4gIFBhdGgsXG4gIFBhdGhNYXRjaCxcbiAgUGF0aFBhdHRlcm4sXG4gIFJlbGF0aXZlUm91dGluZ1R5cGUsXG4gIFJvdXRlciBhcyBSZW1peFJvdXRlcixcbiAgUmV2YWxpZGF0aW9uU3RhdGUsXG4gIFRvLFxuICBVSU1hdGNoLFxufSBmcm9tIFwiQHJlbWl4LXJ1bi9yb3V0ZXJcIjtcbmltcG9ydCB7XG4gIElETEVfQkxPQ0tFUixcbiAgQWN0aW9uIGFzIE5hdmlnYXRpb25UeXBlLFxuICBVTlNBRkVfY29udmVydFJvdXRlTWF0Y2hUb1VpTWF0Y2ggYXMgY29udmVydFJvdXRlTWF0Y2hUb1VpTWF0Y2gsXG4gIFVOU0FGRV9nZXRSZXNvbHZlVG9NYXRjaGVzIGFzIGdldFJlc29sdmVUb01hdGNoZXMsXG4gIFVOU0FGRV9pbnZhcmlhbnQgYXMgaW52YXJpYW50LFxuICBpc1JvdXRlRXJyb3JSZXNwb25zZSxcbiAgam9pblBhdGhzLFxuICBtYXRjaFBhdGgsXG4gIG1hdGNoUm91dGVzLFxuICBwYXJzZVBhdGgsXG4gIHJlc29sdmVUbyxcbiAgc3RyaXBCYXNlbmFtZSxcbiAgVU5TQUZFX3dhcm5pbmcgYXMgd2FybmluZyxcbn0gZnJvbSBcIkByZW1peC1ydW4vcm91dGVyXCI7XG5cbmltcG9ydCB0eXBlIHtcbiAgRGF0YVJvdXRlTWF0Y2gsXG4gIE5hdmlnYXRlT3B0aW9ucyxcbiAgUm91dGVDb250ZXh0T2JqZWN0LFxuICBSb3V0ZU1hdGNoLFxuICBSb3V0ZU9iamVjdCxcbn0gZnJvbSBcIi4vY29udGV4dFwiO1xuaW1wb3J0IHtcbiAgQXdhaXRDb250ZXh0LFxuICBEYXRhUm91dGVyQ29udGV4dCxcbiAgRGF0YVJvdXRlclN0YXRlQ29udGV4dCxcbiAgTG9jYXRpb25Db250ZXh0LFxuICBOYXZpZ2F0aW9uQ29udGV4dCxcbiAgUm91dGVDb250ZXh0LFxuICBSb3V0ZUVycm9yQ29udGV4dCxcbn0gZnJvbSBcIi4vY29udGV4dFwiO1xuXG4vKipcbiAqIFJldHVybnMgdGhlIGZ1bGwgaHJlZiBmb3IgdGhlIGdpdmVuIFwidG9cIiB2YWx1ZS4gVGhpcyBpcyB1c2VmdWwgZm9yIGJ1aWxkaW5nXG4gKiBjdXN0b20gbGlua3MgdGhhdCBhcmUgYWxzbyBhY2Nlc3NpYmxlIGFuZCBwcmVzZXJ2ZSByaWdodC1jbGljayBiZWhhdmlvci5cbiAqXG4gKiBAc2VlIGh0dHBzOi8vcmVhY3Ryb3V0ZXIuY29tL2hvb2tzL3VzZS1ocmVmXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB1c2VIcmVmKFxuICB0bzogVG8sXG4gIHsgcmVsYXRpdmUgfTogeyByZWxhdGl2ZT86IFJlbGF0aXZlUm91dGluZ1R5cGUgfSA9IHt9XG4pOiBzdHJpbmcge1xuICBpbnZhcmlhbnQoXG4gICAgdXNlSW5Sb3V0ZXJDb250ZXh0KCksXG4gICAgLy8gVE9ETzogVGhpcyBlcnJvciBpcyBwcm9iYWJseSBiZWNhdXNlIHRoZXkgc29tZWhvdyBoYXZlIDIgdmVyc2lvbnMgb2YgdGhlXG4gICAgLy8gcm91dGVyIGxvYWRlZC4gV2UgY2FuIGhlbHAgdGhlbSB1bmRlcnN0YW5kIGhvdyB0byBhdm9pZCB0aGF0LlxuICAgIGB1c2VIcmVmKCkgbWF5IGJlIHVzZWQgb25seSBpbiB0aGUgY29udGV4dCBvZiBhIDxSb3V0ZXI+IGNvbXBvbmVudC5gXG4gICk7XG5cbiAgbGV0IHsgYmFzZW5hbWUsIG5hdmlnYXRvciB9ID0gUmVhY3QudXNlQ29udGV4dChOYXZpZ2F0aW9uQ29udGV4dCk7XG4gIGxldCB7IGhhc2gsIHBhdGhuYW1lLCBzZWFyY2ggfSA9IHVzZVJlc29sdmVkUGF0aCh0bywgeyByZWxhdGl2ZSB9KTtcblxuICBsZXQgam9pbmVkUGF0aG5hbWUgPSBwYXRobmFtZTtcblxuICAvLyBJZiB3ZSdyZSBvcGVyYXRpbmcgd2l0aGluIGEgYmFzZW5hbWUsIHByZXBlbmQgaXQgdG8gdGhlIHBhdGhuYW1lIHByaW9yXG4gIC8vIHRvIGNyZWF0aW5nIHRoZSBocmVmLiAgSWYgdGhpcyBpcyBhIHJvb3QgbmF2aWdhdGlvbiwgdGhlbiBqdXN0IHVzZSB0aGUgcmF3XG4gIC8vIGJhc2VuYW1lIHdoaWNoIGFsbG93cyB0aGUgYmFzZW5hbWUgdG8gaGF2ZSBmdWxsIGNvbnRyb2wgb3ZlciB0aGUgcHJlc2VuY2VcbiAgLy8gb2YgYSB0cmFpbGluZyBzbGFzaCBvbiByb290IGxpbmtzXG4gIGlmIChiYXNlbmFtZSAhPT0gXCIvXCIpIHtcbiAgICBqb2luZWRQYXRobmFtZSA9XG4gICAgICBwYXRobmFtZSA9PT0gXCIvXCIgPyBiYXNlbmFtZSA6IGpvaW5QYXRocyhbYmFzZW5hbWUsIHBhdGhuYW1lXSk7XG4gIH1cblxuICByZXR1cm4gbmF2aWdhdG9yLmNyZWF0ZUhyZWYoeyBwYXRobmFtZTogam9pbmVkUGF0aG5hbWUsIHNlYXJjaCwgaGFzaCB9KTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgdGhpcyBjb21wb25lbnQgaXMgYSBkZXNjZW5kYW50IG9mIGEgYDxSb3V0ZXI+YC5cbiAqXG4gKiBAc2VlIGh0dHBzOi8vcmVhY3Ryb3V0ZXIuY29tL2hvb2tzL3VzZS1pbi1yb3V0ZXItY29udGV4dFxuICovXG5leHBvcnQgZnVuY3Rpb24gdXNlSW5Sb3V0ZXJDb250ZXh0KCk6IGJvb2xlYW4ge1xuICByZXR1cm4gUmVhY3QudXNlQ29udGV4dChMb2NhdGlvbkNvbnRleHQpICE9IG51bGw7XG59XG5cbi8qKlxuICogUmV0dXJucyB0aGUgY3VycmVudCBsb2NhdGlvbiBvYmplY3QsIHdoaWNoIHJlcHJlc2VudHMgdGhlIGN1cnJlbnQgVVJMIGluIHdlYlxuICogYnJvd3NlcnMuXG4gKlxuICogTm90ZTogSWYgeW91J3JlIHVzaW5nIHRoaXMgaXQgbWF5IG1lYW4geW91J3JlIGRvaW5nIHNvbWUgb2YgeW91ciBvd25cbiAqIFwicm91dGluZ1wiIGluIHlvdXIgYXBwLCBhbmQgd2UnZCBsaWtlIHRvIGtub3cgd2hhdCB5b3VyIHVzZSBjYXNlIGlzLiBXZSBtYXlcbiAqIGJlIGFibGUgdG8gcHJvdmlkZSBzb21ldGhpbmcgaGlnaGVyLWxldmVsIHRvIGJldHRlciBzdWl0IHlvdXIgbmVlZHMuXG4gKlxuICogQHNlZSBodHRwczovL3JlYWN0cm91dGVyLmNvbS9ob29rcy91c2UtbG9jYXRpb25cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHVzZUxvY2F0aW9uKCk6IExvY2F0aW9uIHtcbiAgaW52YXJpYW50KFxuICAgIHVzZUluUm91dGVyQ29udGV4dCgpLFxuICAgIC8vIFRPRE86IFRoaXMgZXJyb3IgaXMgcHJvYmFibHkgYmVjYXVzZSB0aGV5IHNvbWVob3cgaGF2ZSAyIHZlcnNpb25zIG9mIHRoZVxuICAgIC8vIHJvdXRlciBsb2FkZWQuIFdlIGNhbiBoZWxwIHRoZW0gdW5kZXJzdGFuZCBob3cgdG8gYXZvaWQgdGhhdC5cbiAgICBgdXNlTG9jYXRpb24oKSBtYXkgYmUgdXNlZCBvbmx5IGluIHRoZSBjb250ZXh0IG9mIGEgPFJvdXRlcj4gY29tcG9uZW50LmBcbiAgKTtcblxuICByZXR1cm4gUmVhY3QudXNlQ29udGV4dChMb2NhdGlvbkNvbnRleHQpLmxvY2F0aW9uO1xufVxuXG4vKipcbiAqIFJldHVybnMgdGhlIGN1cnJlbnQgbmF2aWdhdGlvbiBhY3Rpb24gd2hpY2ggZGVzY3JpYmVzIGhvdyB0aGUgcm91dGVyIGNhbWUgdG9cbiAqIHRoZSBjdXJyZW50IGxvY2F0aW9uLCBlaXRoZXIgYnkgYSBwb3AsIHB1c2gsIG9yIHJlcGxhY2Ugb24gdGhlIGhpc3Rvcnkgc3RhY2suXG4gKlxuICogQHNlZSBodHRwczovL3JlYWN0cm91dGVyLmNvbS9ob29rcy91c2UtbmF2aWdhdGlvbi10eXBlXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB1c2VOYXZpZ2F0aW9uVHlwZSgpOiBOYXZpZ2F0aW9uVHlwZSB7XG4gIHJldHVybiBSZWFjdC51c2VDb250ZXh0KExvY2F0aW9uQ29udGV4dCkubmF2aWdhdGlvblR5cGU7XG59XG5cbi8qKlxuICogUmV0dXJucyBhIFBhdGhNYXRjaCBvYmplY3QgaWYgdGhlIGdpdmVuIHBhdHRlcm4gbWF0Y2hlcyB0aGUgY3VycmVudCBVUkwuXG4gKiBUaGlzIGlzIHVzZWZ1bCBmb3IgY29tcG9uZW50cyB0aGF0IG5lZWQgdG8ga25vdyBcImFjdGl2ZVwiIHN0YXRlLCBlLmcuXG4gKiBgPE5hdkxpbms+YC5cbiAqXG4gKiBAc2VlIGh0dHBzOi8vcmVhY3Ryb3V0ZXIuY29tL2hvb2tzL3VzZS1tYXRjaFxuICovXG5leHBvcnQgZnVuY3Rpb24gdXNlTWF0Y2g8XG4gIFBhcmFtS2V5IGV4dGVuZHMgUGFyYW1QYXJzZUtleTxQYXRoPixcbiAgUGF0aCBleHRlbmRzIHN0cmluZ1xuPihwYXR0ZXJuOiBQYXRoUGF0dGVybjxQYXRoPiB8IFBhdGgpOiBQYXRoTWF0Y2g8UGFyYW1LZXk+IHwgbnVsbCB7XG4gIGludmFyaWFudChcbiAgICB1c2VJblJvdXRlckNvbnRleHQoKSxcbiAgICAvLyBUT0RPOiBUaGlzIGVycm9yIGlzIHByb2JhYmx5IGJlY2F1c2UgdGhleSBzb21laG93IGhhdmUgMiB2ZXJzaW9ucyBvZiB0aGVcbiAgICAvLyByb3V0ZXIgbG9hZGVkLiBXZSBjYW4gaGVscCB0aGVtIHVuZGVyc3RhbmQgaG93IHRvIGF2b2lkIHRoYXQuXG4gICAgYHVzZU1hdGNoKCkgbWF5IGJlIHVzZWQgb25seSBpbiB0aGUgY29udGV4dCBvZiBhIDxSb3V0ZXI+IGNvbXBvbmVudC5gXG4gICk7XG5cbiAgbGV0IHsgcGF0aG5hbWUgfSA9IHVzZUxvY2F0aW9uKCk7XG4gIHJldHVybiBSZWFjdC51c2VNZW1vKFxuICAgICgpID0+IG1hdGNoUGF0aDxQYXJhbUtleSwgUGF0aD4ocGF0dGVybiwgcGF0aG5hbWUpLFxuICAgIFtwYXRobmFtZSwgcGF0dGVybl1cbiAgKTtcbn1cblxuLyoqXG4gKiBUaGUgaW50ZXJmYWNlIGZvciB0aGUgbmF2aWdhdGUoKSBmdW5jdGlvbiByZXR1cm5lZCBmcm9tIHVzZU5hdmlnYXRlKCkuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgTmF2aWdhdGVGdW5jdGlvbiB7XG4gICh0bzogVG8sIG9wdGlvbnM/OiBOYXZpZ2F0ZU9wdGlvbnMpOiB2b2lkO1xuICAoZGVsdGE6IG51bWJlcik6IHZvaWQ7XG59XG5cbmNvbnN0IG5hdmlnYXRlRWZmZWN0V2FybmluZyA9XG4gIGBZb3Ugc2hvdWxkIGNhbGwgbmF2aWdhdGUoKSBpbiBhIFJlYWN0LnVzZUVmZmVjdCgpLCBub3Qgd2hlbiBgICtcbiAgYHlvdXIgY29tcG9uZW50IGlzIGZpcnN0IHJlbmRlcmVkLmA7XG5cbi8vIE11dGUgd2FybmluZ3MgZm9yIGNhbGxzIHRvIHVzZU5hdmlnYXRlIGluIFNTUiBlbnZpcm9ubWVudHNcbmZ1bmN0aW9uIHVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QoXG4gIGNiOiBQYXJhbWV0ZXJzPHR5cGVvZiBSZWFjdC51c2VMYXlvdXRFZmZlY3Q+WzBdXG4pIHtcbiAgbGV0IGlzU3RhdGljID0gUmVhY3QudXNlQ29udGV4dChOYXZpZ2F0aW9uQ29udGV4dCkuc3RhdGljO1xuICBpZiAoIWlzU3RhdGljKSB7XG4gICAgLy8gV2Ugc2hvdWxkIGJlIGFibGUgdG8gZ2V0IHJpZCBvZiB0aGlzIG9uY2UgcmVhY3QgMTguMyBpcyByZWxlYXNlZFxuICAgIC8vIFNlZTogaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlYWN0L3B1bGwvMjYzOTVcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QtaG9va3MvcnVsZXMtb2YtaG9va3NcbiAgICBSZWFjdC51c2VMYXlvdXRFZmZlY3QoY2IpO1xuICB9XG59XG5cbi8qKlxuICogUmV0dXJucyBhbiBpbXBlcmF0aXZlIG1ldGhvZCBmb3IgY2hhbmdpbmcgdGhlIGxvY2F0aW9uLiBVc2VkIGJ5IGA8TGluaz5gcywgYnV0XG4gKiBtYXkgYWxzbyBiZSB1c2VkIGJ5IG90aGVyIGVsZW1lbnRzIHRvIGNoYW5nZSB0aGUgbG9jYXRpb24uXG4gKlxuICogQHNlZSBodHRwczovL3JlYWN0cm91dGVyLmNvbS9ob29rcy91c2UtbmF2aWdhdGVcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHVzZU5hdmlnYXRlKCk6IE5hdmlnYXRlRnVuY3Rpb24ge1xuICBsZXQgeyBpc0RhdGFSb3V0ZSB9ID0gUmVhY3QudXNlQ29udGV4dChSb3V0ZUNvbnRleHQpO1xuICAvLyBDb25kaXRpb25hbCB1c2FnZSBpcyBPSyBoZXJlIGJlY2F1c2UgdGhlIHVzYWdlIG9mIGEgZGF0YSByb3V0ZXIgaXMgc3RhdGljXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC1ob29rcy9ydWxlcy1vZi1ob29rc1xuICByZXR1cm4gaXNEYXRhUm91dGUgPyB1c2VOYXZpZ2F0ZVN0YWJsZSgpIDogdXNlTmF2aWdhdGVVbnN0YWJsZSgpO1xufVxuXG5mdW5jdGlvbiB1c2VOYXZpZ2F0ZVVuc3RhYmxlKCk6IE5hdmlnYXRlRnVuY3Rpb24ge1xuICBpbnZhcmlhbnQoXG4gICAgdXNlSW5Sb3V0ZXJDb250ZXh0KCksXG4gICAgLy8gVE9ETzogVGhpcyBlcnJvciBpcyBwcm9iYWJseSBiZWNhdXNlIHRoZXkgc29tZWhvdyBoYXZlIDIgdmVyc2lvbnMgb2YgdGhlXG4gICAgLy8gcm91dGVyIGxvYWRlZC4gV2UgY2FuIGhlbHAgdGhlbSB1bmRlcnN0YW5kIGhvdyB0byBhdm9pZCB0aGF0LlxuICAgIGB1c2VOYXZpZ2F0ZSgpIG1heSBiZSB1c2VkIG9ubHkgaW4gdGhlIGNvbnRleHQgb2YgYSA8Um91dGVyPiBjb21wb25lbnQuYFxuICApO1xuXG4gIGxldCBkYXRhUm91dGVyQ29udGV4dCA9IFJlYWN0LnVzZUNvbnRleHQoRGF0YVJvdXRlckNvbnRleHQpO1xuICBsZXQgeyBiYXNlbmFtZSwgZnV0dXJlLCBuYXZpZ2F0b3IgfSA9IFJlYWN0LnVzZUNvbnRleHQoTmF2aWdhdGlvbkNvbnRleHQpO1xuICBsZXQgeyBtYXRjaGVzIH0gPSBSZWFjdC51c2VDb250ZXh0KFJvdXRlQ29udGV4dCk7XG4gIGxldCB7IHBhdGhuYW1lOiBsb2NhdGlvblBhdGhuYW1lIH0gPSB1c2VMb2NhdGlvbigpO1xuXG4gIGxldCByb3V0ZVBhdGhuYW1lc0pzb24gPSBKU09OLnN0cmluZ2lmeShcbiAgICBnZXRSZXNvbHZlVG9NYXRjaGVzKG1hdGNoZXMsIGZ1dHVyZS52N19yZWxhdGl2ZVNwbGF0UGF0aClcbiAgKTtcblxuICBsZXQgYWN0aXZlUmVmID0gUmVhY3QudXNlUmVmKGZhbHNlKTtcbiAgdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdCgoKSA9PiB7XG4gICAgYWN0aXZlUmVmLmN1cnJlbnQgPSB0cnVlO1xuICB9KTtcblxuICBsZXQgbmF2aWdhdGU6IE5hdmlnYXRlRnVuY3Rpb24gPSBSZWFjdC51c2VDYWxsYmFjayhcbiAgICAodG86IFRvIHwgbnVtYmVyLCBvcHRpb25zOiBOYXZpZ2F0ZU9wdGlvbnMgPSB7fSkgPT4ge1xuICAgICAgd2FybmluZyhhY3RpdmVSZWYuY3VycmVudCwgbmF2aWdhdGVFZmZlY3RXYXJuaW5nKTtcblxuICAgICAgLy8gU2hvcnQgY2lyY3VpdCBoZXJlIHNpbmNlIGlmIHRoaXMgaGFwcGVucyBvbiBmaXJzdCByZW5kZXIgdGhlIG5hdmlnYXRlXG4gICAgICAvLyBpcyB1c2VsZXNzIGJlY2F1c2Ugd2UgaGF2ZW4ndCB3aXJlZCB1cCBvdXIgaGlzdG9yeSBsaXN0ZW5lciB5ZXRcbiAgICAgIGlmICghYWN0aXZlUmVmLmN1cnJlbnQpIHJldHVybjtcblxuICAgICAgaWYgKHR5cGVvZiB0byA9PT0gXCJudW1iZXJcIikge1xuICAgICAgICBuYXZpZ2F0b3IuZ28odG8pO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGxldCBwYXRoID0gcmVzb2x2ZVRvKFxuICAgICAgICB0byxcbiAgICAgICAgSlNPTi5wYXJzZShyb3V0ZVBhdGhuYW1lc0pzb24pLFxuICAgICAgICBsb2NhdGlvblBhdGhuYW1lLFxuICAgICAgICBvcHRpb25zLnJlbGF0aXZlID09PSBcInBhdGhcIlxuICAgICAgKTtcblxuICAgICAgLy8gSWYgd2UncmUgb3BlcmF0aW5nIHdpdGhpbiBhIGJhc2VuYW1lLCBwcmVwZW5kIGl0IHRvIHRoZSBwYXRobmFtZSBwcmlvclxuICAgICAgLy8gdG8gaGFuZGluZyBvZmYgdG8gaGlzdG9yeSAoYnV0IG9ubHkgaWYgd2UncmUgbm90IGluIGEgZGF0YSByb3V0ZXIsXG4gICAgICAvLyBvdGhlcndpc2UgaXQnbGwgcHJlcGVuZCB0aGUgYmFzZW5hbWUgaW5zaWRlIG9mIHRoZSByb3V0ZXIpLlxuICAgICAgLy8gSWYgdGhpcyBpcyBhIHJvb3QgbmF2aWdhdGlvbiwgdGhlbiB3ZSBuYXZpZ2F0ZSB0byB0aGUgcmF3IGJhc2VuYW1lXG4gICAgICAvLyB3aGljaCBhbGxvd3MgdGhlIGJhc2VuYW1lIHRvIGhhdmUgZnVsbCBjb250cm9sIG92ZXIgdGhlIHByZXNlbmNlIG9mIGFcbiAgICAgIC8vIHRyYWlsaW5nIHNsYXNoIG9uIHJvb3QgbGlua3NcbiAgICAgIGlmIChkYXRhUm91dGVyQ29udGV4dCA9PSBudWxsICYmIGJhc2VuYW1lICE9PSBcIi9cIikge1xuICAgICAgICBwYXRoLnBhdGhuYW1lID1cbiAgICAgICAgICBwYXRoLnBhdGhuYW1lID09PSBcIi9cIlxuICAgICAgICAgICAgPyBiYXNlbmFtZVxuICAgICAgICAgICAgOiBqb2luUGF0aHMoW2Jhc2VuYW1lLCBwYXRoLnBhdGhuYW1lXSk7XG4gICAgICB9XG5cbiAgICAgICghIW9wdGlvbnMucmVwbGFjZSA/IG5hdmlnYXRvci5yZXBsYWNlIDogbmF2aWdhdG9yLnB1c2gpKFxuICAgICAgICBwYXRoLFxuICAgICAgICBvcHRpb25zLnN0YXRlLFxuICAgICAgICBvcHRpb25zXG4gICAgICApO1xuICAgIH0sXG4gICAgW1xuICAgICAgYmFzZW5hbWUsXG4gICAgICBuYXZpZ2F0b3IsXG4gICAgICByb3V0ZVBhdGhuYW1lc0pzb24sXG4gICAgICBsb2NhdGlvblBhdGhuYW1lLFxuICAgICAgZGF0YVJvdXRlckNvbnRleHQsXG4gICAgXVxuICApO1xuXG4gIHJldHVybiBuYXZpZ2F0ZTtcbn1cblxuY29uc3QgT3V0bGV0Q29udGV4dCA9IFJlYWN0LmNyZWF0ZUNvbnRleHQ8dW5rbm93bj4obnVsbCk7XG5cbi8qKlxuICogUmV0dXJucyB0aGUgY29udGV4dCAoaWYgcHJvdmlkZWQpIGZvciB0aGUgY2hpbGQgcm91dGUgYXQgdGhpcyBsZXZlbCBvZiB0aGUgcm91dGVcbiAqIGhpZXJhcmNoeS5cbiAqIEBzZWUgaHR0cHM6Ly9yZWFjdHJvdXRlci5jb20vaG9va3MvdXNlLW91dGxldC1jb250ZXh0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB1c2VPdXRsZXRDb250ZXh0PENvbnRleHQgPSB1bmtub3duPigpOiBDb250ZXh0IHtcbiAgcmV0dXJuIFJlYWN0LnVzZUNvbnRleHQoT3V0bGV0Q29udGV4dCkgYXMgQ29udGV4dDtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBlbGVtZW50IGZvciB0aGUgY2hpbGQgcm91dGUgYXQgdGhpcyBsZXZlbCBvZiB0aGUgcm91dGVcbiAqIGhpZXJhcmNoeS4gVXNlZCBpbnRlcm5hbGx5IGJ5IGA8T3V0bGV0PmAgdG8gcmVuZGVyIGNoaWxkIHJvdXRlcy5cbiAqXG4gKiBAc2VlIGh0dHBzOi8vcmVhY3Ryb3V0ZXIuY29tL2hvb2tzL3VzZS1vdXRsZXRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHVzZU91dGxldChjb250ZXh0PzogdW5rbm93bik6IFJlYWN0LlJlYWN0RWxlbWVudCB8IG51bGwge1xuICBsZXQgb3V0bGV0ID0gUmVhY3QudXNlQ29udGV4dChSb3V0ZUNvbnRleHQpLm91dGxldDtcbiAgaWYgKG91dGxldCkge1xuICAgIHJldHVybiAoXG4gICAgICA8T3V0bGV0Q29udGV4dC5Qcm92aWRlciB2YWx1ZT17Y29udGV4dH0+e291dGxldH08L091dGxldENvbnRleHQuUHJvdmlkZXI+XG4gICAgKTtcbiAgfVxuICByZXR1cm4gb3V0bGV0O1xufVxuXG4vKipcbiAqIFJldHVybnMgYW4gb2JqZWN0IG9mIGtleS92YWx1ZSBwYWlycyBvZiB0aGUgZHluYW1pYyBwYXJhbXMgZnJvbSB0aGUgY3VycmVudFxuICogVVJMIHRoYXQgd2VyZSBtYXRjaGVkIGJ5IHRoZSByb3V0ZSBwYXRoLlxuICpcbiAqIEBzZWUgaHR0cHM6Ly9yZWFjdHJvdXRlci5jb20vaG9va3MvdXNlLXBhcmFtc1xuICovXG5leHBvcnQgZnVuY3Rpb24gdXNlUGFyYW1zPFxuICBQYXJhbXNPcktleSBleHRlbmRzIHN0cmluZyB8IFJlY29yZDxzdHJpbmcsIHN0cmluZyB8IHVuZGVmaW5lZD4gPSBzdHJpbmdcbj4oKTogUmVhZG9ubHk8XG4gIFtQYXJhbXNPcktleV0gZXh0ZW5kcyBbc3RyaW5nXSA/IFBhcmFtczxQYXJhbXNPcktleT4gOiBQYXJ0aWFsPFBhcmFtc09yS2V5PlxuPiB7XG4gIGxldCB7IG1hdGNoZXMgfSA9IFJlYWN0LnVzZUNvbnRleHQoUm91dGVDb250ZXh0KTtcbiAgbGV0IHJvdXRlTWF0Y2ggPSBtYXRjaGVzW21hdGNoZXMubGVuZ3RoIC0gMV07XG4gIHJldHVybiByb3V0ZU1hdGNoID8gKHJvdXRlTWF0Y2gucGFyYW1zIGFzIGFueSkgOiB7fTtcbn1cblxuLyoqXG4gKiBSZXNvbHZlcyB0aGUgcGF0aG5hbWUgb2YgdGhlIGdpdmVuIGB0b2AgdmFsdWUgYWdhaW5zdCB0aGUgY3VycmVudCBsb2NhdGlvbi5cbiAqXG4gKiBAc2VlIGh0dHBzOi8vcmVhY3Ryb3V0ZXIuY29tL2hvb2tzL3VzZS1yZXNvbHZlZC1wYXRoXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB1c2VSZXNvbHZlZFBhdGgoXG4gIHRvOiBUbyxcbiAgeyByZWxhdGl2ZSB9OiB7IHJlbGF0aXZlPzogUmVsYXRpdmVSb3V0aW5nVHlwZSB9ID0ge31cbik6IFBhdGgge1xuICBsZXQgeyBmdXR1cmUgfSA9IFJlYWN0LnVzZUNvbnRleHQoTmF2aWdhdGlvbkNvbnRleHQpO1xuICBsZXQgeyBtYXRjaGVzIH0gPSBSZWFjdC51c2VDb250ZXh0KFJvdXRlQ29udGV4dCk7XG4gIGxldCB7IHBhdGhuYW1lOiBsb2NhdGlvblBhdGhuYW1lIH0gPSB1c2VMb2NhdGlvbigpO1xuICBsZXQgcm91dGVQYXRobmFtZXNKc29uID0gSlNPTi5zdHJpbmdpZnkoXG4gICAgZ2V0UmVzb2x2ZVRvTWF0Y2hlcyhtYXRjaGVzLCBmdXR1cmUudjdfcmVsYXRpdmVTcGxhdFBhdGgpXG4gICk7XG5cbiAgcmV0dXJuIFJlYWN0LnVzZU1lbW8oXG4gICAgKCkgPT5cbiAgICAgIHJlc29sdmVUbyhcbiAgICAgICAgdG8sXG4gICAgICAgIEpTT04ucGFyc2Uocm91dGVQYXRobmFtZXNKc29uKSxcbiAgICAgICAgbG9jYXRpb25QYXRobmFtZSxcbiAgICAgICAgcmVsYXRpdmUgPT09IFwicGF0aFwiXG4gICAgICApLFxuICAgIFt0bywgcm91dGVQYXRobmFtZXNKc29uLCBsb2NhdGlvblBhdGhuYW1lLCByZWxhdGl2ZV1cbiAgKTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBlbGVtZW50IG9mIHRoZSByb3V0ZSB0aGF0IG1hdGNoZWQgdGhlIGN1cnJlbnQgbG9jYXRpb24sIHByZXBhcmVkXG4gKiB3aXRoIHRoZSBjb3JyZWN0IGNvbnRleHQgdG8gcmVuZGVyIHRoZSByZW1haW5kZXIgb2YgdGhlIHJvdXRlIHRyZWUuIFJvdXRlXG4gKiBlbGVtZW50cyBpbiB0aGUgdHJlZSBtdXN0IHJlbmRlciBhbiBgPE91dGxldD5gIHRvIHJlbmRlciB0aGVpciBjaGlsZCByb3V0ZSdzXG4gKiBlbGVtZW50LlxuICpcbiAqIEBzZWUgaHR0cHM6Ly9yZWFjdHJvdXRlci5jb20vaG9va3MvdXNlLXJvdXRlc1xuICovXG5leHBvcnQgZnVuY3Rpb24gdXNlUm91dGVzKFxuICByb3V0ZXM6IFJvdXRlT2JqZWN0W10sXG4gIGxvY2F0aW9uQXJnPzogUGFydGlhbDxMb2NhdGlvbj4gfCBzdHJpbmdcbik6IFJlYWN0LlJlYWN0RWxlbWVudCB8IG51bGwge1xuICByZXR1cm4gdXNlUm91dGVzSW1wbChyb3V0ZXMsIGxvY2F0aW9uQXJnKTtcbn1cblxuLy8gSW50ZXJuYWwgaW1wbGVtZW50YXRpb24gd2l0aCBhY2NlcHQgb3B0aW9uYWwgcGFyYW0gZm9yIFJvdXRlclByb3ZpZGVyIHVzYWdlXG5leHBvcnQgZnVuY3Rpb24gdXNlUm91dGVzSW1wbChcbiAgcm91dGVzOiBSb3V0ZU9iamVjdFtdLFxuICBsb2NhdGlvbkFyZz86IFBhcnRpYWw8TG9jYXRpb24+IHwgc3RyaW5nLFxuICBkYXRhUm91dGVyU3RhdGU/OiBSZW1peFJvdXRlcltcInN0YXRlXCJdLFxuICBmdXR1cmU/OiBSZW1peFJvdXRlcltcImZ1dHVyZVwiXVxuKTogUmVhY3QuUmVhY3RFbGVtZW50IHwgbnVsbCB7XG4gIGludmFyaWFudChcbiAgICB1c2VJblJvdXRlckNvbnRleHQoKSxcbiAgICAvLyBUT0RPOiBUaGlzIGVycm9yIGlzIHByb2JhYmx5IGJlY2F1c2UgdGhleSBzb21laG93IGhhdmUgMiB2ZXJzaW9ucyBvZiB0aGVcbiAgICAvLyByb3V0ZXIgbG9hZGVkLiBXZSBjYW4gaGVscCB0aGVtIHVuZGVyc3RhbmQgaG93IHRvIGF2b2lkIHRoYXQuXG4gICAgYHVzZVJvdXRlcygpIG1heSBiZSB1c2VkIG9ubHkgaW4gdGhlIGNvbnRleHQgb2YgYSA8Um91dGVyPiBjb21wb25lbnQuYFxuICApO1xuXG4gIGxldCB7IG5hdmlnYXRvciB9ID0gUmVhY3QudXNlQ29udGV4dChOYXZpZ2F0aW9uQ29udGV4dCk7XG4gIGxldCB7IG1hdGNoZXM6IHBhcmVudE1hdGNoZXMgfSA9IFJlYWN0LnVzZUNvbnRleHQoUm91dGVDb250ZXh0KTtcbiAgbGV0IHJvdXRlTWF0Y2ggPSBwYXJlbnRNYXRjaGVzW3BhcmVudE1hdGNoZXMubGVuZ3RoIC0gMV07XG4gIGxldCBwYXJlbnRQYXJhbXMgPSByb3V0ZU1hdGNoID8gcm91dGVNYXRjaC5wYXJhbXMgOiB7fTtcbiAgbGV0IHBhcmVudFBhdGhuYW1lID0gcm91dGVNYXRjaCA/IHJvdXRlTWF0Y2gucGF0aG5hbWUgOiBcIi9cIjtcbiAgbGV0IHBhcmVudFBhdGhuYW1lQmFzZSA9IHJvdXRlTWF0Y2ggPyByb3V0ZU1hdGNoLnBhdGhuYW1lQmFzZSA6IFwiL1wiO1xuICBsZXQgcGFyZW50Um91dGUgPSByb3V0ZU1hdGNoICYmIHJvdXRlTWF0Y2gucm91dGU7XG5cbiAgaWYgKF9fREVWX18pIHtcbiAgICAvLyBZb3Ugd29uJ3QgZ2V0IGEgd2FybmluZyBhYm91dCAyIGRpZmZlcmVudCA8Um91dGVzPiB1bmRlciBhIDxSb3V0ZT5cbiAgICAvLyB3aXRob3V0IGEgdHJhaWxpbmcgKiwgYnV0IHRoaXMgaXMgYSBiZXN0LWVmZm9ydCB3YXJuaW5nIGFueXdheSBzaW5jZSB3ZVxuICAgIC8vIGNhbm5vdCBldmVuIGdpdmUgdGhlIHdhcm5pbmcgdW5sZXNzIHRoZXkgbGFuZCBhdCB0aGUgcGFyZW50IHJvdXRlLlxuICAgIC8vXG4gICAgLy8gRXhhbXBsZTpcbiAgICAvL1xuICAgIC8vIDxSb3V0ZXM+XG4gICAgLy8gICB7LyogVGhpcyByb3V0ZSBwYXRoIE1VU1QgZW5kIHdpdGggLyogYmVjYXVzZSBvdGhlcndpc2VcbiAgICAvLyAgICAgICBpdCB3aWxsIG5ldmVyIG1hdGNoIC9ibG9nL3Bvc3QvMTIzICovfVxuICAgIC8vICAgPFJvdXRlIHBhdGg9XCJibG9nXCIgZWxlbWVudD17PEJsb2cgLz59IC8+XG4gICAgLy8gICA8Um91dGUgcGF0aD1cImJsb2cvZmVlZFwiIGVsZW1lbnQ9ezxCbG9nRmVlZCAvPn0gLz5cbiAgICAvLyA8L1JvdXRlcz5cbiAgICAvL1xuICAgIC8vIGZ1bmN0aW9uIEJsb2coKSB7XG4gICAgLy8gICByZXR1cm4gKFxuICAgIC8vICAgICA8Um91dGVzPlxuICAgIC8vICAgICAgIDxSb3V0ZSBwYXRoPVwicG9zdC86aWRcIiBlbGVtZW50PXs8UG9zdCAvPn0gLz5cbiAgICAvLyAgICAgPC9Sb3V0ZXM+XG4gICAgLy8gICApO1xuICAgIC8vIH1cbiAgICBsZXQgcGFyZW50UGF0aCA9IChwYXJlbnRSb3V0ZSAmJiBwYXJlbnRSb3V0ZS5wYXRoKSB8fCBcIlwiO1xuICAgIHdhcm5pbmdPbmNlKFxuICAgICAgcGFyZW50UGF0aG5hbWUsXG4gICAgICAhcGFyZW50Um91dGUgfHwgcGFyZW50UGF0aC5lbmRzV2l0aChcIipcIiksXG4gICAgICBgWW91IHJlbmRlcmVkIGRlc2NlbmRhbnQgPFJvdXRlcz4gKG9yIGNhbGxlZCBcXGB1c2VSb3V0ZXMoKVxcYCkgYXQgYCArXG4gICAgICAgIGBcIiR7cGFyZW50UGF0aG5hbWV9XCIgKHVuZGVyIDxSb3V0ZSBwYXRoPVwiJHtwYXJlbnRQYXRofVwiPikgYnV0IHRoZSBgICtcbiAgICAgICAgYHBhcmVudCByb3V0ZSBwYXRoIGhhcyBubyB0cmFpbGluZyBcIipcIi4gVGhpcyBtZWFucyBpZiB5b3UgbmF2aWdhdGUgYCArXG4gICAgICAgIGBkZWVwZXIsIHRoZSBwYXJlbnQgd29uJ3QgbWF0Y2ggYW55bW9yZSBhbmQgdGhlcmVmb3JlIHRoZSBjaGlsZCBgICtcbiAgICAgICAgYHJvdXRlcyB3aWxsIG5ldmVyIHJlbmRlci5cXG5cXG5gICtcbiAgICAgICAgYFBsZWFzZSBjaGFuZ2UgdGhlIHBhcmVudCA8Um91dGUgcGF0aD1cIiR7cGFyZW50UGF0aH1cIj4gdG8gPFJvdXRlIGAgK1xuICAgICAgICBgcGF0aD1cIiR7cGFyZW50UGF0aCA9PT0gXCIvXCIgPyBcIipcIiA6IGAke3BhcmVudFBhdGh9LypgfVwiPi5gXG4gICAgKTtcbiAgfVxuXG4gIGxldCBsb2NhdGlvbkZyb21Db250ZXh0ID0gdXNlTG9jYXRpb24oKTtcblxuICBsZXQgbG9jYXRpb247XG4gIGlmIChsb2NhdGlvbkFyZykge1xuICAgIGxldCBwYXJzZWRMb2NhdGlvbkFyZyA9XG4gICAgICB0eXBlb2YgbG9jYXRpb25BcmcgPT09IFwic3RyaW5nXCIgPyBwYXJzZVBhdGgobG9jYXRpb25BcmcpIDogbG9jYXRpb25Bcmc7XG5cbiAgICBpbnZhcmlhbnQoXG4gICAgICBwYXJlbnRQYXRobmFtZUJhc2UgPT09IFwiL1wiIHx8XG4gICAgICAgIHBhcnNlZExvY2F0aW9uQXJnLnBhdGhuYW1lPy5zdGFydHNXaXRoKHBhcmVudFBhdGhuYW1lQmFzZSksXG4gICAgICBgV2hlbiBvdmVycmlkaW5nIHRoZSBsb2NhdGlvbiB1c2luZyBcXGA8Um91dGVzIGxvY2F0aW9uPlxcYCBvciBcXGB1c2VSb3V0ZXMocm91dGVzLCBsb2NhdGlvbilcXGAsIGAgK1xuICAgICAgICBgdGhlIGxvY2F0aW9uIHBhdGhuYW1lIG11c3QgYmVnaW4gd2l0aCB0aGUgcG9ydGlvbiBvZiB0aGUgVVJMIHBhdGhuYW1lIHRoYXQgd2FzIGAgK1xuICAgICAgICBgbWF0Y2hlZCBieSBhbGwgcGFyZW50IHJvdXRlcy4gVGhlIGN1cnJlbnQgcGF0aG5hbWUgYmFzZSBpcyBcIiR7cGFyZW50UGF0aG5hbWVCYXNlfVwiIGAgK1xuICAgICAgICBgYnV0IHBhdGhuYW1lIFwiJHtwYXJzZWRMb2NhdGlvbkFyZy5wYXRobmFtZX1cIiB3YXMgZ2l2ZW4gaW4gdGhlIFxcYGxvY2F0aW9uXFxgIHByb3AuYFxuICAgICk7XG5cbiAgICBsb2NhdGlvbiA9IHBhcnNlZExvY2F0aW9uQXJnO1xuICB9IGVsc2Uge1xuICAgIGxvY2F0aW9uID0gbG9jYXRpb25Gcm9tQ29udGV4dDtcbiAgfVxuXG4gIGxldCBwYXRobmFtZSA9IGxvY2F0aW9uLnBhdGhuYW1lIHx8IFwiL1wiO1xuXG4gIGxldCByZW1haW5pbmdQYXRobmFtZSA9IHBhdGhuYW1lO1xuICBpZiAocGFyZW50UGF0aG5hbWVCYXNlICE9PSBcIi9cIikge1xuICAgIC8vIERldGVybWluZSB0aGUgcmVtYWluaW5nIHBhdGhuYW1lIGJ5IHJlbW92aW5nIHRoZSAjIG9mIFVSTCBzZWdtZW50cyB0aGVcbiAgICAvLyBwYXJlbnRQYXRobmFtZUJhc2UgaGFzLCBpbnN0ZWFkIG9mIHJlbW92aW5nIGJhc2VkIG9uIGNoYXJhY3RlciBjb3VudC5cbiAgICAvLyBUaGlzIGlzIGJlY2F1c2Ugd2UgY2FuJ3QgZ3VhcmFudGVlIHRoYXQgaW5jb21pbmcvb3V0Z29pbmcgZW5jb2RpbmdzL1xuICAgIC8vIGRlY29kaW5ncyB3aWxsIG1hdGNoIGV4YWN0bHkuXG4gICAgLy8gV2UgZGVjb2RlIHBhdGhzIGJlZm9yZSBtYXRjaGluZyBvbiBhIHBlci1zZWdtZW50IGJhc2lzIHdpdGhcbiAgICAvLyBkZWNvZGVVUklDb21wb25lbnQoKSwgYnV0IHdlIHJlLWVuY29kZSBwYXRobmFtZXMgdmlhIGBuZXcgVVJMKClgIHNvIHRoZXlcbiAgICAvLyBtYXRjaCB3aGF0IGB3aW5kb3cubG9jYXRpb24ucGF0aG5hbWVgIHdvdWxkIHJlZmxlY3QuICBUaG9zZSBkb24ndCAxMDAlXG4gICAgLy8gYWxpZ24gd2hlbiBpdCBjb21lcyB0byBlbmNvZGVkIFVSSSBjaGFyYWN0ZXJzIHN1Y2ggYXMgJSBhbmQgJi5cbiAgICAvL1xuICAgIC8vIFNvIHdlIG1heSBlbmQgdXAgd2l0aDpcbiAgICAvLyAgIHBhdGhuYW1lOiAgICAgICAgICAgXCIvZGVzY2VuZGFudC9hJTI1Yi9tYXRjaFwiXG4gICAgLy8gICBwYXJlbnRQYXRobmFtZUJhc2U6IFwiL2Rlc2NlbmRhbnQvYSViXCJcbiAgICAvL1xuICAgIC8vIEFuZCB0aGUgZGlyZWN0IHN1YnN0cmluZyByZW1vdmFsIGFwcHJvYWNoIHdvbid0IHdvcmsgOi9cbiAgICBsZXQgcGFyZW50U2VnbWVudHMgPSBwYXJlbnRQYXRobmFtZUJhc2UucmVwbGFjZSgvXlxcLy8sIFwiXCIpLnNwbGl0KFwiL1wiKTtcbiAgICBsZXQgc2VnbWVudHMgPSBwYXRobmFtZS5yZXBsYWNlKC9eXFwvLywgXCJcIikuc3BsaXQoXCIvXCIpO1xuICAgIHJlbWFpbmluZ1BhdGhuYW1lID0gXCIvXCIgKyBzZWdtZW50cy5zbGljZShwYXJlbnRTZWdtZW50cy5sZW5ndGgpLmpvaW4oXCIvXCIpO1xuICB9XG5cbiAgbGV0IG1hdGNoZXMgPSBtYXRjaFJvdXRlcyhyb3V0ZXMsIHsgcGF0aG5hbWU6IHJlbWFpbmluZ1BhdGhuYW1lIH0pO1xuXG4gIGlmIChfX0RFVl9fKSB7XG4gICAgd2FybmluZyhcbiAgICAgIHBhcmVudFJvdXRlIHx8IG1hdGNoZXMgIT0gbnVsbCxcbiAgICAgIGBObyByb3V0ZXMgbWF0Y2hlZCBsb2NhdGlvbiBcIiR7bG9jYXRpb24ucGF0aG5hbWV9JHtsb2NhdGlvbi5zZWFyY2h9JHtsb2NhdGlvbi5oYXNofVwiIGBcbiAgICApO1xuXG4gICAgd2FybmluZyhcbiAgICAgIG1hdGNoZXMgPT0gbnVsbCB8fFxuICAgICAgICBtYXRjaGVzW21hdGNoZXMubGVuZ3RoIC0gMV0ucm91dGUuZWxlbWVudCAhPT0gdW5kZWZpbmVkIHx8XG4gICAgICAgIG1hdGNoZXNbbWF0Y2hlcy5sZW5ndGggLSAxXS5yb3V0ZS5Db21wb25lbnQgIT09IHVuZGVmaW5lZCB8fFxuICAgICAgICBtYXRjaGVzW21hdGNoZXMubGVuZ3RoIC0gMV0ucm91dGUubGF6eSAhPT0gdW5kZWZpbmVkLFxuICAgICAgYE1hdGNoZWQgbGVhZiByb3V0ZSBhdCBsb2NhdGlvbiBcIiR7bG9jYXRpb24ucGF0aG5hbWV9JHtsb2NhdGlvbi5zZWFyY2h9JHtsb2NhdGlvbi5oYXNofVwiIGAgK1xuICAgICAgICBgZG9lcyBub3QgaGF2ZSBhbiBlbGVtZW50IG9yIENvbXBvbmVudC4gVGhpcyBtZWFucyBpdCB3aWxsIHJlbmRlciBhbiA8T3V0bGV0IC8+IHdpdGggYSBgICtcbiAgICAgICAgYG51bGwgdmFsdWUgYnkgZGVmYXVsdCByZXN1bHRpbmcgaW4gYW4gXCJlbXB0eVwiIHBhZ2UuYFxuICAgICk7XG4gIH1cblxuICBsZXQgcmVuZGVyZWRNYXRjaGVzID0gX3JlbmRlck1hdGNoZXMoXG4gICAgbWF0Y2hlcyAmJlxuICAgICAgbWF0Y2hlcy5tYXAoKG1hdGNoKSA9PlxuICAgICAgICBPYmplY3QuYXNzaWduKHt9LCBtYXRjaCwge1xuICAgICAgICAgIHBhcmFtczogT2JqZWN0LmFzc2lnbih7fSwgcGFyZW50UGFyYW1zLCBtYXRjaC5wYXJhbXMpLFxuICAgICAgICAgIHBhdGhuYW1lOiBqb2luUGF0aHMoW1xuICAgICAgICAgICAgcGFyZW50UGF0aG5hbWVCYXNlLFxuICAgICAgICAgICAgLy8gUmUtZW5jb2RlIHBhdGhuYW1lcyB0aGF0IHdlcmUgZGVjb2RlZCBpbnNpZGUgbWF0Y2hSb3V0ZXNcbiAgICAgICAgICAgIG5hdmlnYXRvci5lbmNvZGVMb2NhdGlvblxuICAgICAgICAgICAgICA/IG5hdmlnYXRvci5lbmNvZGVMb2NhdGlvbihtYXRjaC5wYXRobmFtZSkucGF0aG5hbWVcbiAgICAgICAgICAgICAgOiBtYXRjaC5wYXRobmFtZSxcbiAgICAgICAgICBdKSxcbiAgICAgICAgICBwYXRobmFtZUJhc2U6XG4gICAgICAgICAgICBtYXRjaC5wYXRobmFtZUJhc2UgPT09IFwiL1wiXG4gICAgICAgICAgICAgID8gcGFyZW50UGF0aG5hbWVCYXNlXG4gICAgICAgICAgICAgIDogam9pblBhdGhzKFtcbiAgICAgICAgICAgICAgICAgIHBhcmVudFBhdGhuYW1lQmFzZSxcbiAgICAgICAgICAgICAgICAgIC8vIFJlLWVuY29kZSBwYXRobmFtZXMgdGhhdCB3ZXJlIGRlY29kZWQgaW5zaWRlIG1hdGNoUm91dGVzXG4gICAgICAgICAgICAgICAgICBuYXZpZ2F0b3IuZW5jb2RlTG9jYXRpb25cbiAgICAgICAgICAgICAgICAgICAgPyBuYXZpZ2F0b3IuZW5jb2RlTG9jYXRpb24obWF0Y2gucGF0aG5hbWVCYXNlKS5wYXRobmFtZVxuICAgICAgICAgICAgICAgICAgICA6IG1hdGNoLnBhdGhuYW1lQmFzZSxcbiAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgfSlcbiAgICAgICksXG4gICAgcGFyZW50TWF0Y2hlcyxcbiAgICBkYXRhUm91dGVyU3RhdGUsXG4gICAgZnV0dXJlXG4gICk7XG5cbiAgLy8gV2hlbiBhIHVzZXIgcGFzc2VzIGluIGEgYGxvY2F0aW9uQXJnYCwgdGhlIGFzc29jaWF0ZWQgcm91dGVzIG5lZWQgdG9cbiAgLy8gYmUgd3JhcHBlZCBpbiBhIG5ldyBgTG9jYXRpb25Db250ZXh0LlByb3ZpZGVyYCBpbiBvcmRlciBmb3IgYHVzZUxvY2F0aW9uYFxuICAvLyB0byB1c2UgdGhlIHNjb3BlZCBsb2NhdGlvbiBpbnN0ZWFkIG9mIHRoZSBnbG9iYWwgbG9jYXRpb24uXG4gIGlmIChsb2NhdGlvbkFyZyAmJiByZW5kZXJlZE1hdGNoZXMpIHtcbiAgICByZXR1cm4gKFxuICAgICAgPExvY2F0aW9uQ29udGV4dC5Qcm92aWRlclxuICAgICAgICB2YWx1ZT17e1xuICAgICAgICAgIGxvY2F0aW9uOiB7XG4gICAgICAgICAgICBwYXRobmFtZTogXCIvXCIsXG4gICAgICAgICAgICBzZWFyY2g6IFwiXCIsXG4gICAgICAgICAgICBoYXNoOiBcIlwiLFxuICAgICAgICAgICAgc3RhdGU6IG51bGwsXG4gICAgICAgICAgICBrZXk6IFwiZGVmYXVsdFwiLFxuICAgICAgICAgICAgLi4ubG9jYXRpb24sXG4gICAgICAgICAgfSxcbiAgICAgICAgICBuYXZpZ2F0aW9uVHlwZTogTmF2aWdhdGlvblR5cGUuUG9wLFxuICAgICAgICB9fVxuICAgICAgPlxuICAgICAgICB7cmVuZGVyZWRNYXRjaGVzfVxuICAgICAgPC9Mb2NhdGlvbkNvbnRleHQuUHJvdmlkZXI+XG4gICAgKTtcbiAgfVxuXG4gIHJldHVybiByZW5kZXJlZE1hdGNoZXM7XG59XG5cbmZ1bmN0aW9uIERlZmF1bHRFcnJvckNvbXBvbmVudCgpIHtcbiAgbGV0IGVycm9yID0gdXNlUm91dGVFcnJvcigpO1xuICBsZXQgbWVzc2FnZSA9IGlzUm91dGVFcnJvclJlc3BvbnNlKGVycm9yKVxuICAgID8gYCR7ZXJyb3Iuc3RhdHVzfSAke2Vycm9yLnN0YXR1c1RleHR9YFxuICAgIDogZXJyb3IgaW5zdGFuY2VvZiBFcnJvclxuICAgID8gZXJyb3IubWVzc2FnZVxuICAgIDogSlNPTi5zdHJpbmdpZnkoZXJyb3IpO1xuICBsZXQgc3RhY2sgPSBlcnJvciBpbnN0YW5jZW9mIEVycm9yID8gZXJyb3Iuc3RhY2sgOiBudWxsO1xuICBsZXQgbGlnaHRncmV5ID0gXCJyZ2JhKDIwMCwyMDAsMjAwLCAwLjUpXCI7XG4gIGxldCBwcmVTdHlsZXMgPSB7IHBhZGRpbmc6IFwiMC41cmVtXCIsIGJhY2tncm91bmRDb2xvcjogbGlnaHRncmV5IH07XG4gIGxldCBjb2RlU3R5bGVzID0geyBwYWRkaW5nOiBcIjJweCA0cHhcIiwgYmFja2dyb3VuZENvbG9yOiBsaWdodGdyZXkgfTtcblxuICBsZXQgZGV2SW5mbyA9IG51bGw7XG4gIGlmIChfX0RFVl9fKSB7XG4gICAgY29uc29sZS5lcnJvcihcbiAgICAgIFwiRXJyb3IgaGFuZGxlZCBieSBSZWFjdCBSb3V0ZXIgZGVmYXVsdCBFcnJvckJvdW5kYXJ5OlwiLFxuICAgICAgZXJyb3JcbiAgICApO1xuXG4gICAgZGV2SW5mbyA9IChcbiAgICAgIDw+XG4gICAgICAgIDxwPvCfkr8gSGV5IGRldmVsb3BlciDwn5GLPC9wPlxuICAgICAgICA8cD5cbiAgICAgICAgICBZb3UgY2FuIHByb3ZpZGUgYSB3YXkgYmV0dGVyIFVYIHRoYW4gdGhpcyB3aGVuIHlvdXIgYXBwIHRocm93cyBlcnJvcnNcbiAgICAgICAgICBieSBwcm92aWRpbmcgeW91ciBvd24gPGNvZGUgc3R5bGU9e2NvZGVTdHlsZXN9PkVycm9yQm91bmRhcnk8L2NvZGU+IG9ye1wiIFwifVxuICAgICAgICAgIDxjb2RlIHN0eWxlPXtjb2RlU3R5bGVzfT5lcnJvckVsZW1lbnQ8L2NvZGU+IHByb3Agb24geW91ciByb3V0ZS5cbiAgICAgICAgPC9wPlxuICAgICAgPC8+XG4gICAgKTtcbiAgfVxuXG4gIHJldHVybiAoXG4gICAgPD5cbiAgICAgIDxoMj5VbmV4cGVjdGVkIEFwcGxpY2F0aW9uIEVycm9yITwvaDI+XG4gICAgICA8aDMgc3R5bGU9e3sgZm9udFN0eWxlOiBcIml0YWxpY1wiIH19PnttZXNzYWdlfTwvaDM+XG4gICAgICB7c3RhY2sgPyA8cHJlIHN0eWxlPXtwcmVTdHlsZXN9PntzdGFja308L3ByZT4gOiBudWxsfVxuICAgICAge2RldkluZm99XG4gICAgPC8+XG4gICk7XG59XG5cbmNvbnN0IGRlZmF1bHRFcnJvckVsZW1lbnQgPSA8RGVmYXVsdEVycm9yQ29tcG9uZW50IC8+O1xuXG50eXBlIFJlbmRlckVycm9yQm91bmRhcnlQcm9wcyA9IFJlYWN0LlByb3BzV2l0aENoaWxkcmVuPHtcbiAgbG9jYXRpb246IExvY2F0aW9uO1xuICByZXZhbGlkYXRpb246IFJldmFsaWRhdGlvblN0YXRlO1xuICBlcnJvcjogYW55O1xuICBjb21wb25lbnQ6IFJlYWN0LlJlYWN0Tm9kZTtcbiAgcm91dGVDb250ZXh0OiBSb3V0ZUNvbnRleHRPYmplY3Q7XG59PjtcblxudHlwZSBSZW5kZXJFcnJvckJvdW5kYXJ5U3RhdGUgPSB7XG4gIGxvY2F0aW9uOiBMb2NhdGlvbjtcbiAgcmV2YWxpZGF0aW9uOiBSZXZhbGlkYXRpb25TdGF0ZTtcbiAgZXJyb3I6IGFueTtcbn07XG5cbmV4cG9ydCBjbGFzcyBSZW5kZXJFcnJvckJvdW5kYXJ5IGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50PFxuICBSZW5kZXJFcnJvckJvdW5kYXJ5UHJvcHMsXG4gIFJlbmRlckVycm9yQm91bmRhcnlTdGF0ZVxuPiB7XG4gIGNvbnN0cnVjdG9yKHByb3BzOiBSZW5kZXJFcnJvckJvdW5kYXJ5UHJvcHMpIHtcbiAgICBzdXBlcihwcm9wcyk7XG4gICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgIGxvY2F0aW9uOiBwcm9wcy5sb2NhdGlvbixcbiAgICAgIHJldmFsaWRhdGlvbjogcHJvcHMucmV2YWxpZGF0aW9uLFxuICAgICAgZXJyb3I6IHByb3BzLmVycm9yLFxuICAgIH07XG4gIH1cblxuICBzdGF0aWMgZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yKGVycm9yOiBhbnkpIHtcbiAgICByZXR1cm4geyBlcnJvcjogZXJyb3IgfTtcbiAgfVxuXG4gIHN0YXRpYyBnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMoXG4gICAgcHJvcHM6IFJlbmRlckVycm9yQm91bmRhcnlQcm9wcyxcbiAgICBzdGF0ZTogUmVuZGVyRXJyb3JCb3VuZGFyeVN0YXRlXG4gICkge1xuICAgIC8vIFdoZW4gd2UgZ2V0IGludG8gYW4gZXJyb3Igc3RhdGUsIHRoZSB1c2VyIHdpbGwgbGlrZWx5IGNsaWNrIFwiYmFja1wiIHRvIHRoZVxuICAgIC8vIHByZXZpb3VzIHBhZ2UgdGhhdCBkaWRuJ3QgaGF2ZSBhbiBlcnJvci4gQmVjYXVzZSB0aGlzIHdyYXBzIHRoZSBlbnRpcmVcbiAgICAvLyBhcHBsaWNhdGlvbiwgdGhhdCB3aWxsIGhhdmUgbm8gZWZmZWN0LS10aGUgZXJyb3IgcGFnZSBjb250aW51ZXMgdG8gZGlzcGxheS5cbiAgICAvLyBUaGlzIGdpdmVzIHVzIGEgbWVjaGFuaXNtIHRvIHJlY292ZXIgZnJvbSB0aGUgZXJyb3Igd2hlbiB0aGUgbG9jYXRpb24gY2hhbmdlcy5cbiAgICAvL1xuICAgIC8vIFdoZXRoZXIgd2UncmUgaW4gYW4gZXJyb3Igc3RhdGUgb3Igbm90LCB3ZSB1cGRhdGUgdGhlIGxvY2F0aW9uIGluIHN0YXRlXG4gICAgLy8gc28gdGhhdCB3aGVuIHdlIGFyZSBpbiBhbiBlcnJvciBzdGF0ZSwgaXQgZ2V0cyByZXNldCB3aGVuIGEgbmV3IGxvY2F0aW9uXG4gICAgLy8gY29tZXMgaW4gYW5kIHRoZSB1c2VyIHJlY292ZXJzIGZyb20gdGhlIGVycm9yLlxuICAgIGlmIChcbiAgICAgIHN0YXRlLmxvY2F0aW9uICE9PSBwcm9wcy5sb2NhdGlvbiB8fFxuICAgICAgKHN0YXRlLnJldmFsaWRhdGlvbiAhPT0gXCJpZGxlXCIgJiYgcHJvcHMucmV2YWxpZGF0aW9uID09PSBcImlkbGVcIilcbiAgICApIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGVycm9yOiBwcm9wcy5lcnJvcixcbiAgICAgICAgbG9jYXRpb246IHByb3BzLmxvY2F0aW9uLFxuICAgICAgICByZXZhbGlkYXRpb246IHByb3BzLnJldmFsaWRhdGlvbixcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLy8gSWYgd2UncmUgbm90IGNoYW5naW5nIGxvY2F0aW9ucywgcHJlc2VydmUgdGhlIGxvY2F0aW9uIGJ1dCBzdGlsbCBzdXJmYWNlXG4gICAgLy8gYW55IG5ldyBlcnJvcnMgdGhhdCBtYXkgY29tZSB0aHJvdWdoLiBXZSByZXRhaW4gdGhlIGV4aXN0aW5nIGVycm9yLCB3ZSBkb1xuICAgIC8vIHRoaXMgYmVjYXVzZSB0aGUgZXJyb3IgcHJvdmlkZWQgZnJvbSB0aGUgYXBwIHN0YXRlIG1heSBiZSBjbGVhcmVkIHdpdGhvdXRcbiAgICAvLyB0aGUgbG9jYXRpb24gY2hhbmdpbmcuXG4gICAgcmV0dXJuIHtcbiAgICAgIGVycm9yOiBwcm9wcy5lcnJvciAhPT0gdW5kZWZpbmVkID8gcHJvcHMuZXJyb3IgOiBzdGF0ZS5lcnJvcixcbiAgICAgIGxvY2F0aW9uOiBzdGF0ZS5sb2NhdGlvbixcbiAgICAgIHJldmFsaWRhdGlvbjogcHJvcHMucmV2YWxpZGF0aW9uIHx8IHN0YXRlLnJldmFsaWRhdGlvbixcbiAgICB9O1xuICB9XG5cbiAgY29tcG9uZW50RGlkQ2F0Y2goZXJyb3I6IGFueSwgZXJyb3JJbmZvOiBhbnkpIHtcbiAgICBjb25zb2xlLmVycm9yKFxuICAgICAgXCJSZWFjdCBSb3V0ZXIgY2F1Z2h0IHRoZSBmb2xsb3dpbmcgZXJyb3IgZHVyaW5nIHJlbmRlclwiLFxuICAgICAgZXJyb3IsXG4gICAgICBlcnJvckluZm9cbiAgICApO1xuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIHJldHVybiB0aGlzLnN0YXRlLmVycm9yICE9PSB1bmRlZmluZWQgPyAoXG4gICAgICA8Um91dGVDb250ZXh0LlByb3ZpZGVyIHZhbHVlPXt0aGlzLnByb3BzLnJvdXRlQ29udGV4dH0+XG4gICAgICAgIDxSb3V0ZUVycm9yQ29udGV4dC5Qcm92aWRlclxuICAgICAgICAgIHZhbHVlPXt0aGlzLnN0YXRlLmVycm9yfVxuICAgICAgICAgIGNoaWxkcmVuPXt0aGlzLnByb3BzLmNvbXBvbmVudH1cbiAgICAgICAgLz5cbiAgICAgIDwvUm91dGVDb250ZXh0LlByb3ZpZGVyPlxuICAgICkgOiAoXG4gICAgICB0aGlzLnByb3BzLmNoaWxkcmVuXG4gICAgKTtcbiAgfVxufVxuXG5pbnRlcmZhY2UgUmVuZGVyZWRSb3V0ZVByb3BzIHtcbiAgcm91dGVDb250ZXh0OiBSb3V0ZUNvbnRleHRPYmplY3Q7XG4gIG1hdGNoOiBSb3V0ZU1hdGNoPHN0cmluZywgUm91dGVPYmplY3Q+O1xuICBjaGlsZHJlbjogUmVhY3QuUmVhY3ROb2RlIHwgbnVsbDtcbn1cblxuZnVuY3Rpb24gUmVuZGVyZWRSb3V0ZSh7IHJvdXRlQ29udGV4dCwgbWF0Y2gsIGNoaWxkcmVuIH06IFJlbmRlcmVkUm91dGVQcm9wcykge1xuICBsZXQgZGF0YVJvdXRlckNvbnRleHQgPSBSZWFjdC51c2VDb250ZXh0KERhdGFSb3V0ZXJDb250ZXh0KTtcblxuICAvLyBUcmFjayBob3cgZGVlcCB3ZSBnb3QgaW4gb3VyIHJlbmRlciBwYXNzIHRvIGVtdWxhdGUgU1NSIGNvbXBvbmVudERpZENhdGNoXG4gIC8vIGluIGEgRGF0YVN0YXRpY1JvdXRlclxuICBpZiAoXG4gICAgZGF0YVJvdXRlckNvbnRleHQgJiZcbiAgICBkYXRhUm91dGVyQ29udGV4dC5zdGF0aWMgJiZcbiAgICBkYXRhUm91dGVyQ29udGV4dC5zdGF0aWNDb250ZXh0ICYmXG4gICAgKG1hdGNoLnJvdXRlLmVycm9yRWxlbWVudCB8fCBtYXRjaC5yb3V0ZS5FcnJvckJvdW5kYXJ5KVxuICApIHtcbiAgICBkYXRhUm91dGVyQ29udGV4dC5zdGF0aWNDb250ZXh0Ll9kZWVwZXN0UmVuZGVyZWRCb3VuZGFyeUlkID0gbWF0Y2gucm91dGUuaWQ7XG4gIH1cblxuICByZXR1cm4gKFxuICAgIDxSb3V0ZUNvbnRleHQuUHJvdmlkZXIgdmFsdWU9e3JvdXRlQ29udGV4dH0+XG4gICAgICB7Y2hpbGRyZW59XG4gICAgPC9Sb3V0ZUNvbnRleHQuUHJvdmlkZXI+XG4gICk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBfcmVuZGVyTWF0Y2hlcyhcbiAgbWF0Y2hlczogUm91dGVNYXRjaFtdIHwgbnVsbCxcbiAgcGFyZW50TWF0Y2hlczogUm91dGVNYXRjaFtdID0gW10sXG4gIGRhdGFSb3V0ZXJTdGF0ZTogUmVtaXhSb3V0ZXJbXCJzdGF0ZVwiXSB8IG51bGwgPSBudWxsLFxuICBmdXR1cmU6IFJlbWl4Um91dGVyW1wiZnV0dXJlXCJdIHwgbnVsbCA9IG51bGxcbik6IFJlYWN0LlJlYWN0RWxlbWVudCB8IG51bGwge1xuICBpZiAobWF0Y2hlcyA9PSBudWxsKSB7XG4gICAgaWYgKGRhdGFSb3V0ZXJTdGF0ZT8uZXJyb3JzKSB7XG4gICAgICAvLyBEb24ndCBiYWlsIGlmIHdlIGhhdmUgZGF0YSByb3V0ZXIgZXJyb3JzIHNvIHdlIGNhbiByZW5kZXIgdGhlbSBpbiB0aGVcbiAgICAgIC8vIGJvdW5kYXJ5LiAgVXNlIHRoZSBwcmUtbWF0Y2hlZCAob3Igc2hpbW1lZCkgbWF0Y2hlc1xuICAgICAgbWF0Y2hlcyA9IGRhdGFSb3V0ZXJTdGF0ZS5tYXRjaGVzIGFzIERhdGFSb3V0ZU1hdGNoW107XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgfVxuXG4gIGxldCByZW5kZXJlZE1hdGNoZXMgPSBtYXRjaGVzO1xuXG4gIC8vIElmIHdlIGhhdmUgZGF0YSBlcnJvcnMsIHRyaW0gbWF0Y2hlcyB0byB0aGUgaGlnaGVzdCBlcnJvciBib3VuZGFyeVxuICBsZXQgZXJyb3JzID0gZGF0YVJvdXRlclN0YXRlPy5lcnJvcnM7XG4gIGlmIChlcnJvcnMgIT0gbnVsbCkge1xuICAgIGxldCBlcnJvckluZGV4ID0gcmVuZGVyZWRNYXRjaGVzLmZpbmRJbmRleChcbiAgICAgIChtKSA9PiBtLnJvdXRlLmlkICYmIGVycm9ycz8uW20ucm91dGUuaWRdXG4gICAgKTtcbiAgICBpbnZhcmlhbnQoXG4gICAgICBlcnJvckluZGV4ID49IDAsXG4gICAgICBgQ291bGQgbm90IGZpbmQgYSBtYXRjaGluZyByb3V0ZSBmb3IgZXJyb3JzIG9uIHJvdXRlIElEczogJHtPYmplY3Qua2V5cyhcbiAgICAgICAgZXJyb3JzXG4gICAgICApLmpvaW4oXCIsXCIpfWBcbiAgICApO1xuICAgIHJlbmRlcmVkTWF0Y2hlcyA9IHJlbmRlcmVkTWF0Y2hlcy5zbGljZShcbiAgICAgIDAsXG4gICAgICBNYXRoLm1pbihyZW5kZXJlZE1hdGNoZXMubGVuZ3RoLCBlcnJvckluZGV4ICsgMSlcbiAgICApO1xuICB9XG5cbiAgLy8gSWYgd2UncmUgaW4gYSBwYXJ0aWFsIGh5ZHJhdGlvbiBtb2RlLCBkZXRlY3QgaWYgd2UgbmVlZCB0byByZW5kZXIgZG93biB0b1xuICAvLyBhIGdpdmVuIEh5ZHJhdGVGYWxsYmFjayB3aGlsZSB3ZSBsb2FkIHRoZSByZXN0IG9mIHRoZSBoeWRyYXRpb24gZGF0YVxuICBsZXQgcmVuZGVyRmFsbGJhY2sgPSBmYWxzZTtcbiAgbGV0IGZhbGxiYWNrSW5kZXggPSAtMTtcbiAgaWYgKGRhdGFSb3V0ZXJTdGF0ZSAmJiBmdXR1cmUgJiYgZnV0dXJlLnY3X3BhcnRpYWxIeWRyYXRpb24pIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHJlbmRlcmVkTWF0Y2hlcy5sZW5ndGg7IGkrKykge1xuICAgICAgbGV0IG1hdGNoID0gcmVuZGVyZWRNYXRjaGVzW2ldO1xuICAgICAgLy8gVHJhY2sgdGhlIGRlZXBlc3QgZmFsbGJhY2sgdXAgdW50aWwgdGhlIGZpcnN0IHJvdXRlIHdpdGhvdXQgZGF0YVxuICAgICAgaWYgKG1hdGNoLnJvdXRlLkh5ZHJhdGVGYWxsYmFjayB8fCBtYXRjaC5yb3V0ZS5oeWRyYXRlRmFsbGJhY2tFbGVtZW50KSB7XG4gICAgICAgIGZhbGxiYWNrSW5kZXggPSBpO1xuICAgICAgfVxuXG4gICAgICBpZiAobWF0Y2gucm91dGUuaWQpIHtcbiAgICAgICAgbGV0IHsgbG9hZGVyRGF0YSwgZXJyb3JzIH0gPSBkYXRhUm91dGVyU3RhdGU7XG4gICAgICAgIGxldCBuZWVkc1RvUnVuTG9hZGVyID1cbiAgICAgICAgICBtYXRjaC5yb3V0ZS5sb2FkZXIgJiZcbiAgICAgICAgICBsb2FkZXJEYXRhW21hdGNoLnJvdXRlLmlkXSA9PT0gdW5kZWZpbmVkICYmXG4gICAgICAgICAgKCFlcnJvcnMgfHwgZXJyb3JzW21hdGNoLnJvdXRlLmlkXSA9PT0gdW5kZWZpbmVkKTtcbiAgICAgICAgaWYgKG1hdGNoLnJvdXRlLmxhenkgfHwgbmVlZHNUb1J1bkxvYWRlcikge1xuICAgICAgICAgIC8vIFdlIGZvdW5kIHRoZSBmaXJzdCByb3V0ZSB0aGF0J3Mgbm90IHJlYWR5IHRvIHJlbmRlciAod2FpdGluZyBvblxuICAgICAgICAgIC8vIGxhenksIG9yIGhhcyBhIGxvYWRlciB0aGF0IGhhc24ndCBydW4geWV0KS4gIEZsYWcgdGhhdCB3ZSBuZWVkIHRvXG4gICAgICAgICAgLy8gcmVuZGVyIGEgZmFsbGJhY2sgYW5kIHJlbmRlciB1cCB1bnRpbCB0aGUgYXBwcm9wcmlhdGUgZmFsbGJhY2tcbiAgICAgICAgICByZW5kZXJGYWxsYmFjayA9IHRydWU7XG4gICAgICAgICAgaWYgKGZhbGxiYWNrSW5kZXggPj0gMCkge1xuICAgICAgICAgICAgcmVuZGVyZWRNYXRjaGVzID0gcmVuZGVyZWRNYXRjaGVzLnNsaWNlKDAsIGZhbGxiYWNrSW5kZXggKyAxKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmVuZGVyZWRNYXRjaGVzID0gW3JlbmRlcmVkTWF0Y2hlc1swXV07XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHJlbmRlcmVkTWF0Y2hlcy5yZWR1Y2VSaWdodCgob3V0bGV0LCBtYXRjaCwgaW5kZXgpID0+IHtcbiAgICAvLyBPbmx5IGRhdGEgcm91dGVycyBoYW5kbGUgZXJyb3JzL2ZhbGxiYWNrc1xuICAgIGxldCBlcnJvcjogYW55O1xuICAgIGxldCBzaG91bGRSZW5kZXJIeWRyYXRlRmFsbGJhY2sgPSBmYWxzZTtcbiAgICBsZXQgZXJyb3JFbGVtZW50OiBSZWFjdC5SZWFjdE5vZGUgfCBudWxsID0gbnVsbDtcbiAgICBsZXQgaHlkcmF0ZUZhbGxiYWNrRWxlbWVudDogUmVhY3QuUmVhY3ROb2RlIHwgbnVsbCA9IG51bGw7XG4gICAgaWYgKGRhdGFSb3V0ZXJTdGF0ZSkge1xuICAgICAgZXJyb3IgPSBlcnJvcnMgJiYgbWF0Y2gucm91dGUuaWQgPyBlcnJvcnNbbWF0Y2gucm91dGUuaWRdIDogdW5kZWZpbmVkO1xuICAgICAgZXJyb3JFbGVtZW50ID0gbWF0Y2gucm91dGUuZXJyb3JFbGVtZW50IHx8IGRlZmF1bHRFcnJvckVsZW1lbnQ7XG5cbiAgICAgIGlmIChyZW5kZXJGYWxsYmFjaykge1xuICAgICAgICBpZiAoZmFsbGJhY2tJbmRleCA8IDAgJiYgaW5kZXggPT09IDApIHtcbiAgICAgICAgICB3YXJuaW5nT25jZShcbiAgICAgICAgICAgIFwicm91dGUtZmFsbGJhY2tcIixcbiAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgXCJObyBgSHlkcmF0ZUZhbGxiYWNrYCBlbGVtZW50IHByb3ZpZGVkIHRvIHJlbmRlciBkdXJpbmcgaW5pdGlhbCBoeWRyYXRpb25cIlxuICAgICAgICAgICk7XG4gICAgICAgICAgc2hvdWxkUmVuZGVySHlkcmF0ZUZhbGxiYWNrID0gdHJ1ZTtcbiAgICAgICAgICBoeWRyYXRlRmFsbGJhY2tFbGVtZW50ID0gbnVsbDtcbiAgICAgICAgfSBlbHNlIGlmIChmYWxsYmFja0luZGV4ID09PSBpbmRleCkge1xuICAgICAgICAgIHNob3VsZFJlbmRlckh5ZHJhdGVGYWxsYmFjayA9IHRydWU7XG4gICAgICAgICAgaHlkcmF0ZUZhbGxiYWNrRWxlbWVudCA9IG1hdGNoLnJvdXRlLmh5ZHJhdGVGYWxsYmFja0VsZW1lbnQgfHwgbnVsbDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGxldCBtYXRjaGVzID0gcGFyZW50TWF0Y2hlcy5jb25jYXQocmVuZGVyZWRNYXRjaGVzLnNsaWNlKDAsIGluZGV4ICsgMSkpO1xuICAgIGxldCBnZXRDaGlsZHJlbiA9ICgpID0+IHtcbiAgICAgIGxldCBjaGlsZHJlbjogUmVhY3QuUmVhY3ROb2RlO1xuICAgICAgaWYgKGVycm9yKSB7XG4gICAgICAgIGNoaWxkcmVuID0gZXJyb3JFbGVtZW50O1xuICAgICAgfSBlbHNlIGlmIChzaG91bGRSZW5kZXJIeWRyYXRlRmFsbGJhY2spIHtcbiAgICAgICAgY2hpbGRyZW4gPSBoeWRyYXRlRmFsbGJhY2tFbGVtZW50O1xuICAgICAgfSBlbHNlIGlmIChtYXRjaC5yb3V0ZS5Db21wb25lbnQpIHtcbiAgICAgICAgLy8gTm90ZTogVGhpcyBpcyBhIGRlLW9wdGltaXplZCBwYXRoIHNpbmNlIFJlYWN0IHdvbid0IHJlLXVzZSB0aGVcbiAgICAgICAgLy8gUmVhY3RFbGVtZW50IHNpbmNlIGl0J3MgaWRlbnRpdHkgY2hhbmdlcyB3aXRoIGVhY2ggbmV3XG4gICAgICAgIC8vIFJlYWN0LmNyZWF0ZUVsZW1lbnQgY2FsbC4gIFdlIGtlZXAgdGhpcyBzbyBmb2xrcyBjYW4gdXNlXG4gICAgICAgIC8vIGA8Um91dGUgQ29tcG9uZW50PXsuLi59PmAgaW4gYDxSb3V0ZXM+YCBidXQgZ2VuZXJhbGx5IGBDb21wb25lbnRgXG4gICAgICAgIC8vIHVzYWdlIGlzIG9ubHkgYWR2aXNlZCBpbiBgUm91dGVyUHJvdmlkZXJgIHdoZW4gd2UgY2FuIGNvbnZlcnQgaXQgdG9cbiAgICAgICAgLy8gYGVsZW1lbnRgIGFoZWFkIG9mIHRpbWUuXG4gICAgICAgIGNoaWxkcmVuID0gPG1hdGNoLnJvdXRlLkNvbXBvbmVudCAvPjtcbiAgICAgIH0gZWxzZSBpZiAobWF0Y2gucm91dGUuZWxlbWVudCkge1xuICAgICAgICBjaGlsZHJlbiA9IG1hdGNoLnJvdXRlLmVsZW1lbnQ7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjaGlsZHJlbiA9IG91dGxldDtcbiAgICAgIH1cbiAgICAgIHJldHVybiAoXG4gICAgICAgIDxSZW5kZXJlZFJvdXRlXG4gICAgICAgICAgbWF0Y2g9e21hdGNofVxuICAgICAgICAgIHJvdXRlQ29udGV4dD17e1xuICAgICAgICAgICAgb3V0bGV0LFxuICAgICAgICAgICAgbWF0Y2hlcyxcbiAgICAgICAgICAgIGlzRGF0YVJvdXRlOiBkYXRhUm91dGVyU3RhdGUgIT0gbnVsbCxcbiAgICAgICAgICB9fVxuICAgICAgICAgIGNoaWxkcmVuPXtjaGlsZHJlbn1cbiAgICAgICAgLz5cbiAgICAgICk7XG4gICAgfTtcbiAgICAvLyBPbmx5IHdyYXAgaW4gYW4gZXJyb3IgYm91bmRhcnkgd2l0aGluIGRhdGEgcm91dGVyIHVzYWdlcyB3aGVuIHdlIGhhdmUgYW5cbiAgICAvLyBFcnJvckJvdW5kYXJ5L2Vycm9yRWxlbWVudCBvbiB0aGlzIHJvdXRlLiAgT3RoZXJ3aXNlIGxldCBpdCBidWJibGUgdXAgdG9cbiAgICAvLyBhbiBhbmNlc3RvciBFcnJvckJvdW5kYXJ5L2Vycm9yRWxlbWVudFxuICAgIHJldHVybiBkYXRhUm91dGVyU3RhdGUgJiZcbiAgICAgIChtYXRjaC5yb3V0ZS5FcnJvckJvdW5kYXJ5IHx8IG1hdGNoLnJvdXRlLmVycm9yRWxlbWVudCB8fCBpbmRleCA9PT0gMCkgPyAoXG4gICAgICA8UmVuZGVyRXJyb3JCb3VuZGFyeVxuICAgICAgICBsb2NhdGlvbj17ZGF0YVJvdXRlclN0YXRlLmxvY2F0aW9ufVxuICAgICAgICByZXZhbGlkYXRpb249e2RhdGFSb3V0ZXJTdGF0ZS5yZXZhbGlkYXRpb259XG4gICAgICAgIGNvbXBvbmVudD17ZXJyb3JFbGVtZW50fVxuICAgICAgICBlcnJvcj17ZXJyb3J9XG4gICAgICAgIGNoaWxkcmVuPXtnZXRDaGlsZHJlbigpfVxuICAgICAgICByb3V0ZUNvbnRleHQ9e3sgb3V0bGV0OiBudWxsLCBtYXRjaGVzLCBpc0RhdGFSb3V0ZTogdHJ1ZSB9fVxuICAgICAgLz5cbiAgICApIDogKFxuICAgICAgZ2V0Q2hpbGRyZW4oKVxuICAgICk7XG4gIH0sIG51bGwgYXMgUmVhY3QuUmVhY3RFbGVtZW50IHwgbnVsbCk7XG59XG5cbmVudW0gRGF0YVJvdXRlckhvb2sge1xuICBVc2VCbG9ja2VyID0gXCJ1c2VCbG9ja2VyXCIsXG4gIFVzZVJldmFsaWRhdG9yID0gXCJ1c2VSZXZhbGlkYXRvclwiLFxuICBVc2VOYXZpZ2F0ZVN0YWJsZSA9IFwidXNlTmF2aWdhdGVcIixcbn1cblxuZW51bSBEYXRhUm91dGVyU3RhdGVIb29rIHtcbiAgVXNlQmxvY2tlciA9IFwidXNlQmxvY2tlclwiLFxuICBVc2VMb2FkZXJEYXRhID0gXCJ1c2VMb2FkZXJEYXRhXCIsXG4gIFVzZUFjdGlvbkRhdGEgPSBcInVzZUFjdGlvbkRhdGFcIixcbiAgVXNlUm91dGVFcnJvciA9IFwidXNlUm91dGVFcnJvclwiLFxuICBVc2VOYXZpZ2F0aW9uID0gXCJ1c2VOYXZpZ2F0aW9uXCIsXG4gIFVzZVJvdXRlTG9hZGVyRGF0YSA9IFwidXNlUm91dGVMb2FkZXJEYXRhXCIsXG4gIFVzZU1hdGNoZXMgPSBcInVzZU1hdGNoZXNcIixcbiAgVXNlUmV2YWxpZGF0b3IgPSBcInVzZVJldmFsaWRhdG9yXCIsXG4gIFVzZU5hdmlnYXRlU3RhYmxlID0gXCJ1c2VOYXZpZ2F0ZVwiLFxuICBVc2VSb3V0ZUlkID0gXCJ1c2VSb3V0ZUlkXCIsXG59XG5cbmZ1bmN0aW9uIGdldERhdGFSb3V0ZXJDb25zb2xlRXJyb3IoXG4gIGhvb2tOYW1lOiBEYXRhUm91dGVySG9vayB8IERhdGFSb3V0ZXJTdGF0ZUhvb2tcbikge1xuICByZXR1cm4gYCR7aG9va05hbWV9IG11c3QgYmUgdXNlZCB3aXRoaW4gYSBkYXRhIHJvdXRlci4gIFNlZSBodHRwczovL3JlYWN0cm91dGVyLmNvbS9yb3V0ZXJzL3BpY2tpbmctYS1yb3V0ZXIuYDtcbn1cblxuZnVuY3Rpb24gdXNlRGF0YVJvdXRlckNvbnRleHQoaG9va05hbWU6IERhdGFSb3V0ZXJIb29rKSB7XG4gIGxldCBjdHggPSBSZWFjdC51c2VDb250ZXh0KERhdGFSb3V0ZXJDb250ZXh0KTtcbiAgaW52YXJpYW50KGN0eCwgZ2V0RGF0YVJvdXRlckNvbnNvbGVFcnJvcihob29rTmFtZSkpO1xuICByZXR1cm4gY3R4O1xufVxuXG5mdW5jdGlvbiB1c2VEYXRhUm91dGVyU3RhdGUoaG9va05hbWU6IERhdGFSb3V0ZXJTdGF0ZUhvb2spIHtcbiAgbGV0IHN0YXRlID0gUmVhY3QudXNlQ29udGV4dChEYXRhUm91dGVyU3RhdGVDb250ZXh0KTtcbiAgaW52YXJpYW50KHN0YXRlLCBnZXREYXRhUm91dGVyQ29uc29sZUVycm9yKGhvb2tOYW1lKSk7XG4gIHJldHVybiBzdGF0ZTtcbn1cblxuZnVuY3Rpb24gdXNlUm91dGVDb250ZXh0KGhvb2tOYW1lOiBEYXRhUm91dGVyU3RhdGVIb29rKSB7XG4gIGxldCByb3V0ZSA9IFJlYWN0LnVzZUNvbnRleHQoUm91dGVDb250ZXh0KTtcbiAgaW52YXJpYW50KHJvdXRlLCBnZXREYXRhUm91dGVyQ29uc29sZUVycm9yKGhvb2tOYW1lKSk7XG4gIHJldHVybiByb3V0ZTtcbn1cblxuLy8gSW50ZXJuYWwgdmVyc2lvbiB3aXRoIGhvb2tOYW1lLWF3YXJlIGRlYnVnZ2luZ1xuZnVuY3Rpb24gdXNlQ3VycmVudFJvdXRlSWQoaG9va05hbWU6IERhdGFSb3V0ZXJTdGF0ZUhvb2spIHtcbiAgbGV0IHJvdXRlID0gdXNlUm91dGVDb250ZXh0KGhvb2tOYW1lKTtcbiAgbGV0IHRoaXNSb3V0ZSA9IHJvdXRlLm1hdGNoZXNbcm91dGUubWF0Y2hlcy5sZW5ndGggLSAxXTtcbiAgaW52YXJpYW50KFxuICAgIHRoaXNSb3V0ZS5yb3V0ZS5pZCxcbiAgICBgJHtob29rTmFtZX0gY2FuIG9ubHkgYmUgdXNlZCBvbiByb3V0ZXMgdGhhdCBjb250YWluIGEgdW5pcXVlIFwiaWRcImBcbiAgKTtcbiAgcmV0dXJuIHRoaXNSb3V0ZS5yb3V0ZS5pZDtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBJRCBmb3IgdGhlIG5lYXJlc3QgY29udGV4dHVhbCByb3V0ZVxuICovXG5leHBvcnQgZnVuY3Rpb24gdXNlUm91dGVJZCgpIHtcbiAgcmV0dXJuIHVzZUN1cnJlbnRSb3V0ZUlkKERhdGFSb3V0ZXJTdGF0ZUhvb2suVXNlUm91dGVJZCk7XG59XG5cbi8qKlxuICogUmV0dXJucyB0aGUgY3VycmVudCBuYXZpZ2F0aW9uLCBkZWZhdWx0aW5nIHRvIGFuIFwiaWRsZVwiIG5hdmlnYXRpb24gd2hlblxuICogbm8gbmF2aWdhdGlvbiBpcyBpbiBwcm9ncmVzc1xuICovXG5leHBvcnQgZnVuY3Rpb24gdXNlTmF2aWdhdGlvbigpIHtcbiAgbGV0IHN0YXRlID0gdXNlRGF0YVJvdXRlclN0YXRlKERhdGFSb3V0ZXJTdGF0ZUhvb2suVXNlTmF2aWdhdGlvbik7XG4gIHJldHVybiBzdGF0ZS5uYXZpZ2F0aW9uO1xufVxuXG4vKipcbiAqIFJldHVybnMgYSByZXZhbGlkYXRlIGZ1bmN0aW9uIGZvciBtYW51YWxseSB0cmlnZ2VyaW5nIHJldmFsaWRhdGlvbiwgYXMgd2VsbFxuICogYXMgdGhlIGN1cnJlbnQgc3RhdGUgb2YgYW55IG1hbnVhbCByZXZhbGlkYXRpb25zXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB1c2VSZXZhbGlkYXRvcigpIHtcbiAgbGV0IGRhdGFSb3V0ZXJDb250ZXh0ID0gdXNlRGF0YVJvdXRlckNvbnRleHQoRGF0YVJvdXRlckhvb2suVXNlUmV2YWxpZGF0b3IpO1xuICBsZXQgc3RhdGUgPSB1c2VEYXRhUm91dGVyU3RhdGUoRGF0YVJvdXRlclN0YXRlSG9vay5Vc2VSZXZhbGlkYXRvcik7XG4gIHJldHVybiBSZWFjdC51c2VNZW1vKFxuICAgICgpID0+ICh7XG4gICAgICByZXZhbGlkYXRlOiBkYXRhUm91dGVyQ29udGV4dC5yb3V0ZXIucmV2YWxpZGF0ZSxcbiAgICAgIHN0YXRlOiBzdGF0ZS5yZXZhbGlkYXRpb24sXG4gICAgfSksXG4gICAgW2RhdGFSb3V0ZXJDb250ZXh0LnJvdXRlci5yZXZhbGlkYXRlLCBzdGF0ZS5yZXZhbGlkYXRpb25dXG4gICk7XG59XG5cbi8qKlxuICogUmV0dXJucyB0aGUgYWN0aXZlIHJvdXRlIG1hdGNoZXMsIHVzZWZ1bCBmb3IgYWNjZXNzaW5nIGxvYWRlckRhdGEgZm9yXG4gKiBwYXJlbnQvY2hpbGQgcm91dGVzIG9yIHRoZSByb3V0ZSBcImhhbmRsZVwiIHByb3BlcnR5XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB1c2VNYXRjaGVzKCk6IFVJTWF0Y2hbXSB7XG4gIGxldCB7IG1hdGNoZXMsIGxvYWRlckRhdGEgfSA9IHVzZURhdGFSb3V0ZXJTdGF0ZShcbiAgICBEYXRhUm91dGVyU3RhdGVIb29rLlVzZU1hdGNoZXNcbiAgKTtcbiAgcmV0dXJuIFJlYWN0LnVzZU1lbW8oXG4gICAgKCkgPT4gbWF0Y2hlcy5tYXAoKG0pID0+IGNvbnZlcnRSb3V0ZU1hdGNoVG9VaU1hdGNoKG0sIGxvYWRlckRhdGEpKSxcbiAgICBbbWF0Y2hlcywgbG9hZGVyRGF0YV1cbiAgKTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBsb2FkZXIgZGF0YSBmb3IgdGhlIG5lYXJlc3QgYW5jZXN0b3IgUm91dGUgbG9hZGVyXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB1c2VMb2FkZXJEYXRhKCk6IHVua25vd24ge1xuICBsZXQgc3RhdGUgPSB1c2VEYXRhUm91dGVyU3RhdGUoRGF0YVJvdXRlclN0YXRlSG9vay5Vc2VMb2FkZXJEYXRhKTtcbiAgbGV0IHJvdXRlSWQgPSB1c2VDdXJyZW50Um91dGVJZChEYXRhUm91dGVyU3RhdGVIb29rLlVzZUxvYWRlckRhdGEpO1xuXG4gIGlmIChzdGF0ZS5lcnJvcnMgJiYgc3RhdGUuZXJyb3JzW3JvdXRlSWRdICE9IG51bGwpIHtcbiAgICBjb25zb2xlLmVycm9yKFxuICAgICAgYFlvdSBjYW5ub3QgXFxgdXNlTG9hZGVyRGF0YVxcYCBpbiBhbiBlcnJvckVsZW1lbnQgKHJvdXRlSWQ6ICR7cm91dGVJZH0pYFxuICAgICk7XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfVxuICByZXR1cm4gc3RhdGUubG9hZGVyRGF0YVtyb3V0ZUlkXTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBsb2FkZXJEYXRhIGZvciB0aGUgZ2l2ZW4gcm91dGVJZFxuICovXG5leHBvcnQgZnVuY3Rpb24gdXNlUm91dGVMb2FkZXJEYXRhKHJvdXRlSWQ6IHN0cmluZyk6IHVua25vd24ge1xuICBsZXQgc3RhdGUgPSB1c2VEYXRhUm91dGVyU3RhdGUoRGF0YVJvdXRlclN0YXRlSG9vay5Vc2VSb3V0ZUxvYWRlckRhdGEpO1xuICByZXR1cm4gc3RhdGUubG9hZGVyRGF0YVtyb3V0ZUlkXTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBhY3Rpb24gZGF0YSBmb3IgdGhlIG5lYXJlc3QgYW5jZXN0b3IgUm91dGUgYWN0aW9uXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB1c2VBY3Rpb25EYXRhKCk6IHVua25vd24ge1xuICBsZXQgc3RhdGUgPSB1c2VEYXRhUm91dGVyU3RhdGUoRGF0YVJvdXRlclN0YXRlSG9vay5Vc2VBY3Rpb25EYXRhKTtcbiAgbGV0IHJvdXRlSWQgPSB1c2VDdXJyZW50Um91dGVJZChEYXRhUm91dGVyU3RhdGVIb29rLlVzZUxvYWRlckRhdGEpO1xuICByZXR1cm4gc3RhdGUuYWN0aW9uRGF0YSA/IHN0YXRlLmFjdGlvbkRhdGFbcm91dGVJZF0gOiB1bmRlZmluZWQ7XG59XG5cbi8qKlxuICogUmV0dXJucyB0aGUgbmVhcmVzdCBhbmNlc3RvciBSb3V0ZSBlcnJvciwgd2hpY2ggY291bGQgYmUgYSBsb2FkZXIvYWN0aW9uXG4gKiBlcnJvciBvciBhIHJlbmRlciBlcnJvci4gIFRoaXMgaXMgaW50ZW5kZWQgdG8gYmUgY2FsbGVkIGZyb20geW91clxuICogRXJyb3JCb3VuZGFyeS9lcnJvckVsZW1lbnQgdG8gZGlzcGxheSBhIHByb3BlciBlcnJvciBtZXNzYWdlLlxuICovXG5leHBvcnQgZnVuY3Rpb24gdXNlUm91dGVFcnJvcigpOiB1bmtub3duIHtcbiAgbGV0IGVycm9yID0gUmVhY3QudXNlQ29udGV4dChSb3V0ZUVycm9yQ29udGV4dCk7XG4gIGxldCBzdGF0ZSA9IHVzZURhdGFSb3V0ZXJTdGF0ZShEYXRhUm91dGVyU3RhdGVIb29rLlVzZVJvdXRlRXJyb3IpO1xuICBsZXQgcm91dGVJZCA9IHVzZUN1cnJlbnRSb3V0ZUlkKERhdGFSb3V0ZXJTdGF0ZUhvb2suVXNlUm91dGVFcnJvcik7XG5cbiAgLy8gSWYgdGhpcyB3YXMgYSByZW5kZXIgZXJyb3IsIHdlIHB1dCBpdCBpbiBhIFJvdXRlRXJyb3IgY29udGV4dCBpbnNpZGVcbiAgLy8gb2YgUmVuZGVyRXJyb3JCb3VuZGFyeVxuICBpZiAoZXJyb3IgIT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiBlcnJvcjtcbiAgfVxuXG4gIC8vIE90aGVyd2lzZSBsb29rIGZvciBlcnJvcnMgZnJvbSBvdXIgZGF0YSByb3V0ZXIgc3RhdGVcbiAgcmV0dXJuIHN0YXRlLmVycm9ycz8uW3JvdXRlSWRdO1xufVxuXG4vKipcbiAqIFJldHVybnMgdGhlIGhhcHB5LXBhdGggZGF0YSBmcm9tIHRoZSBuZWFyZXN0IGFuY2VzdG9yIGA8QXdhaXQgLz5gIHZhbHVlXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB1c2VBc3luY1ZhbHVlKCk6IHVua25vd24ge1xuICBsZXQgdmFsdWUgPSBSZWFjdC51c2VDb250ZXh0KEF3YWl0Q29udGV4dCk7XG4gIHJldHVybiB2YWx1ZT8uX2RhdGE7XG59XG5cbi8qKlxuICogUmV0dXJucyB0aGUgZXJyb3IgZnJvbSB0aGUgbmVhcmVzdCBhbmNlc3RvciBgPEF3YWl0IC8+YCB2YWx1ZVxuICovXG5leHBvcnQgZnVuY3Rpb24gdXNlQXN5bmNFcnJvcigpOiB1bmtub3duIHtcbiAgbGV0IHZhbHVlID0gUmVhY3QudXNlQ29udGV4dChBd2FpdENvbnRleHQpO1xuICByZXR1cm4gdmFsdWU/Ll9lcnJvcjtcbn1cblxubGV0IGJsb2NrZXJJZCA9IDA7XG5cbi8qKlxuICogQWxsb3cgdGhlIGFwcGxpY2F0aW9uIHRvIGJsb2NrIG5hdmlnYXRpb25zIHdpdGhpbiB0aGUgU1BBIGFuZCBwcmVzZW50IHRoZVxuICogdXNlciBhIGNvbmZpcm1hdGlvbiBkaWFsb2cgdG8gY29uZmlybSB0aGUgbmF2aWdhdGlvbi4gIE1vc3RseSB1c2VkIHRvIGF2b2lkXG4gKiB1c2luZyBoYWxmLWZpbGxlZCBmb3JtIGRhdGEuICBUaGlzIGRvZXMgbm90IGhhbmRsZSBoYXJkLXJlbG9hZHMgb3JcbiAqIGNyb3NzLW9yaWdpbiBuYXZpZ2F0aW9ucy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHVzZUJsb2NrZXIoc2hvdWxkQmxvY2s6IGJvb2xlYW4gfCBCbG9ja2VyRnVuY3Rpb24pOiBCbG9ja2VyIHtcbiAgbGV0IHsgcm91dGVyLCBiYXNlbmFtZSB9ID0gdXNlRGF0YVJvdXRlckNvbnRleHQoRGF0YVJvdXRlckhvb2suVXNlQmxvY2tlcik7XG4gIGxldCBzdGF0ZSA9IHVzZURhdGFSb3V0ZXJTdGF0ZShEYXRhUm91dGVyU3RhdGVIb29rLlVzZUJsb2NrZXIpO1xuXG4gIGxldCBbYmxvY2tlcktleSwgc2V0QmxvY2tlcktleV0gPSBSZWFjdC51c2VTdGF0ZShcIlwiKTtcbiAgbGV0IGJsb2NrZXJGdW5jdGlvbiA9IFJlYWN0LnVzZUNhbGxiYWNrPEJsb2NrZXJGdW5jdGlvbj4oXG4gICAgKGFyZykgPT4ge1xuICAgICAgaWYgKHR5cGVvZiBzaG91bGRCbG9jayAhPT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgIHJldHVybiAhIXNob3VsZEJsb2NrO1xuICAgICAgfVxuICAgICAgaWYgKGJhc2VuYW1lID09PSBcIi9cIikge1xuICAgICAgICByZXR1cm4gc2hvdWxkQmxvY2soYXJnKTtcbiAgICAgIH1cblxuICAgICAgLy8gSWYgdGhleSBwcm92aWRlZCB1cyBhIGZ1bmN0aW9uIGFuZCB3ZSd2ZSBnb3QgYW4gYWN0aXZlIGJhc2VuYW1lLCBzdHJpcFxuICAgICAgLy8gaXQgZnJvbSB0aGUgbG9jYXRpb25zIHdlIGV4cG9zZSB0byB0aGUgdXNlciB0byBtYXRjaCB0aGUgYmVoYXZpb3Igb2ZcbiAgICAgIC8vIHVzZUxvY2F0aW9uXG4gICAgICBsZXQgeyBjdXJyZW50TG9jYXRpb24sIG5leHRMb2NhdGlvbiwgaGlzdG9yeUFjdGlvbiB9ID0gYXJnO1xuICAgICAgcmV0dXJuIHNob3VsZEJsb2NrKHtcbiAgICAgICAgY3VycmVudExvY2F0aW9uOiB7XG4gICAgICAgICAgLi4uY3VycmVudExvY2F0aW9uLFxuICAgICAgICAgIHBhdGhuYW1lOlxuICAgICAgICAgICAgc3RyaXBCYXNlbmFtZShjdXJyZW50TG9jYXRpb24ucGF0aG5hbWUsIGJhc2VuYW1lKSB8fFxuICAgICAgICAgICAgY3VycmVudExvY2F0aW9uLnBhdGhuYW1lLFxuICAgICAgICB9LFxuICAgICAgICBuZXh0TG9jYXRpb246IHtcbiAgICAgICAgICAuLi5uZXh0TG9jYXRpb24sXG4gICAgICAgICAgcGF0aG5hbWU6XG4gICAgICAgICAgICBzdHJpcEJhc2VuYW1lKG5leHRMb2NhdGlvbi5wYXRobmFtZSwgYmFzZW5hbWUpIHx8XG4gICAgICAgICAgICBuZXh0TG9jYXRpb24ucGF0aG5hbWUsXG4gICAgICAgIH0sXG4gICAgICAgIGhpc3RvcnlBY3Rpb24sXG4gICAgICB9KTtcbiAgICB9LFxuICAgIFtiYXNlbmFtZSwgc2hvdWxkQmxvY2tdXG4gICk7XG5cbiAgLy8gVGhpcyBlZmZlY3QgaXMgaW4gY2hhcmdlIG9mIGJsb2NrZXIga2V5IGFzc2lnbm1lbnQgYW5kIGRlbGV0aW9uICh3aGljaCBpc1xuICAvLyB0aWdodGx5IGNvdXBsZWQgdG8gdGhlIGtleSlcbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICBsZXQga2V5ID0gU3RyaW5nKCsrYmxvY2tlcklkKTtcbiAgICBzZXRCbG9ja2VyS2V5KGtleSk7XG4gICAgcmV0dXJuICgpID0+IHJvdXRlci5kZWxldGVCbG9ja2VyKGtleSk7XG4gIH0sIFtyb3V0ZXJdKTtcblxuICAvLyBUaGlzIGVmZmVjdCBoYW5kbGVzIGFzc2lnbmluZyB0aGUgYmxvY2tlckZ1bmN0aW9uLiAgVGhpcyBpcyB0byBoYW5kbGVcbiAgLy8gdW5zdGFibGUgYmxvY2tlciBmdW5jdGlvbiBpZGVudGl0aWVzLCBhbmQgaGFwcGVucyBvbmx5IGFmdGVyIHRoZSBwcmlvclxuICAvLyBlZmZlY3Qgc28gd2UgZG9uJ3QgZ2V0IGFuIG9ycGhhbmVkIGJsb2NrZXJGdW5jdGlvbiBpbiB0aGUgcm91dGVyIHdpdGggYVxuICAvLyBrZXkgb2YgXCJcIi4gIFVudGlsIHRoZW4gd2UganVzdCBoYXZlIHRoZSBJRExFX0JMT0NLRVIuXG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKGJsb2NrZXJLZXkgIT09IFwiXCIpIHtcbiAgICAgIHJvdXRlci5nZXRCbG9ja2VyKGJsb2NrZXJLZXksIGJsb2NrZXJGdW5jdGlvbik7XG4gICAgfVxuICB9LCBbcm91dGVyLCBibG9ja2VyS2V5LCBibG9ja2VyRnVuY3Rpb25dKTtcblxuICAvLyBQcmVmZXIgdGhlIGJsb2NrZXIgZnJvbSBgc3RhdGVgIG5vdCBgcm91dGVyLnN0YXRlYCBzaW5jZSBEYXRhUm91dGVyQ29udGV4dFxuICAvLyBpcyBtZW1vaXplZCBzbyB0aGlzIGVuc3VyZXMgd2UgdXBkYXRlIG9uIGJsb2NrZXIgc3RhdGUgdXBkYXRlc1xuICByZXR1cm4gYmxvY2tlcktleSAmJiBzdGF0ZS5ibG9ja2Vycy5oYXMoYmxvY2tlcktleSlcbiAgICA/IHN0YXRlLmJsb2NrZXJzLmdldChibG9ja2VyS2V5KSFcbiAgICA6IElETEVfQkxPQ0tFUjtcbn1cblxuLyoqXG4gKiBTdGFibGUgdmVyc2lvbiBvZiB1c2VOYXZpZ2F0ZSB0aGF0IGlzIHVzZWQgd2hlbiB3ZSBhcmUgaW4gdGhlIGNvbnRleHQgb2ZcbiAqIGEgUm91dGVyUHJvdmlkZXIuXG4gKi9cbmZ1bmN0aW9uIHVzZU5hdmlnYXRlU3RhYmxlKCk6IE5hdmlnYXRlRnVuY3Rpb24ge1xuICBsZXQgeyByb3V0ZXIgfSA9IHVzZURhdGFSb3V0ZXJDb250ZXh0KERhdGFSb3V0ZXJIb29rLlVzZU5hdmlnYXRlU3RhYmxlKTtcbiAgbGV0IGlkID0gdXNlQ3VycmVudFJvdXRlSWQoRGF0YVJvdXRlclN0YXRlSG9vay5Vc2VOYXZpZ2F0ZVN0YWJsZSk7XG5cbiAgbGV0IGFjdGl2ZVJlZiA9IFJlYWN0LnVzZVJlZihmYWxzZSk7XG4gIHVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QoKCkgPT4ge1xuICAgIGFjdGl2ZVJlZi5jdXJyZW50ID0gdHJ1ZTtcbiAgfSk7XG5cbiAgbGV0IG5hdmlnYXRlOiBOYXZpZ2F0ZUZ1bmN0aW9uID0gUmVhY3QudXNlQ2FsbGJhY2soXG4gICAgKHRvOiBUbyB8IG51bWJlciwgb3B0aW9uczogTmF2aWdhdGVPcHRpb25zID0ge30pID0+IHtcbiAgICAgIHdhcm5pbmcoYWN0aXZlUmVmLmN1cnJlbnQsIG5hdmlnYXRlRWZmZWN0V2FybmluZyk7XG5cbiAgICAgIC8vIFNob3J0IGNpcmN1aXQgaGVyZSBzaW5jZSBpZiB0aGlzIGhhcHBlbnMgb24gZmlyc3QgcmVuZGVyIHRoZSBuYXZpZ2F0ZVxuICAgICAgLy8gaXMgdXNlbGVzcyBiZWNhdXNlIHdlIGhhdmVuJ3Qgd2lyZWQgdXAgb3VyIHJvdXRlciBzdWJzY3JpYmVyIHlldFxuICAgICAgaWYgKCFhY3RpdmVSZWYuY3VycmVudCkgcmV0dXJuO1xuXG4gICAgICBpZiAodHlwZW9mIHRvID09PSBcIm51bWJlclwiKSB7XG4gICAgICAgIHJvdXRlci5uYXZpZ2F0ZSh0byk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByb3V0ZXIubmF2aWdhdGUodG8sIHsgZnJvbVJvdXRlSWQ6IGlkLCAuLi5vcHRpb25zIH0pO1xuICAgICAgfVxuICAgIH0sXG4gICAgW3JvdXRlciwgaWRdXG4gICk7XG5cbiAgcmV0dXJuIG5hdmlnYXRlO1xufVxuXG5jb25zdCBhbHJlYWR5V2FybmVkOiBSZWNvcmQ8c3RyaW5nLCBib29sZWFuPiA9IHt9O1xuXG5mdW5jdGlvbiB3YXJuaW5nT25jZShrZXk6IHN0cmluZywgY29uZDogYm9vbGVhbiwgbWVzc2FnZTogc3RyaW5nKSB7XG4gIGlmICghY29uZCAmJiAhYWxyZWFkeVdhcm5lZFtrZXldKSB7XG4gICAgYWxyZWFkeVdhcm5lZFtrZXldID0gdHJ1ZTtcbiAgICB3YXJuaW5nKGZhbHNlLCBtZXNzYWdlKTtcbiAgfVxufVxuIiwiaW1wb3J0IHR5cGUge1xuICBJbml0aWFsRW50cnksXG4gIExhenlSb3V0ZUZ1bmN0aW9uLFxuICBMb2NhdGlvbixcbiAgTWVtb3J5SGlzdG9yeSxcbiAgUmVsYXRpdmVSb3V0aW5nVHlwZSxcbiAgUm91dGVyIGFzIFJlbWl4Um91dGVyLFxuICBSb3V0ZXJTdGF0ZSxcbiAgUm91dGVyU3Vic2NyaWJlcixcbiAgVG8sXG4gIFRyYWNrZWRQcm9taXNlLFxufSBmcm9tIFwiQHJlbWl4LXJ1bi9yb3V0ZXJcIjtcbmltcG9ydCB7XG4gIEFib3J0ZWREZWZlcnJlZEVycm9yLFxuICBBY3Rpb24gYXMgTmF2aWdhdGlvblR5cGUsXG4gIGNyZWF0ZU1lbW9yeUhpc3RvcnksXG4gIFVOU0FGRV9nZXRSZXNvbHZlVG9NYXRjaGVzIGFzIGdldFJlc29sdmVUb01hdGNoZXMsXG4gIFVOU0FGRV9pbnZhcmlhbnQgYXMgaW52YXJpYW50LFxuICBwYXJzZVBhdGgsXG4gIHJlc29sdmVUbyxcbiAgc3RyaXBCYXNlbmFtZSxcbiAgVU5TQUZFX3dhcm5pbmcgYXMgd2FybmluZyxcbn0gZnJvbSBcIkByZW1peC1ydW4vcm91dGVyXCI7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tIFwicmVhY3RcIjtcblxuaW1wb3J0IHR5cGUge1xuICBEYXRhUm91dGVPYmplY3QsXG4gIEluZGV4Um91dGVPYmplY3QsXG4gIE5hdmlnYXRvcixcbiAgTm9uSW5kZXhSb3V0ZU9iamVjdCxcbiAgUm91dGVNYXRjaCxcbiAgUm91dGVPYmplY3QsXG59IGZyb20gXCIuL2NvbnRleHRcIjtcbmltcG9ydCB7XG4gIEF3YWl0Q29udGV4dCxcbiAgRGF0YVJvdXRlckNvbnRleHQsXG4gIERhdGFSb3V0ZXJTdGF0ZUNvbnRleHQsXG4gIExvY2F0aW9uQ29udGV4dCxcbiAgTmF2aWdhdGlvbkNvbnRleHQsXG4gIFJvdXRlQ29udGV4dCxcbn0gZnJvbSBcIi4vY29udGV4dFwiO1xuaW1wb3J0IHtcbiAgX3JlbmRlck1hdGNoZXMsXG4gIHVzZUFzeW5jVmFsdWUsXG4gIHVzZUluUm91dGVyQ29udGV4dCxcbiAgdXNlTG9jYXRpb24sXG4gIHVzZU5hdmlnYXRlLFxuICB1c2VPdXRsZXQsXG4gIHVzZVJvdXRlcyxcbiAgdXNlUm91dGVzSW1wbCxcbn0gZnJvbSBcIi4vaG9va3NcIjtcblxuZXhwb3J0IGludGVyZmFjZSBGdXR1cmVDb25maWcge1xuICB2N19yZWxhdGl2ZVNwbGF0UGF0aDogYm9vbGVhbjtcbiAgdjdfc3RhcnRUcmFuc2l0aW9uOiBib29sZWFuO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFJvdXRlclByb3ZpZGVyUHJvcHMge1xuICBmYWxsYmFja0VsZW1lbnQ/OiBSZWFjdC5SZWFjdE5vZGU7XG4gIHJvdXRlcjogUmVtaXhSb3V0ZXI7XG4gIC8vIE9ubHkgYWNjZXB0IGZ1dHVyZSBmbGFncyByZWxldmFudCB0byByZW5kZXJpbmcgYmVoYXZpb3JcbiAgLy8gcm91dGluZyBmbGFncyBzaG91bGQgYmUgYWNjZXNzZWQgdmlhIHJvdXRlci5mdXR1cmVcbiAgZnV0dXJlPzogUGFydGlhbDxQaWNrPEZ1dHVyZUNvbmZpZywgXCJ2N19zdGFydFRyYW5zaXRpb25cIj4+O1xufVxuXG4vKipcbiAgV2VicGFjayArIFJlYWN0IDE3IGZhaWxzIHRvIGNvbXBpbGUgb24gYW55IG9mIHRoZSBmb2xsb3dpbmcgYmVjYXVzZSB3ZWJwYWNrXG4gIGNvbXBsYWlucyB0aGF0IGBzdGFydFRyYW5zaXRpb25gIGRvZXNuJ3QgZXhpc3QgaW4gYFJlYWN0YDpcbiAgKiBpbXBvcnQgeyBzdGFydFRyYW5zaXRpb24gfSBmcm9tIFwicmVhY3RcIlxuICAqIGltcG9ydCAqIGFzIFJlYWN0IGZyb20gZnJvbSBcInJlYWN0XCI7XG4gICAgXCJzdGFydFRyYW5zaXRpb25cIiBpbiBSZWFjdCA/IFJlYWN0LnN0YXJ0VHJhbnNpdGlvbigoKSA9PiBzZXRTdGF0ZSgpKSA6IHNldFN0YXRlKClcbiAgKiBpbXBvcnQgKiBhcyBSZWFjdCBmcm9tIGZyb20gXCJyZWFjdFwiO1xuICAgIFwic3RhcnRUcmFuc2l0aW9uXCIgaW4gUmVhY3QgPyBSZWFjdFtcInN0YXJ0VHJhbnNpdGlvblwiXSgoKSA9PiBzZXRTdGF0ZSgpKSA6IHNldFN0YXRlKClcblxuICBNb3ZpbmcgaXQgdG8gYSBjb25zdGFudCBzdWNoIGFzIHRoZSBmb2xsb3dpbmcgc29sdmVzIHRoZSBXZWJwYWNrL1JlYWN0IDE3IGlzc3VlOlxuICAqIGltcG9ydCAqIGFzIFJlYWN0IGZyb20gZnJvbSBcInJlYWN0XCI7XG4gICAgY29uc3QgU1RBUlRfVFJBTlNJVElPTiA9IFwic3RhcnRUcmFuc2l0aW9uXCI7XG4gICAgU1RBUlRfVFJBTlNJVElPTiBpbiBSZWFjdCA/IFJlYWN0W1NUQVJUX1RSQU5TSVRJT05dKCgpID0+IHNldFN0YXRlKCkpIDogc2V0U3RhdGUoKVxuXG4gIEhvd2V2ZXIsIHRoYXQgaW50cm9kdWNlcyB3ZWJwYWNrL3RlcnNlciBtaW5pZmljYXRpb24gaXNzdWVzIGluIHByb2R1Y3Rpb24gYnVpbGRzXG4gIGluIFJlYWN0IDE4IHdoZXJlIG1pbmlmaWNhdGlvbi9vYmZ1c2NhdGlvbiBlbmRzIHVwIHJlbW92aW5nIHRoZSBjYWxsIG9mXG4gIFJlYWN0LnN0YXJ0VHJhbnNpdGlvbiBlbnRpcmVseSBmcm9tIHRoZSBmaXJzdCBoYWxmIG9mIHRoZSB0ZXJuYXJ5LiAgR3JhYmJpbmdcbiAgdGhpcyBleHBvcnRlZCByZWZlcmVuY2Ugb25jZSB1cCBmcm9udCByZXNvbHZlcyB0aGF0IGlzc3VlLlxuXG4gIFNlZSBodHRwczovL2dpdGh1Yi5jb20vcmVtaXgtcnVuL3JlYWN0LXJvdXRlci9pc3N1ZXMvMTA1NzlcbiovXG5jb25zdCBTVEFSVF9UUkFOU0lUSU9OID0gXCJzdGFydFRyYW5zaXRpb25cIjtcbmNvbnN0IHN0YXJ0VHJhbnNpdGlvbkltcGwgPSBSZWFjdFtTVEFSVF9UUkFOU0lUSU9OXTtcblxuLyoqXG4gKiBHaXZlbiBhIFJlbWl4IFJvdXRlciBpbnN0YW5jZSwgcmVuZGVyIHRoZSBhcHByb3ByaWF0ZSBVSVxuICovXG5leHBvcnQgZnVuY3Rpb24gUm91dGVyUHJvdmlkZXIoe1xuICBmYWxsYmFja0VsZW1lbnQsXG4gIHJvdXRlcixcbiAgZnV0dXJlLFxufTogUm91dGVyUHJvdmlkZXJQcm9wcyk6IFJlYWN0LlJlYWN0RWxlbWVudCB7XG4gIGxldCBbc3RhdGUsIHNldFN0YXRlSW1wbF0gPSBSZWFjdC51c2VTdGF0ZShyb3V0ZXIuc3RhdGUpO1xuICBsZXQgeyB2N19zdGFydFRyYW5zaXRpb24gfSA9IGZ1dHVyZSB8fCB7fTtcblxuICBsZXQgc2V0U3RhdGUgPSBSZWFjdC51c2VDYWxsYmFjazxSb3V0ZXJTdWJzY3JpYmVyPihcbiAgICAobmV3U3RhdGU6IFJvdXRlclN0YXRlKSA9PiB7XG4gICAgICBpZiAodjdfc3RhcnRUcmFuc2l0aW9uICYmIHN0YXJ0VHJhbnNpdGlvbkltcGwpIHtcbiAgICAgICAgc3RhcnRUcmFuc2l0aW9uSW1wbCgoKSA9PiBzZXRTdGF0ZUltcGwobmV3U3RhdGUpKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNldFN0YXRlSW1wbChuZXdTdGF0ZSk7XG4gICAgICB9XG4gICAgfSxcbiAgICBbc2V0U3RhdGVJbXBsLCB2N19zdGFydFRyYW5zaXRpb25dXG4gICk7XG5cbiAgLy8gTmVlZCB0byB1c2UgYSBsYXlvdXQgZWZmZWN0IGhlcmUgc28gd2UgYXJlIHN1YnNjcmliZWQgZWFybHkgZW5vdWdoIHRvXG4gIC8vIHBpY2sgdXAgb24gYW55IHJlbmRlci1kcml2ZW4gcmVkaXJlY3RzL25hdmlnYXRpb25zICh1c2VFZmZlY3QvPE5hdmlnYXRlPilcbiAgUmVhY3QudXNlTGF5b3V0RWZmZWN0KCgpID0+IHJvdXRlci5zdWJzY3JpYmUoc2V0U3RhdGUpLCBbcm91dGVyLCBzZXRTdGF0ZV0pO1xuXG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgd2FybmluZyhcbiAgICAgIGZhbGxiYWNrRWxlbWVudCA9PSBudWxsIHx8ICFyb3V0ZXIuZnV0dXJlLnY3X3BhcnRpYWxIeWRyYXRpb24sXG4gICAgICBcImA8Um91dGVyUHJvdmlkZXIgZmFsbGJhY2tFbGVtZW50PmAgaXMgZGVwcmVjYXRlZCB3aGVuIHVzaW5nIFwiICtcbiAgICAgICAgXCJgdjdfcGFydGlhbEh5ZHJhdGlvbmAsIHVzZSBhIGBIeWRyYXRlRmFsbGJhY2tgIGNvbXBvbmVudCBpbnN0ZWFkXCJcbiAgICApO1xuICAgIC8vIE9ubHkgbG9nIHRoaXMgb25jZSBvbiBpbml0aWFsIG1vdW50XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0LWhvb2tzL2V4aGF1c3RpdmUtZGVwc1xuICB9LCBbXSk7XG5cbiAgbGV0IG5hdmlnYXRvciA9IFJlYWN0LnVzZU1lbW8oKCk6IE5hdmlnYXRvciA9PiB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGNyZWF0ZUhyZWY6IHJvdXRlci5jcmVhdGVIcmVmLFxuICAgICAgZW5jb2RlTG9jYXRpb246IHJvdXRlci5lbmNvZGVMb2NhdGlvbixcbiAgICAgIGdvOiAobikgPT4gcm91dGVyLm5hdmlnYXRlKG4pLFxuICAgICAgcHVzaDogKHRvLCBzdGF0ZSwgb3B0cykgPT5cbiAgICAgICAgcm91dGVyLm5hdmlnYXRlKHRvLCB7XG4gICAgICAgICAgc3RhdGUsXG4gICAgICAgICAgcHJldmVudFNjcm9sbFJlc2V0OiBvcHRzPy5wcmV2ZW50U2Nyb2xsUmVzZXQsXG4gICAgICAgIH0pLFxuICAgICAgcmVwbGFjZTogKHRvLCBzdGF0ZSwgb3B0cykgPT5cbiAgICAgICAgcm91dGVyLm5hdmlnYXRlKHRvLCB7XG4gICAgICAgICAgcmVwbGFjZTogdHJ1ZSxcbiAgICAgICAgICBzdGF0ZSxcbiAgICAgICAgICBwcmV2ZW50U2Nyb2xsUmVzZXQ6IG9wdHM/LnByZXZlbnRTY3JvbGxSZXNldCxcbiAgICAgICAgfSksXG4gICAgfTtcbiAgfSwgW3JvdXRlcl0pO1xuXG4gIGxldCBiYXNlbmFtZSA9IHJvdXRlci5iYXNlbmFtZSB8fCBcIi9cIjtcblxuICBsZXQgZGF0YVJvdXRlckNvbnRleHQgPSBSZWFjdC51c2VNZW1vKFxuICAgICgpID0+ICh7XG4gICAgICByb3V0ZXIsXG4gICAgICBuYXZpZ2F0b3IsXG4gICAgICBzdGF0aWM6IGZhbHNlLFxuICAgICAgYmFzZW5hbWUsXG4gICAgfSksXG4gICAgW3JvdXRlciwgbmF2aWdhdG9yLCBiYXNlbmFtZV1cbiAgKTtcblxuICAvLyBUaGUgZnJhZ21lbnQgYW5kIHtudWxsfSBoZXJlIGFyZSBpbXBvcnRhbnQhICBXZSBuZWVkIHRoZW0gdG8ga2VlcCBSZWFjdCAxOCdzXG4gIC8vIHVzZUlkIGhhcHB5IHdoZW4gd2UgYXJlIHNlcnZlci1yZW5kZXJpbmcgc2luY2Ugd2UgbWF5IGhhdmUgYSA8c2NyaXB0PiBoZXJlXG4gIC8vIGNvbnRhaW5pbmcgdGhlIGh5ZHJhdGVkIHNlcnZlci1zaWRlIHN0YXRpY0NvbnRleHQgKGZyb20gU3RhdGljUm91dGVyUHJvdmlkZXIpLlxuICAvLyB1c2VJZCByZWxpZXMgb24gdGhlIGNvbXBvbmVudCB0cmVlIHN0cnVjdHVyZSB0byBnZW5lcmF0ZSBkZXRlcm1pbmlzdGljIGlkJ3NcbiAgLy8gc28gd2UgbmVlZCB0byBlbnN1cmUgaXQgcmVtYWlucyB0aGUgc2FtZSBvbiB0aGUgY2xpZW50IGV2ZW4gdGhvdWdoXG4gIC8vIHdlIGRvbid0IG5lZWQgdGhlIDxzY3JpcHQ+IHRhZ1xuICByZXR1cm4gKFxuICAgIDw+XG4gICAgICA8RGF0YVJvdXRlckNvbnRleHQuUHJvdmlkZXIgdmFsdWU9e2RhdGFSb3V0ZXJDb250ZXh0fT5cbiAgICAgICAgPERhdGFSb3V0ZXJTdGF0ZUNvbnRleHQuUHJvdmlkZXIgdmFsdWU9e3N0YXRlfT5cbiAgICAgICAgICA8Um91dGVyXG4gICAgICAgICAgICBiYXNlbmFtZT17YmFzZW5hbWV9XG4gICAgICAgICAgICBsb2NhdGlvbj17c3RhdGUubG9jYXRpb259XG4gICAgICAgICAgICBuYXZpZ2F0aW9uVHlwZT17c3RhdGUuaGlzdG9yeUFjdGlvbn1cbiAgICAgICAgICAgIG5hdmlnYXRvcj17bmF2aWdhdG9yfVxuICAgICAgICAgICAgZnV0dXJlPXt7XG4gICAgICAgICAgICAgIHY3X3JlbGF0aXZlU3BsYXRQYXRoOiByb3V0ZXIuZnV0dXJlLnY3X3JlbGF0aXZlU3BsYXRQYXRoLFxuICAgICAgICAgICAgfX1cbiAgICAgICAgICA+XG4gICAgICAgICAgICB7c3RhdGUuaW5pdGlhbGl6ZWQgfHwgcm91dGVyLmZ1dHVyZS52N19wYXJ0aWFsSHlkcmF0aW9uID8gKFxuICAgICAgICAgICAgICA8RGF0YVJvdXRlc1xuICAgICAgICAgICAgICAgIHJvdXRlcz17cm91dGVyLnJvdXRlc31cbiAgICAgICAgICAgICAgICBmdXR1cmU9e3JvdXRlci5mdXR1cmV9XG4gICAgICAgICAgICAgICAgc3RhdGU9e3N0YXRlfVxuICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgKSA6IChcbiAgICAgICAgICAgICAgZmFsbGJhY2tFbGVtZW50XG4gICAgICAgICAgICApfVxuICAgICAgICAgIDwvUm91dGVyPlxuICAgICAgICA8L0RhdGFSb3V0ZXJTdGF0ZUNvbnRleHQuUHJvdmlkZXI+XG4gICAgICA8L0RhdGFSb3V0ZXJDb250ZXh0LlByb3ZpZGVyPlxuICAgICAge251bGx9XG4gICAgPC8+XG4gICk7XG59XG5cbmZ1bmN0aW9uIERhdGFSb3V0ZXMoe1xuICByb3V0ZXMsXG4gIGZ1dHVyZSxcbiAgc3RhdGUsXG59OiB7XG4gIHJvdXRlczogRGF0YVJvdXRlT2JqZWN0W107XG4gIGZ1dHVyZTogUmVtaXhSb3V0ZXJbXCJmdXR1cmVcIl07XG4gIHN0YXRlOiBSb3V0ZXJTdGF0ZTtcbn0pOiBSZWFjdC5SZWFjdEVsZW1lbnQgfCBudWxsIHtcbiAgcmV0dXJuIHVzZVJvdXRlc0ltcGwocm91dGVzLCB1bmRlZmluZWQsIHN0YXRlLCBmdXR1cmUpO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIE1lbW9yeVJvdXRlclByb3BzIHtcbiAgYmFzZW5hbWU/OiBzdHJpbmc7XG4gIGNoaWxkcmVuPzogUmVhY3QuUmVhY3ROb2RlO1xuICBpbml0aWFsRW50cmllcz86IEluaXRpYWxFbnRyeVtdO1xuICBpbml0aWFsSW5kZXg/OiBudW1iZXI7XG4gIGZ1dHVyZT86IFBhcnRpYWw8RnV0dXJlQ29uZmlnPjtcbn1cblxuLyoqXG4gKiBBIGA8Um91dGVyPmAgdGhhdCBzdG9yZXMgYWxsIGVudHJpZXMgaW4gbWVtb3J5LlxuICpcbiAqIEBzZWUgaHR0cHM6Ly9yZWFjdHJvdXRlci5jb20vcm91dGVyLWNvbXBvbmVudHMvbWVtb3J5LXJvdXRlclxuICovXG5leHBvcnQgZnVuY3Rpb24gTWVtb3J5Um91dGVyKHtcbiAgYmFzZW5hbWUsXG4gIGNoaWxkcmVuLFxuICBpbml0aWFsRW50cmllcyxcbiAgaW5pdGlhbEluZGV4LFxuICBmdXR1cmUsXG59OiBNZW1vcnlSb3V0ZXJQcm9wcyk6IFJlYWN0LlJlYWN0RWxlbWVudCB7XG4gIGxldCBoaXN0b3J5UmVmID0gUmVhY3QudXNlUmVmPE1lbW9yeUhpc3Rvcnk+KCk7XG4gIGlmIChoaXN0b3J5UmVmLmN1cnJlbnQgPT0gbnVsbCkge1xuICAgIGhpc3RvcnlSZWYuY3VycmVudCA9IGNyZWF0ZU1lbW9yeUhpc3Rvcnkoe1xuICAgICAgaW5pdGlhbEVudHJpZXMsXG4gICAgICBpbml0aWFsSW5kZXgsXG4gICAgICB2NUNvbXBhdDogdHJ1ZSxcbiAgICB9KTtcbiAgfVxuXG4gIGxldCBoaXN0b3J5ID0gaGlzdG9yeVJlZi5jdXJyZW50O1xuICBsZXQgW3N0YXRlLCBzZXRTdGF0ZUltcGxdID0gUmVhY3QudXNlU3RhdGUoe1xuICAgIGFjdGlvbjogaGlzdG9yeS5hY3Rpb24sXG4gICAgbG9jYXRpb246IGhpc3RvcnkubG9jYXRpb24sXG4gIH0pO1xuICBsZXQgeyB2N19zdGFydFRyYW5zaXRpb24gfSA9IGZ1dHVyZSB8fCB7fTtcbiAgbGV0IHNldFN0YXRlID0gUmVhY3QudXNlQ2FsbGJhY2soXG4gICAgKG5ld1N0YXRlOiB7IGFjdGlvbjogTmF2aWdhdGlvblR5cGU7IGxvY2F0aW9uOiBMb2NhdGlvbiB9KSA9PiB7XG4gICAgICB2N19zdGFydFRyYW5zaXRpb24gJiYgc3RhcnRUcmFuc2l0aW9uSW1wbFxuICAgICAgICA/IHN0YXJ0VHJhbnNpdGlvbkltcGwoKCkgPT4gc2V0U3RhdGVJbXBsKG5ld1N0YXRlKSlcbiAgICAgICAgOiBzZXRTdGF0ZUltcGwobmV3U3RhdGUpO1xuICAgIH0sXG4gICAgW3NldFN0YXRlSW1wbCwgdjdfc3RhcnRUcmFuc2l0aW9uXVxuICApO1xuXG4gIFJlYWN0LnVzZUxheW91dEVmZmVjdCgoKSA9PiBoaXN0b3J5Lmxpc3RlbihzZXRTdGF0ZSksIFtoaXN0b3J5LCBzZXRTdGF0ZV0pO1xuXG4gIHJldHVybiAoXG4gICAgPFJvdXRlclxuICAgICAgYmFzZW5hbWU9e2Jhc2VuYW1lfVxuICAgICAgY2hpbGRyZW49e2NoaWxkcmVufVxuICAgICAgbG9jYXRpb249e3N0YXRlLmxvY2F0aW9ufVxuICAgICAgbmF2aWdhdGlvblR5cGU9e3N0YXRlLmFjdGlvbn1cbiAgICAgIG5hdmlnYXRvcj17aGlzdG9yeX1cbiAgICAgIGZ1dHVyZT17ZnV0dXJlfVxuICAgIC8+XG4gICk7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgTmF2aWdhdGVQcm9wcyB7XG4gIHRvOiBUbztcbiAgcmVwbGFjZT86IGJvb2xlYW47XG4gIHN0YXRlPzogYW55O1xuICByZWxhdGl2ZT86IFJlbGF0aXZlUm91dGluZ1R5cGU7XG59XG5cbi8qKlxuICogQ2hhbmdlcyB0aGUgY3VycmVudCBsb2NhdGlvbi5cbiAqXG4gKiBOb3RlOiBUaGlzIEFQSSBpcyBtb3N0bHkgdXNlZnVsIGluIFJlYWN0LkNvbXBvbmVudCBzdWJjbGFzc2VzIHRoYXQgYXJlIG5vdFxuICogYWJsZSB0byB1c2UgaG9va3MuIEluIGZ1bmN0aW9uYWwgY29tcG9uZW50cywgd2UgcmVjb21tZW5kIHlvdSB1c2UgdGhlXG4gKiBgdXNlTmF2aWdhdGVgIGhvb2sgaW5zdGVhZC5cbiAqXG4gKiBAc2VlIGh0dHBzOi8vcmVhY3Ryb3V0ZXIuY29tL2NvbXBvbmVudHMvbmF2aWdhdGVcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIE5hdmlnYXRlKHtcbiAgdG8sXG4gIHJlcGxhY2UsXG4gIHN0YXRlLFxuICByZWxhdGl2ZSxcbn06IE5hdmlnYXRlUHJvcHMpOiBudWxsIHtcbiAgaW52YXJpYW50KFxuICAgIHVzZUluUm91dGVyQ29udGV4dCgpLFxuICAgIC8vIFRPRE86IFRoaXMgZXJyb3IgaXMgcHJvYmFibHkgYmVjYXVzZSB0aGV5IHNvbWVob3cgaGF2ZSAyIHZlcnNpb25zIG9mXG4gICAgLy8gdGhlIHJvdXRlciBsb2FkZWQuIFdlIGNhbiBoZWxwIHRoZW0gdW5kZXJzdGFuZCBob3cgdG8gYXZvaWQgdGhhdC5cbiAgICBgPE5hdmlnYXRlPiBtYXkgYmUgdXNlZCBvbmx5IGluIHRoZSBjb250ZXh0IG9mIGEgPFJvdXRlcj4gY29tcG9uZW50LmBcbiAgKTtcblxuICBsZXQgeyBmdXR1cmUsIHN0YXRpYzogaXNTdGF0aWMgfSA9IFJlYWN0LnVzZUNvbnRleHQoTmF2aWdhdGlvbkNvbnRleHQpO1xuXG4gIHdhcm5pbmcoXG4gICAgIWlzU3RhdGljLFxuICAgIGA8TmF2aWdhdGU+IG11c3Qgbm90IGJlIHVzZWQgb24gdGhlIGluaXRpYWwgcmVuZGVyIGluIGEgPFN0YXRpY1JvdXRlcj4uIGAgK1xuICAgICAgYFRoaXMgaXMgYSBuby1vcCwgYnV0IHlvdSBzaG91bGQgbW9kaWZ5IHlvdXIgY29kZSBzbyB0aGUgPE5hdmlnYXRlPiBpcyBgICtcbiAgICAgIGBvbmx5IGV2ZXIgcmVuZGVyZWQgaW4gcmVzcG9uc2UgdG8gc29tZSB1c2VyIGludGVyYWN0aW9uIG9yIHN0YXRlIGNoYW5nZS5gXG4gICk7XG5cbiAgbGV0IHsgbWF0Y2hlcyB9ID0gUmVhY3QudXNlQ29udGV4dChSb3V0ZUNvbnRleHQpO1xuICBsZXQgeyBwYXRobmFtZTogbG9jYXRpb25QYXRobmFtZSB9ID0gdXNlTG9jYXRpb24oKTtcbiAgbGV0IG5hdmlnYXRlID0gdXNlTmF2aWdhdGUoKTtcblxuICAvLyBSZXNvbHZlIHRoZSBwYXRoIG91dHNpZGUgb2YgdGhlIGVmZmVjdCBzbyB0aGF0IHdoZW4gZWZmZWN0cyBydW4gdHdpY2UgaW5cbiAgLy8gU3RyaWN0TW9kZSB0aGV5IG5hdmlnYXRlIHRvIHRoZSBzYW1lIHBsYWNlXG4gIGxldCBwYXRoID0gcmVzb2x2ZVRvKFxuICAgIHRvLFxuICAgIGdldFJlc29sdmVUb01hdGNoZXMobWF0Y2hlcywgZnV0dXJlLnY3X3JlbGF0aXZlU3BsYXRQYXRoKSxcbiAgICBsb2NhdGlvblBhdGhuYW1lLFxuICAgIHJlbGF0aXZlID09PSBcInBhdGhcIlxuICApO1xuICBsZXQganNvblBhdGggPSBKU09OLnN0cmluZ2lmeShwYXRoKTtcblxuICBSZWFjdC51c2VFZmZlY3QoXG4gICAgKCkgPT4gbmF2aWdhdGUoSlNPTi5wYXJzZShqc29uUGF0aCksIHsgcmVwbGFjZSwgc3RhdGUsIHJlbGF0aXZlIH0pLFxuICAgIFtuYXZpZ2F0ZSwganNvblBhdGgsIHJlbGF0aXZlLCByZXBsYWNlLCBzdGF0ZV1cbiAgKTtcblxuICByZXR1cm4gbnVsbDtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBPdXRsZXRQcm9wcyB7XG4gIGNvbnRleHQ/OiB1bmtub3duO1xufVxuXG4vKipcbiAqIFJlbmRlcnMgdGhlIGNoaWxkIHJvdXRlJ3MgZWxlbWVudCwgaWYgdGhlcmUgaXMgb25lLlxuICpcbiAqIEBzZWUgaHR0cHM6Ly9yZWFjdHJvdXRlci5jb20vY29tcG9uZW50cy9vdXRsZXRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIE91dGxldChwcm9wczogT3V0bGV0UHJvcHMpOiBSZWFjdC5SZWFjdEVsZW1lbnQgfCBudWxsIHtcbiAgcmV0dXJuIHVzZU91dGxldChwcm9wcy5jb250ZXh0KTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBQYXRoUm91dGVQcm9wcyB7XG4gIGNhc2VTZW5zaXRpdmU/OiBOb25JbmRleFJvdXRlT2JqZWN0W1wiY2FzZVNlbnNpdGl2ZVwiXTtcbiAgcGF0aD86IE5vbkluZGV4Um91dGVPYmplY3RbXCJwYXRoXCJdO1xuICBpZD86IE5vbkluZGV4Um91dGVPYmplY3RbXCJpZFwiXTtcbiAgbGF6eT86IExhenlSb3V0ZUZ1bmN0aW9uPE5vbkluZGV4Um91dGVPYmplY3Q+O1xuICBsb2FkZXI/OiBOb25JbmRleFJvdXRlT2JqZWN0W1wibG9hZGVyXCJdO1xuICBhY3Rpb24/OiBOb25JbmRleFJvdXRlT2JqZWN0W1wiYWN0aW9uXCJdO1xuICBoYXNFcnJvckJvdW5kYXJ5PzogTm9uSW5kZXhSb3V0ZU9iamVjdFtcImhhc0Vycm9yQm91bmRhcnlcIl07XG4gIHNob3VsZFJldmFsaWRhdGU/OiBOb25JbmRleFJvdXRlT2JqZWN0W1wic2hvdWxkUmV2YWxpZGF0ZVwiXTtcbiAgaGFuZGxlPzogTm9uSW5kZXhSb3V0ZU9iamVjdFtcImhhbmRsZVwiXTtcbiAgaW5kZXg/OiBmYWxzZTtcbiAgY2hpbGRyZW4/OiBSZWFjdC5SZWFjdE5vZGU7XG4gIGVsZW1lbnQ/OiBSZWFjdC5SZWFjdE5vZGUgfCBudWxsO1xuICBoeWRyYXRlRmFsbGJhY2tFbGVtZW50PzogUmVhY3QuUmVhY3ROb2RlIHwgbnVsbDtcbiAgZXJyb3JFbGVtZW50PzogUmVhY3QuUmVhY3ROb2RlIHwgbnVsbDtcbiAgQ29tcG9uZW50PzogUmVhY3QuQ29tcG9uZW50VHlwZSB8IG51bGw7XG4gIEh5ZHJhdGVGYWxsYmFjaz86IFJlYWN0LkNvbXBvbmVudFR5cGUgfCBudWxsO1xuICBFcnJvckJvdW5kYXJ5PzogUmVhY3QuQ29tcG9uZW50VHlwZSB8IG51bGw7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgTGF5b3V0Um91dGVQcm9wcyBleHRlbmRzIFBhdGhSb3V0ZVByb3BzIHt9XG5cbmV4cG9ydCBpbnRlcmZhY2UgSW5kZXhSb3V0ZVByb3BzIHtcbiAgY2FzZVNlbnNpdGl2ZT86IEluZGV4Um91dGVPYmplY3RbXCJjYXNlU2Vuc2l0aXZlXCJdO1xuICBwYXRoPzogSW5kZXhSb3V0ZU9iamVjdFtcInBhdGhcIl07XG4gIGlkPzogSW5kZXhSb3V0ZU9iamVjdFtcImlkXCJdO1xuICBsYXp5PzogTGF6eVJvdXRlRnVuY3Rpb248SW5kZXhSb3V0ZU9iamVjdD47XG4gIGxvYWRlcj86IEluZGV4Um91dGVPYmplY3RbXCJsb2FkZXJcIl07XG4gIGFjdGlvbj86IEluZGV4Um91dGVPYmplY3RbXCJhY3Rpb25cIl07XG4gIGhhc0Vycm9yQm91bmRhcnk/OiBJbmRleFJvdXRlT2JqZWN0W1wiaGFzRXJyb3JCb3VuZGFyeVwiXTtcbiAgc2hvdWxkUmV2YWxpZGF0ZT86IEluZGV4Um91dGVPYmplY3RbXCJzaG91bGRSZXZhbGlkYXRlXCJdO1xuICBoYW5kbGU/OiBJbmRleFJvdXRlT2JqZWN0W1wiaGFuZGxlXCJdO1xuICBpbmRleDogdHJ1ZTtcbiAgY2hpbGRyZW4/OiB1bmRlZmluZWQ7XG4gIGVsZW1lbnQ/OiBSZWFjdC5SZWFjdE5vZGUgfCBudWxsO1xuICBoeWRyYXRlRmFsbGJhY2tFbGVtZW50PzogUmVhY3QuUmVhY3ROb2RlIHwgbnVsbDtcbiAgZXJyb3JFbGVtZW50PzogUmVhY3QuUmVhY3ROb2RlIHwgbnVsbDtcbiAgQ29tcG9uZW50PzogUmVhY3QuQ29tcG9uZW50VHlwZSB8IG51bGw7XG4gIEh5ZHJhdGVGYWxsYmFjaz86IFJlYWN0LkNvbXBvbmVudFR5cGUgfCBudWxsO1xuICBFcnJvckJvdW5kYXJ5PzogUmVhY3QuQ29tcG9uZW50VHlwZSB8IG51bGw7XG59XG5cbmV4cG9ydCB0eXBlIFJvdXRlUHJvcHMgPSBQYXRoUm91dGVQcm9wcyB8IExheW91dFJvdXRlUHJvcHMgfCBJbmRleFJvdXRlUHJvcHM7XG5cbi8qKlxuICogRGVjbGFyZXMgYW4gZWxlbWVudCB0aGF0IHNob3VsZCBiZSByZW5kZXJlZCBhdCBhIGNlcnRhaW4gVVJMIHBhdGguXG4gKlxuICogQHNlZSBodHRwczovL3JlYWN0cm91dGVyLmNvbS9jb21wb25lbnRzL3JvdXRlXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBSb3V0ZShfcHJvcHM6IFJvdXRlUHJvcHMpOiBSZWFjdC5SZWFjdEVsZW1lbnQgfCBudWxsIHtcbiAgaW52YXJpYW50KFxuICAgIGZhbHNlLFxuICAgIGBBIDxSb3V0ZT4gaXMgb25seSBldmVyIHRvIGJlIHVzZWQgYXMgdGhlIGNoaWxkIG9mIDxSb3V0ZXM+IGVsZW1lbnQsIGAgK1xuICAgICAgYG5ldmVyIHJlbmRlcmVkIGRpcmVjdGx5LiBQbGVhc2Ugd3JhcCB5b3VyIDxSb3V0ZT4gaW4gYSA8Um91dGVzPi5gXG4gICk7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgUm91dGVyUHJvcHMge1xuICBiYXNlbmFtZT86IHN0cmluZztcbiAgY2hpbGRyZW4/OiBSZWFjdC5SZWFjdE5vZGU7XG4gIGxvY2F0aW9uOiBQYXJ0aWFsPExvY2F0aW9uPiB8IHN0cmluZztcbiAgbmF2aWdhdGlvblR5cGU/OiBOYXZpZ2F0aW9uVHlwZTtcbiAgbmF2aWdhdG9yOiBOYXZpZ2F0b3I7XG4gIHN0YXRpYz86IGJvb2xlYW47XG4gIGZ1dHVyZT86IFBhcnRpYWw8UGljazxGdXR1cmVDb25maWcsIFwidjdfcmVsYXRpdmVTcGxhdFBhdGhcIj4+O1xufVxuXG4vKipcbiAqIFByb3ZpZGVzIGxvY2F0aW9uIGNvbnRleHQgZm9yIHRoZSByZXN0IG9mIHRoZSBhcHAuXG4gKlxuICogTm90ZTogWW91IHVzdWFsbHkgd29uJ3QgcmVuZGVyIGEgYDxSb3V0ZXI+YCBkaXJlY3RseS4gSW5zdGVhZCwgeW91J2xsIHJlbmRlciBhXG4gKiByb3V0ZXIgdGhhdCBpcyBtb3JlIHNwZWNpZmljIHRvIHlvdXIgZW52aXJvbm1lbnQgc3VjaCBhcyBhIGA8QnJvd3NlclJvdXRlcj5gXG4gKiBpbiB3ZWIgYnJvd3NlcnMgb3IgYSBgPFN0YXRpY1JvdXRlcj5gIGZvciBzZXJ2ZXIgcmVuZGVyaW5nLlxuICpcbiAqIEBzZWUgaHR0cHM6Ly9yZWFjdHJvdXRlci5jb20vcm91dGVyLWNvbXBvbmVudHMvcm91dGVyXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBSb3V0ZXIoe1xuICBiYXNlbmFtZTogYmFzZW5hbWVQcm9wID0gXCIvXCIsXG4gIGNoaWxkcmVuID0gbnVsbCxcbiAgbG9jYXRpb246IGxvY2F0aW9uUHJvcCxcbiAgbmF2aWdhdGlvblR5cGUgPSBOYXZpZ2F0aW9uVHlwZS5Qb3AsXG4gIG5hdmlnYXRvcixcbiAgc3RhdGljOiBzdGF0aWNQcm9wID0gZmFsc2UsXG4gIGZ1dHVyZSxcbn06IFJvdXRlclByb3BzKTogUmVhY3QuUmVhY3RFbGVtZW50IHwgbnVsbCB7XG4gIGludmFyaWFudChcbiAgICAhdXNlSW5Sb3V0ZXJDb250ZXh0KCksXG4gICAgYFlvdSBjYW5ub3QgcmVuZGVyIGEgPFJvdXRlcj4gaW5zaWRlIGFub3RoZXIgPFJvdXRlcj4uYCArXG4gICAgICBgIFlvdSBzaG91bGQgbmV2ZXIgaGF2ZSBtb3JlIHRoYW4gb25lIGluIHlvdXIgYXBwLmBcbiAgKTtcblxuICAvLyBQcmVzZXJ2ZSB0cmFpbGluZyBzbGFzaGVzIG9uIGJhc2VuYW1lLCBzbyB3ZSBjYW4gbGV0IHRoZSB1c2VyIGNvbnRyb2xcbiAgLy8gdGhlIGVuZm9yY2VtZW50IG9mIHRyYWlsaW5nIHNsYXNoZXMgdGhyb3VnaG91dCB0aGUgYXBwXG4gIGxldCBiYXNlbmFtZSA9IGJhc2VuYW1lUHJvcC5yZXBsYWNlKC9eXFwvKi8sIFwiL1wiKTtcbiAgbGV0IG5hdmlnYXRpb25Db250ZXh0ID0gUmVhY3QudXNlTWVtbyhcbiAgICAoKSA9PiAoe1xuICAgICAgYmFzZW5hbWUsXG4gICAgICBuYXZpZ2F0b3IsXG4gICAgICBzdGF0aWM6IHN0YXRpY1Byb3AsXG4gICAgICBmdXR1cmU6IHtcbiAgICAgICAgdjdfcmVsYXRpdmVTcGxhdFBhdGg6IGZhbHNlLFxuICAgICAgICAuLi5mdXR1cmUsXG4gICAgICB9LFxuICAgIH0pLFxuICAgIFtiYXNlbmFtZSwgZnV0dXJlLCBuYXZpZ2F0b3IsIHN0YXRpY1Byb3BdXG4gICk7XG5cbiAgaWYgKHR5cGVvZiBsb2NhdGlvblByb3AgPT09IFwic3RyaW5nXCIpIHtcbiAgICBsb2NhdGlvblByb3AgPSBwYXJzZVBhdGgobG9jYXRpb25Qcm9wKTtcbiAgfVxuXG4gIGxldCB7XG4gICAgcGF0aG5hbWUgPSBcIi9cIixcbiAgICBzZWFyY2ggPSBcIlwiLFxuICAgIGhhc2ggPSBcIlwiLFxuICAgIHN0YXRlID0gbnVsbCxcbiAgICBrZXkgPSBcImRlZmF1bHRcIixcbiAgfSA9IGxvY2F0aW9uUHJvcDtcblxuICBsZXQgbG9jYXRpb25Db250ZXh0ID0gUmVhY3QudXNlTWVtbygoKSA9PiB7XG4gICAgbGV0IHRyYWlsaW5nUGF0aG5hbWUgPSBzdHJpcEJhc2VuYW1lKHBhdGhuYW1lLCBiYXNlbmFtZSk7XG5cbiAgICBpZiAodHJhaWxpbmdQYXRobmFtZSA9PSBudWxsKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgbG9jYXRpb246IHtcbiAgICAgICAgcGF0aG5hbWU6IHRyYWlsaW5nUGF0aG5hbWUsXG4gICAgICAgIHNlYXJjaCxcbiAgICAgICAgaGFzaCxcbiAgICAgICAgc3RhdGUsXG4gICAgICAgIGtleSxcbiAgICAgIH0sXG4gICAgICBuYXZpZ2F0aW9uVHlwZSxcbiAgICB9O1xuICB9LCBbYmFzZW5hbWUsIHBhdGhuYW1lLCBzZWFyY2gsIGhhc2gsIHN0YXRlLCBrZXksIG5hdmlnYXRpb25UeXBlXSk7XG5cbiAgd2FybmluZyhcbiAgICBsb2NhdGlvbkNvbnRleHQgIT0gbnVsbCxcbiAgICBgPFJvdXRlciBiYXNlbmFtZT1cIiR7YmFzZW5hbWV9XCI+IGlzIG5vdCBhYmxlIHRvIG1hdGNoIHRoZSBVUkwgYCArXG4gICAgICBgXCIke3BhdGhuYW1lfSR7c2VhcmNofSR7aGFzaH1cIiBiZWNhdXNlIGl0IGRvZXMgbm90IHN0YXJ0IHdpdGggdGhlIGAgK1xuICAgICAgYGJhc2VuYW1lLCBzbyB0aGUgPFJvdXRlcj4gd29uJ3QgcmVuZGVyIGFueXRoaW5nLmBcbiAgKTtcblxuICBpZiAobG9jYXRpb25Db250ZXh0ID09IG51bGwpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHJldHVybiAoXG4gICAgPE5hdmlnYXRpb25Db250ZXh0LlByb3ZpZGVyIHZhbHVlPXtuYXZpZ2F0aW9uQ29udGV4dH0+XG4gICAgICA8TG9jYXRpb25Db250ZXh0LlByb3ZpZGVyIGNoaWxkcmVuPXtjaGlsZHJlbn0gdmFsdWU9e2xvY2F0aW9uQ29udGV4dH0gLz5cbiAgICA8L05hdmlnYXRpb25Db250ZXh0LlByb3ZpZGVyPlxuICApO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFJvdXRlc1Byb3BzIHtcbiAgY2hpbGRyZW4/OiBSZWFjdC5SZWFjdE5vZGU7XG4gIGxvY2F0aW9uPzogUGFydGlhbDxMb2NhdGlvbj4gfCBzdHJpbmc7XG59XG5cbi8qKlxuICogQSBjb250YWluZXIgZm9yIGEgbmVzdGVkIHRyZWUgb2YgYDxSb3V0ZT5gIGVsZW1lbnRzIHRoYXQgcmVuZGVycyB0aGUgYnJhbmNoXG4gKiB0aGF0IGJlc3QgbWF0Y2hlcyB0aGUgY3VycmVudCBsb2NhdGlvbi5cbiAqXG4gKiBAc2VlIGh0dHBzOi8vcmVhY3Ryb3V0ZXIuY29tL2NvbXBvbmVudHMvcm91dGVzXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBSb3V0ZXMoe1xuICBjaGlsZHJlbixcbiAgbG9jYXRpb24sXG59OiBSb3V0ZXNQcm9wcyk6IFJlYWN0LlJlYWN0RWxlbWVudCB8IG51bGwge1xuICByZXR1cm4gdXNlUm91dGVzKGNyZWF0ZVJvdXRlc0Zyb21DaGlsZHJlbihjaGlsZHJlbiksIGxvY2F0aW9uKTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBBd2FpdFJlc29sdmVSZW5kZXJGdW5jdGlvbiB7XG4gIChkYXRhOiBBd2FpdGVkPGFueT4pOiBSZWFjdC5SZWFjdE5vZGU7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQXdhaXRQcm9wcyB7XG4gIGNoaWxkcmVuOiBSZWFjdC5SZWFjdE5vZGUgfCBBd2FpdFJlc29sdmVSZW5kZXJGdW5jdGlvbjtcbiAgZXJyb3JFbGVtZW50PzogUmVhY3QuUmVhY3ROb2RlO1xuICByZXNvbHZlOiBUcmFja2VkUHJvbWlzZSB8IGFueTtcbn1cblxuLyoqXG4gKiBDb21wb25lbnQgdG8gdXNlIGZvciByZW5kZXJpbmcgbGF6aWx5IGxvYWRlZCBkYXRhIGZyb20gcmV0dXJuaW5nIGRlZmVyKClcbiAqIGluIGEgbG9hZGVyIGZ1bmN0aW9uXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBBd2FpdCh7IGNoaWxkcmVuLCBlcnJvckVsZW1lbnQsIHJlc29sdmUgfTogQXdhaXRQcm9wcykge1xuICByZXR1cm4gKFxuICAgIDxBd2FpdEVycm9yQm91bmRhcnkgcmVzb2x2ZT17cmVzb2x2ZX0gZXJyb3JFbGVtZW50PXtlcnJvckVsZW1lbnR9PlxuICAgICAgPFJlc29sdmVBd2FpdD57Y2hpbGRyZW59PC9SZXNvbHZlQXdhaXQ+XG4gICAgPC9Bd2FpdEVycm9yQm91bmRhcnk+XG4gICk7XG59XG5cbnR5cGUgQXdhaXRFcnJvckJvdW5kYXJ5UHJvcHMgPSBSZWFjdC5Qcm9wc1dpdGhDaGlsZHJlbjx7XG4gIGVycm9yRWxlbWVudD86IFJlYWN0LlJlYWN0Tm9kZTtcbiAgcmVzb2x2ZTogVHJhY2tlZFByb21pc2UgfCBhbnk7XG59PjtcblxudHlwZSBBd2FpdEVycm9yQm91bmRhcnlTdGF0ZSA9IHtcbiAgZXJyb3I6IGFueTtcbn07XG5cbmVudW0gQXdhaXRSZW5kZXJTdGF0dXMge1xuICBwZW5kaW5nLFxuICBzdWNjZXNzLFxuICBlcnJvcixcbn1cblxuY29uc3QgbmV2ZXJTZXR0bGVkUHJvbWlzZSA9IG5ldyBQcm9taXNlKCgpID0+IHt9KTtcblxuY2xhc3MgQXdhaXRFcnJvckJvdW5kYXJ5IGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50PFxuICBBd2FpdEVycm9yQm91bmRhcnlQcm9wcyxcbiAgQXdhaXRFcnJvckJvdW5kYXJ5U3RhdGVcbj4ge1xuICBjb25zdHJ1Y3Rvcihwcm9wczogQXdhaXRFcnJvckJvdW5kYXJ5UHJvcHMpIHtcbiAgICBzdXBlcihwcm9wcyk7XG4gICAgdGhpcy5zdGF0ZSA9IHsgZXJyb3I6IG51bGwgfTtcbiAgfVxuXG4gIHN0YXRpYyBnZXREZXJpdmVkU3RhdGVGcm9tRXJyb3IoZXJyb3I6IGFueSkge1xuICAgIHJldHVybiB7IGVycm9yIH07XG4gIH1cblxuICBjb21wb25lbnREaWRDYXRjaChlcnJvcjogYW55LCBlcnJvckluZm86IGFueSkge1xuICAgIGNvbnNvbGUuZXJyb3IoXG4gICAgICBcIjxBd2FpdD4gY2F1Z2h0IHRoZSBmb2xsb3dpbmcgZXJyb3IgZHVyaW5nIHJlbmRlclwiLFxuICAgICAgZXJyb3IsXG4gICAgICBlcnJvckluZm9cbiAgICApO1xuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIGxldCB7IGNoaWxkcmVuLCBlcnJvckVsZW1lbnQsIHJlc29sdmUgfSA9IHRoaXMucHJvcHM7XG5cbiAgICBsZXQgcHJvbWlzZTogVHJhY2tlZFByb21pc2UgfCBudWxsID0gbnVsbDtcbiAgICBsZXQgc3RhdHVzOiBBd2FpdFJlbmRlclN0YXR1cyA9IEF3YWl0UmVuZGVyU3RhdHVzLnBlbmRpbmc7XG5cbiAgICBpZiAoIShyZXNvbHZlIGluc3RhbmNlb2YgUHJvbWlzZSkpIHtcbiAgICAgIC8vIERpZG4ndCBnZXQgYSBwcm9taXNlIC0gcHJvdmlkZSBhcyBhIHJlc29sdmVkIHByb21pc2VcbiAgICAgIHN0YXR1cyA9IEF3YWl0UmVuZGVyU3RhdHVzLnN1Y2Nlc3M7XG4gICAgICBwcm9taXNlID0gUHJvbWlzZS5yZXNvbHZlKCk7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkocHJvbWlzZSwgXCJfdHJhY2tlZFwiLCB7IGdldDogKCkgPT4gdHJ1ZSB9KTtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShwcm9taXNlLCBcIl9kYXRhXCIsIHsgZ2V0OiAoKSA9PiByZXNvbHZlIH0pO1xuICAgIH0gZWxzZSBpZiAodGhpcy5zdGF0ZS5lcnJvcikge1xuICAgICAgLy8gQ2F1Z2h0IGEgcmVuZGVyIGVycm9yLCBwcm92aWRlIGl0IGFzIGEgcmVqZWN0ZWQgcHJvbWlzZVxuICAgICAgc3RhdHVzID0gQXdhaXRSZW5kZXJTdGF0dXMuZXJyb3I7XG4gICAgICBsZXQgcmVuZGVyRXJyb3IgPSB0aGlzLnN0YXRlLmVycm9yO1xuICAgICAgcHJvbWlzZSA9IFByb21pc2UucmVqZWN0KCkuY2F0Y2goKCkgPT4ge30pOyAvLyBBdm9pZCB1bmhhbmRsZWQgcmVqZWN0aW9uIHdhcm5pbmdzXG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkocHJvbWlzZSwgXCJfdHJhY2tlZFwiLCB7IGdldDogKCkgPT4gdHJ1ZSB9KTtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShwcm9taXNlLCBcIl9lcnJvclwiLCB7IGdldDogKCkgPT4gcmVuZGVyRXJyb3IgfSk7XG4gICAgfSBlbHNlIGlmICgocmVzb2x2ZSBhcyBUcmFja2VkUHJvbWlzZSkuX3RyYWNrZWQpIHtcbiAgICAgIC8vIEFscmVhZHkgdHJhY2tlZCBwcm9taXNlIC0gY2hlY2sgY29udGVudHNcbiAgICAgIHByb21pc2UgPSByZXNvbHZlO1xuICAgICAgc3RhdHVzID1cbiAgICAgICAgcHJvbWlzZS5fZXJyb3IgIT09IHVuZGVmaW5lZFxuICAgICAgICAgID8gQXdhaXRSZW5kZXJTdGF0dXMuZXJyb3JcbiAgICAgICAgICA6IHByb21pc2UuX2RhdGEgIT09IHVuZGVmaW5lZFxuICAgICAgICAgID8gQXdhaXRSZW5kZXJTdGF0dXMuc3VjY2Vzc1xuICAgICAgICAgIDogQXdhaXRSZW5kZXJTdGF0dXMucGVuZGluZztcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gUmF3ICh1bnRyYWNrZWQpIHByb21pc2UgLSB0cmFjayBpdFxuICAgICAgc3RhdHVzID0gQXdhaXRSZW5kZXJTdGF0dXMucGVuZGluZztcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShyZXNvbHZlLCBcIl90cmFja2VkXCIsIHsgZ2V0OiAoKSA9PiB0cnVlIH0pO1xuICAgICAgcHJvbWlzZSA9IHJlc29sdmUudGhlbihcbiAgICAgICAgKGRhdGE6IGFueSkgPT5cbiAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkocmVzb2x2ZSwgXCJfZGF0YVwiLCB7IGdldDogKCkgPT4gZGF0YSB9KSxcbiAgICAgICAgKGVycm9yOiBhbnkpID0+XG4gICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHJlc29sdmUsIFwiX2Vycm9yXCIsIHsgZ2V0OiAoKSA9PiBlcnJvciB9KVxuICAgICAgKTtcbiAgICB9XG5cbiAgICBpZiAoXG4gICAgICBzdGF0dXMgPT09IEF3YWl0UmVuZGVyU3RhdHVzLmVycm9yICYmXG4gICAgICBwcm9taXNlLl9lcnJvciBpbnN0YW5jZW9mIEFib3J0ZWREZWZlcnJlZEVycm9yXG4gICAgKSB7XG4gICAgICAvLyBGcmVlemUgdGhlIFVJIGJ5IHRocm93aW5nIGEgbmV2ZXIgcmVzb2x2ZWQgcHJvbWlzZVxuICAgICAgdGhyb3cgbmV2ZXJTZXR0bGVkUHJvbWlzZTtcbiAgICB9XG5cbiAgICBpZiAoc3RhdHVzID09PSBBd2FpdFJlbmRlclN0YXR1cy5lcnJvciAmJiAhZXJyb3JFbGVtZW50KSB7XG4gICAgICAvLyBObyBlcnJvckVsZW1lbnQsIHRocm93IHRvIHRoZSBuZWFyZXN0IHJvdXRlLWxldmVsIGVycm9yIGJvdW5kYXJ5XG4gICAgICB0aHJvdyBwcm9taXNlLl9lcnJvcjtcbiAgICB9XG5cbiAgICBpZiAoc3RhdHVzID09PSBBd2FpdFJlbmRlclN0YXR1cy5lcnJvcikge1xuICAgICAgLy8gUmVuZGVyIHZpYSBvdXIgZXJyb3JFbGVtZW50XG4gICAgICByZXR1cm4gPEF3YWl0Q29udGV4dC5Qcm92aWRlciB2YWx1ZT17cHJvbWlzZX0gY2hpbGRyZW49e2Vycm9yRWxlbWVudH0gLz47XG4gICAgfVxuXG4gICAgaWYgKHN0YXR1cyA9PT0gQXdhaXRSZW5kZXJTdGF0dXMuc3VjY2Vzcykge1xuICAgICAgLy8gUmVuZGVyIGNoaWxkcmVuIHdpdGggcmVzb2x2ZWQgdmFsdWVcbiAgICAgIHJldHVybiA8QXdhaXRDb250ZXh0LlByb3ZpZGVyIHZhbHVlPXtwcm9taXNlfSBjaGlsZHJlbj17Y2hpbGRyZW59IC8+O1xuICAgIH1cblxuICAgIC8vIFRocm93IHRvIHRoZSBzdXNwZW5zZSBib3VuZGFyeVxuICAgIHRocm93IHByb21pc2U7XG4gIH1cbn1cblxuLyoqXG4gKiBAcHJpdmF0ZVxuICogSW5kaXJlY3Rpb24gdG8gbGV2ZXJhZ2UgdXNlQXN5bmNWYWx1ZSBmb3IgYSByZW5kZXItcHJvcCBBUEkgb24gYDxBd2FpdD5gXG4gKi9cbmZ1bmN0aW9uIFJlc29sdmVBd2FpdCh7XG4gIGNoaWxkcmVuLFxufToge1xuICBjaGlsZHJlbjogUmVhY3QuUmVhY3ROb2RlIHwgQXdhaXRSZXNvbHZlUmVuZGVyRnVuY3Rpb247XG59KSB7XG4gIGxldCBkYXRhID0gdXNlQXN5bmNWYWx1ZSgpO1xuICBsZXQgdG9SZW5kZXIgPSB0eXBlb2YgY2hpbGRyZW4gPT09IFwiZnVuY3Rpb25cIiA/IGNoaWxkcmVuKGRhdGEpIDogY2hpbGRyZW47XG4gIHJldHVybiA8Pnt0b1JlbmRlcn08Lz47XG59XG5cbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFVUSUxTXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cbi8qKlxuICogQ3JlYXRlcyBhIHJvdXRlIGNvbmZpZyBmcm9tIGEgUmVhY3QgXCJjaGlsZHJlblwiIG9iamVjdCwgd2hpY2ggaXMgdXN1YWxseVxuICogZWl0aGVyIGEgYDxSb3V0ZT5gIGVsZW1lbnQgb3IgYW4gYXJyYXkgb2YgdGhlbS4gVXNlZCBpbnRlcm5hbGx5IGJ5XG4gKiBgPFJvdXRlcz5gIHRvIGNyZWF0ZSBhIHJvdXRlIGNvbmZpZyBmcm9tIGl0cyBjaGlsZHJlbi5cbiAqXG4gKiBAc2VlIGh0dHBzOi8vcmVhY3Ryb3V0ZXIuY29tL3V0aWxzL2NyZWF0ZS1yb3V0ZXMtZnJvbS1jaGlsZHJlblxuICovXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlUm91dGVzRnJvbUNoaWxkcmVuKFxuICBjaGlsZHJlbjogUmVhY3QuUmVhY3ROb2RlLFxuICBwYXJlbnRQYXRoOiBudW1iZXJbXSA9IFtdXG4pOiBSb3V0ZU9iamVjdFtdIHtcbiAgbGV0IHJvdXRlczogUm91dGVPYmplY3RbXSA9IFtdO1xuXG4gIFJlYWN0LkNoaWxkcmVuLmZvckVhY2goY2hpbGRyZW4sIChlbGVtZW50LCBpbmRleCkgPT4ge1xuICAgIGlmICghUmVhY3QuaXNWYWxpZEVsZW1lbnQoZWxlbWVudCkpIHtcbiAgICAgIC8vIElnbm9yZSBub24tZWxlbWVudHMuIFRoaXMgYWxsb3dzIHBlb3BsZSB0byBtb3JlIGVhc2lseSBpbmxpbmVcbiAgICAgIC8vIGNvbmRpdGlvbmFscyBpbiB0aGVpciByb3V0ZSBjb25maWcuXG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgbGV0IHRyZWVQYXRoID0gWy4uLnBhcmVudFBhdGgsIGluZGV4XTtcblxuICAgIGlmIChlbGVtZW50LnR5cGUgPT09IFJlYWN0LkZyYWdtZW50KSB7XG4gICAgICAvLyBUcmFuc3BhcmVudGx5IHN1cHBvcnQgUmVhY3QuRnJhZ21lbnQgYW5kIGl0cyBjaGlsZHJlbi5cbiAgICAgIHJvdXRlcy5wdXNoLmFwcGx5KFxuICAgICAgICByb3V0ZXMsXG4gICAgICAgIGNyZWF0ZVJvdXRlc0Zyb21DaGlsZHJlbihlbGVtZW50LnByb3BzLmNoaWxkcmVuLCB0cmVlUGF0aClcbiAgICAgICk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaW52YXJpYW50KFxuICAgICAgZWxlbWVudC50eXBlID09PSBSb3V0ZSxcbiAgICAgIGBbJHtcbiAgICAgICAgdHlwZW9mIGVsZW1lbnQudHlwZSA9PT0gXCJzdHJpbmdcIiA/IGVsZW1lbnQudHlwZSA6IGVsZW1lbnQudHlwZS5uYW1lXG4gICAgICB9XSBpcyBub3QgYSA8Um91dGU+IGNvbXBvbmVudC4gQWxsIGNvbXBvbmVudCBjaGlsZHJlbiBvZiA8Um91dGVzPiBtdXN0IGJlIGEgPFJvdXRlPiBvciA8UmVhY3QuRnJhZ21lbnQ+YFxuICAgICk7XG5cbiAgICBpbnZhcmlhbnQoXG4gICAgICAhZWxlbWVudC5wcm9wcy5pbmRleCB8fCAhZWxlbWVudC5wcm9wcy5jaGlsZHJlbixcbiAgICAgIFwiQW4gaW5kZXggcm91dGUgY2Fubm90IGhhdmUgY2hpbGQgcm91dGVzLlwiXG4gICAgKTtcblxuICAgIGxldCByb3V0ZTogUm91dGVPYmplY3QgPSB7XG4gICAgICBpZDogZWxlbWVudC5wcm9wcy5pZCB8fCB0cmVlUGF0aC5qb2luKFwiLVwiKSxcbiAgICAgIGNhc2VTZW5zaXRpdmU6IGVsZW1lbnQucHJvcHMuY2FzZVNlbnNpdGl2ZSxcbiAgICAgIGVsZW1lbnQ6IGVsZW1lbnQucHJvcHMuZWxlbWVudCxcbiAgICAgIENvbXBvbmVudDogZWxlbWVudC5wcm9wcy5Db21wb25lbnQsXG4gICAgICBpbmRleDogZWxlbWVudC5wcm9wcy5pbmRleCxcbiAgICAgIHBhdGg6IGVsZW1lbnQucHJvcHMucGF0aCxcbiAgICAgIGxvYWRlcjogZWxlbWVudC5wcm9wcy5sb2FkZXIsXG4gICAgICBhY3Rpb246IGVsZW1lbnQucHJvcHMuYWN0aW9uLFxuICAgICAgZXJyb3JFbGVtZW50OiBlbGVtZW50LnByb3BzLmVycm9yRWxlbWVudCxcbiAgICAgIEVycm9yQm91bmRhcnk6IGVsZW1lbnQucHJvcHMuRXJyb3JCb3VuZGFyeSxcbiAgICAgIGhhc0Vycm9yQm91bmRhcnk6XG4gICAgICAgIGVsZW1lbnQucHJvcHMuRXJyb3JCb3VuZGFyeSAhPSBudWxsIHx8XG4gICAgICAgIGVsZW1lbnQucHJvcHMuZXJyb3JFbGVtZW50ICE9IG51bGwsXG4gICAgICBzaG91bGRSZXZhbGlkYXRlOiBlbGVtZW50LnByb3BzLnNob3VsZFJldmFsaWRhdGUsXG4gICAgICBoYW5kbGU6IGVsZW1lbnQucHJvcHMuaGFuZGxlLFxuICAgICAgbGF6eTogZWxlbWVudC5wcm9wcy5sYXp5LFxuICAgIH07XG5cbiAgICBpZiAoZWxlbWVudC5wcm9wcy5jaGlsZHJlbikge1xuICAgICAgcm91dGUuY2hpbGRyZW4gPSBjcmVhdGVSb3V0ZXNGcm9tQ2hpbGRyZW4oXG4gICAgICAgIGVsZW1lbnQucHJvcHMuY2hpbGRyZW4sXG4gICAgICAgIHRyZWVQYXRoXG4gICAgICApO1xuICAgIH1cblxuICAgIHJvdXRlcy5wdXNoKHJvdXRlKTtcbiAgfSk7XG5cbiAgcmV0dXJuIHJvdXRlcztcbn1cblxuLyoqXG4gKiBSZW5kZXJzIHRoZSByZXN1bHQgb2YgYG1hdGNoUm91dGVzKClgIGludG8gYSBSZWFjdCBlbGVtZW50LlxuICovXG5leHBvcnQgZnVuY3Rpb24gcmVuZGVyTWF0Y2hlcyhcbiAgbWF0Y2hlczogUm91dGVNYXRjaFtdIHwgbnVsbFxuKTogUmVhY3QuUmVhY3RFbGVtZW50IHwgbnVsbCB7XG4gIHJldHVybiBfcmVuZGVyTWF0Y2hlcyhtYXRjaGVzKTtcbn1cbiIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHR5cGUge1xuICBBY3Rpb25GdW5jdGlvbixcbiAgQWN0aW9uRnVuY3Rpb25BcmdzLFxuICBCbG9ja2VyLFxuICBCbG9ja2VyRnVuY3Rpb24sXG4gIEVycm9yUmVzcG9uc2UsXG4gIEZldGNoZXIsXG4gIEh5ZHJhdGlvblN0YXRlLFxuICBJbml0aWFsRW50cnksXG4gIEpzb25GdW5jdGlvbixcbiAgTGF6eVJvdXRlRnVuY3Rpb24sXG4gIExvYWRlckZ1bmN0aW9uLFxuICBMb2FkZXJGdW5jdGlvbkFyZ3MsXG4gIExvY2F0aW9uLFxuICBOYXZpZ2F0aW9uLFxuICBQYXJhbVBhcnNlS2V5LFxuICBQYXJhbXMsXG4gIFBhdGgsXG4gIFBhdGhNYXRjaCxcbiAgUGF0aFBhcmFtLFxuICBQYXRoUGF0dGVybixcbiAgUmVkaXJlY3RGdW5jdGlvbixcbiAgUmVsYXRpdmVSb3V0aW5nVHlwZSxcbiAgUm91dGVyIGFzIFJlbWl4Um91dGVyLFxuICBGdXR1cmVDb25maWcgYXMgUm91dGVyRnV0dXJlQ29uZmlnLFxuICBTaG91bGRSZXZhbGlkYXRlRnVuY3Rpb24sXG4gIFNob3VsZFJldmFsaWRhdGVGdW5jdGlvbkFyZ3MsXG4gIFRvLFxuICBVSU1hdGNoLFxufSBmcm9tIFwiQHJlbWl4LXJ1bi9yb3V0ZXJcIjtcbmltcG9ydCB7XG4gIEFib3J0ZWREZWZlcnJlZEVycm9yLFxuICBBY3Rpb24gYXMgTmF2aWdhdGlvblR5cGUsXG4gIGNyZWF0ZU1lbW9yeUhpc3RvcnksXG4gIGNyZWF0ZVBhdGgsXG4gIGNyZWF0ZVJvdXRlcixcbiAgZGVmZXIsXG4gIGdlbmVyYXRlUGF0aCxcbiAgaXNSb3V0ZUVycm9yUmVzcG9uc2UsXG4gIGpzb24sXG4gIG1hdGNoUGF0aCxcbiAgbWF0Y2hSb3V0ZXMsXG4gIHBhcnNlUGF0aCxcbiAgcmVkaXJlY3QsXG4gIHJlZGlyZWN0RG9jdW1lbnQsXG4gIHJlc29sdmVQYXRoLFxuICBVTlNBRkVfd2FybmluZyBhcyB3YXJuaW5nLFxufSBmcm9tIFwiQHJlbWl4LXJ1bi9yb3V0ZXJcIjtcblxuaW1wb3J0IHR5cGUge1xuICBBd2FpdFByb3BzLFxuICBGdXR1cmVDb25maWcsXG4gIEluZGV4Um91dGVQcm9wcyxcbiAgTGF5b3V0Um91dGVQcm9wcyxcbiAgTWVtb3J5Um91dGVyUHJvcHMsXG4gIE5hdmlnYXRlUHJvcHMsXG4gIE91dGxldFByb3BzLFxuICBQYXRoUm91dGVQcm9wcyxcbiAgUm91dGVQcm9wcyxcbiAgUm91dGVyUHJvcHMsXG4gIFJvdXRlclByb3ZpZGVyUHJvcHMsXG4gIFJvdXRlc1Byb3BzLFxufSBmcm9tIFwiLi9saWIvY29tcG9uZW50c1wiO1xuaW1wb3J0IHtcbiAgQXdhaXQsXG4gIE1lbW9yeVJvdXRlcixcbiAgTmF2aWdhdGUsXG4gIE91dGxldCxcbiAgUm91dGUsXG4gIFJvdXRlcixcbiAgUm91dGVyUHJvdmlkZXIsXG4gIFJvdXRlcyxcbiAgY3JlYXRlUm91dGVzRnJvbUNoaWxkcmVuLFxuICByZW5kZXJNYXRjaGVzLFxufSBmcm9tIFwiLi9saWIvY29tcG9uZW50c1wiO1xuaW1wb3J0IHR5cGUge1xuICBEYXRhUm91dGVNYXRjaCxcbiAgRGF0YVJvdXRlT2JqZWN0LFxuICBJbmRleFJvdXRlT2JqZWN0LFxuICBOYXZpZ2F0ZU9wdGlvbnMsXG4gIE5hdmlnYXRvcixcbiAgTm9uSW5kZXhSb3V0ZU9iamVjdCxcbiAgUm91dGVNYXRjaCxcbiAgUm91dGVPYmplY3QsXG59IGZyb20gXCIuL2xpYi9jb250ZXh0XCI7XG5pbXBvcnQge1xuICBEYXRhUm91dGVyQ29udGV4dCxcbiAgRGF0YVJvdXRlclN0YXRlQ29udGV4dCxcbiAgTG9jYXRpb25Db250ZXh0LFxuICBOYXZpZ2F0aW9uQ29udGV4dCxcbiAgUm91dGVDb250ZXh0LFxufSBmcm9tIFwiLi9saWIvY29udGV4dFwiO1xuaW1wb3J0IHR5cGUgeyBOYXZpZ2F0ZUZ1bmN0aW9uIH0gZnJvbSBcIi4vbGliL2hvb2tzXCI7XG5pbXBvcnQge1xuICB1c2VBY3Rpb25EYXRhLFxuICB1c2VBc3luY0Vycm9yLFxuICB1c2VBc3luY1ZhbHVlLFxuICB1c2VCbG9ja2VyLFxuICB1c2VIcmVmLFxuICB1c2VJblJvdXRlckNvbnRleHQsXG4gIHVzZUxvYWRlckRhdGEsXG4gIHVzZUxvY2F0aW9uLFxuICB1c2VNYXRjaCxcbiAgdXNlTWF0Y2hlcyxcbiAgdXNlTmF2aWdhdGUsXG4gIHVzZU5hdmlnYXRpb24sXG4gIHVzZU5hdmlnYXRpb25UeXBlLFxuICB1c2VPdXRsZXQsXG4gIHVzZU91dGxldENvbnRleHQsXG4gIHVzZVBhcmFtcyxcbiAgdXNlUmVzb2x2ZWRQYXRoLFxuICB1c2VSZXZhbGlkYXRvcixcbiAgdXNlUm91dGVFcnJvcixcbiAgdXNlUm91dGVJZCxcbiAgdXNlUm91dGVMb2FkZXJEYXRhLFxuICB1c2VSb3V0ZXMsXG4gIHVzZVJvdXRlc0ltcGwsXG59IGZyb20gXCIuL2xpYi9ob29rc1wiO1xuXG4vLyBFeHBvcnRlZCBmb3IgYmFja3dhcmRzIGNvbXBhdGliaWxpdHksIGJ1dCBub3QgYmVpbmcgdXNlZCBpbnRlcm5hbGx5IGFueW1vcmVcbnR5cGUgSGFzaCA9IHN0cmluZztcbnR5cGUgUGF0aG5hbWUgPSBzdHJpbmc7XG50eXBlIFNlYXJjaCA9IHN0cmluZztcblxuLy8gRXhwb3NlIHJlYWN0LXJvdXRlciBwdWJsaWMgQVBJXG5leHBvcnQgdHlwZSB7XG4gIEFjdGlvbkZ1bmN0aW9uLFxuICBBY3Rpb25GdW5jdGlvbkFyZ3MsXG4gIEF3YWl0UHJvcHMsXG4gIERhdGFSb3V0ZU1hdGNoLFxuICBEYXRhUm91dGVPYmplY3QsXG4gIEVycm9yUmVzcG9uc2UsXG4gIEZldGNoZXIsXG4gIEZ1dHVyZUNvbmZpZyxcbiAgSGFzaCxcbiAgSW5kZXhSb3V0ZU9iamVjdCxcbiAgSW5kZXhSb3V0ZVByb3BzLFxuICBKc29uRnVuY3Rpb24sXG4gIExheW91dFJvdXRlUHJvcHMsXG4gIExhenlSb3V0ZUZ1bmN0aW9uLFxuICBMb2FkZXJGdW5jdGlvbixcbiAgTG9hZGVyRnVuY3Rpb25BcmdzLFxuICBMb2NhdGlvbixcbiAgTWVtb3J5Um91dGVyUHJvcHMsXG4gIE5hdmlnYXRlRnVuY3Rpb24sXG4gIE5hdmlnYXRlT3B0aW9ucyxcbiAgTmF2aWdhdGVQcm9wcyxcbiAgTmF2aWdhdGlvbixcbiAgTmF2aWdhdG9yLFxuICBOb25JbmRleFJvdXRlT2JqZWN0LFxuICBPdXRsZXRQcm9wcyxcbiAgUGFyYW1QYXJzZUtleSxcbiAgUGFyYW1zLFxuICBQYXRoLFxuICBQYXRoTWF0Y2gsXG4gIFBhdGhQYXJhbSxcbiAgUGF0aFBhdHRlcm4sXG4gIFBhdGhSb3V0ZVByb3BzLFxuICBQYXRobmFtZSxcbiAgUmVkaXJlY3RGdW5jdGlvbixcbiAgUmVsYXRpdmVSb3V0aW5nVHlwZSxcbiAgUm91dGVNYXRjaCxcbiAgUm91dGVPYmplY3QsXG4gIFJvdXRlUHJvcHMsXG4gIFJvdXRlclByb3BzLFxuICBSb3V0ZXJQcm92aWRlclByb3BzLFxuICBSb3V0ZXNQcm9wcyxcbiAgU2VhcmNoLFxuICBTaG91bGRSZXZhbGlkYXRlRnVuY3Rpb24sXG4gIFNob3VsZFJldmFsaWRhdGVGdW5jdGlvbkFyZ3MsXG4gIFRvLFxuICBVSU1hdGNoLFxuICBCbG9ja2VyLFxuICBCbG9ja2VyRnVuY3Rpb24sXG59O1xuZXhwb3J0IHtcbiAgQWJvcnRlZERlZmVycmVkRXJyb3IsXG4gIEF3YWl0LFxuICBNZW1vcnlSb3V0ZXIsXG4gIE5hdmlnYXRlLFxuICBOYXZpZ2F0aW9uVHlwZSxcbiAgT3V0bGV0LFxuICBSb3V0ZSxcbiAgUm91dGVyLFxuICBSb3V0ZXJQcm92aWRlcixcbiAgUm91dGVzLFxuICBjcmVhdGVQYXRoLFxuICBjcmVhdGVSb3V0ZXNGcm9tQ2hpbGRyZW4sXG4gIGNyZWF0ZVJvdXRlc0Zyb21DaGlsZHJlbiBhcyBjcmVhdGVSb3V0ZXNGcm9tRWxlbWVudHMsXG4gIGRlZmVyLFxuICBnZW5lcmF0ZVBhdGgsXG4gIGlzUm91dGVFcnJvclJlc3BvbnNlLFxuICBqc29uLFxuICBtYXRjaFBhdGgsXG4gIG1hdGNoUm91dGVzLFxuICBwYXJzZVBhdGgsXG4gIHJlZGlyZWN0LFxuICByZWRpcmVjdERvY3VtZW50LFxuICByZW5kZXJNYXRjaGVzLFxuICByZXNvbHZlUGF0aCxcbiAgdXNlQmxvY2tlcixcbiAgdXNlQWN0aW9uRGF0YSxcbiAgdXNlQXN5bmNFcnJvcixcbiAgdXNlQXN5bmNWYWx1ZSxcbiAgdXNlSHJlZixcbiAgdXNlSW5Sb3V0ZXJDb250ZXh0LFxuICB1c2VMb2FkZXJEYXRhLFxuICB1c2VMb2NhdGlvbixcbiAgdXNlTWF0Y2gsXG4gIHVzZU1hdGNoZXMsXG4gIHVzZU5hdmlnYXRlLFxuICB1c2VOYXZpZ2F0aW9uLFxuICB1c2VOYXZpZ2F0aW9uVHlwZSxcbiAgdXNlT3V0bGV0LFxuICB1c2VPdXRsZXRDb250ZXh0LFxuICB1c2VQYXJhbXMsXG4gIHVzZVJlc29sdmVkUGF0aCxcbiAgdXNlUmV2YWxpZGF0b3IsXG4gIHVzZVJvdXRlRXJyb3IsXG4gIHVzZVJvdXRlTG9hZGVyRGF0YSxcbiAgdXNlUm91dGVzLFxufTtcblxuZnVuY3Rpb24gbWFwUm91dGVQcm9wZXJ0aWVzKHJvdXRlOiBSb3V0ZU9iamVjdCkge1xuICBsZXQgdXBkYXRlczogUGFydGlhbDxSb3V0ZU9iamVjdD4gJiB7IGhhc0Vycm9yQm91bmRhcnk6IGJvb2xlYW4gfSA9IHtcbiAgICAvLyBOb3RlOiB0aGlzIGNoZWNrIGFsc28gb2NjdXJzIGluIGNyZWF0ZVJvdXRlc0Zyb21DaGlsZHJlbiBzbyB1cGRhdGVcbiAgICAvLyB0aGVyZSBpZiB5b3UgY2hhbmdlIHRoaXMgLS0gcGxlYXNlIGFuZCB0aGFuayB5b3UhXG4gICAgaGFzRXJyb3JCb3VuZGFyeTogcm91dGUuRXJyb3JCb3VuZGFyeSAhPSBudWxsIHx8IHJvdXRlLmVycm9yRWxlbWVudCAhPSBudWxsLFxuICB9O1xuXG4gIGlmIChyb3V0ZS5Db21wb25lbnQpIHtcbiAgICBpZiAoX19ERVZfXykge1xuICAgICAgaWYgKHJvdXRlLmVsZW1lbnQpIHtcbiAgICAgICAgd2FybmluZyhcbiAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICBcIllvdSBzaG91bGQgbm90IGluY2x1ZGUgYm90aCBgQ29tcG9uZW50YCBhbmQgYGVsZW1lbnRgIG9uIHlvdXIgcm91dGUgLSBcIiArXG4gICAgICAgICAgICBcImBDb21wb25lbnRgIHdpbGwgYmUgdXNlZC5cIlxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cbiAgICBPYmplY3QuYXNzaWduKHVwZGF0ZXMsIHtcbiAgICAgIGVsZW1lbnQ6IFJlYWN0LmNyZWF0ZUVsZW1lbnQocm91dGUuQ29tcG9uZW50KSxcbiAgICAgIENvbXBvbmVudDogdW5kZWZpbmVkLFxuICAgIH0pO1xuICB9XG5cbiAgaWYgKHJvdXRlLkh5ZHJhdGVGYWxsYmFjaykge1xuICAgIGlmIChfX0RFVl9fKSB7XG4gICAgICBpZiAocm91dGUuaHlkcmF0ZUZhbGxiYWNrRWxlbWVudCkge1xuICAgICAgICB3YXJuaW5nKFxuICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgIFwiWW91IHNob3VsZCBub3QgaW5jbHVkZSBib3RoIGBIeWRyYXRlRmFsbGJhY2tgIGFuZCBgaHlkcmF0ZUZhbGxiYWNrRWxlbWVudGAgb24geW91ciByb3V0ZSAtIFwiICtcbiAgICAgICAgICAgIFwiYEh5ZHJhdGVGYWxsYmFja2Agd2lsbCBiZSB1c2VkLlwiXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuICAgIE9iamVjdC5hc3NpZ24odXBkYXRlcywge1xuICAgICAgaHlkcmF0ZUZhbGxiYWNrRWxlbWVudDogUmVhY3QuY3JlYXRlRWxlbWVudChyb3V0ZS5IeWRyYXRlRmFsbGJhY2spLFxuICAgICAgSHlkcmF0ZUZhbGxiYWNrOiB1bmRlZmluZWQsXG4gICAgfSk7XG4gIH1cblxuICBpZiAocm91dGUuRXJyb3JCb3VuZGFyeSkge1xuICAgIGlmIChfX0RFVl9fKSB7XG4gICAgICBpZiAocm91dGUuZXJyb3JFbGVtZW50KSB7XG4gICAgICAgIHdhcm5pbmcoXG4gICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgXCJZb3Ugc2hvdWxkIG5vdCBpbmNsdWRlIGJvdGggYEVycm9yQm91bmRhcnlgIGFuZCBgZXJyb3JFbGVtZW50YCBvbiB5b3VyIHJvdXRlIC0gXCIgK1xuICAgICAgICAgICAgXCJgRXJyb3JCb3VuZGFyeWAgd2lsbCBiZSB1c2VkLlwiXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuICAgIE9iamVjdC5hc3NpZ24odXBkYXRlcywge1xuICAgICAgZXJyb3JFbGVtZW50OiBSZWFjdC5jcmVhdGVFbGVtZW50KHJvdXRlLkVycm9yQm91bmRhcnkpLFxuICAgICAgRXJyb3JCb3VuZGFyeTogdW5kZWZpbmVkLFxuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIHVwZGF0ZXM7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVNZW1vcnlSb3V0ZXIoXG4gIHJvdXRlczogUm91dGVPYmplY3RbXSxcbiAgb3B0cz86IHtcbiAgICBiYXNlbmFtZT86IHN0cmluZztcbiAgICBmdXR1cmU/OiBQYXJ0aWFsPE9taXQ8Um91dGVyRnV0dXJlQ29uZmlnLCBcInY3X3ByZXBlbmRCYXNlbmFtZVwiPj47XG4gICAgaHlkcmF0aW9uRGF0YT86IEh5ZHJhdGlvblN0YXRlO1xuICAgIGluaXRpYWxFbnRyaWVzPzogSW5pdGlhbEVudHJ5W107XG4gICAgaW5pdGlhbEluZGV4PzogbnVtYmVyO1xuICB9XG4pOiBSZW1peFJvdXRlciB7XG4gIHJldHVybiBjcmVhdGVSb3V0ZXIoe1xuICAgIGJhc2VuYW1lOiBvcHRzPy5iYXNlbmFtZSxcbiAgICBmdXR1cmU6IHtcbiAgICAgIC4uLm9wdHM/LmZ1dHVyZSxcbiAgICAgIHY3X3ByZXBlbmRCYXNlbmFtZTogdHJ1ZSxcbiAgICB9LFxuICAgIGhpc3Rvcnk6IGNyZWF0ZU1lbW9yeUhpc3Rvcnkoe1xuICAgICAgaW5pdGlhbEVudHJpZXM6IG9wdHM/LmluaXRpYWxFbnRyaWVzLFxuICAgICAgaW5pdGlhbEluZGV4OiBvcHRzPy5pbml0aWFsSW5kZXgsXG4gICAgfSksXG4gICAgaHlkcmF0aW9uRGF0YTogb3B0cz8uaHlkcmF0aW9uRGF0YSxcbiAgICByb3V0ZXMsXG4gICAgbWFwUm91dGVQcm9wZXJ0aWVzLFxuICB9KS5pbml0aWFsaXplKCk7XG59XG5cbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIERBTkdFUiEgUExFQVNFIFJFQUQgTUUhXG4vLyBXZSBwcm92aWRlIHRoZXNlIGV4cG9ydHMgYXMgYW4gZXNjYXBlIGhhdGNoIGluIHRoZSBldmVudCB0aGF0IHlvdSBuZWVkIGFueVxuLy8gcm91dGluZyBkYXRhIHRoYXQgd2UgZG9uJ3QgcHJvdmlkZSBhbiBleHBsaWNpdCBBUEkgZm9yLiBXaXRoIHRoYXQgc2FpZCwgd2Vcbi8vIHdhbnQgdG8gY292ZXIgeW91ciB1c2UgY2FzZSBpZiB3ZSBjYW4sIHNvIGlmIHlvdSBmZWVsIHRoZSBuZWVkIHRvIHVzZSB0aGVzZVxuLy8gd2Ugd2FudCB0byBoZWFyIGZyb20geW91LiBMZXQgdXMga25vdyB3aGF0IHlvdSdyZSBidWlsZGluZyBhbmQgd2UnbGwgZG8gb3VyXG4vLyBiZXN0IHRvIG1ha2Ugc3VyZSB3ZSBjYW4gc3VwcG9ydCB5b3UhXG4vL1xuLy8gV2UgY29uc2lkZXIgdGhlc2UgZXhwb3J0cyBhbiBpbXBsZW1lbnRhdGlvbiBkZXRhaWwgYW5kIGRvIG5vdCBndWFyYW50ZWVcbi8vIGFnYWluc3QgYW55IGJyZWFraW5nIGNoYW5nZXMsIHJlZ2FyZGxlc3Mgb2YgdGhlIHNlbXZlciByZWxlYXNlLiBVc2Ugd2l0aFxuLy8gZXh0cmVtZSBjYXV0aW9uIGFuZCBvbmx5IGlmIHlvdSB1bmRlcnN0YW5kIHRoZSBjb25zZXF1ZW5jZXMuIEdvZHNwZWVkLlxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG4vKiogQGludGVybmFsICovXG5leHBvcnQge1xuICBEYXRhUm91dGVyQ29udGV4dCBhcyBVTlNBRkVfRGF0YVJvdXRlckNvbnRleHQsXG4gIERhdGFSb3V0ZXJTdGF0ZUNvbnRleHQgYXMgVU5TQUZFX0RhdGFSb3V0ZXJTdGF0ZUNvbnRleHQsXG4gIExvY2F0aW9uQ29udGV4dCBhcyBVTlNBRkVfTG9jYXRpb25Db250ZXh0LFxuICBOYXZpZ2F0aW9uQ29udGV4dCBhcyBVTlNBRkVfTmF2aWdhdGlvbkNvbnRleHQsXG4gIFJvdXRlQ29udGV4dCBhcyBVTlNBRkVfUm91dGVDb250ZXh0LFxuICBtYXBSb3V0ZVByb3BlcnRpZXMgYXMgVU5TQUZFX21hcFJvdXRlUHJvcGVydGllcyxcbiAgdXNlUm91dGVJZCBhcyBVTlNBRkVfdXNlUm91dGVJZCxcbiAgdXNlUm91dGVzSW1wbCBhcyBVTlNBRkVfdXNlUm91dGVzSW1wbCxcbn07XG4iLCJpbXBvcnQgdHlwZSB7XG4gIEZvcm1FbmNUeXBlLFxuICBIVE1MRm9ybU1ldGhvZCxcbiAgUmVsYXRpdmVSb3V0aW5nVHlwZSxcbn0gZnJvbSBcIkByZW1peC1ydW4vcm91dGVyXCI7XG5pbXBvcnQgeyBzdHJpcEJhc2VuYW1lLCBVTlNBRkVfd2FybmluZyBhcyB3YXJuaW5nIH0gZnJvbSBcIkByZW1peC1ydW4vcm91dGVyXCI7XG5cbmV4cG9ydCBjb25zdCBkZWZhdWx0TWV0aG9kOiBIVE1MRm9ybU1ldGhvZCA9IFwiZ2V0XCI7XG5jb25zdCBkZWZhdWx0RW5jVHlwZTogRm9ybUVuY1R5cGUgPSBcImFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZFwiO1xuXG5leHBvcnQgZnVuY3Rpb24gaXNIdG1sRWxlbWVudChvYmplY3Q6IGFueSk6IG9iamVjdCBpcyBIVE1MRWxlbWVudCB7XG4gIHJldHVybiBvYmplY3QgIT0gbnVsbCAmJiB0eXBlb2Ygb2JqZWN0LnRhZ05hbWUgPT09IFwic3RyaW5nXCI7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc0J1dHRvbkVsZW1lbnQob2JqZWN0OiBhbnkpOiBvYmplY3QgaXMgSFRNTEJ1dHRvbkVsZW1lbnQge1xuICByZXR1cm4gaXNIdG1sRWxlbWVudChvYmplY3QpICYmIG9iamVjdC50YWdOYW1lLnRvTG93ZXJDYXNlKCkgPT09IFwiYnV0dG9uXCI7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc0Zvcm1FbGVtZW50KG9iamVjdDogYW55KTogb2JqZWN0IGlzIEhUTUxGb3JtRWxlbWVudCB7XG4gIHJldHVybiBpc0h0bWxFbGVtZW50KG9iamVjdCkgJiYgb2JqZWN0LnRhZ05hbWUudG9Mb3dlckNhc2UoKSA9PT0gXCJmb3JtXCI7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc0lucHV0RWxlbWVudChvYmplY3Q6IGFueSk6IG9iamVjdCBpcyBIVE1MSW5wdXRFbGVtZW50IHtcbiAgcmV0dXJuIGlzSHRtbEVsZW1lbnQob2JqZWN0KSAmJiBvYmplY3QudGFnTmFtZS50b0xvd2VyQ2FzZSgpID09PSBcImlucHV0XCI7XG59XG5cbnR5cGUgTGltaXRlZE1vdXNlRXZlbnQgPSBQaWNrPFxuICBNb3VzZUV2ZW50LFxuICBcImJ1dHRvblwiIHwgXCJtZXRhS2V5XCIgfCBcImFsdEtleVwiIHwgXCJjdHJsS2V5XCIgfCBcInNoaWZ0S2V5XCJcbj47XG5cbmZ1bmN0aW9uIGlzTW9kaWZpZWRFdmVudChldmVudDogTGltaXRlZE1vdXNlRXZlbnQpIHtcbiAgcmV0dXJuICEhKGV2ZW50Lm1ldGFLZXkgfHwgZXZlbnQuYWx0S2V5IHx8IGV2ZW50LmN0cmxLZXkgfHwgZXZlbnQuc2hpZnRLZXkpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc2hvdWxkUHJvY2Vzc0xpbmtDbGljayhcbiAgZXZlbnQ6IExpbWl0ZWRNb3VzZUV2ZW50LFxuICB0YXJnZXQ/OiBzdHJpbmdcbikge1xuICByZXR1cm4gKFxuICAgIGV2ZW50LmJ1dHRvbiA9PT0gMCAmJiAvLyBJZ25vcmUgZXZlcnl0aGluZyBidXQgbGVmdCBjbGlja3NcbiAgICAoIXRhcmdldCB8fCB0YXJnZXQgPT09IFwiX3NlbGZcIikgJiYgLy8gTGV0IGJyb3dzZXIgaGFuZGxlIFwidGFyZ2V0PV9ibGFua1wiIGV0Yy5cbiAgICAhaXNNb2RpZmllZEV2ZW50KGV2ZW50KSAvLyBJZ25vcmUgY2xpY2tzIHdpdGggbW9kaWZpZXIga2V5c1xuICApO1xufVxuXG5leHBvcnQgdHlwZSBQYXJhbUtleVZhbHVlUGFpciA9IFtzdHJpbmcsIHN0cmluZ107XG5cbmV4cG9ydCB0eXBlIFVSTFNlYXJjaFBhcmFtc0luaXQgPVxuICB8IHN0cmluZ1xuICB8IFBhcmFtS2V5VmFsdWVQYWlyW11cbiAgfCBSZWNvcmQ8c3RyaW5nLCBzdHJpbmcgfCBzdHJpbmdbXT5cbiAgfCBVUkxTZWFyY2hQYXJhbXM7XG5cbi8qKlxuICogQ3JlYXRlcyBhIFVSTFNlYXJjaFBhcmFtcyBvYmplY3QgdXNpbmcgdGhlIGdpdmVuIGluaXRpYWxpemVyLlxuICpcbiAqIFRoaXMgaXMgaWRlbnRpY2FsIHRvIGBuZXcgVVJMU2VhcmNoUGFyYW1zKGluaXQpYCBleGNlcHQgaXQgYWxzb1xuICogc3VwcG9ydHMgYXJyYXlzIGFzIHZhbHVlcyBpbiB0aGUgb2JqZWN0IGZvcm0gb2YgdGhlIGluaXRpYWxpemVyXG4gKiBpbnN0ZWFkIG9mIGp1c3Qgc3RyaW5ncy4gVGhpcyBpcyBjb252ZW5pZW50IHdoZW4geW91IG5lZWQgbXVsdGlwbGVcbiAqIHZhbHVlcyBmb3IgYSBnaXZlbiBrZXksIGJ1dCBkb24ndCB3YW50IHRvIHVzZSBhbiBhcnJheSBpbml0aWFsaXplci5cbiAqXG4gKiBGb3IgZXhhbXBsZSwgaW5zdGVhZCBvZjpcbiAqXG4gKiAgIGxldCBzZWFyY2hQYXJhbXMgPSBuZXcgVVJMU2VhcmNoUGFyYW1zKFtcbiAqICAgICBbJ3NvcnQnLCAnbmFtZSddLFxuICogICAgIFsnc29ydCcsICdwcmljZSddXG4gKiAgIF0pO1xuICpcbiAqIHlvdSBjYW4gZG86XG4gKlxuICogICBsZXQgc2VhcmNoUGFyYW1zID0gY3JlYXRlU2VhcmNoUGFyYW1zKHtcbiAqICAgICBzb3J0OiBbJ25hbWUnLCAncHJpY2UnXVxuICogICB9KTtcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVNlYXJjaFBhcmFtcyhcbiAgaW5pdDogVVJMU2VhcmNoUGFyYW1zSW5pdCA9IFwiXCJcbik6IFVSTFNlYXJjaFBhcmFtcyB7XG4gIHJldHVybiBuZXcgVVJMU2VhcmNoUGFyYW1zKFxuICAgIHR5cGVvZiBpbml0ID09PSBcInN0cmluZ1wiIHx8XG4gICAgQXJyYXkuaXNBcnJheShpbml0KSB8fFxuICAgIGluaXQgaW5zdGFuY2VvZiBVUkxTZWFyY2hQYXJhbXNcbiAgICAgID8gaW5pdFxuICAgICAgOiBPYmplY3Qua2V5cyhpbml0KS5yZWR1Y2UoKG1lbW8sIGtleSkgPT4ge1xuICAgICAgICAgIGxldCB2YWx1ZSA9IGluaXRba2V5XTtcbiAgICAgICAgICByZXR1cm4gbWVtby5jb25jYXQoXG4gICAgICAgICAgICBBcnJheS5pc0FycmF5KHZhbHVlKSA/IHZhbHVlLm1hcCgodikgPT4gW2tleSwgdl0pIDogW1trZXksIHZhbHVlXV1cbiAgICAgICAgICApO1xuICAgICAgICB9LCBbXSBhcyBQYXJhbUtleVZhbHVlUGFpcltdKVxuICApO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0U2VhcmNoUGFyYW1zRm9yTG9jYXRpb24oXG4gIGxvY2F0aW9uU2VhcmNoOiBzdHJpbmcsXG4gIGRlZmF1bHRTZWFyY2hQYXJhbXM6IFVSTFNlYXJjaFBhcmFtcyB8IG51bGxcbikge1xuICBsZXQgc2VhcmNoUGFyYW1zID0gY3JlYXRlU2VhcmNoUGFyYW1zKGxvY2F0aW9uU2VhcmNoKTtcblxuICBpZiAoZGVmYXVsdFNlYXJjaFBhcmFtcykge1xuICAgIC8vIFVzZSBgZGVmYXVsdFNlYXJjaFBhcmFtcy5mb3JFYWNoKC4uLilgIGhlcmUgaW5zdGVhZCBvZiBpdGVyYXRpbmcgb2ZcbiAgICAvLyBgZGVmYXVsdFNlYXJjaFBhcmFtcy5rZXlzKClgIHRvIHdvcmstYXJvdW5kIGEgYnVnIGluIEZpcmVmb3ggcmVsYXRlZCB0b1xuICAgIC8vIHdlYiBleHRlbnNpb25zLiBSZWxldmFudCBCdWd6aWxsYSB0aWNrZXRzOlxuICAgIC8vIGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvc2hvd19idWcuY2dpP2lkPTE0MTQ2MDJcbiAgICAvLyBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL3Nob3dfYnVnLmNnaT9pZD0xMDIzOTg0XG4gICAgZGVmYXVsdFNlYXJjaFBhcmFtcy5mb3JFYWNoKChfLCBrZXkpID0+IHtcbiAgICAgIGlmICghc2VhcmNoUGFyYW1zLmhhcyhrZXkpKSB7XG4gICAgICAgIGRlZmF1bHRTZWFyY2hQYXJhbXMuZ2V0QWxsKGtleSkuZm9yRWFjaCgodmFsdWUpID0+IHtcbiAgICAgICAgICBzZWFyY2hQYXJhbXMuYXBwZW5kKGtleSwgdmFsdWUpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIHJldHVybiBzZWFyY2hQYXJhbXM7XG59XG5cbi8vIFRoYW5rcyBodHRwczovL2dpdGh1Yi5jb20vc2luZHJlc29yaHVzL3R5cGUtZmVzdCFcbnR5cGUgSnNvbk9iamVjdCA9IHsgW0tleSBpbiBzdHJpbmddOiBKc29uVmFsdWUgfSAmIHtcbiAgW0tleSBpbiBzdHJpbmddPzogSnNvblZhbHVlIHwgdW5kZWZpbmVkO1xufTtcbnR5cGUgSnNvbkFycmF5ID0gSnNvblZhbHVlW10gfCByZWFkb25seSBKc29uVmFsdWVbXTtcbnR5cGUgSnNvblByaW1pdGl2ZSA9IHN0cmluZyB8IG51bWJlciB8IGJvb2xlYW4gfCBudWxsO1xudHlwZSBKc29uVmFsdWUgPSBKc29uUHJpbWl0aXZlIHwgSnNvbk9iamVjdCB8IEpzb25BcnJheTtcblxuZXhwb3J0IHR5cGUgU3VibWl0VGFyZ2V0ID1cbiAgfCBIVE1MRm9ybUVsZW1lbnRcbiAgfCBIVE1MQnV0dG9uRWxlbWVudFxuICB8IEhUTUxJbnB1dEVsZW1lbnRcbiAgfCBGb3JtRGF0YVxuICB8IFVSTFNlYXJjaFBhcmFtc1xuICB8IEpzb25WYWx1ZVxuICB8IG51bGw7XG5cbi8vIE9uZS10aW1lIGNoZWNrIGZvciBzdWJtaXR0ZXIgc3VwcG9ydFxubGV0IF9mb3JtRGF0YVN1cHBvcnRzU3VibWl0dGVyOiBib29sZWFuIHwgbnVsbCA9IG51bGw7XG5cbmZ1bmN0aW9uIGlzRm9ybURhdGFTdWJtaXR0ZXJTdXBwb3J0ZWQoKSB7XG4gIGlmIChfZm9ybURhdGFTdXBwb3J0c1N1Ym1pdHRlciA9PT0gbnVsbCkge1xuICAgIHRyeSB7XG4gICAgICBuZXcgRm9ybURhdGEoXG4gICAgICAgIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJmb3JtXCIpLFxuICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yIGlmIEZvcm1EYXRhIHN1cHBvcnRzIHRoZSBzdWJtaXR0ZXIgcGFyYW1ldGVyLCB0aGlzIHdpbGwgdGhyb3dcbiAgICAgICAgMFxuICAgICAgKTtcbiAgICAgIF9mb3JtRGF0YVN1cHBvcnRzU3VibWl0dGVyID0gZmFsc2U7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgX2Zvcm1EYXRhU3VwcG9ydHNTdWJtaXR0ZXIgPSB0cnVlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gX2Zvcm1EYXRhU3VwcG9ydHNTdWJtaXR0ZXI7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgU3VibWl0T3B0aW9ucyB7XG4gIC8qKlxuICAgKiBUaGUgSFRUUCBtZXRob2QgdXNlZCB0byBzdWJtaXQgdGhlIGZvcm0uIE92ZXJyaWRlcyBgPGZvcm0gbWV0aG9kPmAuXG4gICAqIERlZmF1bHRzIHRvIFwiR0VUXCIuXG4gICAqL1xuICBtZXRob2Q/OiBIVE1MRm9ybU1ldGhvZDtcblxuICAvKipcbiAgICogVGhlIGFjdGlvbiBVUkwgcGF0aCB1c2VkIHRvIHN1Ym1pdCB0aGUgZm9ybS4gT3ZlcnJpZGVzIGA8Zm9ybSBhY3Rpb24+YC5cbiAgICogRGVmYXVsdHMgdG8gdGhlIHBhdGggb2YgdGhlIGN1cnJlbnQgcm91dGUuXG4gICAqL1xuICBhY3Rpb24/OiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFRoZSBlbmNvZGluZyB1c2VkIHRvIHN1Ym1pdCB0aGUgZm9ybS4gT3ZlcnJpZGVzIGA8Zm9ybSBlbmNUeXBlPmAuXG4gICAqIERlZmF1bHRzIHRvIFwiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkXCIuXG4gICAqL1xuICBlbmNUeXBlPzogRm9ybUVuY1R5cGU7XG5cbiAgLyoqXG4gICAqIEluZGljYXRlIGEgc3BlY2lmaWMgZmV0Y2hlcktleSB0byB1c2Ugd2hlbiB1c2luZyBuYXZpZ2F0ZT1mYWxzZVxuICAgKi9cbiAgZmV0Y2hlcktleT86IHN0cmluZztcblxuICAvKipcbiAgICogbmF2aWdhdGU9ZmFsc2Ugd2lsbCB1c2UgYSBmZXRjaGVyIGluc3RlYWQgb2YgYSBuYXZpZ2F0aW9uXG4gICAqL1xuICBuYXZpZ2F0ZT86IGJvb2xlYW47XG5cbiAgLyoqXG4gICAqIFNldCBgdHJ1ZWAgdG8gcmVwbGFjZSB0aGUgY3VycmVudCBlbnRyeSBpbiB0aGUgYnJvd3NlcidzIGhpc3Rvcnkgc3RhY2tcbiAgICogaW5zdGVhZCBvZiBjcmVhdGluZyBhIG5ldyBvbmUgKGkuZS4gc3RheSBvbiBcInRoZSBzYW1lIHBhZ2VcIikuIERlZmF1bHRzXG4gICAqIHRvIGBmYWxzZWAuXG4gICAqL1xuICByZXBsYWNlPzogYm9vbGVhbjtcblxuICAvKipcbiAgICogU3RhdGUgb2JqZWN0IHRvIGFkZCB0byB0aGUgaGlzdG9yeSBzdGFjayBlbnRyeSBmb3IgdGhpcyBuYXZpZ2F0aW9uXG4gICAqL1xuICBzdGF0ZT86IGFueTtcblxuICAvKipcbiAgICogRGV0ZXJtaW5lcyB3aGV0aGVyIHRoZSBmb3JtIGFjdGlvbiBpcyByZWxhdGl2ZSB0byB0aGUgcm91dGUgaGllcmFyY2h5IG9yXG4gICAqIHRoZSBwYXRobmFtZS4gIFVzZSB0aGlzIGlmIHlvdSB3YW50IHRvIG9wdCBvdXQgb2YgbmF2aWdhdGluZyB0aGUgcm91dGVcbiAgICogaGllcmFyY2h5IGFuZCB3YW50IHRvIGluc3RlYWQgcm91dGUgYmFzZWQgb24gLy1kZWxpbWl0ZWQgVVJMIHNlZ21lbnRzXG4gICAqL1xuICByZWxhdGl2ZT86IFJlbGF0aXZlUm91dGluZ1R5cGU7XG5cbiAgLyoqXG4gICAqIEluIGJyb3dzZXItYmFzZWQgZW52aXJvbm1lbnRzLCBwcmV2ZW50IHJlc2V0dGluZyBzY3JvbGwgYWZ0ZXIgdGhpc1xuICAgKiBuYXZpZ2F0aW9uIHdoZW4gdXNpbmcgdGhlIDxTY3JvbGxSZXN0b3JhdGlvbj4gY29tcG9uZW50XG4gICAqL1xuICBwcmV2ZW50U2Nyb2xsUmVzZXQ/OiBib29sZWFuO1xuXG4gIC8qKlxuICAgKiBFbmFibGUgZmx1c2hTeW5jIGZvciB0aGlzIG5hdmlnYXRpb24ncyBzdGF0ZSB1cGRhdGVzXG4gICAqL1xuICB1bnN0YWJsZV9mbHVzaFN5bmM/OiBib29sZWFuO1xuXG4gIC8qKlxuICAgKiBFbmFibGUgdmlldyB0cmFuc2l0aW9ucyBvbiB0aGlzIHN1Ym1pc3Npb24gbmF2aWdhdGlvblxuICAgKi9cbiAgdW5zdGFibGVfdmlld1RyYW5zaXRpb24/OiBib29sZWFuO1xufVxuXG5jb25zdCBzdXBwb3J0ZWRGb3JtRW5jVHlwZXM6IFNldDxGb3JtRW5jVHlwZT4gPSBuZXcgU2V0KFtcbiAgXCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWRcIixcbiAgXCJtdWx0aXBhcnQvZm9ybS1kYXRhXCIsXG4gIFwidGV4dC9wbGFpblwiLFxuXSk7XG5cbmZ1bmN0aW9uIGdldEZvcm1FbmNUeXBlKGVuY1R5cGU6IHN0cmluZyB8IG51bGwpIHtcbiAgaWYgKGVuY1R5cGUgIT0gbnVsbCAmJiAhc3VwcG9ydGVkRm9ybUVuY1R5cGVzLmhhcyhlbmNUeXBlIGFzIEZvcm1FbmNUeXBlKSkge1xuICAgIHdhcm5pbmcoXG4gICAgICBmYWxzZSxcbiAgICAgIGBcIiR7ZW5jVHlwZX1cIiBpcyBub3QgYSB2YWxpZCBcXGBlbmNUeXBlXFxgIGZvciBcXGA8Rm9ybT5cXGAvXFxgPGZldGNoZXIuRm9ybT5cXGAgYCArXG4gICAgICAgIGBhbmQgd2lsbCBkZWZhdWx0IHRvIFwiJHtkZWZhdWx0RW5jVHlwZX1cImBcbiAgICApO1xuXG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgcmV0dXJuIGVuY1R5cGU7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRGb3JtU3VibWlzc2lvbkluZm8oXG4gIHRhcmdldDogU3VibWl0VGFyZ2V0LFxuICBiYXNlbmFtZTogc3RyaW5nXG4pOiB7XG4gIGFjdGlvbjogc3RyaW5nIHwgbnVsbDtcbiAgbWV0aG9kOiBzdHJpbmc7XG4gIGVuY1R5cGU6IHN0cmluZztcbiAgZm9ybURhdGE6IEZvcm1EYXRhIHwgdW5kZWZpbmVkO1xuICBib2R5OiBhbnk7XG59IHtcbiAgbGV0IG1ldGhvZDogc3RyaW5nO1xuICBsZXQgYWN0aW9uOiBzdHJpbmcgfCBudWxsO1xuICBsZXQgZW5jVHlwZTogc3RyaW5nO1xuICBsZXQgZm9ybURhdGE6IEZvcm1EYXRhIHwgdW5kZWZpbmVkO1xuICBsZXQgYm9keTogYW55O1xuXG4gIGlmIChpc0Zvcm1FbGVtZW50KHRhcmdldCkpIHtcbiAgICAvLyBXaGVuIGdyYWJiaW5nIHRoZSBhY3Rpb24gZnJvbSB0aGUgZWxlbWVudCwgaXQgd2lsbCBoYXZlIGhhZCB0aGUgYmFzZW5hbWVcbiAgICAvLyBwcmVmaXhlZCB0byBlbnN1cmUgbm9uLUpTIHNjZW5hcmlvcyB3b3JrLCBzbyBzdHJpcCBpdCBzaW5jZSB3ZSdsbFxuICAgIC8vIHJlLXByZWZpeCBpbiB0aGUgcm91dGVyXG4gICAgbGV0IGF0dHIgPSB0YXJnZXQuZ2V0QXR0cmlidXRlKFwiYWN0aW9uXCIpO1xuICAgIGFjdGlvbiA9IGF0dHIgPyBzdHJpcEJhc2VuYW1lKGF0dHIsIGJhc2VuYW1lKSA6IG51bGw7XG4gICAgbWV0aG9kID0gdGFyZ2V0LmdldEF0dHJpYnV0ZShcIm1ldGhvZFwiKSB8fCBkZWZhdWx0TWV0aG9kO1xuICAgIGVuY1R5cGUgPSBnZXRGb3JtRW5jVHlwZSh0YXJnZXQuZ2V0QXR0cmlidXRlKFwiZW5jdHlwZVwiKSkgfHwgZGVmYXVsdEVuY1R5cGU7XG5cbiAgICBmb3JtRGF0YSA9IG5ldyBGb3JtRGF0YSh0YXJnZXQpO1xuICB9IGVsc2UgaWYgKFxuICAgIGlzQnV0dG9uRWxlbWVudCh0YXJnZXQpIHx8XG4gICAgKGlzSW5wdXRFbGVtZW50KHRhcmdldCkgJiZcbiAgICAgICh0YXJnZXQudHlwZSA9PT0gXCJzdWJtaXRcIiB8fCB0YXJnZXQudHlwZSA9PT0gXCJpbWFnZVwiKSlcbiAgKSB7XG4gICAgbGV0IGZvcm0gPSB0YXJnZXQuZm9ybTtcblxuICAgIGlmIChmb3JtID09IG51bGwpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgYENhbm5vdCBzdWJtaXQgYSA8YnV0dG9uPiBvciA8aW5wdXQgdHlwZT1cInN1Ym1pdFwiPiB3aXRob3V0IGEgPGZvcm0+YFxuICAgICAgKTtcbiAgICB9XG5cbiAgICAvLyA8YnV0dG9uPi88aW5wdXQgdHlwZT1cInN1Ym1pdFwiPiBtYXkgb3ZlcnJpZGUgYXR0cmlidXRlcyBvZiA8Zm9ybT5cblxuICAgIC8vIFdoZW4gZ3JhYmJpbmcgdGhlIGFjdGlvbiBmcm9tIHRoZSBlbGVtZW50LCBpdCB3aWxsIGhhdmUgaGFkIHRoZSBiYXNlbmFtZVxuICAgIC8vIHByZWZpeGVkIHRvIGVuc3VyZSBub24tSlMgc2NlbmFyaW9zIHdvcmssIHNvIHN0cmlwIGl0IHNpbmNlIHdlJ2xsXG4gICAgLy8gcmUtcHJlZml4IGluIHRoZSByb3V0ZXJcbiAgICBsZXQgYXR0ciA9IHRhcmdldC5nZXRBdHRyaWJ1dGUoXCJmb3JtYWN0aW9uXCIpIHx8IGZvcm0uZ2V0QXR0cmlidXRlKFwiYWN0aW9uXCIpO1xuICAgIGFjdGlvbiA9IGF0dHIgPyBzdHJpcEJhc2VuYW1lKGF0dHIsIGJhc2VuYW1lKSA6IG51bGw7XG5cbiAgICBtZXRob2QgPVxuICAgICAgdGFyZ2V0LmdldEF0dHJpYnV0ZShcImZvcm1tZXRob2RcIikgfHxcbiAgICAgIGZvcm0uZ2V0QXR0cmlidXRlKFwibWV0aG9kXCIpIHx8XG4gICAgICBkZWZhdWx0TWV0aG9kO1xuICAgIGVuY1R5cGUgPVxuICAgICAgZ2V0Rm9ybUVuY1R5cGUodGFyZ2V0LmdldEF0dHJpYnV0ZShcImZvcm1lbmN0eXBlXCIpKSB8fFxuICAgICAgZ2V0Rm9ybUVuY1R5cGUoZm9ybS5nZXRBdHRyaWJ1dGUoXCJlbmN0eXBlXCIpKSB8fFxuICAgICAgZGVmYXVsdEVuY1R5cGU7XG5cbiAgICAvLyBCdWlsZCBhIEZvcm1EYXRhIG9iamVjdCBwb3B1bGF0ZWQgZnJvbSBhIGZvcm0gYW5kIHN1Ym1pdHRlclxuICAgIGZvcm1EYXRhID0gbmV3IEZvcm1EYXRhKGZvcm0sIHRhcmdldCk7XG5cbiAgICAvLyBJZiB0aGlzIGJyb3dzZXIgZG9lc24ndCBzdXBwb3J0IHRoZSBgRm9ybURhdGEoZWwsIHN1Ym1pdHRlcilgIGZvcm1hdCxcbiAgICAvLyB0aGVuIHRhY2sgb24gdGhlIHN1Ym1pdHRlciB2YWx1ZSBhdCB0aGUgZW5kLiAgVGhpcyBpcyBhIGxpZ2h0d2VpZ2h0XG4gICAgLy8gc29sdXRpb24gdGhhdCBpcyBub3QgMTAwJSBzcGVjIGNvbXBsaWFudC4gIEZvciBjb21wbGV0ZSBzdXBwb3J0IGluIG9sZGVyXG4gICAgLy8gYnJvd3NlcnMsIGNvbnNpZGVyIHVzaW5nIHRoZSBgZm9ybWRhdGEtc3VibWl0dGVyLXBvbHlmaWxsYCBwYWNrYWdlXG4gICAgaWYgKCFpc0Zvcm1EYXRhU3VibWl0dGVyU3VwcG9ydGVkKCkpIHtcbiAgICAgIGxldCB7IG5hbWUsIHR5cGUsIHZhbHVlIH0gPSB0YXJnZXQ7XG4gICAgICBpZiAodHlwZSA9PT0gXCJpbWFnZVwiKSB7XG4gICAgICAgIGxldCBwcmVmaXggPSBuYW1lID8gYCR7bmFtZX0uYCA6IFwiXCI7XG4gICAgICAgIGZvcm1EYXRhLmFwcGVuZChgJHtwcmVmaXh9eGAsIFwiMFwiKTtcbiAgICAgICAgZm9ybURhdGEuYXBwZW5kKGAke3ByZWZpeH15YCwgXCIwXCIpO1xuICAgICAgfSBlbHNlIGlmIChuYW1lKSB7XG4gICAgICAgIGZvcm1EYXRhLmFwcGVuZChuYW1lLCB2YWx1ZSk7XG4gICAgICB9XG4gICAgfVxuICB9IGVsc2UgaWYgKGlzSHRtbEVsZW1lbnQodGFyZ2V0KSkge1xuICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgIGBDYW5ub3Qgc3VibWl0IGVsZW1lbnQgdGhhdCBpcyBub3QgPGZvcm0+LCA8YnV0dG9uPiwgb3IgYCArXG4gICAgICAgIGA8aW5wdXQgdHlwZT1cInN1Ym1pdHxpbWFnZVwiPmBcbiAgICApO1xuICB9IGVsc2Uge1xuICAgIG1ldGhvZCA9IGRlZmF1bHRNZXRob2Q7XG4gICAgYWN0aW9uID0gbnVsbDtcbiAgICBlbmNUeXBlID0gZGVmYXVsdEVuY1R5cGU7XG4gICAgYm9keSA9IHRhcmdldDtcbiAgfVxuXG4gIC8vIFNlbmQgYm9keSBmb3IgPEZvcm0gZW5jVHlwZT1cInRleHQvcGxhaW5cIiBzbyB3ZSBlbmNvZGUgaXQgaW50byB0ZXh0XG4gIGlmIChmb3JtRGF0YSAmJiBlbmNUeXBlID09PSBcInRleHQvcGxhaW5cIikge1xuICAgIGJvZHkgPSBmb3JtRGF0YTtcbiAgICBmb3JtRGF0YSA9IHVuZGVmaW5lZDtcbiAgfVxuXG4gIHJldHVybiB7IGFjdGlvbiwgbWV0aG9kOiBtZXRob2QudG9Mb3dlckNhc2UoKSwgZW5jVHlwZSwgZm9ybURhdGEsIGJvZHkgfTtcbn1cbiIsIi8qKlxuICogTk9URTogSWYgeW91IHJlZmFjdG9yIHRoaXMgdG8gc3BsaXQgdXAgdGhlIG1vZHVsZXMgaW50byBzZXBhcmF0ZSBmaWxlcyxcbiAqIHlvdSdsbCBuZWVkIHRvIHVwZGF0ZSB0aGUgcm9sbHVwIGNvbmZpZyBmb3IgcmVhY3Qtcm91dGVyLWRvbS12NS1jb21wYXQuXG4gKi9cbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0ICogYXMgUmVhY3RET00gZnJvbSBcInJlYWN0LWRvbVwiO1xuaW1wb3J0IHR5cGUge1xuICBEYXRhUm91dGVPYmplY3QsXG4gIEZ1dHVyZUNvbmZpZyxcbiAgTG9jYXRpb24sXG4gIE5hdmlnYXRlT3B0aW9ucyxcbiAgTmF2aWdhdGlvblR5cGUsXG4gIE5hdmlnYXRvcixcbiAgUmVsYXRpdmVSb3V0aW5nVHlwZSxcbiAgUm91dGVPYmplY3QsXG4gIFJvdXRlclByb3ZpZGVyUHJvcHMsXG4gIFRvLFxufSBmcm9tIFwicmVhY3Qtcm91dGVyXCI7XG5pbXBvcnQge1xuICBSb3V0ZXIsXG4gIGNyZWF0ZVBhdGgsXG4gIHVzZUhyZWYsXG4gIHVzZUxvY2F0aW9uLFxuICB1c2VNYXRjaGVzLFxuICB1c2VOYXZpZ2F0ZSxcbiAgdXNlTmF2aWdhdGlvbixcbiAgdXNlUmVzb2x2ZWRQYXRoLFxuICB1c2VCbG9ja2VyLFxuICBVTlNBRkVfRGF0YVJvdXRlckNvbnRleHQgYXMgRGF0YVJvdXRlckNvbnRleHQsXG4gIFVOU0FGRV9EYXRhUm91dGVyU3RhdGVDb250ZXh0IGFzIERhdGFSb3V0ZXJTdGF0ZUNvbnRleHQsXG4gIFVOU0FGRV9OYXZpZ2F0aW9uQ29udGV4dCBhcyBOYXZpZ2F0aW9uQ29udGV4dCxcbiAgVU5TQUZFX1JvdXRlQ29udGV4dCBhcyBSb3V0ZUNvbnRleHQsXG4gIFVOU0FGRV9tYXBSb3V0ZVByb3BlcnRpZXMgYXMgbWFwUm91dGVQcm9wZXJ0aWVzLFxuICBVTlNBRkVfdXNlUm91dGVJZCBhcyB1c2VSb3V0ZUlkLFxuICBVTlNBRkVfdXNlUm91dGVzSW1wbCBhcyB1c2VSb3V0ZXNJbXBsLFxufSBmcm9tIFwicmVhY3Qtcm91dGVyXCI7XG5pbXBvcnQgdHlwZSB7XG4gIEJyb3dzZXJIaXN0b3J5LFxuICBGZXRjaGVyLFxuICBGb3JtRW5jVHlwZSxcbiAgRm9ybU1ldGhvZCxcbiAgRnV0dXJlQ29uZmlnIGFzIFJvdXRlckZ1dHVyZUNvbmZpZyxcbiAgR2V0U2Nyb2xsUmVzdG9yYXRpb25LZXlGdW5jdGlvbixcbiAgSGFzaEhpc3RvcnksXG4gIEhpc3RvcnksXG4gIEhUTUxGb3JtTWV0aG9kLFxuICBIeWRyYXRpb25TdGF0ZSxcbiAgUm91dGVyIGFzIFJlbWl4Um91dGVyLFxuICBWN19Gb3JtTWV0aG9kLFxuICBSb3V0ZXJTdGF0ZSxcbiAgUm91dGVyU3Vic2NyaWJlcixcbiAgQmxvY2tlckZ1bmN0aW9uLFxufSBmcm9tIFwiQHJlbWl4LXJ1bi9yb3V0ZXJcIjtcbmltcG9ydCB7XG4gIGNyZWF0ZVJvdXRlcixcbiAgY3JlYXRlQnJvd3Nlckhpc3RvcnksXG4gIGNyZWF0ZUhhc2hIaXN0b3J5LFxuICBqb2luUGF0aHMsXG4gIHN0cmlwQmFzZW5hbWUsXG4gIFVOU0FGRV9FcnJvclJlc3BvbnNlSW1wbCBhcyBFcnJvclJlc3BvbnNlSW1wbCxcbiAgVU5TQUZFX2ludmFyaWFudCBhcyBpbnZhcmlhbnQsXG4gIFVOU0FGRV93YXJuaW5nIGFzIHdhcm5pbmcsXG4gIG1hdGNoUGF0aCxcbiAgSURMRV9GRVRDSEVSLFxufSBmcm9tIFwiQHJlbWl4LXJ1bi9yb3V0ZXJcIjtcblxuaW1wb3J0IHR5cGUge1xuICBTdWJtaXRPcHRpb25zLFxuICBQYXJhbUtleVZhbHVlUGFpcixcbiAgVVJMU2VhcmNoUGFyYW1zSW5pdCxcbiAgU3VibWl0VGFyZ2V0LFxufSBmcm9tIFwiLi9kb21cIjtcbmltcG9ydCB7XG4gIGNyZWF0ZVNlYXJjaFBhcmFtcyxcbiAgZGVmYXVsdE1ldGhvZCxcbiAgZ2V0Rm9ybVN1Ym1pc3Npb25JbmZvLFxuICBnZXRTZWFyY2hQYXJhbXNGb3JMb2NhdGlvbixcbiAgc2hvdWxkUHJvY2Vzc0xpbmtDbGljayxcbn0gZnJvbSBcIi4vZG9tXCI7XG5cbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyNyZWdpb24gUmUtZXhwb3J0c1xuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuZXhwb3J0IHR5cGUge1xuICBGb3JtRW5jVHlwZSxcbiAgRm9ybU1ldGhvZCxcbiAgR2V0U2Nyb2xsUmVzdG9yYXRpb25LZXlGdW5jdGlvbixcbiAgUGFyYW1LZXlWYWx1ZVBhaXIsXG4gIFN1Ym1pdE9wdGlvbnMsXG4gIFVSTFNlYXJjaFBhcmFtc0luaXQsXG4gIFY3X0Zvcm1NZXRob2QsXG59O1xuZXhwb3J0IHsgY3JlYXRlU2VhcmNoUGFyYW1zIH07XG5cbi8vIE5vdGU6IEtlZXAgaW4gc3luYyB3aXRoIHJlYWN0LXJvdXRlciBleHBvcnRzIVxuZXhwb3J0IHR5cGUge1xuICBBY3Rpb25GdW5jdGlvbixcbiAgQWN0aW9uRnVuY3Rpb25BcmdzLFxuICBBd2FpdFByb3BzLFxuICBCbG9ja2VyLFxuICBCbG9ja2VyRnVuY3Rpb24sXG4gIERhdGFSb3V0ZU1hdGNoLFxuICBEYXRhUm91dGVPYmplY3QsXG4gIEVycm9yUmVzcG9uc2UsXG4gIEZldGNoZXIsXG4gIEZ1dHVyZUNvbmZpZyxcbiAgSGFzaCxcbiAgSW5kZXhSb3V0ZU9iamVjdCxcbiAgSW5kZXhSb3V0ZVByb3BzLFxuICBKc29uRnVuY3Rpb24sXG4gIExhenlSb3V0ZUZ1bmN0aW9uLFxuICBMYXlvdXRSb3V0ZVByb3BzLFxuICBMb2FkZXJGdW5jdGlvbixcbiAgTG9hZGVyRnVuY3Rpb25BcmdzLFxuICBMb2NhdGlvbixcbiAgTWVtb3J5Um91dGVyUHJvcHMsXG4gIE5hdmlnYXRlRnVuY3Rpb24sXG4gIE5hdmlnYXRlT3B0aW9ucyxcbiAgTmF2aWdhdGVQcm9wcyxcbiAgTmF2aWdhdGlvbixcbiAgTmF2aWdhdG9yLFxuICBOb25JbmRleFJvdXRlT2JqZWN0LFxuICBPdXRsZXRQcm9wcyxcbiAgUGFyYW1zLFxuICBQYXJhbVBhcnNlS2V5LFxuICBQYXRoLFxuICBQYXRoTWF0Y2gsXG4gIFBhdGhuYW1lLFxuICBQYXRoUGFyYW0sXG4gIFBhdGhQYXR0ZXJuLFxuICBQYXRoUm91dGVQcm9wcyxcbiAgUmVkaXJlY3RGdW5jdGlvbixcbiAgUmVsYXRpdmVSb3V0aW5nVHlwZSxcbiAgUm91dGVNYXRjaCxcbiAgUm91dGVPYmplY3QsXG4gIFJvdXRlUHJvcHMsXG4gIFJvdXRlclByb3BzLFxuICBSb3V0ZXJQcm92aWRlclByb3BzLFxuICBSb3V0ZXNQcm9wcyxcbiAgU2VhcmNoLFxuICBTaG91bGRSZXZhbGlkYXRlRnVuY3Rpb24sXG4gIFNob3VsZFJldmFsaWRhdGVGdW5jdGlvbkFyZ3MsXG4gIFRvLFxuICBVSU1hdGNoLFxufSBmcm9tIFwicmVhY3Qtcm91dGVyXCI7XG5leHBvcnQge1xuICBBYm9ydGVkRGVmZXJyZWRFcnJvcixcbiAgQXdhaXQsXG4gIE1lbW9yeVJvdXRlcixcbiAgTmF2aWdhdGUsXG4gIE5hdmlnYXRpb25UeXBlLFxuICBPdXRsZXQsXG4gIFJvdXRlLFxuICBSb3V0ZXIsXG4gIFJvdXRlcyxcbiAgY3JlYXRlTWVtb3J5Um91dGVyLFxuICBjcmVhdGVQYXRoLFxuICBjcmVhdGVSb3V0ZXNGcm9tQ2hpbGRyZW4sXG4gIGNyZWF0ZVJvdXRlc0Zyb21FbGVtZW50cyxcbiAgZGVmZXIsXG4gIGlzUm91dGVFcnJvclJlc3BvbnNlLFxuICBnZW5lcmF0ZVBhdGgsXG4gIGpzb24sXG4gIG1hdGNoUGF0aCxcbiAgbWF0Y2hSb3V0ZXMsXG4gIHBhcnNlUGF0aCxcbiAgcmVkaXJlY3QsXG4gIHJlZGlyZWN0RG9jdW1lbnQsXG4gIHJlbmRlck1hdGNoZXMsXG4gIHJlc29sdmVQYXRoLFxuICB1c2VBY3Rpb25EYXRhLFxuICB1c2VBc3luY0Vycm9yLFxuICB1c2VBc3luY1ZhbHVlLFxuICB1c2VCbG9ja2VyLFxuICB1c2VIcmVmLFxuICB1c2VJblJvdXRlckNvbnRleHQsXG4gIHVzZUxvYWRlckRhdGEsXG4gIHVzZUxvY2F0aW9uLFxuICB1c2VNYXRjaCxcbiAgdXNlTWF0Y2hlcyxcbiAgdXNlTmF2aWdhdGUsXG4gIHVzZU5hdmlnYXRpb24sXG4gIHVzZU5hdmlnYXRpb25UeXBlLFxuICB1c2VPdXRsZXQsXG4gIHVzZU91dGxldENvbnRleHQsXG4gIHVzZVBhcmFtcyxcbiAgdXNlUmVzb2x2ZWRQYXRoLFxuICB1c2VSZXZhbGlkYXRvcixcbiAgdXNlUm91dGVFcnJvcixcbiAgdXNlUm91dGVMb2FkZXJEYXRhLFxuICB1c2VSb3V0ZXMsXG59IGZyb20gXCJyZWFjdC1yb3V0ZXJcIjtcblxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gREFOR0VSISBQTEVBU0UgUkVBRCBNRSFcbi8vIFdlIHByb3ZpZGUgdGhlc2UgZXhwb3J0cyBhcyBhbiBlc2NhcGUgaGF0Y2ggaW4gdGhlIGV2ZW50IHRoYXQgeW91IG5lZWQgYW55XG4vLyByb3V0aW5nIGRhdGEgdGhhdCB3ZSBkb24ndCBwcm92aWRlIGFuIGV4cGxpY2l0IEFQSSBmb3IuIFdpdGggdGhhdCBzYWlkLCB3ZVxuLy8gd2FudCB0byBjb3ZlciB5b3VyIHVzZSBjYXNlIGlmIHdlIGNhbiwgc28gaWYgeW91IGZlZWwgdGhlIG5lZWQgdG8gdXNlIHRoZXNlXG4vLyB3ZSB3YW50IHRvIGhlYXIgZnJvbSB5b3UuIExldCB1cyBrbm93IHdoYXQgeW91J3JlIGJ1aWxkaW5nIGFuZCB3ZSdsbCBkbyBvdXJcbi8vIGJlc3QgdG8gbWFrZSBzdXJlIHdlIGNhbiBzdXBwb3J0IHlvdSFcbi8vXG4vLyBXZSBjb25zaWRlciB0aGVzZSBleHBvcnRzIGFuIGltcGxlbWVudGF0aW9uIGRldGFpbCBhbmQgZG8gbm90IGd1YXJhbnRlZVxuLy8gYWdhaW5zdCBhbnkgYnJlYWtpbmcgY2hhbmdlcywgcmVnYXJkbGVzcyBvZiB0aGUgc2VtdmVyIHJlbGVhc2UuIFVzZSB3aXRoXG4vLyBleHRyZW1lIGNhdXRpb24gYW5kIG9ubHkgaWYgeW91IHVuZGVyc3RhbmQgdGhlIGNvbnNlcXVlbmNlcy4gR29kc3BlZWQuXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cbi8qKiBAaW50ZXJuYWwgKi9cbmV4cG9ydCB7XG4gIFVOU0FGRV9EYXRhUm91dGVyQ29udGV4dCxcbiAgVU5TQUZFX0RhdGFSb3V0ZXJTdGF0ZUNvbnRleHQsXG4gIFVOU0FGRV9OYXZpZ2F0aW9uQ29udGV4dCxcbiAgVU5TQUZFX0xvY2F0aW9uQ29udGV4dCxcbiAgVU5TQUZFX1JvdXRlQ29udGV4dCxcbiAgVU5TQUZFX3VzZVJvdXRlSWQsXG59IGZyb20gXCJyZWFjdC1yb3V0ZXJcIjtcbi8vI2VuZHJlZ2lvblxuXG5kZWNsYXJlIGdsb2JhbCB7XG4gIHZhciBfX3N0YXRpY1JvdXRlckh5ZHJhdGlvbkRhdGE6IEh5ZHJhdGlvblN0YXRlIHwgdW5kZWZpbmVkO1xuICB2YXIgX19yZWFjdFJvdXRlclZlcnNpb246IHN0cmluZztcbiAgaW50ZXJmYWNlIERvY3VtZW50IHtcbiAgICBzdGFydFZpZXdUcmFuc2l0aW9uKGNiOiAoKSA9PiBQcm9taXNlPHZvaWQ+IHwgdm9pZCk6IFZpZXdUcmFuc2l0aW9uO1xuICB9XG59XG5cbi8vIEhFWSBZT1UhIERPTidUIFRPVUNIIFRISVMgVkFSSUFCTEUhXG4vL1xuLy8gSXQgaXMgcmVwbGFjZWQgd2l0aCB0aGUgcHJvcGVyIHZlcnNpb24gYXQgYnVpbGQgdGltZSB2aWEgYSBiYWJlbCBwbHVnaW4gaW5cbi8vIHRoZSByb2xsdXAgY29uZmlnLlxuLy9cbi8vIEV4cG9ydCBhIGdsb2JhbCBwcm9wZXJ0eSBvbnRvIHRoZSB3aW5kb3cgZm9yIFJlYWN0IFJvdXRlciBkZXRlY3Rpb24gYnkgdGhlXG4vLyBDb3JlIFdlYiBWaXRhbHMgVGVjaG5vbG9neSBSZXBvcnQuICBUaGlzIHdheSB0aGV5IGNhbiBjb25maWd1cmUgdGhlIGB3YXBwYWx5emVyYFxuLy8gdG8gZGV0ZWN0IGFuZCBwcm9wZXJseSBjbGFzc2lmeSBsaXZlIHdlYnNpdGVzIGFzIGJlaW5nIGJ1aWx0IHdpdGggUmVhY3QgUm91dGVyOlxuLy8gaHR0cHM6Ly9naXRodWIuY29tL0hUVFBBcmNoaXZlL3dhcHBhbHl6ZXIvYmxvYi9tYWluL3NyYy90ZWNobm9sb2dpZXMvci5qc29uXG5jb25zdCBSRUFDVF9ST1VURVJfVkVSU0lPTiA9IFwiMFwiO1xudHJ5IHtcbiAgd2luZG93Ll9fcmVhY3RSb3V0ZXJWZXJzaW9uID0gUkVBQ1RfUk9VVEVSX1ZFUlNJT047XG59IGNhdGNoIChlKSB7XG4gIC8vIG5vLW9wXG59XG5cbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyNyZWdpb24gUm91dGVyc1xuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuaW50ZXJmYWNlIERPTVJvdXRlck9wdHMge1xuICBiYXNlbmFtZT86IHN0cmluZztcbiAgZnV0dXJlPzogUGFydGlhbDxPbWl0PFJvdXRlckZ1dHVyZUNvbmZpZywgXCJ2N19wcmVwZW5kQmFzZW5hbWVcIj4+O1xuICBoeWRyYXRpb25EYXRhPzogSHlkcmF0aW9uU3RhdGU7XG4gIHdpbmRvdz86IFdpbmRvdztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUJyb3dzZXJSb3V0ZXIoXG4gIHJvdXRlczogUm91dGVPYmplY3RbXSxcbiAgb3B0cz86IERPTVJvdXRlck9wdHNcbik6IFJlbWl4Um91dGVyIHtcbiAgcmV0dXJuIGNyZWF0ZVJvdXRlcih7XG4gICAgYmFzZW5hbWU6IG9wdHM/LmJhc2VuYW1lLFxuICAgIGZ1dHVyZToge1xuICAgICAgLi4ub3B0cz8uZnV0dXJlLFxuICAgICAgdjdfcHJlcGVuZEJhc2VuYW1lOiB0cnVlLFxuICAgIH0sXG4gICAgaGlzdG9yeTogY3JlYXRlQnJvd3Nlckhpc3RvcnkoeyB3aW5kb3c6IG9wdHM/LndpbmRvdyB9KSxcbiAgICBoeWRyYXRpb25EYXRhOiBvcHRzPy5oeWRyYXRpb25EYXRhIHx8IHBhcnNlSHlkcmF0aW9uRGF0YSgpLFxuICAgIHJvdXRlcyxcbiAgICBtYXBSb3V0ZVByb3BlcnRpZXMsXG4gICAgd2luZG93OiBvcHRzPy53aW5kb3csXG4gIH0pLmluaXRpYWxpemUoKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUhhc2hSb3V0ZXIoXG4gIHJvdXRlczogUm91dGVPYmplY3RbXSxcbiAgb3B0cz86IERPTVJvdXRlck9wdHNcbik6IFJlbWl4Um91dGVyIHtcbiAgcmV0dXJuIGNyZWF0ZVJvdXRlcih7XG4gICAgYmFzZW5hbWU6IG9wdHM/LmJhc2VuYW1lLFxuICAgIGZ1dHVyZToge1xuICAgICAgLi4ub3B0cz8uZnV0dXJlLFxuICAgICAgdjdfcHJlcGVuZEJhc2VuYW1lOiB0cnVlLFxuICAgIH0sXG4gICAgaGlzdG9yeTogY3JlYXRlSGFzaEhpc3RvcnkoeyB3aW5kb3c6IG9wdHM/LndpbmRvdyB9KSxcbiAgICBoeWRyYXRpb25EYXRhOiBvcHRzPy5oeWRyYXRpb25EYXRhIHx8IHBhcnNlSHlkcmF0aW9uRGF0YSgpLFxuICAgIHJvdXRlcyxcbiAgICBtYXBSb3V0ZVByb3BlcnRpZXMsXG4gICAgd2luZG93OiBvcHRzPy53aW5kb3csXG4gIH0pLmluaXRpYWxpemUoKTtcbn1cblxuZnVuY3Rpb24gcGFyc2VIeWRyYXRpb25EYXRhKCk6IEh5ZHJhdGlvblN0YXRlIHwgdW5kZWZpbmVkIHtcbiAgbGV0IHN0YXRlID0gd2luZG93Py5fX3N0YXRpY1JvdXRlckh5ZHJhdGlvbkRhdGE7XG4gIGlmIChzdGF0ZSAmJiBzdGF0ZS5lcnJvcnMpIHtcbiAgICBzdGF0ZSA9IHtcbiAgICAgIC4uLnN0YXRlLFxuICAgICAgZXJyb3JzOiBkZXNlcmlhbGl6ZUVycm9ycyhzdGF0ZS5lcnJvcnMpLFxuICAgIH07XG4gIH1cbiAgcmV0dXJuIHN0YXRlO1xufVxuXG5mdW5jdGlvbiBkZXNlcmlhbGl6ZUVycm9ycyhcbiAgZXJyb3JzOiBSZW1peFJvdXRlcltcInN0YXRlXCJdW1wiZXJyb3JzXCJdXG4pOiBSZW1peFJvdXRlcltcInN0YXRlXCJdW1wiZXJyb3JzXCJdIHtcbiAgaWYgKCFlcnJvcnMpIHJldHVybiBudWxsO1xuICBsZXQgZW50cmllcyA9IE9iamVjdC5lbnRyaWVzKGVycm9ycyk7XG4gIGxldCBzZXJpYWxpemVkOiBSZW1peFJvdXRlcltcInN0YXRlXCJdW1wiZXJyb3JzXCJdID0ge307XG4gIGZvciAobGV0IFtrZXksIHZhbF0gb2YgZW50cmllcykge1xuICAgIC8vIEhleSB5b3UhICBJZiB5b3UgY2hhbmdlIHRoaXMsIHBsZWFzZSBjaGFuZ2UgdGhlIGNvcnJlc3BvbmRpbmcgbG9naWMgaW5cbiAgICAvLyBzZXJpYWxpemVFcnJvcnMgaW4gcmVhY3Qtcm91dGVyLWRvbS9zZXJ2ZXIudHN4IDopXG4gICAgaWYgKHZhbCAmJiB2YWwuX190eXBlID09PSBcIlJvdXRlRXJyb3JSZXNwb25zZVwiKSB7XG4gICAgICBzZXJpYWxpemVkW2tleV0gPSBuZXcgRXJyb3JSZXNwb25zZUltcGwoXG4gICAgICAgIHZhbC5zdGF0dXMsXG4gICAgICAgIHZhbC5zdGF0dXNUZXh0LFxuICAgICAgICB2YWwuZGF0YSxcbiAgICAgICAgdmFsLmludGVybmFsID09PSB0cnVlXG4gICAgICApO1xuICAgIH0gZWxzZSBpZiAodmFsICYmIHZhbC5fX3R5cGUgPT09IFwiRXJyb3JcIikge1xuICAgICAgLy8gQXR0ZW1wdCB0byByZWNvbnN0cnVjdCB0aGUgcmlnaHQgdHlwZSBvZiBFcnJvciAoaS5lLiwgUmVmZXJlbmNlRXJyb3IpXG4gICAgICBpZiAodmFsLl9fc3ViVHlwZSkge1xuICAgICAgICBsZXQgRXJyb3JDb25zdHJ1Y3RvciA9IHdpbmRvd1t2YWwuX19zdWJUeXBlXTtcbiAgICAgICAgaWYgKHR5cGVvZiBFcnJvckNvbnN0cnVjdG9yID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvclxuICAgICAgICAgICAgbGV0IGVycm9yID0gbmV3IEVycm9yQ29uc3RydWN0b3IodmFsLm1lc3NhZ2UpO1xuICAgICAgICAgICAgLy8gV2lwZSBhd2F5IHRoZSBjbGllbnQtc2lkZSBzdGFjayB0cmFjZS4gIE5vdGhpbmcgdG8gZmlsbCBpdCBpbiB3aXRoXG4gICAgICAgICAgICAvLyBiZWNhdXNlIHdlIGRvbid0IHNlcmlhbGl6ZSBTU1Igc3RhY2sgdHJhY2VzIGZvciBzZWN1cml0eSByZWFzb25zXG4gICAgICAgICAgICBlcnJvci5zdGFjayA9IFwiXCI7XG4gICAgICAgICAgICBzZXJpYWxpemVkW2tleV0gPSBlcnJvcjtcbiAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAvLyBuby1vcCAtIGZhbGwgdGhyb3VnaCBhbmQgY3JlYXRlIGEgbm9ybWFsIEVycm9yXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChzZXJpYWxpemVkW2tleV0gPT0gbnVsbCkge1xuICAgICAgICBsZXQgZXJyb3IgPSBuZXcgRXJyb3IodmFsLm1lc3NhZ2UpO1xuICAgICAgICAvLyBXaXBlIGF3YXkgdGhlIGNsaWVudC1zaWRlIHN0YWNrIHRyYWNlLiAgTm90aGluZyB0byBmaWxsIGl0IGluIHdpdGhcbiAgICAgICAgLy8gYmVjYXVzZSB3ZSBkb24ndCBzZXJpYWxpemUgU1NSIHN0YWNrIHRyYWNlcyBmb3Igc2VjdXJpdHkgcmVhc29uc1xuICAgICAgICBlcnJvci5zdGFjayA9IFwiXCI7XG4gICAgICAgIHNlcmlhbGl6ZWRba2V5XSA9IGVycm9yO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBzZXJpYWxpemVkW2tleV0gPSB2YWw7XG4gICAgfVxuICB9XG4gIHJldHVybiBzZXJpYWxpemVkO1xufVxuXG4vLyNlbmRyZWdpb25cblxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbi8vI3JlZ2lvbiBDb250ZXh0c1xuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxudHlwZSBWaWV3VHJhbnNpdGlvbkNvbnRleHRPYmplY3QgPVxuICB8IHtcbiAgICAgIGlzVHJhbnNpdGlvbmluZzogZmFsc2U7XG4gICAgfVxuICB8IHtcbiAgICAgIGlzVHJhbnNpdGlvbmluZzogdHJ1ZTtcbiAgICAgIGZsdXNoU3luYzogYm9vbGVhbjtcbiAgICAgIGN1cnJlbnRMb2NhdGlvbjogTG9jYXRpb247XG4gICAgICBuZXh0TG9jYXRpb246IExvY2F0aW9uO1xuICAgIH07XG5cbmNvbnN0IFZpZXdUcmFuc2l0aW9uQ29udGV4dCA9IFJlYWN0LmNyZWF0ZUNvbnRleHQ8Vmlld1RyYW5zaXRpb25Db250ZXh0T2JqZWN0Pih7XG4gIGlzVHJhbnNpdGlvbmluZzogZmFsc2UsXG59KTtcbmlmIChfX0RFVl9fKSB7XG4gIFZpZXdUcmFuc2l0aW9uQ29udGV4dC5kaXNwbGF5TmFtZSA9IFwiVmlld1RyYW5zaXRpb25cIjtcbn1cblxuZXhwb3J0IHsgVmlld1RyYW5zaXRpb25Db250ZXh0IGFzIFVOU0FGRV9WaWV3VHJhbnNpdGlvbkNvbnRleHQgfTtcblxuLy8gVE9ETzogKHY3KSBDaGFuZ2UgdGhlIHVzZUZldGNoZXIgZGF0YSBmcm9tIGBhbnlgIHRvIGB1bmtub3duYFxudHlwZSBGZXRjaGVyc0NvbnRleHRPYmplY3QgPSBNYXA8c3RyaW5nLCBhbnk+O1xuXG5jb25zdCBGZXRjaGVyc0NvbnRleHQgPSBSZWFjdC5jcmVhdGVDb250ZXh0PEZldGNoZXJzQ29udGV4dE9iamVjdD4obmV3IE1hcCgpKTtcbmlmIChfX0RFVl9fKSB7XG4gIEZldGNoZXJzQ29udGV4dC5kaXNwbGF5TmFtZSA9IFwiRmV0Y2hlcnNcIjtcbn1cblxuZXhwb3J0IHsgRmV0Y2hlcnNDb250ZXh0IGFzIFVOU0FGRV9GZXRjaGVyc0NvbnRleHQgfTtcblxuLy8jZW5kcmVnaW9uXG5cbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyNyZWdpb24gQ29tcG9uZW50c1xuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuLyoqXG4gIFdlYnBhY2sgKyBSZWFjdCAxNyBmYWlscyB0byBjb21waWxlIG9uIGFueSBvZiB0aGUgZm9sbG93aW5nIGJlY2F1c2Ugd2VicGFja1xuICBjb21wbGFpbnMgdGhhdCBgc3RhcnRUcmFuc2l0aW9uYCBkb2Vzbid0IGV4aXN0IGluIGBSZWFjdGA6XG4gICogaW1wb3J0IHsgc3RhcnRUcmFuc2l0aW9uIH0gZnJvbSBcInJlYWN0XCJcbiAgKiBpbXBvcnQgKiBhcyBSZWFjdCBmcm9tIGZyb20gXCJyZWFjdFwiO1xuICAgIFwic3RhcnRUcmFuc2l0aW9uXCIgaW4gUmVhY3QgPyBSZWFjdC5zdGFydFRyYW5zaXRpb24oKCkgPT4gc2V0U3RhdGUoKSkgOiBzZXRTdGF0ZSgpXG4gICogaW1wb3J0ICogYXMgUmVhY3QgZnJvbSBmcm9tIFwicmVhY3RcIjtcbiAgICBcInN0YXJ0VHJhbnNpdGlvblwiIGluIFJlYWN0ID8gUmVhY3RbXCJzdGFydFRyYW5zaXRpb25cIl0oKCkgPT4gc2V0U3RhdGUoKSkgOiBzZXRTdGF0ZSgpXG5cbiAgTW92aW5nIGl0IHRvIGEgY29uc3RhbnQgc3VjaCBhcyB0aGUgZm9sbG93aW5nIHNvbHZlcyB0aGUgV2VicGFjay9SZWFjdCAxNyBpc3N1ZTpcbiAgKiBpbXBvcnQgKiBhcyBSZWFjdCBmcm9tIGZyb20gXCJyZWFjdFwiO1xuICAgIGNvbnN0IFNUQVJUX1RSQU5TSVRJT04gPSBcInN0YXJ0VHJhbnNpdGlvblwiO1xuICAgIFNUQVJUX1RSQU5TSVRJT04gaW4gUmVhY3QgPyBSZWFjdFtTVEFSVF9UUkFOU0lUSU9OXSgoKSA9PiBzZXRTdGF0ZSgpKSA6IHNldFN0YXRlKClcblxuICBIb3dldmVyLCB0aGF0IGludHJvZHVjZXMgd2VicGFjay90ZXJzZXIgbWluaWZpY2F0aW9uIGlzc3VlcyBpbiBwcm9kdWN0aW9uIGJ1aWxkc1xuICBpbiBSZWFjdCAxOCB3aGVyZSBtaW5pZmljYXRpb24vb2JmdXNjYXRpb24gZW5kcyB1cCByZW1vdmluZyB0aGUgY2FsbCBvZlxuICBSZWFjdC5zdGFydFRyYW5zaXRpb24gZW50aXJlbHkgZnJvbSB0aGUgZmlyc3QgaGFsZiBvZiB0aGUgdGVybmFyeS4gIEdyYWJiaW5nXG4gIHRoaXMgZXhwb3J0ZWQgcmVmZXJlbmNlIG9uY2UgdXAgZnJvbnQgcmVzb2x2ZXMgdGhhdCBpc3N1ZS5cblxuICBTZWUgaHR0cHM6Ly9naXRodWIuY29tL3JlbWl4LXJ1bi9yZWFjdC1yb3V0ZXIvaXNzdWVzLzEwNTc5XG4qL1xuY29uc3QgU1RBUlRfVFJBTlNJVElPTiA9IFwic3RhcnRUcmFuc2l0aW9uXCI7XG5jb25zdCBzdGFydFRyYW5zaXRpb25JbXBsID0gUmVhY3RbU1RBUlRfVFJBTlNJVElPTl07XG5jb25zdCBGTFVTSF9TWU5DID0gXCJmbHVzaFN5bmNcIjtcbmNvbnN0IGZsdXNoU3luY0ltcGwgPSBSZWFjdERPTVtGTFVTSF9TWU5DXTtcbmNvbnN0IFVTRV9JRCA9IFwidXNlSWRcIjtcbmNvbnN0IHVzZUlkSW1wbCA9IFJlYWN0W1VTRV9JRF07XG5cbmZ1bmN0aW9uIHN0YXJ0VHJhbnNpdGlvblNhZmUoY2I6ICgpID0+IHZvaWQpIHtcbiAgaWYgKHN0YXJ0VHJhbnNpdGlvbkltcGwpIHtcbiAgICBzdGFydFRyYW5zaXRpb25JbXBsKGNiKTtcbiAgfSBlbHNlIHtcbiAgICBjYigpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGZsdXNoU3luY1NhZmUoY2I6ICgpID0+IHZvaWQpIHtcbiAgaWYgKGZsdXNoU3luY0ltcGwpIHtcbiAgICBmbHVzaFN5bmNJbXBsKGNiKTtcbiAgfSBlbHNlIHtcbiAgICBjYigpO1xuICB9XG59XG5cbmludGVyZmFjZSBWaWV3VHJhbnNpdGlvbiB7XG4gIGZpbmlzaGVkOiBQcm9taXNlPHZvaWQ+O1xuICByZWFkeTogUHJvbWlzZTx2b2lkPjtcbiAgdXBkYXRlQ2FsbGJhY2tEb25lOiBQcm9taXNlPHZvaWQ+O1xuICBza2lwVHJhbnNpdGlvbigpOiB2b2lkO1xufVxuXG5jbGFzcyBEZWZlcnJlZDxUPiB7XG4gIHN0YXR1czogXCJwZW5kaW5nXCIgfCBcInJlc29sdmVkXCIgfCBcInJlamVjdGVkXCIgPSBcInBlbmRpbmdcIjtcbiAgcHJvbWlzZTogUHJvbWlzZTxUPjtcbiAgLy8gQHRzLWV4cGVjdC1lcnJvciAtIG5vIGluaXRpYWxpemVyXG4gIHJlc29sdmU6ICh2YWx1ZTogVCkgPT4gdm9pZDtcbiAgLy8gQHRzLWV4cGVjdC1lcnJvciAtIG5vIGluaXRpYWxpemVyXG4gIHJlamVjdDogKHJlYXNvbj86IHVua25vd24pID0+IHZvaWQ7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMucHJvbWlzZSA9IG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIHRoaXMucmVzb2x2ZSA9ICh2YWx1ZSkgPT4ge1xuICAgICAgICBpZiAodGhpcy5zdGF0dXMgPT09IFwicGVuZGluZ1wiKSB7XG4gICAgICAgICAgdGhpcy5zdGF0dXMgPSBcInJlc29sdmVkXCI7XG4gICAgICAgICAgcmVzb2x2ZSh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgICB0aGlzLnJlamVjdCA9IChyZWFzb24pID0+IHtcbiAgICAgICAgaWYgKHRoaXMuc3RhdHVzID09PSBcInBlbmRpbmdcIikge1xuICAgICAgICAgIHRoaXMuc3RhdHVzID0gXCJyZWplY3RlZFwiO1xuICAgICAgICAgIHJlamVjdChyZWFzb24pO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH0pO1xuICB9XG59XG5cbi8qKlxuICogR2l2ZW4gYSBSZW1peCBSb3V0ZXIgaW5zdGFuY2UsIHJlbmRlciB0aGUgYXBwcm9wcmlhdGUgVUlcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIFJvdXRlclByb3ZpZGVyKHtcbiAgZmFsbGJhY2tFbGVtZW50LFxuICByb3V0ZXIsXG4gIGZ1dHVyZSxcbn06IFJvdXRlclByb3ZpZGVyUHJvcHMpOiBSZWFjdC5SZWFjdEVsZW1lbnQge1xuICBsZXQgW3N0YXRlLCBzZXRTdGF0ZUltcGxdID0gUmVhY3QudXNlU3RhdGUocm91dGVyLnN0YXRlKTtcbiAgbGV0IFtwZW5kaW5nU3RhdGUsIHNldFBlbmRpbmdTdGF0ZV0gPSBSZWFjdC51c2VTdGF0ZTxSb3V0ZXJTdGF0ZT4oKTtcbiAgbGV0IFt2dENvbnRleHQsIHNldFZ0Q29udGV4dF0gPSBSZWFjdC51c2VTdGF0ZTxWaWV3VHJhbnNpdGlvbkNvbnRleHRPYmplY3Q+KHtcbiAgICBpc1RyYW5zaXRpb25pbmc6IGZhbHNlLFxuICB9KTtcbiAgbGV0IFtyZW5kZXJEZmQsIHNldFJlbmRlckRmZF0gPSBSZWFjdC51c2VTdGF0ZTxEZWZlcnJlZDx2b2lkPj4oKTtcbiAgbGV0IFt0cmFuc2l0aW9uLCBzZXRUcmFuc2l0aW9uXSA9IFJlYWN0LnVzZVN0YXRlPFZpZXdUcmFuc2l0aW9uPigpO1xuICBsZXQgW2ludGVycnVwdGlvbiwgc2V0SW50ZXJydXB0aW9uXSA9IFJlYWN0LnVzZVN0YXRlPHtcbiAgICBzdGF0ZTogUm91dGVyU3RhdGU7XG4gICAgY3VycmVudExvY2F0aW9uOiBMb2NhdGlvbjtcbiAgICBuZXh0TG9jYXRpb246IExvY2F0aW9uO1xuICB9PigpO1xuICBsZXQgZmV0Y2hlckRhdGEgPSBSZWFjdC51c2VSZWY8TWFwPHN0cmluZywgYW55Pj4obmV3IE1hcCgpKTtcbiAgbGV0IHsgdjdfc3RhcnRUcmFuc2l0aW9uIH0gPSBmdXR1cmUgfHwge307XG5cbiAgbGV0IG9wdEluU3RhcnRUcmFuc2l0aW9uID0gUmVhY3QudXNlQ2FsbGJhY2soXG4gICAgKGNiOiAoKSA9PiB2b2lkKSA9PiB7XG4gICAgICBpZiAodjdfc3RhcnRUcmFuc2l0aW9uKSB7XG4gICAgICAgIHN0YXJ0VHJhbnNpdGlvblNhZmUoY2IpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY2IoKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIFt2N19zdGFydFRyYW5zaXRpb25dXG4gICk7XG5cbiAgbGV0IHNldFN0YXRlID0gUmVhY3QudXNlQ2FsbGJhY2s8Um91dGVyU3Vic2NyaWJlcj4oXG4gICAgKFxuICAgICAgbmV3U3RhdGU6IFJvdXRlclN0YXRlLFxuICAgICAge1xuICAgICAgICBkZWxldGVkRmV0Y2hlcnMsXG4gICAgICAgIHVuc3RhYmxlX2ZsdXNoU3luYzogZmx1c2hTeW5jLFxuICAgICAgICB1bnN0YWJsZV92aWV3VHJhbnNpdGlvbk9wdHM6IHZpZXdUcmFuc2l0aW9uT3B0cyxcbiAgICAgIH1cbiAgICApID0+IHtcbiAgICAgIGRlbGV0ZWRGZXRjaGVycy5mb3JFYWNoKChrZXkpID0+IGZldGNoZXJEYXRhLmN1cnJlbnQuZGVsZXRlKGtleSkpO1xuICAgICAgbmV3U3RhdGUuZmV0Y2hlcnMuZm9yRWFjaCgoZmV0Y2hlciwga2V5KSA9PiB7XG4gICAgICAgIGlmIChmZXRjaGVyLmRhdGEgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIGZldGNoZXJEYXRhLmN1cnJlbnQuc2V0KGtleSwgZmV0Y2hlci5kYXRhKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAgIGxldCBpc1ZpZXdUcmFuc2l0aW9uVW5hdmFpbGFibGUgPVxuICAgICAgICByb3V0ZXIud2luZG93ID09IG51bGwgfHxcbiAgICAgICAgdHlwZW9mIHJvdXRlci53aW5kb3cuZG9jdW1lbnQuc3RhcnRWaWV3VHJhbnNpdGlvbiAhPT0gXCJmdW5jdGlvblwiO1xuXG4gICAgICAvLyBJZiB0aGlzIGlzbid0IGEgdmlldyB0cmFuc2l0aW9uIG9yIGl0J3Mgbm90IGF2YWlsYWJsZSBpbiB0aGlzIGJyb3dzZXIsXG4gICAgICAvLyBqdXN0IHVwZGF0ZSBhbmQgYmUgZG9uZSB3aXRoIGl0XG4gICAgICBpZiAoIXZpZXdUcmFuc2l0aW9uT3B0cyB8fCBpc1ZpZXdUcmFuc2l0aW9uVW5hdmFpbGFibGUpIHtcbiAgICAgICAgaWYgKGZsdXNoU3luYykge1xuICAgICAgICAgIGZsdXNoU3luY1NhZmUoKCkgPT4gc2V0U3RhdGVJbXBsKG5ld1N0YXRlKSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgb3B0SW5TdGFydFRyYW5zaXRpb24oKCkgPT4gc2V0U3RhdGVJbXBsKG5ld1N0YXRlKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICAvLyBmbHVzaFN5bmMgKyBzdGFydFZpZXdUcmFuc2l0aW9uXG4gICAgICBpZiAoZmx1c2hTeW5jKSB7XG4gICAgICAgIC8vIEZsdXNoIHRocm91Z2ggdGhlIGNvbnRleHQgdG8gbWFyayBET00gZWxlbWVudHMgYXMgdHJhbnNpdGlvbj1pbmdcbiAgICAgICAgZmx1c2hTeW5jU2FmZSgoKSA9PiB7XG4gICAgICAgICAgLy8gQ2FuY2VsIGFueSBwZW5kaW5nIHRyYW5zaXRpb25zXG4gICAgICAgICAgaWYgKHRyYW5zaXRpb24pIHtcbiAgICAgICAgICAgIHJlbmRlckRmZCAmJiByZW5kZXJEZmQucmVzb2x2ZSgpO1xuICAgICAgICAgICAgdHJhbnNpdGlvbi5za2lwVHJhbnNpdGlvbigpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBzZXRWdENvbnRleHQoe1xuICAgICAgICAgICAgaXNUcmFuc2l0aW9uaW5nOiB0cnVlLFxuICAgICAgICAgICAgZmx1c2hTeW5jOiB0cnVlLFxuICAgICAgICAgICAgY3VycmVudExvY2F0aW9uOiB2aWV3VHJhbnNpdGlvbk9wdHMuY3VycmVudExvY2F0aW9uLFxuICAgICAgICAgICAgbmV4dExvY2F0aW9uOiB2aWV3VHJhbnNpdGlvbk9wdHMubmV4dExvY2F0aW9uLFxuICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcblxuICAgICAgICAvLyBVcGRhdGUgdGhlIERPTVxuICAgICAgICBsZXQgdCA9IHJvdXRlci53aW5kb3chLmRvY3VtZW50LnN0YXJ0Vmlld1RyYW5zaXRpb24oKCkgPT4ge1xuICAgICAgICAgIGZsdXNoU3luY1NhZmUoKCkgPT4gc2V0U3RhdGVJbXBsKG5ld1N0YXRlKSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8vIENsZWFuIHVwIGFmdGVyIHRoZSBhbmltYXRpb24gY29tcGxldGVzXG4gICAgICAgIHQuZmluaXNoZWQuZmluYWxseSgoKSA9PiB7XG4gICAgICAgICAgZmx1c2hTeW5jU2FmZSgoKSA9PiB7XG4gICAgICAgICAgICBzZXRSZW5kZXJEZmQodW5kZWZpbmVkKTtcbiAgICAgICAgICAgIHNldFRyYW5zaXRpb24odW5kZWZpbmVkKTtcbiAgICAgICAgICAgIHNldFBlbmRpbmdTdGF0ZSh1bmRlZmluZWQpO1xuICAgICAgICAgICAgc2V0VnRDb250ZXh0KHsgaXNUcmFuc2l0aW9uaW5nOiBmYWxzZSB9KTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgZmx1c2hTeW5jU2FmZSgoKSA9PiBzZXRUcmFuc2l0aW9uKHQpKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICAvLyBzdGFydFRyYW5zaXRpb24gKyBzdGFydFZpZXdUcmFuc2l0aW9uXG4gICAgICBpZiAodHJhbnNpdGlvbikge1xuICAgICAgICAvLyBJbnRlcnJ1cHRpbmcgYW4gaW4tcHJvZ3Jlc3MgdHJhbnNpdGlvbiwgY2FuY2VsIGFuZCBsZXQgZXZlcnl0aGluZyBmbHVzaFxuICAgICAgICAvLyBvdXQsIGFuZCB0aGVuIGtpY2sgb2ZmIGEgbmV3IHRyYW5zaXRpb24gZnJvbSB0aGUgaW50ZXJydXB0aW9uIHN0YXRlXG4gICAgICAgIHJlbmRlckRmZCAmJiByZW5kZXJEZmQucmVzb2x2ZSgpO1xuICAgICAgICB0cmFuc2l0aW9uLnNraXBUcmFuc2l0aW9uKCk7XG4gICAgICAgIHNldEludGVycnVwdGlvbih7XG4gICAgICAgICAgc3RhdGU6IG5ld1N0YXRlLFxuICAgICAgICAgIGN1cnJlbnRMb2NhdGlvbjogdmlld1RyYW5zaXRpb25PcHRzLmN1cnJlbnRMb2NhdGlvbixcbiAgICAgICAgICBuZXh0TG9jYXRpb246IHZpZXdUcmFuc2l0aW9uT3B0cy5uZXh0TG9jYXRpb24sXG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gQ29tcGxldGVkIG5hdmlnYXRpb24gdXBkYXRlIHdpdGggb3B0ZWQtaW4gdmlldyB0cmFuc2l0aW9ucywgbGV0ICdlciByaXBcbiAgICAgICAgc2V0UGVuZGluZ1N0YXRlKG5ld1N0YXRlKTtcbiAgICAgICAgc2V0VnRDb250ZXh0KHtcbiAgICAgICAgICBpc1RyYW5zaXRpb25pbmc6IHRydWUsXG4gICAgICAgICAgZmx1c2hTeW5jOiBmYWxzZSxcbiAgICAgICAgICBjdXJyZW50TG9jYXRpb246IHZpZXdUcmFuc2l0aW9uT3B0cy5jdXJyZW50TG9jYXRpb24sXG4gICAgICAgICAgbmV4dExvY2F0aW9uOiB2aWV3VHJhbnNpdGlvbk9wdHMubmV4dExvY2F0aW9uLFxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9LFxuICAgIFtyb3V0ZXIud2luZG93LCB0cmFuc2l0aW9uLCByZW5kZXJEZmQsIGZldGNoZXJEYXRhLCBvcHRJblN0YXJ0VHJhbnNpdGlvbl1cbiAgKTtcblxuICAvLyBOZWVkIHRvIHVzZSBhIGxheW91dCBlZmZlY3QgaGVyZSBzbyB3ZSBhcmUgc3Vic2NyaWJlZCBlYXJseSBlbm91Z2ggdG9cbiAgLy8gcGljayB1cCBvbiBhbnkgcmVuZGVyLWRyaXZlbiByZWRpcmVjdHMvbmF2aWdhdGlvbnMgKHVzZUVmZmVjdC88TmF2aWdhdGU+KVxuICBSZWFjdC51c2VMYXlvdXRFZmZlY3QoKCkgPT4gcm91dGVyLnN1YnNjcmliZShzZXRTdGF0ZSksIFtyb3V0ZXIsIHNldFN0YXRlXSk7XG5cbiAgLy8gV2hlbiB3ZSBzdGFydCBhIHZpZXcgdHJhbnNpdGlvbiwgY3JlYXRlIGEgRGVmZXJyZWQgd2UgY2FuIHVzZSBmb3IgdGhlXG4gIC8vIGV2ZW50dWFsIFwiY29tcGxldGVkXCIgcmVuZGVyXG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKHZ0Q29udGV4dC5pc1RyYW5zaXRpb25pbmcgJiYgIXZ0Q29udGV4dC5mbHVzaFN5bmMpIHtcbiAgICAgIHNldFJlbmRlckRmZChuZXcgRGVmZXJyZWQ8dm9pZD4oKSk7XG4gICAgfVxuICB9LCBbdnRDb250ZXh0XSk7XG5cbiAgLy8gT25jZSB0aGUgZGVmZXJyZWQgaXMgY3JlYXRlZCwga2ljayBvZmYgc3RhcnRWaWV3VHJhbnNpdGlvbigpIHRvIHVwZGF0ZSB0aGVcbiAgLy8gRE9NIGFuZCB0aGVuIHdhaXQgb24gdGhlIERlZmVycmVkIHRvIHJlc29sdmUgKGluZGljYXRpbmcgdGhlIERPTSB1cGRhdGUgaGFzXG4gIC8vIGhhcHBlbmVkKVxuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmIChyZW5kZXJEZmQgJiYgcGVuZGluZ1N0YXRlICYmIHJvdXRlci53aW5kb3cpIHtcbiAgICAgIGxldCBuZXdTdGF0ZSA9IHBlbmRpbmdTdGF0ZTtcbiAgICAgIGxldCByZW5kZXJQcm9taXNlID0gcmVuZGVyRGZkLnByb21pc2U7XG4gICAgICBsZXQgdHJhbnNpdGlvbiA9IHJvdXRlci53aW5kb3cuZG9jdW1lbnQuc3RhcnRWaWV3VHJhbnNpdGlvbihhc3luYyAoKSA9PiB7XG4gICAgICAgIG9wdEluU3RhcnRUcmFuc2l0aW9uKCgpID0+IHNldFN0YXRlSW1wbChuZXdTdGF0ZSkpO1xuICAgICAgICBhd2FpdCByZW5kZXJQcm9taXNlO1xuICAgICAgfSk7XG4gICAgICB0cmFuc2l0aW9uLmZpbmlzaGVkLmZpbmFsbHkoKCkgPT4ge1xuICAgICAgICBzZXRSZW5kZXJEZmQodW5kZWZpbmVkKTtcbiAgICAgICAgc2V0VHJhbnNpdGlvbih1bmRlZmluZWQpO1xuICAgICAgICBzZXRQZW5kaW5nU3RhdGUodW5kZWZpbmVkKTtcbiAgICAgICAgc2V0VnRDb250ZXh0KHsgaXNUcmFuc2l0aW9uaW5nOiBmYWxzZSB9KTtcbiAgICAgIH0pO1xuICAgICAgc2V0VHJhbnNpdGlvbih0cmFuc2l0aW9uKTtcbiAgICB9XG4gIH0sIFtvcHRJblN0YXJ0VHJhbnNpdGlvbiwgcGVuZGluZ1N0YXRlLCByZW5kZXJEZmQsIHJvdXRlci53aW5kb3ddKTtcblxuICAvLyBXaGVuIHRoZSBuZXcgbG9jYXRpb24gZmluYWxseSByZW5kZXJzIGFuZCBpcyBjb21taXR0ZWQgdG8gdGhlIERPTSwgdGhpc1xuICAvLyBlZmZlY3Qgd2lsbCBydW4gdG8gcmVzb2x2ZSB0aGUgdHJhbnNpdGlvblxuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmIChcbiAgICAgIHJlbmRlckRmZCAmJlxuICAgICAgcGVuZGluZ1N0YXRlICYmXG4gICAgICBzdGF0ZS5sb2NhdGlvbi5rZXkgPT09IHBlbmRpbmdTdGF0ZS5sb2NhdGlvbi5rZXlcbiAgICApIHtcbiAgICAgIHJlbmRlckRmZC5yZXNvbHZlKCk7XG4gICAgfVxuICB9LCBbcmVuZGVyRGZkLCB0cmFuc2l0aW9uLCBzdGF0ZS5sb2NhdGlvbiwgcGVuZGluZ1N0YXRlXSk7XG5cbiAgLy8gSWYgd2UgZ2V0IGludGVycnVwdGVkIHdpdGggYSBuZXcgbmF2aWdhdGlvbiBkdXJpbmcgYSB0cmFuc2l0aW9uLCB3ZSBza2lwXG4gIC8vIHRoZSBhY3RpdmUgdHJhbnNpdGlvbiwgbGV0IGl0IGNsZWFudXAsIHRoZW4ga2ljayBpdCBvZmYgYWdhaW4gaGVyZVxuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmICghdnRDb250ZXh0LmlzVHJhbnNpdGlvbmluZyAmJiBpbnRlcnJ1cHRpb24pIHtcbiAgICAgIHNldFBlbmRpbmdTdGF0ZShpbnRlcnJ1cHRpb24uc3RhdGUpO1xuICAgICAgc2V0VnRDb250ZXh0KHtcbiAgICAgICAgaXNUcmFuc2l0aW9uaW5nOiB0cnVlLFxuICAgICAgICBmbHVzaFN5bmM6IGZhbHNlLFxuICAgICAgICBjdXJyZW50TG9jYXRpb246IGludGVycnVwdGlvbi5jdXJyZW50TG9jYXRpb24sXG4gICAgICAgIG5leHRMb2NhdGlvbjogaW50ZXJydXB0aW9uLm5leHRMb2NhdGlvbixcbiAgICAgIH0pO1xuICAgICAgc2V0SW50ZXJydXB0aW9uKHVuZGVmaW5lZCk7XG4gICAgfVxuICB9LCBbdnRDb250ZXh0LmlzVHJhbnNpdGlvbmluZywgaW50ZXJydXB0aW9uXSk7XG5cbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICB3YXJuaW5nKFxuICAgICAgZmFsbGJhY2tFbGVtZW50ID09IG51bGwgfHwgIXJvdXRlci5mdXR1cmUudjdfcGFydGlhbEh5ZHJhdGlvbixcbiAgICAgIFwiYDxSb3V0ZXJQcm92aWRlciBmYWxsYmFja0VsZW1lbnQ+YCBpcyBkZXByZWNhdGVkIHdoZW4gdXNpbmcgXCIgK1xuICAgICAgICBcImB2N19wYXJ0aWFsSHlkcmF0aW9uYCwgdXNlIGEgYEh5ZHJhdGVGYWxsYmFja2AgY29tcG9uZW50IGluc3RlYWRcIlxuICAgICk7XG4gICAgLy8gT25seSBsb2cgdGhpcyBvbmNlIG9uIGluaXRpYWwgbW91bnRcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QtaG9va3MvZXhoYXVzdGl2ZS1kZXBzXG4gIH0sIFtdKTtcblxuICBsZXQgbmF2aWdhdG9yID0gUmVhY3QudXNlTWVtbygoKTogTmF2aWdhdG9yID0+IHtcbiAgICByZXR1cm4ge1xuICAgICAgY3JlYXRlSHJlZjogcm91dGVyLmNyZWF0ZUhyZWYsXG4gICAgICBlbmNvZGVMb2NhdGlvbjogcm91dGVyLmVuY29kZUxvY2F0aW9uLFxuICAgICAgZ286IChuKSA9PiByb3V0ZXIubmF2aWdhdGUobiksXG4gICAgICBwdXNoOiAodG8sIHN0YXRlLCBvcHRzKSA9PlxuICAgICAgICByb3V0ZXIubmF2aWdhdGUodG8sIHtcbiAgICAgICAgICBzdGF0ZSxcbiAgICAgICAgICBwcmV2ZW50U2Nyb2xsUmVzZXQ6IG9wdHM/LnByZXZlbnRTY3JvbGxSZXNldCxcbiAgICAgICAgfSksXG4gICAgICByZXBsYWNlOiAodG8sIHN0YXRlLCBvcHRzKSA9PlxuICAgICAgICByb3V0ZXIubmF2aWdhdGUodG8sIHtcbiAgICAgICAgICByZXBsYWNlOiB0cnVlLFxuICAgICAgICAgIHN0YXRlLFxuICAgICAgICAgIHByZXZlbnRTY3JvbGxSZXNldDogb3B0cz8ucHJldmVudFNjcm9sbFJlc2V0LFxuICAgICAgICB9KSxcbiAgICB9O1xuICB9LCBbcm91dGVyXSk7XG5cbiAgbGV0IGJhc2VuYW1lID0gcm91dGVyLmJhc2VuYW1lIHx8IFwiL1wiO1xuXG4gIGxldCBkYXRhUm91dGVyQ29udGV4dCA9IFJlYWN0LnVzZU1lbW8oXG4gICAgKCkgPT4gKHtcbiAgICAgIHJvdXRlcixcbiAgICAgIG5hdmlnYXRvcixcbiAgICAgIHN0YXRpYzogZmFsc2UsXG4gICAgICBiYXNlbmFtZSxcbiAgICB9KSxcbiAgICBbcm91dGVyLCBuYXZpZ2F0b3IsIGJhc2VuYW1lXVxuICApO1xuXG4gIC8vIFRoZSBmcmFnbWVudCBhbmQge251bGx9IGhlcmUgYXJlIGltcG9ydGFudCEgIFdlIG5lZWQgdGhlbSB0byBrZWVwIFJlYWN0IDE4J3NcbiAgLy8gdXNlSWQgaGFwcHkgd2hlbiB3ZSBhcmUgc2VydmVyLXJlbmRlcmluZyBzaW5jZSB3ZSBtYXkgaGF2ZSBhIDxzY3JpcHQ+IGhlcmVcbiAgLy8gY29udGFpbmluZyB0aGUgaHlkcmF0ZWQgc2VydmVyLXNpZGUgc3RhdGljQ29udGV4dCAoZnJvbSBTdGF0aWNSb3V0ZXJQcm92aWRlcikuXG4gIC8vIHVzZUlkIHJlbGllcyBvbiB0aGUgY29tcG9uZW50IHRyZWUgc3RydWN0dXJlIHRvIGdlbmVyYXRlIGRldGVybWluaXN0aWMgaWQnc1xuICAvLyBzbyB3ZSBuZWVkIHRvIGVuc3VyZSBpdCByZW1haW5zIHRoZSBzYW1lIG9uIHRoZSBjbGllbnQgZXZlbiB0aG91Z2hcbiAgLy8gd2UgZG9uJ3QgbmVlZCB0aGUgPHNjcmlwdD4gdGFnXG4gIHJldHVybiAoXG4gICAgPD5cbiAgICAgIDxEYXRhUm91dGVyQ29udGV4dC5Qcm92aWRlciB2YWx1ZT17ZGF0YVJvdXRlckNvbnRleHR9PlxuICAgICAgICA8RGF0YVJvdXRlclN0YXRlQ29udGV4dC5Qcm92aWRlciB2YWx1ZT17c3RhdGV9PlxuICAgICAgICAgIDxGZXRjaGVyc0NvbnRleHQuUHJvdmlkZXIgdmFsdWU9e2ZldGNoZXJEYXRhLmN1cnJlbnR9PlxuICAgICAgICAgICAgPFZpZXdUcmFuc2l0aW9uQ29udGV4dC5Qcm92aWRlciB2YWx1ZT17dnRDb250ZXh0fT5cbiAgICAgICAgICAgICAgPFJvdXRlclxuICAgICAgICAgICAgICAgIGJhc2VuYW1lPXtiYXNlbmFtZX1cbiAgICAgICAgICAgICAgICBsb2NhdGlvbj17c3RhdGUubG9jYXRpb259XG4gICAgICAgICAgICAgICAgbmF2aWdhdGlvblR5cGU9e3N0YXRlLmhpc3RvcnlBY3Rpb259XG4gICAgICAgICAgICAgICAgbmF2aWdhdG9yPXtuYXZpZ2F0b3J9XG4gICAgICAgICAgICAgICAgZnV0dXJlPXt7XG4gICAgICAgICAgICAgICAgICB2N19yZWxhdGl2ZVNwbGF0UGF0aDogcm91dGVyLmZ1dHVyZS52N19yZWxhdGl2ZVNwbGF0UGF0aCxcbiAgICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAge3N0YXRlLmluaXRpYWxpemVkIHx8IHJvdXRlci5mdXR1cmUudjdfcGFydGlhbEh5ZHJhdGlvbiA/IChcbiAgICAgICAgICAgICAgICAgIDxEYXRhUm91dGVzXG4gICAgICAgICAgICAgICAgICAgIHJvdXRlcz17cm91dGVyLnJvdXRlc31cbiAgICAgICAgICAgICAgICAgICAgZnV0dXJlPXtyb3V0ZXIuZnV0dXJlfVxuICAgICAgICAgICAgICAgICAgICBzdGF0ZT17c3RhdGV9XG4gICAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgICkgOiAoXG4gICAgICAgICAgICAgICAgICBmYWxsYmFja0VsZW1lbnRcbiAgICAgICAgICAgICAgICApfVxuICAgICAgICAgICAgICA8L1JvdXRlcj5cbiAgICAgICAgICAgIDwvVmlld1RyYW5zaXRpb25Db250ZXh0LlByb3ZpZGVyPlxuICAgICAgICAgIDwvRmV0Y2hlcnNDb250ZXh0LlByb3ZpZGVyPlxuICAgICAgICA8L0RhdGFSb3V0ZXJTdGF0ZUNvbnRleHQuUHJvdmlkZXI+XG4gICAgICA8L0RhdGFSb3V0ZXJDb250ZXh0LlByb3ZpZGVyPlxuICAgICAge251bGx9XG4gICAgPC8+XG4gICk7XG59XG5cbmZ1bmN0aW9uIERhdGFSb3V0ZXMoe1xuICByb3V0ZXMsXG4gIGZ1dHVyZSxcbiAgc3RhdGUsXG59OiB7XG4gIHJvdXRlczogRGF0YVJvdXRlT2JqZWN0W107XG4gIGZ1dHVyZTogUmVtaXhSb3V0ZXJbXCJmdXR1cmVcIl07XG4gIHN0YXRlOiBSb3V0ZXJTdGF0ZTtcbn0pOiBSZWFjdC5SZWFjdEVsZW1lbnQgfCBudWxsIHtcbiAgcmV0dXJuIHVzZVJvdXRlc0ltcGwocm91dGVzLCB1bmRlZmluZWQsIHN0YXRlLCBmdXR1cmUpO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEJyb3dzZXJSb3V0ZXJQcm9wcyB7XG4gIGJhc2VuYW1lPzogc3RyaW5nO1xuICBjaGlsZHJlbj86IFJlYWN0LlJlYWN0Tm9kZTtcbiAgZnV0dXJlPzogUGFydGlhbDxGdXR1cmVDb25maWc+O1xuICB3aW5kb3c/OiBXaW5kb3c7XG59XG5cbi8qKlxuICogQSBgPFJvdXRlcj5gIGZvciB1c2UgaW4gd2ViIGJyb3dzZXJzLiBQcm92aWRlcyB0aGUgY2xlYW5lc3QgVVJMcy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIEJyb3dzZXJSb3V0ZXIoe1xuICBiYXNlbmFtZSxcbiAgY2hpbGRyZW4sXG4gIGZ1dHVyZSxcbiAgd2luZG93LFxufTogQnJvd3NlclJvdXRlclByb3BzKSB7XG4gIGxldCBoaXN0b3J5UmVmID0gUmVhY3QudXNlUmVmPEJyb3dzZXJIaXN0b3J5PigpO1xuICBpZiAoaGlzdG9yeVJlZi5jdXJyZW50ID09IG51bGwpIHtcbiAgICBoaXN0b3J5UmVmLmN1cnJlbnQgPSBjcmVhdGVCcm93c2VySGlzdG9yeSh7IHdpbmRvdywgdjVDb21wYXQ6IHRydWUgfSk7XG4gIH1cblxuICBsZXQgaGlzdG9yeSA9IGhpc3RvcnlSZWYuY3VycmVudDtcbiAgbGV0IFtzdGF0ZSwgc2V0U3RhdGVJbXBsXSA9IFJlYWN0LnVzZVN0YXRlKHtcbiAgICBhY3Rpb246IGhpc3RvcnkuYWN0aW9uLFxuICAgIGxvY2F0aW9uOiBoaXN0b3J5LmxvY2F0aW9uLFxuICB9KTtcbiAgbGV0IHsgdjdfc3RhcnRUcmFuc2l0aW9uIH0gPSBmdXR1cmUgfHwge307XG4gIGxldCBzZXRTdGF0ZSA9IFJlYWN0LnVzZUNhbGxiYWNrKFxuICAgIChuZXdTdGF0ZTogeyBhY3Rpb246IE5hdmlnYXRpb25UeXBlOyBsb2NhdGlvbjogTG9jYXRpb24gfSkgPT4ge1xuICAgICAgdjdfc3RhcnRUcmFuc2l0aW9uICYmIHN0YXJ0VHJhbnNpdGlvbkltcGxcbiAgICAgICAgPyBzdGFydFRyYW5zaXRpb25JbXBsKCgpID0+IHNldFN0YXRlSW1wbChuZXdTdGF0ZSkpXG4gICAgICAgIDogc2V0U3RhdGVJbXBsKG5ld1N0YXRlKTtcbiAgICB9LFxuICAgIFtzZXRTdGF0ZUltcGwsIHY3X3N0YXJ0VHJhbnNpdGlvbl1cbiAgKTtcblxuICBSZWFjdC51c2VMYXlvdXRFZmZlY3QoKCkgPT4gaGlzdG9yeS5saXN0ZW4oc2V0U3RhdGUpLCBbaGlzdG9yeSwgc2V0U3RhdGVdKTtcblxuICByZXR1cm4gKFxuICAgIDxSb3V0ZXJcbiAgICAgIGJhc2VuYW1lPXtiYXNlbmFtZX1cbiAgICAgIGNoaWxkcmVuPXtjaGlsZHJlbn1cbiAgICAgIGxvY2F0aW9uPXtzdGF0ZS5sb2NhdGlvbn1cbiAgICAgIG5hdmlnYXRpb25UeXBlPXtzdGF0ZS5hY3Rpb259XG4gICAgICBuYXZpZ2F0b3I9e2hpc3Rvcnl9XG4gICAgICBmdXR1cmU9e2Z1dHVyZX1cbiAgICAvPlxuICApO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEhhc2hSb3V0ZXJQcm9wcyB7XG4gIGJhc2VuYW1lPzogc3RyaW5nO1xuICBjaGlsZHJlbj86IFJlYWN0LlJlYWN0Tm9kZTtcbiAgZnV0dXJlPzogUGFydGlhbDxGdXR1cmVDb25maWc+O1xuICB3aW5kb3c/OiBXaW5kb3c7XG59XG5cbi8qKlxuICogQSBgPFJvdXRlcj5gIGZvciB1c2UgaW4gd2ViIGJyb3dzZXJzLiBTdG9yZXMgdGhlIGxvY2F0aW9uIGluIHRoZSBoYXNoXG4gKiBwb3J0aW9uIG9mIHRoZSBVUkwgc28gaXQgaXMgbm90IHNlbnQgdG8gdGhlIHNlcnZlci5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIEhhc2hSb3V0ZXIoe1xuICBiYXNlbmFtZSxcbiAgY2hpbGRyZW4sXG4gIGZ1dHVyZSxcbiAgd2luZG93LFxufTogSGFzaFJvdXRlclByb3BzKSB7XG4gIGxldCBoaXN0b3J5UmVmID0gUmVhY3QudXNlUmVmPEhhc2hIaXN0b3J5PigpO1xuICBpZiAoaGlzdG9yeVJlZi5jdXJyZW50ID09IG51bGwpIHtcbiAgICBoaXN0b3J5UmVmLmN1cnJlbnQgPSBjcmVhdGVIYXNoSGlzdG9yeSh7IHdpbmRvdywgdjVDb21wYXQ6IHRydWUgfSk7XG4gIH1cblxuICBsZXQgaGlzdG9yeSA9IGhpc3RvcnlSZWYuY3VycmVudDtcbiAgbGV0IFtzdGF0ZSwgc2V0U3RhdGVJbXBsXSA9IFJlYWN0LnVzZVN0YXRlKHtcbiAgICBhY3Rpb246IGhpc3RvcnkuYWN0aW9uLFxuICAgIGxvY2F0aW9uOiBoaXN0b3J5LmxvY2F0aW9uLFxuICB9KTtcbiAgbGV0IHsgdjdfc3RhcnRUcmFuc2l0aW9uIH0gPSBmdXR1cmUgfHwge307XG4gIGxldCBzZXRTdGF0ZSA9IFJlYWN0LnVzZUNhbGxiYWNrKFxuICAgIChuZXdTdGF0ZTogeyBhY3Rpb246IE5hdmlnYXRpb25UeXBlOyBsb2NhdGlvbjogTG9jYXRpb24gfSkgPT4ge1xuICAgICAgdjdfc3RhcnRUcmFuc2l0aW9uICYmIHN0YXJ0VHJhbnNpdGlvbkltcGxcbiAgICAgICAgPyBzdGFydFRyYW5zaXRpb25JbXBsKCgpID0+IHNldFN0YXRlSW1wbChuZXdTdGF0ZSkpXG4gICAgICAgIDogc2V0U3RhdGVJbXBsKG5ld1N0YXRlKTtcbiAgICB9LFxuICAgIFtzZXRTdGF0ZUltcGwsIHY3X3N0YXJ0VHJhbnNpdGlvbl1cbiAgKTtcblxuICBSZWFjdC51c2VMYXlvdXRFZmZlY3QoKCkgPT4gaGlzdG9yeS5saXN0ZW4oc2V0U3RhdGUpLCBbaGlzdG9yeSwgc2V0U3RhdGVdKTtcblxuICByZXR1cm4gKFxuICAgIDxSb3V0ZXJcbiAgICAgIGJhc2VuYW1lPXtiYXNlbmFtZX1cbiAgICAgIGNoaWxkcmVuPXtjaGlsZHJlbn1cbiAgICAgIGxvY2F0aW9uPXtzdGF0ZS5sb2NhdGlvbn1cbiAgICAgIG5hdmlnYXRpb25UeXBlPXtzdGF0ZS5hY3Rpb259XG4gICAgICBuYXZpZ2F0b3I9e2hpc3Rvcnl9XG4gICAgICBmdXR1cmU9e2Z1dHVyZX1cbiAgICAvPlxuICApO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEhpc3RvcnlSb3V0ZXJQcm9wcyB7XG4gIGJhc2VuYW1lPzogc3RyaW5nO1xuICBjaGlsZHJlbj86IFJlYWN0LlJlYWN0Tm9kZTtcbiAgZnV0dXJlPzogRnV0dXJlQ29uZmlnO1xuICBoaXN0b3J5OiBIaXN0b3J5O1xufVxuXG4vKipcbiAqIEEgYDxSb3V0ZXI+YCB0aGF0IGFjY2VwdHMgYSBwcmUtaW5zdGFudGlhdGVkIGhpc3Rvcnkgb2JqZWN0LiBJdCdzIGltcG9ydGFudFxuICogdG8gbm90ZSB0aGF0IHVzaW5nIHlvdXIgb3duIGhpc3Rvcnkgb2JqZWN0IGlzIGhpZ2hseSBkaXNjb3VyYWdlZCBhbmQgbWF5IGFkZFxuICogdHdvIHZlcnNpb25zIG9mIHRoZSBoaXN0b3J5IGxpYnJhcnkgdG8geW91ciBidW5kbGVzIHVubGVzcyB5b3UgdXNlIHRoZSBzYW1lXG4gKiB2ZXJzaW9uIG9mIHRoZSBoaXN0b3J5IGxpYnJhcnkgdGhhdCBSZWFjdCBSb3V0ZXIgdXNlcyBpbnRlcm5hbGx5LlxuICovXG5mdW5jdGlvbiBIaXN0b3J5Um91dGVyKHtcbiAgYmFzZW5hbWUsXG4gIGNoaWxkcmVuLFxuICBmdXR1cmUsXG4gIGhpc3RvcnksXG59OiBIaXN0b3J5Um91dGVyUHJvcHMpIHtcbiAgbGV0IFtzdGF0ZSwgc2V0U3RhdGVJbXBsXSA9IFJlYWN0LnVzZVN0YXRlKHtcbiAgICBhY3Rpb246IGhpc3RvcnkuYWN0aW9uLFxuICAgIGxvY2F0aW9uOiBoaXN0b3J5LmxvY2F0aW9uLFxuICB9KTtcbiAgbGV0IHsgdjdfc3RhcnRUcmFuc2l0aW9uIH0gPSBmdXR1cmUgfHwge307XG4gIGxldCBzZXRTdGF0ZSA9IFJlYWN0LnVzZUNhbGxiYWNrKFxuICAgIChuZXdTdGF0ZTogeyBhY3Rpb246IE5hdmlnYXRpb25UeXBlOyBsb2NhdGlvbjogTG9jYXRpb24gfSkgPT4ge1xuICAgICAgdjdfc3RhcnRUcmFuc2l0aW9uICYmIHN0YXJ0VHJhbnNpdGlvbkltcGxcbiAgICAgICAgPyBzdGFydFRyYW5zaXRpb25JbXBsKCgpID0+IHNldFN0YXRlSW1wbChuZXdTdGF0ZSkpXG4gICAgICAgIDogc2V0U3RhdGVJbXBsKG5ld1N0YXRlKTtcbiAgICB9LFxuICAgIFtzZXRTdGF0ZUltcGwsIHY3X3N0YXJ0VHJhbnNpdGlvbl1cbiAgKTtcblxuICBSZWFjdC51c2VMYXlvdXRFZmZlY3QoKCkgPT4gaGlzdG9yeS5saXN0ZW4oc2V0U3RhdGUpLCBbaGlzdG9yeSwgc2V0U3RhdGVdKTtcblxuICByZXR1cm4gKFxuICAgIDxSb3V0ZXJcbiAgICAgIGJhc2VuYW1lPXtiYXNlbmFtZX1cbiAgICAgIGNoaWxkcmVuPXtjaGlsZHJlbn1cbiAgICAgIGxvY2F0aW9uPXtzdGF0ZS5sb2NhdGlvbn1cbiAgICAgIG5hdmlnYXRpb25UeXBlPXtzdGF0ZS5hY3Rpb259XG4gICAgICBuYXZpZ2F0b3I9e2hpc3Rvcnl9XG4gICAgICBmdXR1cmU9e2Z1dHVyZX1cbiAgICAvPlxuICApO1xufVxuXG5pZiAoX19ERVZfXykge1xuICBIaXN0b3J5Um91dGVyLmRpc3BsYXlOYW1lID0gXCJ1bnN0YWJsZV9IaXN0b3J5Um91dGVyXCI7XG59XG5cbmV4cG9ydCB7IEhpc3RvcnlSb3V0ZXIgYXMgdW5zdGFibGVfSGlzdG9yeVJvdXRlciB9O1xuXG5leHBvcnQgaW50ZXJmYWNlIExpbmtQcm9wc1xuICBleHRlbmRzIE9taXQ8UmVhY3QuQW5jaG9ySFRNTEF0dHJpYnV0ZXM8SFRNTEFuY2hvckVsZW1lbnQ+LCBcImhyZWZcIj4ge1xuICByZWxvYWREb2N1bWVudD86IGJvb2xlYW47XG4gIHJlcGxhY2U/OiBib29sZWFuO1xuICBzdGF0ZT86IGFueTtcbiAgcHJldmVudFNjcm9sbFJlc2V0PzogYm9vbGVhbjtcbiAgcmVsYXRpdmU/OiBSZWxhdGl2ZVJvdXRpbmdUeXBlO1xuICB0bzogVG87XG4gIHVuc3RhYmxlX3ZpZXdUcmFuc2l0aW9uPzogYm9vbGVhbjtcbn1cblxuY29uc3QgaXNCcm93c2VyID1cbiAgdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiAmJlxuICB0eXBlb2Ygd2luZG93LmRvY3VtZW50ICE9PSBcInVuZGVmaW5lZFwiICYmXG4gIHR5cGVvZiB3aW5kb3cuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCAhPT0gXCJ1bmRlZmluZWRcIjtcblxuY29uc3QgQUJTT0xVVEVfVVJMX1JFR0VYID0gL14oPzpbYS16XVthLXowLTkrLi1dKjp8XFwvXFwvKS9pO1xuXG4vKipcbiAqIFRoZSBwdWJsaWMgQVBJIGZvciByZW5kZXJpbmcgYSBoaXN0b3J5LWF3YXJlIGA8YT5gLlxuICovXG5leHBvcnQgY29uc3QgTGluayA9IFJlYWN0LmZvcndhcmRSZWY8SFRNTEFuY2hvckVsZW1lbnQsIExpbmtQcm9wcz4oXG4gIGZ1bmN0aW9uIExpbmtXaXRoUmVmKFxuICAgIHtcbiAgICAgIG9uQ2xpY2ssXG4gICAgICByZWxhdGl2ZSxcbiAgICAgIHJlbG9hZERvY3VtZW50LFxuICAgICAgcmVwbGFjZSxcbiAgICAgIHN0YXRlLFxuICAgICAgdGFyZ2V0LFxuICAgICAgdG8sXG4gICAgICBwcmV2ZW50U2Nyb2xsUmVzZXQsXG4gICAgICB1bnN0YWJsZV92aWV3VHJhbnNpdGlvbixcbiAgICAgIC4uLnJlc3RcbiAgICB9LFxuICAgIHJlZlxuICApIHtcbiAgICBsZXQgeyBiYXNlbmFtZSB9ID0gUmVhY3QudXNlQ29udGV4dChOYXZpZ2F0aW9uQ29udGV4dCk7XG5cbiAgICAvLyBSZW5kZXJlZCBpbnRvIDxhIGhyZWY+IGZvciBhYnNvbHV0ZSBVUkxzXG4gICAgbGV0IGFic29sdXRlSHJlZjtcbiAgICBsZXQgaXNFeHRlcm5hbCA9IGZhbHNlO1xuXG4gICAgaWYgKHR5cGVvZiB0byA9PT0gXCJzdHJpbmdcIiAmJiBBQlNPTFVURV9VUkxfUkVHRVgudGVzdCh0bykpIHtcbiAgICAgIC8vIFJlbmRlciB0aGUgYWJzb2x1dGUgaHJlZiBzZXJ2ZXItIGFuZCBjbGllbnQtc2lkZVxuICAgICAgYWJzb2x1dGVIcmVmID0gdG87XG5cbiAgICAgIC8vIE9ubHkgY2hlY2sgZm9yIGV4dGVybmFsIG9yaWdpbnMgY2xpZW50LXNpZGVcbiAgICAgIGlmIChpc0Jyb3dzZXIpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBsZXQgY3VycmVudFVybCA9IG5ldyBVUkwod2luZG93LmxvY2F0aW9uLmhyZWYpO1xuICAgICAgICAgIGxldCB0YXJnZXRVcmwgPSB0by5zdGFydHNXaXRoKFwiLy9cIilcbiAgICAgICAgICAgID8gbmV3IFVSTChjdXJyZW50VXJsLnByb3RvY29sICsgdG8pXG4gICAgICAgICAgICA6IG5ldyBVUkwodG8pO1xuICAgICAgICAgIGxldCBwYXRoID0gc3RyaXBCYXNlbmFtZSh0YXJnZXRVcmwucGF0aG5hbWUsIGJhc2VuYW1lKTtcblxuICAgICAgICAgIGlmICh0YXJnZXRVcmwub3JpZ2luID09PSBjdXJyZW50VXJsLm9yaWdpbiAmJiBwYXRoICE9IG51bGwpIHtcbiAgICAgICAgICAgIC8vIFN0cmlwIHRoZSBwcm90b2NvbC9vcmlnaW4vYmFzZW5hbWUgZm9yIHNhbWUtb3JpZ2luIGFic29sdXRlIFVSTHNcbiAgICAgICAgICAgIHRvID0gcGF0aCArIHRhcmdldFVybC5zZWFyY2ggKyB0YXJnZXRVcmwuaGFzaDtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaXNFeHRlcm5hbCA9IHRydWU7XG4gICAgICAgICAgfVxuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgLy8gV2UgY2FuJ3QgZG8gZXh0ZXJuYWwgVVJMIGRldGVjdGlvbiB3aXRob3V0IGEgdmFsaWQgVVJMXG4gICAgICAgICAgd2FybmluZyhcbiAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgYDxMaW5rIHRvPVwiJHt0b31cIj4gY29udGFpbnMgYW4gaW52YWxpZCBVUkwgd2hpY2ggd2lsbCBwcm9iYWJseSBicmVhayBgICtcbiAgICAgICAgICAgICAgYHdoZW4gY2xpY2tlZCAtIHBsZWFzZSB1cGRhdGUgdG8gYSB2YWxpZCBVUkwgcGF0aC5gXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIC8vIFJlbmRlcmVkIGludG8gPGEgaHJlZj4gZm9yIHJlbGF0aXZlIFVSTHNcbiAgICBsZXQgaHJlZiA9IHVzZUhyZWYodG8sIHsgcmVsYXRpdmUgfSk7XG5cbiAgICBsZXQgaW50ZXJuYWxPbkNsaWNrID0gdXNlTGlua0NsaWNrSGFuZGxlcih0bywge1xuICAgICAgcmVwbGFjZSxcbiAgICAgIHN0YXRlLFxuICAgICAgdGFyZ2V0LFxuICAgICAgcHJldmVudFNjcm9sbFJlc2V0LFxuICAgICAgcmVsYXRpdmUsXG4gICAgICB1bnN0YWJsZV92aWV3VHJhbnNpdGlvbixcbiAgICB9KTtcbiAgICBmdW5jdGlvbiBoYW5kbGVDbGljayhcbiAgICAgIGV2ZW50OiBSZWFjdC5Nb3VzZUV2ZW50PEhUTUxBbmNob3JFbGVtZW50LCBNb3VzZUV2ZW50PlxuICAgICkge1xuICAgICAgaWYgKG9uQ2xpY2spIG9uQ2xpY2soZXZlbnQpO1xuICAgICAgaWYgKCFldmVudC5kZWZhdWx0UHJldmVudGVkKSB7XG4gICAgICAgIGludGVybmFsT25DbGljayhldmVudCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIChcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBqc3gtYTExeS9hbmNob3ItaGFzLWNvbnRlbnRcbiAgICAgIDxhXG4gICAgICAgIHsuLi5yZXN0fVxuICAgICAgICBocmVmPXthYnNvbHV0ZUhyZWYgfHwgaHJlZn1cbiAgICAgICAgb25DbGljaz17aXNFeHRlcm5hbCB8fCByZWxvYWREb2N1bWVudCA/IG9uQ2xpY2sgOiBoYW5kbGVDbGlja31cbiAgICAgICAgcmVmPXtyZWZ9XG4gICAgICAgIHRhcmdldD17dGFyZ2V0fVxuICAgICAgLz5cbiAgICApO1xuICB9XG4pO1xuXG5pZiAoX19ERVZfXykge1xuICBMaW5rLmRpc3BsYXlOYW1lID0gXCJMaW5rXCI7XG59XG5cbnR5cGUgTmF2TGlua1JlbmRlclByb3BzID0ge1xuICBpc0FjdGl2ZTogYm9vbGVhbjtcbiAgaXNQZW5kaW5nOiBib29sZWFuO1xuICBpc1RyYW5zaXRpb25pbmc6IGJvb2xlYW47XG59O1xuXG5leHBvcnQgaW50ZXJmYWNlIE5hdkxpbmtQcm9wc1xuICBleHRlbmRzIE9taXQ8TGlua1Byb3BzLCBcImNsYXNzTmFtZVwiIHwgXCJzdHlsZVwiIHwgXCJjaGlsZHJlblwiPiB7XG4gIGNoaWxkcmVuPzogUmVhY3QuUmVhY3ROb2RlIHwgKChwcm9wczogTmF2TGlua1JlbmRlclByb3BzKSA9PiBSZWFjdC5SZWFjdE5vZGUpO1xuICBjYXNlU2Vuc2l0aXZlPzogYm9vbGVhbjtcbiAgY2xhc3NOYW1lPzogc3RyaW5nIHwgKChwcm9wczogTmF2TGlua1JlbmRlclByb3BzKSA9PiBzdHJpbmcgfCB1bmRlZmluZWQpO1xuICBlbmQ/OiBib29sZWFuO1xuICBzdHlsZT86XG4gICAgfCBSZWFjdC5DU1NQcm9wZXJ0aWVzXG4gICAgfCAoKHByb3BzOiBOYXZMaW5rUmVuZGVyUHJvcHMpID0+IFJlYWN0LkNTU1Byb3BlcnRpZXMgfCB1bmRlZmluZWQpO1xufVxuXG4vKipcbiAqIEEgYDxMaW5rPmAgd3JhcHBlciB0aGF0IGtub3dzIGlmIGl0J3MgXCJhY3RpdmVcIiBvciBub3QuXG4gKi9cbmV4cG9ydCBjb25zdCBOYXZMaW5rID0gUmVhY3QuZm9yd2FyZFJlZjxIVE1MQW5jaG9yRWxlbWVudCwgTmF2TGlua1Byb3BzPihcbiAgZnVuY3Rpb24gTmF2TGlua1dpdGhSZWYoXG4gICAge1xuICAgICAgXCJhcmlhLWN1cnJlbnRcIjogYXJpYUN1cnJlbnRQcm9wID0gXCJwYWdlXCIsXG4gICAgICBjYXNlU2Vuc2l0aXZlID0gZmFsc2UsXG4gICAgICBjbGFzc05hbWU6IGNsYXNzTmFtZVByb3AgPSBcIlwiLFxuICAgICAgZW5kID0gZmFsc2UsXG4gICAgICBzdHlsZTogc3R5bGVQcm9wLFxuICAgICAgdG8sXG4gICAgICB1bnN0YWJsZV92aWV3VHJhbnNpdGlvbixcbiAgICAgIGNoaWxkcmVuLFxuICAgICAgLi4ucmVzdFxuICAgIH0sXG4gICAgcmVmXG4gICkge1xuICAgIGxldCBwYXRoID0gdXNlUmVzb2x2ZWRQYXRoKHRvLCB7IHJlbGF0aXZlOiByZXN0LnJlbGF0aXZlIH0pO1xuICAgIGxldCBsb2NhdGlvbiA9IHVzZUxvY2F0aW9uKCk7XG4gICAgbGV0IHJvdXRlclN0YXRlID0gUmVhY3QudXNlQ29udGV4dChEYXRhUm91dGVyU3RhdGVDb250ZXh0KTtcbiAgICBsZXQgeyBuYXZpZ2F0b3IsIGJhc2VuYW1lIH0gPSBSZWFjdC51c2VDb250ZXh0KE5hdmlnYXRpb25Db250ZXh0KTtcbiAgICBsZXQgaXNUcmFuc2l0aW9uaW5nID1cbiAgICAgIHJvdXRlclN0YXRlICE9IG51bGwgJiZcbiAgICAgIC8vIENvbmRpdGlvbmFsIHVzYWdlIGlzIE9LIGhlcmUgYmVjYXVzZSB0aGUgdXNhZ2Ugb2YgYSBkYXRhIHJvdXRlciBpcyBzdGF0aWNcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC1ob29rcy9ydWxlcy1vZi1ob29rc1xuICAgICAgdXNlVmlld1RyYW5zaXRpb25TdGF0ZShwYXRoKSAmJlxuICAgICAgdW5zdGFibGVfdmlld1RyYW5zaXRpb24gPT09IHRydWU7XG5cbiAgICBsZXQgdG9QYXRobmFtZSA9IG5hdmlnYXRvci5lbmNvZGVMb2NhdGlvblxuICAgICAgPyBuYXZpZ2F0b3IuZW5jb2RlTG9jYXRpb24ocGF0aCkucGF0aG5hbWVcbiAgICAgIDogcGF0aC5wYXRobmFtZTtcbiAgICBsZXQgbG9jYXRpb25QYXRobmFtZSA9IGxvY2F0aW9uLnBhdGhuYW1lO1xuICAgIGxldCBuZXh0TG9jYXRpb25QYXRobmFtZSA9XG4gICAgICByb3V0ZXJTdGF0ZSAmJiByb3V0ZXJTdGF0ZS5uYXZpZ2F0aW9uICYmIHJvdXRlclN0YXRlLm5hdmlnYXRpb24ubG9jYXRpb25cbiAgICAgICAgPyByb3V0ZXJTdGF0ZS5uYXZpZ2F0aW9uLmxvY2F0aW9uLnBhdGhuYW1lXG4gICAgICAgIDogbnVsbDtcblxuICAgIGlmICghY2FzZVNlbnNpdGl2ZSkge1xuICAgICAgbG9jYXRpb25QYXRobmFtZSA9IGxvY2F0aW9uUGF0aG5hbWUudG9Mb3dlckNhc2UoKTtcbiAgICAgIG5leHRMb2NhdGlvblBhdGhuYW1lID0gbmV4dExvY2F0aW9uUGF0aG5hbWVcbiAgICAgICAgPyBuZXh0TG9jYXRpb25QYXRobmFtZS50b0xvd2VyQ2FzZSgpXG4gICAgICAgIDogbnVsbDtcbiAgICAgIHRvUGF0aG5hbWUgPSB0b1BhdGhuYW1lLnRvTG93ZXJDYXNlKCk7XG4gICAgfVxuXG4gICAgaWYgKG5leHRMb2NhdGlvblBhdGhuYW1lICYmIGJhc2VuYW1lKSB7XG4gICAgICBuZXh0TG9jYXRpb25QYXRobmFtZSA9XG4gICAgICAgIHN0cmlwQmFzZW5hbWUobmV4dExvY2F0aW9uUGF0aG5hbWUsIGJhc2VuYW1lKSB8fCBuZXh0TG9jYXRpb25QYXRobmFtZTtcbiAgICB9XG5cbiAgICAvLyBJZiB0aGUgYHRvYCBoYXMgYSB0cmFpbGluZyBzbGFzaCwgbG9vayBhdCB0aGF0IGV4YWN0IHNwb3QuICBPdGhlcndpc2UsXG4gICAgLy8gd2UncmUgbG9va2luZyBmb3IgYSBzbGFzaCBfYWZ0ZXJfIHdoYXQncyBpbiBgdG9gLiAgRm9yIGV4YW1wbGU6XG4gICAgLy9cbiAgICAvLyA8TmF2TGluayB0bz1cIi91c2Vyc1wiPiBhbmQgPE5hdkxpbmsgdG89XCIvdXNlcnMvXCI+XG4gICAgLy8gYm90aCB3YW50IHRvIGxvb2sgZm9yIGEgLyBhdCBpbmRleCA2IHRvIG1hdGNoIFVSTCBgL3VzZXJzL21hdHRgXG4gICAgY29uc3QgZW5kU2xhc2hQb3NpdGlvbiA9XG4gICAgICB0b1BhdGhuYW1lICE9PSBcIi9cIiAmJiB0b1BhdGhuYW1lLmVuZHNXaXRoKFwiL1wiKVxuICAgICAgICA/IHRvUGF0aG5hbWUubGVuZ3RoIC0gMVxuICAgICAgICA6IHRvUGF0aG5hbWUubGVuZ3RoO1xuICAgIGxldCBpc0FjdGl2ZSA9XG4gICAgICBsb2NhdGlvblBhdGhuYW1lID09PSB0b1BhdGhuYW1lIHx8XG4gICAgICAoIWVuZCAmJlxuICAgICAgICBsb2NhdGlvblBhdGhuYW1lLnN0YXJ0c1dpdGgodG9QYXRobmFtZSkgJiZcbiAgICAgICAgbG9jYXRpb25QYXRobmFtZS5jaGFyQXQoZW5kU2xhc2hQb3NpdGlvbikgPT09IFwiL1wiKTtcblxuICAgIGxldCBpc1BlbmRpbmcgPVxuICAgICAgbmV4dExvY2F0aW9uUGF0aG5hbWUgIT0gbnVsbCAmJlxuICAgICAgKG5leHRMb2NhdGlvblBhdGhuYW1lID09PSB0b1BhdGhuYW1lIHx8XG4gICAgICAgICghZW5kICYmXG4gICAgICAgICAgbmV4dExvY2F0aW9uUGF0aG5hbWUuc3RhcnRzV2l0aCh0b1BhdGhuYW1lKSAmJlxuICAgICAgICAgIG5leHRMb2NhdGlvblBhdGhuYW1lLmNoYXJBdCh0b1BhdGhuYW1lLmxlbmd0aCkgPT09IFwiL1wiKSk7XG5cbiAgICBsZXQgcmVuZGVyUHJvcHMgPSB7XG4gICAgICBpc0FjdGl2ZSxcbiAgICAgIGlzUGVuZGluZyxcbiAgICAgIGlzVHJhbnNpdGlvbmluZyxcbiAgICB9O1xuXG4gICAgbGV0IGFyaWFDdXJyZW50ID0gaXNBY3RpdmUgPyBhcmlhQ3VycmVudFByb3AgOiB1bmRlZmluZWQ7XG5cbiAgICBsZXQgY2xhc3NOYW1lOiBzdHJpbmcgfCB1bmRlZmluZWQ7XG4gICAgaWYgKHR5cGVvZiBjbGFzc05hbWVQcm9wID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgIGNsYXNzTmFtZSA9IGNsYXNzTmFtZVByb3AocmVuZGVyUHJvcHMpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBJZiB0aGUgY2xhc3NOYW1lIHByb3AgaXMgbm90IGEgZnVuY3Rpb24sIHdlIHVzZSBhIGRlZmF1bHQgYGFjdGl2ZWBcbiAgICAgIC8vIGNsYXNzIGZvciA8TmF2TGluayAvPnMgdGhhdCBhcmUgYWN0aXZlLiBJbiB2NSBgYWN0aXZlYCB3YXMgdGhlIGRlZmF1bHRcbiAgICAgIC8vIHZhbHVlIGZvciBgYWN0aXZlQ2xhc3NOYW1lYCwgYnV0IHdlIGFyZSByZW1vdmluZyB0aGF0IEFQSSBhbmQgY2FuIHN0aWxsXG4gICAgICAvLyB1c2UgdGhlIG9sZCBkZWZhdWx0IGJlaGF2aW9yIGZvciBhIGNsZWFuZXIgdXBncmFkZSBwYXRoIGFuZCBrZWVwIHRoZVxuICAgICAgLy8gc2ltcGxlIHN0eWxpbmcgcnVsZXMgd29ya2luZyBhcyB0aGV5IGN1cnJlbnRseSBkby5cbiAgICAgIGNsYXNzTmFtZSA9IFtcbiAgICAgICAgY2xhc3NOYW1lUHJvcCxcbiAgICAgICAgaXNBY3RpdmUgPyBcImFjdGl2ZVwiIDogbnVsbCxcbiAgICAgICAgaXNQZW5kaW5nID8gXCJwZW5kaW5nXCIgOiBudWxsLFxuICAgICAgICBpc1RyYW5zaXRpb25pbmcgPyBcInRyYW5zaXRpb25pbmdcIiA6IG51bGwsXG4gICAgICBdXG4gICAgICAgIC5maWx0ZXIoQm9vbGVhbilcbiAgICAgICAgLmpvaW4oXCIgXCIpO1xuICAgIH1cblxuICAgIGxldCBzdHlsZSA9XG4gICAgICB0eXBlb2Ygc3R5bGVQcm9wID09PSBcImZ1bmN0aW9uXCIgPyBzdHlsZVByb3AocmVuZGVyUHJvcHMpIDogc3R5bGVQcm9wO1xuXG4gICAgcmV0dXJuIChcbiAgICAgIDxMaW5rXG4gICAgICAgIHsuLi5yZXN0fVxuICAgICAgICBhcmlhLWN1cnJlbnQ9e2FyaWFDdXJyZW50fVxuICAgICAgICBjbGFzc05hbWU9e2NsYXNzTmFtZX1cbiAgICAgICAgcmVmPXtyZWZ9XG4gICAgICAgIHN0eWxlPXtzdHlsZX1cbiAgICAgICAgdG89e3RvfVxuICAgICAgICB1bnN0YWJsZV92aWV3VHJhbnNpdGlvbj17dW5zdGFibGVfdmlld1RyYW5zaXRpb259XG4gICAgICA+XG4gICAgICAgIHt0eXBlb2YgY2hpbGRyZW4gPT09IFwiZnVuY3Rpb25cIiA/IGNoaWxkcmVuKHJlbmRlclByb3BzKSA6IGNoaWxkcmVufVxuICAgICAgPC9MaW5rPlxuICAgICk7XG4gIH1cbik7XG5cbmlmIChfX0RFVl9fKSB7XG4gIE5hdkxpbmsuZGlzcGxheU5hbWUgPSBcIk5hdkxpbmtcIjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBGZXRjaGVyRm9ybVByb3BzXG4gIGV4dGVuZHMgUmVhY3QuRm9ybUhUTUxBdHRyaWJ1dGVzPEhUTUxGb3JtRWxlbWVudD4ge1xuICAvKipcbiAgICogVGhlIEhUVFAgdmVyYiB0byB1c2Ugd2hlbiB0aGUgZm9ybSBpcyBzdWJtaXQuIFN1cHBvcnRzIFwiZ2V0XCIsIFwicG9zdFwiLFxuICAgKiBcInB1dFwiLCBcImRlbGV0ZVwiLCBcInBhdGNoXCIuXG4gICAqL1xuICBtZXRob2Q/OiBIVE1MRm9ybU1ldGhvZDtcblxuICAvKipcbiAgICogYDxmb3JtIGVuY1R5cGU+YCAtIGVuaGFuY2luZyBiZXlvbmQgdGhlIG5vcm1hbCBzdHJpbmcgdHlwZSBhbmQgbGltaXRpbmdcbiAgICogdG8gdGhlIGJ1aWx0LWluIGJyb3dzZXIgc3VwcG9ydGVkIHZhbHVlc1xuICAgKi9cbiAgZW5jVHlwZT86XG4gICAgfCBcImFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZFwiXG4gICAgfCBcIm11bHRpcGFydC9mb3JtLWRhdGFcIlxuICAgIHwgXCJ0ZXh0L3BsYWluXCI7XG5cbiAgLyoqXG4gICAqIE5vcm1hbCBgPGZvcm0gYWN0aW9uPmAgYnV0IHN1cHBvcnRzIFJlYWN0IFJvdXRlcidzIHJlbGF0aXZlIHBhdGhzLlxuICAgKi9cbiAgYWN0aW9uPzogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBEZXRlcm1pbmVzIHdoZXRoZXIgdGhlIGZvcm0gYWN0aW9uIGlzIHJlbGF0aXZlIHRvIHRoZSByb3V0ZSBoaWVyYXJjaHkgb3JcbiAgICogdGhlIHBhdGhuYW1lLiAgVXNlIHRoaXMgaWYgeW91IHdhbnQgdG8gb3B0IG91dCBvZiBuYXZpZ2F0aW5nIHRoZSByb3V0ZVxuICAgKiBoaWVyYXJjaHkgYW5kIHdhbnQgdG8gaW5zdGVhZCByb3V0ZSBiYXNlZCBvbiAvLWRlbGltaXRlZCBVUkwgc2VnbWVudHNcbiAgICovXG4gIHJlbGF0aXZlPzogUmVsYXRpdmVSb3V0aW5nVHlwZTtcblxuICAvKipcbiAgICogUHJldmVudCB0aGUgc2Nyb2xsIHBvc2l0aW9uIGZyb20gcmVzZXR0aW5nIHRvIHRoZSB0b3Agb2YgdGhlIHZpZXdwb3J0IG9uXG4gICAqIGNvbXBsZXRpb24gb2YgdGhlIG5hdmlnYXRpb24gd2hlbiB1c2luZyB0aGUgPFNjcm9sbFJlc3RvcmF0aW9uPiBjb21wb25lbnRcbiAgICovXG4gIHByZXZlbnRTY3JvbGxSZXNldD86IGJvb2xlYW47XG5cbiAgLyoqXG4gICAqIEEgZnVuY3Rpb24gdG8gY2FsbCB3aGVuIHRoZSBmb3JtIGlzIHN1Ym1pdHRlZC4gSWYgeW91IGNhbGxcbiAgICogYGV2ZW50LnByZXZlbnREZWZhdWx0KClgIHRoZW4gdGhpcyBmb3JtIHdpbGwgbm90IGRvIGFueXRoaW5nLlxuICAgKi9cbiAgb25TdWJtaXQ/OiBSZWFjdC5Gb3JtRXZlbnRIYW5kbGVyPEhUTUxGb3JtRWxlbWVudD47XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgRm9ybVByb3BzIGV4dGVuZHMgRmV0Y2hlckZvcm1Qcm9wcyB7XG4gIC8qKlxuICAgKiBJbmRpY2F0ZSBhIHNwZWNpZmljIGZldGNoZXJLZXkgdG8gdXNlIHdoZW4gdXNpbmcgbmF2aWdhdGU9ZmFsc2VcbiAgICovXG4gIGZldGNoZXJLZXk/OiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIG5hdmlnYXRlPWZhbHNlIHdpbGwgdXNlIGEgZmV0Y2hlciBpbnN0ZWFkIG9mIGEgbmF2aWdhdGlvblxuICAgKi9cbiAgbmF2aWdhdGU/OiBib29sZWFuO1xuXG4gIC8qKlxuICAgKiBGb3JjZXMgYSBmdWxsIGRvY3VtZW50IG5hdmlnYXRpb24gaW5zdGVhZCBvZiBhIGZldGNoLlxuICAgKi9cbiAgcmVsb2FkRG9jdW1lbnQ/OiBib29sZWFuO1xuXG4gIC8qKlxuICAgKiBSZXBsYWNlcyB0aGUgY3VycmVudCBlbnRyeSBpbiB0aGUgYnJvd3NlciBoaXN0b3J5IHN0YWNrIHdoZW4gdGhlIGZvcm1cbiAgICogbmF2aWdhdGVzLiBVc2UgdGhpcyBpZiB5b3UgZG9uJ3Qgd2FudCB0aGUgdXNlciB0byBiZSBhYmxlIHRvIGNsaWNrIFwiYmFja1wiXG4gICAqIHRvIHRoZSBwYWdlIHdpdGggdGhlIGZvcm0gb24gaXQuXG4gICAqL1xuICByZXBsYWNlPzogYm9vbGVhbjtcblxuICAvKipcbiAgICogU3RhdGUgb2JqZWN0IHRvIGFkZCB0byB0aGUgaGlzdG9yeSBzdGFjayBlbnRyeSBmb3IgdGhpcyBuYXZpZ2F0aW9uXG4gICAqL1xuICBzdGF0ZT86IGFueTtcblxuICAvKipcbiAgICogRW5hYmxlIHZpZXcgdHJhbnNpdGlvbnMgb24gdGhpcyBGb3JtIG5hdmlnYXRpb25cbiAgICovXG4gIHVuc3RhYmxlX3ZpZXdUcmFuc2l0aW9uPzogYm9vbGVhbjtcbn1cblxudHlwZSBIVE1MU3VibWl0RXZlbnQgPSBSZWFjdC5CYXNlU3ludGhldGljRXZlbnQ8XG4gIFN1Ym1pdEV2ZW50LFxuICBFdmVudCxcbiAgSFRNTEZvcm1FbGVtZW50XG4+O1xuXG50eXBlIEhUTUxGb3JtU3VibWl0dGVyID0gSFRNTEJ1dHRvbkVsZW1lbnQgfCBIVE1MSW5wdXRFbGVtZW50O1xuXG4vKipcbiAqIEEgYEByZW1peC1ydW4vcm91dGVyYC1hd2FyZSBgPGZvcm0+YC4gSXQgYmVoYXZlcyBsaWtlIGEgbm9ybWFsIGZvcm0gZXhjZXB0XG4gKiB0aGF0IHRoZSBpbnRlcmFjdGlvbiB3aXRoIHRoZSBzZXJ2ZXIgaXMgd2l0aCBgZmV0Y2hgIGluc3RlYWQgb2YgbmV3IGRvY3VtZW50XG4gKiByZXF1ZXN0cywgYWxsb3dpbmcgY29tcG9uZW50cyB0byBhZGQgbmljZXIgVVggdG8gdGhlIHBhZ2UgYXMgdGhlIGZvcm0gaXNcbiAqIHN1Ym1pdHRlZCBhbmQgcmV0dXJucyB3aXRoIGRhdGEuXG4gKi9cbmV4cG9ydCBjb25zdCBGb3JtID0gUmVhY3QuZm9yd2FyZFJlZjxIVE1MRm9ybUVsZW1lbnQsIEZvcm1Qcm9wcz4oXG4gIChcbiAgICB7XG4gICAgICBmZXRjaGVyS2V5LFxuICAgICAgbmF2aWdhdGUsXG4gICAgICByZWxvYWREb2N1bWVudCxcbiAgICAgIHJlcGxhY2UsXG4gICAgICBzdGF0ZSxcbiAgICAgIG1ldGhvZCA9IGRlZmF1bHRNZXRob2QsXG4gICAgICBhY3Rpb24sXG4gICAgICBvblN1Ym1pdCxcbiAgICAgIHJlbGF0aXZlLFxuICAgICAgcHJldmVudFNjcm9sbFJlc2V0LFxuICAgICAgdW5zdGFibGVfdmlld1RyYW5zaXRpb24sXG4gICAgICAuLi5wcm9wc1xuICAgIH0sXG4gICAgZm9yd2FyZGVkUmVmXG4gICkgPT4ge1xuICAgIGxldCBzdWJtaXQgPSB1c2VTdWJtaXQoKTtcbiAgICBsZXQgZm9ybUFjdGlvbiA9IHVzZUZvcm1BY3Rpb24oYWN0aW9uLCB7IHJlbGF0aXZlIH0pO1xuICAgIGxldCBmb3JtTWV0aG9kOiBIVE1MRm9ybU1ldGhvZCA9XG4gICAgICBtZXRob2QudG9Mb3dlckNhc2UoKSA9PT0gXCJnZXRcIiA/IFwiZ2V0XCIgOiBcInBvc3RcIjtcblxuICAgIGxldCBzdWJtaXRIYW5kbGVyOiBSZWFjdC5Gb3JtRXZlbnRIYW5kbGVyPEhUTUxGb3JtRWxlbWVudD4gPSAoZXZlbnQpID0+IHtcbiAgICAgIG9uU3VibWl0ICYmIG9uU3VibWl0KGV2ZW50KTtcbiAgICAgIGlmIChldmVudC5kZWZhdWx0UHJldmVudGVkKSByZXR1cm47XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgICBsZXQgc3VibWl0dGVyID0gKGV2ZW50IGFzIHVua25vd24gYXMgSFRNTFN1Ym1pdEV2ZW50KS5uYXRpdmVFdmVudFxuICAgICAgICAuc3VibWl0dGVyIGFzIEhUTUxGb3JtU3VibWl0dGVyIHwgbnVsbDtcblxuICAgICAgbGV0IHN1Ym1pdE1ldGhvZCA9XG4gICAgICAgIChzdWJtaXR0ZXI/LmdldEF0dHJpYnV0ZShcImZvcm1tZXRob2RcIikgYXMgSFRNTEZvcm1NZXRob2QgfCB1bmRlZmluZWQpIHx8XG4gICAgICAgIG1ldGhvZDtcblxuICAgICAgc3VibWl0KHN1Ym1pdHRlciB8fCBldmVudC5jdXJyZW50VGFyZ2V0LCB7XG4gICAgICAgIGZldGNoZXJLZXksXG4gICAgICAgIG1ldGhvZDogc3VibWl0TWV0aG9kLFxuICAgICAgICBuYXZpZ2F0ZSxcbiAgICAgICAgcmVwbGFjZSxcbiAgICAgICAgc3RhdGUsXG4gICAgICAgIHJlbGF0aXZlLFxuICAgICAgICBwcmV2ZW50U2Nyb2xsUmVzZXQsXG4gICAgICAgIHVuc3RhYmxlX3ZpZXdUcmFuc2l0aW9uLFxuICAgICAgfSk7XG4gICAgfTtcblxuICAgIHJldHVybiAoXG4gICAgICA8Zm9ybVxuICAgICAgICByZWY9e2ZvcndhcmRlZFJlZn1cbiAgICAgICAgbWV0aG9kPXtmb3JtTWV0aG9kfVxuICAgICAgICBhY3Rpb249e2Zvcm1BY3Rpb259XG4gICAgICAgIG9uU3VibWl0PXtyZWxvYWREb2N1bWVudCA/IG9uU3VibWl0IDogc3VibWl0SGFuZGxlcn1cbiAgICAgICAgey4uLnByb3BzfVxuICAgICAgLz5cbiAgICApO1xuICB9XG4pO1xuXG5pZiAoX19ERVZfXykge1xuICBGb3JtLmRpc3BsYXlOYW1lID0gXCJGb3JtXCI7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgU2Nyb2xsUmVzdG9yYXRpb25Qcm9wcyB7XG4gIGdldEtleT86IEdldFNjcm9sbFJlc3RvcmF0aW9uS2V5RnVuY3Rpb247XG4gIHN0b3JhZ2VLZXk/OiBzdHJpbmc7XG59XG5cbi8qKlxuICogVGhpcyBjb21wb25lbnQgd2lsbCBlbXVsYXRlIHRoZSBicm93c2VyJ3Mgc2Nyb2xsIHJlc3RvcmF0aW9uIG9uIGxvY2F0aW9uXG4gKiBjaGFuZ2VzLlxuICovXG5leHBvcnQgZnVuY3Rpb24gU2Nyb2xsUmVzdG9yYXRpb24oe1xuICBnZXRLZXksXG4gIHN0b3JhZ2VLZXksXG59OiBTY3JvbGxSZXN0b3JhdGlvblByb3BzKSB7XG4gIHVzZVNjcm9sbFJlc3RvcmF0aW9uKHsgZ2V0S2V5LCBzdG9yYWdlS2V5IH0pO1xuICByZXR1cm4gbnVsbDtcbn1cblxuaWYgKF9fREVWX18pIHtcbiAgU2Nyb2xsUmVzdG9yYXRpb24uZGlzcGxheU5hbWUgPSBcIlNjcm9sbFJlc3RvcmF0aW9uXCI7XG59XG4vLyNlbmRyZWdpb25cblxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbi8vI3JlZ2lvbiBIb29rc1xuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuZW51bSBEYXRhUm91dGVySG9vayB7XG4gIFVzZVNjcm9sbFJlc3RvcmF0aW9uID0gXCJ1c2VTY3JvbGxSZXN0b3JhdGlvblwiLFxuICBVc2VTdWJtaXQgPSBcInVzZVN1Ym1pdFwiLFxuICBVc2VTdWJtaXRGZXRjaGVyID0gXCJ1c2VTdWJtaXRGZXRjaGVyXCIsXG4gIFVzZUZldGNoZXIgPSBcInVzZUZldGNoZXJcIixcbiAgdXNlVmlld1RyYW5zaXRpb25TdGF0ZSA9IFwidXNlVmlld1RyYW5zaXRpb25TdGF0ZVwiLFxufVxuXG5lbnVtIERhdGFSb3V0ZXJTdGF0ZUhvb2sge1xuICBVc2VGZXRjaGVyID0gXCJ1c2VGZXRjaGVyXCIsXG4gIFVzZUZldGNoZXJzID0gXCJ1c2VGZXRjaGVyc1wiLFxuICBVc2VTY3JvbGxSZXN0b3JhdGlvbiA9IFwidXNlU2Nyb2xsUmVzdG9yYXRpb25cIixcbn1cblxuLy8gSW50ZXJuYWwgaG9va3NcblxuZnVuY3Rpb24gZ2V0RGF0YVJvdXRlckNvbnNvbGVFcnJvcihcbiAgaG9va05hbWU6IERhdGFSb3V0ZXJIb29rIHwgRGF0YVJvdXRlclN0YXRlSG9va1xuKSB7XG4gIHJldHVybiBgJHtob29rTmFtZX0gbXVzdCBiZSB1c2VkIHdpdGhpbiBhIGRhdGEgcm91dGVyLiAgU2VlIGh0dHBzOi8vcmVhY3Ryb3V0ZXIuY29tL3JvdXRlcnMvcGlja2luZy1hLXJvdXRlci5gO1xufVxuXG5mdW5jdGlvbiB1c2VEYXRhUm91dGVyQ29udGV4dChob29rTmFtZTogRGF0YVJvdXRlckhvb2spIHtcbiAgbGV0IGN0eCA9IFJlYWN0LnVzZUNvbnRleHQoRGF0YVJvdXRlckNvbnRleHQpO1xuICBpbnZhcmlhbnQoY3R4LCBnZXREYXRhUm91dGVyQ29uc29sZUVycm9yKGhvb2tOYW1lKSk7XG4gIHJldHVybiBjdHg7XG59XG5cbmZ1bmN0aW9uIHVzZURhdGFSb3V0ZXJTdGF0ZShob29rTmFtZTogRGF0YVJvdXRlclN0YXRlSG9vaykge1xuICBsZXQgc3RhdGUgPSBSZWFjdC51c2VDb250ZXh0KERhdGFSb3V0ZXJTdGF0ZUNvbnRleHQpO1xuICBpbnZhcmlhbnQoc3RhdGUsIGdldERhdGFSb3V0ZXJDb25zb2xlRXJyb3IoaG9va05hbWUpKTtcbiAgcmV0dXJuIHN0YXRlO1xufVxuXG4vLyBFeHRlcm5hbCBob29rc1xuXG4vKipcbiAqIEhhbmRsZXMgdGhlIGNsaWNrIGJlaGF2aW9yIGZvciByb3V0ZXIgYDxMaW5rPmAgY29tcG9uZW50cy4gVGhpcyBpcyB1c2VmdWwgaWZcbiAqIHlvdSBuZWVkIHRvIGNyZWF0ZSBjdXN0b20gYDxMaW5rPmAgY29tcG9uZW50cyB3aXRoIHRoZSBzYW1lIGNsaWNrIGJlaGF2aW9yIHdlXG4gKiB1c2UgaW4gb3VyIGV4cG9ydGVkIGA8TGluaz5gLlxuICovXG5leHBvcnQgZnVuY3Rpb24gdXNlTGlua0NsaWNrSGFuZGxlcjxFIGV4dGVuZHMgRWxlbWVudCA9IEhUTUxBbmNob3JFbGVtZW50PihcbiAgdG86IFRvLFxuICB7XG4gICAgdGFyZ2V0LFxuICAgIHJlcGxhY2U6IHJlcGxhY2VQcm9wLFxuICAgIHN0YXRlLFxuICAgIHByZXZlbnRTY3JvbGxSZXNldCxcbiAgICByZWxhdGl2ZSxcbiAgICB1bnN0YWJsZV92aWV3VHJhbnNpdGlvbixcbiAgfToge1xuICAgIHRhcmdldD86IFJlYWN0LkhUTUxBdHRyaWJ1dGVBbmNob3JUYXJnZXQ7XG4gICAgcmVwbGFjZT86IGJvb2xlYW47XG4gICAgc3RhdGU/OiBhbnk7XG4gICAgcHJldmVudFNjcm9sbFJlc2V0PzogYm9vbGVhbjtcbiAgICByZWxhdGl2ZT86IFJlbGF0aXZlUm91dGluZ1R5cGU7XG4gICAgdW5zdGFibGVfdmlld1RyYW5zaXRpb24/OiBib29sZWFuO1xuICB9ID0ge31cbik6IChldmVudDogUmVhY3QuTW91c2VFdmVudDxFLCBNb3VzZUV2ZW50PikgPT4gdm9pZCB7XG4gIGxldCBuYXZpZ2F0ZSA9IHVzZU5hdmlnYXRlKCk7XG4gIGxldCBsb2NhdGlvbiA9IHVzZUxvY2F0aW9uKCk7XG4gIGxldCBwYXRoID0gdXNlUmVzb2x2ZWRQYXRoKHRvLCB7IHJlbGF0aXZlIH0pO1xuXG4gIHJldHVybiBSZWFjdC51c2VDYWxsYmFjayhcbiAgICAoZXZlbnQ6IFJlYWN0Lk1vdXNlRXZlbnQ8RSwgTW91c2VFdmVudD4pID0+IHtcbiAgICAgIGlmIChzaG91bGRQcm9jZXNzTGlua0NsaWNrKGV2ZW50LCB0YXJnZXQpKSB7XG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICAgICAgLy8gSWYgdGhlIFVSTCBoYXNuJ3QgY2hhbmdlZCwgYSByZWd1bGFyIDxhPiB3aWxsIGRvIGEgcmVwbGFjZSBpbnN0ZWFkIG9mXG4gICAgICAgIC8vIGEgcHVzaCwgc28gZG8gdGhlIHNhbWUgaGVyZSB1bmxlc3MgdGhlIHJlcGxhY2UgcHJvcCBpcyBleHBsaWNpdGx5IHNldFxuICAgICAgICBsZXQgcmVwbGFjZSA9XG4gICAgICAgICAgcmVwbGFjZVByb3AgIT09IHVuZGVmaW5lZFxuICAgICAgICAgICAgPyByZXBsYWNlUHJvcFxuICAgICAgICAgICAgOiBjcmVhdGVQYXRoKGxvY2F0aW9uKSA9PT0gY3JlYXRlUGF0aChwYXRoKTtcblxuICAgICAgICBuYXZpZ2F0ZSh0bywge1xuICAgICAgICAgIHJlcGxhY2UsXG4gICAgICAgICAgc3RhdGUsXG4gICAgICAgICAgcHJldmVudFNjcm9sbFJlc2V0LFxuICAgICAgICAgIHJlbGF0aXZlLFxuICAgICAgICAgIHVuc3RhYmxlX3ZpZXdUcmFuc2l0aW9uLFxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9LFxuICAgIFtcbiAgICAgIGxvY2F0aW9uLFxuICAgICAgbmF2aWdhdGUsXG4gICAgICBwYXRoLFxuICAgICAgcmVwbGFjZVByb3AsXG4gICAgICBzdGF0ZSxcbiAgICAgIHRhcmdldCxcbiAgICAgIHRvLFxuICAgICAgcHJldmVudFNjcm9sbFJlc2V0LFxuICAgICAgcmVsYXRpdmUsXG4gICAgICB1bnN0YWJsZV92aWV3VHJhbnNpdGlvbixcbiAgICBdXG4gICk7XG59XG5cbi8qKlxuICogQSBjb252ZW5pZW50IHdyYXBwZXIgZm9yIHJlYWRpbmcgYW5kIHdyaXRpbmcgc2VhcmNoIHBhcmFtZXRlcnMgdmlhIHRoZVxuICogVVJMU2VhcmNoUGFyYW1zIGludGVyZmFjZS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHVzZVNlYXJjaFBhcmFtcyhcbiAgZGVmYXVsdEluaXQ/OiBVUkxTZWFyY2hQYXJhbXNJbml0XG4pOiBbVVJMU2VhcmNoUGFyYW1zLCBTZXRVUkxTZWFyY2hQYXJhbXNdIHtcbiAgd2FybmluZyhcbiAgICB0eXBlb2YgVVJMU2VhcmNoUGFyYW1zICE9PSBcInVuZGVmaW5lZFwiLFxuICAgIGBZb3UgY2Fubm90IHVzZSB0aGUgXFxgdXNlU2VhcmNoUGFyYW1zXFxgIGhvb2sgaW4gYSBicm93c2VyIHRoYXQgZG9lcyBub3QgYCArXG4gICAgICBgc3VwcG9ydCB0aGUgVVJMU2VhcmNoUGFyYW1zIEFQSS4gSWYgeW91IG5lZWQgdG8gc3VwcG9ydCBJbnRlcm5ldCBgICtcbiAgICAgIGBFeHBsb3JlciAxMSwgd2UgcmVjb21tZW5kIHlvdSBsb2FkIGEgcG9seWZpbGwgc3VjaCBhcyBgICtcbiAgICAgIGBodHRwczovL2dpdGh1Yi5jb20vdW5nYXAvdXJsLXNlYXJjaC1wYXJhbXNcXG5cXG5gICtcbiAgICAgIGBJZiB5b3UncmUgdW5zdXJlIGhvdyB0byBsb2FkIHBvbHlmaWxscywgd2UgcmVjb21tZW5kIHlvdSBjaGVjayBvdXQgYCArXG4gICAgICBgaHR0cHM6Ly9wb2x5ZmlsbC5pby92My8gd2hpY2ggcHJvdmlkZXMgc29tZSByZWNvbW1lbmRhdGlvbnMgYWJvdXQgaG93IGAgK1xuICAgICAgYHRvIGxvYWQgcG9seWZpbGxzIG9ubHkgZm9yIHVzZXJzIHRoYXQgbmVlZCB0aGVtLCBpbnN0ZWFkIG9mIGZvciBldmVyeSBgICtcbiAgICAgIGB1c2VyLmBcbiAgKTtcblxuICBsZXQgZGVmYXVsdFNlYXJjaFBhcmFtc1JlZiA9IFJlYWN0LnVzZVJlZihjcmVhdGVTZWFyY2hQYXJhbXMoZGVmYXVsdEluaXQpKTtcbiAgbGV0IGhhc1NldFNlYXJjaFBhcmFtc1JlZiA9IFJlYWN0LnVzZVJlZihmYWxzZSk7XG5cbiAgbGV0IGxvY2F0aW9uID0gdXNlTG9jYXRpb24oKTtcbiAgbGV0IHNlYXJjaFBhcmFtcyA9IFJlYWN0LnVzZU1lbW8oXG4gICAgKCkgPT5cbiAgICAgIC8vIE9ubHkgbWVyZ2UgaW4gdGhlIGRlZmF1bHRzIGlmIHdlIGhhdmVuJ3QgeWV0IGNhbGxlZCBzZXRTZWFyY2hQYXJhbXMuXG4gICAgICAvLyBPbmNlIHdlIGNhbGwgdGhhdCB3ZSB3YW50IHRob3NlIHRvIHRha2UgcHJlY2VkZW5jZSwgb3RoZXJ3aXNlIHlvdSBjYW4ndFxuICAgICAgLy8gcmVtb3ZlIGEgcGFyYW0gd2l0aCBzZXRTZWFyY2hQYXJhbXMoe30pIGlmIGl0IGhhcyBhbiBpbml0aWFsIHZhbHVlXG4gICAgICBnZXRTZWFyY2hQYXJhbXNGb3JMb2NhdGlvbihcbiAgICAgICAgbG9jYXRpb24uc2VhcmNoLFxuICAgICAgICBoYXNTZXRTZWFyY2hQYXJhbXNSZWYuY3VycmVudCA/IG51bGwgOiBkZWZhdWx0U2VhcmNoUGFyYW1zUmVmLmN1cnJlbnRcbiAgICAgICksXG4gICAgW2xvY2F0aW9uLnNlYXJjaF1cbiAgKTtcblxuICBsZXQgbmF2aWdhdGUgPSB1c2VOYXZpZ2F0ZSgpO1xuICBsZXQgc2V0U2VhcmNoUGFyYW1zID0gUmVhY3QudXNlQ2FsbGJhY2s8U2V0VVJMU2VhcmNoUGFyYW1zPihcbiAgICAobmV4dEluaXQsIG5hdmlnYXRlT3B0aW9ucykgPT4ge1xuICAgICAgY29uc3QgbmV3U2VhcmNoUGFyYW1zID0gY3JlYXRlU2VhcmNoUGFyYW1zKFxuICAgICAgICB0eXBlb2YgbmV4dEluaXQgPT09IFwiZnVuY3Rpb25cIiA/IG5leHRJbml0KHNlYXJjaFBhcmFtcykgOiBuZXh0SW5pdFxuICAgICAgKTtcbiAgICAgIGhhc1NldFNlYXJjaFBhcmFtc1JlZi5jdXJyZW50ID0gdHJ1ZTtcbiAgICAgIG5hdmlnYXRlKFwiP1wiICsgbmV3U2VhcmNoUGFyYW1zLCBuYXZpZ2F0ZU9wdGlvbnMpO1xuICAgIH0sXG4gICAgW25hdmlnYXRlLCBzZWFyY2hQYXJhbXNdXG4gICk7XG5cbiAgcmV0dXJuIFtzZWFyY2hQYXJhbXMsIHNldFNlYXJjaFBhcmFtc107XG59XG5cbmV4cG9ydCB0eXBlIFNldFVSTFNlYXJjaFBhcmFtcyA9IChcbiAgbmV4dEluaXQ/OlxuICAgIHwgVVJMU2VhcmNoUGFyYW1zSW5pdFxuICAgIHwgKChwcmV2OiBVUkxTZWFyY2hQYXJhbXMpID0+IFVSTFNlYXJjaFBhcmFtc0luaXQpLFxuICBuYXZpZ2F0ZU9wdHM/OiBOYXZpZ2F0ZU9wdGlvbnNcbikgPT4gdm9pZDtcblxuLyoqXG4gKiBTdWJtaXRzIGEgSFRNTCBgPGZvcm0+YCB0byB0aGUgc2VydmVyIHdpdGhvdXQgcmVsb2FkaW5nIHRoZSBwYWdlLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIFN1Ym1pdEZ1bmN0aW9uIHtcbiAgKFxuICAgIC8qKlxuICAgICAqIFNwZWNpZmllcyB0aGUgYDxmb3JtPmAgdG8gYmUgc3VibWl0dGVkIHRvIHRoZSBzZXJ2ZXIsIGEgc3BlY2lmaWNcbiAgICAgKiBgPGJ1dHRvbj5gIG9yIGA8aW5wdXQgdHlwZT1cInN1Ym1pdFwiPmAgdG8gdXNlIHRvIHN1Ym1pdCB0aGUgZm9ybSwgb3Igc29tZVxuICAgICAqIGFyYml0cmFyeSBkYXRhIHRvIHN1Ym1pdC5cbiAgICAgKlxuICAgICAqIE5vdGU6IFdoZW4gdXNpbmcgYSBgPGJ1dHRvbj5gIGl0cyBgbmFtZWAgYW5kIGB2YWx1ZWAgd2lsbCBhbHNvIGJlXG4gICAgICogaW5jbHVkZWQgaW4gdGhlIGZvcm0gZGF0YSB0aGF0IGlzIHN1Ym1pdHRlZC5cbiAgICAgKi9cbiAgICB0YXJnZXQ6IFN1Ym1pdFRhcmdldCxcblxuICAgIC8qKlxuICAgICAqIE9wdGlvbnMgdGhhdCBvdmVycmlkZSB0aGUgYDxmb3JtPmAncyBvd24gYXR0cmlidXRlcy4gUmVxdWlyZWQgd2hlblxuICAgICAqIHN1Ym1pdHRpbmcgYXJiaXRyYXJ5IGRhdGEgd2l0aG91dCBhIGJhY2tpbmcgYDxmb3JtPmAuXG4gICAgICovXG4gICAgb3B0aW9ucz86IFN1Ym1pdE9wdGlvbnNcbiAgKTogdm9pZDtcbn1cblxuLyoqXG4gKiBTdWJtaXRzIGEgZmV0Y2hlciBgPGZvcm0+YCB0byB0aGUgc2VydmVyIHdpdGhvdXQgcmVsb2FkaW5nIHRoZSBwYWdlLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIEZldGNoZXJTdWJtaXRGdW5jdGlvbiB7XG4gIChcbiAgICB0YXJnZXQ6IFN1Ym1pdFRhcmdldCxcbiAgICAvLyBGZXRjaGVycyBjYW5ub3QgcmVwbGFjZSBvciBzZXQgc3RhdGUgYmVjYXVzZSB0aGV5IGFyZSBub3QgbmF2aWdhdGlvbiBldmVudHNcbiAgICBvcHRpb25zPzogT21pdDxTdWJtaXRPcHRpb25zLCBcInJlcGxhY2VcIiB8IFwic3RhdGVcIj5cbiAgKTogdm9pZDtcbn1cblxuZnVuY3Rpb24gdmFsaWRhdGVDbGllbnRTaWRlU3VibWlzc2lvbigpIHtcbiAgaWYgKHR5cGVvZiBkb2N1bWVudCA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgIFwiWW91IGFyZSBjYWxsaW5nIHN1Ym1pdCBkdXJpbmcgdGhlIHNlcnZlciByZW5kZXIuIFwiICtcbiAgICAgICAgXCJUcnkgY2FsbGluZyBzdWJtaXQgd2l0aGluIGEgYHVzZUVmZmVjdGAgb3IgY2FsbGJhY2sgaW5zdGVhZC5cIlxuICAgICk7XG4gIH1cbn1cblxubGV0IGZldGNoZXJJZCA9IDA7XG5sZXQgZ2V0VW5pcXVlRmV0Y2hlcklkID0gKCkgPT4gYF9fJHtTdHJpbmcoKytmZXRjaGVySWQpfV9fYDtcblxuLyoqXG4gKiBSZXR1cm5zIGEgZnVuY3Rpb24gdGhhdCBtYXkgYmUgdXNlZCB0byBwcm9ncmFtbWF0aWNhbGx5IHN1Ym1pdCBhIGZvcm0gKG9yXG4gKiBzb21lIGFyYml0cmFyeSBkYXRhKSB0byB0aGUgc2VydmVyLlxuICovXG5leHBvcnQgZnVuY3Rpb24gdXNlU3VibWl0KCk6IFN1Ym1pdEZ1bmN0aW9uIHtcbiAgbGV0IHsgcm91dGVyIH0gPSB1c2VEYXRhUm91dGVyQ29udGV4dChEYXRhUm91dGVySG9vay5Vc2VTdWJtaXQpO1xuICBsZXQgeyBiYXNlbmFtZSB9ID0gUmVhY3QudXNlQ29udGV4dChOYXZpZ2F0aW9uQ29udGV4dCk7XG4gIGxldCBjdXJyZW50Um91dGVJZCA9IHVzZVJvdXRlSWQoKTtcblxuICByZXR1cm4gUmVhY3QudXNlQ2FsbGJhY2s8U3VibWl0RnVuY3Rpb24+KFxuICAgICh0YXJnZXQsIG9wdGlvbnMgPSB7fSkgPT4ge1xuICAgICAgdmFsaWRhdGVDbGllbnRTaWRlU3VibWlzc2lvbigpO1xuXG4gICAgICBsZXQgeyBhY3Rpb24sIG1ldGhvZCwgZW5jVHlwZSwgZm9ybURhdGEsIGJvZHkgfSA9IGdldEZvcm1TdWJtaXNzaW9uSW5mbyhcbiAgICAgICAgdGFyZ2V0LFxuICAgICAgICBiYXNlbmFtZVxuICAgICAgKTtcblxuICAgICAgaWYgKG9wdGlvbnMubmF2aWdhdGUgPT09IGZhbHNlKSB7XG4gICAgICAgIGxldCBrZXkgPSBvcHRpb25zLmZldGNoZXJLZXkgfHwgZ2V0VW5pcXVlRmV0Y2hlcklkKCk7XG4gICAgICAgIHJvdXRlci5mZXRjaChrZXksIGN1cnJlbnRSb3V0ZUlkLCBvcHRpb25zLmFjdGlvbiB8fCBhY3Rpb24sIHtcbiAgICAgICAgICBwcmV2ZW50U2Nyb2xsUmVzZXQ6IG9wdGlvbnMucHJldmVudFNjcm9sbFJlc2V0LFxuICAgICAgICAgIGZvcm1EYXRhLFxuICAgICAgICAgIGJvZHksXG4gICAgICAgICAgZm9ybU1ldGhvZDogb3B0aW9ucy5tZXRob2QgfHwgKG1ldGhvZCBhcyBIVE1MRm9ybU1ldGhvZCksXG4gICAgICAgICAgZm9ybUVuY1R5cGU6IG9wdGlvbnMuZW5jVHlwZSB8fCAoZW5jVHlwZSBhcyBGb3JtRW5jVHlwZSksXG4gICAgICAgICAgdW5zdGFibGVfZmx1c2hTeW5jOiBvcHRpb25zLnVuc3RhYmxlX2ZsdXNoU3luYyxcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByb3V0ZXIubmF2aWdhdGUob3B0aW9ucy5hY3Rpb24gfHwgYWN0aW9uLCB7XG4gICAgICAgICAgcHJldmVudFNjcm9sbFJlc2V0OiBvcHRpb25zLnByZXZlbnRTY3JvbGxSZXNldCxcbiAgICAgICAgICBmb3JtRGF0YSxcbiAgICAgICAgICBib2R5LFxuICAgICAgICAgIGZvcm1NZXRob2Q6IG9wdGlvbnMubWV0aG9kIHx8IChtZXRob2QgYXMgSFRNTEZvcm1NZXRob2QpLFxuICAgICAgICAgIGZvcm1FbmNUeXBlOiBvcHRpb25zLmVuY1R5cGUgfHwgKGVuY1R5cGUgYXMgRm9ybUVuY1R5cGUpLFxuICAgICAgICAgIHJlcGxhY2U6IG9wdGlvbnMucmVwbGFjZSxcbiAgICAgICAgICBzdGF0ZTogb3B0aW9ucy5zdGF0ZSxcbiAgICAgICAgICBmcm9tUm91dGVJZDogY3VycmVudFJvdXRlSWQsXG4gICAgICAgICAgdW5zdGFibGVfZmx1c2hTeW5jOiBvcHRpb25zLnVuc3RhYmxlX2ZsdXNoU3luYyxcbiAgICAgICAgICB1bnN0YWJsZV92aWV3VHJhbnNpdGlvbjogb3B0aW9ucy51bnN0YWJsZV92aWV3VHJhbnNpdGlvbixcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSxcbiAgICBbcm91dGVyLCBiYXNlbmFtZSwgY3VycmVudFJvdXRlSWRdXG4gICk7XG59XG5cbi8vIHY3OiBFdmVudHVhbGx5IHdlIHNob3VsZCBkZXByZWNhdGUgdGhpcyBlbnRpcmVseSBpbiBmYXZvciBvZiB1c2luZyB0aGVcbi8vIHJvdXRlciBtZXRob2QgZGlyZWN0bHk/XG5leHBvcnQgZnVuY3Rpb24gdXNlRm9ybUFjdGlvbihcbiAgYWN0aW9uPzogc3RyaW5nLFxuICB7IHJlbGF0aXZlIH06IHsgcmVsYXRpdmU/OiBSZWxhdGl2ZVJvdXRpbmdUeXBlIH0gPSB7fVxuKTogc3RyaW5nIHtcbiAgbGV0IHsgYmFzZW5hbWUgfSA9IFJlYWN0LnVzZUNvbnRleHQoTmF2aWdhdGlvbkNvbnRleHQpO1xuICBsZXQgcm91dGVDb250ZXh0ID0gUmVhY3QudXNlQ29udGV4dChSb3V0ZUNvbnRleHQpO1xuICBpbnZhcmlhbnQocm91dGVDb250ZXh0LCBcInVzZUZvcm1BY3Rpb24gbXVzdCBiZSB1c2VkIGluc2lkZSBhIFJvdXRlQ29udGV4dFwiKTtcblxuICBsZXQgW21hdGNoXSA9IHJvdXRlQ29udGV4dC5tYXRjaGVzLnNsaWNlKC0xKTtcbiAgLy8gU2hhbGxvdyBjbG9uZSBwYXRoIHNvIHdlIGNhbiBtb2RpZnkgaXQgYmVsb3csIG90aGVyd2lzZSB3ZSBtb2RpZnkgdGhlXG4gIC8vIG9iamVjdCByZWZlcmVuY2VkIGJ5IHVzZU1lbW8gaW5zaWRlIHVzZVJlc29sdmVkUGF0aFxuICBsZXQgcGF0aCA9IHsgLi4udXNlUmVzb2x2ZWRQYXRoKGFjdGlvbiA/IGFjdGlvbiA6IFwiLlwiLCB7IHJlbGF0aXZlIH0pIH07XG5cbiAgLy8gSWYgbm8gYWN0aW9uIHdhcyBzcGVjaWZpZWQsIGJyb3dzZXJzIHdpbGwgcGVyc2lzdCBjdXJyZW50IHNlYXJjaCBwYXJhbXNcbiAgLy8gd2hlbiBkZXRlcm1pbmluZyB0aGUgcGF0aCwgc28gbWF0Y2ggdGhhdCBiZWhhdmlvclxuICAvLyBodHRwczovL2dpdGh1Yi5jb20vcmVtaXgtcnVuL3JlbWl4L2lzc3Vlcy85MjdcbiAgbGV0IGxvY2F0aW9uID0gdXNlTG9jYXRpb24oKTtcbiAgaWYgKGFjdGlvbiA9PSBudWxsKSB7XG4gICAgLy8gU2FmZSB0byB3cml0ZSB0byB0aGlzIGRpcmVjdGx5IGhlcmUgc2luY2UgaWYgYWN0aW9uIHdhcyB1bmRlZmluZWQsIHdlXG4gICAgLy8gd291bGQgaGF2ZSBjYWxsZWQgdXNlUmVzb2x2ZWRQYXRoKFwiLlwiKSB3aGljaCB3aWxsIG5ldmVyIGluY2x1ZGUgYSBzZWFyY2hcbiAgICBwYXRoLnNlYXJjaCA9IGxvY2F0aW9uLnNlYXJjaDtcblxuICAgIC8vIFdoZW4gZ3JhYmJpbmcgc2VhcmNoIHBhcmFtcyBmcm9tIHRoZSBVUkwsIHJlbW92ZSBhbnkgaW5jbHVkZWQgP2luZGV4IHBhcmFtXG4gICAgLy8gc2luY2UgaXQgbWlnaHQgbm90IGFwcGx5IHRvIG91ciBjb250ZXh0dWFsIHJvdXRlLiAgV2UgYWRkIGl0IGJhY2sgYmFzZWRcbiAgICAvLyBvbiBtYXRjaC5yb3V0ZS5pbmRleCBiZWxvd1xuICAgIGxldCBwYXJhbXMgPSBuZXcgVVJMU2VhcmNoUGFyYW1zKHBhdGguc2VhcmNoKTtcbiAgICBpZiAocGFyYW1zLmhhcyhcImluZGV4XCIpICYmIHBhcmFtcy5nZXQoXCJpbmRleFwiKSA9PT0gXCJcIikge1xuICAgICAgcGFyYW1zLmRlbGV0ZShcImluZGV4XCIpO1xuICAgICAgcGF0aC5zZWFyY2ggPSBwYXJhbXMudG9TdHJpbmcoKSA/IGA/JHtwYXJhbXMudG9TdHJpbmcoKX1gIDogXCJcIjtcbiAgICB9XG4gIH1cblxuICBpZiAoKCFhY3Rpb24gfHwgYWN0aW9uID09PSBcIi5cIikgJiYgbWF0Y2gucm91dGUuaW5kZXgpIHtcbiAgICBwYXRoLnNlYXJjaCA9IHBhdGguc2VhcmNoXG4gICAgICA/IHBhdGguc2VhcmNoLnJlcGxhY2UoL15cXD8vLCBcIj9pbmRleCZcIilcbiAgICAgIDogXCI/aW5kZXhcIjtcbiAgfVxuXG4gIC8vIElmIHdlJ3JlIG9wZXJhdGluZyB3aXRoaW4gYSBiYXNlbmFtZSwgcHJlcGVuZCBpdCB0byB0aGUgcGF0aG5hbWUgcHJpb3JcbiAgLy8gdG8gY3JlYXRpbmcgdGhlIGZvcm0gYWN0aW9uLiAgSWYgdGhpcyBpcyBhIHJvb3QgbmF2aWdhdGlvbiwgdGhlbiBqdXN0IHVzZVxuICAvLyB0aGUgcmF3IGJhc2VuYW1lIHdoaWNoIGFsbG93cyB0aGUgYmFzZW5hbWUgdG8gaGF2ZSBmdWxsIGNvbnRyb2wgb3ZlciB0aGVcbiAgLy8gcHJlc2VuY2Ugb2YgYSB0cmFpbGluZyBzbGFzaCBvbiByb290IGFjdGlvbnNcbiAgaWYgKGJhc2VuYW1lICE9PSBcIi9cIikge1xuICAgIHBhdGgucGF0aG5hbWUgPVxuICAgICAgcGF0aC5wYXRobmFtZSA9PT0gXCIvXCIgPyBiYXNlbmFtZSA6IGpvaW5QYXRocyhbYmFzZW5hbWUsIHBhdGgucGF0aG5hbWVdKTtcbiAgfVxuXG4gIHJldHVybiBjcmVhdGVQYXRoKHBhdGgpO1xufVxuXG5leHBvcnQgdHlwZSBGZXRjaGVyV2l0aENvbXBvbmVudHM8VERhdGE+ID0gRmV0Y2hlcjxURGF0YT4gJiB7XG4gIEZvcm06IFJlYWN0LkZvcndhcmRSZWZFeG90aWNDb21wb25lbnQ8XG4gICAgRmV0Y2hlckZvcm1Qcm9wcyAmIFJlYWN0LlJlZkF0dHJpYnV0ZXM8SFRNTEZvcm1FbGVtZW50PlxuICA+O1xuICBzdWJtaXQ6IEZldGNoZXJTdWJtaXRGdW5jdGlvbjtcbiAgbG9hZDogKGhyZWY6IHN0cmluZywgb3B0cz86IHsgdW5zdGFibGVfZmx1c2hTeW5jPzogYm9vbGVhbiB9KSA9PiB2b2lkO1xufTtcblxuLy8gVE9ETzogKHY3KSBDaGFuZ2UgdGhlIHVzZUZldGNoZXIgZ2VuZXJpYyBkZWZhdWx0IGZyb20gYGFueWAgdG8gYHVua25vd25gXG5cbi8qKlxuICogSW50ZXJhY3RzIHdpdGggcm91dGUgbG9hZGVycyBhbmQgYWN0aW9ucyB3aXRob3V0IGNhdXNpbmcgYSBuYXZpZ2F0aW9uLiBHcmVhdFxuICogZm9yIGFueSBpbnRlcmFjdGlvbiB0aGF0IHN0YXlzIG9uIHRoZSBzYW1lIHBhZ2UuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB1c2VGZXRjaGVyPFREYXRhID0gYW55Pih7XG4gIGtleSxcbn06IHsga2V5Pzogc3RyaW5nIH0gPSB7fSk6IEZldGNoZXJXaXRoQ29tcG9uZW50czxURGF0YT4ge1xuICBsZXQgeyByb3V0ZXIgfSA9IHVzZURhdGFSb3V0ZXJDb250ZXh0KERhdGFSb3V0ZXJIb29rLlVzZUZldGNoZXIpO1xuICBsZXQgc3RhdGUgPSB1c2VEYXRhUm91dGVyU3RhdGUoRGF0YVJvdXRlclN0YXRlSG9vay5Vc2VGZXRjaGVyKTtcbiAgbGV0IGZldGNoZXJEYXRhID0gUmVhY3QudXNlQ29udGV4dChGZXRjaGVyc0NvbnRleHQpO1xuICBsZXQgcm91dGUgPSBSZWFjdC51c2VDb250ZXh0KFJvdXRlQ29udGV4dCk7XG4gIGxldCByb3V0ZUlkID0gcm91dGUubWF0Y2hlc1tyb3V0ZS5tYXRjaGVzLmxlbmd0aCAtIDFdPy5yb3V0ZS5pZDtcblxuICBpbnZhcmlhbnQoZmV0Y2hlckRhdGEsIGB1c2VGZXRjaGVyIG11c3QgYmUgdXNlZCBpbnNpZGUgYSBGZXRjaGVyc0NvbnRleHRgKTtcbiAgaW52YXJpYW50KHJvdXRlLCBgdXNlRmV0Y2hlciBtdXN0IGJlIHVzZWQgaW5zaWRlIGEgUm91dGVDb250ZXh0YCk7XG4gIGludmFyaWFudChcbiAgICByb3V0ZUlkICE9IG51bGwsXG4gICAgYHVzZUZldGNoZXIgY2FuIG9ubHkgYmUgdXNlZCBvbiByb3V0ZXMgdGhhdCBjb250YWluIGEgdW5pcXVlIFwiaWRcImBcbiAgKTtcblxuICAvLyBGZXRjaGVyIGtleSBoYW5kbGluZ1xuICAvLyBPSyB0byBjYWxsIGNvbmRpdGlvbmFsbHkgdG8gZmVhdHVyZSBkZXRlY3QgYHVzZUlkYFxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QtaG9va3MvcnVsZXMtb2YtaG9va3NcbiAgbGV0IGRlZmF1bHRLZXkgPSB1c2VJZEltcGwgPyB1c2VJZEltcGwoKSA6IFwiXCI7XG4gIGxldCBbZmV0Y2hlcktleSwgc2V0RmV0Y2hlcktleV0gPSBSZWFjdC51c2VTdGF0ZTxzdHJpbmc+KGtleSB8fCBkZWZhdWx0S2V5KTtcbiAgaWYgKGtleSAmJiBrZXkgIT09IGZldGNoZXJLZXkpIHtcbiAgICBzZXRGZXRjaGVyS2V5KGtleSk7XG4gIH0gZWxzZSBpZiAoIWZldGNoZXJLZXkpIHtcbiAgICAvLyBXZSB3aWxsIG9ubHkgZmFsbCB0aHJvdWdoIGhlcmUgd2hlbiBgdXNlSWRgIGlzIG5vdCBhdmFpbGFibGVcbiAgICBzZXRGZXRjaGVyS2V5KGdldFVuaXF1ZUZldGNoZXJJZCgpKTtcbiAgfVxuXG4gIC8vIFJlZ2lzdHJhdGlvbi9jbGVhbnVwXG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgcm91dGVyLmdldEZldGNoZXIoZmV0Y2hlcktleSk7XG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIC8vIFRlbGwgdGhlIHJvdXRlciB3ZSd2ZSB1bm1vdW50ZWQgLSBpZiB2N19mZXRjaGVyUGVyc2lzdCBpcyBlbmFibGVkIHRoaXNcbiAgICAgIC8vIHdpbGwgbm90IGRlbGV0ZSBpbW1lZGlhdGVseSBidXQgaW5zdGVhZCBxdWV1ZSB1cCBhIGRlbGV0ZSBhZnRlciB0aGVcbiAgICAgIC8vIGZldGNoZXIgcmV0dXJucyB0byBhbiBgaWRsZWAgc3RhdGVcbiAgICAgIHJvdXRlci5kZWxldGVGZXRjaGVyKGZldGNoZXJLZXkpO1xuICAgIH07XG4gIH0sIFtyb3V0ZXIsIGZldGNoZXJLZXldKTtcblxuICAvLyBGZXRjaGVyIGFkZGl0aW9uc1xuICBsZXQgbG9hZCA9IFJlYWN0LnVzZUNhbGxiYWNrKFxuICAgIChocmVmOiBzdHJpbmcsIG9wdHM/OiB7IHVuc3RhYmxlX2ZsdXNoU3luYz86IGJvb2xlYW4gfSkgPT4ge1xuICAgICAgaW52YXJpYW50KHJvdXRlSWQsIFwiTm8gcm91dGVJZCBhdmFpbGFibGUgZm9yIGZldGNoZXIubG9hZCgpXCIpO1xuICAgICAgcm91dGVyLmZldGNoKGZldGNoZXJLZXksIHJvdXRlSWQsIGhyZWYsIG9wdHMpO1xuICAgIH0sXG4gICAgW2ZldGNoZXJLZXksIHJvdXRlSWQsIHJvdXRlcl1cbiAgKTtcblxuICBsZXQgc3VibWl0SW1wbCA9IHVzZVN1Ym1pdCgpO1xuICBsZXQgc3VibWl0ID0gUmVhY3QudXNlQ2FsbGJhY2s8RmV0Y2hlclN1Ym1pdEZ1bmN0aW9uPihcbiAgICAodGFyZ2V0LCBvcHRzKSA9PiB7XG4gICAgICBzdWJtaXRJbXBsKHRhcmdldCwge1xuICAgICAgICAuLi5vcHRzLFxuICAgICAgICBuYXZpZ2F0ZTogZmFsc2UsXG4gICAgICAgIGZldGNoZXJLZXksXG4gICAgICB9KTtcbiAgICB9LFxuICAgIFtmZXRjaGVyS2V5LCBzdWJtaXRJbXBsXVxuICApO1xuXG4gIGxldCBGZXRjaGVyRm9ybSA9IFJlYWN0LnVzZU1lbW8oKCkgPT4ge1xuICAgIGxldCBGZXRjaGVyRm9ybSA9IFJlYWN0LmZvcndhcmRSZWY8SFRNTEZvcm1FbGVtZW50LCBGZXRjaGVyRm9ybVByb3BzPihcbiAgICAgIChwcm9wcywgcmVmKSA9PiB7XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgPEZvcm0gey4uLnByb3BzfSBuYXZpZ2F0ZT17ZmFsc2V9IGZldGNoZXJLZXk9e2ZldGNoZXJLZXl9IHJlZj17cmVmfSAvPlxuICAgICAgICApO1xuICAgICAgfVxuICAgICk7XG4gICAgaWYgKF9fREVWX18pIHtcbiAgICAgIEZldGNoZXJGb3JtLmRpc3BsYXlOYW1lID0gXCJmZXRjaGVyLkZvcm1cIjtcbiAgICB9XG4gICAgcmV0dXJuIEZldGNoZXJGb3JtO1xuICB9LCBbZmV0Y2hlcktleV0pO1xuXG4gIC8vIEV4cG9zZWQgRmV0Y2hlcldpdGhDb21wb25lbnRzXG4gIGxldCBmZXRjaGVyID0gc3RhdGUuZmV0Y2hlcnMuZ2V0KGZldGNoZXJLZXkpIHx8IElETEVfRkVUQ0hFUjtcbiAgbGV0IGRhdGEgPSBmZXRjaGVyRGF0YS5nZXQoZmV0Y2hlcktleSk7XG4gIGxldCBmZXRjaGVyV2l0aENvbXBvbmVudHMgPSBSZWFjdC51c2VNZW1vKFxuICAgICgpID0+ICh7XG4gICAgICBGb3JtOiBGZXRjaGVyRm9ybSxcbiAgICAgIHN1Ym1pdCxcbiAgICAgIGxvYWQsXG4gICAgICAuLi5mZXRjaGVyLFxuICAgICAgZGF0YSxcbiAgICB9KSxcbiAgICBbRmV0Y2hlckZvcm0sIHN1Ym1pdCwgbG9hZCwgZmV0Y2hlciwgZGF0YV1cbiAgKTtcblxuICByZXR1cm4gZmV0Y2hlcldpdGhDb21wb25lbnRzO1xufVxuXG4vKipcbiAqIFByb3ZpZGVzIGFsbCBmZXRjaGVycyBjdXJyZW50bHkgb24gdGhlIHBhZ2UuIFVzZWZ1bCBmb3IgbGF5b3V0cyBhbmQgcGFyZW50XG4gKiByb3V0ZXMgdGhhdCBuZWVkIHRvIHByb3ZpZGUgcGVuZGluZy9vcHRpbWlzdGljIFVJIHJlZ2FyZGluZyB0aGUgZmV0Y2guXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB1c2VGZXRjaGVycygpOiAoRmV0Y2hlciAmIHsga2V5OiBzdHJpbmcgfSlbXSB7XG4gIGxldCBzdGF0ZSA9IHVzZURhdGFSb3V0ZXJTdGF0ZShEYXRhUm91dGVyU3RhdGVIb29rLlVzZUZldGNoZXJzKTtcbiAgcmV0dXJuIEFycmF5LmZyb20oc3RhdGUuZmV0Y2hlcnMuZW50cmllcygpKS5tYXAoKFtrZXksIGZldGNoZXJdKSA9PiAoe1xuICAgIC4uLmZldGNoZXIsXG4gICAga2V5LFxuICB9KSk7XG59XG5cbmNvbnN0IFNDUk9MTF9SRVNUT1JBVElPTl9TVE9SQUdFX0tFWSA9IFwicmVhY3Qtcm91dGVyLXNjcm9sbC1wb3NpdGlvbnNcIjtcbmxldCBzYXZlZFNjcm9sbFBvc2l0aW9uczogUmVjb3JkPHN0cmluZywgbnVtYmVyPiA9IHt9O1xuXG4vKipcbiAqIFdoZW4gcmVuZGVyZWQgaW5zaWRlIGEgUm91dGVyUHJvdmlkZXIsIHdpbGwgcmVzdG9yZSBzY3JvbGwgcG9zaXRpb25zIG9uIG5hdmlnYXRpb25zXG4gKi9cbmZ1bmN0aW9uIHVzZVNjcm9sbFJlc3RvcmF0aW9uKHtcbiAgZ2V0S2V5LFxuICBzdG9yYWdlS2V5LFxufToge1xuICBnZXRLZXk/OiBHZXRTY3JvbGxSZXN0b3JhdGlvbktleUZ1bmN0aW9uO1xuICBzdG9yYWdlS2V5Pzogc3RyaW5nO1xufSA9IHt9KSB7XG4gIGxldCB7IHJvdXRlciB9ID0gdXNlRGF0YVJvdXRlckNvbnRleHQoRGF0YVJvdXRlckhvb2suVXNlU2Nyb2xsUmVzdG9yYXRpb24pO1xuICBsZXQgeyByZXN0b3JlU2Nyb2xsUG9zaXRpb24sIHByZXZlbnRTY3JvbGxSZXNldCB9ID0gdXNlRGF0YVJvdXRlclN0YXRlKFxuICAgIERhdGFSb3V0ZXJTdGF0ZUhvb2suVXNlU2Nyb2xsUmVzdG9yYXRpb25cbiAgKTtcbiAgbGV0IHsgYmFzZW5hbWUgfSA9IFJlYWN0LnVzZUNvbnRleHQoTmF2aWdhdGlvbkNvbnRleHQpO1xuICBsZXQgbG9jYXRpb24gPSB1c2VMb2NhdGlvbigpO1xuICBsZXQgbWF0Y2hlcyA9IHVzZU1hdGNoZXMoKTtcbiAgbGV0IG5hdmlnYXRpb24gPSB1c2VOYXZpZ2F0aW9uKCk7XG5cbiAgLy8gVHJpZ2dlciBtYW51YWwgc2Nyb2xsIHJlc3RvcmF0aW9uIHdoaWxlIHdlJ3JlIGFjdGl2ZVxuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgIHdpbmRvdy5oaXN0b3J5LnNjcm9sbFJlc3RvcmF0aW9uID0gXCJtYW51YWxcIjtcbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgd2luZG93Lmhpc3Rvcnkuc2Nyb2xsUmVzdG9yYXRpb24gPSBcImF1dG9cIjtcbiAgICB9O1xuICB9LCBbXSk7XG5cbiAgLy8gU2F2ZSBwb3NpdGlvbnMgb24gcGFnZWhpZGVcbiAgdXNlUGFnZUhpZGUoXG4gICAgUmVhY3QudXNlQ2FsbGJhY2soKCkgPT4ge1xuICAgICAgaWYgKG5hdmlnYXRpb24uc3RhdGUgPT09IFwiaWRsZVwiKSB7XG4gICAgICAgIGxldCBrZXkgPSAoZ2V0S2V5ID8gZ2V0S2V5KGxvY2F0aW9uLCBtYXRjaGVzKSA6IG51bGwpIHx8IGxvY2F0aW9uLmtleTtcbiAgICAgICAgc2F2ZWRTY3JvbGxQb3NpdGlvbnNba2V5XSA9IHdpbmRvdy5zY3JvbGxZO1xuICAgICAgfVxuICAgICAgdHJ5IHtcbiAgICAgICAgc2Vzc2lvblN0b3JhZ2Uuc2V0SXRlbShcbiAgICAgICAgICBzdG9yYWdlS2V5IHx8IFNDUk9MTF9SRVNUT1JBVElPTl9TVE9SQUdFX0tFWSxcbiAgICAgICAgICBKU09OLnN0cmluZ2lmeShzYXZlZFNjcm9sbFBvc2l0aW9ucylcbiAgICAgICAgKTtcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIHdhcm5pbmcoXG4gICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgYEZhaWxlZCB0byBzYXZlIHNjcm9sbCBwb3NpdGlvbnMgaW4gc2Vzc2lvblN0b3JhZ2UsIDxTY3JvbGxSZXN0b3JhdGlvbiAvPiB3aWxsIG5vdCB3b3JrIHByb3Blcmx5ICgke2Vycm9yfSkuYFxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgd2luZG93Lmhpc3Rvcnkuc2Nyb2xsUmVzdG9yYXRpb24gPSBcImF1dG9cIjtcbiAgICB9LCBbc3RvcmFnZUtleSwgZ2V0S2V5LCBuYXZpZ2F0aW9uLnN0YXRlLCBsb2NhdGlvbiwgbWF0Y2hlc10pXG4gICk7XG5cbiAgLy8gUmVhZCBpbiBhbnkgc2F2ZWQgc2Nyb2xsIGxvY2F0aW9uc1xuICBpZiAodHlwZW9mIGRvY3VtZW50ICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0LWhvb2tzL3J1bGVzLW9mLWhvb2tzXG4gICAgUmVhY3QudXNlTGF5b3V0RWZmZWN0KCgpID0+IHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGxldCBzZXNzaW9uUG9zaXRpb25zID0gc2Vzc2lvblN0b3JhZ2UuZ2V0SXRlbShcbiAgICAgICAgICBzdG9yYWdlS2V5IHx8IFNDUk9MTF9SRVNUT1JBVElPTl9TVE9SQUdFX0tFWVxuICAgICAgICApO1xuICAgICAgICBpZiAoc2Vzc2lvblBvc2l0aW9ucykge1xuICAgICAgICAgIHNhdmVkU2Nyb2xsUG9zaXRpb25zID0gSlNPTi5wYXJzZShzZXNzaW9uUG9zaXRpb25zKTtcbiAgICAgICAgfVxuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAvLyBuby1vcCwgdXNlIGRlZmF1bHQgZW1wdHkgb2JqZWN0XG4gICAgICB9XG4gICAgfSwgW3N0b3JhZ2VLZXldKTtcblxuICAgIC8vIEVuYWJsZSBzY3JvbGwgcmVzdG9yYXRpb24gaW4gdGhlIHJvdXRlclxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC1ob29rcy9ydWxlcy1vZi1ob29rc1xuICAgIFJlYWN0LnVzZUxheW91dEVmZmVjdCgoKSA9PiB7XG4gICAgICBsZXQgZ2V0S2V5V2l0aG91dEJhc2VuYW1lOiBHZXRTY3JvbGxSZXN0b3JhdGlvbktleUZ1bmN0aW9uIHwgdW5kZWZpbmVkID1cbiAgICAgICAgZ2V0S2V5ICYmIGJhc2VuYW1lICE9PSBcIi9cIlxuICAgICAgICAgID8gKGxvY2F0aW9uLCBtYXRjaGVzKSA9PlxuICAgICAgICAgICAgICBnZXRLZXkoXG4gICAgICAgICAgICAgICAgLy8gU3RyaXAgdGhlIGJhc2VuYW1lIHRvIG1hdGNoIHVzZUxvY2F0aW9uKClcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAuLi5sb2NhdGlvbixcbiAgICAgICAgICAgICAgICAgIHBhdGhuYW1lOlxuICAgICAgICAgICAgICAgICAgICBzdHJpcEJhc2VuYW1lKGxvY2F0aW9uLnBhdGhuYW1lLCBiYXNlbmFtZSkgfHxcbiAgICAgICAgICAgICAgICAgICAgbG9jYXRpb24ucGF0aG5hbWUsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBtYXRjaGVzXG4gICAgICAgICAgICAgIClcbiAgICAgICAgICA6IGdldEtleTtcbiAgICAgIGxldCBkaXNhYmxlU2Nyb2xsUmVzdG9yYXRpb24gPSByb3V0ZXI/LmVuYWJsZVNjcm9sbFJlc3RvcmF0aW9uKFxuICAgICAgICBzYXZlZFNjcm9sbFBvc2l0aW9ucyxcbiAgICAgICAgKCkgPT4gd2luZG93LnNjcm9sbFksXG4gICAgICAgIGdldEtleVdpdGhvdXRCYXNlbmFtZVxuICAgICAgKTtcbiAgICAgIHJldHVybiAoKSA9PiBkaXNhYmxlU2Nyb2xsUmVzdG9yYXRpb24gJiYgZGlzYWJsZVNjcm9sbFJlc3RvcmF0aW9uKCk7XG4gICAgfSwgW3JvdXRlciwgYmFzZW5hbWUsIGdldEtleV0pO1xuXG4gICAgLy8gUmVzdG9yZSBzY3JvbGxpbmcgd2hlbiBzdGF0ZS5yZXN0b3JlU2Nyb2xsUG9zaXRpb24gY2hhbmdlc1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC1ob29rcy9ydWxlcy1vZi1ob29rc1xuICAgIFJlYWN0LnVzZUxheW91dEVmZmVjdCgoKSA9PiB7XG4gICAgICAvLyBFeHBsaWNpdCBmYWxzZSBtZWFucyBkb24ndCBkbyBhbnl0aGluZyAodXNlZCBmb3Igc3VibWlzc2lvbnMpXG4gICAgICBpZiAocmVzdG9yZVNjcm9sbFBvc2l0aW9uID09PSBmYWxzZSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIC8vIGJlZW4gaGVyZSBiZWZvcmUsIHNjcm9sbCB0byBpdFxuICAgICAgaWYgKHR5cGVvZiByZXN0b3JlU2Nyb2xsUG9zaXRpb24gPT09IFwibnVtYmVyXCIpIHtcbiAgICAgICAgd2luZG93LnNjcm9sbFRvKDAsIHJlc3RvcmVTY3JvbGxQb3NpdGlvbik7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgLy8gdHJ5IHRvIHNjcm9sbCB0byB0aGUgaGFzaFxuICAgICAgaWYgKGxvY2F0aW9uLmhhc2gpIHtcbiAgICAgICAgbGV0IGVsID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXG4gICAgICAgICAgZGVjb2RlVVJJQ29tcG9uZW50KGxvY2F0aW9uLmhhc2guc2xpY2UoMSkpXG4gICAgICAgICk7XG4gICAgICAgIGlmIChlbCkge1xuICAgICAgICAgIGVsLnNjcm9sbEludG9WaWV3KCk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIERvbid0IHJlc2V0IGlmIHRoaXMgbmF2aWdhdGlvbiBvcHRlZCBvdXRcbiAgICAgIGlmIChwcmV2ZW50U2Nyb2xsUmVzZXQgPT09IHRydWUpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICAvLyBvdGhlcndpc2UgZ28gdG8gdGhlIHRvcCBvbiBuZXcgbG9jYXRpb25zXG4gICAgICB3aW5kb3cuc2Nyb2xsVG8oMCwgMCk7XG4gICAgfSwgW2xvY2F0aW9uLCByZXN0b3JlU2Nyb2xsUG9zaXRpb24sIHByZXZlbnRTY3JvbGxSZXNldF0pO1xuICB9XG59XG5cbmV4cG9ydCB7IHVzZVNjcm9sbFJlc3RvcmF0aW9uIGFzIFVOU0FGRV91c2VTY3JvbGxSZXN0b3JhdGlvbiB9O1xuXG4vKipcbiAqIFNldHVwIGEgY2FsbGJhY2sgdG8gYmUgZmlyZWQgb24gdGhlIHdpbmRvdydzIGBiZWZvcmV1bmxvYWRgIGV2ZW50LiBUaGlzIGlzXG4gKiB1c2VmdWwgZm9yIHNhdmluZyBzb21lIGRhdGEgdG8gYHdpbmRvdy5sb2NhbFN0b3JhZ2VgIGp1c3QgYmVmb3JlIHRoZSBwYWdlXG4gKiByZWZyZXNoZXMuXG4gKlxuICogTm90ZTogVGhlIGBjYWxsYmFja2AgYXJndW1lbnQgc2hvdWxkIGJlIGEgZnVuY3Rpb24gY3JlYXRlZCB3aXRoXG4gKiBgUmVhY3QudXNlQ2FsbGJhY2soKWAuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB1c2VCZWZvcmVVbmxvYWQoXG4gIGNhbGxiYWNrOiAoZXZlbnQ6IEJlZm9yZVVubG9hZEV2ZW50KSA9PiBhbnksXG4gIG9wdGlvbnM/OiB7IGNhcHR1cmU/OiBib29sZWFuIH1cbik6IHZvaWQge1xuICBsZXQgeyBjYXB0dXJlIH0gPSBvcHRpb25zIHx8IHt9O1xuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgIGxldCBvcHRzID0gY2FwdHVyZSAhPSBudWxsID8geyBjYXB0dXJlIH0gOiB1bmRlZmluZWQ7XG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJiZWZvcmV1bmxvYWRcIiwgY2FsbGJhY2ssIG9wdHMpO1xuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImJlZm9yZXVubG9hZFwiLCBjYWxsYmFjaywgb3B0cyk7XG4gICAgfTtcbiAgfSwgW2NhbGxiYWNrLCBjYXB0dXJlXSk7XG59XG5cbi8qKlxuICogU2V0dXAgYSBjYWxsYmFjayB0byBiZSBmaXJlZCBvbiB0aGUgd2luZG93J3MgYHBhZ2VoaWRlYCBldmVudC4gVGhpcyBpc1xuICogdXNlZnVsIGZvciBzYXZpbmcgc29tZSBkYXRhIHRvIGB3aW5kb3cubG9jYWxTdG9yYWdlYCBqdXN0IGJlZm9yZSB0aGUgcGFnZVxuICogcmVmcmVzaGVzLiAgVGhpcyBldmVudCBpcyBiZXR0ZXIgc3VwcG9ydGVkIHRoYW4gYmVmb3JldW5sb2FkIGFjcm9zcyBicm93c2Vycy5cbiAqXG4gKiBOb3RlOiBUaGUgYGNhbGxiYWNrYCBhcmd1bWVudCBzaG91bGQgYmUgYSBmdW5jdGlvbiBjcmVhdGVkIHdpdGhcbiAqIGBSZWFjdC51c2VDYWxsYmFjaygpYC5cbiAqL1xuZnVuY3Rpb24gdXNlUGFnZUhpZGUoXG4gIGNhbGxiYWNrOiAoZXZlbnQ6IFBhZ2VUcmFuc2l0aW9uRXZlbnQpID0+IGFueSxcbiAgb3B0aW9ucz86IHsgY2FwdHVyZT86IGJvb2xlYW4gfVxuKTogdm9pZCB7XG4gIGxldCB7IGNhcHR1cmUgfSA9IG9wdGlvbnMgfHwge307XG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgbGV0IG9wdHMgPSBjYXB0dXJlICE9IG51bGwgPyB7IGNhcHR1cmUgfSA6IHVuZGVmaW5lZDtcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcInBhZ2VoaWRlXCIsIGNhbGxiYWNrLCBvcHRzKTtcbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJwYWdlaGlkZVwiLCBjYWxsYmFjaywgb3B0cyk7XG4gICAgfTtcbiAgfSwgW2NhbGxiYWNrLCBjYXB0dXJlXSk7XG59XG5cbi8qKlxuICogV3JhcHBlciBhcm91bmQgdXNlQmxvY2tlciB0byBzaG93IGEgd2luZG93LmNvbmZpcm0gcHJvbXB0IHRvIHVzZXJzIGluc3RlYWRcbiAqIG9mIGJ1aWxkaW5nIGEgY3VzdG9tIFVJIHdpdGggdXNlQmxvY2tlci5cbiAqXG4gKiBXYXJuaW5nOiBUaGlzIGhhcyAqYSBsb3Qgb2Ygcm91Z2ggZWRnZXMqIGFuZCBiZWhhdmVzIHZlcnkgZGlmZmVyZW50bHkgKGFuZFxuICogdmVyeSBpbmNvcnJlY3RseSBpbiBzb21lIGNhc2VzKSBhY3Jvc3MgYnJvd3NlcnMgaWYgdXNlciBjbGljayBhZGRpdGlvblxuICogYmFjay9mb3J3YXJkIG5hdmlnYXRpb25zIHdoaWxlIHRoZSBjb25maXJtIGlzIG9wZW4uICBVc2UgYXQgeW91ciBvd24gcmlzay5cbiAqL1xuZnVuY3Rpb24gdXNlUHJvbXB0KHtcbiAgd2hlbixcbiAgbWVzc2FnZSxcbn06IHtcbiAgd2hlbjogYm9vbGVhbiB8IEJsb2NrZXJGdW5jdGlvbjtcbiAgbWVzc2FnZTogc3RyaW5nO1xufSkge1xuICBsZXQgYmxvY2tlciA9IHVzZUJsb2NrZXIod2hlbik7XG5cbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICBpZiAoYmxvY2tlci5zdGF0ZSA9PT0gXCJibG9ja2VkXCIpIHtcbiAgICAgIGxldCBwcm9jZWVkID0gd2luZG93LmNvbmZpcm0obWVzc2FnZSk7XG4gICAgICBpZiAocHJvY2VlZCkge1xuICAgICAgICAvLyBUaGlzIHRpbWVvdXQgaXMgbmVlZGVkIHRvIGF2b2lkIGEgd2VpcmQgXCJyYWNlXCIgb24gUE9QIG5hdmlnYXRpb25zXG4gICAgICAgIC8vIGJldHdlZW4gdGhlIGB3aW5kb3cuaGlzdG9yeWAgcmV2ZXJ0IG5hdmlnYXRpb24gYW5kIHRoZSByZXN1bHQgb2ZcbiAgICAgICAgLy8gYHdpbmRvdy5jb25maXJtYFxuICAgICAgICBzZXRUaW1lb3V0KGJsb2NrZXIucHJvY2VlZCwgMCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBibG9ja2VyLnJlc2V0KCk7XG4gICAgICB9XG4gICAgfVxuICB9LCBbYmxvY2tlciwgbWVzc2FnZV0pO1xuXG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKGJsb2NrZXIuc3RhdGUgPT09IFwiYmxvY2tlZFwiICYmICF3aGVuKSB7XG4gICAgICBibG9ja2VyLnJlc2V0KCk7XG4gICAgfVxuICB9LCBbYmxvY2tlciwgd2hlbl0pO1xufVxuXG5leHBvcnQgeyB1c2VQcm9tcHQgYXMgdW5zdGFibGVfdXNlUHJvbXB0IH07XG5cbi8qKlxuICogUmV0dXJuIGEgYm9vbGVhbiBpbmRpY2F0aW5nIGlmIHRoZXJlIGlzIGFuIGFjdGl2ZSB2aWV3IHRyYW5zaXRpb24gdG8gdGhlXG4gKiBnaXZlbiBocmVmLiAgWW91IGNhbiB1c2UgdGhpcyB2YWx1ZSB0byByZW5kZXIgQ1NTIGNsYXNzZXMgb3Igdmlld1RyYW5zaXRpb25OYW1lXG4gKiBzdHlsZXMgb250byB5b3VyIGVsZW1lbnRzXG4gKlxuICogQHBhcmFtIGhyZWYgVGhlIGRlc3RpbmF0aW9uIGhyZWZcbiAqIEBwYXJhbSBbb3B0cy5yZWxhdGl2ZV0gUmVsYXRpdmUgcm91dGluZyB0eXBlIChcInJvdXRlXCIgfCBcInBhdGhcIilcbiAqL1xuZnVuY3Rpb24gdXNlVmlld1RyYW5zaXRpb25TdGF0ZShcbiAgdG86IFRvLFxuICBvcHRzOiB7IHJlbGF0aXZlPzogUmVsYXRpdmVSb3V0aW5nVHlwZSB9ID0ge31cbikge1xuICBsZXQgdnRDb250ZXh0ID0gUmVhY3QudXNlQ29udGV4dChWaWV3VHJhbnNpdGlvbkNvbnRleHQpO1xuXG4gIGludmFyaWFudChcbiAgICB2dENvbnRleHQgIT0gbnVsbCxcbiAgICBcImB1bnN0YWJsZV91c2VWaWV3VHJhbnNpdGlvblN0YXRlYCBtdXN0IGJlIHVzZWQgd2l0aGluIGByZWFjdC1yb3V0ZXItZG9tYCdzIGBSb3V0ZXJQcm92aWRlcmAuICBcIiArXG4gICAgICBcIkRpZCB5b3UgYWNjaWRlbnRhbGx5IGltcG9ydCBgUm91dGVyUHJvdmlkZXJgIGZyb20gYHJlYWN0LXJvdXRlcmA/XCJcbiAgKTtcblxuICBsZXQgeyBiYXNlbmFtZSB9ID0gdXNlRGF0YVJvdXRlckNvbnRleHQoXG4gICAgRGF0YVJvdXRlckhvb2sudXNlVmlld1RyYW5zaXRpb25TdGF0ZVxuICApO1xuICBsZXQgcGF0aCA9IHVzZVJlc29sdmVkUGF0aCh0bywgeyByZWxhdGl2ZTogb3B0cy5yZWxhdGl2ZSB9KTtcbiAgaWYgKCF2dENvbnRleHQuaXNUcmFuc2l0aW9uaW5nKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgbGV0IGN1cnJlbnRQYXRoID1cbiAgICBzdHJpcEJhc2VuYW1lKHZ0Q29udGV4dC5jdXJyZW50TG9jYXRpb24ucGF0aG5hbWUsIGJhc2VuYW1lKSB8fFxuICAgIHZ0Q29udGV4dC5jdXJyZW50TG9jYXRpb24ucGF0aG5hbWU7XG4gIGxldCBuZXh0UGF0aCA9XG4gICAgc3RyaXBCYXNlbmFtZSh2dENvbnRleHQubmV4dExvY2F0aW9uLnBhdGhuYW1lLCBiYXNlbmFtZSkgfHxcbiAgICB2dENvbnRleHQubmV4dExvY2F0aW9uLnBhdGhuYW1lO1xuXG4gIC8vIFRyYW5zaXRpb24gaXMgYWN0aXZlIGlmIHdlJ3JlIGdvaW5nIHRvIG9yIGNvbWluZyBmcm9tIHRoZSBpbmRpY2F0ZWRcbiAgLy8gZGVzdGluYXRpb24uICBUaGlzIGVuc3VyZXMgdGhhdCBvdGhlciBQVVNIIG5hdmlnYXRpb25zIHRoYXQgcmV2ZXJzZVxuICAvLyBhbiBpbmRpY2F0ZWQgdHJhbnNpdGlvbiBhcHBseS4gIEkuZS4sIG9uIHRoZSBsaXN0IHZpZXcgeW91IGhhdmU6XG4gIC8vXG4gIC8vICAgPE5hdkxpbmsgdG89XCIvZGV0YWlscy8xXCIgdW5zdGFibGVfdmlld1RyYW5zaXRpb24+XG4gIC8vXG4gIC8vIElmIHlvdSBjbGljayB0aGUgYnJlYWRjcnVtYiBiYWNrIHRvIHRoZSBsaXN0IHZpZXc6XG4gIC8vXG4gIC8vICAgPE5hdkxpbmsgdG89XCIvbGlzdFwiIHVuc3RhYmxlX3ZpZXdUcmFuc2l0aW9uPlxuICAvL1xuICAvLyBXZSBzaG91bGQgYXBwbHkgdGhlIHRyYW5zaXRpb24gYmVjYXVzZSBpdCdzIGluZGljYXRlZCBhcyBhY3RpdmUgZ29pbmdcbiAgLy8gZnJvbSAvbGlzdCAtPiAvZGV0YWlscy8xIGFuZCB0aGVyZWZvcmUgc2hvdWxkIGJlIGFjdGl2ZSBvbiB0aGUgcmV2ZXJzZVxuICAvLyAoZXZlbiB0aG91Z2ggdGhpcyBpc24ndCBzdHJpY3RseSBhIFBPUCByZXZlcnNlKVxuICByZXR1cm4gKFxuICAgIG1hdGNoUGF0aChwYXRoLnBhdGhuYW1lLCBuZXh0UGF0aCkgIT0gbnVsbCB8fFxuICAgIG1hdGNoUGF0aChwYXRoLnBhdGhuYW1lLCBjdXJyZW50UGF0aCkgIT0gbnVsbFxuICApO1xufVxuXG5leHBvcnQgeyB1c2VWaWV3VHJhbnNpdGlvblN0YXRlIGFzIHVuc3RhYmxlX3VzZVZpZXdUcmFuc2l0aW9uU3RhdGUgfTtcblxuLy8jZW5kcmVnaW9uXG4iLCJcbiAgICAgIGltcG9ydCBBUEkgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIjtcbiAgICAgIGltcG9ydCBkb21BUEkgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydEZuIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qc1wiO1xuICAgICAgaW1wb3J0IHNldEF0dHJpYnV0ZXMgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRTdHlsZUVsZW1lbnQgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanNcIjtcbiAgICAgIGltcG9ydCBzdHlsZVRhZ1RyYW5zZm9ybUZuIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanNcIjtcbiAgICAgIGltcG9ydCBjb250ZW50LCAqIGFzIG5hbWVkRXhwb3J0IGZyb20gXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9ydWxlU2V0WzFdLnJ1bGVzWzBdLnVzZVsxXSEuLi8uLi8uLi9ub2RlX21vZHVsZXMvcG9zdGNzcy1sb2FkZXIvZGlzdC9janMuanM/P3J1bGVTZXRbMV0ucnVsZXNbMF0udXNlWzJdIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL1RleHQubW9kdWxlLnNjc3NcIjtcbiAgICAgIFxuICAgICAgXG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0gPSBzdHlsZVRhZ1RyYW5zZm9ybUZuO1xub3B0aW9ucy5zZXRBdHRyaWJ1dGVzID0gc2V0QXR0cmlidXRlcztcbm9wdGlvbnMuaW5zZXJ0ID0gaW5zZXJ0Rm4uYmluZChudWxsLCBcImhlYWRcIik7XG5vcHRpb25zLmRvbUFQSSA9IGRvbUFQSTtcbm9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50ID0gaW5zZXJ0U3R5bGVFbGVtZW50O1xuXG52YXIgdXBkYXRlID0gQVBJKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0ICogZnJvbSBcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanM/P3J1bGVTZXRbMV0ucnVsZXNbMF0udXNlWzFdIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9wb3N0Y3NzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cnVsZVNldFsxXS5ydWxlc1swXS51c2VbMl0hLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vVGV4dC5tb2R1bGUuc2Nzc1wiO1xuICAgICAgIGV4cG9ydCBkZWZhdWx0IGNvbnRlbnQgJiYgY29udGVudC5sb2NhbHMgPyBjb250ZW50LmxvY2FscyA6IHVuZGVmaW5lZDtcbiIsImltcG9ydCBjbGFzc05hbWVzIGZyb20gJ2NsYXNzbmFtZXMnO1xyXG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCB7IG1lbW8gfSBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCBzdHlsZXMgZnJvbSAnLi9UZXh0Lm1vZHVsZS5zY3NzJztcclxuXHJcbmV4cG9ydCB0eXBlIFRleHRQcm9wcyA9IHtcclxuICAgIC8qKiDQlNC+0L/QvtC70L3QuNGC0LXQu9GM0L3Ri9C5INC60LvQsNGB0YEgKi9cclxuICAgIGNsYXNzTmFtZT86IHN0cmluZztcclxuICAgIC8qKiDQodGC0LjQu9GMINC+0YLQvtCx0YDQsNC20LXQvdC40Y8gKi9cclxuICAgIHZpZXc/OiAndGl0bGUnIHwgJ2J1dHRvbicgfCAncC0yMCcgfCAncC0xOCcgfCAncC0xNicgfCAncC0xNCc7XHJcbiAgICAvKiogSHRtbC3RgtC10LMgKi9cclxuICAgIHRhZz86ICAnaDEnIHwgJ2gyJyB8ICdoMycgfCAnaDQnIHwgJ2g1JyB8ICdoNicgfCAnZGl2JyB8ICdwJyB8ICdzcGFuJztcclxuICAgIC8qKiDQndCw0YfQtdGA0YLQsNC90LjQtSDRiNGA0LjRhNGC0LAgKi9cclxuICAgIHdlaWdodD86ICdub3JtYWwnIHwgJ21lZGl1bScgfCAnYm9sZCc7XHJcbiAgICAvKiog0JrQvtC90YLQtdC90YIgKi9cclxuICAgIGNoaWxkcmVuOiBSZWFjdC5SZWFjdE5vZGU7XHJcbiAgICAvKiog0KbQstC10YIgKi9cclxuICAgIGNvbG9yPzogJ3ByaW1hcnknIHwgJ3NlY29uZGFyeScgfCAnYWNjZW50JztcclxuICAgIC8qKiDQnNCw0LrRgdC40LzQsNC70YzQvdC+0LUg0LrQvtC7LdCy0L4g0YHRgtGA0L7QuiAqL1xyXG4gICAgbWF4TGluZXM/OiBudW1iZXI7XHJcbiAgICBvbkNMaWNrPzogKCkgPT4gdm9pZDtcclxufTtcclxuXHJcbmNvbnN0IFRleHQ6IFJlYWN0LkZDPFRleHRQcm9wcz4gPSAoeyAuLi5wcm9wcyB9KSA9PiB7XHJcblxyXG4gICAgY29uc3QgVGFnID0gcHJvcHMudGFnID8gcHJvcHMudGFnIDogJ3AnO1xyXG5cclxuICAgIHJldHVybiAoXHJcbiAgICAgICAgPFRhZ1xyXG4gICAgICAgICAgICBzdHlsZT17e1xyXG4gICAgICAgICAgICAgICAgbWF4TGluZXM6IHByb3BzLm1heExpbmVzIHx8ICdub25lJyxcclxuICAgICAgICAgICAgfX1cclxuICAgICAgICAgICAgY2xhc3NOYW1lPXtjbGFzc05hbWVzKHtcclxuICAgICAgICAgICAgICAgIFtwcm9wcy5jbGFzc05hbWUgfHwgJyddOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgW3N0eWxlc1sndGV4dF92aWV3XycgKyAocHJvcHMudmlldyB8fCAncC0xNCcpXV06IHByb3BzLnZpZXcsXHJcbiAgICAgICAgICAgICAgICBbc3R5bGVzWyd0ZXh0X2NvbG9yXycgKyAocHJvcHMuY29sb3IgfHwgJ2luaGVyaXQnKV1dOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgW3N0eWxlc1sndGV4dF93ZWlnaHRfJysgKHByb3BzLndlaWdodCB8fCAnbm9ybWFsJyldXTogdHJ1ZSxcclxuICAgICAgICAgICAgfSl9XHJcbiAgICAgICAgICAgIG9uQ2xpY2s9e3Byb3BzLm9uQ0xpY2t9XHJcbiAgICAgICAgPlxyXG4gICAgICAgICAgICB7cHJvcHMuY2hpbGRyZW59XHJcbiAgICAgICAgPC9UYWc+XHJcbiAgICApXHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IG1lbW8oVGV4dCk7XHJcbiIsImV4cG9ydCB7IGRlZmF1bHQgfSBmcm9tICcuL1RleHQnO1xyXG5leHBvcnQgKiBmcm9tICcuL1RleHQnO1xyXG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfZXh0ZW5kcygpIHtcbiAgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduID8gT2JqZWN0LmFzc2lnbi5iaW5kKCkgOiBmdW5jdGlvbiAodGFyZ2V0KSB7XG4gICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07XG4gICAgICBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7XG4gICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7XG4gICAgICAgICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdGFyZ2V0O1xuICB9O1xuICByZXR1cm4gX2V4dGVuZHMuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbn0iLCJpbXBvcnQgY2xhc3NOYW1lcyBmcm9tICdjbGFzc25hbWVzJztcclxuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgeyBtZW1vIH0gZnJvbSAncmVhY3QnO1xyXG5cclxuZXhwb3J0IHR5cGUgSWNvblByb3BzID0gUmVhY3QuU1ZHQXR0cmlidXRlczxTVkdFbGVtZW50PiAmIHtcclxuICAgIGNsYXNzTmFtZT86IHN0cmluZztcclxuICAgIGNvbG9yPzogJ3ByaW1hcnknIHwgJ3NlY29uZGFyeScgfCAnYWNjZW50JztcclxufTtcclxuXHJcbmNvbnN0IEljb246IFJlYWN0LkZDPFJlYWN0LlByb3BzV2l0aENoaWxkcmVuPEljb25Qcm9wcz4+ID0gKHtcclxuICAgIGNsYXNzTmFtZSxcclxuICAgIGNvbG9yLFxyXG4gICAgLi4ucHJvcHNcclxufSkgPT4ge1xyXG5cclxuICAgIGNvbnN0IGljb25XaWR0aCA9IHByb3BzLndpZHRoIHx8ICcyNCc7XHJcbiAgICBjb25zdCBpY29uSGVpZ2h0ID0gcHJvcHMuaGVpZ2h0IHx8ICcyNCc7XHJcblxyXG4gICAgcmV0dXJuIChcclxuICAgICAgICA8c3ZnXHJcbiAgICAgICAgICAgIGZpbGw9J25vbmUnXHJcbiAgICAgICAgICAgIHdpZHRoPXtpY29uV2lkdGh9XHJcbiAgICAgICAgICAgIGhlaWdodD17aWNvbkhlaWdodH1cclxuICAgICAgICAgICAgdmlld0JveD0nMCAwIDI0IDI0J1xyXG4gICAgICAgICAgICBjbGFzc05hbWU9e2NsYXNzTmFtZXMoe1xyXG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lLFxyXG4gICAgICAgICAgICAgICAgY29sb3IsXHJcbiAgICAgICAgICAgIH0pfVxyXG4gICAgICAgICAgICB7Li4ucHJvcHN9XHJcbiAgICAgICAgPlxyXG4gICAgICAgIDwvc3ZnPlxyXG4gICAgKVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBtZW1vKEljb24pO1xyXG4iLCJleHBvcnQgeyBkZWZhdWx0IH0gZnJvbSAnLi9JY29uJztcclxuZXhwb3J0ICogZnJvbSAnLi9JY29uJztcclxuIiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnXHJcbmltcG9ydCBJY29uLCB7IEljb25Qcm9wcyB9IGZyb20gJy4uL0ljb24nO1xyXG5cclxuY29uc3QgTG9nb0ljb246IFJlYWN0LkZDPEljb25Qcm9wcz4gPSAocHJvcHMpID0+IHtcclxuXHJcbiAgICByZXR1cm4gKFxyXG4gICAgICAgIDxJY29uIFxyXG4gICAgICAgICAgICB7Li4ucHJvcHN9XHJcbiAgICAgICAgICAgIHdpZHRoPSczNicgaGVpZ2h0PSczNicgdmlld0JveD1cIjAgMCAzNiAzNlwiXHJcbiAgICAgICAgPlxyXG4gICAgICAgICAgICA8ZyBjbGlwUGF0aD1cInVybCgjY2xpcDBfNTA4XzE0NDkpXCI+XHJcbiAgICAgICAgICAgIDxwYXRoIFxyXG4gICAgICAgICAgICAgICAgZD1cIk0xNy44NTg1IDAuNTA2MTY1QzI3LjUyMDkgMC41MDYxNjUgMzUuMzUyIDguMzM4MzMgMzUuMzUyIDE4QzM1LjM1MiAyNy42NjI4IDI3LjUyMDkgMzUuNDkzOCAxNy44NTg1IDM1LjQ5MzhDOC4xOTY4NCAzNS40OTM4IDAuMzY0Njg1IDI3LjY2MjggMC4zNjQ2ODUgMThDMC4zNjQ2ODUgOC4zMzgzMyA4LjE5Njg0IDAuNTA2MTY1IDE3Ljg1ODUgMC41MDYxNjVaXCIgXHJcbiAgICAgICAgICAgICAgICBmaWxsPVwid2hpdGVcIlxyXG4gICAgICAgICAgICAvPlxyXG4gICAgICAgICAgICA8cGF0aCBcclxuICAgICAgICAgICAgICAgIGQ9XCJNMTcuNzY4OSAzMy40MzQzQzI2LjQzODkgMzMuNDM0MyAzMy40Njc0IDI2LjQwNTggMzMuNDY3NCAxNy43MzU4QzMzLjQ2NzQgOS4wNjU3IDI2LjQzODkgMi4wMzcyMyAxNy43Njg5IDIuMDM3MjNDOS4wOTg4NCAyLjAzNzIzIDIuMDcwMzcgOS4wNjU3IDIuMDcwMzcgMTcuNzM1OEMyLjA3MDM3IDI2LjQwNTggOS4wOTg4NCAzMy40MzQzIDE3Ljc2ODkgMzMuNDM0M1pcIiBcclxuICAgICAgICAgICAgICAgIGZpbGw9XCJ1cmwoI3BhaW50MF9saW5lYXJfNTA4XzE0NDkpXCJcclxuICAgICAgICAgICAgLz5cclxuICAgICAgICAgICAgPHBhdGggXHJcbiAgICAgICAgICAgICAgICBkPVwiTTE4LjE4OTcgMzAuMzYxM0MxNi4zOTAxIDI4LjE1NzggMTUuNDQyMiAyNy4wMDg2IDE1LjM0NzkgMjYuOTE1QzE0Ljk5MTggMjYuNDg4NCAxNC4zODc4IDI1Ljg5NjYgMTMuNTM1NiAyNS4xMzg4QzEzLjkxNDQgMjMuMTAwOCAxNC40MTE5IDIxLjUxNDMgMTUuMDI4MiAyMC4zNzY3QzE1LjI2NDcgMTkuOTczOSAxNi4yNDc5IDE4LjY0NzMgMTcuOTc3MyAxNi4zOTY5QzE4LjkyNTIgMTguMzYyOSAyMC4yMDQ2IDE5LjY4OTUgMjEuODE0OSAyMC4zNzY3QzIyLjE2OTUgMjAuNTE4OSAyMy42OTc3IDIwLjgzOSAyNi4zOTc0IDIxLjMzNjhDMjguMzg4MiAyMS43MzgyIDI5Ljk4NzYgMjIuNDg1MiAzMS4xOTQ3IDIzLjU3NTNDMzIuOTAwNCAyNS4xMTQgMzQuMzgwNCAyNy42NzI4IDM1LjYzNTcgMzEuMjQ5NEMzMC41NDMxIDI4LjM4MzEgMjYuOTA2OCAyNy4zNzY5IDI0LjcyODQgMjguMjI5NEMyMy43MDkyIDI4Ljg0NTcgMjIuODMyNiAyOS4zMzEgMjIuMDk5IDI5LjY4NjNDMjAuOTg1OCAzMC4yNTQ0IDE5LjY4MjYgMzAuNDc5OCAxOC4xODk3IDMwLjM2MTNaXCIgXHJcbiAgICAgICAgICAgICAgICBmaWxsPVwid2hpdGVcIlxyXG4gICAgICAgICAgICAvPlxyXG4gICAgICAgICAgICA8cGF0aCBcclxuICAgICAgICAgICAgICAgIGQ9XCJNMTguNzU4NSAxMi41OTUzQzE4LjU0NTEgMTMuOTQ1NyAxOC4wODM5IDE1LjA0NzcgMTcuMzcyOSAxNS44OTk4QzE2Ljk2OTcgMTYuMzk3MyAxNi4xODgxIDE3LjA4NDUgMTUuMDI3NSAxNy45NjA4QzEyLjcwNTUgMTkuNjY1NyAxMS4wMjQzIDIxLjg2ODkgOS45ODIxIDI0LjU2OTNDOC45NjM2NiAyNy4xMjc4IDguNzAzMDIgMjkuNzIyIDkuMjAwOSAzMi4zNTE4TDguNDU0OTggMzIuNDIxNkM3Ljg4NTgyIDI5Ljc2OTkgOC4xMjM0MiAyNy4xNTE2IDkuMTY1MjYgMjQuNTY5N0MxMC4yMzEyIDIxLjgyMTggMTIuMDMxNiAxOS41MjMyIDE0LjU2NiAxNy42NzY3QzE1Ljk2MzkgMTYuNjM0MiAxNi44NzYxIDE1LjI0ODUgMTcuMzAyMyAxMy41MTk4QzE3LjYzMzkgMTIuMDk4OSAxNy41OTc5IDEwLjU0NjYgMTcuMTk1NCA4Ljg2NDY2QzE2Ljg4OCA3LjQxOTYyIDE2LjM3NzkgNi4zNDE3OCAxNS42NjgzIDUuNjMxNUMxNC45ODA3IDQuOTQ0NjIgMTQuMjkzOCA0LjY5NjIyIDEzLjYwNjYgNC44ODU1OEMxMS45OTU5IDUuMzExODIgMTEuMzc5NiA3LjM0OTQyIDExLjc1OTQgMTAuOTk2OUMxMi4xMTQ3IDE0LjQ1NTUgMTIuNzc4MiAxNi42MzQ5IDEzLjc0ODggMTcuNTM0NUMxMi43Nzc5IDE3LjYwNjIgMTEuOTM3MyAxNi4yNzk2IDExLjIyNjMgMTMuNTU1MUMxMC41MzkgMTAuODU0NyAxMC40NDQgOC41MDkzNCAxMC45NDE1IDYuNTE5OThDMTEuMTU1IDUuNTI1MyAxMS42MTY5IDQuNzc5MDIgMTIuMzI3MSA0LjI4MTVDMTMuNDE2OSAzLjUyMzM0IDE0LjY4NDQgMy42MTgzOCAxNi4xMjk4IDQuNTY1NTRDMTcuMDc3IDUuMTgxODYgMTcuNzc1NyA2LjE0MDkgMTguMjI1IDcuNDQzNzRDMTguNzcwNCA4Ljg2NDY2IDE4Ljk0OSAxMC41ODIyIDE4Ljc1ODUgMTIuNTk1M1pNMTEuODY1NiAzMi42MDQxQzEwLjUxNTYgMjYuNTMyIDExLjQyNzUgMjIuMTQ5IDE0LjYwMiAxOS40NTIzQzEyLjQ0NjMgMjQuMTM5NSAxMS44Nzc5IDI4LjU0NzMgMTIuODk2MyAzMi42NzY5TDExLjg2NTYgMzIuNjA0MVpcIiBcclxuICAgICAgICAgICAgICAgIGZpbGw9XCJ3aGl0ZVwiXHJcbiAgICAgICAgICAgIC8+XHJcbiAgICAgICAgICAgIDwvZz5cclxuICAgICAgICAgICAgPGRlZnM+XHJcbiAgICAgICAgICAgIDxsaW5lYXJHcmFkaWVudCBcclxuICAgICAgICAgICAgICAgIGlkPVwicGFpbnQwX2xpbmVhcl81MDhfMTQ0OVwiIFxyXG4gICAgICAgICAgICAgICAgeDE9XCIxNS4wNDI1XCIgXHJcbiAgICAgICAgICAgICAgICB5MT1cIjIuMjczMzZcIiBcclxuICAgICAgICAgICAgICAgIHgyPVwiMjAuNDk1NFwiIFxyXG4gICAgICAgICAgICAgICAgeTI9XCIzMy4xOTg2XCIgXHJcbiAgICAgICAgICAgICAgICBncmFkaWVudFVuaXRzPVwidXNlclNwYWNlT25Vc2VcIlxyXG4gICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgICA8c3RvcCBzdG9wQ29sb3I9XCIjQjU0NjBGXCIvPlxyXG4gICAgICAgICAgICAgICAgPHN0b3Agb2Zmc2V0PVwiMVwiIHN0b3BDb2xvcj1cIiNCNTQ2MEZcIi8+XHJcbiAgICAgICAgICAgIDwvbGluZWFyR3JhZGllbnQ+XHJcbiAgICAgICAgICAgIDxjbGlwUGF0aCBpZD1cImNsaXAwXzUwOF8xNDQ5XCI+XHJcbiAgICAgICAgICAgICAgICA8cmVjdCB3aWR0aD1cIjM2XCIgaGVpZ2h0PVwiMzZcIiBmaWxsPVwid2hpdGVcIi8+XHJcbiAgICAgICAgICAgIDwvY2xpcFBhdGg+XHJcbiAgICAgICAgICAgIDwvZGVmcz5cclxuICAgICAgICA8L0ljb24+XHJcbiAgICApXHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IExvZ29JY29uO1xyXG4iLCJleHBvcnQgeyBkZWZhdWx0IH0gZnJvbSAnLi9Mb2dvSWNvbic7IiwiXG4gICAgICBpbXBvcnQgQVBJIGZyb20gXCIhLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICBpbXBvcnQgZG9tQVBJIGZyb20gXCIhLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRGbiBmcm9tIFwiIS4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanNcIjtcbiAgICAgIGltcG9ydCBzZXRBdHRyaWJ1dGVzIGZyb20gXCIhLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0U3R5bGVFbGVtZW50IGZyb20gXCIhLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzXCI7XG4gICAgICBpbXBvcnQgc3R5bGVUYWdUcmFuc2Zvcm1GbiBmcm9tIFwiIS4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzXCI7XG4gICAgICBpbXBvcnQgY29udGVudCwgKiBhcyBuYW1lZEV4cG9ydCBmcm9tIFwiISEuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cnVsZVNldFsxXS5ydWxlc1swXS51c2VbMV0hLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Bvc3Rjc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9ydWxlU2V0WzFdLnJ1bGVzWzBdLnVzZVsyXSEuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanMhLi9Mb2dvQmxvY2subW9kdWxlLnNjc3NcIjtcbiAgICAgIFxuICAgICAgXG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0gPSBzdHlsZVRhZ1RyYW5zZm9ybUZuO1xub3B0aW9ucy5zZXRBdHRyaWJ1dGVzID0gc2V0QXR0cmlidXRlcztcbm9wdGlvbnMuaW5zZXJ0ID0gaW5zZXJ0Rm4uYmluZChudWxsLCBcImhlYWRcIik7XG5vcHRpb25zLmRvbUFQSSA9IGRvbUFQSTtcbm9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50ID0gaW5zZXJ0U3R5bGVFbGVtZW50O1xuXG52YXIgdXBkYXRlID0gQVBJKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0ICogZnJvbSBcIiEhLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanM/P3J1bGVTZXRbMV0ucnVsZXNbMF0udXNlWzFdIS4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9wb3N0Y3NzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cnVsZVNldFsxXS5ydWxlc1swXS51c2VbMl0hLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vTG9nb0Jsb2NrLm1vZHVsZS5zY3NzXCI7XG4gICAgICAgZXhwb3J0IGRlZmF1bHQgY29udGVudCAmJiBjb250ZW50LmxvY2FscyA/IGNvbnRlbnQubG9jYWxzIDogdW5kZWZpbmVkO1xuIiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSBcInJlYWN0XCI7XHJcbmltcG9ydCB7IG1lbW8gfSBmcm9tIFwicmVhY3RcIjtcclxuaW1wb3J0IFRleHQgZnJvbSBcImNvbXBvbmVudHMvVGV4dFwiO1xyXG5pbXBvcnQgTG9nb0ljb24gZnJvbSBcImNvbXBvbmVudHMvaWNvbnMvTG9nb0ljb25cIjtcclxuaW1wb3J0IHN0eWxlcyBmcm9tICcuL0xvZ29CbG9jay5tb2R1bGUuc2Nzcyc7XHJcblxyXG5jb25zdCBMb2dvQmxvY2s6IFJlYWN0LkZDID0gKCkgPT4ge1xyXG4gICAgXHJcbiAgICByZXR1cm4gKFxyXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPXtzdHlsZXNbXCJsb2dvLWJsb2NrXCJdfT5cclxuICAgICAgICAgICAgPExvZ29JY29uIC8+XHJcbiAgICAgICAgICAgIDxUZXh0IHZpZXc9J3AtMjAnIHdlaWdodD0nYm9sZCc+Rm9vZCBDbGllbnQ8L1RleHQ+XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICApXHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IG1lbW8oTG9nb0Jsb2NrKTsiLCJleHBvcnQgeyBkZWZhdWx0IH0gZnJvbSAnLi9Mb2dvQmxvY2snO1xyXG4iLCJjb25zdCBuaWNlRXJyb3JzID0ge1xuICAgIDA6IGBJbnZhbGlkIHZhbHVlIGZvciBjb25maWd1cmF0aW9uICdlbmZvcmNlQWN0aW9ucycsIGV4cGVjdGVkICduZXZlcicsICdhbHdheXMnIG9yICdvYnNlcnZlZCdgLFxuICAgIDEoYW5ub3RhdGlvblR5cGUsIGtleTogUHJvcGVydHlLZXkpIHtcbiAgICAgICAgcmV0dXJuIGBDYW5ub3QgYXBwbHkgJyR7YW5ub3RhdGlvblR5cGV9JyB0byAnJHtrZXkudG9TdHJpbmcoKX0nOiBGaWVsZCBub3QgZm91bmQuYFxuICAgIH0sXG4gICAgLypcbiAgICAyKHByb3ApIHtcbiAgICAgICAgcmV0dXJuIGBpbnZhbGlkIGRlY29yYXRvciBmb3IgJyR7cHJvcC50b1N0cmluZygpfSdgXG4gICAgfSxcbiAgICAzKHByb3ApIHtcbiAgICAgICAgcmV0dXJuIGBDYW5ub3QgZGVjb3JhdGUgJyR7cHJvcC50b1N0cmluZygpfSc6IGFjdGlvbiBjYW4gb25seSBiZSB1c2VkIG9uIHByb3BlcnRpZXMgd2l0aCBhIGZ1bmN0aW9uIHZhbHVlLmBcbiAgICB9LFxuICAgIDQocHJvcCkge1xuICAgICAgICByZXR1cm4gYENhbm5vdCBkZWNvcmF0ZSAnJHtwcm9wLnRvU3RyaW5nKCl9JzogY29tcHV0ZWQgY2FuIG9ubHkgYmUgdXNlZCBvbiBnZXR0ZXIgcHJvcGVydGllcy5gXG4gICAgfSxcbiAgICAqL1xuICAgIDU6IFwiJ2tleXMoKScgY2FuIG9ubHkgYmUgdXNlZCBvbiBvYnNlcnZhYmxlIG9iamVjdHMsIGFycmF5cywgc2V0cyBhbmQgbWFwc1wiLFxuICAgIDY6IFwiJ3ZhbHVlcygpJyBjYW4gb25seSBiZSB1c2VkIG9uIG9ic2VydmFibGUgb2JqZWN0cywgYXJyYXlzLCBzZXRzIGFuZCBtYXBzXCIsXG4gICAgNzogXCInZW50cmllcygpJyBjYW4gb25seSBiZSB1c2VkIG9uIG9ic2VydmFibGUgb2JqZWN0cywgYXJyYXlzIGFuZCBtYXBzXCIsXG4gICAgODogXCInc2V0KCknIGNhbiBvbmx5IGJlIHVzZWQgb24gb2JzZXJ2YWJsZSBvYmplY3RzLCBhcnJheXMgYW5kIG1hcHNcIixcbiAgICA5OiBcIidyZW1vdmUoKScgY2FuIG9ubHkgYmUgdXNlZCBvbiBvYnNlcnZhYmxlIG9iamVjdHMsIGFycmF5cyBhbmQgbWFwc1wiLFxuICAgIDEwOiBcIidoYXMoKScgY2FuIG9ubHkgYmUgdXNlZCBvbiBvYnNlcnZhYmxlIG9iamVjdHMsIGFycmF5cyBhbmQgbWFwc1wiLFxuICAgIDExOiBcIidnZXQoKScgY2FuIG9ubHkgYmUgdXNlZCBvbiBvYnNlcnZhYmxlIG9iamVjdHMsIGFycmF5cyBhbmQgbWFwc1wiLFxuICAgIDEyOiBgSW52YWxpZCBhbm5vdGF0aW9uYCxcbiAgICAxMzogYER5bmFtaWMgb2JzZXJ2YWJsZSBvYmplY3RzIGNhbm5vdCBiZSBmcm96ZW4uIElmIHlvdSdyZSBwYXNzaW5nIG9ic2VydmFibGVzIHRvIDNyZCBwYXJ0eSBjb21wb25lbnQvZnVuY3Rpb24gdGhhdCBjYWxscyBPYmplY3QuZnJlZXplLCBwYXNzIGNvcHkgaW5zdGVhZDogdG9KUyhvYnNlcnZhYmxlKWAsXG4gICAgMTQ6IFwiSW50ZXJjZXB0IGhhbmRsZXJzIHNob3VsZCByZXR1cm4gbm90aGluZyBvciBhIGNoYW5nZSBvYmplY3RcIixcbiAgICAxNTogYE9ic2VydmFibGUgYXJyYXlzIGNhbm5vdCBiZSBmcm96ZW4uIElmIHlvdSdyZSBwYXNzaW5nIG9ic2VydmFibGVzIHRvIDNyZCBwYXJ0eSBjb21wb25lbnQvZnVuY3Rpb24gdGhhdCBjYWxscyBPYmplY3QuZnJlZXplLCBwYXNzIGNvcHkgaW5zdGVhZDogdG9KUyhvYnNlcnZhYmxlKWAsXG4gICAgMTY6IGBNb2RpZmljYXRpb24gZXhjZXB0aW9uOiB0aGUgaW50ZXJuYWwgc3RydWN0dXJlIG9mIGFuIG9ic2VydmFibGUgYXJyYXkgd2FzIGNoYW5nZWQuYCxcbiAgICAxNyhpbmRleCwgbGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBgW21vYnguYXJyYXldIEluZGV4IG91dCBvZiBib3VuZHMsICR7aW5kZXh9IGlzIGxhcmdlciB0aGFuICR7bGVuZ3RofWBcbiAgICB9LFxuICAgIDE4OiBcIm1vYngubWFwIHJlcXVpcmVzIE1hcCBwb2x5ZmlsbCBmb3IgdGhlIGN1cnJlbnQgYnJvd3Nlci4gQ2hlY2sgYmFiZWwtcG9seWZpbGwgb3IgY29yZS1qcy9lczYvbWFwLmpzXCIsXG4gICAgMTkob3RoZXIpIHtcbiAgICAgICAgcmV0dXJuIFwiQ2Fubm90IGluaXRpYWxpemUgZnJvbSBjbGFzc2VzIHRoYXQgaW5oZXJpdCBmcm9tIE1hcDogXCIgKyBvdGhlci5jb25zdHJ1Y3Rvci5uYW1lXG4gICAgfSxcbiAgICAyMChvdGhlcikge1xuICAgICAgICByZXR1cm4gXCJDYW5ub3QgaW5pdGlhbGl6ZSBtYXAgZnJvbSBcIiArIG90aGVyXG4gICAgfSxcbiAgICAyMShkYXRhU3RydWN0dXJlKSB7XG4gICAgICAgIHJldHVybiBgQ2Fubm90IGNvbnZlcnQgdG8gbWFwIGZyb20gJyR7ZGF0YVN0cnVjdHVyZX0nYFxuICAgIH0sXG4gICAgMjI6IFwibW9ieC5zZXQgcmVxdWlyZXMgU2V0IHBvbHlmaWxsIGZvciB0aGUgY3VycmVudCBicm93c2VyLiBDaGVjayBiYWJlbC1wb2x5ZmlsbCBvciBjb3JlLWpzL2VzNi9zZXQuanNcIixcbiAgICAyMzogXCJJdCBpcyBub3QgcG9zc2libGUgdG8gZ2V0IGluZGV4IGF0b21zIGZyb20gYXJyYXlzXCIsXG4gICAgMjQodGhpbmcpIHtcbiAgICAgICAgcmV0dXJuIFwiQ2Fubm90IG9idGFpbiBhZG1pbmlzdHJhdGlvbiBmcm9tIFwiICsgdGhpbmdcbiAgICB9LFxuICAgIDI1KHByb3BlcnR5LCBuYW1lKSB7XG4gICAgICAgIHJldHVybiBgdGhlIGVudHJ5ICcke3Byb3BlcnR5fScgZG9lcyBub3QgZXhpc3QgaW4gdGhlIG9ic2VydmFibGUgbWFwICcke25hbWV9J2BcbiAgICB9LFxuICAgIDI2OiBcInBsZWFzZSBzcGVjaWZ5IGEgcHJvcGVydHlcIixcbiAgICAyNyhwcm9wZXJ0eSwgbmFtZSkge1xuICAgICAgICByZXR1cm4gYG5vIG9ic2VydmFibGUgcHJvcGVydHkgJyR7cHJvcGVydHkudG9TdHJpbmcoKX0nIGZvdW5kIG9uIHRoZSBvYnNlcnZhYmxlIG9iamVjdCAnJHtuYW1lfSdgXG4gICAgfSxcbiAgICAyOCh0aGluZykge1xuICAgICAgICByZXR1cm4gXCJDYW5ub3Qgb2J0YWluIGF0b20gZnJvbSBcIiArIHRoaW5nXG4gICAgfSxcbiAgICAyOTogXCJFeHBlY3Rpbmcgc29tZSBvYmplY3RcIixcbiAgICAzMDogXCJpbnZhbGlkIGFjdGlvbiBzdGFjay4gZGlkIHlvdSBmb3JnZXQgdG8gZmluaXNoIGFuIGFjdGlvbj9cIixcbiAgICAzMTogXCJtaXNzaW5nIG9wdGlvbiBmb3IgY29tcHV0ZWQ6IGdldFwiLFxuICAgIDMyKG5hbWUsIGRlcml2YXRpb24pIHtcbiAgICAgICAgcmV0dXJuIGBDeWNsZSBkZXRlY3RlZCBpbiBjb21wdXRhdGlvbiAke25hbWV9OiAke2Rlcml2YXRpb259YFxuICAgIH0sXG4gICAgMzMobmFtZSkge1xuICAgICAgICByZXR1cm4gYFRoZSBzZXR0ZXIgb2YgY29tcHV0ZWQgdmFsdWUgJyR7bmFtZX0nIGlzIHRyeWluZyB0byB1cGRhdGUgaXRzZWxmLiBEaWQgeW91IGludGVuZCB0byB1cGRhdGUgYW4gX29ic2VydmFibGVfIHZhbHVlLCBpbnN0ZWFkIG9mIHRoZSBjb21wdXRlZCBwcm9wZXJ0eT9gXG4gICAgfSxcbiAgICAzNChuYW1lKSB7XG4gICAgICAgIHJldHVybiBgW0NvbXB1dGVkVmFsdWUgJyR7bmFtZX0nXSBJdCBpcyBub3QgcG9zc2libGUgdG8gYXNzaWduIGEgbmV3IHZhbHVlIHRvIGEgY29tcHV0ZWQgdmFsdWUuYFxuICAgIH0sXG4gICAgMzU6IFwiVGhlcmUgYXJlIG11bHRpcGxlLCBkaWZmZXJlbnQgdmVyc2lvbnMgb2YgTW9iWCBhY3RpdmUuIE1ha2Ugc3VyZSBNb2JYIGlzIGxvYWRlZCBvbmx5IG9uY2Ugb3IgdXNlIGBjb25maWd1cmUoeyBpc29sYXRlR2xvYmFsU3RhdGU6IHRydWUgfSlgXCIsXG4gICAgMzY6IFwiaXNvbGF0ZUdsb2JhbFN0YXRlIHNob3VsZCBiZSBjYWxsZWQgYmVmb3JlIE1vYlggaXMgcnVubmluZyBhbnkgcmVhY3Rpb25zXCIsXG4gICAgMzcobWV0aG9kKSB7XG4gICAgICAgIHJldHVybiBgW21vYnhdIFxcYG9ic2VydmFibGVBcnJheS4ke21ldGhvZH0oKVxcYCBtdXRhdGVzIHRoZSBhcnJheSBpbi1wbGFjZSwgd2hpY2ggaXMgbm90IGFsbG93ZWQgaW5zaWRlIGEgZGVyaXZhdGlvbi4gVXNlIFxcYGFycmF5LnNsaWNlKCkuJHttZXRob2R9KClcXGAgaW5zdGVhZGBcbiAgICB9LFxuICAgIDM4OiBcIidvd25LZXlzKCknIGNhbiBvbmx5IGJlIHVzZWQgb24gb2JzZXJ2YWJsZSBvYmplY3RzXCIsXG4gICAgMzk6IFwiJ2RlZmluZVByb3BlcnR5KCknIGNhbiBvbmx5IGJlIHVzZWQgb24gb2JzZXJ2YWJsZSBvYmplY3RzXCJcbn0gYXMgY29uc3RcblxuY29uc3QgZXJyb3JzOiB0eXBlb2YgbmljZUVycm9ycyA9IF9fREVWX18gPyBuaWNlRXJyb3JzIDogKHt9IGFzIGFueSlcblxuZXhwb3J0IGZ1bmN0aW9uIGRpZShlcnJvcjogc3RyaW5nIHwga2V5b2YgdHlwZW9mIGVycm9ycywgLi4uYXJnczogYW55W10pOiBuZXZlciB7XG4gICAgaWYgKF9fREVWX18pIHtcbiAgICAgICAgbGV0IGU6IGFueSA9IHR5cGVvZiBlcnJvciA9PT0gXCJzdHJpbmdcIiA/IGVycm9yIDogZXJyb3JzW2Vycm9yXVxuICAgICAgICBpZiAodHlwZW9mIGUgPT09IFwiZnVuY3Rpb25cIikgZSA9IGUuYXBwbHkobnVsbCwgYXJncyBhcyBhbnkpXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgW01vYlhdICR7ZX1gKVxuICAgIH1cbiAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgIHR5cGVvZiBlcnJvciA9PT0gXCJudW1iZXJcIlxuICAgICAgICAgICAgPyBgW01vYlhdIG1pbmlmaWVkIGVycm9yIG5yOiAke2Vycm9yfSR7XG4gICAgICAgICAgICAgICAgICBhcmdzLmxlbmd0aCA/IFwiIFwiICsgYXJncy5tYXAoU3RyaW5nKS5qb2luKFwiLFwiKSA6IFwiXCJcbiAgICAgICAgICAgICAgfS4gRmluZCB0aGUgZnVsbCBlcnJvciBhdDogaHR0cHM6Ly9naXRodWIuY29tL21vYnhqcy9tb2J4L2Jsb2IvbWFpbi9wYWNrYWdlcy9tb2J4L3NyYy9lcnJvcnMudHNgXG4gICAgICAgICAgICA6IGBbTW9iWF0gJHtlcnJvcn1gXG4gICAgKVxufVxuIiwiZGVjbGFyZSBjb25zdCB3aW5kb3c6IGFueVxuZGVjbGFyZSBjb25zdCBzZWxmOiBhbnlcblxuY29uc3QgbW9ja0dsb2JhbCA9IHt9XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRHbG9iYWwoKSB7XG4gICAgaWYgKHR5cGVvZiBnbG9iYWxUaGlzICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgIHJldHVybiBnbG9iYWxUaGlzXG4gICAgfVxuICAgIGlmICh0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgIHJldHVybiB3aW5kb3dcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBnbG9iYWwgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgcmV0dXJuIGdsb2JhbFxuICAgIH1cbiAgICBpZiAodHlwZW9mIHNlbGYgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgcmV0dXJuIHNlbGZcbiAgICB9XG4gICAgcmV0dXJuIG1vY2tHbG9iYWxcbn1cbiIsImltcG9ydCB7IGdsb2JhbFN0YXRlLCBkaWUgfSBmcm9tIFwiLi4vaW50ZXJuYWxcIlxuXG4vLyBXZSBzaG9ydGVuIGFueXRoaW5nIHVzZWQgPiA1IHRpbWVzXG5leHBvcnQgY29uc3QgYXNzaWduID0gT2JqZWN0LmFzc2lnblxuZXhwb3J0IGNvbnN0IGdldERlc2NyaXB0b3IgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yXG5leHBvcnQgY29uc3QgZGVmaW5lUHJvcGVydHkgPSBPYmplY3QuZGVmaW5lUHJvcGVydHlcbmV4cG9ydCBjb25zdCBvYmplY3RQcm90b3R5cGUgPSBPYmplY3QucHJvdG90eXBlXG5cbmV4cG9ydCBjb25zdCBFTVBUWV9BUlJBWSA9IFtdXG5PYmplY3QuZnJlZXplKEVNUFRZX0FSUkFZKVxuXG5leHBvcnQgY29uc3QgRU1QVFlfT0JKRUNUID0ge31cbk9iamVjdC5mcmVlemUoRU1QVFlfT0JKRUNUKVxuXG5leHBvcnQgaW50ZXJmYWNlIExhbWJkYSB7XG4gICAgKCk6IHZvaWRcbiAgICBuYW1lPzogc3RyaW5nXG59XG5cbmNvbnN0IGhhc1Byb3h5ID0gdHlwZW9mIFByb3h5ICE9PSBcInVuZGVmaW5lZFwiXG5jb25zdCBwbGFpbk9iamVjdFN0cmluZyA9IE9iamVjdC50b1N0cmluZygpXG5cbmV4cG9ydCBmdW5jdGlvbiBhc3NlcnRQcm94aWVzKCkge1xuICAgIGlmICghaGFzUHJveHkpIHtcbiAgICAgICAgZGllKFxuICAgICAgICAgICAgX19ERVZfX1xuICAgICAgICAgICAgICAgID8gXCJgUHJveHlgIG9iamVjdHMgYXJlIG5vdCBhdmFpbGFibGUgaW4gdGhlIGN1cnJlbnQgZW52aXJvbm1lbnQuIFBsZWFzZSBjb25maWd1cmUgTW9iWCB0byBlbmFibGUgYSBmYWxsYmFjayBpbXBsZW1lbnRhdGlvbi5gXCJcbiAgICAgICAgICAgICAgICA6IFwiUHJveHkgbm90IGF2YWlsYWJsZVwiXG4gICAgICAgIClcbiAgICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB3YXJuQWJvdXRQcm94eVJlcXVpcmVtZW50KG1zZzogc3RyaW5nKSB7XG4gICAgaWYgKF9fREVWX18gJiYgZ2xvYmFsU3RhdGUudmVyaWZ5UHJveGllcykge1xuICAgICAgICBkaWUoXG4gICAgICAgICAgICBcIk1vYlggaXMgY3VycmVudGx5IGNvbmZpZ3VyZWQgdG8gYmUgYWJsZSB0byBydW4gaW4gRVM1IG1vZGUsIGJ1dCBpbiBFUzUgTW9iWCB3b24ndCBiZSBhYmxlIHRvIFwiICtcbiAgICAgICAgICAgICAgICBtc2dcbiAgICAgICAgKVxuICAgIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldE5leHRJZCgpIHtcbiAgICByZXR1cm4gKytnbG9iYWxTdGF0ZS5tb2J4R3VpZFxufVxuXG4vKipcbiAqIE1ha2VzIHN1cmUgdGhhdCB0aGUgcHJvdmlkZWQgZnVuY3Rpb24gaXMgaW52b2tlZCBhdCBtb3N0IG9uY2UuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBvbmNlKGZ1bmM6IExhbWJkYSk6IExhbWJkYSB7XG4gICAgbGV0IGludm9rZWQgPSBmYWxzZVxuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmIChpbnZva2VkKSB7XG4gICAgICAgICAgICByZXR1cm5cbiAgICAgICAgfVxuICAgICAgICBpbnZva2VkID0gdHJ1ZVxuICAgICAgICByZXR1cm4gKGZ1bmMgYXMgYW55KS5hcHBseSh0aGlzLCBhcmd1bWVudHMpXG4gICAgfVxufVxuXG5leHBvcnQgY29uc3Qgbm9vcCA9ICgpID0+IHt9XG5cbmV4cG9ydCBmdW5jdGlvbiBpc0Z1bmN0aW9uKGZuOiBhbnkpOiBmbiBpcyBGdW5jdGlvbiB7XG4gICAgcmV0dXJuIHR5cGVvZiBmbiA9PT0gXCJmdW5jdGlvblwiXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc1N0cmluZyh2YWx1ZTogYW55KTogdmFsdWUgaXMgc3RyaW5nIHtcbiAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc1N0cmluZ2lzaCh2YWx1ZTogYW55KTogdmFsdWUgaXMgc3RyaW5nIHwgbnVtYmVyIHwgc3ltYm9sIHtcbiAgICBjb25zdCB0ID0gdHlwZW9mIHZhbHVlXG4gICAgc3dpdGNoICh0KSB7XG4gICAgICAgIGNhc2UgXCJzdHJpbmdcIjpcbiAgICAgICAgY2FzZSBcInN5bWJvbFwiOlxuICAgICAgICBjYXNlIFwibnVtYmVyXCI6XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZVxuICAgIH1cbiAgICByZXR1cm4gZmFsc2Vcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzT2JqZWN0KHZhbHVlOiBhbnkpOiB2YWx1ZSBpcyBPYmplY3Qge1xuICAgIHJldHVybiB2YWx1ZSAhPT0gbnVsbCAmJiB0eXBlb2YgdmFsdWUgPT09IFwib2JqZWN0XCJcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzUGxhaW5PYmplY3QodmFsdWU6IGFueSkge1xuICAgIGlmICghaXNPYmplY3QodmFsdWUpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZVxuICAgIH1cbiAgICBjb25zdCBwcm90byA9IE9iamVjdC5nZXRQcm90b3R5cGVPZih2YWx1ZSlcbiAgICBpZiAocHJvdG8gPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gdHJ1ZVxuICAgIH1cbiAgICBjb25zdCBwcm90b0NvbnN0cnVjdG9yID0gT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwocHJvdG8sIFwiY29uc3RydWN0b3JcIikgJiYgcHJvdG8uY29uc3RydWN0b3JcbiAgICByZXR1cm4gKFxuICAgICAgICB0eXBlb2YgcHJvdG9Db25zdHJ1Y3RvciA9PT0gXCJmdW5jdGlvblwiICYmIHByb3RvQ29uc3RydWN0b3IudG9TdHJpbmcoKSA9PT0gcGxhaW5PYmplY3RTdHJpbmdcbiAgICApXG59XG5cbi8vIGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8zNzg2NTE3MFxuZXhwb3J0IGZ1bmN0aW9uIGlzR2VuZXJhdG9yKG9iajogYW55KTogYm9vbGVhbiB7XG4gICAgY29uc3QgY29uc3RydWN0b3IgPSBvYmo/LmNvbnN0cnVjdG9yXG4gICAgaWYgKCFjb25zdHJ1Y3Rvcikge1xuICAgICAgICByZXR1cm4gZmFsc2VcbiAgICB9XG4gICAgaWYgKFxuICAgICAgICBcIkdlbmVyYXRvckZ1bmN0aW9uXCIgPT09IGNvbnN0cnVjdG9yLm5hbWUgfHxcbiAgICAgICAgXCJHZW5lcmF0b3JGdW5jdGlvblwiID09PSBjb25zdHJ1Y3Rvci5kaXNwbGF5TmFtZVxuICAgICkge1xuICAgICAgICByZXR1cm4gdHJ1ZVxuICAgIH1cbiAgICByZXR1cm4gZmFsc2Vcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGFkZEhpZGRlblByb3Aob2JqZWN0OiBhbnksIHByb3BOYW1lOiBQcm9wZXJ0eUtleSwgdmFsdWU6IGFueSkge1xuICAgIGRlZmluZVByb3BlcnR5KG9iamVjdCwgcHJvcE5hbWUsIHtcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgIHZhbHVlXG4gICAgfSlcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGFkZEhpZGRlbkZpbmFsUHJvcChvYmplY3Q6IGFueSwgcHJvcE5hbWU6IFByb3BlcnR5S2V5LCB2YWx1ZTogYW55KSB7XG4gICAgZGVmaW5lUHJvcGVydHkob2JqZWN0LCBwcm9wTmFtZSwge1xuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgd3JpdGFibGU6IGZhbHNlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgIHZhbHVlXG4gICAgfSlcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUluc3RhbmNlb2ZQcmVkaWNhdGU8VD4oXG4gICAgbmFtZTogc3RyaW5nLFxuICAgIHRoZUNsYXNzOiBuZXcgKC4uLmFyZ3M6IGFueVtdKSA9PiBUXG4pOiAoeDogYW55KSA9PiB4IGlzIFQge1xuICAgIGNvbnN0IHByb3BOYW1lID0gXCJpc01vYlhcIiArIG5hbWVcbiAgICB0aGVDbGFzcy5wcm90b3R5cGVbcHJvcE5hbWVdID0gdHJ1ZVxuICAgIHJldHVybiBmdW5jdGlvbiAoeCkge1xuICAgICAgICByZXR1cm4gaXNPYmplY3QoeCkgJiYgeFtwcm9wTmFtZV0gPT09IHRydWVcbiAgICB9IGFzIGFueVxufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNFUzZNYXAodGhpbmc6IGFueSk6IHRoaW5nIGlzIE1hcDxhbnksIGFueT4ge1xuICAgIHJldHVybiB0aGluZyBpbnN0YW5jZW9mIE1hcFxufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNFUzZTZXQodGhpbmc6IGFueSk6IHRoaW5nIGlzIFNldDxhbnk+IHtcbiAgICByZXR1cm4gdGhpbmcgaW5zdGFuY2VvZiBTZXRcbn1cblxuY29uc3QgaGFzR2V0T3duUHJvcGVydHlTeW1ib2xzID0gdHlwZW9mIE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMgIT09IFwidW5kZWZpbmVkXCJcblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBmb2xsb3dpbmc6IG93biBlbnVtZXJhYmxlIGtleXMgYW5kIHN5bWJvbHMuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRQbGFpbk9iamVjdEtleXMob2JqZWN0OiBhbnkpIHtcbiAgICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXMob2JqZWN0KVxuICAgIC8vIE5vdCBzdXBwb3J0ZWQgaW4gSUUsIHNvIHRoZXJlIGFyZSBub3QgZ29pbmcgdG8gYmUgc3ltYm9sIHByb3BzIGFueXdheS4uLlxuICAgIGlmICghaGFzR2V0T3duUHJvcGVydHlTeW1ib2xzKSB7XG4gICAgICAgIHJldHVybiBrZXlzXG4gICAgfVxuICAgIGNvbnN0IHN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKG9iamVjdClcbiAgICBpZiAoIXN5bWJvbHMubGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBrZXlzXG4gICAgfVxuICAgIHJldHVybiBbLi4ua2V5cywgLi4uc3ltYm9scy5maWx0ZXIocyA9PiBvYmplY3RQcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChvYmplY3QsIHMpKV1cbn1cblxuLy8gRnJvbSBJbW1lciB1dGlsc1xuLy8gUmV0dXJucyBhbGwgb3duIGtleXMsIGluY2x1ZGluZyBub24tZW51bWVyYWJsZSBhbmQgc3ltYm9saWNcbmV4cG9ydCBjb25zdCBvd25LZXlzOiAodGFyZ2V0OiBhbnkpID0+IEFycmF5PHN0cmluZyB8IHN5bWJvbD4gPVxuICAgIHR5cGVvZiBSZWZsZWN0ICE9PSBcInVuZGVmaW5lZFwiICYmIFJlZmxlY3Qub3duS2V5c1xuICAgICAgICA/IFJlZmxlY3Qub3duS2V5c1xuICAgICAgICA6IGhhc0dldE93blByb3BlcnR5U3ltYm9sc1xuICAgICAgICA/IG9iaiA9PiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhvYmopLmNvbmNhdChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKG9iaikgYXMgYW55KVxuICAgICAgICA6IC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzXG5cbmV4cG9ydCBmdW5jdGlvbiBzdHJpbmdpZnlLZXkoa2V5OiBhbnkpOiBzdHJpbmcge1xuICAgIGlmICh0eXBlb2Yga2V5ID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgIHJldHVybiBrZXlcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBrZXkgPT09IFwic3ltYm9sXCIpIHtcbiAgICAgICAgcmV0dXJuIGtleS50b1N0cmluZygpXG4gICAgfVxuICAgIHJldHVybiBuZXcgU3RyaW5nKGtleSkudG9TdHJpbmcoKVxufVxuXG5leHBvcnQgZnVuY3Rpb24gdG9QcmltaXRpdmUodmFsdWU6IGFueSkge1xuICAgIHJldHVybiB2YWx1ZSA9PT0gbnVsbCA/IG51bGwgOiB0eXBlb2YgdmFsdWUgPT09IFwib2JqZWN0XCIgPyBcIlwiICsgdmFsdWUgOiB2YWx1ZVxufVxuXG5leHBvcnQgZnVuY3Rpb24gaGFzUHJvcCh0YXJnZXQ6IE9iamVjdCwgcHJvcDogUHJvcGVydHlLZXkpOiBib29sZWFuIHtcbiAgICByZXR1cm4gb2JqZWN0UHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwodGFyZ2V0LCBwcm9wKVxufVxuXG4vLyBGcm9tIEltbWVyIHV0aWxzXG5leHBvcnQgY29uc3QgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyA9XG4gICAgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMgfHxcbiAgICBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKHRhcmdldDogYW55KSB7XG4gICAgICAgIC8vIFBvbHlmaWxsIG5lZWRlZCBmb3IgSGVybWVzIGFuZCBJRSwgc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9oZXJtZXMvaXNzdWVzLzI3NFxuICAgICAgICBjb25zdCByZXM6IGFueSA9IHt9XG4gICAgICAgIC8vIE5vdGU6IHdpdGhvdXQgcG9seWZpbGwgZm9yIG93bktleXMsIHN5bWJvbHMgd29uJ3QgYmUgcGlja2VkIHVwXG4gICAgICAgIG93bktleXModGFyZ2V0KS5mb3JFYWNoKGtleSA9PiB7XG4gICAgICAgICAgICByZXNba2V5XSA9IGdldERlc2NyaXB0b3IodGFyZ2V0LCBrZXkpXG4gICAgICAgIH0pXG4gICAgICAgIHJldHVybiByZXNcbiAgICB9XG4iLCJpbXBvcnQgeyBBbm5vdGF0aW9uLCBhZGRIaWRkZW5Qcm9wLCBBbm5vdGF0aW9uc01hcCwgaGFzUHJvcCwgZGllLCBpc092ZXJyaWRlIH0gZnJvbSBcIi4uL2ludGVybmFsXCJcblxuaW1wb3J0IHR5cGUgeyBEZWNvcmF0b3IgfSBmcm9tIFwiLi4vdHlwZXMvZGVjb3JhdG9yX2ZpbGxzXCJcblxuZXhwb3J0IGNvbnN0IHN0b3JlZEFubm90YXRpb25zU3ltYm9sID0gU3ltYm9sKFwibW9ieC1zdG9yZWQtYW5ub3RhdGlvbnNcIilcblxuLyoqXG4gKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBhY3RzIGFzXG4gKiAtIGRlY29yYXRvclxuICogLSBhbm5vdGF0aW9uIG9iamVjdFxuICovXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlRGVjb3JhdG9yQW5ub3RhdGlvbjxEIGV4dGVuZHMgRGVjb3JhdG9yID0gRGVjb3JhdG9yPihcbiAgICBhbm5vdGF0aW9uOiBBbm5vdGF0aW9uXG4pOiBQcm9wZXJ0eURlY29yYXRvciAmIEFubm90YXRpb24gJiBEIHtcbiAgICBmdW5jdGlvbiBkZWNvcmF0b3IodGFyZ2V0LCBwcm9wZXJ0eSkge1xuICAgICAgICBpZiAoaXMyMDIyM0RlY29yYXRvcihwcm9wZXJ0eSkpIHtcbiAgICAgICAgICAgIHJldHVybiBhbm5vdGF0aW9uLmRlY29yYXRlXzIwMjIzXyh0YXJnZXQsIHByb3BlcnR5KVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc3RvcmVBbm5vdGF0aW9uKHRhcmdldCwgcHJvcGVydHksIGFubm90YXRpb24pXG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oZGVjb3JhdG9yLCBhbm5vdGF0aW9uKSBhcyBhbnlcbn1cblxuLyoqXG4gKiBTdG9yZXMgYW5ub3RhdGlvbiB0byBwcm90b3R5cGUsXG4gKiBzbyBpdCBjYW4gYmUgaW5zcGVjdGVkIGxhdGVyIGJ5IGBtYWtlT2JzZXJ2YWJsZWAgY2FsbGVkIGZyb20gY29uc3RydWN0b3JcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHN0b3JlQW5ub3RhdGlvbihwcm90b3R5cGU6IGFueSwga2V5OiBQcm9wZXJ0eUtleSwgYW5ub3RhdGlvbjogQW5ub3RhdGlvbikge1xuICAgIGlmICghaGFzUHJvcChwcm90b3R5cGUsIHN0b3JlZEFubm90YXRpb25zU3ltYm9sKSkge1xuICAgICAgICBhZGRIaWRkZW5Qcm9wKHByb3RvdHlwZSwgc3RvcmVkQW5ub3RhdGlvbnNTeW1ib2wsIHtcbiAgICAgICAgICAgIC8vIEluaGVyaXQgYW5ub3RhdGlvbnNcbiAgICAgICAgICAgIC4uLnByb3RvdHlwZVtzdG9yZWRBbm5vdGF0aW9uc1N5bWJvbF1cbiAgICAgICAgfSlcbiAgICB9XG4gICAgLy8gQG92ZXJyaWRlIG11c3Qgb3ZlcnJpZGUgc29tZXRoaW5nXG4gICAgaWYgKF9fREVWX18gJiYgaXNPdmVycmlkZShhbm5vdGF0aW9uKSAmJiAhaGFzUHJvcChwcm90b3R5cGVbc3RvcmVkQW5ub3RhdGlvbnNTeW1ib2xdLCBrZXkpKSB7XG4gICAgICAgIGNvbnN0IGZpZWxkTmFtZSA9IGAke3Byb3RvdHlwZS5jb25zdHJ1Y3Rvci5uYW1lfS5wcm90b3R5cGUuJHtrZXkudG9TdHJpbmcoKX1gXG4gICAgICAgIGRpZShcbiAgICAgICAgICAgIGAnJHtmaWVsZE5hbWV9JyBpcyBkZWNvcmF0ZWQgd2l0aCAnb3ZlcnJpZGUnLCBgICtcbiAgICAgICAgICAgICAgICBgYnV0IG5vIHN1Y2ggZGVjb3JhdGVkIG1lbWJlciB3YXMgZm91bmQgb24gcHJvdG90eXBlLmBcbiAgICAgICAgKVxuICAgIH1cbiAgICAvLyBDYW5ub3QgcmUtZGVjb3JhdGVcbiAgICBhc3NlcnROb3REZWNvcmF0ZWQocHJvdG90eXBlLCBhbm5vdGF0aW9uLCBrZXkpXG5cbiAgICAvLyBJZ25vcmUgb3ZlcnJpZGVcbiAgICBpZiAoIWlzT3ZlcnJpZGUoYW5ub3RhdGlvbikpIHtcbiAgICAgICAgcHJvdG90eXBlW3N0b3JlZEFubm90YXRpb25zU3ltYm9sXVtrZXldID0gYW5ub3RhdGlvblxuICAgIH1cbn1cblxuZnVuY3Rpb24gYXNzZXJ0Tm90RGVjb3JhdGVkKHByb3RvdHlwZTogb2JqZWN0LCBhbm5vdGF0aW9uOiBBbm5vdGF0aW9uLCBrZXk6IFByb3BlcnR5S2V5KSB7XG4gICAgaWYgKF9fREVWX18gJiYgIWlzT3ZlcnJpZGUoYW5ub3RhdGlvbikgJiYgaGFzUHJvcChwcm90b3R5cGVbc3RvcmVkQW5ub3RhdGlvbnNTeW1ib2xdLCBrZXkpKSB7XG4gICAgICAgIGNvbnN0IGZpZWxkTmFtZSA9IGAke3Byb3RvdHlwZS5jb25zdHJ1Y3Rvci5uYW1lfS5wcm90b3R5cGUuJHtrZXkudG9TdHJpbmcoKX1gXG4gICAgICAgIGNvbnN0IGN1cnJlbnRBbm5vdGF0aW9uVHlwZSA9IHByb3RvdHlwZVtzdG9yZWRBbm5vdGF0aW9uc1N5bWJvbF1ba2V5XS5hbm5vdGF0aW9uVHlwZV9cbiAgICAgICAgY29uc3QgcmVxdWVzdGVkQW5ub3RhdGlvblR5cGUgPSBhbm5vdGF0aW9uLmFubm90YXRpb25UeXBlX1xuICAgICAgICBkaWUoXG4gICAgICAgICAgICBgQ2Fubm90IGFwcGx5ICdAJHtyZXF1ZXN0ZWRBbm5vdGF0aW9uVHlwZX0nIHRvICcke2ZpZWxkTmFtZX0nOmAgK1xuICAgICAgICAgICAgICAgIGBcXG5UaGUgZmllbGQgaXMgYWxyZWFkeSBkZWNvcmF0ZWQgd2l0aCAnQCR7Y3VycmVudEFubm90YXRpb25UeXBlfScuYCArXG4gICAgICAgICAgICAgICAgYFxcblJlLWRlY29yYXRpbmcgZmllbGRzIGlzIG5vdCBhbGxvd2VkLmAgK1xuICAgICAgICAgICAgICAgIGBcXG5Vc2UgJ0BvdmVycmlkZScgZGVjb3JhdG9yIGZvciBtZXRob2RzIG92ZXJyaWRkZW4gYnkgc3ViY2xhc3MuYFxuICAgICAgICApXG4gICAgfVxufVxuXG4vKipcbiAqIENvbGxlY3RzIGFubm90YXRpb25zIGZyb20gcHJvdG90eXBlcyBhbmQgc3RvcmVzIHRoZW0gb24gdGFyZ2V0IChpbnN0YW5jZSlcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNvbGxlY3RTdG9yZWRBbm5vdGF0aW9ucyh0YXJnZXQpOiBBbm5vdGF0aW9uc01hcDxhbnksIGFueT4ge1xuICAgIGlmICghaGFzUHJvcCh0YXJnZXQsIHN0b3JlZEFubm90YXRpb25zU3ltYm9sKSkge1xuICAgICAgICAvLyBpZiAoX19ERVZfXyAmJiAhdGFyZ2V0W3N0b3JlZEFubm90YXRpb25zU3ltYm9sXSkge1xuICAgICAgICAvLyAgICAgZGllKFxuICAgICAgICAvLyAgICAgICAgIGBObyBhbm5vdGF0aW9ucyB3ZXJlIHBhc3NlZCB0byBtYWtlT2JzZXJ2YWJsZSwgYnV0IG5vIGRlY29yYXRlZCBtZW1iZXJzIGhhdmUgYmVlbiBmb3VuZCBlaXRoZXJgXG4gICAgICAgIC8vICAgICApXG4gICAgICAgIC8vIH1cbiAgICAgICAgLy8gV2UgbmVlZCBhIGNvcHkgYXMgd2Ugd2lsbCByZW1vdmUgYW5ub3RhdGlvbiBmcm9tIHRoZSBsaXN0IG9uY2UgaXQncyBhcHBsaWVkLlxuICAgICAgICBhZGRIaWRkZW5Qcm9wKHRhcmdldCwgc3RvcmVkQW5ub3RhdGlvbnNTeW1ib2wsIHsgLi4udGFyZ2V0W3N0b3JlZEFubm90YXRpb25zU3ltYm9sXSB9KVxuICAgIH1cbiAgICByZXR1cm4gdGFyZ2V0W3N0b3JlZEFubm90YXRpb25zU3ltYm9sXVxufVxuXG5leHBvcnQgZnVuY3Rpb24gaXMyMDIyM0RlY29yYXRvcihjb250ZXh0KTogY29udGV4dCBpcyBEZWNvcmF0b3JDb250ZXh0IHtcbiAgICByZXR1cm4gdHlwZW9mIGNvbnRleHQgPT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgY29udGV4dFtcImtpbmRcIl0gPT0gXCJzdHJpbmdcIlxufVxuXG5leHBvcnQgZnVuY3Rpb24gYXNzZXJ0MjAyMjNEZWNvcmF0b3JUeXBlKFxuICAgIGNvbnRleHQ6IERlY29yYXRvckNvbnRleHQsXG4gICAgdHlwZXM6IERlY29yYXRvckNvbnRleHRbXCJraW5kXCJdW11cbikge1xuICAgIGlmIChfX0RFVl9fICYmICF0eXBlcy5pbmNsdWRlcyhjb250ZXh0LmtpbmQpKSB7XG4gICAgICAgIGRpZShcbiAgICAgICAgICAgIGBUaGUgZGVjb3JhdG9yIGFwcGxpZWQgdG8gJyR7U3RyaW5nKGNvbnRleHQubmFtZSl9JyBjYW5ub3QgYmUgdXNlZCBvbiBhICR7XG4gICAgICAgICAgICAgICAgY29udGV4dC5raW5kXG4gICAgICAgICAgICB9IGVsZW1lbnRgXG4gICAgICAgIClcbiAgICB9XG59XG4iLCJpbXBvcnQge1xuICAgIElEZXJpdmF0aW9uU3RhdGVfLFxuICAgIElPYnNlcnZhYmxlLFxuICAgIElEZXJpdmF0aW9uLFxuICAgIGNyZWF0ZUluc3RhbmNlb2ZQcmVkaWNhdGUsXG4gICAgZW5kQmF0Y2gsXG4gICAgZ2V0TmV4dElkLFxuICAgIG5vb3AsXG4gICAgb25CZWNvbWVPYnNlcnZlZCxcbiAgICBvbkJlY29tZVVub2JzZXJ2ZWQsXG4gICAgcHJvcGFnYXRlQ2hhbmdlZCxcbiAgICByZXBvcnRPYnNlcnZlZCxcbiAgICBzdGFydEJhdGNoLFxuICAgIExhbWJkYVxufSBmcm9tIFwiLi4vaW50ZXJuYWxcIlxuXG5leHBvcnQgY29uc3QgJG1vYnggPSBTeW1ib2woXCJtb2J4IGFkbWluaXN0cmF0aW9uXCIpXG5cbmV4cG9ydCBpbnRlcmZhY2UgSUF0b20gZXh0ZW5kcyBJT2JzZXJ2YWJsZSB7XG4gICAgcmVwb3J0T2JzZXJ2ZWQoKTogYm9vbGVhblxuICAgIHJlcG9ydENoYW5nZWQoKTogdm9pZFxufVxuXG5leHBvcnQgY2xhc3MgQXRvbSBpbXBsZW1lbnRzIElBdG9tIHtcbiAgICBpc1BlbmRpbmdVbm9ic2VydmF0aW9uXyA9IGZhbHNlIC8vIGZvciBlZmZlY3RpdmUgdW5vYnNlcnZpbmcuIEJhc2VBdG9tIGhhcyB0cnVlLCBmb3IgZXh0cmEgb3B0aW1pemF0aW9uLCBzbyBpdHMgb25CZWNvbWVVbm9ic2VydmVkIG5ldmVyIGdldHMgY2FsbGVkLCBiZWNhdXNlIGl0J3Mgbm90IG5lZWRlZFxuICAgIGlzQmVpbmdPYnNlcnZlZF8gPSBmYWxzZVxuICAgIG9ic2VydmVyc18gPSBuZXcgU2V0PElEZXJpdmF0aW9uPigpXG5cbiAgICBkaWZmVmFsdWVfID0gMFxuICAgIGxhc3RBY2Nlc3NlZEJ5XyA9IDBcbiAgICBsb3dlc3RPYnNlcnZlclN0YXRlXyA9IElEZXJpdmF0aW9uU3RhdGVfLk5PVF9UUkFDS0lOR19cbiAgICAvKipcbiAgICAgKiBDcmVhdGUgYSBuZXcgYXRvbS4gRm9yIGRlYnVnZ2luZyBwdXJwb3NlcyBpdCBpcyByZWNvbW1lbmRlZCB0byBnaXZlIGl0IGEgbmFtZS5cbiAgICAgKiBUaGUgb25CZWNvbWVPYnNlcnZlZCBhbmQgb25CZWNvbWVVbm9ic2VydmVkIGNhbGxiYWNrcyBjYW4gYmUgdXNlZCBmb3IgcmVzb3VyY2UgbWFuYWdlbWVudC5cbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihwdWJsaWMgbmFtZV8gPSBfX0RFVl9fID8gXCJBdG9tQFwiICsgZ2V0TmV4dElkKCkgOiBcIkF0b21cIikge31cblxuICAgIC8vIG9uQmVjb21lT2JzZXJ2ZWRMaXN0ZW5lcnNcbiAgICBwdWJsaWMgb25CT0w6IFNldDxMYW1iZGE+IHwgdW5kZWZpbmVkXG4gICAgLy8gb25CZWNvbWVVbm9ic2VydmVkTGlzdGVuZXJzXG4gICAgcHVibGljIG9uQlVPTDogU2V0PExhbWJkYT4gfCB1bmRlZmluZWRcblxuICAgIHB1YmxpYyBvbkJPKCkge1xuICAgICAgICBpZiAodGhpcy5vbkJPTCkge1xuICAgICAgICAgICAgdGhpcy5vbkJPTC5mb3JFYWNoKGxpc3RlbmVyID0+IGxpc3RlbmVyKCkpXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwdWJsaWMgb25CVU8oKSB7XG4gICAgICAgIGlmICh0aGlzLm9uQlVPTCkge1xuICAgICAgICAgICAgdGhpcy5vbkJVT0wuZm9yRWFjaChsaXN0ZW5lciA9PiBsaXN0ZW5lcigpKVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSW52b2tlIHRoaXMgbWV0aG9kIHRvIG5vdGlmeSBtb2J4IHRoYXQgeW91ciBhdG9tIGhhcyBiZWVuIHVzZWQgc29tZWhvdy5cbiAgICAgKiBSZXR1cm5zIHRydWUgaWYgdGhlcmUgaXMgY3VycmVudGx5IGEgcmVhY3RpdmUgY29udGV4dC5cbiAgICAgKi9cbiAgICBwdWJsaWMgcmVwb3J0T2JzZXJ2ZWQoKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiByZXBvcnRPYnNlcnZlZCh0aGlzKVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEludm9rZSB0aGlzIG1ldGhvZCBfYWZ0ZXJfIHRoaXMgbWV0aG9kIGhhcyBjaGFuZ2VkIHRvIHNpZ25hbCBtb2J4IHRoYXQgYWxsIGl0cyBvYnNlcnZlcnMgc2hvdWxkIGludmFsaWRhdGUuXG4gICAgICovXG4gICAgcHVibGljIHJlcG9ydENoYW5nZWQoKSB7XG4gICAgICAgIHN0YXJ0QmF0Y2goKVxuICAgICAgICBwcm9wYWdhdGVDaGFuZ2VkKHRoaXMpXG4gICAgICAgIGVuZEJhdGNoKClcbiAgICB9XG5cbiAgICB0b1N0cmluZygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubmFtZV9cbiAgICB9XG59XG5cbmV4cG9ydCBjb25zdCBpc0F0b20gPSBjcmVhdGVJbnN0YW5jZW9mUHJlZGljYXRlKFwiQXRvbVwiLCBBdG9tKVxuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlQXRvbShcbiAgICBuYW1lOiBzdHJpbmcsXG4gICAgb25CZWNvbWVPYnNlcnZlZEhhbmRsZXI6ICgpID0+IHZvaWQgPSBub29wLFxuICAgIG9uQmVjb21lVW5vYnNlcnZlZEhhbmRsZXI6ICgpID0+IHZvaWQgPSBub29wXG4pOiBJQXRvbSB7XG4gICAgY29uc3QgYXRvbSA9IG5ldyBBdG9tKG5hbWUpXG4gICAgLy8gZGVmYXVsdCBgbm9vcGAgbGlzdGVuZXIgd2lsbCBub3QgaW5pdGlhbGl6ZSB0aGUgaG9vayBTZXRcbiAgICBpZiAob25CZWNvbWVPYnNlcnZlZEhhbmRsZXIgIT09IG5vb3ApIHtcbiAgICAgICAgb25CZWNvbWVPYnNlcnZlZChhdG9tLCBvbkJlY29tZU9ic2VydmVkSGFuZGxlcilcbiAgICB9XG5cbiAgICBpZiAob25CZWNvbWVVbm9ic2VydmVkSGFuZGxlciAhPT0gbm9vcCkge1xuICAgICAgICBvbkJlY29tZVVub2JzZXJ2ZWQoYXRvbSwgb25CZWNvbWVVbm9ic2VydmVkSGFuZGxlcilcbiAgICB9XG4gICAgcmV0dXJuIGF0b21cbn1cbiIsImltcG9ydCB7IGRlZXBFcXVhbCB9IGZyb20gXCIuLi9pbnRlcm5hbFwiXG5cbmV4cG9ydCBpbnRlcmZhY2UgSUVxdWFsc0NvbXBhcmVyPFQ+IHtcbiAgICAoYTogVCwgYjogVCk6IGJvb2xlYW5cbn1cblxuZnVuY3Rpb24gaWRlbnRpdHlDb21wYXJlcihhOiBhbnksIGI6IGFueSk6IGJvb2xlYW4ge1xuICAgIHJldHVybiBhID09PSBiXG59XG5cbmZ1bmN0aW9uIHN0cnVjdHVyYWxDb21wYXJlcihhOiBhbnksIGI6IGFueSk6IGJvb2xlYW4ge1xuICAgIHJldHVybiBkZWVwRXF1YWwoYSwgYilcbn1cblxuZnVuY3Rpb24gc2hhbGxvd0NvbXBhcmVyKGE6IGFueSwgYjogYW55KTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIGRlZXBFcXVhbChhLCBiLCAxKVxufVxuXG5mdW5jdGlvbiBkZWZhdWx0Q29tcGFyZXIoYTogYW55LCBiOiBhbnkpOiBib29sZWFuIHtcbiAgICBpZiAoT2JqZWN0LmlzKSB7XG4gICAgICAgIHJldHVybiBPYmplY3QuaXMoYSwgYilcbiAgICB9XG5cbiAgICByZXR1cm4gYSA9PT0gYiA/IGEgIT09IDAgfHwgMSAvIGEgPT09IDEgLyBiIDogYSAhPT0gYSAmJiBiICE9PSBiXG59XG5cbmV4cG9ydCBjb25zdCBjb21wYXJlciA9IHtcbiAgICBpZGVudGl0eTogaWRlbnRpdHlDb21wYXJlcixcbiAgICBzdHJ1Y3R1cmFsOiBzdHJ1Y3R1cmFsQ29tcGFyZXIsXG4gICAgZGVmYXVsdDogZGVmYXVsdENvbXBhcmVyLFxuICAgIHNoYWxsb3c6IHNoYWxsb3dDb21wYXJlclxufVxuIiwiaW1wb3J0IHtcbiAgICBkZWVwRXF1YWwsXG4gICAgaXNFUzZNYXAsXG4gICAgaXNFUzZTZXQsXG4gICAgaXNPYnNlcnZhYmxlLFxuICAgIGlzT2JzZXJ2YWJsZUFycmF5LFxuICAgIGlzT2JzZXJ2YWJsZU1hcCxcbiAgICBpc09ic2VydmFibGVTZXQsXG4gICAgaXNPYnNlcnZhYmxlT2JqZWN0LFxuICAgIGlzUGxhaW5PYmplY3QsXG4gICAgb2JzZXJ2YWJsZSxcbiAgICBkaWUsXG4gICAgaXNBY3Rpb24sXG4gICAgYXV0b0FjdGlvbixcbiAgICBmbG93LFxuICAgIGlzRmxvdyxcbiAgICBpc0dlbmVyYXRvclxufSBmcm9tIFwiLi4vaW50ZXJuYWxcIlxuXG5leHBvcnQgaW50ZXJmYWNlIElFbmhhbmNlcjxUPiB7XG4gICAgKG5ld1ZhbHVlOiBULCBvbGRWYWx1ZTogVCB8IHVuZGVmaW5lZCwgbmFtZTogc3RyaW5nKTogVFxufVxuXG5leHBvcnQgZnVuY3Rpb24gZGVlcEVuaGFuY2VyKHYsIF8sIG5hbWUpIHtcbiAgICAvLyBpdCBpcyBhbiBvYnNlcnZhYmxlIGFscmVhZHksIGRvbmVcbiAgICBpZiAoaXNPYnNlcnZhYmxlKHYpKSB7XG4gICAgICAgIHJldHVybiB2XG4gICAgfVxuXG4gICAgLy8gc29tZXRoaW5nIHRoYXQgY2FuIGJlIGNvbnZlcnRlZCBhbmQgbXV0YXRlZD9cbiAgICBpZiAoQXJyYXkuaXNBcnJheSh2KSkge1xuICAgICAgICByZXR1cm4gb2JzZXJ2YWJsZS5hcnJheSh2LCB7IG5hbWUgfSlcbiAgICB9XG4gICAgaWYgKGlzUGxhaW5PYmplY3QodikpIHtcbiAgICAgICAgcmV0dXJuIG9ic2VydmFibGUub2JqZWN0KHYsIHVuZGVmaW5lZCwgeyBuYW1lIH0pXG4gICAgfVxuICAgIGlmIChpc0VTNk1hcCh2KSkge1xuICAgICAgICByZXR1cm4gb2JzZXJ2YWJsZS5tYXAodiwgeyBuYW1lIH0pXG4gICAgfVxuICAgIGlmIChpc0VTNlNldCh2KSkge1xuICAgICAgICByZXR1cm4gb2JzZXJ2YWJsZS5zZXQodiwgeyBuYW1lIH0pXG4gICAgfVxuICAgIGlmICh0eXBlb2YgdiA9PT0gXCJmdW5jdGlvblwiICYmICFpc0FjdGlvbih2KSAmJiAhaXNGbG93KHYpKSB7XG4gICAgICAgIGlmIChpc0dlbmVyYXRvcih2KSkge1xuICAgICAgICAgICAgcmV0dXJuIGZsb3codilcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBhdXRvQWN0aW9uKG5hbWUsIHYpXG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHZcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNoYWxsb3dFbmhhbmNlcih2LCBfLCBuYW1lKTogYW55IHtcbiAgICBpZiAodiA9PT0gdW5kZWZpbmVkIHx8IHYgPT09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIHZcbiAgICB9XG4gICAgaWYgKGlzT2JzZXJ2YWJsZU9iamVjdCh2KSB8fCBpc09ic2VydmFibGVBcnJheSh2KSB8fCBpc09ic2VydmFibGVNYXAodikgfHwgaXNPYnNlcnZhYmxlU2V0KHYpKSB7XG4gICAgICAgIHJldHVybiB2XG4gICAgfVxuICAgIGlmIChBcnJheS5pc0FycmF5KHYpKSB7XG4gICAgICAgIHJldHVybiBvYnNlcnZhYmxlLmFycmF5KHYsIHsgbmFtZSwgZGVlcDogZmFsc2UgfSlcbiAgICB9XG4gICAgaWYgKGlzUGxhaW5PYmplY3QodikpIHtcbiAgICAgICAgcmV0dXJuIG9ic2VydmFibGUub2JqZWN0KHYsIHVuZGVmaW5lZCwgeyBuYW1lLCBkZWVwOiBmYWxzZSB9KVxuICAgIH1cbiAgICBpZiAoaXNFUzZNYXAodikpIHtcbiAgICAgICAgcmV0dXJuIG9ic2VydmFibGUubWFwKHYsIHsgbmFtZSwgZGVlcDogZmFsc2UgfSlcbiAgICB9XG4gICAgaWYgKGlzRVM2U2V0KHYpKSB7XG4gICAgICAgIHJldHVybiBvYnNlcnZhYmxlLnNldCh2LCB7IG5hbWUsIGRlZXA6IGZhbHNlIH0pXG4gICAgfVxuXG4gICAgaWYgKF9fREVWX18pIHtcbiAgICAgICAgZGllKFxuICAgICAgICAgICAgXCJUaGUgc2hhbGxvdyBtb2RpZmllciAvIGRlY29yYXRvciBjYW4gb25seSB1c2VkIGluIGNvbWJpbmF0aW9uIHdpdGggYXJyYXlzLCBvYmplY3RzLCBtYXBzIGFuZCBzZXRzXCJcbiAgICAgICAgKVxuICAgIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJlZmVyZW5jZUVuaGFuY2VyKG5ld1ZhbHVlPykge1xuICAgIC8vIG5ldmVyIHR1cm4gaW50byBhbiBvYnNlcnZhYmxlXG4gICAgcmV0dXJuIG5ld1ZhbHVlXG59XG5cbmV4cG9ydCBmdW5jdGlvbiByZWZTdHJ1Y3RFbmhhbmNlcih2LCBvbGRWYWx1ZSk6IGFueSB7XG4gICAgaWYgKF9fREVWX18gJiYgaXNPYnNlcnZhYmxlKHYpKSB7XG4gICAgICAgIGRpZShgb2JzZXJ2YWJsZS5zdHJ1Y3Qgc2hvdWxkIG5vdCBiZSB1c2VkIHdpdGggb2JzZXJ2YWJsZSB2YWx1ZXNgKVxuICAgIH1cbiAgICBpZiAoZGVlcEVxdWFsKHYsIG9sZFZhbHVlKSkge1xuICAgICAgICByZXR1cm4gb2xkVmFsdWVcbiAgICB9XG4gICAgcmV0dXJuIHZcbn1cbiIsImltcG9ydCB7XG4gICAgZGllLFxuICAgIEFubm90YXRpb24sXG4gICAgaGFzUHJvcCxcbiAgICBjcmVhdGVEZWNvcmF0b3JBbm5vdGF0aW9uLFxuICAgIE9ic2VydmFibGVPYmplY3RBZG1pbmlzdHJhdGlvbixcbiAgICBNYWtlUmVzdWx0XG59IGZyb20gXCIuLi9pbnRlcm5hbFwiXG5cbmltcG9ydCB0eXBlIHsgQ2xhc3NNZXRob2REZWNvcmF0b3IgfSBmcm9tIFwiLi9kZWNvcmF0b3JfZmlsbHNcIlxuXG5jb25zdCBPVkVSUklERSA9IFwib3ZlcnJpZGVcIlxuXG5leHBvcnQgY29uc3Qgb3ZlcnJpZGU6IEFubm90YXRpb24gJiBQcm9wZXJ0eURlY29yYXRvciAmIENsYXNzTWV0aG9kRGVjb3JhdG9yID1cbiAgICBjcmVhdGVEZWNvcmF0b3JBbm5vdGF0aW9uKHtcbiAgICAgICAgYW5ub3RhdGlvblR5cGVfOiBPVkVSUklERSxcbiAgICAgICAgbWFrZV8sXG4gICAgICAgIGV4dGVuZF8sXG4gICAgICAgIGRlY29yYXRlXzIwMjIzX1xuICAgIH0pXG5cbmV4cG9ydCBmdW5jdGlvbiBpc092ZXJyaWRlKGFubm90YXRpb246IEFubm90YXRpb24pOiBib29sZWFuIHtcbiAgICByZXR1cm4gYW5ub3RhdGlvbi5hbm5vdGF0aW9uVHlwZV8gPT09IE9WRVJSSURFXG59XG5cbmZ1bmN0aW9uIG1ha2VfKHRoaXM6IEFubm90YXRpb24sIGFkbTogT2JzZXJ2YWJsZU9iamVjdEFkbWluaXN0cmF0aW9uLCBrZXkpOiBNYWtlUmVzdWx0IHtcbiAgICAvLyBNdXN0IG5vdCBiZSBwbGFpbiBvYmplY3RcbiAgICBpZiAoX19ERVZfXyAmJiBhZG0uaXNQbGFpbk9iamVjdF8pIHtcbiAgICAgICAgZGllKFxuICAgICAgICAgICAgYENhbm5vdCBhcHBseSAnJHt0aGlzLmFubm90YXRpb25UeXBlX30nIHRvICcke2FkbS5uYW1lX30uJHtrZXkudG9TdHJpbmcoKX0nOmAgK1xuICAgICAgICAgICAgICAgIGBcXG4nJHt0aGlzLmFubm90YXRpb25UeXBlX30nIGNhbm5vdCBiZSB1c2VkIG9uIHBsYWluIG9iamVjdHMuYFxuICAgICAgICApXG4gICAgfVxuICAgIC8vIE11c3Qgb3ZlcnJpZGUgc29tZXRoaW5nXG4gICAgaWYgKF9fREVWX18gJiYgIWhhc1Byb3AoYWRtLmFwcGxpZWRBbm5vdGF0aW9uc18hLCBrZXkpKSB7XG4gICAgICAgIGRpZShcbiAgICAgICAgICAgIGAnJHthZG0ubmFtZV99LiR7a2V5LnRvU3RyaW5nKCl9JyBpcyBhbm5vdGF0ZWQgd2l0aCAnJHt0aGlzLmFubm90YXRpb25UeXBlX30nLCBgICtcbiAgICAgICAgICAgICAgICBgYnV0IG5vIHN1Y2ggYW5ub3RhdGVkIG1lbWJlciB3YXMgZm91bmQgb24gcHJvdG90eXBlLmBcbiAgICAgICAgKVxuICAgIH1cbiAgICByZXR1cm4gTWFrZVJlc3VsdC5DYW5jZWxcbn1cblxuZnVuY3Rpb24gZXh0ZW5kXyh0aGlzOiBBbm5vdGF0aW9uLCBhZG0sIGtleSwgZGVzY3JpcHRvciwgcHJveHlUcmFwKTogYm9vbGVhbiB7XG4gICAgZGllKGAnJHt0aGlzLmFubm90YXRpb25UeXBlX30nIGNhbiBvbmx5IGJlIHVzZWQgd2l0aCAnbWFrZU9ic2VydmFibGUnYClcbn1cblxuZnVuY3Rpb24gZGVjb3JhdGVfMjAyMjNfKHRoaXM6IEFubm90YXRpb24sIGRlc2MsIGNvbnRleHQ6IERlY29yYXRvckNvbnRleHQpIHtcbiAgICBjb25zb2xlLndhcm4oYCcke3RoaXMuYW5ub3RhdGlvblR5cGVffScgY2Fubm90IGJlIHVzZWQgd2l0aCBkZWNvcmF0b3JzIC0gdGhpcyBpcyBhIG5vLW9wYClcbn1cbiIsImltcG9ydCB7XG4gICAgT2JzZXJ2YWJsZU9iamVjdEFkbWluaXN0cmF0aW9uLFxuICAgIGNyZWF0ZUFjdGlvbixcbiAgICBpc0FjdGlvbixcbiAgICBkZWZpbmVQcm9wZXJ0eSxcbiAgICBkaWUsXG4gICAgaXNGdW5jdGlvbixcbiAgICBBbm5vdGF0aW9uLFxuICAgIGdsb2JhbFN0YXRlLFxuICAgIE1ha2VSZXN1bHQsXG4gICAgYXNzZXJ0MjAyMjNEZWNvcmF0b3JUeXBlLFxuICAgIHN0b3JlQW5ub3RhdGlvblxufSBmcm9tIFwiLi4vaW50ZXJuYWxcIlxuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlQWN0aW9uQW5ub3RhdGlvbihuYW1lOiBzdHJpbmcsIG9wdGlvbnM/OiBvYmplY3QpOiBBbm5vdGF0aW9uIHtcbiAgICByZXR1cm4ge1xuICAgICAgICBhbm5vdGF0aW9uVHlwZV86IG5hbWUsXG4gICAgICAgIG9wdGlvbnNfOiBvcHRpb25zLFxuICAgICAgICBtYWtlXyxcbiAgICAgICAgZXh0ZW5kXyxcbiAgICAgICAgZGVjb3JhdGVfMjAyMjNfXG4gICAgfVxufVxuXG5mdW5jdGlvbiBtYWtlXyhcbiAgICB0aGlzOiBBbm5vdGF0aW9uLFxuICAgIGFkbTogT2JzZXJ2YWJsZU9iamVjdEFkbWluaXN0cmF0aW9uLFxuICAgIGtleTogUHJvcGVydHlLZXksXG4gICAgZGVzY3JpcHRvcjogUHJvcGVydHlEZXNjcmlwdG9yLFxuICAgIHNvdXJjZTogb2JqZWN0XG4pOiBNYWtlUmVzdWx0IHtcbiAgICAvLyBib3VuZFxuICAgIGlmICh0aGlzLm9wdGlvbnNfPy5ib3VuZCkge1xuICAgICAgICByZXR1cm4gdGhpcy5leHRlbmRfKGFkbSwga2V5LCBkZXNjcmlwdG9yLCBmYWxzZSkgPT09IG51bGxcbiAgICAgICAgICAgID8gTWFrZVJlc3VsdC5DYW5jZWxcbiAgICAgICAgICAgIDogTWFrZVJlc3VsdC5CcmVha1xuICAgIH1cbiAgICAvLyBvd25cbiAgICBpZiAoc291cmNlID09PSBhZG0udGFyZ2V0Xykge1xuICAgICAgICByZXR1cm4gdGhpcy5leHRlbmRfKGFkbSwga2V5LCBkZXNjcmlwdG9yLCBmYWxzZSkgPT09IG51bGxcbiAgICAgICAgICAgID8gTWFrZVJlc3VsdC5DYW5jZWxcbiAgICAgICAgICAgIDogTWFrZVJlc3VsdC5Db250aW51ZVxuICAgIH1cbiAgICAvLyBwcm90b3R5cGVcbiAgICBpZiAoaXNBY3Rpb24oZGVzY3JpcHRvci52YWx1ZSkpIHtcbiAgICAgICAgLy8gQSBwcm90b3R5cGUgY291bGQgaGF2ZSBiZWVuIGFubm90YXRlZCBhbHJlYWR5IGJ5IG90aGVyIGNvbnN0cnVjdG9yLFxuICAgICAgICAvLyByZXN0IG9mIHRoZSBwcm90byBjaGFpbiBtdXN0IGJlIGFubm90YXRlZCBhbHJlYWR5XG4gICAgICAgIHJldHVybiBNYWtlUmVzdWx0LkJyZWFrXG4gICAgfVxuICAgIGNvbnN0IGFjdGlvbkRlc2NyaXB0b3IgPSBjcmVhdGVBY3Rpb25EZXNjcmlwdG9yKGFkbSwgdGhpcywga2V5LCBkZXNjcmlwdG9yLCBmYWxzZSlcbiAgICBkZWZpbmVQcm9wZXJ0eShzb3VyY2UsIGtleSwgYWN0aW9uRGVzY3JpcHRvcilcbiAgICByZXR1cm4gTWFrZVJlc3VsdC5Db250aW51ZVxufVxuXG5mdW5jdGlvbiBleHRlbmRfKFxuICAgIHRoaXM6IEFubm90YXRpb24sXG4gICAgYWRtOiBPYnNlcnZhYmxlT2JqZWN0QWRtaW5pc3RyYXRpb24sXG4gICAga2V5OiBQcm9wZXJ0eUtleSxcbiAgICBkZXNjcmlwdG9yOiBQcm9wZXJ0eURlc2NyaXB0b3IsXG4gICAgcHJveHlUcmFwOiBib29sZWFuXG4pOiBib29sZWFuIHwgbnVsbCB7XG4gICAgY29uc3QgYWN0aW9uRGVzY3JpcHRvciA9IGNyZWF0ZUFjdGlvbkRlc2NyaXB0b3IoYWRtLCB0aGlzLCBrZXksIGRlc2NyaXB0b3IpXG4gICAgcmV0dXJuIGFkbS5kZWZpbmVQcm9wZXJ0eV8oa2V5LCBhY3Rpb25EZXNjcmlwdG9yLCBwcm94eVRyYXApXG59XG5cbmZ1bmN0aW9uIGRlY29yYXRlXzIwMjIzXyh0aGlzOiBBbm5vdGF0aW9uLCBtdGhkLCBjb250ZXh0OiBEZWNvcmF0b3JDb250ZXh0KSB7XG4gICAgaWYgKF9fREVWX18pIHtcbiAgICAgICAgYXNzZXJ0MjAyMjNEZWNvcmF0b3JUeXBlKGNvbnRleHQsIFtcIm1ldGhvZFwiLCBcImZpZWxkXCJdKVxuICAgIH1cbiAgICBjb25zdCB7IGtpbmQsIG5hbWUsIGFkZEluaXRpYWxpemVyIH0gPSBjb250ZXh0XG4gICAgY29uc3QgYW5uID0gdGhpc1xuXG4gICAgY29uc3QgX2NyZWF0ZUFjdGlvbiA9IG0gPT5cbiAgICAgICAgY3JlYXRlQWN0aW9uKGFubi5vcHRpb25zXz8ubmFtZSA/PyBuYW1lIS50b1N0cmluZygpLCBtLCBhbm4ub3B0aW9uc18/LmF1dG9BY3Rpb24gPz8gZmFsc2UpXG5cbiAgICAvLyBCYWNrd2FyZHMvTGVnYWN5IGJlaGF2aW9yLCBleHBlY3RzIG1ha2VPYnNlcnZhYmxlKHRoaXMpXG4gICAgaWYgKGtpbmQgPT0gXCJmaWVsZFwiKSB7XG4gICAgICAgIGFkZEluaXRpYWxpemVyKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHN0b3JlQW5ub3RhdGlvbih0aGlzLCBuYW1lLCBhbm4pXG4gICAgICAgIH0pXG4gICAgICAgIHJldHVyblxuICAgIH1cblxuICAgIGlmIChraW5kID09IFwibWV0aG9kXCIpIHtcbiAgICAgICAgaWYgKCFpc0FjdGlvbihtdGhkKSkge1xuICAgICAgICAgICAgbXRoZCA9IF9jcmVhdGVBY3Rpb24obXRoZClcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnNfPy5ib3VuZCkge1xuICAgICAgICAgICAgYWRkSW5pdGlhbGl6ZXIoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHNlbGYgPSB0aGlzIGFzIGFueVxuICAgICAgICAgICAgICAgIGNvbnN0IGJvdW5kID0gc2VsZltuYW1lXS5iaW5kKHNlbGYpXG4gICAgICAgICAgICAgICAgYm91bmQuaXNNb2J4QWN0aW9uID0gdHJ1ZVxuICAgICAgICAgICAgICAgIHNlbGZbbmFtZV0gPSBib3VuZFxuICAgICAgICAgICAgfSlcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBtdGhkXG4gICAgfVxuXG4gICAgZGllKFxuICAgICAgICBgQ2Fubm90IGFwcGx5ICcke2Fubi5hbm5vdGF0aW9uVHlwZV99JyB0byAnJHtTdHJpbmcobmFtZSl9JyAoa2luZDogJHtraW5kfSk6YCArXG4gICAgICAgICAgICBgXFxuJyR7YW5uLmFubm90YXRpb25UeXBlX30nIGNhbiBvbmx5IGJlIHVzZWQgb24gcHJvcGVydGllcyB3aXRoIGEgZnVuY3Rpb24gdmFsdWUuYFxuICAgIClcbn1cblxuZnVuY3Rpb24gYXNzZXJ0QWN0aW9uRGVzY3JpcHRvcihcbiAgICBhZG06IE9ic2VydmFibGVPYmplY3RBZG1pbmlzdHJhdGlvbixcbiAgICB7IGFubm90YXRpb25UeXBlXyB9OiBBbm5vdGF0aW9uLFxuICAgIGtleTogUHJvcGVydHlLZXksXG4gICAgeyB2YWx1ZSB9OiBQcm9wZXJ0eURlc2NyaXB0b3Jcbikge1xuICAgIGlmIChfX0RFVl9fICYmICFpc0Z1bmN0aW9uKHZhbHVlKSkge1xuICAgICAgICBkaWUoXG4gICAgICAgICAgICBgQ2Fubm90IGFwcGx5ICcke2Fubm90YXRpb25UeXBlX30nIHRvICcke2FkbS5uYW1lX30uJHtrZXkudG9TdHJpbmcoKX0nOmAgK1xuICAgICAgICAgICAgICAgIGBcXG4nJHthbm5vdGF0aW9uVHlwZV99JyBjYW4gb25seSBiZSB1c2VkIG9uIHByb3BlcnRpZXMgd2l0aCBhIGZ1bmN0aW9uIHZhbHVlLmBcbiAgICAgICAgKVxuICAgIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUFjdGlvbkRlc2NyaXB0b3IoXG4gICAgYWRtOiBPYnNlcnZhYmxlT2JqZWN0QWRtaW5pc3RyYXRpb24sXG4gICAgYW5ub3RhdGlvbjogQW5ub3RhdGlvbixcbiAgICBrZXk6IFByb3BlcnR5S2V5LFxuICAgIGRlc2NyaXB0b3I6IFByb3BlcnR5RGVzY3JpcHRvcixcbiAgICAvLyBwcm92aWRlcyBhYmlsaXR5IHRvIGRpc2FibGUgc2FmZURlc2NyaXB0b3JzIGZvciBwcm90b3R5cGVzXG4gICAgc2FmZURlc2NyaXB0b3JzOiBib29sZWFuID0gZ2xvYmFsU3RhdGUuc2FmZURlc2NyaXB0b3JzXG4pIHtcbiAgICBhc3NlcnRBY3Rpb25EZXNjcmlwdG9yKGFkbSwgYW5ub3RhdGlvbiwga2V5LCBkZXNjcmlwdG9yKVxuICAgIGxldCB7IHZhbHVlIH0gPSBkZXNjcmlwdG9yXG4gICAgaWYgKGFubm90YXRpb24ub3B0aW9uc18/LmJvdW5kKSB7XG4gICAgICAgIHZhbHVlID0gdmFsdWUuYmluZChhZG0ucHJveHlfID8/IGFkbS50YXJnZXRfKVxuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgICB2YWx1ZTogY3JlYXRlQWN0aW9uKFxuICAgICAgICAgICAgYW5ub3RhdGlvbi5vcHRpb25zXz8ubmFtZSA/PyBrZXkudG9TdHJpbmcoKSxcbiAgICAgICAgICAgIHZhbHVlLFxuICAgICAgICAgICAgYW5ub3RhdGlvbi5vcHRpb25zXz8uYXV0b0FjdGlvbiA/PyBmYWxzZSxcbiAgICAgICAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9tb2J4anMvbW9ieC9kaXNjdXNzaW9ucy8zMTQwXG4gICAgICAgICAgICBhbm5vdGF0aW9uLm9wdGlvbnNfPy5ib3VuZCA/IGFkbS5wcm94eV8gPz8gYWRtLnRhcmdldF8gOiB1bmRlZmluZWRcbiAgICAgICAgKSxcbiAgICAgICAgLy8gTm9uLWNvbmZpZ3VyYWJsZSBmb3IgY2xhc3Nlc1xuICAgICAgICAvLyBwcmV2ZW50cyBhY2NpZGVudGFsIGZpZWxkIHJlZGVmaW5pdGlvbiBpbiBzdWJjbGFzc1xuICAgICAgICBjb25maWd1cmFibGU6IHNhZmVEZXNjcmlwdG9ycyA/IGFkbS5pc1BsYWluT2JqZWN0XyA6IHRydWUsXG4gICAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9tb2J4anMvbW9ieC9wdWxsLzI2NDEjaXNzdWVjb21tZW50LTczNzI5MjA1OFxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgLy8gTm9uLW9ic2V2YWJsZSwgdGhlcmVmb3JlIG5vbi13cml0YWJsZVxuICAgICAgICAvLyBBbHNvIHByZXZlbnRzIHJld3JpdGluZyBpbiBzdWJjbGFzcyBjb25zdHJ1Y3RvclxuICAgICAgICB3cml0YWJsZTogc2FmZURlc2NyaXB0b3JzID8gZmFsc2UgOiB0cnVlXG4gICAgfVxufVxuIiwiaW1wb3J0IHtcbiAgICBPYnNlcnZhYmxlT2JqZWN0QWRtaW5pc3RyYXRpb24sXG4gICAgQW5ub3RhdGlvbixcbiAgICBkZWZpbmVQcm9wZXJ0eSxcbiAgICBkaWUsXG4gICAgZmxvdyxcbiAgICBpc0Zsb3csXG4gICAgaXNGdW5jdGlvbixcbiAgICBnbG9iYWxTdGF0ZSxcbiAgICBNYWtlUmVzdWx0LFxuICAgIGhhc1Byb3AsXG4gICAgYXNzZXJ0MjAyMjNEZWNvcmF0b3JUeXBlXG59IGZyb20gXCIuLi9pbnRlcm5hbFwiXG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVGbG93QW5ub3RhdGlvbihuYW1lOiBzdHJpbmcsIG9wdGlvbnM/OiBvYmplY3QpOiBBbm5vdGF0aW9uIHtcbiAgICByZXR1cm4ge1xuICAgICAgICBhbm5vdGF0aW9uVHlwZV86IG5hbWUsXG4gICAgICAgIG9wdGlvbnNfOiBvcHRpb25zLFxuICAgICAgICBtYWtlXyxcbiAgICAgICAgZXh0ZW5kXyxcbiAgICAgICAgZGVjb3JhdGVfMjAyMjNfXG4gICAgfVxufVxuXG5mdW5jdGlvbiBtYWtlXyhcbiAgICB0aGlzOiBBbm5vdGF0aW9uLFxuICAgIGFkbTogT2JzZXJ2YWJsZU9iamVjdEFkbWluaXN0cmF0aW9uLFxuICAgIGtleTogUHJvcGVydHlLZXksXG4gICAgZGVzY3JpcHRvcjogUHJvcGVydHlEZXNjcmlwdG9yLFxuICAgIHNvdXJjZTogb2JqZWN0XG4pOiBNYWtlUmVzdWx0IHtcbiAgICAvLyBvd25cbiAgICBpZiAoc291cmNlID09PSBhZG0udGFyZ2V0Xykge1xuICAgICAgICByZXR1cm4gdGhpcy5leHRlbmRfKGFkbSwga2V5LCBkZXNjcmlwdG9yLCBmYWxzZSkgPT09IG51bGxcbiAgICAgICAgICAgID8gTWFrZVJlc3VsdC5DYW5jZWxcbiAgICAgICAgICAgIDogTWFrZVJlc3VsdC5Db250aW51ZVxuICAgIH1cbiAgICAvLyBwcm90b3R5cGVcbiAgICAvLyBib3VuZCAtIG11c3QgYW5ub3RhdGUgcHJvdG9zIHRvIHN1cHBvcnQgc3VwZXIuZmxvdygpXG4gICAgaWYgKHRoaXMub3B0aW9uc18/LmJvdW5kICYmICghaGFzUHJvcChhZG0udGFyZ2V0Xywga2V5KSB8fCAhaXNGbG93KGFkbS50YXJnZXRfW2tleV0pKSkge1xuICAgICAgICBpZiAodGhpcy5leHRlbmRfKGFkbSwga2V5LCBkZXNjcmlwdG9yLCBmYWxzZSkgPT09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiBNYWtlUmVzdWx0LkNhbmNlbFxuICAgICAgICB9XG4gICAgfVxuICAgIGlmIChpc0Zsb3coZGVzY3JpcHRvci52YWx1ZSkpIHtcbiAgICAgICAgLy8gQSBwcm90b3R5cGUgY291bGQgaGF2ZSBiZWVuIGFubm90YXRlZCBhbHJlYWR5IGJ5IG90aGVyIGNvbnN0cnVjdG9yLFxuICAgICAgICAvLyByZXN0IG9mIHRoZSBwcm90byBjaGFpbiBtdXN0IGJlIGFubm90YXRlZCBhbHJlYWR5XG4gICAgICAgIHJldHVybiBNYWtlUmVzdWx0LkJyZWFrXG4gICAgfVxuICAgIGNvbnN0IGZsb3dEZXNjcmlwdG9yID0gY3JlYXRlRmxvd0Rlc2NyaXB0b3IoYWRtLCB0aGlzLCBrZXksIGRlc2NyaXB0b3IsIGZhbHNlLCBmYWxzZSlcbiAgICBkZWZpbmVQcm9wZXJ0eShzb3VyY2UsIGtleSwgZmxvd0Rlc2NyaXB0b3IpXG4gICAgcmV0dXJuIE1ha2VSZXN1bHQuQ29udGludWVcbn1cblxuZnVuY3Rpb24gZXh0ZW5kXyhcbiAgICB0aGlzOiBBbm5vdGF0aW9uLFxuICAgIGFkbTogT2JzZXJ2YWJsZU9iamVjdEFkbWluaXN0cmF0aW9uLFxuICAgIGtleTogUHJvcGVydHlLZXksXG4gICAgZGVzY3JpcHRvcjogUHJvcGVydHlEZXNjcmlwdG9yLFxuICAgIHByb3h5VHJhcDogYm9vbGVhblxuKTogYm9vbGVhbiB8IG51bGwge1xuICAgIGNvbnN0IGZsb3dEZXNjcmlwdG9yID0gY3JlYXRlRmxvd0Rlc2NyaXB0b3IoYWRtLCB0aGlzLCBrZXksIGRlc2NyaXB0b3IsIHRoaXMub3B0aW9uc18/LmJvdW5kKVxuICAgIHJldHVybiBhZG0uZGVmaW5lUHJvcGVydHlfKGtleSwgZmxvd0Rlc2NyaXB0b3IsIHByb3h5VHJhcClcbn1cblxuZnVuY3Rpb24gZGVjb3JhdGVfMjAyMjNfKHRoaXM6IEFubm90YXRpb24sIG10aGQsIGNvbnRleHQ6IENsYXNzTWV0aG9kRGVjb3JhdG9yQ29udGV4dCkge1xuICAgIGlmIChfX0RFVl9fKSB7XG4gICAgICAgIGFzc2VydDIwMjIzRGVjb3JhdG9yVHlwZShjb250ZXh0LCBbXCJtZXRob2RcIl0pXG4gICAgfVxuICAgIGNvbnN0IHsgbmFtZSwgYWRkSW5pdGlhbGl6ZXIgfSA9IGNvbnRleHRcblxuICAgIGlmICghaXNGbG93KG10aGQpKSB7XG4gICAgICAgIG10aGQgPSBmbG93KG10aGQpXG4gICAgfVxuXG4gICAgaWYgKHRoaXMub3B0aW9uc18/LmJvdW5kKSB7XG4gICAgICAgIGFkZEluaXRpYWxpemVyKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGNvbnN0IHNlbGYgPSB0aGlzIGFzIGFueVxuICAgICAgICAgICAgY29uc3QgYm91bmQgPSBzZWxmW25hbWVdLmJpbmQoc2VsZilcbiAgICAgICAgICAgIGJvdW5kLmlzTW9iWEZsb3cgPSB0cnVlXG4gICAgICAgICAgICBzZWxmW25hbWVdID0gYm91bmRcbiAgICAgICAgfSlcbiAgICB9XG5cbiAgICByZXR1cm4gbXRoZFxufVxuXG5mdW5jdGlvbiBhc3NlcnRGbG93RGVzY3JpcHRvcihcbiAgICBhZG06IE9ic2VydmFibGVPYmplY3RBZG1pbmlzdHJhdGlvbixcbiAgICB7IGFubm90YXRpb25UeXBlXyB9OiBBbm5vdGF0aW9uLFxuICAgIGtleTogUHJvcGVydHlLZXksXG4gICAgeyB2YWx1ZSB9OiBQcm9wZXJ0eURlc2NyaXB0b3Jcbikge1xuICAgIGlmIChfX0RFVl9fICYmICFpc0Z1bmN0aW9uKHZhbHVlKSkge1xuICAgICAgICBkaWUoXG4gICAgICAgICAgICBgQ2Fubm90IGFwcGx5ICcke2Fubm90YXRpb25UeXBlX30nIHRvICcke2FkbS5uYW1lX30uJHtrZXkudG9TdHJpbmcoKX0nOmAgK1xuICAgICAgICAgICAgICAgIGBcXG4nJHthbm5vdGF0aW9uVHlwZV99JyBjYW4gb25seSBiZSB1c2VkIG9uIHByb3BlcnRpZXMgd2l0aCBhIGdlbmVyYXRvciBmdW5jdGlvbiB2YWx1ZS5gXG4gICAgICAgIClcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUZsb3dEZXNjcmlwdG9yKFxuICAgIGFkbTogT2JzZXJ2YWJsZU9iamVjdEFkbWluaXN0cmF0aW9uLFxuICAgIGFubm90YXRpb246IEFubm90YXRpb24sXG4gICAga2V5OiBQcm9wZXJ0eUtleSxcbiAgICBkZXNjcmlwdG9yOiBQcm9wZXJ0eURlc2NyaXB0b3IsXG4gICAgYm91bmQ6IGJvb2xlYW4sXG4gICAgLy8gcHJvdmlkZXMgYWJpbGl0eSB0byBkaXNhYmxlIHNhZmVEZXNjcmlwdG9ycyBmb3IgcHJvdG90eXBlc1xuICAgIHNhZmVEZXNjcmlwdG9yczogYm9vbGVhbiA9IGdsb2JhbFN0YXRlLnNhZmVEZXNjcmlwdG9yc1xuKTogUHJvcGVydHlEZXNjcmlwdG9yIHtcbiAgICBhc3NlcnRGbG93RGVzY3JpcHRvcihhZG0sIGFubm90YXRpb24sIGtleSwgZGVzY3JpcHRvcilcbiAgICBsZXQgeyB2YWx1ZSB9ID0gZGVzY3JpcHRvclxuICAgIC8vIEluIGNhc2Ugb2YgZmxvdy5ib3VuZCwgdGhlIGRlc2NyaXB0b3IgY2FuIGJlIGZyb20gYWxyZWFkeSBhbm5vdGF0ZWQgcHJvdG90eXBlXG4gICAgaWYgKCFpc0Zsb3codmFsdWUpKSB7XG4gICAgICAgIHZhbHVlID0gZmxvdyh2YWx1ZSlcbiAgICB9XG4gICAgaWYgKGJvdW5kKSB7XG4gICAgICAgIC8vIFdlIGRvIG5vdCBrZWVwIG9yaWdpbmFsIGZ1bmN0aW9uIGFyb3VuZCwgc28gd2UgYmluZCB0aGUgZXhpc3RpbmcgZmxvd1xuICAgICAgICB2YWx1ZSA9IHZhbHVlLmJpbmQoYWRtLnByb3h5XyA/PyBhZG0udGFyZ2V0XylcbiAgICAgICAgLy8gVGhpcyBpcyBub3JtYWxseSBzZXQgYnkgYGZsb3dgLCBidXQgYGJpbmRgIHJldHVybnMgbmV3IGZ1bmN0aW9uLi4uXG4gICAgICAgIHZhbHVlLmlzTW9iWEZsb3cgPSB0cnVlXG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICAgIHZhbHVlLFxuICAgICAgICAvLyBOb24tY29uZmlndXJhYmxlIGZvciBjbGFzc2VzXG4gICAgICAgIC8vIHByZXZlbnRzIGFjY2lkZW50YWwgZmllbGQgcmVkZWZpbml0aW9uIGluIHN1YmNsYXNzXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogc2FmZURlc2NyaXB0b3JzID8gYWRtLmlzUGxhaW5PYmplY3RfIDogdHJ1ZSxcbiAgICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL21vYnhqcy9tb2J4L3B1bGwvMjY0MSNpc3N1ZWNvbW1lbnQtNzM3MjkyMDU4XG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICAvLyBOb24tb2JzZXZhYmxlLCB0aGVyZWZvcmUgbm9uLXdyaXRhYmxlXG4gICAgICAgIC8vIEFsc28gcHJldmVudHMgcmV3cml0aW5nIGluIHN1YmNsYXNzIGNvbnN0cnVjdG9yXG4gICAgICAgIHdyaXRhYmxlOiBzYWZlRGVzY3JpcHRvcnMgPyBmYWxzZSA6IHRydWVcbiAgICB9XG59XG4iLCJpbXBvcnQge1xuICAgIE9ic2VydmFibGVPYmplY3RBZG1pbmlzdHJhdGlvbixcbiAgICBkaWUsXG4gICAgQW5ub3RhdGlvbixcbiAgICBNYWtlUmVzdWx0LFxuICAgIGFzc2VydDIwMjIzRGVjb3JhdG9yVHlwZSxcbiAgICAkbW9ieCxcbiAgICBhc09ic2VydmFibGVPYmplY3QsXG4gICAgQ29tcHV0ZWRWYWx1ZVxufSBmcm9tIFwiLi4vaW50ZXJuYWxcIlxuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlQ29tcHV0ZWRBbm5vdGF0aW9uKG5hbWU6IHN0cmluZywgb3B0aW9ucz86IG9iamVjdCk6IEFubm90YXRpb24ge1xuICAgIHJldHVybiB7XG4gICAgICAgIGFubm90YXRpb25UeXBlXzogbmFtZSxcbiAgICAgICAgb3B0aW9uc186IG9wdGlvbnMsXG4gICAgICAgIG1ha2VfLFxuICAgICAgICBleHRlbmRfLFxuICAgICAgICBkZWNvcmF0ZV8yMDIyM19cbiAgICB9XG59XG5cbmZ1bmN0aW9uIG1ha2VfKFxuICAgIHRoaXM6IEFubm90YXRpb24sXG4gICAgYWRtOiBPYnNlcnZhYmxlT2JqZWN0QWRtaW5pc3RyYXRpb24sXG4gICAga2V5OiBQcm9wZXJ0eUtleSxcbiAgICBkZXNjcmlwdG9yOiBQcm9wZXJ0eURlc2NyaXB0b3Jcbik6IE1ha2VSZXN1bHQge1xuICAgIHJldHVybiB0aGlzLmV4dGVuZF8oYWRtLCBrZXksIGRlc2NyaXB0b3IsIGZhbHNlKSA9PT0gbnVsbCA/IE1ha2VSZXN1bHQuQ2FuY2VsIDogTWFrZVJlc3VsdC5CcmVha1xufVxuXG5mdW5jdGlvbiBleHRlbmRfKFxuICAgIHRoaXM6IEFubm90YXRpb24sXG4gICAgYWRtOiBPYnNlcnZhYmxlT2JqZWN0QWRtaW5pc3RyYXRpb24sXG4gICAga2V5OiBQcm9wZXJ0eUtleSxcbiAgICBkZXNjcmlwdG9yOiBQcm9wZXJ0eURlc2NyaXB0b3IsXG4gICAgcHJveHlUcmFwOiBib29sZWFuXG4pOiBib29sZWFuIHwgbnVsbCB7XG4gICAgYXNzZXJ0Q29tcHV0ZWREZXNjcmlwdG9yKGFkbSwgdGhpcywga2V5LCBkZXNjcmlwdG9yKVxuICAgIHJldHVybiBhZG0uZGVmaW5lQ29tcHV0ZWRQcm9wZXJ0eV8oXG4gICAgICAgIGtleSxcbiAgICAgICAge1xuICAgICAgICAgICAgLi4udGhpcy5vcHRpb25zXyxcbiAgICAgICAgICAgIGdldDogZGVzY3JpcHRvci5nZXQsXG4gICAgICAgICAgICBzZXQ6IGRlc2NyaXB0b3Iuc2V0XG4gICAgICAgIH0sXG4gICAgICAgIHByb3h5VHJhcFxuICAgIClcbn1cblxuZnVuY3Rpb24gZGVjb3JhdGVfMjAyMjNfKHRoaXM6IEFubm90YXRpb24sIGdldCwgY29udGV4dDogQ2xhc3NHZXR0ZXJEZWNvcmF0b3JDb250ZXh0KSB7XG4gICAgaWYgKF9fREVWX18pIHtcbiAgICAgICAgYXNzZXJ0MjAyMjNEZWNvcmF0b3JUeXBlKGNvbnRleHQsIFtcImdldHRlclwiXSlcbiAgICB9XG4gICAgY29uc3QgYW5uID0gdGhpc1xuICAgIGNvbnN0IHsgbmFtZToga2V5LCBhZGRJbml0aWFsaXplciB9ID0gY29udGV4dFxuXG4gICAgYWRkSW5pdGlhbGl6ZXIoZnVuY3Rpb24gKCkge1xuICAgICAgICBjb25zdCBhZG06IE9ic2VydmFibGVPYmplY3RBZG1pbmlzdHJhdGlvbiA9IGFzT2JzZXJ2YWJsZU9iamVjdCh0aGlzKVskbW9ieF1cbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHtcbiAgICAgICAgICAgIC4uLmFubi5vcHRpb25zXyxcbiAgICAgICAgICAgIGdldCxcbiAgICAgICAgICAgIGNvbnRleHQ6IHRoaXNcbiAgICAgICAgfVxuICAgICAgICBvcHRpb25zLm5hbWUgfHw9IF9fREVWX19cbiAgICAgICAgICAgID8gYCR7YWRtLm5hbWVffS4ke2tleS50b1N0cmluZygpfWBcbiAgICAgICAgICAgIDogYE9ic2VydmFibGVPYmplY3QuJHtrZXkudG9TdHJpbmcoKX1gXG4gICAgICAgIGFkbS52YWx1ZXNfLnNldChrZXksIG5ldyBDb21wdXRlZFZhbHVlKG9wdGlvbnMpKVxuICAgIH0pXG5cbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpc1skbW9ieF0uZ2V0T2JzZXJ2YWJsZVByb3BWYWx1ZV8oa2V5KVxuICAgIH1cbn1cblxuZnVuY3Rpb24gYXNzZXJ0Q29tcHV0ZWREZXNjcmlwdG9yKFxuICAgIGFkbTogT2JzZXJ2YWJsZU9iamVjdEFkbWluaXN0cmF0aW9uLFxuICAgIHsgYW5ub3RhdGlvblR5cGVfIH06IEFubm90YXRpb24sXG4gICAga2V5OiBQcm9wZXJ0eUtleSxcbiAgICB7IGdldCB9OiBQcm9wZXJ0eURlc2NyaXB0b3Jcbikge1xuICAgIGlmIChfX0RFVl9fICYmICFnZXQpIHtcbiAgICAgICAgZGllKFxuICAgICAgICAgICAgYENhbm5vdCBhcHBseSAnJHthbm5vdGF0aW9uVHlwZV99JyB0byAnJHthZG0ubmFtZV99LiR7a2V5LnRvU3RyaW5nKCl9JzpgICtcbiAgICAgICAgICAgICAgICBgXFxuJyR7YW5ub3RhdGlvblR5cGVffScgY2FuIG9ubHkgYmUgdXNlZCBvbiBnZXR0ZXIoK3NldHRlcikgcHJvcGVydGllcy5gXG4gICAgICAgIClcbiAgICB9XG59XG4iLCJpbXBvcnQge1xuICAgIE9ic2VydmFibGVPYmplY3RBZG1pbmlzdHJhdGlvbixcbiAgICBkZWVwRW5oYW5jZXIsXG4gICAgZGllLFxuICAgIEFubm90YXRpb24sXG4gICAgTWFrZVJlc3VsdCxcbiAgICBhc3NlcnQyMDIyM0RlY29yYXRvclR5cGUsXG4gICAgT2JzZXJ2YWJsZVZhbHVlLFxuICAgIGFzT2JzZXJ2YWJsZU9iamVjdCxcbiAgICAkbW9ieFxufSBmcm9tIFwiLi4vaW50ZXJuYWxcIlxuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlT2JzZXJ2YWJsZUFubm90YXRpb24obmFtZTogc3RyaW5nLCBvcHRpb25zPzogb2JqZWN0KTogQW5ub3RhdGlvbiB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgYW5ub3RhdGlvblR5cGVfOiBuYW1lLFxuICAgICAgICBvcHRpb25zXzogb3B0aW9ucyxcbiAgICAgICAgbWFrZV8sXG4gICAgICAgIGV4dGVuZF8sXG4gICAgICAgIGRlY29yYXRlXzIwMjIzX1xuICAgIH1cbn1cblxuZnVuY3Rpb24gbWFrZV8oXG4gICAgdGhpczogQW5ub3RhdGlvbixcbiAgICBhZG06IE9ic2VydmFibGVPYmplY3RBZG1pbmlzdHJhdGlvbixcbiAgICBrZXk6IFByb3BlcnR5S2V5LFxuICAgIGRlc2NyaXB0b3I6IFByb3BlcnR5RGVzY3JpcHRvclxuKTogTWFrZVJlc3VsdCB7XG4gICAgcmV0dXJuIHRoaXMuZXh0ZW5kXyhhZG0sIGtleSwgZGVzY3JpcHRvciwgZmFsc2UpID09PSBudWxsID8gTWFrZVJlc3VsdC5DYW5jZWwgOiBNYWtlUmVzdWx0LkJyZWFrXG59XG5cbmZ1bmN0aW9uIGV4dGVuZF8oXG4gICAgdGhpczogQW5ub3RhdGlvbixcbiAgICBhZG06IE9ic2VydmFibGVPYmplY3RBZG1pbmlzdHJhdGlvbixcbiAgICBrZXk6IFByb3BlcnR5S2V5LFxuICAgIGRlc2NyaXB0b3I6IFByb3BlcnR5RGVzY3JpcHRvcixcbiAgICBwcm94eVRyYXA6IGJvb2xlYW5cbik6IGJvb2xlYW4gfCBudWxsIHtcbiAgICBhc3NlcnRPYnNlcnZhYmxlRGVzY3JpcHRvcihhZG0sIHRoaXMsIGtleSwgZGVzY3JpcHRvcilcbiAgICByZXR1cm4gYWRtLmRlZmluZU9ic2VydmFibGVQcm9wZXJ0eV8oXG4gICAgICAgIGtleSxcbiAgICAgICAgZGVzY3JpcHRvci52YWx1ZSxcbiAgICAgICAgdGhpcy5vcHRpb25zXz8uZW5oYW5jZXIgPz8gZGVlcEVuaGFuY2VyLFxuICAgICAgICBwcm94eVRyYXBcbiAgICApXG59XG5cbmZ1bmN0aW9uIGRlY29yYXRlXzIwMjIzXyhcbiAgICB0aGlzOiBBbm5vdGF0aW9uLFxuICAgIGRlc2MsXG4gICAgY29udGV4dDogQ2xhc3NBY2Nlc3NvckRlY29yYXRvckNvbnRleHQgfCBDbGFzc0ZpZWxkRGVjb3JhdG9yQ29udGV4dFxuKSB7XG4gICAgaWYgKF9fREVWX18pIHtcbiAgICAgICAgaWYgKGNvbnRleHQua2luZCA9PT0gXCJmaWVsZFwiKSB7XG4gICAgICAgICAgICB0aHJvdyBkaWUoXG4gICAgICAgICAgICAgICAgYFBsZWFzZSB1c2UgXFxgQG9ic2VydmFibGUgYWNjZXNzb3IgJHtTdHJpbmcoXG4gICAgICAgICAgICAgICAgICAgIGNvbnRleHQubmFtZVxuICAgICAgICAgICAgICAgICl9XFxgIGluc3RlYWQgb2YgXFxgQG9ic2VydmFibGUgJHtTdHJpbmcoY29udGV4dC5uYW1lKX1cXGBgXG4gICAgICAgICAgICApXG4gICAgICAgIH1cbiAgICAgICAgYXNzZXJ0MjAyMjNEZWNvcmF0b3JUeXBlKGNvbnRleHQsIFtcImFjY2Vzc29yXCJdKVxuICAgIH1cblxuICAgIGNvbnN0IGFubiA9IHRoaXNcbiAgICBjb25zdCB7IGtpbmQsIG5hbWUgfSA9IGNvbnRleHRcblxuICAgIC8vIFRoZSBsYXppbmVzcyBoZXJlIGlzIG5vdCBpZGVhbC4uLiBJdCdzIGEgd29ya2Fyb3VuZCB0byBob3cgMjAyMi4zIERlY29yYXRvcnMgYXJlIGltcGxlbWVudGVkOlxuICAgIC8vICAgYGFkZEluaXRpYWxpemVyYCBjYWxsYmFja3MgYXJlIGV4ZWN1dGVkIF9iZWZvcmVfIGFueSBhY2Nlc3NvcnMgYXJlIGRlZmluZWQgKGluc3RlYWQgb2YgdGhlIGlkZWFsLWZvci11cyByaWdodCBhZnRlciBlYWNoKS5cbiAgICAvLyAgIFRoaXMgbWVhbnMgdGhhdCwgaWYgd2Ugd2VyZSB0byBkbyBvdXIgc3R1ZmYgaW4gYW4gYGFkZEluaXRpYWxpemVyYCwgd2UnZCBhdHRlbXB0IHRvIHJlYWQgYSBwcml2YXRlIHNsb3RcbiAgICAvLyAgIGJlZm9yZSBpdCBoYXMgYmVlbiBpbml0aWFsaXplZC4gVGhlIHJ1bnRpbWUgZG9lc24ndCBsaWtlIHRoYXQgYW5kIHRocm93cyBhIGBDYW5ub3QgcmVhZCBwcml2YXRlIG1lbWJlclxuICAgIC8vICAgZnJvbSBhbiBvYmplY3Qgd2hvc2UgY2xhc3MgZGlkIG5vdCBkZWNsYXJlIGl0YCBlcnJvci5cbiAgICAvLyBUT0RPOiBpdCBzZWVtcyB0aGF0IHRoaXMgd2lsbCBub3QgYmUgcmVxdWlyZWQgYW55bW9yZSBpbiB0aGUgZmluYWwgdmVyc2lvbiBvZiB0aGUgc3BlY1xuICAgIC8vIFNlZSBUT0RPOiBsaW5rXG4gICAgY29uc3QgaW5pdGlhbGl6ZWRPYmplY3RzID0gbmV3IFdlYWtTZXQoKVxuXG4gICAgZnVuY3Rpb24gaW5pdGlhbGl6ZU9ic2VydmFibGUodGFyZ2V0LCB2YWx1ZSkge1xuICAgICAgICBjb25zdCBhZG06IE9ic2VydmFibGVPYmplY3RBZG1pbmlzdHJhdGlvbiA9IGFzT2JzZXJ2YWJsZU9iamVjdCh0YXJnZXQpWyRtb2J4XVxuICAgICAgICBjb25zdCBvYnNlcnZhYmxlID0gbmV3IE9ic2VydmFibGVWYWx1ZShcbiAgICAgICAgICAgIHZhbHVlLFxuICAgICAgICAgICAgYW5uLm9wdGlvbnNfPy5lbmhhbmNlciA/PyBkZWVwRW5oYW5jZXIsXG4gICAgICAgICAgICBfX0RFVl9fID8gYCR7YWRtLm5hbWVffS4ke25hbWUudG9TdHJpbmcoKX1gIDogYE9ic2VydmFibGVPYmplY3QuJHtuYW1lLnRvU3RyaW5nKCl9YCxcbiAgICAgICAgICAgIGZhbHNlXG4gICAgICAgIClcbiAgICAgICAgYWRtLnZhbHVlc18uc2V0KG5hbWUsIG9ic2VydmFibGUpXG4gICAgICAgIGluaXRpYWxpemVkT2JqZWN0cy5hZGQodGFyZ2V0KVxuICAgIH1cblxuICAgIGlmIChraW5kID09IFwiYWNjZXNzb3JcIikge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgZ2V0KCkge1xuICAgICAgICAgICAgICAgIGlmICghaW5pdGlhbGl6ZWRPYmplY3RzLmhhcyh0aGlzKSkge1xuICAgICAgICAgICAgICAgICAgICBpbml0aWFsaXplT2JzZXJ2YWJsZSh0aGlzLCBkZXNjLmdldC5jYWxsKHRoaXMpKVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpc1skbW9ieF0uZ2V0T2JzZXJ2YWJsZVByb3BWYWx1ZV8obmFtZSlcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzZXQodmFsdWUpIHtcbiAgICAgICAgICAgICAgICBpZiAoIWluaXRpYWxpemVkT2JqZWN0cy5oYXModGhpcykpIHtcbiAgICAgICAgICAgICAgICAgICAgaW5pdGlhbGl6ZU9ic2VydmFibGUodGhpcywgdmFsdWUpXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzWyRtb2J4XS5zZXRPYnNlcnZhYmxlUHJvcFZhbHVlXyhuYW1lLCB2YWx1ZSlcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBpbml0KHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFpbml0aWFsaXplZE9iamVjdHMuaGFzKHRoaXMpKSB7XG4gICAgICAgICAgICAgICAgICAgIGluaXRpYWxpemVPYnNlcnZhYmxlKHRoaXMsIHZhbHVlKVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWVcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVyblxufVxuXG5mdW5jdGlvbiBhc3NlcnRPYnNlcnZhYmxlRGVzY3JpcHRvcihcbiAgICBhZG06IE9ic2VydmFibGVPYmplY3RBZG1pbmlzdHJhdGlvbixcbiAgICB7IGFubm90YXRpb25UeXBlXyB9OiBBbm5vdGF0aW9uLFxuICAgIGtleTogUHJvcGVydHlLZXksXG4gICAgZGVzY3JpcHRvcjogUHJvcGVydHlEZXNjcmlwdG9yXG4pIHtcbiAgICBpZiAoX19ERVZfXyAmJiAhKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSkge1xuICAgICAgICBkaWUoXG4gICAgICAgICAgICBgQ2Fubm90IGFwcGx5ICcke2Fubm90YXRpb25UeXBlX30nIHRvICcke2FkbS5uYW1lX30uJHtrZXkudG9TdHJpbmcoKX0nOmAgK1xuICAgICAgICAgICAgICAgIGBcXG4nJHthbm5vdGF0aW9uVHlwZV99JyBjYW5ub3QgYmUgdXNlZCBvbiBnZXR0ZXIvc2V0dGVyIHByb3BlcnRpZXNgXG4gICAgICAgIClcbiAgICB9XG59XG4iLCJpbXBvcnQge1xuICAgIE9ic2VydmFibGVPYmplY3RBZG1pbmlzdHJhdGlvbixcbiAgICBvYnNlcnZhYmxlLFxuICAgIEFubm90YXRpb24sXG4gICAgZGVmaW5lUHJvcGVydHksXG4gICAgY3JlYXRlQWN0aW9uLFxuICAgIGdsb2JhbFN0YXRlLFxuICAgIGZsb3csXG4gICAgY29tcHV0ZWQsXG4gICAgYXV0b0FjdGlvbixcbiAgICBpc0dlbmVyYXRvcixcbiAgICBNYWtlUmVzdWx0LFxuICAgIGRpZVxufSBmcm9tIFwiLi4vaW50ZXJuYWxcIlxuXG5jb25zdCBBVVRPID0gXCJ0cnVlXCJcblxuZXhwb3J0IGNvbnN0IGF1dG9Bbm5vdGF0aW9uOiBBbm5vdGF0aW9uID0gY3JlYXRlQXV0b0Fubm90YXRpb24oKVxuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlQXV0b0Fubm90YXRpb24ob3B0aW9ucz86IG9iamVjdCk6IEFubm90YXRpb24ge1xuICAgIHJldHVybiB7XG4gICAgICAgIGFubm90YXRpb25UeXBlXzogQVVUTyxcbiAgICAgICAgb3B0aW9uc186IG9wdGlvbnMsXG4gICAgICAgIG1ha2VfLFxuICAgICAgICBleHRlbmRfLFxuICAgICAgICBkZWNvcmF0ZV8yMDIyM19cbiAgICB9XG59XG5cbmZ1bmN0aW9uIG1ha2VfKFxuICAgIGFkbTogT2JzZXJ2YWJsZU9iamVjdEFkbWluaXN0cmF0aW9uLFxuICAgIGtleTogUHJvcGVydHlLZXksXG4gICAgZGVzY3JpcHRvcjogUHJvcGVydHlEZXNjcmlwdG9yLFxuICAgIHNvdXJjZTogb2JqZWN0XG4pOiBNYWtlUmVzdWx0IHtcbiAgICAvLyBnZXR0ZXIgLT4gY29tcHV0ZWRcbiAgICBpZiAoZGVzY3JpcHRvci5nZXQpIHtcbiAgICAgICAgcmV0dXJuIGNvbXB1dGVkLm1ha2VfKGFkbSwga2V5LCBkZXNjcmlwdG9yLCBzb3VyY2UpXG4gICAgfVxuICAgIC8vIGxvbmUgc2V0dGVyIC0+IGFjdGlvbiBzZXR0ZXJcbiAgICBpZiAoZGVzY3JpcHRvci5zZXQpIHtcbiAgICAgICAgLy8gVE9ETyBtYWtlIGFjdGlvbiBhcHBsaWNhYmxlIHRvIHNldHRlciBhbmQgZGVsZWdhdGUgdG8gYWN0aW9uLm1ha2VfXG4gICAgICAgIGNvbnN0IHNldCA9IGNyZWF0ZUFjdGlvbihrZXkudG9TdHJpbmcoKSwgZGVzY3JpcHRvci5zZXQpIGFzICh2OiBhbnkpID0+IHZvaWRcbiAgICAgICAgLy8gb3duXG4gICAgICAgIGlmIChzb3VyY2UgPT09IGFkbS50YXJnZXRfKSB7XG4gICAgICAgICAgICByZXR1cm4gYWRtLmRlZmluZVByb3BlcnR5XyhrZXksIHtcbiAgICAgICAgICAgICAgICBjb25maWd1cmFibGU6IGdsb2JhbFN0YXRlLnNhZmVEZXNjcmlwdG9ycyA/IGFkbS5pc1BsYWluT2JqZWN0XyA6IHRydWUsXG4gICAgICAgICAgICAgICAgc2V0XG4gICAgICAgICAgICB9KSA9PT0gbnVsbFxuICAgICAgICAgICAgICAgID8gTWFrZVJlc3VsdC5DYW5jZWxcbiAgICAgICAgICAgICAgICA6IE1ha2VSZXN1bHQuQ29udGludWVcbiAgICAgICAgfVxuICAgICAgICAvLyBwcm90b1xuICAgICAgICBkZWZpbmVQcm9wZXJ0eShzb3VyY2UsIGtleSwge1xuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgc2V0XG4gICAgICAgIH0pXG4gICAgICAgIHJldHVybiBNYWtlUmVzdWx0LkNvbnRpbnVlXG4gICAgfVxuICAgIC8vIGZ1bmN0aW9uIG9uIHByb3RvIC0+IGF1dG9BY3Rpb24vZmxvd1xuICAgIGlmIChzb3VyY2UgIT09IGFkbS50YXJnZXRfICYmIHR5cGVvZiBkZXNjcmlwdG9yLnZhbHVlID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgaWYgKGlzR2VuZXJhdG9yKGRlc2NyaXB0b3IudmFsdWUpKSB7XG4gICAgICAgICAgICBjb25zdCBmbG93QW5ub3RhdGlvbiA9IHRoaXMub3B0aW9uc18/LmF1dG9CaW5kID8gZmxvdy5ib3VuZCA6IGZsb3dcbiAgICAgICAgICAgIHJldHVybiBmbG93QW5ub3RhdGlvbi5tYWtlXyhhZG0sIGtleSwgZGVzY3JpcHRvciwgc291cmNlKVxuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGFjdGlvbkFubm90YXRpb24gPSB0aGlzLm9wdGlvbnNfPy5hdXRvQmluZCA/IGF1dG9BY3Rpb24uYm91bmQgOiBhdXRvQWN0aW9uXG4gICAgICAgIHJldHVybiBhY3Rpb25Bbm5vdGF0aW9uLm1ha2VfKGFkbSwga2V5LCBkZXNjcmlwdG9yLCBzb3VyY2UpXG4gICAgfVxuICAgIC8vIG90aGVyIC0+IG9ic2VydmFibGVcbiAgICAvLyBDb3B5IHByb3BzIGZyb20gcHJvdG8gYXMgd2VsbCwgc2VlIHRlc3Q6XG4gICAgLy8gXCJkZWNvcmF0ZSBzaG91bGQgd29yayB3aXRoIE9iamVjdC5jcmVhdGVcIlxuICAgIGxldCBvYnNlcnZhYmxlQW5ub3RhdGlvbiA9IHRoaXMub3B0aW9uc18/LmRlZXAgPT09IGZhbHNlID8gb2JzZXJ2YWJsZS5yZWYgOiBvYnNlcnZhYmxlXG4gICAgLy8gaWYgZnVuY3Rpb24gcmVzcGVjdCBhdXRvQmluZCBvcHRpb25cbiAgICBpZiAodHlwZW9mIGRlc2NyaXB0b3IudmFsdWUgPT09IFwiZnVuY3Rpb25cIiAmJiB0aGlzLm9wdGlvbnNfPy5hdXRvQmluZCkge1xuICAgICAgICBkZXNjcmlwdG9yLnZhbHVlID0gZGVzY3JpcHRvci52YWx1ZS5iaW5kKGFkbS5wcm94eV8gPz8gYWRtLnRhcmdldF8pXG4gICAgfVxuICAgIHJldHVybiBvYnNlcnZhYmxlQW5ub3RhdGlvbi5tYWtlXyhhZG0sIGtleSwgZGVzY3JpcHRvciwgc291cmNlKVxufVxuXG5mdW5jdGlvbiBleHRlbmRfKFxuICAgIGFkbTogT2JzZXJ2YWJsZU9iamVjdEFkbWluaXN0cmF0aW9uLFxuICAgIGtleTogUHJvcGVydHlLZXksXG4gICAgZGVzY3JpcHRvcjogUHJvcGVydHlEZXNjcmlwdG9yLFxuICAgIHByb3h5VHJhcDogYm9vbGVhblxuKTogYm9vbGVhbiB8IG51bGwge1xuICAgIC8vIGdldHRlciAtPiBjb21wdXRlZFxuICAgIGlmIChkZXNjcmlwdG9yLmdldCkge1xuICAgICAgICByZXR1cm4gY29tcHV0ZWQuZXh0ZW5kXyhhZG0sIGtleSwgZGVzY3JpcHRvciwgcHJveHlUcmFwKVxuICAgIH1cbiAgICAvLyBsb25lIHNldHRlciAtPiBhY3Rpb24gc2V0dGVyXG4gICAgaWYgKGRlc2NyaXB0b3Iuc2V0KSB7XG4gICAgICAgIC8vIFRPRE8gbWFrZSBhY3Rpb24gYXBwbGljYWJsZSB0byBzZXR0ZXIgYW5kIGRlbGVnYXRlIHRvIGFjdGlvbi5leHRlbmRfXG4gICAgICAgIHJldHVybiBhZG0uZGVmaW5lUHJvcGVydHlfKFxuICAgICAgICAgICAga2V5LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogZ2xvYmFsU3RhdGUuc2FmZURlc2NyaXB0b3JzID8gYWRtLmlzUGxhaW5PYmplY3RfIDogdHJ1ZSxcbiAgICAgICAgICAgICAgICBzZXQ6IGNyZWF0ZUFjdGlvbihrZXkudG9TdHJpbmcoKSwgZGVzY3JpcHRvci5zZXQpIGFzICh2OiBhbnkpID0+IHZvaWRcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBwcm94eVRyYXBcbiAgICAgICAgKVxuICAgIH1cbiAgICAvLyBvdGhlciAtPiBvYnNlcnZhYmxlXG4gICAgLy8gaWYgZnVuY3Rpb24gcmVzcGVjdCBhdXRvQmluZCBvcHRpb25cbiAgICBpZiAodHlwZW9mIGRlc2NyaXB0b3IudmFsdWUgPT09IFwiZnVuY3Rpb25cIiAmJiB0aGlzLm9wdGlvbnNfPy5hdXRvQmluZCkge1xuICAgICAgICBkZXNjcmlwdG9yLnZhbHVlID0gZGVzY3JpcHRvci52YWx1ZS5iaW5kKGFkbS5wcm94eV8gPz8gYWRtLnRhcmdldF8pXG4gICAgfVxuICAgIGxldCBvYnNlcnZhYmxlQW5ub3RhdGlvbiA9IHRoaXMub3B0aW9uc18/LmRlZXAgPT09IGZhbHNlID8gb2JzZXJ2YWJsZS5yZWYgOiBvYnNlcnZhYmxlXG4gICAgcmV0dXJuIG9ic2VydmFibGVBbm5vdGF0aW9uLmV4dGVuZF8oYWRtLCBrZXksIGRlc2NyaXB0b3IsIHByb3h5VHJhcClcbn1cblxuZnVuY3Rpb24gZGVjb3JhdGVfMjAyMjNfKHRoaXM6IEFubm90YXRpb24sIGRlc2MsIGNvbnRleHQ6IENsYXNzR2V0dGVyRGVjb3JhdG9yQ29udGV4dCkge1xuICAgIGRpZShgJyR7dGhpcy5hbm5vdGF0aW9uVHlwZV99JyBjYW5ub3QgYmUgdXNlZCBhcyBhIGRlY29yYXRvcmApXG59XG4iLCJpbXBvcnQge1xuICAgIElFbmhhbmNlcixcbiAgICBJRXF1YWxzQ29tcGFyZXIsXG4gICAgSU9ic2VydmFibGVBcnJheSxcbiAgICBJT2JzZXJ2YWJsZU1hcEluaXRpYWxWYWx1ZXMsXG4gICAgSU9ic2VydmFibGVTZXRJbml0aWFsVmFsdWVzLFxuICAgIElPYnNlcnZhYmxlVmFsdWUsXG4gICAgT2JzZXJ2YWJsZU1hcCxcbiAgICBPYnNlcnZhYmxlU2V0LFxuICAgIE9ic2VydmFibGVWYWx1ZSxcbiAgICBhc0R5bmFtaWNPYnNlcnZhYmxlT2JqZWN0LFxuICAgIGNyZWF0ZU9ic2VydmFibGVBcnJheSxcbiAgICBkZWVwRW5oYW5jZXIsXG4gICAgZXh0ZW5kT2JzZXJ2YWJsZSxcbiAgICBpc0VTNk1hcCxcbiAgICBpc0VTNlNldCxcbiAgICBpc09ic2VydmFibGUsXG4gICAgaXNQbGFpbk9iamVjdCxcbiAgICByZWZlcmVuY2VFbmhhbmNlcixcbiAgICBBbm5vdGF0aW9uLFxuICAgIHNoYWxsb3dFbmhhbmNlcixcbiAgICByZWZTdHJ1Y3RFbmhhbmNlcixcbiAgICBBbm5vdGF0aW9uc01hcCxcbiAgICBhc09ic2VydmFibGVPYmplY3QsXG4gICAgc3RvcmVBbm5vdGF0aW9uLFxuICAgIGNyZWF0ZURlY29yYXRvckFubm90YXRpb24sXG4gICAgY3JlYXRlTGVnYWN5QXJyYXksXG4gICAgZ2xvYmFsU3RhdGUsXG4gICAgYXNzaWduLFxuICAgIGlzU3RyaW5naXNoLFxuICAgIGNyZWF0ZU9ic2VydmFibGVBbm5vdGF0aW9uLFxuICAgIGNyZWF0ZUF1dG9Bbm5vdGF0aW9uLFxuICAgIGlzMjAyMjNEZWNvcmF0b3IsXG4gICAgaW5pdE9ic2VydmFibGVcbn0gZnJvbSBcIi4uL2ludGVybmFsXCJcblxuaW1wb3J0IHR5cGUgeyBDbGFzc0FjY2Vzc29yRGVjb3JhdG9yLCBDbGFzc0ZpZWxkRGVjb3JhdG9yIH0gZnJvbSBcIi4uL3R5cGVzL2RlY29yYXRvcl9maWxsc1wiXG5cbmV4cG9ydCBjb25zdCBPQlNFUlZBQkxFID0gXCJvYnNlcnZhYmxlXCJcbmV4cG9ydCBjb25zdCBPQlNFUlZBQkxFX1JFRiA9IFwib2JzZXJ2YWJsZS5yZWZcIlxuZXhwb3J0IGNvbnN0IE9CU0VSVkFCTEVfU0hBTExPVyA9IFwib2JzZXJ2YWJsZS5zaGFsbG93XCJcbmV4cG9ydCBjb25zdCBPQlNFUlZBQkxFX1NUUlVDVCA9IFwib2JzZXJ2YWJsZS5zdHJ1Y3RcIlxuXG5leHBvcnQgdHlwZSBDcmVhdGVPYnNlcnZhYmxlT3B0aW9ucyA9IHtcbiAgICBuYW1lPzogc3RyaW5nXG4gICAgZXF1YWxzPzogSUVxdWFsc0NvbXBhcmVyPGFueT5cbiAgICBkZWVwPzogYm9vbGVhblxuICAgIGRlZmF1bHREZWNvcmF0b3I/OiBBbm5vdGF0aW9uXG4gICAgcHJveHk/OiBib29sZWFuXG4gICAgYXV0b0JpbmQ/OiBib29sZWFuXG59XG5cbi8vIFByZWRlZmluZWQgYmFncyBvZiBjcmVhdGUgb2JzZXJ2YWJsZSBvcHRpb25zLCB0byBhdm9pZCBhbGxvY2F0aW5nIHRlbXBvcmFyaWx5IG9wdGlvbiBvYmplY3RzXG4vLyBpbiB0aGUgbWFqb3JpdHkgb2YgY2FzZXNcbmV4cG9ydCBjb25zdCBkZWZhdWx0Q3JlYXRlT2JzZXJ2YWJsZU9wdGlvbnM6IENyZWF0ZU9ic2VydmFibGVPcHRpb25zID0ge1xuICAgIGRlZXA6IHRydWUsXG4gICAgbmFtZTogdW5kZWZpbmVkLFxuICAgIGRlZmF1bHREZWNvcmF0b3I6IHVuZGVmaW5lZCxcbiAgICBwcm94eTogdHJ1ZVxufVxuT2JqZWN0LmZyZWV6ZShkZWZhdWx0Q3JlYXRlT2JzZXJ2YWJsZU9wdGlvbnMpXG5cbmV4cG9ydCBmdW5jdGlvbiBhc0NyZWF0ZU9ic2VydmFibGVPcHRpb25zKHRoaW5nOiBhbnkpOiBDcmVhdGVPYnNlcnZhYmxlT3B0aW9ucyB7XG4gICAgcmV0dXJuIHRoaW5nIHx8IGRlZmF1bHRDcmVhdGVPYnNlcnZhYmxlT3B0aW9uc1xufVxuXG5jb25zdCBvYnNlcnZhYmxlQW5ub3RhdGlvbiA9IGNyZWF0ZU9ic2VydmFibGVBbm5vdGF0aW9uKE9CU0VSVkFCTEUpXG5jb25zdCBvYnNlcnZhYmxlUmVmQW5ub3RhdGlvbiA9IGNyZWF0ZU9ic2VydmFibGVBbm5vdGF0aW9uKE9CU0VSVkFCTEVfUkVGLCB7XG4gICAgZW5oYW5jZXI6IHJlZmVyZW5jZUVuaGFuY2VyXG59KVxuY29uc3Qgb2JzZXJ2YWJsZVNoYWxsb3dBbm5vdGF0aW9uID0gY3JlYXRlT2JzZXJ2YWJsZUFubm90YXRpb24oT0JTRVJWQUJMRV9TSEFMTE9XLCB7XG4gICAgZW5oYW5jZXI6IHNoYWxsb3dFbmhhbmNlclxufSlcbmNvbnN0IG9ic2VydmFibGVTdHJ1Y3RBbm5vdGF0aW9uID0gY3JlYXRlT2JzZXJ2YWJsZUFubm90YXRpb24oT0JTRVJWQUJMRV9TVFJVQ1QsIHtcbiAgICBlbmhhbmNlcjogcmVmU3RydWN0RW5oYW5jZXJcbn0pXG5jb25zdCBvYnNlcnZhYmxlRGVjb3JhdG9yQW5ub3RhdGlvbiA9XG4gICAgY3JlYXRlRGVjb3JhdG9yQW5ub3RhdGlvbjxDbGFzc0FjY2Vzc29yRGVjb3JhdG9yPihvYnNlcnZhYmxlQW5ub3RhdGlvbilcblxuZXhwb3J0IGZ1bmN0aW9uIGdldEVuaGFuY2VyRnJvbU9wdGlvbnMob3B0aW9uczogQ3JlYXRlT2JzZXJ2YWJsZU9wdGlvbnMpOiBJRW5oYW5jZXI8YW55PiB7XG4gICAgcmV0dXJuIG9wdGlvbnMuZGVlcCA9PT0gdHJ1ZVxuICAgICAgICA/IGRlZXBFbmhhbmNlclxuICAgICAgICA6IG9wdGlvbnMuZGVlcCA9PT0gZmFsc2VcbiAgICAgICAgPyByZWZlcmVuY2VFbmhhbmNlclxuICAgICAgICA6IGdldEVuaGFuY2VyRnJvbUFubm90YXRpb24ob3B0aW9ucy5kZWZhdWx0RGVjb3JhdG9yKVxufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0QW5ub3RhdGlvbkZyb21PcHRpb25zKFxuICAgIG9wdGlvbnM/OiBDcmVhdGVPYnNlcnZhYmxlT3B0aW9uc1xuKTogQW5ub3RhdGlvbiB8IHVuZGVmaW5lZCB7XG4gICAgcmV0dXJuIG9wdGlvbnMgPyBvcHRpb25zLmRlZmF1bHREZWNvcmF0b3IgPz8gY3JlYXRlQXV0b0Fubm90YXRpb24ob3B0aW9ucykgOiB1bmRlZmluZWRcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldEVuaGFuY2VyRnJvbUFubm90YXRpb24oYW5ub3RhdGlvbj86IEFubm90YXRpb24pOiBJRW5oYW5jZXI8YW55PiB7XG4gICAgcmV0dXJuICFhbm5vdGF0aW9uID8gZGVlcEVuaGFuY2VyIDogYW5ub3RhdGlvbi5vcHRpb25zXz8uZW5oYW5jZXIgPz8gZGVlcEVuaGFuY2VyXG59XG5cbi8qKlxuICogVHVybnMgYW4gb2JqZWN0LCBhcnJheSBvciBmdW5jdGlvbiBpbnRvIGEgcmVhY3RpdmUgc3RydWN0dXJlLlxuICogQHBhcmFtIHYgdGhlIHZhbHVlIHdoaWNoIHNob3VsZCBiZWNvbWUgb2JzZXJ2YWJsZS5cbiAqL1xuZnVuY3Rpb24gY3JlYXRlT2JzZXJ2YWJsZSh2OiBhbnksIGFyZzI/OiBhbnksIGFyZzM/OiBhbnkpIHtcbiAgICAvLyBAb2JzZXJ2YWJsZSBzb21lUHJvcDsgKDIwMjIuMyBEZWNvcmF0b3JzKVxuICAgIGlmIChpczIwMjIzRGVjb3JhdG9yKGFyZzIpKSB7XG4gICAgICAgIHJldHVybiBvYnNlcnZhYmxlQW5ub3RhdGlvbi5kZWNvcmF0ZV8yMDIyM18odiwgYXJnMilcbiAgICB9XG5cbiAgICAvLyBAb2JzZXJ2YWJsZSBzb21lUHJvcDtcbiAgICBpZiAoaXNTdHJpbmdpc2goYXJnMikpIHtcbiAgICAgICAgc3RvcmVBbm5vdGF0aW9uKHYsIGFyZzIsIG9ic2VydmFibGVBbm5vdGF0aW9uKVxuICAgICAgICByZXR1cm5cbiAgICB9XG5cbiAgICAvLyBhbHJlYWR5IG9ic2VydmFibGUgLSBpZ25vcmVcbiAgICBpZiAoaXNPYnNlcnZhYmxlKHYpKSB7XG4gICAgICAgIHJldHVybiB2XG4gICAgfVxuXG4gICAgLy8gcGxhaW4gb2JqZWN0XG4gICAgaWYgKGlzUGxhaW5PYmplY3QodikpIHtcbiAgICAgICAgcmV0dXJuIG9ic2VydmFibGUub2JqZWN0KHYsIGFyZzIsIGFyZzMpXG4gICAgfVxuXG4gICAgLy8gQXJyYXlcbiAgICBpZiAoQXJyYXkuaXNBcnJheSh2KSkge1xuICAgICAgICByZXR1cm4gb2JzZXJ2YWJsZS5hcnJheSh2LCBhcmcyKVxuICAgIH1cblxuICAgIC8vIE1hcFxuICAgIGlmIChpc0VTNk1hcCh2KSkge1xuICAgICAgICByZXR1cm4gb2JzZXJ2YWJsZS5tYXAodiwgYXJnMilcbiAgICB9XG5cbiAgICAvLyBTZXRcbiAgICBpZiAoaXNFUzZTZXQodikpIHtcbiAgICAgICAgcmV0dXJuIG9ic2VydmFibGUuc2V0KHYsIGFyZzIpXG4gICAgfVxuXG4gICAgLy8gb3RoZXIgb2JqZWN0IC0gaWdub3JlXG4gICAgaWYgKHR5cGVvZiB2ID09PSBcIm9iamVjdFwiICYmIHYgIT09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIHZcbiAgICB9XG5cbiAgICAvLyBhbnl0aGluZyBlbHNlXG4gICAgcmV0dXJuIG9ic2VydmFibGUuYm94KHYsIGFyZzIpXG59XG5hc3NpZ24oY3JlYXRlT2JzZXJ2YWJsZSwgb2JzZXJ2YWJsZURlY29yYXRvckFubm90YXRpb24pXG5cbmV4cG9ydCBpbnRlcmZhY2UgSU9ic2VydmFibGVWYWx1ZUZhY3Rvcnkge1xuICAgIDxUPih2YWx1ZTogVCwgb3B0aW9ucz86IENyZWF0ZU9ic2VydmFibGVPcHRpb25zKTogSU9ic2VydmFibGVWYWx1ZTxUPlxuICAgIDxUPih2YWx1ZT86IFQsIG9wdGlvbnM/OiBDcmVhdGVPYnNlcnZhYmxlT3B0aW9ucyk6IElPYnNlcnZhYmxlVmFsdWU8VCB8IHVuZGVmaW5lZD5cbn1cblxuZXhwb3J0IGludGVyZmFjZSBJT2JzZXJ2YWJsZUZhY3RvcnlcbiAgICBleHRlbmRzIEFubm90YXRpb24sXG4gICAgICAgIFByb3BlcnR5RGVjb3JhdG9yLFxuICAgICAgICBDbGFzc0FjY2Vzc29yRGVjb3JhdG9yLFxuICAgICAgICBDbGFzc0ZpZWxkRGVjb3JhdG9yIHtcbiAgICAvLyBUT0RPOiByZW1vdmUgQ2xhc3NGaWVsZERlY29yYXRvciwgdGhpcyBpcyBvbmx5IHRlbXBvcmFyaWx5IHN1cHBvcnQgZm9yIGxlZ2FjeSBkZWNvcmF0b3JzXG4gICAgPFQgPSBhbnk+KHZhbHVlOiBUW10sIG9wdGlvbnM/OiBDcmVhdGVPYnNlcnZhYmxlT3B0aW9ucyk6IElPYnNlcnZhYmxlQXJyYXk8VD5cbiAgICA8VCA9IGFueT4odmFsdWU6IFNldDxUPiwgb3B0aW9ucz86IENyZWF0ZU9ic2VydmFibGVPcHRpb25zKTogT2JzZXJ2YWJsZVNldDxUPlxuICAgIDxLID0gYW55LCBWID0gYW55Pih2YWx1ZTogTWFwPEssIFY+LCBvcHRpb25zPzogQ3JlYXRlT2JzZXJ2YWJsZU9wdGlvbnMpOiBPYnNlcnZhYmxlTWFwPEssIFY+XG4gICAgPFQgZXh0ZW5kcyBvYmplY3Q+KFxuICAgICAgICB2YWx1ZTogVCxcbiAgICAgICAgZGVjb3JhdG9ycz86IEFubm90YXRpb25zTWFwPFQsIG5ldmVyPixcbiAgICAgICAgb3B0aW9ucz86IENyZWF0ZU9ic2VydmFibGVPcHRpb25zXG4gICAgKTogVFxuXG4gICAgYm94OiBJT2JzZXJ2YWJsZVZhbHVlRmFjdG9yeVxuICAgIGFycmF5OiA8VCA9IGFueT4oaW5pdGlhbFZhbHVlcz86IFRbXSwgb3B0aW9ucz86IENyZWF0ZU9ic2VydmFibGVPcHRpb25zKSA9PiBJT2JzZXJ2YWJsZUFycmF5PFQ+XG4gICAgc2V0OiA8VCA9IGFueT4oXG4gICAgICAgIGluaXRpYWxWYWx1ZXM/OiBJT2JzZXJ2YWJsZVNldEluaXRpYWxWYWx1ZXM8VD4sXG4gICAgICAgIG9wdGlvbnM/OiBDcmVhdGVPYnNlcnZhYmxlT3B0aW9uc1xuICAgICkgPT4gT2JzZXJ2YWJsZVNldDxUPlxuICAgIG1hcDogPEsgPSBhbnksIFYgPSBhbnk+KFxuICAgICAgICBpbml0aWFsVmFsdWVzPzogSU9ic2VydmFibGVNYXBJbml0aWFsVmFsdWVzPEssIFY+LFxuICAgICAgICBvcHRpb25zPzogQ3JlYXRlT2JzZXJ2YWJsZU9wdGlvbnNcbiAgICApID0+IE9ic2VydmFibGVNYXA8SywgVj5cbiAgICBvYmplY3Q6IDxUID0gYW55PihcbiAgICAgICAgcHJvcHM6IFQsXG4gICAgICAgIGRlY29yYXRvcnM/OiBBbm5vdGF0aW9uc01hcDxULCBuZXZlcj4sXG4gICAgICAgIG9wdGlvbnM/OiBDcmVhdGVPYnNlcnZhYmxlT3B0aW9uc1xuICAgICkgPT4gVFxuXG4gICAgLyoqXG4gICAgICogRGVjb3JhdG9yIHRoYXQgY3JlYXRlcyBhbiBvYnNlcnZhYmxlIHRoYXQgb25seSBvYnNlcnZlcyB0aGUgcmVmZXJlbmNlcywgYnV0IGRvZXNuJ3QgdHJ5IHRvIHR1cm4gdGhlIGFzc2lnbmVkIHZhbHVlIGludG8gYW4gb2JzZXJ2YWJsZS50cy5cbiAgICAgKi9cbiAgICByZWY6IEFubm90YXRpb24gJiBQcm9wZXJ0eURlY29yYXRvciAmIENsYXNzQWNjZXNzb3JEZWNvcmF0b3IgJiBDbGFzc0ZpZWxkRGVjb3JhdG9yXG4gICAgLyoqXG4gICAgICogRGVjb3JhdG9yIHRoYXQgY3JlYXRlcyBhbiBvYnNlcnZhYmxlIGNvbnZlcnRzIGl0cyB2YWx1ZSAob2JqZWN0cywgbWFwcyBvciBhcnJheXMpIGludG8gYSBzaGFsbG93IG9ic2VydmFibGUgc3RydWN0dXJlXG4gICAgICovXG4gICAgc2hhbGxvdzogQW5ub3RhdGlvbiAmIFByb3BlcnR5RGVjb3JhdG9yICYgQ2xhc3NBY2Nlc3NvckRlY29yYXRvciAmIENsYXNzRmllbGREZWNvcmF0b3JcbiAgICBkZWVwOiBBbm5vdGF0aW9uICYgUHJvcGVydHlEZWNvcmF0b3IgJiBDbGFzc0FjY2Vzc29yRGVjb3JhdG9yICYgQ2xhc3NGaWVsZERlY29yYXRvclxuICAgIHN0cnVjdDogQW5ub3RhdGlvbiAmIFByb3BlcnR5RGVjb3JhdG9yICYgQ2xhc3NBY2Nlc3NvckRlY29yYXRvciAmIENsYXNzRmllbGREZWNvcmF0b3Jcbn1cblxuY29uc3Qgb2JzZXJ2YWJsZUZhY3RvcmllczogSU9ic2VydmFibGVGYWN0b3J5ID0ge1xuICAgIGJveDxUID0gYW55Pih2YWx1ZTogVCwgb3B0aW9ucz86IENyZWF0ZU9ic2VydmFibGVPcHRpb25zKTogSU9ic2VydmFibGVWYWx1ZTxUPiB7XG4gICAgICAgIGNvbnN0IG8gPSBhc0NyZWF0ZU9ic2VydmFibGVPcHRpb25zKG9wdGlvbnMpXG4gICAgICAgIHJldHVybiBuZXcgT2JzZXJ2YWJsZVZhbHVlKHZhbHVlLCBnZXRFbmhhbmNlckZyb21PcHRpb25zKG8pLCBvLm5hbWUsIHRydWUsIG8uZXF1YWxzKVxuICAgIH0sXG4gICAgYXJyYXk8VCA9IGFueT4oaW5pdGlhbFZhbHVlcz86IFRbXSwgb3B0aW9ucz86IENyZWF0ZU9ic2VydmFibGVPcHRpb25zKTogSU9ic2VydmFibGVBcnJheTxUPiB7XG4gICAgICAgIGNvbnN0IG8gPSBhc0NyZWF0ZU9ic2VydmFibGVPcHRpb25zKG9wdGlvbnMpXG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICBnbG9iYWxTdGF0ZS51c2VQcm94aWVzID09PSBmYWxzZSB8fCBvLnByb3h5ID09PSBmYWxzZVxuICAgICAgICAgICAgICAgID8gY3JlYXRlTGVnYWN5QXJyYXlcbiAgICAgICAgICAgICAgICA6IGNyZWF0ZU9ic2VydmFibGVBcnJheVxuICAgICAgICApKGluaXRpYWxWYWx1ZXMsIGdldEVuaGFuY2VyRnJvbU9wdGlvbnMobyksIG8ubmFtZSlcbiAgICB9LFxuICAgIG1hcDxLID0gYW55LCBWID0gYW55PihcbiAgICAgICAgaW5pdGlhbFZhbHVlcz86IElPYnNlcnZhYmxlTWFwSW5pdGlhbFZhbHVlczxLLCBWPixcbiAgICAgICAgb3B0aW9ucz86IENyZWF0ZU9ic2VydmFibGVPcHRpb25zXG4gICAgKTogT2JzZXJ2YWJsZU1hcDxLLCBWPiB7XG4gICAgICAgIGNvbnN0IG8gPSBhc0NyZWF0ZU9ic2VydmFibGVPcHRpb25zKG9wdGlvbnMpXG4gICAgICAgIHJldHVybiBuZXcgT2JzZXJ2YWJsZU1hcDxLLCBWPihpbml0aWFsVmFsdWVzLCBnZXRFbmhhbmNlckZyb21PcHRpb25zKG8pLCBvLm5hbWUpXG4gICAgfSxcbiAgICBzZXQ8VCA9IGFueT4oXG4gICAgICAgIGluaXRpYWxWYWx1ZXM/OiBJT2JzZXJ2YWJsZVNldEluaXRpYWxWYWx1ZXM8VD4sXG4gICAgICAgIG9wdGlvbnM/OiBDcmVhdGVPYnNlcnZhYmxlT3B0aW9uc1xuICAgICk6IE9ic2VydmFibGVTZXQ8VD4ge1xuICAgICAgICBjb25zdCBvID0gYXNDcmVhdGVPYnNlcnZhYmxlT3B0aW9ucyhvcHRpb25zKVxuICAgICAgICByZXR1cm4gbmV3IE9ic2VydmFibGVTZXQ8VD4oaW5pdGlhbFZhbHVlcywgZ2V0RW5oYW5jZXJGcm9tT3B0aW9ucyhvKSwgby5uYW1lKVxuICAgIH0sXG4gICAgb2JqZWN0PFQgZXh0ZW5kcyBvYmplY3QgPSBhbnk+KFxuICAgICAgICBwcm9wczogVCxcbiAgICAgICAgZGVjb3JhdG9ycz86IEFubm90YXRpb25zTWFwPFQsIG5ldmVyPixcbiAgICAgICAgb3B0aW9ucz86IENyZWF0ZU9ic2VydmFibGVPcHRpb25zXG4gICAgKTogVCB7XG4gICAgICAgIHJldHVybiBpbml0T2JzZXJ2YWJsZSgoKSA9PlxuICAgICAgICAgICAgZXh0ZW5kT2JzZXJ2YWJsZShcbiAgICAgICAgICAgICAgICBnbG9iYWxTdGF0ZS51c2VQcm94aWVzID09PSBmYWxzZSB8fCBvcHRpb25zPy5wcm94eSA9PT0gZmFsc2VcbiAgICAgICAgICAgICAgICAgICAgPyBhc09ic2VydmFibGVPYmplY3Qoe30sIG9wdGlvbnMpXG4gICAgICAgICAgICAgICAgICAgIDogYXNEeW5hbWljT2JzZXJ2YWJsZU9iamVjdCh7fSwgb3B0aW9ucyksXG4gICAgICAgICAgICAgICAgcHJvcHMsXG4gICAgICAgICAgICAgICAgZGVjb3JhdG9yc1xuICAgICAgICAgICAgKVxuICAgICAgICApXG4gICAgfSxcbiAgICByZWY6IGNyZWF0ZURlY29yYXRvckFubm90YXRpb24ob2JzZXJ2YWJsZVJlZkFubm90YXRpb24pLFxuICAgIHNoYWxsb3c6IGNyZWF0ZURlY29yYXRvckFubm90YXRpb24ob2JzZXJ2YWJsZVNoYWxsb3dBbm5vdGF0aW9uKSxcbiAgICBkZWVwOiBvYnNlcnZhYmxlRGVjb3JhdG9yQW5ub3RhdGlvbixcbiAgICBzdHJ1Y3Q6IGNyZWF0ZURlY29yYXRvckFubm90YXRpb24ob2JzZXJ2YWJsZVN0cnVjdEFubm90YXRpb24pXG59IGFzIGFueVxuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbmV4cG9ydCB2YXIgb2JzZXJ2YWJsZTogSU9ic2VydmFibGVGYWN0b3J5ID0gYXNzaWduKGNyZWF0ZU9ic2VydmFibGUsIG9ic2VydmFibGVGYWN0b3JpZXMpXG4iLCJpbXBvcnQge1xuICAgIENvbXB1dGVkVmFsdWUsXG4gICAgSUNvbXB1dGVkVmFsdWVPcHRpb25zLFxuICAgIEFubm90YXRpb24sXG4gICAgc3RvcmVBbm5vdGF0aW9uLFxuICAgIGNyZWF0ZURlY29yYXRvckFubm90YXRpb24sXG4gICAgaXNTdHJpbmdpc2gsXG4gICAgaXNQbGFpbk9iamVjdCxcbiAgICBpc0Z1bmN0aW9uLFxuICAgIGRpZSxcbiAgICBJQ29tcHV0ZWRWYWx1ZSxcbiAgICBjcmVhdGVDb21wdXRlZEFubm90YXRpb24sXG4gICAgY29tcGFyZXIsXG4gICAgaXMyMDIyM0RlY29yYXRvclxufSBmcm9tIFwiLi4vaW50ZXJuYWxcIlxuXG5pbXBvcnQgdHlwZSB7IENsYXNzR2V0dGVyRGVjb3JhdG9yIH0gZnJvbSBcIi4uL3R5cGVzL2RlY29yYXRvcl9maWxsc1wiXG5cbmV4cG9ydCBjb25zdCBDT01QVVRFRCA9IFwiY29tcHV0ZWRcIlxuZXhwb3J0IGNvbnN0IENPTVBVVEVEX1NUUlVDVCA9IFwiY29tcHV0ZWQuc3RydWN0XCJcblxuZXhwb3J0IGludGVyZmFjZSBJQ29tcHV0ZWRGYWN0b3J5IGV4dGVuZHMgQW5ub3RhdGlvbiwgUHJvcGVydHlEZWNvcmF0b3IsIENsYXNzR2V0dGVyRGVjb3JhdG9yIHtcbiAgICAvLyBAY29tcHV0ZWQob3B0cylcbiAgICA8VD4ob3B0aW9uczogSUNvbXB1dGVkVmFsdWVPcHRpb25zPFQ+KTogQW5ub3RhdGlvbiAmIFByb3BlcnR5RGVjb3JhdG9yICYgQ2xhc3NHZXR0ZXJEZWNvcmF0b3JcbiAgICAvLyBjb21wdXRlZChmbiwgb3B0cylcbiAgICA8VD4oZnVuYzogKCkgPT4gVCwgb3B0aW9ucz86IElDb21wdXRlZFZhbHVlT3B0aW9uczxUPik6IElDb21wdXRlZFZhbHVlPFQ+XG5cbiAgICBzdHJ1Y3Q6IEFubm90YXRpb24gJiBQcm9wZXJ0eURlY29yYXRvciAmIENsYXNzR2V0dGVyRGVjb3JhdG9yXG59XG5cbmNvbnN0IGNvbXB1dGVkQW5ub3RhdGlvbiA9IGNyZWF0ZUNvbXB1dGVkQW5ub3RhdGlvbihDT01QVVRFRClcbmNvbnN0IGNvbXB1dGVkU3RydWN0QW5ub3RhdGlvbiA9IGNyZWF0ZUNvbXB1dGVkQW5ub3RhdGlvbihDT01QVVRFRF9TVFJVQ1QsIHtcbiAgICBlcXVhbHM6IGNvbXBhcmVyLnN0cnVjdHVyYWxcbn0pXG5cbi8qKlxuICogRGVjb3JhdG9yIGZvciBjbGFzcyBwcm9wZXJ0aWVzOiBAY29tcHV0ZWQgZ2V0IHZhbHVlKCkgeyByZXR1cm4gZXhwcjsgfS5cbiAqIEZvciBsZWdhY3kgcHVycG9zZXMgYWxzbyBpbnZva2FibGUgYXMgRVM1IG9ic2VydmFibGUgY3JlYXRlZDogYGNvbXB1dGVkKCgpID0+IGV4cHIpYDtcbiAqL1xuZXhwb3J0IGNvbnN0IGNvbXB1dGVkOiBJQ29tcHV0ZWRGYWN0b3J5ID0gZnVuY3Rpb24gY29tcHV0ZWQoYXJnMSwgYXJnMikge1xuICAgIGlmIChpczIwMjIzRGVjb3JhdG9yKGFyZzIpKSB7XG4gICAgICAgIC8vIEBjb21wdXRlZCAoMjAyMi4zIERlY29yYXRvcnMpXG4gICAgICAgIHJldHVybiBjb21wdXRlZEFubm90YXRpb24uZGVjb3JhdGVfMjAyMjNfKGFyZzEsIGFyZzIpXG4gICAgfVxuICAgIGlmIChpc1N0cmluZ2lzaChhcmcyKSkge1xuICAgICAgICAvLyBAY29tcHV0ZWRcbiAgICAgICAgcmV0dXJuIHN0b3JlQW5ub3RhdGlvbihhcmcxLCBhcmcyLCBjb21wdXRlZEFubm90YXRpb24pXG4gICAgfVxuICAgIGlmIChpc1BsYWluT2JqZWN0KGFyZzEpKSB7XG4gICAgICAgIC8vIEBjb21wdXRlZCh7IG9wdGlvbnMgfSlcbiAgICAgICAgcmV0dXJuIGNyZWF0ZURlY29yYXRvckFubm90YXRpb24oY3JlYXRlQ29tcHV0ZWRBbm5vdGF0aW9uKENPTVBVVEVELCBhcmcxKSlcbiAgICB9XG5cbiAgICAvLyBjb21wdXRlZChleHByLCBvcHRpb25zPylcbiAgICBpZiAoX19ERVZfXykge1xuICAgICAgICBpZiAoIWlzRnVuY3Rpb24oYXJnMSkpIHtcbiAgICAgICAgICAgIGRpZShcIkZpcnN0IGFyZ3VtZW50IHRvIGBjb21wdXRlZGAgc2hvdWxkIGJlIGFuIGV4cHJlc3Npb24uXCIpXG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzRnVuY3Rpb24oYXJnMikpIHtcbiAgICAgICAgICAgIGRpZShcbiAgICAgICAgICAgICAgICBcIkEgc2V0dGVyIGFzIHNlY29uZCBhcmd1bWVudCBpcyBubyBsb25nZXIgc3VwcG9ydGVkLCB1c2UgYHsgc2V0OiBmbiB9YCBvcHRpb24gaW5zdGVhZFwiXG4gICAgICAgICAgICApXG4gICAgICAgIH1cbiAgICB9XG4gICAgY29uc3Qgb3B0czogSUNvbXB1dGVkVmFsdWVPcHRpb25zPGFueT4gPSBpc1BsYWluT2JqZWN0KGFyZzIpID8gYXJnMiA6IHt9XG4gICAgb3B0cy5nZXQgPSBhcmcxXG4gICAgb3B0cy5uYW1lIHx8PSBhcmcxLm5hbWUgfHwgXCJcIiAvKiBmb3IgZ2VuZXJhdGVkIG5hbWUgKi9cblxuICAgIHJldHVybiBuZXcgQ29tcHV0ZWRWYWx1ZShvcHRzKVxufSBhcyBhbnlcblxuT2JqZWN0LmFzc2lnbihjb21wdXRlZCwgY29tcHV0ZWRBbm5vdGF0aW9uKVxuXG5jb21wdXRlZC5zdHJ1Y3QgPSBjcmVhdGVEZWNvcmF0b3JBbm5vdGF0aW9uKGNvbXB1dGVkU3RydWN0QW5ub3RhdGlvbilcbiIsImltcG9ydCB7XG4gICAgSURlcml2YXRpb24sXG4gICAgZW5kQmF0Y2gsXG4gICAgZ2xvYmFsU3RhdGUsXG4gICAgaXNTcHlFbmFibGVkLFxuICAgIHNweVJlcG9ydEVuZCxcbiAgICBzcHlSZXBvcnRTdGFydCxcbiAgICBzdGFydEJhdGNoLFxuICAgIHVudHJhY2tlZEVuZCxcbiAgICB1bnRyYWNrZWRTdGFydCxcbiAgICBpc0Z1bmN0aW9uLFxuICAgIGFsbG93U3RhdGVSZWFkc1N0YXJ0LFxuICAgIGFsbG93U3RhdGVSZWFkc0VuZCxcbiAgICBBQ1RJT04sXG4gICAgRU1QVFlfQVJSQVksXG4gICAgZGllLFxuICAgIGdldERlc2NyaXB0b3IsXG4gICAgZGVmaW5lUHJvcGVydHlcbn0gZnJvbSBcIi4uL2ludGVybmFsXCJcblxuLy8gd2UgZG9uJ3QgdXNlIGdsb2JhbFN0YXRlIGZvciB0aGVzZSBpbiBvcmRlciB0byBhdm9pZCBwb3NzaWJsZSBpc3N1ZXMgd2l0aCBtdWx0aXBsZVxuLy8gbW9ieCB2ZXJzaW9uc1xubGV0IGN1cnJlbnRBY3Rpb25JZCA9IDBcbmxldCBuZXh0QWN0aW9uSWQgPSAxXG5jb25zdCBpc0Z1bmN0aW9uTmFtZUNvbmZpZ3VyYWJsZSA9IGdldERlc2NyaXB0b3IoKCkgPT4ge30sIFwibmFtZVwiKT8uY29uZmlndXJhYmxlID8/IGZhbHNlXG5cbi8vIHdlIGNhbiBzYWZlbHkgcmVjeWNsZSB0aGlzIG9iamVjdFxuY29uc3QgdG1wTmFtZURlc2NyaXB0b3I6IFByb3BlcnR5RGVzY3JpcHRvciA9IHtcbiAgICB2YWx1ZTogXCJhY3Rpb25cIixcbiAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgd3JpdGFibGU6IGZhbHNlLFxuICAgIGVudW1lcmFibGU6IGZhbHNlXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVBY3Rpb24oXG4gICAgYWN0aW9uTmFtZTogc3RyaW5nLFxuICAgIGZuOiBGdW5jdGlvbixcbiAgICBhdXRvQWN0aW9uOiBib29sZWFuID0gZmFsc2UsXG4gICAgcmVmPzogT2JqZWN0XG4pOiBGdW5jdGlvbiB7XG4gICAgaWYgKF9fREVWX18pIHtcbiAgICAgICAgaWYgKCFpc0Z1bmN0aW9uKGZuKSkge1xuICAgICAgICAgICAgZGllKFwiYGFjdGlvbmAgY2FuIG9ubHkgYmUgaW52b2tlZCBvbiBmdW5jdGlvbnNcIilcbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZW9mIGFjdGlvbk5hbWUgIT09IFwic3RyaW5nXCIgfHwgIWFjdGlvbk5hbWUpIHtcbiAgICAgICAgICAgIGRpZShgYWN0aW9ucyBzaG91bGQgaGF2ZSB2YWxpZCBuYW1lcywgZ290OiAnJHthY3Rpb25OYW1lfSdgKVxuICAgICAgICB9XG4gICAgfVxuICAgIGZ1bmN0aW9uIHJlcygpIHtcbiAgICAgICAgcmV0dXJuIGV4ZWN1dGVBY3Rpb24oYWN0aW9uTmFtZSwgYXV0b0FjdGlvbiwgZm4sIHJlZiB8fCB0aGlzLCBhcmd1bWVudHMpXG4gICAgfVxuICAgIHJlcy5pc01vYnhBY3Rpb24gPSB0cnVlXG4gICAgcmVzLnRvU3RyaW5nID0gKCkgPT4gZm4udG9TdHJpbmcoKVxuICAgIGlmIChpc0Z1bmN0aW9uTmFtZUNvbmZpZ3VyYWJsZSkge1xuICAgICAgICB0bXBOYW1lRGVzY3JpcHRvci52YWx1ZSA9IGFjdGlvbk5hbWVcbiAgICAgICAgZGVmaW5lUHJvcGVydHkocmVzLCBcIm5hbWVcIiwgdG1wTmFtZURlc2NyaXB0b3IpXG4gICAgfVxuICAgIHJldHVybiByZXNcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGV4ZWN1dGVBY3Rpb24oXG4gICAgYWN0aW9uTmFtZTogc3RyaW5nLFxuICAgIGNhblJ1bkFzRGVyaXZhdGlvbjogYm9vbGVhbixcbiAgICBmbjogRnVuY3Rpb24sXG4gICAgc2NvcGU/OiBhbnksXG4gICAgYXJncz86IElBcmd1bWVudHNcbikge1xuICAgIGNvbnN0IHJ1bkluZm8gPSBfc3RhcnRBY3Rpb24oYWN0aW9uTmFtZSwgY2FuUnVuQXNEZXJpdmF0aW9uLCBzY29wZSwgYXJncylcbiAgICB0cnkge1xuICAgICAgICByZXR1cm4gZm4uYXBwbHkoc2NvcGUsIGFyZ3MpXG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIHJ1bkluZm8uZXJyb3JfID0gZXJyXG4gICAgICAgIHRocm93IGVyclxuICAgIH0gZmluYWxseSB7XG4gICAgICAgIF9lbmRBY3Rpb24ocnVuSW5mbylcbiAgICB9XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSUFjdGlvblJ1bkluZm8ge1xuICAgIHByZXZEZXJpdmF0aW9uXzogSURlcml2YXRpb24gfCBudWxsXG4gICAgcHJldkFsbG93U3RhdGVDaGFuZ2VzXzogYm9vbGVhblxuICAgIHByZXZBbGxvd1N0YXRlUmVhZHNfOiBib29sZWFuXG4gICAgbm90aWZ5U3B5XzogYm9vbGVhblxuICAgIHN0YXJ0VGltZV86IG51bWJlclxuICAgIGVycm9yXz86IGFueVxuICAgIHBhcmVudEFjdGlvbklkXzogbnVtYmVyXG4gICAgYWN0aW9uSWRfOiBudW1iZXJcbiAgICBydW5Bc0FjdGlvbl8/OiBib29sZWFuXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBfc3RhcnRBY3Rpb24oXG4gICAgYWN0aW9uTmFtZTogc3RyaW5nLFxuICAgIGNhblJ1bkFzRGVyaXZhdGlvbjogYm9vbGVhbiwgLy8gdHJ1ZSBmb3IgYXV0b0FjdGlvblxuICAgIHNjb3BlOiBhbnksXG4gICAgYXJncz86IElBcmd1bWVudHNcbik6IElBY3Rpb25SdW5JbmZvIHtcbiAgICBjb25zdCBub3RpZnlTcHlfID0gX19ERVZfXyAmJiBpc1NweUVuYWJsZWQoKSAmJiAhIWFjdGlvbk5hbWVcbiAgICBsZXQgc3RhcnRUaW1lXzogbnVtYmVyID0gMFxuICAgIGlmIChfX0RFVl9fICYmIG5vdGlmeVNweV8pIHtcbiAgICAgICAgc3RhcnRUaW1lXyA9IERhdGUubm93KClcbiAgICAgICAgY29uc3QgZmxhdHRlbmVkQXJncyA9IGFyZ3MgPyBBcnJheS5mcm9tKGFyZ3MpIDogRU1QVFlfQVJSQVlcbiAgICAgICAgc3B5UmVwb3J0U3RhcnQoe1xuICAgICAgICAgICAgdHlwZTogQUNUSU9OLFxuICAgICAgICAgICAgbmFtZTogYWN0aW9uTmFtZSxcbiAgICAgICAgICAgIG9iamVjdDogc2NvcGUsXG4gICAgICAgICAgICBhcmd1bWVudHM6IGZsYXR0ZW5lZEFyZ3NcbiAgICAgICAgfSlcbiAgICB9XG4gICAgY29uc3QgcHJldkRlcml2YXRpb25fID0gZ2xvYmFsU3RhdGUudHJhY2tpbmdEZXJpdmF0aW9uXG4gICAgY29uc3QgcnVuQXNBY3Rpb24gPSAhY2FuUnVuQXNEZXJpdmF0aW9uIHx8ICFwcmV2RGVyaXZhdGlvbl9cbiAgICBzdGFydEJhdGNoKClcbiAgICBsZXQgcHJldkFsbG93U3RhdGVDaGFuZ2VzXyA9IGdsb2JhbFN0YXRlLmFsbG93U3RhdGVDaGFuZ2VzIC8vIGJ5IGRlZmF1bHQgcHJlc2VydmUgcHJldmlvdXMgYWxsb3dcbiAgICBpZiAocnVuQXNBY3Rpb24pIHtcbiAgICAgICAgdW50cmFja2VkU3RhcnQoKVxuICAgICAgICBwcmV2QWxsb3dTdGF0ZUNoYW5nZXNfID0gYWxsb3dTdGF0ZUNoYW5nZXNTdGFydCh0cnVlKVxuICAgIH1cbiAgICBjb25zdCBwcmV2QWxsb3dTdGF0ZVJlYWRzXyA9IGFsbG93U3RhdGVSZWFkc1N0YXJ0KHRydWUpXG4gICAgY29uc3QgcnVuSW5mbyA9IHtcbiAgICAgICAgcnVuQXNBY3Rpb25fOiBydW5Bc0FjdGlvbixcbiAgICAgICAgcHJldkRlcml2YXRpb25fLFxuICAgICAgICBwcmV2QWxsb3dTdGF0ZUNoYW5nZXNfLFxuICAgICAgICBwcmV2QWxsb3dTdGF0ZVJlYWRzXyxcbiAgICAgICAgbm90aWZ5U3B5XyxcbiAgICAgICAgc3RhcnRUaW1lXyxcbiAgICAgICAgYWN0aW9uSWRfOiBuZXh0QWN0aW9uSWQrKyxcbiAgICAgICAgcGFyZW50QWN0aW9uSWRfOiBjdXJyZW50QWN0aW9uSWRcbiAgICB9XG4gICAgY3VycmVudEFjdGlvbklkID0gcnVuSW5mby5hY3Rpb25JZF9cbiAgICByZXR1cm4gcnVuSW5mb1xufVxuXG5leHBvcnQgZnVuY3Rpb24gX2VuZEFjdGlvbihydW5JbmZvOiBJQWN0aW9uUnVuSW5mbykge1xuICAgIGlmIChjdXJyZW50QWN0aW9uSWQgIT09IHJ1bkluZm8uYWN0aW9uSWRfKSB7XG4gICAgICAgIGRpZSgzMClcbiAgICB9XG4gICAgY3VycmVudEFjdGlvbklkID0gcnVuSW5mby5wYXJlbnRBY3Rpb25JZF9cblxuICAgIGlmIChydW5JbmZvLmVycm9yXyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGdsb2JhbFN0YXRlLnN1cHByZXNzUmVhY3Rpb25FcnJvcnMgPSB0cnVlXG4gICAgfVxuICAgIGFsbG93U3RhdGVDaGFuZ2VzRW5kKHJ1bkluZm8ucHJldkFsbG93U3RhdGVDaGFuZ2VzXylcbiAgICBhbGxvd1N0YXRlUmVhZHNFbmQocnVuSW5mby5wcmV2QWxsb3dTdGF0ZVJlYWRzXylcbiAgICBlbmRCYXRjaCgpXG4gICAgaWYgKHJ1bkluZm8ucnVuQXNBY3Rpb25fKSB7XG4gICAgICAgIHVudHJhY2tlZEVuZChydW5JbmZvLnByZXZEZXJpdmF0aW9uXylcbiAgICB9XG4gICAgaWYgKF9fREVWX18gJiYgcnVuSW5mby5ub3RpZnlTcHlfKSB7XG4gICAgICAgIHNweVJlcG9ydEVuZCh7IHRpbWU6IERhdGUubm93KCkgLSBydW5JbmZvLnN0YXJ0VGltZV8gfSlcbiAgICB9XG4gICAgZ2xvYmFsU3RhdGUuc3VwcHJlc3NSZWFjdGlvbkVycm9ycyA9IGZhbHNlXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhbGxvd1N0YXRlQ2hhbmdlczxUPihhbGxvd1N0YXRlQ2hhbmdlczogYm9vbGVhbiwgZnVuYzogKCkgPT4gVCk6IFQge1xuICAgIGNvbnN0IHByZXYgPSBhbGxvd1N0YXRlQ2hhbmdlc1N0YXJ0KGFsbG93U3RhdGVDaGFuZ2VzKVxuICAgIHRyeSB7XG4gICAgICAgIHJldHVybiBmdW5jKClcbiAgICB9IGZpbmFsbHkge1xuICAgICAgICBhbGxvd1N0YXRlQ2hhbmdlc0VuZChwcmV2KVxuICAgIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGFsbG93U3RhdGVDaGFuZ2VzU3RhcnQoYWxsb3dTdGF0ZUNoYW5nZXM6IGJvb2xlYW4pIHtcbiAgICBjb25zdCBwcmV2ID0gZ2xvYmFsU3RhdGUuYWxsb3dTdGF0ZUNoYW5nZXNcbiAgICBnbG9iYWxTdGF0ZS5hbGxvd1N0YXRlQ2hhbmdlcyA9IGFsbG93U3RhdGVDaGFuZ2VzXG4gICAgcmV0dXJuIHByZXZcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGFsbG93U3RhdGVDaGFuZ2VzRW5kKHByZXY6IGJvb2xlYW4pIHtcbiAgICBnbG9iYWxTdGF0ZS5hbGxvd1N0YXRlQ2hhbmdlcyA9IHByZXZcbn1cbiIsImltcG9ydCB7XG4gICAgQXRvbSxcbiAgICBJRW5oYW5jZXIsXG4gICAgSUludGVyY2VwdGFibGUsXG4gICAgSUVxdWFsc0NvbXBhcmVyLFxuICAgIElJbnRlcmNlcHRvcixcbiAgICBJTGlzdGVuYWJsZSxcbiAgICBMYW1iZGEsXG4gICAgY2hlY2tJZlN0YXRlTW9kaWZpY2F0aW9uc0FyZUFsbG93ZWQsXG4gICAgY29tcGFyZXIsXG4gICAgY3JlYXRlSW5zdGFuY2VvZlByZWRpY2F0ZSxcbiAgICBnZXROZXh0SWQsXG4gICAgaGFzSW50ZXJjZXB0b3JzLFxuICAgIGhhc0xpc3RlbmVycyxcbiAgICBpbnRlcmNlcHRDaGFuZ2UsXG4gICAgaXNTcHlFbmFibGVkLFxuICAgIG5vdGlmeUxpc3RlbmVycyxcbiAgICByZWdpc3RlckludGVyY2VwdG9yLFxuICAgIHJlZ2lzdGVyTGlzdGVuZXIsXG4gICAgc3B5UmVwb3J0LFxuICAgIHNweVJlcG9ydEVuZCxcbiAgICBzcHlSZXBvcnRTdGFydCxcbiAgICB0b1ByaW1pdGl2ZSxcbiAgICBnbG9iYWxTdGF0ZSxcbiAgICBJVU5DSEFOR0VELFxuICAgIFVQREFURVxufSBmcm9tIFwiLi4vaW50ZXJuYWxcIlxuXG5leHBvcnQgaW50ZXJmYWNlIElWYWx1ZVdpbGxDaGFuZ2U8VD4ge1xuICAgIG9iamVjdDogSU9ic2VydmFibGVWYWx1ZTxUPlxuICAgIHR5cGU6IFwidXBkYXRlXCJcbiAgICBuZXdWYWx1ZTogVFxufVxuXG5leHBvcnQgdHlwZSBJVmFsdWVEaWRDaGFuZ2U8VCA9IGFueT4gPSB7XG4gICAgdHlwZTogXCJ1cGRhdGVcIlxuICAgIG9ic2VydmFibGVLaW5kOiBcInZhbHVlXCJcbiAgICBvYmplY3Q6IElPYnNlcnZhYmxlVmFsdWU8VD5cbiAgICBkZWJ1Z09iamVjdE5hbWU6IHN0cmluZ1xuICAgIG5ld1ZhbHVlOiBUXG4gICAgb2xkVmFsdWU6IFQgfCB1bmRlZmluZWRcbn1cbmV4cG9ydCB0eXBlIElCb3hEaWRDaGFuZ2U8VCA9IGFueT4gPVxuICAgIHwge1xuICAgICAgICAgIHR5cGU6IFwiY3JlYXRlXCJcbiAgICAgICAgICBvYnNlcnZhYmxlS2luZDogXCJ2YWx1ZVwiXG4gICAgICAgICAgb2JqZWN0OiBJT2JzZXJ2YWJsZVZhbHVlPFQ+XG4gICAgICAgICAgZGVidWdPYmplY3ROYW1lOiBzdHJpbmdcbiAgICAgICAgICBuZXdWYWx1ZTogVFxuICAgICAgfVxuICAgIHwgSVZhbHVlRGlkQ2hhbmdlPFQ+XG5cbmV4cG9ydCBpbnRlcmZhY2UgSU9ic2VydmFibGVWYWx1ZTxUPiB7XG4gICAgZ2V0KCk6IFRcbiAgICBzZXQodmFsdWU6IFQpOiB2b2lkXG59XG5cbmNvbnN0IENSRUFURSA9IFwiY3JlYXRlXCJcblxuZXhwb3J0IGNsYXNzIE9ic2VydmFibGVWYWx1ZTxUPlxuICAgIGV4dGVuZHMgQXRvbVxuICAgIGltcGxlbWVudHMgSU9ic2VydmFibGVWYWx1ZTxUPiwgSUludGVyY2VwdGFibGU8SVZhbHVlV2lsbENoYW5nZTxUPj4sIElMaXN0ZW5hYmxlXG57XG4gICAgaGFzVW5yZXBvcnRlZENoYW5nZV8gPSBmYWxzZVxuICAgIGludGVyY2VwdG9yc19cbiAgICBjaGFuZ2VMaXN0ZW5lcnNfXG4gICAgdmFsdWVfXG4gICAgZGVoYW5jZXI6IGFueVxuXG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIHZhbHVlOiBULFxuICAgICAgICBwdWJsaWMgZW5oYW5jZXI6IElFbmhhbmNlcjxUPixcbiAgICAgICAgcHVibGljIG5hbWVfID0gX19ERVZfXyA/IFwiT2JzZXJ2YWJsZVZhbHVlQFwiICsgZ2V0TmV4dElkKCkgOiBcIk9ic2VydmFibGVWYWx1ZVwiLFxuICAgICAgICBub3RpZnlTcHkgPSB0cnVlLFxuICAgICAgICBwcml2YXRlIGVxdWFsczogSUVxdWFsc0NvbXBhcmVyPGFueT4gPSBjb21wYXJlci5kZWZhdWx0XG4gICAgKSB7XG4gICAgICAgIHN1cGVyKG5hbWVfKVxuICAgICAgICB0aGlzLnZhbHVlXyA9IGVuaGFuY2VyKHZhbHVlLCB1bmRlZmluZWQsIG5hbWVfKVxuICAgICAgICBpZiAoX19ERVZfXyAmJiBub3RpZnlTcHkgJiYgaXNTcHlFbmFibGVkKCkpIHtcbiAgICAgICAgICAgIC8vIG9ubHkgbm90aWZ5IHNweSBpZiB0aGlzIGlzIGEgc3RhbmQtYWxvbmUgb2JzZXJ2YWJsZVxuICAgICAgICAgICAgc3B5UmVwb3J0KHtcbiAgICAgICAgICAgICAgICB0eXBlOiBDUkVBVEUsXG4gICAgICAgICAgICAgICAgb2JqZWN0OiB0aGlzLFxuICAgICAgICAgICAgICAgIG9ic2VydmFibGVLaW5kOiBcInZhbHVlXCIsXG4gICAgICAgICAgICAgICAgZGVidWdPYmplY3ROYW1lOiB0aGlzLm5hbWVfLFxuICAgICAgICAgICAgICAgIG5ld1ZhbHVlOiBcIlwiICsgdGhpcy52YWx1ZV9cbiAgICAgICAgICAgIH0pXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIGRlaGFuY2VWYWx1ZSh2YWx1ZTogVCk6IFQge1xuICAgICAgICBpZiAodGhpcy5kZWhhbmNlciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5kZWhhbmNlcih2YWx1ZSlcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdmFsdWVcbiAgICB9XG5cbiAgICBwdWJsaWMgc2V0KG5ld1ZhbHVlOiBUKSB7XG4gICAgICAgIGNvbnN0IG9sZFZhbHVlID0gdGhpcy52YWx1ZV9cbiAgICAgICAgbmV3VmFsdWUgPSB0aGlzLnByZXBhcmVOZXdWYWx1ZV8obmV3VmFsdWUpIGFzIGFueVxuICAgICAgICBpZiAobmV3VmFsdWUgIT09IGdsb2JhbFN0YXRlLlVOQ0hBTkdFRCkge1xuICAgICAgICAgICAgY29uc3Qgbm90aWZ5U3B5ID0gaXNTcHlFbmFibGVkKClcbiAgICAgICAgICAgIGlmIChfX0RFVl9fICYmIG5vdGlmeVNweSkge1xuICAgICAgICAgICAgICAgIHNweVJlcG9ydFN0YXJ0KHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogVVBEQVRFLFxuICAgICAgICAgICAgICAgICAgICBvYmplY3Q6IHRoaXMsXG4gICAgICAgICAgICAgICAgICAgIG9ic2VydmFibGVLaW5kOiBcInZhbHVlXCIsXG4gICAgICAgICAgICAgICAgICAgIGRlYnVnT2JqZWN0TmFtZTogdGhpcy5uYW1lXyxcbiAgICAgICAgICAgICAgICAgICAgbmV3VmFsdWUsXG4gICAgICAgICAgICAgICAgICAgIG9sZFZhbHVlXG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuc2V0TmV3VmFsdWVfKG5ld1ZhbHVlKVxuICAgICAgICAgICAgaWYgKF9fREVWX18gJiYgbm90aWZ5U3B5KSB7XG4gICAgICAgICAgICAgICAgc3B5UmVwb3J0RW5kKClcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgcHJlcGFyZU5ld1ZhbHVlXyhuZXdWYWx1ZSk6IFQgfCBJVU5DSEFOR0VEIHtcbiAgICAgICAgY2hlY2tJZlN0YXRlTW9kaWZpY2F0aW9uc0FyZUFsbG93ZWQodGhpcylcbiAgICAgICAgaWYgKGhhc0ludGVyY2VwdG9ycyh0aGlzKSkge1xuICAgICAgICAgICAgY29uc3QgY2hhbmdlID0gaW50ZXJjZXB0Q2hhbmdlPElWYWx1ZVdpbGxDaGFuZ2U8VD4+KHRoaXMsIHtcbiAgICAgICAgICAgICAgICBvYmplY3Q6IHRoaXMsXG4gICAgICAgICAgICAgICAgdHlwZTogVVBEQVRFLFxuICAgICAgICAgICAgICAgIG5ld1ZhbHVlXG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgaWYgKCFjaGFuZ2UpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZ2xvYmFsU3RhdGUuVU5DSEFOR0VEXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBuZXdWYWx1ZSA9IGNoYW5nZS5uZXdWYWx1ZVxuICAgICAgICB9XG4gICAgICAgIC8vIGFwcGx5IG1vZGlmaWVyXG4gICAgICAgIG5ld1ZhbHVlID0gdGhpcy5lbmhhbmNlcihuZXdWYWx1ZSwgdGhpcy52YWx1ZV8sIHRoaXMubmFtZV8pXG4gICAgICAgIHJldHVybiB0aGlzLmVxdWFscyh0aGlzLnZhbHVlXywgbmV3VmFsdWUpID8gZ2xvYmFsU3RhdGUuVU5DSEFOR0VEIDogbmV3VmFsdWVcbiAgICB9XG5cbiAgICBzZXROZXdWYWx1ZV8obmV3VmFsdWU6IFQpIHtcbiAgICAgICAgY29uc3Qgb2xkVmFsdWUgPSB0aGlzLnZhbHVlX1xuICAgICAgICB0aGlzLnZhbHVlXyA9IG5ld1ZhbHVlXG4gICAgICAgIHRoaXMucmVwb3J0Q2hhbmdlZCgpXG4gICAgICAgIGlmIChoYXNMaXN0ZW5lcnModGhpcykpIHtcbiAgICAgICAgICAgIG5vdGlmeUxpc3RlbmVycyh0aGlzLCB7XG4gICAgICAgICAgICAgICAgdHlwZTogVVBEQVRFLFxuICAgICAgICAgICAgICAgIG9iamVjdDogdGhpcyxcbiAgICAgICAgICAgICAgICBuZXdWYWx1ZSxcbiAgICAgICAgICAgICAgICBvbGRWYWx1ZVxuICAgICAgICAgICAgfSlcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHB1YmxpYyBnZXQoKTogVCB7XG4gICAgICAgIHRoaXMucmVwb3J0T2JzZXJ2ZWQoKVxuICAgICAgICByZXR1cm4gdGhpcy5kZWhhbmNlVmFsdWUodGhpcy52YWx1ZV8pXG4gICAgfVxuXG4gICAgaW50ZXJjZXB0XyhoYW5kbGVyOiBJSW50ZXJjZXB0b3I8SVZhbHVlV2lsbENoYW5nZTxUPj4pOiBMYW1iZGEge1xuICAgICAgICByZXR1cm4gcmVnaXN0ZXJJbnRlcmNlcHRvcih0aGlzLCBoYW5kbGVyKVxuICAgIH1cblxuICAgIG9ic2VydmVfKGxpc3RlbmVyOiAoY2hhbmdlOiBJVmFsdWVEaWRDaGFuZ2U8VD4pID0+IHZvaWQsIGZpcmVJbW1lZGlhdGVseT86IGJvb2xlYW4pOiBMYW1iZGEge1xuICAgICAgICBpZiAoZmlyZUltbWVkaWF0ZWx5KSB7XG4gICAgICAgICAgICBsaXN0ZW5lcih7XG4gICAgICAgICAgICAgICAgb2JzZXJ2YWJsZUtpbmQ6IFwidmFsdWVcIixcbiAgICAgICAgICAgICAgICBkZWJ1Z09iamVjdE5hbWU6IHRoaXMubmFtZV8sXG4gICAgICAgICAgICAgICAgb2JqZWN0OiB0aGlzLFxuICAgICAgICAgICAgICAgIHR5cGU6IFVQREFURSxcbiAgICAgICAgICAgICAgICBuZXdWYWx1ZTogdGhpcy52YWx1ZV8sXG4gICAgICAgICAgICAgICAgb2xkVmFsdWU6IHVuZGVmaW5lZFxuICAgICAgICAgICAgfSlcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVnaXN0ZXJMaXN0ZW5lcih0aGlzLCBsaXN0ZW5lcilcbiAgICB9XG5cbiAgICByYXcoKSB7XG4gICAgICAgIC8vIHVzZWQgYnkgTVNUIG90IGdldCB1bmRlaGFuY2VkIHZhbHVlXG4gICAgICAgIHJldHVybiB0aGlzLnZhbHVlX1xuICAgIH1cblxuICAgIHRvSlNPTigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0KClcbiAgICB9XG5cbiAgICB0b1N0cmluZygpIHtcbiAgICAgICAgcmV0dXJuIGAke3RoaXMubmFtZV99WyR7dGhpcy52YWx1ZV99XWBcbiAgICB9XG5cbiAgICB2YWx1ZU9mKCk6IFQge1xuICAgICAgICByZXR1cm4gdG9QcmltaXRpdmUodGhpcy5nZXQoKSlcbiAgICB9XG5cbiAgICBbU3ltYm9sLnRvUHJpbWl0aXZlXSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudmFsdWVPZigpXG4gICAgfVxufVxuXG5leHBvcnQgY29uc3QgaXNPYnNlcnZhYmxlVmFsdWUgPSBjcmVhdGVJbnN0YW5jZW9mUHJlZGljYXRlKFwiT2JzZXJ2YWJsZVZhbHVlXCIsIE9ic2VydmFibGVWYWx1ZSkgYXMgKFxuICAgIHg6IGFueVxuKSA9PiB4IGlzIElPYnNlcnZhYmxlVmFsdWU8YW55PlxuIiwiaW1wb3J0IHtcbiAgICBDYXVnaHRFeGNlcHRpb24sXG4gICAgSURlcml2YXRpb24sXG4gICAgSURlcml2YXRpb25TdGF0ZV8sXG4gICAgSUVxdWFsc0NvbXBhcmVyLFxuICAgIElPYnNlcnZhYmxlLFxuICAgIExhbWJkYSxcbiAgICBUcmFjZU1vZGUsXG4gICAgYXV0b3J1bixcbiAgICBjbGVhck9ic2VydmluZyxcbiAgICBjb21wYXJlcixcbiAgICBjcmVhdGVBY3Rpb24sXG4gICAgY3JlYXRlSW5zdGFuY2VvZlByZWRpY2F0ZSxcbiAgICBlbmRCYXRjaCxcbiAgICBnZXROZXh0SWQsXG4gICAgZ2xvYmFsU3RhdGUsXG4gICAgaXNDYXVnaHRFeGNlcHRpb24sXG4gICAgaXNTcHlFbmFibGVkLFxuICAgIHByb3BhZ2F0ZUNoYW5nZUNvbmZpcm1lZCxcbiAgICBwcm9wYWdhdGVNYXliZUNoYW5nZWQsXG4gICAgcmVwb3J0T2JzZXJ2ZWQsXG4gICAgc2hvdWxkQ29tcHV0ZSxcbiAgICBzcHlSZXBvcnQsXG4gICAgc3RhcnRCYXRjaCxcbiAgICB0b1ByaW1pdGl2ZSxcbiAgICB0cmFja0Rlcml2ZWRGdW5jdGlvbixcbiAgICB1bnRyYWNrZWRFbmQsXG4gICAgdW50cmFja2VkU3RhcnQsXG4gICAgVVBEQVRFLFxuICAgIGRpZSxcbiAgICBhbGxvd1N0YXRlQ2hhbmdlc1N0YXJ0LFxuICAgIGFsbG93U3RhdGVDaGFuZ2VzRW5kXG59IGZyb20gXCIuLi9pbnRlcm5hbFwiXG5cbmV4cG9ydCBpbnRlcmZhY2UgSUNvbXB1dGVkVmFsdWU8VD4ge1xuICAgIGdldCgpOiBUXG4gICAgc2V0KHZhbHVlOiBUKTogdm9pZFxufVxuXG5leHBvcnQgaW50ZXJmYWNlIElDb21wdXRlZFZhbHVlT3B0aW9uczxUPiB7XG4gICAgZ2V0PzogKCkgPT4gVFxuICAgIHNldD86ICh2YWx1ZTogVCkgPT4gdm9pZFxuICAgIG5hbWU/OiBzdHJpbmdcbiAgICBlcXVhbHM/OiBJRXF1YWxzQ29tcGFyZXI8VD5cbiAgICBjb250ZXh0PzogYW55XG4gICAgcmVxdWlyZXNSZWFjdGlvbj86IGJvb2xlYW5cbiAgICBrZWVwQWxpdmU/OiBib29sZWFuXG59XG5cbmV4cG9ydCB0eXBlIElDb21wdXRlZERpZENoYW5nZTxUID0gYW55PiA9IHtcbiAgICB0eXBlOiBcInVwZGF0ZVwiXG4gICAgb2JzZXJ2YWJsZUtpbmQ6IFwiY29tcHV0ZWRcIlxuICAgIG9iamVjdDogdW5rbm93blxuICAgIGRlYnVnT2JqZWN0TmFtZTogc3RyaW5nXG4gICAgbmV3VmFsdWU6IFRcbiAgICBvbGRWYWx1ZTogVCB8IHVuZGVmaW5lZFxufVxuXG4vKipcbiAqIEEgbm9kZSBpbiB0aGUgc3RhdGUgZGVwZW5kZW5jeSByb290IHRoYXQgb2JzZXJ2ZXMgb3RoZXIgbm9kZXMsIGFuZCBjYW4gYmUgb2JzZXJ2ZWQgaXRzZWxmLlxuICpcbiAqIENvbXB1dGVkVmFsdWUgd2lsbCByZW1lbWJlciB0aGUgcmVzdWx0IG9mIHRoZSBjb21wdXRhdGlvbiBmb3IgdGhlIGR1cmF0aW9uIG9mIHRoZSBiYXRjaCwgb3JcbiAqIHdoaWxlIGJlaW5nIG9ic2VydmVkLlxuICpcbiAqIER1cmluZyB0aGlzIHRpbWUgaXQgd2lsbCByZWNvbXB1dGUgb25seSB3aGVuIG9uZSBvZiBpdHMgZGlyZWN0IGRlcGVuZGVuY2llcyBjaGFuZ2VkLFxuICogYnV0IG9ubHkgd2hlbiBpdCBpcyBiZWluZyBhY2Nlc3NlZCB3aXRoIGBDb21wdXRlZFZhbHVlLmdldCgpYC5cbiAqXG4gKiBJbXBsZW1lbnRhdGlvbiBkZXNjcmlwdGlvbjpcbiAqIDEuIEZpcnN0IHRpbWUgaXQncyBiZWluZyBhY2Nlc3NlZCBpdCB3aWxsIGNvbXB1dGUgYW5kIHJlbWVtYmVyIHJlc3VsdFxuICogICAgZ2l2ZSBiYWNrIHJlbWVtYmVyZWQgcmVzdWx0IHVudGlsIDIuIGhhcHBlbnNcbiAqIDIuIEZpcnN0IHRpbWUgYW55IGRlZXAgZGVwZW5kZW5jeSBjaGFuZ2UsIHByb3BhZ2F0ZSBQT1NTSUJMWV9TVEFMRSB0byBhbGwgb2JzZXJ2ZXJzLCB3YWl0IGZvciAzLlxuICogMy4gV2hlbiBpdCdzIGJlaW5nIGFjY2Vzc2VkLCByZWNvbXB1dGUgaWYgYW55IHNoYWxsb3cgZGVwZW5kZW5jeSBjaGFuZ2VkLlxuICogICAgaWYgcmVzdWx0IGNoYW5nZWQ6IHByb3BhZ2F0ZSBTVEFMRSB0byBhbGwgb2JzZXJ2ZXJzLCB0aGF0IHdlcmUgUE9TU0lCTFlfU1RBTEUgZnJvbSB0aGUgbGFzdCBzdGVwLlxuICogICAgZ28gdG8gc3RlcCAyLiBlaXRoZXIgd2F5XG4gKlxuICogSWYgYXQgYW55IHBvaW50IGl0J3Mgb3V0c2lkZSBiYXRjaCBhbmQgaXQgaXNuJ3Qgb2JzZXJ2ZWQ6IHJlc2V0IGV2ZXJ5dGhpbmcgYW5kIGdvIHRvIDEuXG4gKi9cbmV4cG9ydCBjbGFzcyBDb21wdXRlZFZhbHVlPFQ+IGltcGxlbWVudHMgSU9ic2VydmFibGUsIElDb21wdXRlZFZhbHVlPFQ+LCBJRGVyaXZhdGlvbiB7XG4gICAgZGVwZW5kZW5jaWVzU3RhdGVfID0gSURlcml2YXRpb25TdGF0ZV8uTk9UX1RSQUNLSU5HX1xuICAgIG9ic2VydmluZ186IElPYnNlcnZhYmxlW10gPSBbXSAvLyBub2RlcyB3ZSBhcmUgbG9va2luZyBhdC4gT3VyIHZhbHVlIGRlcGVuZHMgb24gdGhlc2Ugbm9kZXNcbiAgICBuZXdPYnNlcnZpbmdfID0gbnVsbCAvLyBkdXJpbmcgdHJhY2tpbmcgaXQncyBhbiBhcnJheSB3aXRoIG5ldyBvYnNlcnZlZCBvYnNlcnZlcnNcbiAgICBpc0JlaW5nT2JzZXJ2ZWRfID0gZmFsc2VcbiAgICBpc1BlbmRpbmdVbm9ic2VydmF0aW9uXzogYm9vbGVhbiA9IGZhbHNlXG4gICAgb2JzZXJ2ZXJzXyA9IG5ldyBTZXQ8SURlcml2YXRpb24+KClcbiAgICBkaWZmVmFsdWVfID0gMFxuICAgIHJ1bklkXyA9IDBcbiAgICBsYXN0QWNjZXNzZWRCeV8gPSAwXG4gICAgbG93ZXN0T2JzZXJ2ZXJTdGF0ZV8gPSBJRGVyaXZhdGlvblN0YXRlXy5VUF9UT19EQVRFX1xuICAgIHVuYm91bmREZXBzQ291bnRfID0gMFxuICAgIHByb3RlY3RlZCB2YWx1ZV86IFQgfCB1bmRlZmluZWQgfCBDYXVnaHRFeGNlcHRpb24gPSBuZXcgQ2F1Z2h0RXhjZXB0aW9uKG51bGwpXG4gICAgbmFtZV86IHN0cmluZ1xuICAgIHRyaWdnZXJlZEJ5Xz86IHN0cmluZ1xuICAgIGlzQ29tcHV0aW5nXzogYm9vbGVhbiA9IGZhbHNlIC8vIHRvIGNoZWNrIGZvciBjeWNsZXNcbiAgICBpc1J1bm5pbmdTZXR0ZXJfOiBib29sZWFuID0gZmFsc2VcbiAgICBkZXJpdmF0aW9uOiAoKSA9PiBUIC8vIE4uQjogdW5taW5pZmllZCBhcyBpdCBpcyB1c2VkIGJ5IE1TVFxuICAgIHNldHRlcl8/OiAodmFsdWU6IFQpID0+IHZvaWRcbiAgICBpc1RyYWNpbmdfOiBUcmFjZU1vZGUgPSBUcmFjZU1vZGUuTk9ORVxuICAgIHNjb3BlXzogT2JqZWN0IHwgdW5kZWZpbmVkXG4gICAgcHJpdmF0ZSBlcXVhbHNfOiBJRXF1YWxzQ29tcGFyZXI8YW55PlxuICAgIHByaXZhdGUgcmVxdWlyZXNSZWFjdGlvbl86IGJvb2xlYW4gfCB1bmRlZmluZWRcbiAgICBrZWVwQWxpdmVfOiBib29sZWFuXG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGUgYSBuZXcgY29tcHV0ZWQgdmFsdWUgYmFzZWQgb24gYSBmdW5jdGlvbiBleHByZXNzaW9uLlxuICAgICAqXG4gICAgICogVGhlIGBuYW1lYCBwcm9wZXJ0eSBpcyBmb3IgZGVidWcgcHVycG9zZXMgb25seS5cbiAgICAgKlxuICAgICAqIFRoZSBgZXF1YWxzYCBwcm9wZXJ0eSBzcGVjaWZpZXMgdGhlIGNvbXBhcmVyIGZ1bmN0aW9uIHRvIHVzZSB0byBkZXRlcm1pbmUgaWYgYSBuZXdseSBwcm9kdWNlZFxuICAgICAqIHZhbHVlIGRpZmZlcnMgZnJvbSB0aGUgcHJldmlvdXMgdmFsdWUuIFR3byBjb21wYXJlcnMgYXJlIHByb3ZpZGVkIGluIHRoZSBsaWJyYXJ5OyBgZGVmYXVsdENvbXBhcmVyYFxuICAgICAqIGNvbXBhcmVzIGJhc2VkIG9uIGlkZW50aXR5IGNvbXBhcmlzb24gKD09PSksIGFuZCBgc3RydWN0dXJhbENvbXBhcmVyYCBkZWVwbHkgY29tcGFyZXMgdGhlIHN0cnVjdHVyZS5cbiAgICAgKiBTdHJ1Y3R1cmFsIGNvbXBhcmlzb24gY2FuIGJlIGNvbnZlbmllbnQgaWYgeW91IGFsd2F5cyBwcm9kdWNlIGEgbmV3IGFnZ3JlZ2F0ZWQgb2JqZWN0IGFuZFxuICAgICAqIGRvbid0IHdhbnQgdG8gbm90aWZ5IG9ic2VydmVycyBpZiBpdCBpcyBzdHJ1Y3R1cmFsbHkgdGhlIHNhbWUuXG4gICAgICogVGhpcyBpcyB1c2VmdWwgZm9yIHdvcmtpbmcgd2l0aCB2ZWN0b3JzLCBtb3VzZSBjb29yZGluYXRlcyBldGMuXG4gICAgICovXG4gICAgY29uc3RydWN0b3Iob3B0aW9uczogSUNvbXB1dGVkVmFsdWVPcHRpb25zPFQ+KSB7XG4gICAgICAgIGlmICghb3B0aW9ucy5nZXQpIHtcbiAgICAgICAgICAgIGRpZSgzMSlcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmRlcml2YXRpb24gPSBvcHRpb25zLmdldCFcbiAgICAgICAgdGhpcy5uYW1lXyA9IG9wdGlvbnMubmFtZSB8fCAoX19ERVZfXyA/IFwiQ29tcHV0ZWRWYWx1ZUBcIiArIGdldE5leHRJZCgpIDogXCJDb21wdXRlZFZhbHVlXCIpXG4gICAgICAgIGlmIChvcHRpb25zLnNldCkge1xuICAgICAgICAgICAgdGhpcy5zZXR0ZXJfID0gY3JlYXRlQWN0aW9uKFxuICAgICAgICAgICAgICAgIF9fREVWX18gPyB0aGlzLm5hbWVfICsgXCItc2V0dGVyXCIgOiBcIkNvbXB1dGVkVmFsdWUtc2V0dGVyXCIsXG4gICAgICAgICAgICAgICAgb3B0aW9ucy5zZXRcbiAgICAgICAgICAgICkgYXMgYW55XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5lcXVhbHNfID1cbiAgICAgICAgICAgIG9wdGlvbnMuZXF1YWxzIHx8XG4gICAgICAgICAgICAoKG9wdGlvbnMgYXMgYW55KS5jb21wYXJlU3RydWN0dXJhbCB8fCAob3B0aW9ucyBhcyBhbnkpLnN0cnVjdFxuICAgICAgICAgICAgICAgID8gY29tcGFyZXIuc3RydWN0dXJhbFxuICAgICAgICAgICAgICAgIDogY29tcGFyZXIuZGVmYXVsdClcbiAgICAgICAgdGhpcy5zY29wZV8gPSBvcHRpb25zLmNvbnRleHRcbiAgICAgICAgdGhpcy5yZXF1aXJlc1JlYWN0aW9uXyA9IG9wdGlvbnMucmVxdWlyZXNSZWFjdGlvblxuICAgICAgICB0aGlzLmtlZXBBbGl2ZV8gPSAhIW9wdGlvbnMua2VlcEFsaXZlXG4gICAgfVxuXG4gICAgb25CZWNvbWVTdGFsZV8oKSB7XG4gICAgICAgIHByb3BhZ2F0ZU1heWJlQ2hhbmdlZCh0aGlzKVxuICAgIH1cblxuICAgIHB1YmxpYyBvbkJPTDogU2V0PExhbWJkYT4gfCB1bmRlZmluZWRcbiAgICBwdWJsaWMgb25CVU9MOiBTZXQ8TGFtYmRhPiB8IHVuZGVmaW5lZFxuXG4gICAgcHVibGljIG9uQk8oKSB7XG4gICAgICAgIGlmICh0aGlzLm9uQk9MKSB7XG4gICAgICAgICAgICB0aGlzLm9uQk9MLmZvckVhY2gobGlzdGVuZXIgPT4gbGlzdGVuZXIoKSlcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHB1YmxpYyBvbkJVTygpIHtcbiAgICAgICAgaWYgKHRoaXMub25CVU9MKSB7XG4gICAgICAgICAgICB0aGlzLm9uQlVPTC5mb3JFYWNoKGxpc3RlbmVyID0+IGxpc3RlbmVyKCkpXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBjdXJyZW50IHZhbHVlIG9mIHRoaXMgY29tcHV0ZWQgdmFsdWUuXG4gICAgICogV2lsbCBldmFsdWF0ZSBpdHMgY29tcHV0YXRpb24gZmlyc3QgaWYgbmVlZGVkLlxuICAgICAqL1xuICAgIHB1YmxpYyBnZXQoKTogVCB7XG4gICAgICAgIGlmICh0aGlzLmlzQ29tcHV0aW5nXykge1xuICAgICAgICAgICAgZGllKDMyLCB0aGlzLm5hbWVfLCB0aGlzLmRlcml2YXRpb24pXG4gICAgICAgIH1cbiAgICAgICAgaWYgKFxuICAgICAgICAgICAgZ2xvYmFsU3RhdGUuaW5CYXRjaCA9PT0gMCAmJlxuICAgICAgICAgICAgLy8gIWdsb2JhbFN0YXRlLnRyYWNraW5nRGVyaXZhdHBpb24gJiZcbiAgICAgICAgICAgIHRoaXMub2JzZXJ2ZXJzXy5zaXplID09PSAwICYmXG4gICAgICAgICAgICAhdGhpcy5rZWVwQWxpdmVfXG4gICAgICAgICkge1xuICAgICAgICAgICAgaWYgKHNob3VsZENvbXB1dGUodGhpcykpIHtcbiAgICAgICAgICAgICAgICB0aGlzLndhcm5BYm91dFVudHJhY2tlZFJlYWRfKClcbiAgICAgICAgICAgICAgICBzdGFydEJhdGNoKCkgLy8gU2VlIHBlcmYgdGVzdCAnY29tcHV0ZWQgbWVtb2l6YXRpb24nXG4gICAgICAgICAgICAgICAgdGhpcy52YWx1ZV8gPSB0aGlzLmNvbXB1dGVWYWx1ZV8oZmFsc2UpXG4gICAgICAgICAgICAgICAgZW5kQmF0Y2goKVxuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmVwb3J0T2JzZXJ2ZWQodGhpcylcbiAgICAgICAgICAgIGlmIChzaG91bGRDb21wdXRlKHRoaXMpKSB7XG4gICAgICAgICAgICAgICAgbGV0IHByZXZUcmFja2luZ0NvbnRleHQgPSBnbG9iYWxTdGF0ZS50cmFja2luZ0NvbnRleHRcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5rZWVwQWxpdmVfICYmICFwcmV2VHJhY2tpbmdDb250ZXh0KSB7XG4gICAgICAgICAgICAgICAgICAgIGdsb2JhbFN0YXRlLnRyYWNraW5nQ29udGV4dCA9IHRoaXNcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMudHJhY2tBbmRDb21wdXRlKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgcHJvcGFnYXRlQ2hhbmdlQ29uZmlybWVkKHRoaXMpXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGdsb2JhbFN0YXRlLnRyYWNraW5nQ29udGV4dCA9IHByZXZUcmFja2luZ0NvbnRleHRcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjb25zdCByZXN1bHQgPSB0aGlzLnZhbHVlXyFcblxuICAgICAgICBpZiAoaXNDYXVnaHRFeGNlcHRpb24ocmVzdWx0KSkge1xuICAgICAgICAgICAgdGhyb3cgcmVzdWx0LmNhdXNlXG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdFxuICAgIH1cblxuICAgIHB1YmxpYyBzZXQodmFsdWU6IFQpIHtcbiAgICAgICAgaWYgKHRoaXMuc2V0dGVyXykge1xuICAgICAgICAgICAgaWYgKHRoaXMuaXNSdW5uaW5nU2V0dGVyXykge1xuICAgICAgICAgICAgICAgIGRpZSgzMywgdGhpcy5uYW1lXylcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuaXNSdW5uaW5nU2V0dGVyXyA9IHRydWVcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zZXR0ZXJfLmNhbGwodGhpcy5zY29wZV8sIHZhbHVlKVxuICAgICAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICAgICAgICB0aGlzLmlzUnVubmluZ1NldHRlcl8gPSBmYWxzZVxuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZGllKDM0LCB0aGlzLm5hbWVfKVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgdHJhY2tBbmRDb21wdXRlKCk6IGJvb2xlYW4ge1xuICAgICAgICAvLyBOLkI6IHVubWluaWZpZWQgYXMgaXQgaXMgdXNlZCBieSBNU1RcbiAgICAgICAgY29uc3Qgb2xkVmFsdWUgPSB0aGlzLnZhbHVlX1xuICAgICAgICBjb25zdCB3YXNTdXNwZW5kZWQgPVxuICAgICAgICAgICAgLyogc2VlICMxMjA4ICovIHRoaXMuZGVwZW5kZW5jaWVzU3RhdGVfID09PSBJRGVyaXZhdGlvblN0YXRlXy5OT1RfVFJBQ0tJTkdfXG4gICAgICAgIGNvbnN0IG5ld1ZhbHVlID0gdGhpcy5jb21wdXRlVmFsdWVfKHRydWUpXG5cbiAgICAgICAgY29uc3QgY2hhbmdlZCA9XG4gICAgICAgICAgICB3YXNTdXNwZW5kZWQgfHxcbiAgICAgICAgICAgIGlzQ2F1Z2h0RXhjZXB0aW9uKG9sZFZhbHVlKSB8fFxuICAgICAgICAgICAgaXNDYXVnaHRFeGNlcHRpb24obmV3VmFsdWUpIHx8XG4gICAgICAgICAgICAhdGhpcy5lcXVhbHNfKG9sZFZhbHVlLCBuZXdWYWx1ZSlcblxuICAgICAgICBpZiAoY2hhbmdlZCkge1xuICAgICAgICAgICAgdGhpcy52YWx1ZV8gPSBuZXdWYWx1ZVxuXG4gICAgICAgICAgICBpZiAoX19ERVZfXyAmJiBpc1NweUVuYWJsZWQoKSkge1xuICAgICAgICAgICAgICAgIHNweVJlcG9ydCh7XG4gICAgICAgICAgICAgICAgICAgIG9ic2VydmFibGVLaW5kOiBcImNvbXB1dGVkXCIsXG4gICAgICAgICAgICAgICAgICAgIGRlYnVnT2JqZWN0TmFtZTogdGhpcy5uYW1lXyxcbiAgICAgICAgICAgICAgICAgICAgb2JqZWN0OiB0aGlzLnNjb3BlXyxcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJ1cGRhdGVcIixcbiAgICAgICAgICAgICAgICAgICAgb2xkVmFsdWUsXG4gICAgICAgICAgICAgICAgICAgIG5ld1ZhbHVlXG4gICAgICAgICAgICAgICAgfSBhcyBJQ29tcHV0ZWREaWRDaGFuZ2UpXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gY2hhbmdlZFxuICAgIH1cblxuICAgIGNvbXB1dGVWYWx1ZV8odHJhY2s6IGJvb2xlYW4pIHtcbiAgICAgICAgdGhpcy5pc0NvbXB1dGluZ18gPSB0cnVlXG4gICAgICAgIC8vIGRvbid0IGFsbG93IHN0YXRlIGNoYW5nZXMgZHVyaW5nIGNvbXB1dGF0aW9uXG4gICAgICAgIGNvbnN0IHByZXYgPSBhbGxvd1N0YXRlQ2hhbmdlc1N0YXJ0KGZhbHNlKVxuICAgICAgICBsZXQgcmVzOiBUIHwgQ2F1Z2h0RXhjZXB0aW9uXG4gICAgICAgIGlmICh0cmFjaykge1xuICAgICAgICAgICAgcmVzID0gdHJhY2tEZXJpdmVkRnVuY3Rpb24odGhpcywgdGhpcy5kZXJpdmF0aW9uLCB0aGlzLnNjb3BlXylcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmIChnbG9iYWxTdGF0ZS5kaXNhYmxlRXJyb3JCb3VuZGFyaWVzID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgcmVzID0gdGhpcy5kZXJpdmF0aW9uLmNhbGwodGhpcy5zY29wZV8pXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIHJlcyA9IHRoaXMuZGVyaXZhdGlvbi5jYWxsKHRoaXMuc2NvcGVfKVxuICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzID0gbmV3IENhdWdodEV4Y2VwdGlvbihlKVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBhbGxvd1N0YXRlQ2hhbmdlc0VuZChwcmV2KVxuICAgICAgICB0aGlzLmlzQ29tcHV0aW5nXyA9IGZhbHNlXG4gICAgICAgIHJldHVybiByZXNcbiAgICB9XG5cbiAgICBzdXNwZW5kXygpIHtcbiAgICAgICAgaWYgKCF0aGlzLmtlZXBBbGl2ZV8pIHtcbiAgICAgICAgICAgIGNsZWFyT2JzZXJ2aW5nKHRoaXMpXG4gICAgICAgICAgICB0aGlzLnZhbHVlXyA9IHVuZGVmaW5lZCAvLyBkb24ndCBob2xkIG9uIHRvIGNvbXB1dGVkIHZhbHVlIVxuICAgICAgICAgICAgaWYgKF9fREVWX18gJiYgdGhpcy5pc1RyYWNpbmdfICE9PSBUcmFjZU1vZGUuTk9ORSkge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFxuICAgICAgICAgICAgICAgICAgICBgW21vYngudHJhY2VdIENvbXB1dGVkIHZhbHVlICcke3RoaXMubmFtZV99JyB3YXMgc3VzcGVuZGVkIGFuZCBpdCB3aWxsIHJlY29tcHV0ZSBvbiB0aGUgbmV4dCBhY2Nlc3MuYFxuICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIG9ic2VydmVfKGxpc3RlbmVyOiAoY2hhbmdlOiBJQ29tcHV0ZWREaWRDaGFuZ2U8VD4pID0+IHZvaWQsIGZpcmVJbW1lZGlhdGVseT86IGJvb2xlYW4pOiBMYW1iZGEge1xuICAgICAgICBsZXQgZmlyc3RUaW1lID0gdHJ1ZVxuICAgICAgICBsZXQgcHJldlZhbHVlOiBUIHwgdW5kZWZpbmVkID0gdW5kZWZpbmVkXG4gICAgICAgIHJldHVybiBhdXRvcnVuKCgpID0+IHtcbiAgICAgICAgICAgIC8vIFRPRE86IHdoeSBpcyB0aGlzIGluIGEgZGlmZmVyZW50IHBsYWNlIHRoYW4gdGhlIHNweVJlcG9ydCgpIGZ1bmN0aW9uPyBpbiBhbGwgb3RoZXIgb2JzZXJ2YWJsZXMgaXQncyBjYWxsZWQgaW4gdGhlIHNhbWUgcGxhY2VcbiAgICAgICAgICAgIGxldCBuZXdWYWx1ZSA9IHRoaXMuZ2V0KClcbiAgICAgICAgICAgIGlmICghZmlyc3RUaW1lIHx8IGZpcmVJbW1lZGlhdGVseSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHByZXZVID0gdW50cmFja2VkU3RhcnQoKVxuICAgICAgICAgICAgICAgIGxpc3RlbmVyKHtcbiAgICAgICAgICAgICAgICAgICAgb2JzZXJ2YWJsZUtpbmQ6IFwiY29tcHV0ZWRcIixcbiAgICAgICAgICAgICAgICAgICAgZGVidWdPYmplY3ROYW1lOiB0aGlzLm5hbWVfLFxuICAgICAgICAgICAgICAgICAgICB0eXBlOiBVUERBVEUsXG4gICAgICAgICAgICAgICAgICAgIG9iamVjdDogdGhpcyxcbiAgICAgICAgICAgICAgICAgICAgbmV3VmFsdWUsXG4gICAgICAgICAgICAgICAgICAgIG9sZFZhbHVlOiBwcmV2VmFsdWVcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIHVudHJhY2tlZEVuZChwcmV2VSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZpcnN0VGltZSA9IGZhbHNlXG4gICAgICAgICAgICBwcmV2VmFsdWUgPSBuZXdWYWx1ZVxuICAgICAgICB9KVxuICAgIH1cblxuICAgIHdhcm5BYm91dFVudHJhY2tlZFJlYWRfKCkge1xuICAgICAgICBpZiAoIV9fREVWX18pIHtcbiAgICAgICAgICAgIHJldHVyblxuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmlzVHJhY2luZ18gIT09IFRyYWNlTW9kZS5OT05FKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcbiAgICAgICAgICAgICAgICBgW21vYngudHJhY2VdIENvbXB1dGVkIHZhbHVlICcke3RoaXMubmFtZV99JyBpcyBiZWluZyByZWFkIG91dHNpZGUgYSByZWFjdGl2ZSBjb250ZXh0LiBEb2luZyBhIGZ1bGwgcmVjb21wdXRlLmBcbiAgICAgICAgICAgIClcbiAgICAgICAgfVxuICAgICAgICBpZiAoXG4gICAgICAgICAgICB0eXBlb2YgdGhpcy5yZXF1aXJlc1JlYWN0aW9uXyA9PT0gXCJib29sZWFuXCJcbiAgICAgICAgICAgICAgICA/IHRoaXMucmVxdWlyZXNSZWFjdGlvbl9cbiAgICAgICAgICAgICAgICA6IGdsb2JhbFN0YXRlLmNvbXB1dGVkUmVxdWlyZXNSZWFjdGlvblxuICAgICAgICApIHtcbiAgICAgICAgICAgIGNvbnNvbGUud2FybihcbiAgICAgICAgICAgICAgICBgW21vYnhdIENvbXB1dGVkIHZhbHVlICcke3RoaXMubmFtZV99JyBpcyBiZWluZyByZWFkIG91dHNpZGUgYSByZWFjdGl2ZSBjb250ZXh0LiBEb2luZyBhIGZ1bGwgcmVjb21wdXRlLmBcbiAgICAgICAgICAgIClcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHRvU3RyaW5nKCkge1xuICAgICAgICByZXR1cm4gYCR7dGhpcy5uYW1lX31bJHt0aGlzLmRlcml2YXRpb24udG9TdHJpbmcoKX1dYFxuICAgIH1cblxuICAgIHZhbHVlT2YoKTogVCB7XG4gICAgICAgIHJldHVybiB0b1ByaW1pdGl2ZSh0aGlzLmdldCgpKVxuICAgIH1cblxuICAgIFtTeW1ib2wudG9QcmltaXRpdmVdKCkge1xuICAgICAgICByZXR1cm4gdGhpcy52YWx1ZU9mKClcbiAgICB9XG59XG5cbmV4cG9ydCBjb25zdCBpc0NvbXB1dGVkVmFsdWUgPSBjcmVhdGVJbnN0YW5jZW9mUHJlZGljYXRlKFwiQ29tcHV0ZWRWYWx1ZVwiLCBDb21wdXRlZFZhbHVlKVxuIiwiaW1wb3J0IHtcbiAgICBJQXRvbSxcbiAgICBJRGVwVHJlZU5vZGUsXG4gICAgSU9ic2VydmFibGUsXG4gICAgYWRkT2JzZXJ2ZXIsXG4gICAgZ2xvYmFsU3RhdGUsXG4gICAgaXNDb21wdXRlZFZhbHVlLFxuICAgIHJlbW92ZU9ic2VydmVyXG59IGZyb20gXCIuLi9pbnRlcm5hbFwiXG5cbmV4cG9ydCBlbnVtIElEZXJpdmF0aW9uU3RhdGVfIHtcbiAgICAvLyBiZWZvcmUgYmVpbmcgcnVuIG9yIChvdXRzaWRlIGJhdGNoIGFuZCBub3QgYmVpbmcgb2JzZXJ2ZWQpXG4gICAgLy8gYXQgdGhpcyBwb2ludCBkZXJpdmF0aW9uIGlzIG5vdCBob2xkaW5nIGFueSBkYXRhIGFib3V0IGRlcGVuZGVuY3kgdHJlZVxuICAgIE5PVF9UUkFDS0lOR18gPSAtMSxcbiAgICAvLyBubyBzaGFsbG93IGRlcGVuZGVuY3kgY2hhbmdlZCBzaW5jZSBsYXN0IGNvbXB1dGF0aW9uXG4gICAgLy8gd29uJ3QgcmVjYWxjdWxhdGUgZGVyaXZhdGlvblxuICAgIC8vIHRoaXMgaXMgd2hhdCBtYWtlcyBtb2J4IGZhc3RcbiAgICBVUF9UT19EQVRFXyA9IDAsXG4gICAgLy8gc29tZSBkZWVwIGRlcGVuZGVuY3kgY2hhbmdlZCwgYnV0IGRvbid0IGtub3cgaWYgc2hhbGxvdyBkZXBlbmRlbmN5IGNoYW5nZWRcbiAgICAvLyB3aWxsIHJlcXVpcmUgdG8gY2hlY2sgZmlyc3QgaWYgVVBfVE9fREFURSBvciBQT1NTSUJMWV9TVEFMRVxuICAgIC8vIGN1cnJlbnRseSBvbmx5IENvbXB1dGVkVmFsdWUgd2lsbCBwcm9wYWdhdGUgUE9TU0lCTFlfU1RBTEVcbiAgICAvL1xuICAgIC8vIGhhdmluZyB0aGlzIHN0YXRlIGlzIHNlY29uZCBiaWcgb3B0aW1pemF0aW9uOlxuICAgIC8vIGRvbid0IGhhdmUgdG8gcmVjb21wdXRlIG9uIGV2ZXJ5IGRlcGVuZGVuY3kgY2hhbmdlLCBidXQgb25seSB3aGVuIGl0J3MgbmVlZGVkXG4gICAgUE9TU0lCTFlfU1RBTEVfID0gMSxcbiAgICAvLyBBIHNoYWxsb3cgZGVwZW5kZW5jeSBoYXMgY2hhbmdlZCBzaW5jZSBsYXN0IGNvbXB1dGF0aW9uIGFuZCB0aGUgZGVyaXZhdGlvblxuICAgIC8vIHdpbGwgbmVlZCB0byByZWNvbXB1dGUgd2hlbiBpdCdzIG5lZWRlZCBuZXh0LlxuICAgIFNUQUxFXyA9IDJcbn1cblxuZXhwb3J0IGVudW0gVHJhY2VNb2RlIHtcbiAgICBOT05FLFxuICAgIExPRyxcbiAgICBCUkVBS1xufVxuXG4vKipcbiAqIEEgZGVyaXZhdGlvbiBpcyBldmVyeXRoaW5nIHRoYXQgY2FuIGJlIGRlcml2ZWQgZnJvbSB0aGUgc3RhdGUgKGFsbCB0aGUgYXRvbXMpIGluIGEgcHVyZSBtYW5uZXIuXG4gKiBTZWUgaHR0cHM6Ly9tZWRpdW0uY29tL0Btd2VzdHN0cmF0ZS9iZWNvbWluZy1mdWxseS1yZWFjdGl2ZS1hbi1pbi1kZXB0aC1leHBsYW5hdGlvbi1vZi1tb2JzZXJ2YWJsZS01NTk5NTI2MmEyNTQjLnh2Ymg2cWQ3NFxuICovXG5leHBvcnQgaW50ZXJmYWNlIElEZXJpdmF0aW9uIGV4dGVuZHMgSURlcFRyZWVOb2RlIHtcbiAgICBvYnNlcnZpbmdfOiBJT2JzZXJ2YWJsZVtdXG4gICAgbmV3T2JzZXJ2aW5nXzogbnVsbCB8IElPYnNlcnZhYmxlW11cbiAgICBkZXBlbmRlbmNpZXNTdGF0ZV86IElEZXJpdmF0aW9uU3RhdGVfXG4gICAgLyoqXG4gICAgICogSWQgb2YgdGhlIGN1cnJlbnQgcnVuIG9mIGEgZGVyaXZhdGlvbi4gRWFjaCB0aW1lIHRoZSBkZXJpdmF0aW9uIGlzIHRyYWNrZWRcbiAgICAgKiB0aGlzIG51bWJlciBpcyBpbmNyZWFzZWQgYnkgb25lLiBUaGlzIG51bWJlciBpcyBnbG9iYWxseSB1bmlxdWVcbiAgICAgKi9cbiAgICBydW5JZF86IG51bWJlclxuICAgIC8qKlxuICAgICAqIGFtb3VudCBvZiBkZXBlbmRlbmNpZXMgdXNlZCBieSB0aGUgZGVyaXZhdGlvbiBpbiB0aGlzIHJ1biwgd2hpY2ggaGFzIG5vdCBiZWVuIGJvdW5kIHlldC5cbiAgICAgKi9cbiAgICB1bmJvdW5kRGVwc0NvdW50XzogbnVtYmVyXG4gICAgb25CZWNvbWVTdGFsZV8oKTogdm9pZFxuICAgIGlzVHJhY2luZ186IFRyYWNlTW9kZVxuXG4gICAgLyoqXG4gICAgICogIHdhcm4gaWYgdGhlIGRlcml2YXRpb24gaGFzIG5vIGRlcGVuZGVuY2llcyBhZnRlciBjcmVhdGlvbi91cGRhdGVcbiAgICAgKi9cbiAgICByZXF1aXJlc09ic2VydmFibGVfPzogYm9vbGVhblxufVxuXG5leHBvcnQgY2xhc3MgQ2F1Z2h0RXhjZXB0aW9uIHtcbiAgICBjb25zdHJ1Y3RvcihwdWJsaWMgY2F1c2U6IGFueSkge1xuICAgICAgICAvLyBFbXB0eVxuICAgIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzQ2F1Z2h0RXhjZXB0aW9uKGU6IGFueSk6IGUgaXMgQ2F1Z2h0RXhjZXB0aW9uIHtcbiAgICByZXR1cm4gZSBpbnN0YW5jZW9mIENhdWdodEV4Y2VwdGlvblxufVxuXG4vKipcbiAqIEZpbmRzIG91dCB3aGV0aGVyIGFueSBkZXBlbmRlbmN5IG9mIHRoZSBkZXJpdmF0aW9uIGhhcyBhY3R1YWxseSBjaGFuZ2VkLlxuICogSWYgZGVwZW5kZW5jaWVzU3RhdGUgaXMgMSB0aGVuIGl0IHdpbGwgcmVjYWxjdWxhdGUgZGVwZW5kZW5jaWVzLFxuICogaWYgYW55IGRlcGVuZGVuY3kgY2hhbmdlZCBpdCB3aWxsIHByb3BhZ2F0ZSBpdCBieSBjaGFuZ2luZyBkZXBlbmRlbmNpZXNTdGF0ZSB0byAyLlxuICpcbiAqIEJ5IGl0ZXJhdGluZyBvdmVyIHRoZSBkZXBlbmRlbmNpZXMgaW4gdGhlIHNhbWUgb3JkZXIgdGhhdCB0aGV5IHdlcmUgcmVwb3J0ZWQgYW5kXG4gKiBzdG9wcGluZyBvbiB0aGUgZmlyc3QgY2hhbmdlLCBhbGwgdGhlIHJlY2FsY3VsYXRpb25zIGFyZSBvbmx5IGNhbGxlZCBmb3IgQ29tcHV0ZWRWYWx1ZXNcbiAqIHRoYXQgd2lsbCBiZSB0cmFja2VkIGJ5IGRlcml2YXRpb24uIFRoYXQgaXMgYmVjYXVzZSB3ZSBhc3N1bWUgdGhhdCBpZiB0aGUgZmlyc3QgeFxuICogZGVwZW5kZW5jaWVzIG9mIHRoZSBkZXJpdmF0aW9uIGRvZXNuJ3QgY2hhbmdlIHRoZW4gdGhlIGRlcml2YXRpb24gc2hvdWxkIHJ1biB0aGUgc2FtZSB3YXlcbiAqIHVwIHVudGlsIGFjY2Vzc2luZyB4LXRoIGRlcGVuZGVuY3kuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzaG91bGRDb21wdXRlKGRlcml2YXRpb246IElEZXJpdmF0aW9uKTogYm9vbGVhbiB7XG4gICAgc3dpdGNoIChkZXJpdmF0aW9uLmRlcGVuZGVuY2llc1N0YXRlXykge1xuICAgICAgICBjYXNlIElEZXJpdmF0aW9uU3RhdGVfLlVQX1RPX0RBVEVfOlxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICAgIGNhc2UgSURlcml2YXRpb25TdGF0ZV8uTk9UX1RSQUNLSU5HXzpcbiAgICAgICAgY2FzZSBJRGVyaXZhdGlvblN0YXRlXy5TVEFMRV86XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZVxuICAgICAgICBjYXNlIElEZXJpdmF0aW9uU3RhdGVfLlBPU1NJQkxZX1NUQUxFXzoge1xuICAgICAgICAgICAgLy8gc3RhdGUgcHJvcGFnYXRpb24gY2FuIG9jY3VyIG91dHNpZGUgb2YgYWN0aW9uL3JlYWN0aXZlIGNvbnRleHQgIzIxOTVcbiAgICAgICAgICAgIGNvbnN0IHByZXZBbGxvd1N0YXRlUmVhZHMgPSBhbGxvd1N0YXRlUmVhZHNTdGFydCh0cnVlKVxuICAgICAgICAgICAgY29uc3QgcHJldlVudHJhY2tlZCA9IHVudHJhY2tlZFN0YXJ0KCkgLy8gbm8gbmVlZCBmb3IgdGhvc2UgY29tcHV0ZWRzIHRvIGJlIHJlcG9ydGVkLCB0aGV5IHdpbGwgYmUgcGlja2VkIHVwIGluIHRyYWNrRGVyaXZlZEZ1bmN0aW9uLlxuICAgICAgICAgICAgY29uc3Qgb2JzID0gZGVyaXZhdGlvbi5vYnNlcnZpbmdfLFxuICAgICAgICAgICAgICAgIGwgPSBvYnMubGVuZ3RoXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGw7IGkrKykge1xuICAgICAgICAgICAgICAgIGNvbnN0IG9iaiA9IG9ic1tpXVxuICAgICAgICAgICAgICAgIGlmIChpc0NvbXB1dGVkVmFsdWUob2JqKSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZ2xvYmFsU3RhdGUuZGlzYWJsZUVycm9yQm91bmRhcmllcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgb2JqLmdldCgpXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9iai5nZXQoKVxuICAgICAgICAgICAgICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHdlIGFyZSBub3QgaW50ZXJlc3RlZCBpbiB0aGUgdmFsdWUgKm9yKiBleGNlcHRpb24gYXQgdGhpcyBtb21lbnQsIGJ1dCBpZiB0aGVyZSBpcyBvbmUsIG5vdGlmeSBhbGxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1bnRyYWNrZWRFbmQocHJldlVudHJhY2tlZClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbGxvd1N0YXRlUmVhZHNFbmQocHJldkFsbG93U3RhdGVSZWFkcylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIC8vIGlmIENvbXB1dGVkVmFsdWUgYG9iamAgYWN0dWFsbHkgY2hhbmdlZCBpdCB3aWxsIGJlIGNvbXB1dGVkIGFuZCBwcm9wYWdhdGVkIHRvIGl0cyBvYnNlcnZlcnMuXG4gICAgICAgICAgICAgICAgICAgIC8vIGFuZCBgZGVyaXZhdGlvbmAgaXMgYW4gb2JzZXJ2ZXIgb2YgYG9iamBcbiAgICAgICAgICAgICAgICAgICAgLy8gaW52YXJpYW50U2hvdWxkQ29tcHV0ZShkZXJpdmF0aW9uKVxuICAgICAgICAgICAgICAgICAgICBpZiAoKGRlcml2YXRpb24uZGVwZW5kZW5jaWVzU3RhdGVfIGFzIGFueSkgPT09IElEZXJpdmF0aW9uU3RhdGVfLlNUQUxFXykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdW50cmFja2VkRW5kKHByZXZVbnRyYWNrZWQpXG4gICAgICAgICAgICAgICAgICAgICAgICBhbGxvd1N0YXRlUmVhZHNFbmQocHJldkFsbG93U3RhdGVSZWFkcylcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjaGFuZ2VEZXBlbmRlbmNpZXNTdGF0ZVRvMChkZXJpdmF0aW9uKVxuICAgICAgICAgICAgdW50cmFja2VkRW5kKHByZXZVbnRyYWNrZWQpXG4gICAgICAgICAgICBhbGxvd1N0YXRlUmVhZHNFbmQocHJldkFsbG93U3RhdGVSZWFkcylcbiAgICAgICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgICB9XG4gICAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNDb21wdXRpbmdEZXJpdmF0aW9uKCkge1xuICAgIHJldHVybiBnbG9iYWxTdGF0ZS50cmFja2luZ0Rlcml2YXRpb24gIT09IG51bGwgLy8gZmlsdGVyIG91dCBhY3Rpb25zIGluc2lkZSBjb21wdXRhdGlvbnNcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNoZWNrSWZTdGF0ZU1vZGlmaWNhdGlvbnNBcmVBbGxvd2VkKGF0b206IElBdG9tKSB7XG4gICAgaWYgKCFfX0RFVl9fKSB7XG4gICAgICAgIHJldHVyblxuICAgIH1cbiAgICBjb25zdCBoYXNPYnNlcnZlcnMgPSBhdG9tLm9ic2VydmVyc18uc2l6ZSA+IDBcbiAgICAvLyBTaG91bGQgbm90IGJlIHBvc3NpYmxlIHRvIGNoYW5nZSBvYnNlcnZlZCBzdGF0ZSBvdXRzaWRlIHN0cmljdCBtb2RlLCBleGNlcHQgZHVyaW5nIGluaXRpYWxpemF0aW9uLCBzZWUgIzU2M1xuICAgIGlmIChcbiAgICAgICAgIWdsb2JhbFN0YXRlLmFsbG93U3RhdGVDaGFuZ2VzICYmXG4gICAgICAgIChoYXNPYnNlcnZlcnMgfHwgZ2xvYmFsU3RhdGUuZW5mb3JjZUFjdGlvbnMgPT09IFwiYWx3YXlzXCIpXG4gICAgKSB7XG4gICAgICAgIGNvbnNvbGUud2FybihcbiAgICAgICAgICAgIFwiW01vYlhdIFwiICtcbiAgICAgICAgICAgICAgICAoZ2xvYmFsU3RhdGUuZW5mb3JjZUFjdGlvbnNcbiAgICAgICAgICAgICAgICAgICAgPyBcIlNpbmNlIHN0cmljdC1tb2RlIGlzIGVuYWJsZWQsIGNoYW5naW5nIChvYnNlcnZlZCkgb2JzZXJ2YWJsZSB2YWx1ZXMgd2l0aG91dCB1c2luZyBhbiBhY3Rpb24gaXMgbm90IGFsbG93ZWQuIFRyaWVkIHRvIG1vZGlmeTogXCJcbiAgICAgICAgICAgICAgICAgICAgOiBcIlNpZGUgZWZmZWN0cyBsaWtlIGNoYW5naW5nIHN0YXRlIGFyZSBub3QgYWxsb3dlZCBhdCB0aGlzIHBvaW50LiBBcmUgeW91IHRyeWluZyB0byBtb2RpZnkgc3RhdGUgZnJvbSwgZm9yIGV4YW1wbGUsIGEgY29tcHV0ZWQgdmFsdWUgb3IgdGhlIHJlbmRlciBmdW5jdGlvbiBvZiBhIFJlYWN0IGNvbXBvbmVudD8gWW91IGNhbiB3cmFwIHNpZGUgZWZmZWN0cyBpbiAncnVuSW5BY3Rpb24nIChvciBkZWNvcmF0ZSBmdW5jdGlvbnMgd2l0aCAnYWN0aW9uJykgaWYgbmVlZGVkLiBUcmllZCB0byBtb2RpZnk6IFwiKSArXG4gICAgICAgICAgICAgICAgYXRvbS5uYW1lX1xuICAgICAgICApXG4gICAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gY2hlY2tJZlN0YXRlUmVhZHNBcmVBbGxvd2VkKG9ic2VydmFibGU6IElPYnNlcnZhYmxlKSB7XG4gICAgaWYgKF9fREVWX18gJiYgIWdsb2JhbFN0YXRlLmFsbG93U3RhdGVSZWFkcyAmJiBnbG9iYWxTdGF0ZS5vYnNlcnZhYmxlUmVxdWlyZXNSZWFjdGlvbikge1xuICAgICAgICBjb25zb2xlLndhcm4oXG4gICAgICAgICAgICBgW21vYnhdIE9ic2VydmFibGUgJyR7b2JzZXJ2YWJsZS5uYW1lX30nIGJlaW5nIHJlYWQgb3V0c2lkZSBhIHJlYWN0aXZlIGNvbnRleHQuYFxuICAgICAgICApXG4gICAgfVxufVxuXG4vKipcbiAqIEV4ZWN1dGVzIHRoZSBwcm92aWRlZCBmdW5jdGlvbiBgZmAgYW5kIHRyYWNrcyB3aGljaCBvYnNlcnZhYmxlcyBhcmUgYmVpbmcgYWNjZXNzZWQuXG4gKiBUaGUgdHJhY2tpbmcgaW5mb3JtYXRpb24gaXMgc3RvcmVkIG9uIHRoZSBgZGVyaXZhdGlvbmAgb2JqZWN0IGFuZCB0aGUgZGVyaXZhdGlvbiBpcyByZWdpc3RlcmVkXG4gKiBhcyBvYnNlcnZlciBvZiBhbnkgb2YgdGhlIGFjY2Vzc2VkIG9ic2VydmFibGVzLlxuICovXG5leHBvcnQgZnVuY3Rpb24gdHJhY2tEZXJpdmVkRnVuY3Rpb248VD4oZGVyaXZhdGlvbjogSURlcml2YXRpb24sIGY6ICgpID0+IFQsIGNvbnRleHQ6IGFueSkge1xuICAgIGNvbnN0IHByZXZBbGxvd1N0YXRlUmVhZHMgPSBhbGxvd1N0YXRlUmVhZHNTdGFydCh0cnVlKVxuICAgIGNoYW5nZURlcGVuZGVuY2llc1N0YXRlVG8wKGRlcml2YXRpb24pXG4gICAgLy8gUHJlYWxsb2NhdGUgYXJyYXk7IHdpbGwgYmUgdHJpbW1lZCBieSBiaW5kRGVwZW5kZW5jaWVzLlxuICAgIGRlcml2YXRpb24ubmV3T2JzZXJ2aW5nXyA9IG5ldyBBcnJheShcbiAgICAgICAgLy8gUmVzZXJ2ZSBjb25zdGFudCBzcGFjZSBmb3IgaW5pdGlhbCBkZXBlbmRlbmNpZXMsIGR5bmFtaWMgc3BhY2Ugb3RoZXJ3aXNlLlxuICAgICAgICAvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL21vYnhqcy9tb2J4L3B1bGwvMzgzM1xuICAgICAgICBkZXJpdmF0aW9uLnJ1bklkXyA9PT0gMCA/IDEwMCA6IGRlcml2YXRpb24ub2JzZXJ2aW5nXy5sZW5ndGhcbiAgICApXG4gICAgZGVyaXZhdGlvbi51bmJvdW5kRGVwc0NvdW50XyA9IDBcbiAgICBkZXJpdmF0aW9uLnJ1bklkXyA9ICsrZ2xvYmFsU3RhdGUucnVuSWRcbiAgICBjb25zdCBwcmV2VHJhY2tpbmcgPSBnbG9iYWxTdGF0ZS50cmFja2luZ0Rlcml2YXRpb25cbiAgICBnbG9iYWxTdGF0ZS50cmFja2luZ0Rlcml2YXRpb24gPSBkZXJpdmF0aW9uXG4gICAgZ2xvYmFsU3RhdGUuaW5CYXRjaCsrXG4gICAgbGV0IHJlc3VsdFxuICAgIGlmIChnbG9iYWxTdGF0ZS5kaXNhYmxlRXJyb3JCb3VuZGFyaWVzID09PSB0cnVlKSB7XG4gICAgICAgIHJlc3VsdCA9IGYuY2FsbChjb250ZXh0KVxuICAgIH0gZWxzZSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICByZXN1bHQgPSBmLmNhbGwoY29udGV4dClcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgcmVzdWx0ID0gbmV3IENhdWdodEV4Y2VwdGlvbihlKVxuICAgICAgICB9XG4gICAgfVxuICAgIGdsb2JhbFN0YXRlLmluQmF0Y2gtLVxuICAgIGdsb2JhbFN0YXRlLnRyYWNraW5nRGVyaXZhdGlvbiA9IHByZXZUcmFja2luZ1xuICAgIGJpbmREZXBlbmRlbmNpZXMoZGVyaXZhdGlvbilcblxuICAgIHdhcm5BYm91dERlcml2YXRpb25XaXRob3V0RGVwZW5kZW5jaWVzKGRlcml2YXRpb24pXG4gICAgYWxsb3dTdGF0ZVJlYWRzRW5kKHByZXZBbGxvd1N0YXRlUmVhZHMpXG4gICAgcmV0dXJuIHJlc3VsdFxufVxuXG5mdW5jdGlvbiB3YXJuQWJvdXREZXJpdmF0aW9uV2l0aG91dERlcGVuZGVuY2llcyhkZXJpdmF0aW9uOiBJRGVyaXZhdGlvbikge1xuICAgIGlmICghX19ERVZfXykge1xuICAgICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBpZiAoZGVyaXZhdGlvbi5vYnNlcnZpbmdfLmxlbmd0aCAhPT0gMCkge1xuICAgICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBpZiAoXG4gICAgICAgIHR5cGVvZiBkZXJpdmF0aW9uLnJlcXVpcmVzT2JzZXJ2YWJsZV8gPT09IFwiYm9vbGVhblwiXG4gICAgICAgICAgICA/IGRlcml2YXRpb24ucmVxdWlyZXNPYnNlcnZhYmxlX1xuICAgICAgICAgICAgOiBnbG9iYWxTdGF0ZS5yZWFjdGlvblJlcXVpcmVzT2JzZXJ2YWJsZVxuICAgICkge1xuICAgICAgICBjb25zb2xlLndhcm4oXG4gICAgICAgICAgICBgW21vYnhdIERlcml2YXRpb24gJyR7ZGVyaXZhdGlvbi5uYW1lX30nIGlzIGNyZWF0ZWQvdXBkYXRlZCB3aXRob3V0IHJlYWRpbmcgYW55IG9ic2VydmFibGUgdmFsdWUuYFxuICAgICAgICApXG4gICAgfVxufVxuXG4vKipcbiAqIGRpZmZzIG5ld09ic2VydmluZyB3aXRoIG9ic2VydmluZy5cbiAqIHVwZGF0ZSBvYnNlcnZpbmcgdG8gYmUgbmV3T2JzZXJ2aW5nIHdpdGggdW5pcXVlIG9ic2VydmFibGVzXG4gKiBub3RpZnkgb2JzZXJ2ZXJzIHRoYXQgYmVjb21lIG9ic2VydmVkL3Vub2JzZXJ2ZWRcbiAqL1xuZnVuY3Rpb24gYmluZERlcGVuZGVuY2llcyhkZXJpdmF0aW9uOiBJRGVyaXZhdGlvbikge1xuICAgIC8vIGludmFyaWFudChkZXJpdmF0aW9uLmRlcGVuZGVuY2llc1N0YXRlICE9PSBJRGVyaXZhdGlvblN0YXRlLk5PVF9UUkFDS0lORywgXCJJTlRFUk5BTCBFUlJPUiBiaW5kRGVwZW5kZW5jaWVzIGV4cGVjdHMgZGVyaXZhdGlvbi5kZXBlbmRlbmNpZXNTdGF0ZSAhPT0gLTFcIik7XG4gICAgY29uc3QgcHJldk9ic2VydmluZyA9IGRlcml2YXRpb24ub2JzZXJ2aW5nX1xuICAgIGNvbnN0IG9ic2VydmluZyA9IChkZXJpdmF0aW9uLm9ic2VydmluZ18gPSBkZXJpdmF0aW9uLm5ld09ic2VydmluZ18hKVxuICAgIGxldCBsb3dlc3ROZXdPYnNlcnZpbmdEZXJpdmF0aW9uU3RhdGUgPSBJRGVyaXZhdGlvblN0YXRlXy5VUF9UT19EQVRFX1xuXG4gICAgLy8gR28gdGhyb3VnaCBhbGwgbmV3IG9ic2VydmFibGVzIGFuZCBjaGVjayBkaWZmVmFsdWU6ICh0aGlzIGxpc3QgY2FuIGNvbnRhaW4gZHVwbGljYXRlcyk6XG4gICAgLy8gICAwOiBmaXJzdCBvY2N1cnJlbmNlLCBjaGFuZ2UgdG8gMSBhbmQga2VlcCBpdFxuICAgIC8vICAgMTogZXh0cmEgb2NjdXJyZW5jZSwgZHJvcCBpdFxuICAgIGxldCBpMCA9IDAsXG4gICAgICAgIGwgPSBkZXJpdmF0aW9uLnVuYm91bmREZXBzQ291bnRfXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgY29uc3QgZGVwID0gb2JzZXJ2aW5nW2ldXG4gICAgICAgIGlmIChkZXAuZGlmZlZhbHVlXyA9PT0gMCkge1xuICAgICAgICAgICAgZGVwLmRpZmZWYWx1ZV8gPSAxXG4gICAgICAgICAgICBpZiAoaTAgIT09IGkpIHtcbiAgICAgICAgICAgICAgICBvYnNlcnZpbmdbaTBdID0gZGVwXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpMCsrXG4gICAgICAgIH1cblxuICAgICAgICAvLyBVcGNhc3QgaXMgJ3NhZmUnIGhlcmUsIGJlY2F1c2UgaWYgZGVwIGlzIElPYnNlcnZhYmxlLCBgZGVwZW5kZW5jaWVzU3RhdGVgIHdpbGwgYmUgdW5kZWZpbmVkLFxuICAgICAgICAvLyBub3QgaGl0dGluZyB0aGUgY29uZGl0aW9uXG4gICAgICAgIGlmICgoZGVwIGFzIGFueSBhcyBJRGVyaXZhdGlvbikuZGVwZW5kZW5jaWVzU3RhdGVfID4gbG93ZXN0TmV3T2JzZXJ2aW5nRGVyaXZhdGlvblN0YXRlKSB7XG4gICAgICAgICAgICBsb3dlc3ROZXdPYnNlcnZpbmdEZXJpdmF0aW9uU3RhdGUgPSAoZGVwIGFzIGFueSBhcyBJRGVyaXZhdGlvbikuZGVwZW5kZW5jaWVzU3RhdGVfXG4gICAgICAgIH1cbiAgICB9XG4gICAgb2JzZXJ2aW5nLmxlbmd0aCA9IGkwXG5cbiAgICBkZXJpdmF0aW9uLm5ld09ic2VydmluZ18gPSBudWxsIC8vIG5ld09ic2VydmluZyBzaG91bGRuJ3QgYmUgbmVlZGVkIG91dHNpZGUgdHJhY2tpbmcgKHN0YXRlbWVudCBtb3ZlZCBkb3duIHRvIHdvcmsgYXJvdW5kIEZGIGJ1Zywgc2VlICM2MTQpXG5cbiAgICAvLyBHbyB0aHJvdWdoIGFsbCBvbGQgb2JzZXJ2YWJsZXMgYW5kIGNoZWNrIGRpZmZWYWx1ZTogKGl0IGlzIHVuaXF1ZSBhZnRlciBsYXN0IGJpbmREZXBlbmRlbmNpZXMpXG4gICAgLy8gICAwOiBpdCdzIG5vdCBpbiBuZXcgb2JzZXJ2YWJsZXMsIHVub2JzZXJ2ZSBpdFxuICAgIC8vICAgMTogaXQga2VlcHMgYmVpbmcgb2JzZXJ2ZWQsIGRvbid0IHdhbnQgdG8gbm90aWZ5IGl0LiBjaGFuZ2UgdG8gMFxuICAgIGwgPSBwcmV2T2JzZXJ2aW5nLmxlbmd0aFxuICAgIHdoaWxlIChsLS0pIHtcbiAgICAgICAgY29uc3QgZGVwID0gcHJldk9ic2VydmluZ1tsXVxuICAgICAgICBpZiAoZGVwLmRpZmZWYWx1ZV8gPT09IDApIHtcbiAgICAgICAgICAgIHJlbW92ZU9ic2VydmVyKGRlcCwgZGVyaXZhdGlvbilcbiAgICAgICAgfVxuICAgICAgICBkZXAuZGlmZlZhbHVlXyA9IDBcbiAgICB9XG5cbiAgICAvLyBHbyB0aHJvdWdoIGFsbCBuZXcgb2JzZXJ2YWJsZXMgYW5kIGNoZWNrIGRpZmZWYWx1ZTogKG5vdyBpdCBzaG91bGQgYmUgdW5pcXVlKVxuICAgIC8vICAgMDogaXQgd2FzIHNldCB0byAwIGluIGxhc3QgbG9vcC4gZG9uJ3QgbmVlZCB0byBkbyBhbnl0aGluZy5cbiAgICAvLyAgIDE6IGl0IHdhc24ndCBvYnNlcnZlZCwgbGV0J3Mgb2JzZXJ2ZSBpdC4gc2V0IGJhY2sgdG8gMFxuICAgIHdoaWxlIChpMC0tKSB7XG4gICAgICAgIGNvbnN0IGRlcCA9IG9ic2VydmluZ1tpMF1cbiAgICAgICAgaWYgKGRlcC5kaWZmVmFsdWVfID09PSAxKSB7XG4gICAgICAgICAgICBkZXAuZGlmZlZhbHVlXyA9IDBcbiAgICAgICAgICAgIGFkZE9ic2VydmVyKGRlcCwgZGVyaXZhdGlvbilcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIFNvbWUgbmV3IG9ic2VydmVkIGRlcml2YXRpb25zIG1heSBiZWNvbWUgc3RhbGUgZHVyaW5nIHRoaXMgZGVyaXZhdGlvbiBjb21wdXRhdGlvblxuICAgIC8vIHNvIHRoZXkgaGF2ZSBoYWQgbm8gY2hhbmNlIHRvIHByb3BhZ2F0ZSBzdGFsZW5lc3MgKCM5MTYpXG4gICAgaWYgKGxvd2VzdE5ld09ic2VydmluZ0Rlcml2YXRpb25TdGF0ZSAhPT0gSURlcml2YXRpb25TdGF0ZV8uVVBfVE9fREFURV8pIHtcbiAgICAgICAgZGVyaXZhdGlvbi5kZXBlbmRlbmNpZXNTdGF0ZV8gPSBsb3dlc3ROZXdPYnNlcnZpbmdEZXJpdmF0aW9uU3RhdGVcbiAgICAgICAgZGVyaXZhdGlvbi5vbkJlY29tZVN0YWxlXygpXG4gICAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gY2xlYXJPYnNlcnZpbmcoZGVyaXZhdGlvbjogSURlcml2YXRpb24pIHtcbiAgICAvLyBpbnZhcmlhbnQoZ2xvYmFsU3RhdGUuaW5CYXRjaCA+IDAsIFwiSU5URVJOQUwgRVJST1IgY2xlYXJPYnNlcnZpbmcgc2hvdWxkIGJlIGNhbGxlZCBvbmx5IGluc2lkZSBiYXRjaFwiKTtcbiAgICBjb25zdCBvYnMgPSBkZXJpdmF0aW9uLm9ic2VydmluZ19cbiAgICBkZXJpdmF0aW9uLm9ic2VydmluZ18gPSBbXVxuICAgIGxldCBpID0gb2JzLmxlbmd0aFxuICAgIHdoaWxlIChpLS0pIHtcbiAgICAgICAgcmVtb3ZlT2JzZXJ2ZXIob2JzW2ldLCBkZXJpdmF0aW9uKVxuICAgIH1cblxuICAgIGRlcml2YXRpb24uZGVwZW5kZW5jaWVzU3RhdGVfID0gSURlcml2YXRpb25TdGF0ZV8uTk9UX1RSQUNLSU5HX1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdW50cmFja2VkPFQ+KGFjdGlvbjogKCkgPT4gVCk6IFQge1xuICAgIGNvbnN0IHByZXYgPSB1bnRyYWNrZWRTdGFydCgpXG4gICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuIGFjdGlvbigpXG4gICAgfSBmaW5hbGx5IHtcbiAgICAgICAgdW50cmFja2VkRW5kKHByZXYpXG4gICAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gdW50cmFja2VkU3RhcnQoKTogSURlcml2YXRpb24gfCBudWxsIHtcbiAgICBjb25zdCBwcmV2ID0gZ2xvYmFsU3RhdGUudHJhY2tpbmdEZXJpdmF0aW9uXG4gICAgZ2xvYmFsU3RhdGUudHJhY2tpbmdEZXJpdmF0aW9uID0gbnVsbFxuICAgIHJldHVybiBwcmV2XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB1bnRyYWNrZWRFbmQocHJldjogSURlcml2YXRpb24gfCBudWxsKSB7XG4gICAgZ2xvYmFsU3RhdGUudHJhY2tpbmdEZXJpdmF0aW9uID0gcHJldlxufVxuXG5leHBvcnQgZnVuY3Rpb24gYWxsb3dTdGF0ZVJlYWRzU3RhcnQoYWxsb3dTdGF0ZVJlYWRzOiBib29sZWFuKSB7XG4gICAgY29uc3QgcHJldiA9IGdsb2JhbFN0YXRlLmFsbG93U3RhdGVSZWFkc1xuICAgIGdsb2JhbFN0YXRlLmFsbG93U3RhdGVSZWFkcyA9IGFsbG93U3RhdGVSZWFkc1xuICAgIHJldHVybiBwcmV2XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhbGxvd1N0YXRlUmVhZHNFbmQocHJldjogYm9vbGVhbikge1xuICAgIGdsb2JhbFN0YXRlLmFsbG93U3RhdGVSZWFkcyA9IHByZXZcbn1cblxuLyoqXG4gKiBuZWVkZWQgdG8ga2VlcCBgbG93ZXN0T2JzZXJ2ZXJTdGF0ZWAgY29ycmVjdC4gd2hlbiBjaGFuZ2luZyBmcm9tICgyIG9yIDEpIHRvIDBcbiAqXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjaGFuZ2VEZXBlbmRlbmNpZXNTdGF0ZVRvMChkZXJpdmF0aW9uOiBJRGVyaXZhdGlvbikge1xuICAgIGlmIChkZXJpdmF0aW9uLmRlcGVuZGVuY2llc1N0YXRlXyA9PT0gSURlcml2YXRpb25TdGF0ZV8uVVBfVE9fREFURV8pIHtcbiAgICAgICAgcmV0dXJuXG4gICAgfVxuICAgIGRlcml2YXRpb24uZGVwZW5kZW5jaWVzU3RhdGVfID0gSURlcml2YXRpb25TdGF0ZV8uVVBfVE9fREFURV9cblxuICAgIGNvbnN0IG9icyA9IGRlcml2YXRpb24ub2JzZXJ2aW5nX1xuICAgIGxldCBpID0gb2JzLmxlbmd0aFxuICAgIHdoaWxlIChpLS0pIHtcbiAgICAgICAgb2JzW2ldLmxvd2VzdE9ic2VydmVyU3RhdGVfID0gSURlcml2YXRpb25TdGF0ZV8uVVBfVE9fREFURV9cbiAgICB9XG59XG4iLCJpbXBvcnQgeyBJRGVyaXZhdGlvbiwgSU9ic2VydmFibGUsIFJlYWN0aW9uLCBkaWUsIGdldEdsb2JhbCB9IGZyb20gXCIuLi9pbnRlcm5hbFwiXG5pbXBvcnQgeyBDb21wdXRlZFZhbHVlIH0gZnJvbSBcIi4vY29tcHV0ZWR2YWx1ZVwiXG5cbi8qKlxuICogVGhlc2UgdmFsdWVzIHdpbGwgcGVyc2lzdCBpZiBnbG9iYWwgc3RhdGUgaXMgcmVzZXRcbiAqL1xuY29uc3QgcGVyc2lzdGVudEtleXM6IChrZXlvZiBNb2JYR2xvYmFscylbXSA9IFtcbiAgICBcIm1vYnhHdWlkXCIsXG4gICAgXCJzcHlMaXN0ZW5lcnNcIixcbiAgICBcImVuZm9yY2VBY3Rpb25zXCIsXG4gICAgXCJjb21wdXRlZFJlcXVpcmVzUmVhY3Rpb25cIixcbiAgICBcInJlYWN0aW9uUmVxdWlyZXNPYnNlcnZhYmxlXCIsXG4gICAgXCJvYnNlcnZhYmxlUmVxdWlyZXNSZWFjdGlvblwiLFxuICAgIFwiYWxsb3dTdGF0ZVJlYWRzXCIsXG4gICAgXCJkaXNhYmxlRXJyb3JCb3VuZGFyaWVzXCIsXG4gICAgXCJydW5JZFwiLFxuICAgIFwiVU5DSEFOR0VEXCIsXG4gICAgXCJ1c2VQcm94aWVzXCJcbl1cblxuZXhwb3J0IHR5cGUgSVVOQ0hBTkdFRCA9IHt9XG5cbmV4cG9ydCBjbGFzcyBNb2JYR2xvYmFscyB7XG4gICAgLyoqXG4gICAgICogTW9iWEdsb2JhbHMgdmVyc2lvbi5cbiAgICAgKiBNb2JYIGNvbXBhdGlibGl0eSB3aXRoIG90aGVyIHZlcnNpb25zIGxvYWRlZCBpbiBtZW1vcnkgYXMgbG9uZyBhcyB0aGlzIHZlcnNpb24gbWF0Y2hlcy5cbiAgICAgKiBJdCBpbmRpY2F0ZXMgdGhhdCB0aGUgZ2xvYmFsIHN0YXRlIHN0aWxsIHN0b3JlcyBzaW1pbGFyIGluZm9ybWF0aW9uXG4gICAgICpcbiAgICAgKiBOLkI6IHRoaXMgdmVyc2lvbiBpcyB1bnJlbGF0ZWQgdG8gdGhlIHBhY2thZ2UgdmVyc2lvbiBvZiBNb2JYLCBhbmQgaXMgb25seSB0aGUgdmVyc2lvbiBvZiB0aGVcbiAgICAgKiBpbnRlcm5hbCBzdGF0ZSBzdG9yYWdlIG9mIE1vYlgsIGFuZCBjYW4gYmUgdGhlIHNhbWUgYWNyb3NzIG1hbnkgZGlmZmVyZW50IHBhY2thZ2UgdmVyc2lvbnNcbiAgICAgKi9cbiAgICB2ZXJzaW9uID0gNlxuXG4gICAgLyoqXG4gICAgICogZ2xvYmFsbHkgdW5pcXVlIHRva2VuIHRvIHNpZ25hbCB1bmNoYW5nZWRcbiAgICAgKi9cbiAgICBVTkNIQU5HRUQ6IElVTkNIQU5HRUQgPSB7fVxuXG4gICAgLyoqXG4gICAgICogQ3VycmVudGx5IHJ1bm5pbmcgZGVyaXZhdGlvblxuICAgICAqL1xuICAgIHRyYWNraW5nRGVyaXZhdGlvbjogSURlcml2YXRpb24gfCBudWxsID0gbnVsbFxuXG4gICAgLyoqXG4gICAgICogQ3VycmVudGx5IHJ1bm5pbmcgcmVhY3Rpb24uIFRoaXMgZGV0ZXJtaW5lcyBpZiB3ZSBjdXJyZW50bHkgaGF2ZSBhIHJlYWN0aXZlIGNvbnRleHQuXG4gICAgICogKFRyYWNraW5nIGRlcml2YXRpb24gaXMgYWxzbyBzZXQgZm9yIHRlbXBvcmFsIHRyYWNraW5nIG9mIGNvbXB1dGVkIHZhbHVlcyBpbnNpZGUgYWN0aW9ucyxcbiAgICAgKiBidXQgdHJhY2tpbmdSZWFjdGlvbiBjYW4gb25seSBiZSBzZXQgYnkgYSBmb3JtIG9mIFJlYWN0aW9uKVxuICAgICAqL1xuICAgIHRyYWNraW5nQ29udGV4dDogUmVhY3Rpb24gfCBDb21wdXRlZFZhbHVlPGFueT4gfCBudWxsID0gbnVsbFxuXG4gICAgLyoqXG4gICAgICogRWFjaCB0aW1lIGEgZGVyaXZhdGlvbiBpcyB0cmFja2VkLCBpdCBpcyBhc3NpZ25lZCBhIHVuaXF1ZSBydW4taWRcbiAgICAgKi9cbiAgICBydW5JZCA9IDBcblxuICAgIC8qKlxuICAgICAqICdndWlkJyBmb3IgZ2VuZXJhbCBwdXJwb3NlLiBXaWxsIGJlIHBlcnNpc3RlZCBhbW9uZ3N0IHJlc2V0cy5cbiAgICAgKi9cbiAgICBtb2J4R3VpZCA9IDBcblxuICAgIC8qKlxuICAgICAqIEFyZSB3ZSBpbiBhIGJhdGNoIGJsb2NrPyAoYW5kIGhvdyBtYW55IG9mIHRoZW0pXG4gICAgICovXG4gICAgaW5CYXRjaDogbnVtYmVyID0gMFxuXG4gICAgLyoqXG4gICAgICogT2JzZXJ2YWJsZXMgdGhhdCBkb24ndCBoYXZlIG9ic2VydmVycyBhbnltb3JlLCBhbmQgYXJlIGFib3V0IHRvIGJlXG4gICAgICogc3VzcGVuZGVkLCB1bmxlc3Mgc29tZWJvZHkgZWxzZSBhY2Nlc3NlcyBpdCBpbiB0aGUgc2FtZSBiYXRjaFxuICAgICAqXG4gICAgICogQHR5cGUge0lPYnNlcnZhYmxlW119XG4gICAgICovXG4gICAgcGVuZGluZ1Vub2JzZXJ2YXRpb25zOiBJT2JzZXJ2YWJsZVtdID0gW11cblxuICAgIC8qKlxuICAgICAqIExpc3Qgb2Ygc2NoZWR1bGVkLCBub3QgeWV0IGV4ZWN1dGVkLCByZWFjdGlvbnMuXG4gICAgICovXG4gICAgcGVuZGluZ1JlYWN0aW9uczogUmVhY3Rpb25bXSA9IFtdXG5cbiAgICAvKipcbiAgICAgKiBBcmUgd2UgY3VycmVudGx5IHByb2Nlc3NpbmcgcmVhY3Rpb25zP1xuICAgICAqL1xuICAgIGlzUnVubmluZ1JlYWN0aW9ucyA9IGZhbHNlXG5cbiAgICAvKipcbiAgICAgKiBJcyBpdCBhbGxvd2VkIHRvIGNoYW5nZSBvYnNlcnZhYmxlcyBhdCB0aGlzIHBvaW50P1xuICAgICAqIEluIGdlbmVyYWwsIE1vYlggZG9lc24ndCBhbGxvdyB0aGF0IHdoZW4gcnVubmluZyBjb21wdXRhdGlvbnMgYW5kIFJlYWN0LnJlbmRlci5cbiAgICAgKiBUbyBlbnN1cmUgdGhhdCB0aG9zZSBmdW5jdGlvbnMgc3RheSBwdXJlLlxuICAgICAqL1xuICAgIGFsbG93U3RhdGVDaGFuZ2VzID0gZmFsc2VcblxuICAgIC8qKlxuICAgICAqIElzIGl0IGFsbG93ZWQgdG8gcmVhZCBvYnNlcnZhYmxlcyBhdCB0aGlzIHBvaW50P1xuICAgICAqIFVzZWQgdG8gaG9sZCB0aGUgc3RhdGUgbmVlZGVkIGZvciBgb2JzZXJ2YWJsZVJlcXVpcmVzUmVhY3Rpb25gXG4gICAgICovXG4gICAgYWxsb3dTdGF0ZVJlYWRzID0gdHJ1ZVxuXG4gICAgLyoqXG4gICAgICogSWYgc3RyaWN0IG1vZGUgaXMgZW5hYmxlZCwgc3RhdGUgY2hhbmdlcyBhcmUgYnkgZGVmYXVsdCBub3QgYWxsb3dlZFxuICAgICAqL1xuICAgIGVuZm9yY2VBY3Rpb25zOiBib29sZWFuIHwgXCJhbHdheXNcIiA9IHRydWVcblxuICAgIC8qKlxuICAgICAqIFNweSBjYWxsYmFja3NcbiAgICAgKi9cbiAgICBzcHlMaXN0ZW5lcnM6IHsgKGNoYW5nZTogYW55KTogdm9pZCB9W10gPSBbXVxuXG4gICAgLyoqXG4gICAgICogR2xvYmFsbHkgYXR0YWNoZWQgZXJyb3IgaGFuZGxlcnMgdGhhdCByZWFjdCBzcGVjaWZpY2FsbHkgdG8gZXJyb3JzIGluIHJlYWN0aW9uc1xuICAgICAqL1xuICAgIGdsb2JhbFJlYWN0aW9uRXJyb3JIYW5kbGVyczogKChlcnJvcjogYW55LCBkZXJpdmF0aW9uOiBJRGVyaXZhdGlvbikgPT4gdm9pZClbXSA9IFtdXG5cbiAgICAvKipcbiAgICAgKiBXYXJuIGlmIGNvbXB1dGVkIHZhbHVlcyBhcmUgYWNjZXNzZWQgb3V0c2lkZSBhIHJlYWN0aXZlIGNvbnRleHRcbiAgICAgKi9cbiAgICBjb21wdXRlZFJlcXVpcmVzUmVhY3Rpb24gPSBmYWxzZVxuXG4gICAgLyoqXG4gICAgICogKEV4cGVyaW1lbnRhbClcbiAgICAgKiBXYXJuIGlmIHlvdSB0cnkgdG8gY3JlYXRlIHRvIGRlcml2YXRpb24gLyByZWFjdGl2ZSBjb250ZXh0IHdpdGhvdXQgYWNjZXNzaW5nIGFueSBvYnNlcnZhYmxlLlxuICAgICAqL1xuICAgIHJlYWN0aW9uUmVxdWlyZXNPYnNlcnZhYmxlID0gZmFsc2VcblxuICAgIC8qKlxuICAgICAqIChFeHBlcmltZW50YWwpXG4gICAgICogV2FybiBpZiBvYnNlcnZhYmxlcyBhcmUgYWNjZXNzZWQgb3V0c2lkZSBhIHJlYWN0aXZlIGNvbnRleHRcbiAgICAgKi9cbiAgICBvYnNlcnZhYmxlUmVxdWlyZXNSZWFjdGlvbiA9IGZhbHNlXG5cbiAgICAvKlxuICAgICAqIERvbid0IGNhdGNoIGFuZCByZXRocm93IGV4Y2VwdGlvbnMuIFRoaXMgaXMgdXNlZnVsIGZvciBpbnNwZWN0aW5nIHRoZSBzdGF0ZSBvZlxuICAgICAqIHRoZSBzdGFjayB3aGVuIGFuIGV4Y2VwdGlvbiBvY2N1cnMgd2hpbGUgZGVidWdnaW5nLlxuICAgICAqL1xuICAgIGRpc2FibGVFcnJvckJvdW5kYXJpZXMgPSBmYWxzZVxuXG4gICAgLypcbiAgICAgKiBJZiB0cnVlLCB3ZSBhcmUgYWxyZWFkeSBoYW5kbGluZyBhbiBleGNlcHRpb24gaW4gYW4gYWN0aW9uLiBBbnkgZXJyb3JzIGluIHJlYWN0aW9ucyBzaG91bGQgYmUgc3VwcHJlc3NlZCwgYXNcbiAgICAgKiB0aGV5IGFyZSBub3QgdGhlIGNhdXNlLCBzZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9tb2J4anMvbW9ieC9pc3N1ZXMvMTgzNlxuICAgICAqL1xuICAgIHN1cHByZXNzUmVhY3Rpb25FcnJvcnMgPSBmYWxzZVxuXG4gICAgdXNlUHJveGllcyA9IHRydWVcbiAgICAvKlxuICAgICAqIHByaW50IHdhcm5pbmdzIGFib3V0IGNvZGUgdGhhdCB3b3VsZCBmYWlsIGlmIHByb3hpZXMgd2VyZW4ndCBhdmFpbGFibGVcbiAgICAgKi9cbiAgICB2ZXJpZnlQcm94aWVzID0gZmFsc2VcblxuICAgIC8qKlxuICAgICAqIEZhbHNlIGZvcmNlcyBhbGwgb2JqZWN0J3MgZGVzY3JpcHRvcnMgdG9cbiAgICAgKiB3cml0YWJsZTogdHJ1ZVxuICAgICAqIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgICAqL1xuICAgIHNhZmVEZXNjcmlwdG9ycyA9IHRydWVcbn1cblxubGV0IGNhbk1lcmdlR2xvYmFsU3RhdGUgPSB0cnVlXG5sZXQgaXNvbGF0ZUNhbGxlZCA9IGZhbHNlXG5cbmV4cG9ydCBsZXQgZ2xvYmFsU3RhdGU6IE1vYlhHbG9iYWxzID0gKGZ1bmN0aW9uICgpIHtcbiAgICBsZXQgZ2xvYmFsID0gZ2V0R2xvYmFsKClcbiAgICBpZiAoZ2xvYmFsLl9fbW9ieEluc3RhbmNlQ291bnQgPiAwICYmICFnbG9iYWwuX19tb2J4R2xvYmFscykge1xuICAgICAgICBjYW5NZXJnZUdsb2JhbFN0YXRlID0gZmFsc2VcbiAgICB9XG4gICAgaWYgKGdsb2JhbC5fX21vYnhHbG9iYWxzICYmIGdsb2JhbC5fX21vYnhHbG9iYWxzLnZlcnNpb24gIT09IG5ldyBNb2JYR2xvYmFscygpLnZlcnNpb24pIHtcbiAgICAgICAgY2FuTWVyZ2VHbG9iYWxTdGF0ZSA9IGZhbHNlXG4gICAgfVxuXG4gICAgaWYgKCFjYW5NZXJnZUdsb2JhbFN0YXRlKSB7XG4gICAgICAgIC8vIEJlY2F1c2UgdGhpcyBpcyBhIElJRkUgd2UgbmVlZCB0byBsZXQgaXNvbGF0ZUNhbGxlZCBhIGNoYW5jZSB0byBjaGFuZ2VcbiAgICAgICAgLy8gc28gd2UgcnVuIGl0IGFmdGVyIHRoZSBldmVudCBsb29wIGNvbXBsZXRlZCBhdCBsZWFzdCAxIGl0ZXJhdGlvblxuICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgIGlmICghaXNvbGF0ZUNhbGxlZCkge1xuICAgICAgICAgICAgICAgIGRpZSgzNSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSwgMSlcbiAgICAgICAgcmV0dXJuIG5ldyBNb2JYR2xvYmFscygpXG4gICAgfSBlbHNlIGlmIChnbG9iYWwuX19tb2J4R2xvYmFscykge1xuICAgICAgICBnbG9iYWwuX19tb2J4SW5zdGFuY2VDb3VudCArPSAxXG4gICAgICAgIGlmICghZ2xvYmFsLl9fbW9ieEdsb2JhbHMuVU5DSEFOR0VEKSB7XG4gICAgICAgICAgICBnbG9iYWwuX19tb2J4R2xvYmFscy5VTkNIQU5HRUQgPSB7fVxuICAgICAgICB9IC8vIG1ha2UgbWVyZ2UgYmFja3dhcmQgY29tcGF0aWJsZVxuICAgICAgICByZXR1cm4gZ2xvYmFsLl9fbW9ieEdsb2JhbHNcbiAgICB9IGVsc2Uge1xuICAgICAgICBnbG9iYWwuX19tb2J4SW5zdGFuY2VDb3VudCA9IDFcbiAgICAgICAgcmV0dXJuIChnbG9iYWwuX19tb2J4R2xvYmFscyA9IG5ldyBNb2JYR2xvYmFscygpKVxuICAgIH1cbn0pKClcblxuZXhwb3J0IGZ1bmN0aW9uIGlzb2xhdGVHbG9iYWxTdGF0ZSgpIHtcbiAgICBpZiAoXG4gICAgICAgIGdsb2JhbFN0YXRlLnBlbmRpbmdSZWFjdGlvbnMubGVuZ3RoIHx8XG4gICAgICAgIGdsb2JhbFN0YXRlLmluQmF0Y2ggfHxcbiAgICAgICAgZ2xvYmFsU3RhdGUuaXNSdW5uaW5nUmVhY3Rpb25zXG4gICAgKSB7XG4gICAgICAgIGRpZSgzNilcbiAgICB9XG4gICAgaXNvbGF0ZUNhbGxlZCA9IHRydWVcbiAgICBpZiAoY2FuTWVyZ2VHbG9iYWxTdGF0ZSkge1xuICAgICAgICBsZXQgZ2xvYmFsID0gZ2V0R2xvYmFsKClcbiAgICAgICAgaWYgKC0tZ2xvYmFsLl9fbW9ieEluc3RhbmNlQ291bnQgPT09IDApIHtcbiAgICAgICAgICAgIGdsb2JhbC5fX21vYnhHbG9iYWxzID0gdW5kZWZpbmVkXG4gICAgICAgIH1cbiAgICAgICAgZ2xvYmFsU3RhdGUgPSBuZXcgTW9iWEdsb2JhbHMoKVxuICAgIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldEdsb2JhbFN0YXRlKCk6IGFueSB7XG4gICAgcmV0dXJuIGdsb2JhbFN0YXRlXG59XG5cbi8qKlxuICogRm9yIHRlc3RpbmcgcHVycG9zZXMgb25seTsgdGhpcyB3aWxsIGJyZWFrIHRoZSBpbnRlcm5hbCBzdGF0ZSBvZiBleGlzdGluZyBvYnNlcnZhYmxlcyxcbiAqIGJ1dCBjYW4gYmUgdXNlZCB0byBnZXQgYmFjayBhdCBhIHN0YWJsZSBzdGF0ZSBhZnRlciB0aHJvd2luZyBlcnJvcnNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJlc2V0R2xvYmFsU3RhdGUoKSB7XG4gICAgY29uc3QgZGVmYXVsdEdsb2JhbHMgPSBuZXcgTW9iWEdsb2JhbHMoKVxuICAgIGZvciAobGV0IGtleSBpbiBkZWZhdWx0R2xvYmFscykge1xuICAgICAgICBpZiAocGVyc2lzdGVudEtleXMuaW5kZXhPZihrZXkgYXMgYW55KSA9PT0gLTEpIHtcbiAgICAgICAgICAgIGdsb2JhbFN0YXRlW2tleV0gPSBkZWZhdWx0R2xvYmFsc1trZXldXG4gICAgICAgIH1cbiAgICB9XG4gICAgZ2xvYmFsU3RhdGUuYWxsb3dTdGF0ZUNoYW5nZXMgPSAhZ2xvYmFsU3RhdGUuZW5mb3JjZUFjdGlvbnNcbn1cbiIsImltcG9ydCB7XG4gICAgTGFtYmRhLFxuICAgIENvbXB1dGVkVmFsdWUsXG4gICAgSURlcGVuZGVuY3lUcmVlLFxuICAgIElEZXJpdmF0aW9uLFxuICAgIElEZXJpdmF0aW9uU3RhdGVfLFxuICAgIFRyYWNlTW9kZSxcbiAgICBnZXREZXBlbmRlbmN5VHJlZSxcbiAgICBnbG9iYWxTdGF0ZSxcbiAgICBydW5SZWFjdGlvbnMsXG4gICAgY2hlY2tJZlN0YXRlUmVhZHNBcmVBbGxvd2VkXG59IGZyb20gXCIuLi9pbnRlcm5hbFwiXG5cbmV4cG9ydCBpbnRlcmZhY2UgSURlcFRyZWVOb2RlIHtcbiAgICBuYW1lXzogc3RyaW5nXG4gICAgb2JzZXJ2aW5nXz86IElPYnNlcnZhYmxlW11cbn1cblxuZXhwb3J0IGludGVyZmFjZSBJT2JzZXJ2YWJsZSBleHRlbmRzIElEZXBUcmVlTm9kZSB7XG4gICAgZGlmZlZhbHVlXzogbnVtYmVyXG4gICAgLyoqXG4gICAgICogSWQgb2YgdGhlIGRlcml2YXRpb24gKnJ1biogdGhhdCBsYXN0IGFjY2Vzc2VkIHRoaXMgb2JzZXJ2YWJsZS5cbiAgICAgKiBJZiB0aGlzIGlkIGVxdWFscyB0aGUgKnJ1biogaWQgb2YgdGhlIGN1cnJlbnQgZGVyaXZhdGlvbixcbiAgICAgKiB0aGUgZGVwZW5kZW5jeSBpcyBhbHJlYWR5IGVzdGFibGlzaGVkXG4gICAgICovXG4gICAgbGFzdEFjY2Vzc2VkQnlfOiBudW1iZXJcbiAgICBpc0JlaW5nT2JzZXJ2ZWRfOiBib29sZWFuXG5cbiAgICBsb3dlc3RPYnNlcnZlclN0YXRlXzogSURlcml2YXRpb25TdGF0ZV8gLy8gVXNlZCB0byBhdm9pZCByZWR1bmRhbnQgcHJvcGFnYXRpb25zXG4gICAgaXNQZW5kaW5nVW5vYnNlcnZhdGlvbl86IGJvb2xlYW4gLy8gVXNlZCB0byBwdXNoIGl0c2VsZiB0byBnbG9iYWwucGVuZGluZ1Vub2JzZXJ2YXRpb25zIGF0IG1vc3Qgb25jZSBwZXIgYmF0Y2guXG5cbiAgICBvYnNlcnZlcnNfOiBTZXQ8SURlcml2YXRpb24+XG5cbiAgICBvbkJVTygpOiB2b2lkXG4gICAgb25CTygpOiB2b2lkXG5cbiAgICBvbkJVT0w6IFNldDxMYW1iZGE+IHwgdW5kZWZpbmVkXG4gICAgb25CT0w6IFNldDxMYW1iZGE+IHwgdW5kZWZpbmVkXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBoYXNPYnNlcnZlcnMob2JzZXJ2YWJsZTogSU9ic2VydmFibGUpOiBib29sZWFuIHtcbiAgICByZXR1cm4gb2JzZXJ2YWJsZS5vYnNlcnZlcnNfICYmIG9ic2VydmFibGUub2JzZXJ2ZXJzXy5zaXplID4gMFxufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0T2JzZXJ2ZXJzKG9ic2VydmFibGU6IElPYnNlcnZhYmxlKTogU2V0PElEZXJpdmF0aW9uPiB7XG4gICAgcmV0dXJuIG9ic2VydmFibGUub2JzZXJ2ZXJzX1xufVxuXG4vLyBmdW5jdGlvbiBpbnZhcmlhbnRPYnNlcnZlcnMob2JzZXJ2YWJsZTogSU9ic2VydmFibGUpIHtcbi8vICAgICBjb25zdCBsaXN0ID0gb2JzZXJ2YWJsZS5vYnNlcnZlcnNcbi8vICAgICBjb25zdCBtYXAgPSBvYnNlcnZhYmxlLm9ic2VydmVyc0luZGV4ZXNcbi8vICAgICBjb25zdCBsID0gbGlzdC5sZW5ndGhcbi8vICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGw7IGkrKykge1xuLy8gICAgICAgICBjb25zdCBpZCA9IGxpc3RbaV0uX19tYXBpZFxuLy8gICAgICAgICBpZiAoaSkge1xuLy8gICAgICAgICAgICAgaW52YXJpYW50KG1hcFtpZF0gPT09IGksIFwiSU5URVJOQUwgRVJST1IgbWFwcyBkZXJpdmF0aW9uLl9fbWFwaWQgdG8gaW5kZXggaW4gbGlzdFwiKSAvLyBmb3IgcGVyZm9ybWFuY2Vcbi8vICAgICAgICAgfSBlbHNlIHtcbi8vICAgICAgICAgICAgIGludmFyaWFudCghKGlkIGluIG1hcCksIFwiSU5URVJOQUwgRVJST1Igb2JzZXJ2ZXIgb24gaW5kZXggMCBzaG91bGRuJ3QgYmUgaGVsZCBpbiBtYXAuXCIpIC8vIGZvciBwZXJmb3JtYW5jZVxuLy8gICAgICAgICB9XG4vLyAgICAgfVxuLy8gICAgIGludmFyaWFudChcbi8vICAgICAgICAgbGlzdC5sZW5ndGggPT09IDAgfHwgT2JqZWN0LmtleXMobWFwKS5sZW5ndGggPT09IGxpc3QubGVuZ3RoIC0gMSxcbi8vICAgICAgICAgXCJJTlRFUk5BTCBFUlJPUiB0aGVyZSBpcyBubyBqdW5rIGluIG1hcFwiXG4vLyAgICAgKVxuLy8gfVxuZXhwb3J0IGZ1bmN0aW9uIGFkZE9ic2VydmVyKG9ic2VydmFibGU6IElPYnNlcnZhYmxlLCBub2RlOiBJRGVyaXZhdGlvbikge1xuICAgIC8vIGludmFyaWFudChub2RlLmRlcGVuZGVuY2llc1N0YXRlICE9PSAtMSwgXCJJTlRFUk5BTCBFUlJPUiwgY2FuIGFkZCBvbmx5IGRlcGVuZGVuY2llc1N0YXRlICE9PSAtMVwiKTtcbiAgICAvLyBpbnZhcmlhbnQob2JzZXJ2YWJsZS5fb2JzZXJ2ZXJzLmluZGV4T2Yobm9kZSkgPT09IC0xLCBcIklOVEVSTkFMIEVSUk9SIGFkZCBhbHJlYWR5IGFkZGVkIG5vZGVcIik7XG4gICAgLy8gaW52YXJpYW50T2JzZXJ2ZXJzKG9ic2VydmFibGUpO1xuXG4gICAgb2JzZXJ2YWJsZS5vYnNlcnZlcnNfLmFkZChub2RlKVxuICAgIGlmIChvYnNlcnZhYmxlLmxvd2VzdE9ic2VydmVyU3RhdGVfID4gbm9kZS5kZXBlbmRlbmNpZXNTdGF0ZV8pIHtcbiAgICAgICAgb2JzZXJ2YWJsZS5sb3dlc3RPYnNlcnZlclN0YXRlXyA9IG5vZGUuZGVwZW5kZW5jaWVzU3RhdGVfXG4gICAgfVxuXG4gICAgLy8gaW52YXJpYW50T2JzZXJ2ZXJzKG9ic2VydmFibGUpO1xuICAgIC8vIGludmFyaWFudChvYnNlcnZhYmxlLl9vYnNlcnZlcnMuaW5kZXhPZihub2RlKSAhPT0gLTEsIFwiSU5URVJOQUwgRVJST1IgZGlkbid0IGFkZCBub2RlXCIpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcmVtb3ZlT2JzZXJ2ZXIob2JzZXJ2YWJsZTogSU9ic2VydmFibGUsIG5vZGU6IElEZXJpdmF0aW9uKSB7XG4gICAgLy8gaW52YXJpYW50KGdsb2JhbFN0YXRlLmluQmF0Y2ggPiAwLCBcIklOVEVSTkFMIEVSUk9SLCByZW1vdmUgc2hvdWxkIGJlIGNhbGxlZCBvbmx5IGluc2lkZSBiYXRjaFwiKTtcbiAgICAvLyBpbnZhcmlhbnQob2JzZXJ2YWJsZS5fb2JzZXJ2ZXJzLmluZGV4T2Yobm9kZSkgIT09IC0xLCBcIklOVEVSTkFMIEVSUk9SIHJlbW92ZSBhbHJlYWR5IHJlbW92ZWQgbm9kZVwiKTtcbiAgICAvLyBpbnZhcmlhbnRPYnNlcnZlcnMob2JzZXJ2YWJsZSk7XG4gICAgb2JzZXJ2YWJsZS5vYnNlcnZlcnNfLmRlbGV0ZShub2RlKVxuICAgIGlmIChvYnNlcnZhYmxlLm9ic2VydmVyc18uc2l6ZSA9PT0gMCkge1xuICAgICAgICAvLyBkZWxldGluZyBsYXN0IG9ic2VydmVyXG4gICAgICAgIHF1ZXVlRm9yVW5vYnNlcnZhdGlvbihvYnNlcnZhYmxlKVxuICAgIH1cbiAgICAvLyBpbnZhcmlhbnRPYnNlcnZlcnMob2JzZXJ2YWJsZSk7XG4gICAgLy8gaW52YXJpYW50KG9ic2VydmFibGUuX29ic2VydmVycy5pbmRleE9mKG5vZGUpID09PSAtMSwgXCJJTlRFUk5BTCBFUlJPUiByZW1vdmUgYWxyZWFkeSByZW1vdmVkIG5vZGUyXCIpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcXVldWVGb3JVbm9ic2VydmF0aW9uKG9ic2VydmFibGU6IElPYnNlcnZhYmxlKSB7XG4gICAgaWYgKG9ic2VydmFibGUuaXNQZW5kaW5nVW5vYnNlcnZhdGlvbl8gPT09IGZhbHNlKSB7XG4gICAgICAgIC8vIGludmFyaWFudChvYnNlcnZhYmxlLl9vYnNlcnZlcnMubGVuZ3RoID09PSAwLCBcIklOVEVSTkFMIEVSUk9SLCBzaG91bGQgb25seSBxdWV1ZSBmb3IgdW5vYnNlcnZhdGlvbiB1bm9ic2VydmVkIG9ic2VydmFibGVzXCIpO1xuICAgICAgICBvYnNlcnZhYmxlLmlzUGVuZGluZ1Vub2JzZXJ2YXRpb25fID0gdHJ1ZVxuICAgICAgICBnbG9iYWxTdGF0ZS5wZW5kaW5nVW5vYnNlcnZhdGlvbnMucHVzaChvYnNlcnZhYmxlKVxuICAgIH1cbn1cblxuLyoqXG4gKiBCYXRjaCBzdGFydHMgYSB0cmFuc2FjdGlvbiwgYXQgbGVhc3QgZm9yIHB1cnBvc2VzIG9mIG1lbW9pemluZyBDb21wdXRlZFZhbHVlcyB3aGVuIG5vdGhpbmcgZWxzZSBkb2VzLlxuICogRHVyaW5nIGEgYmF0Y2ggYG9uQmVjb21lVW5vYnNlcnZlZGAgd2lsbCBiZSBjYWxsZWQgYXQgbW9zdCBvbmNlIHBlciBvYnNlcnZhYmxlLlxuICogQXZvaWRzIHVubmVjZXNzYXJ5IHJlY2FsY3VsYXRpb25zLlxuICovXG5leHBvcnQgZnVuY3Rpb24gc3RhcnRCYXRjaCgpIHtcbiAgICBnbG9iYWxTdGF0ZS5pbkJhdGNoKytcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGVuZEJhdGNoKCkge1xuICAgIGlmICgtLWdsb2JhbFN0YXRlLmluQmF0Y2ggPT09IDApIHtcbiAgICAgICAgcnVuUmVhY3Rpb25zKClcbiAgICAgICAgLy8gdGhlIGJhdGNoIGlzIGFjdHVhbGx5IGFib3V0IHRvIGZpbmlzaCwgYWxsIHVub2JzZXJ2aW5nIHNob3VsZCBoYXBwZW4gaGVyZS5cbiAgICAgICAgY29uc3QgbGlzdCA9IGdsb2JhbFN0YXRlLnBlbmRpbmdVbm9ic2VydmF0aW9uc1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGNvbnN0IG9ic2VydmFibGUgPSBsaXN0W2ldXG4gICAgICAgICAgICBvYnNlcnZhYmxlLmlzUGVuZGluZ1Vub2JzZXJ2YXRpb25fID0gZmFsc2VcbiAgICAgICAgICAgIGlmIChvYnNlcnZhYmxlLm9ic2VydmVyc18uc2l6ZSA9PT0gMCkge1xuICAgICAgICAgICAgICAgIGlmIChvYnNlcnZhYmxlLmlzQmVpbmdPYnNlcnZlZF8pIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gaWYgdGhpcyBvYnNlcnZhYmxlIGhhZCByZWFjdGl2ZSBvYnNlcnZlcnMsIHRyaWdnZXIgdGhlIGhvb2tzXG4gICAgICAgICAgICAgICAgICAgIG9ic2VydmFibGUuaXNCZWluZ09ic2VydmVkXyA9IGZhbHNlXG4gICAgICAgICAgICAgICAgICAgIG9ic2VydmFibGUub25CVU8oKVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAob2JzZXJ2YWJsZSBpbnN0YW5jZW9mIENvbXB1dGVkVmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gY29tcHV0ZWQgdmFsdWVzIGFyZSBhdXRvbWF0aWNhbGx5IHRlYXJlZCBkb3duIHdoZW4gdGhlIGxhc3Qgb2JzZXJ2ZXIgbGVhdmVzXG4gICAgICAgICAgICAgICAgICAgIC8vIHRoaXMgcHJvY2VzcyBoYXBwZW5zIHJlY3Vyc2l2ZWx5LCB0aGlzIGNvbXB1dGVkIG1pZ2h0IGJlIHRoZSBsYXN0IG9ic2VydmFiZSBvZiBhbm90aGVyLCBldGMuLlxuICAgICAgICAgICAgICAgICAgICBvYnNlcnZhYmxlLnN1c3BlbmRfKClcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZ2xvYmFsU3RhdGUucGVuZGluZ1Vub2JzZXJ2YXRpb25zID0gW11cbiAgICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiByZXBvcnRPYnNlcnZlZChvYnNlcnZhYmxlOiBJT2JzZXJ2YWJsZSk6IGJvb2xlYW4ge1xuICAgIGNoZWNrSWZTdGF0ZVJlYWRzQXJlQWxsb3dlZChvYnNlcnZhYmxlKVxuXG4gICAgY29uc3QgZGVyaXZhdGlvbiA9IGdsb2JhbFN0YXRlLnRyYWNraW5nRGVyaXZhdGlvblxuICAgIGlmIChkZXJpdmF0aW9uICE9PSBudWxsKSB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBTaW1wbGUgb3B0aW1pemF0aW9uLCBnaXZlIGVhY2ggZGVyaXZhdGlvbiBydW4gYW4gdW5pcXVlIGlkIChydW5JZClcbiAgICAgICAgICogQ2hlY2sgaWYgbGFzdCB0aW1lIHRoaXMgb2JzZXJ2YWJsZSB3YXMgYWNjZXNzZWQgdGhlIHNhbWUgcnVuSWQgaXMgdXNlZFxuICAgICAgICAgKiBpZiB0aGlzIGlzIHRoZSBjYXNlLCB0aGUgcmVsYXRpb24gaXMgYWxyZWFkeSBrbm93blxuICAgICAgICAgKi9cbiAgICAgICAgaWYgKGRlcml2YXRpb24ucnVuSWRfICE9PSBvYnNlcnZhYmxlLmxhc3RBY2Nlc3NlZEJ5Xykge1xuICAgICAgICAgICAgb2JzZXJ2YWJsZS5sYXN0QWNjZXNzZWRCeV8gPSBkZXJpdmF0aW9uLnJ1bklkX1xuICAgICAgICAgICAgLy8gVHJpZWQgc3RvcmluZyBuZXdPYnNlcnZpbmcsIG9yIG9ic2VydmluZywgb3IgYm90aCBhcyBTZXQsIGJ1dCBwZXJmb3JtYW5jZSBkaWRuJ3QgY29tZSBjbG9zZS4uLlxuICAgICAgICAgICAgZGVyaXZhdGlvbi5uZXdPYnNlcnZpbmdfIVtkZXJpdmF0aW9uLnVuYm91bmREZXBzQ291bnRfKytdID0gb2JzZXJ2YWJsZVxuICAgICAgICAgICAgaWYgKCFvYnNlcnZhYmxlLmlzQmVpbmdPYnNlcnZlZF8gJiYgZ2xvYmFsU3RhdGUudHJhY2tpbmdDb250ZXh0KSB7XG4gICAgICAgICAgICAgICAgb2JzZXJ2YWJsZS5pc0JlaW5nT2JzZXJ2ZWRfID0gdHJ1ZVxuICAgICAgICAgICAgICAgIG9ic2VydmFibGUub25CTygpXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG9ic2VydmFibGUuaXNCZWluZ09ic2VydmVkX1xuICAgIH0gZWxzZSBpZiAob2JzZXJ2YWJsZS5vYnNlcnZlcnNfLnNpemUgPT09IDAgJiYgZ2xvYmFsU3RhdGUuaW5CYXRjaCA+IDApIHtcbiAgICAgICAgcXVldWVGb3JVbm9ic2VydmF0aW9uKG9ic2VydmFibGUpXG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlXG59XG5cbi8vIGZ1bmN0aW9uIGludmFyaWFudExPUyhvYnNlcnZhYmxlOiBJT2JzZXJ2YWJsZSwgbXNnOiBzdHJpbmcpIHtcbi8vICAgICAvLyBpdCdzIGV4cGVuc2l2ZSBzbyBiZXR0ZXIgbm90IHJ1biBpdCBpbiBwcm9kdWNpdG9uLiBidXQgdGVtcG9yYXJpbHkgaGVscGZ1bCBmb3IgdGVzdGluZ1xuLy8gICAgIGNvbnN0IG1pbiA9IGdldE9ic2VydmVycyhvYnNlcnZhYmxlKS5yZWR1Y2UoKGEsIGIpID0+IE1hdGgubWluKGEsIGIuZGVwZW5kZW5jaWVzU3RhdGUpLCAyKVxuLy8gICAgIGlmIChtaW4gPj0gb2JzZXJ2YWJsZS5sb3dlc3RPYnNlcnZlclN0YXRlKSByZXR1cm4gLy8gPC0gdGhlIG9ubHkgYXNzdW1wdGlvbiBhYm91dCBgbG93ZXN0T2JzZXJ2ZXJTdGF0ZWBcbi8vICAgICB0aHJvdyBuZXcgRXJyb3IoXG4vLyAgICAgICAgIFwibG93ZXN0T2JzZXJ2ZXJTdGF0ZSBpcyB3cm9uZyBmb3IgXCIgK1xuLy8gICAgICAgICAgICAgbXNnICtcbi8vICAgICAgICAgICAgIFwiIGJlY2F1c2UgXCIgK1xuLy8gICAgICAgICAgICAgbWluICtcbi8vICAgICAgICAgICAgIFwiIDwgXCIgK1xuLy8gICAgICAgICAgICAgb2JzZXJ2YWJsZS5sb3dlc3RPYnNlcnZlclN0YXRlXG4vLyAgICAgKVxuLy8gfVxuXG4vKipcbiAqIE5PVEU6IGN1cnJlbnQgcHJvcGFnYXRpb24gbWVjaGFuaXNtIHdpbGwgaW4gY2FzZSBvZiBzZWxmIHJlcnVuaW5nIGF1dG9ydW5zIGJlaGF2ZSB1bmV4cGVjdGVkbHlcbiAqIEl0IHdpbGwgcHJvcGFnYXRlIGNoYW5nZXMgdG8gb2JzZXJ2ZXJzIGZyb20gcHJldmlvdXMgcnVuXG4gKiBJdCdzIGhhcmQgb3IgbWF5YmUgaW1wb3NzaWJsZSAod2l0aCByZWFzb25hYmxlIHBlcmYpIHRvIGdldCBpdCByaWdodCB3aXRoIGN1cnJlbnQgYXBwcm9hY2hcbiAqIEhvcGVmdWxseSBzZWxmIHJlcnVuaW5nIGF1dG9ydW5zIGFyZW4ndCBhIGZlYXR1cmUgcGVvcGxlIHNob3VsZCBkZXBlbmQgb25cbiAqIEFsc28gbW9zdCBiYXNpYyB1c2UgY2FzZXMgc2hvdWxkIGJlIG9rXG4gKi9cblxuLy8gQ2FsbGVkIGJ5IEF0b20gd2hlbiBpdHMgdmFsdWUgY2hhbmdlc1xuZXhwb3J0IGZ1bmN0aW9uIHByb3BhZ2F0ZUNoYW5nZWQob2JzZXJ2YWJsZTogSU9ic2VydmFibGUpIHtcbiAgICAvLyBpbnZhcmlhbnRMT1Mob2JzZXJ2YWJsZSwgXCJjaGFuZ2VkIHN0YXJ0XCIpO1xuICAgIGlmIChvYnNlcnZhYmxlLmxvd2VzdE9ic2VydmVyU3RhdGVfID09PSBJRGVyaXZhdGlvblN0YXRlXy5TVEFMRV8pIHtcbiAgICAgICAgcmV0dXJuXG4gICAgfVxuICAgIG9ic2VydmFibGUubG93ZXN0T2JzZXJ2ZXJTdGF0ZV8gPSBJRGVyaXZhdGlvblN0YXRlXy5TVEFMRV9cblxuICAgIC8vIElkZWFsbHkgd2UgdXNlIGZvci4ub2YgaGVyZSwgYnV0IHRoZSBkb3duY29tcGlsZWQgdmVyc2lvbiBpcyByZWFsbHkgc2xvdy4uLlxuICAgIG9ic2VydmFibGUub2JzZXJ2ZXJzXy5mb3JFYWNoKGQgPT4ge1xuICAgICAgICBpZiAoZC5kZXBlbmRlbmNpZXNTdGF0ZV8gPT09IElEZXJpdmF0aW9uU3RhdGVfLlVQX1RPX0RBVEVfKSB7XG4gICAgICAgICAgICBpZiAoX19ERVZfXyAmJiBkLmlzVHJhY2luZ18gIT09IFRyYWNlTW9kZS5OT05FKSB7XG4gICAgICAgICAgICAgICAgbG9nVHJhY2VJbmZvKGQsIG9ic2VydmFibGUpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBkLm9uQmVjb21lU3RhbGVfKClcbiAgICAgICAgfVxuICAgICAgICBkLmRlcGVuZGVuY2llc1N0YXRlXyA9IElEZXJpdmF0aW9uU3RhdGVfLlNUQUxFX1xuICAgIH0pXG4gICAgLy8gaW52YXJpYW50TE9TKG9ic2VydmFibGUsIFwiY2hhbmdlZCBlbmRcIik7XG59XG5cbi8vIENhbGxlZCBieSBDb21wdXRlZFZhbHVlIHdoZW4gaXQgcmVjYWxjdWxhdGUgYW5kIGl0cyB2YWx1ZSBjaGFuZ2VkXG5leHBvcnQgZnVuY3Rpb24gcHJvcGFnYXRlQ2hhbmdlQ29uZmlybWVkKG9ic2VydmFibGU6IElPYnNlcnZhYmxlKSB7XG4gICAgLy8gaW52YXJpYW50TE9TKG9ic2VydmFibGUsIFwiY29uZmlybWVkIHN0YXJ0XCIpO1xuICAgIGlmIChvYnNlcnZhYmxlLmxvd2VzdE9ic2VydmVyU3RhdGVfID09PSBJRGVyaXZhdGlvblN0YXRlXy5TVEFMRV8pIHtcbiAgICAgICAgcmV0dXJuXG4gICAgfVxuICAgIG9ic2VydmFibGUubG93ZXN0T2JzZXJ2ZXJTdGF0ZV8gPSBJRGVyaXZhdGlvblN0YXRlXy5TVEFMRV9cblxuICAgIG9ic2VydmFibGUub2JzZXJ2ZXJzXy5mb3JFYWNoKGQgPT4ge1xuICAgICAgICBpZiAoZC5kZXBlbmRlbmNpZXNTdGF0ZV8gPT09IElEZXJpdmF0aW9uU3RhdGVfLlBPU1NJQkxZX1NUQUxFXykge1xuICAgICAgICAgICAgZC5kZXBlbmRlbmNpZXNTdGF0ZV8gPSBJRGVyaXZhdGlvblN0YXRlXy5TVEFMRV9cbiAgICAgICAgICAgIGlmIChfX0RFVl9fICYmIGQuaXNUcmFjaW5nXyAhPT0gVHJhY2VNb2RlLk5PTkUpIHtcbiAgICAgICAgICAgICAgICBsb2dUcmFjZUluZm8oZCwgb2JzZXJ2YWJsZSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChcbiAgICAgICAgICAgIGQuZGVwZW5kZW5jaWVzU3RhdGVfID09PSBJRGVyaXZhdGlvblN0YXRlXy5VUF9UT19EQVRFXyAvLyB0aGlzIGhhcHBlbnMgZHVyaW5nIGNvbXB1dGluZyBvZiBgZGAsIGp1c3Qga2VlcCBsb3dlc3RPYnNlcnZlclN0YXRlIHVwIHRvIGRhdGUuXG4gICAgICAgICkge1xuICAgICAgICAgICAgb2JzZXJ2YWJsZS5sb3dlc3RPYnNlcnZlclN0YXRlXyA9IElEZXJpdmF0aW9uU3RhdGVfLlVQX1RPX0RBVEVfXG4gICAgICAgIH1cbiAgICB9KVxuICAgIC8vIGludmFyaWFudExPUyhvYnNlcnZhYmxlLCBcImNvbmZpcm1lZCBlbmRcIik7XG59XG5cbi8vIFVzZWQgYnkgY29tcHV0ZWQgd2hlbiBpdHMgZGVwZW5kZW5jeSBjaGFuZ2VkLCBidXQgd2UgZG9uJ3Qgd2FuJ3QgdG8gaW1tZWRpYXRlbHkgcmVjb21wdXRlLlxuZXhwb3J0IGZ1bmN0aW9uIHByb3BhZ2F0ZU1heWJlQ2hhbmdlZChvYnNlcnZhYmxlOiBJT2JzZXJ2YWJsZSkge1xuICAgIC8vIGludmFyaWFudExPUyhvYnNlcnZhYmxlLCBcIm1heWJlIHN0YXJ0XCIpO1xuICAgIGlmIChvYnNlcnZhYmxlLmxvd2VzdE9ic2VydmVyU3RhdGVfICE9PSBJRGVyaXZhdGlvblN0YXRlXy5VUF9UT19EQVRFXykge1xuICAgICAgICByZXR1cm5cbiAgICB9XG4gICAgb2JzZXJ2YWJsZS5sb3dlc3RPYnNlcnZlclN0YXRlXyA9IElEZXJpdmF0aW9uU3RhdGVfLlBPU1NJQkxZX1NUQUxFX1xuXG4gICAgb2JzZXJ2YWJsZS5vYnNlcnZlcnNfLmZvckVhY2goZCA9PiB7XG4gICAgICAgIGlmIChkLmRlcGVuZGVuY2llc1N0YXRlXyA9PT0gSURlcml2YXRpb25TdGF0ZV8uVVBfVE9fREFURV8pIHtcbiAgICAgICAgICAgIGQuZGVwZW5kZW5jaWVzU3RhdGVfID0gSURlcml2YXRpb25TdGF0ZV8uUE9TU0lCTFlfU1RBTEVfXG4gICAgICAgICAgICBkLm9uQmVjb21lU3RhbGVfKClcbiAgICAgICAgfVxuICAgIH0pXG4gICAgLy8gaW52YXJpYW50TE9TKG9ic2VydmFibGUsIFwibWF5YmUgZW5kXCIpO1xufVxuXG5mdW5jdGlvbiBsb2dUcmFjZUluZm8oZGVyaXZhdGlvbjogSURlcml2YXRpb24sIG9ic2VydmFibGU6IElPYnNlcnZhYmxlKSB7XG4gICAgY29uc29sZS5sb2coXG4gICAgICAgIGBbbW9ieC50cmFjZV0gJyR7ZGVyaXZhdGlvbi5uYW1lX30nIGlzIGludmFsaWRhdGVkIGR1ZSB0byBhIGNoYW5nZSBpbjogJyR7b2JzZXJ2YWJsZS5uYW1lX30nYFxuICAgIClcbiAgICBpZiAoZGVyaXZhdGlvbi5pc1RyYWNpbmdfID09PSBUcmFjZU1vZGUuQlJFQUspIHtcbiAgICAgICAgY29uc3QgbGluZXMgPSBbXVxuICAgICAgICBwcmludERlcFRyZWUoZ2V0RGVwZW5kZW5jeVRyZWUoZGVyaXZhdGlvbiksIGxpbmVzLCAxKVxuXG4gICAgICAgIC8vIHByZXR0aWVyLWlnbm9yZVxuICAgICAgICBuZXcgRnVuY3Rpb24oXG5gZGVidWdnZXI7XG4vKlxuVHJhY2luZyAnJHtkZXJpdmF0aW9uLm5hbWVffSdcblxuWW91IGFyZSBlbnRlcmluZyB0aGlzIGJyZWFrIHBvaW50IGJlY2F1c2UgZGVyaXZhdGlvbiAnJHtkZXJpdmF0aW9uLm5hbWVffScgaXMgYmVpbmcgdHJhY2VkIGFuZCAnJHtvYnNlcnZhYmxlLm5hbWVffScgaXMgbm93IGZvcmNpbmcgaXQgdG8gdXBkYXRlLlxuSnVzdCBmb2xsb3cgdGhlIHN0YWNrdHJhY2UgeW91IHNob3VsZCBub3cgc2VlIGluIHRoZSBkZXZ0b29scyB0byBzZWUgcHJlY2lzZWx5IHdoYXQgcGllY2Ugb2YgeW91ciBjb2RlIGlzIGNhdXNpbmcgdGhpcyB1cGRhdGVcblRoZSBzdGFja2ZyYW1lIHlvdSBhcmUgbG9va2luZyBmb3IgaXMgYXQgbGVhc3QgfjYtOCBzdGFjay1mcmFtZXMgdXAuXG5cbiR7ZGVyaXZhdGlvbiBpbnN0YW5jZW9mIENvbXB1dGVkVmFsdWUgPyBkZXJpdmF0aW9uLmRlcml2YXRpb24udG9TdHJpbmcoKS5yZXBsYWNlKC9bKl1cXC8vZywgXCIvXCIpIDogXCJcIn1cblxuVGhlIGRlcGVuZGVuY2llcyBmb3IgdGhpcyBkZXJpdmF0aW9uIGFyZTpcblxuJHtsaW5lcy5qb2luKFwiXFxuXCIpfVxuKi9cbiAgICBgKSgpXG4gICAgfVxufVxuXG5mdW5jdGlvbiBwcmludERlcFRyZWUodHJlZTogSURlcGVuZGVuY3lUcmVlLCBsaW5lczogc3RyaW5nW10sIGRlcHRoOiBudW1iZXIpIHtcbiAgICBpZiAobGluZXMubGVuZ3RoID49IDEwMDApIHtcbiAgICAgICAgbGluZXMucHVzaChcIihhbmQgbWFueSBtb3JlKVwiKVxuICAgICAgICByZXR1cm5cbiAgICB9XG4gICAgbGluZXMucHVzaChgJHtcIlxcdFwiLnJlcGVhdChkZXB0aCAtIDEpfSR7dHJlZS5uYW1lfWApXG4gICAgaWYgKHRyZWUuZGVwZW5kZW5jaWVzKSB7XG4gICAgICAgIHRyZWUuZGVwZW5kZW5jaWVzLmZvckVhY2goY2hpbGQgPT4gcHJpbnREZXBUcmVlKGNoaWxkLCBsaW5lcywgZGVwdGggKyAxKSlcbiAgICB9XG59XG4iLCJpbXBvcnQge1xuICAgICRtb2J4LFxuICAgIElEZXJpdmF0aW9uLFxuICAgIElEZXJpdmF0aW9uU3RhdGVfLFxuICAgIElPYnNlcnZhYmxlLFxuICAgIExhbWJkYSxcbiAgICBUcmFjZU1vZGUsXG4gICAgY2xlYXJPYnNlcnZpbmcsXG4gICAgY3JlYXRlSW5zdGFuY2VvZlByZWRpY2F0ZSxcbiAgICBlbmRCYXRjaCxcbiAgICBnZXROZXh0SWQsXG4gICAgZ2xvYmFsU3RhdGUsXG4gICAgaXNDYXVnaHRFeGNlcHRpb24sXG4gICAgaXNTcHlFbmFibGVkLFxuICAgIHNob3VsZENvbXB1dGUsXG4gICAgc3B5UmVwb3J0LFxuICAgIHNweVJlcG9ydEVuZCxcbiAgICBzcHlSZXBvcnRTdGFydCxcbiAgICBzdGFydEJhdGNoLFxuICAgIHRyYWNlLFxuICAgIHRyYWNrRGVyaXZlZEZ1bmN0aW9uLFxuICAgIEdlbmVyaWNBYm9ydFNpZ25hbFxufSBmcm9tIFwiLi4vaW50ZXJuYWxcIlxuXG4vKipcbiAqIFJlYWN0aW9ucyBhcmUgYSBzcGVjaWFsIGtpbmQgb2YgZGVyaXZhdGlvbnMuIFNldmVyYWwgdGhpbmdzIGRpc3Rpbmd1aXNoZXMgdGhlbSBmcm9tIG5vcm1hbCByZWFjdGl2ZSBjb21wdXRhdGlvbnNcbiAqXG4gKiAxKSBUaGV5IHdpbGwgYWx3YXlzIHJ1biwgd2hldGhlciB0aGV5IGFyZSB1c2VkIGJ5IG90aGVyIGNvbXB1dGF0aW9ucyBvciBub3QuXG4gKiBUaGlzIG1lYW5zIHRoYXQgdGhleSBhcmUgdmVyeSBzdWl0YWJsZSBmb3IgdHJpZ2dlcmluZyBzaWRlIGVmZmVjdHMgbGlrZSBsb2dnaW5nLCB1cGRhdGluZyB0aGUgRE9NIGFuZCBtYWtpbmcgbmV0d29yayByZXF1ZXN0cy5cbiAqIDIpIFRoZXkgYXJlIG5vdCBvYnNlcnZhYmxlIHRoZW1zZWx2ZXNcbiAqIDMpIFRoZXkgd2lsbCBhbHdheXMgcnVuIGFmdGVyIGFueSAnbm9ybWFsJyBkZXJpdmF0aW9uc1xuICogNCkgVGhleSBhcmUgYWxsb3dlZCB0byBjaGFuZ2UgdGhlIHN0YXRlIGFuZCB0aGVyZWJ5IHRyaWdnZXJpbmcgdGhlbXNlbHZlcyBhZ2FpbiwgYXMgbG9uZyBhcyB0aGV5IG1ha2Ugc3VyZSB0aGUgc3RhdGUgcHJvcGFnYXRlcyB0byBhIHN0YWJsZSBzdGF0ZSBpbiBhIHJlYXNvbmFibGUgYW1vdW50IG9mIGl0ZXJhdGlvbnMuXG4gKlxuICogVGhlIHN0YXRlIG1hY2hpbmUgb2YgYSBSZWFjdGlvbiBpcyBhcyBmb2xsb3dzOlxuICpcbiAqIDEpIGFmdGVyIGNyZWF0aW5nLCB0aGUgcmVhY3Rpb24gc2hvdWxkIGJlIHN0YXJ0ZWQgYnkgY2FsbGluZyBgcnVuUmVhY3Rpb25gIG9yIGJ5IHNjaGVkdWxpbmcgaXQgKHNlZSBhbHNvIGBhdXRvcnVuYClcbiAqIDIpIHRoZSBgb25JbnZhbGlkYXRlYCBoYW5kbGVyIHNob3VsZCBzb21laG93IHJlc3VsdCBpbiBhIGNhbGwgdG8gYHRoaXMudHJhY2soc29tZUZ1bmN0aW9uKWBcbiAqIDMpIGFsbCBvYnNlcnZhYmxlcyBhY2Nlc3NlZCBpbiBgc29tZUZ1bmN0aW9uYCB3aWxsIGJlIG9ic2VydmVkIGJ5IHRoaXMgcmVhY3Rpb24uXG4gKiA0KSBhcyBzb29uIGFzIHNvbWUgb2YgdGhlIGRlcGVuZGVuY2llcyBoYXMgY2hhbmdlZCB0aGUgUmVhY3Rpb24gd2lsbCBiZSByZXNjaGVkdWxlZCBmb3IgYW5vdGhlciBydW4gKGFmdGVyIHRoZSBjdXJyZW50IG11dGF0aW9uIG9yIHRyYW5zYWN0aW9uKS4gYGlzU2NoZWR1bGVkYCB3aWxsIHlpZWxkIHRydWUgb25jZSBhIGRlcGVuZGVuY3kgaXMgc3RhbGUgYW5kIGR1cmluZyB0aGlzIHBlcmlvZFxuICogNSkgYG9uSW52YWxpZGF0ZWAgd2lsbCBiZSBjYWxsZWQsIGFuZCB3ZSBhcmUgYmFjayBhdCBzdGVwIDEuXG4gKlxuICovXG5cbmV4cG9ydCBpbnRlcmZhY2UgSVJlYWN0aW9uUHVibGljIHtcbiAgICBkaXNwb3NlKCk6IHZvaWRcbiAgICB0cmFjZShlbnRlckJyZWFrUG9pbnQ/OiBib29sZWFuKTogdm9pZFxufVxuXG5leHBvcnQgaW50ZXJmYWNlIElSZWFjdGlvbkRpc3Bvc2VyIHtcbiAgICAoKTogdm9pZFxuICAgIFskbW9ieF06IFJlYWN0aW9uXG59XG5cbmV4cG9ydCBjbGFzcyBSZWFjdGlvbiBpbXBsZW1lbnRzIElEZXJpdmF0aW9uLCBJUmVhY3Rpb25QdWJsaWMge1xuICAgIG9ic2VydmluZ186IElPYnNlcnZhYmxlW10gPSBbXSAvLyBub2RlcyB3ZSBhcmUgbG9va2luZyBhdC4gT3VyIHZhbHVlIGRlcGVuZHMgb24gdGhlc2Ugbm9kZXNcbiAgICBuZXdPYnNlcnZpbmdfOiBJT2JzZXJ2YWJsZVtdID0gW11cbiAgICBkZXBlbmRlbmNpZXNTdGF0ZV8gPSBJRGVyaXZhdGlvblN0YXRlXy5OT1RfVFJBQ0tJTkdfXG4gICAgZGlmZlZhbHVlXyA9IDBcbiAgICBydW5JZF8gPSAwXG4gICAgdW5ib3VuZERlcHNDb3VudF8gPSAwXG4gICAgaXNEaXNwb3NlZF8gPSBmYWxzZVxuICAgIGlzU2NoZWR1bGVkXyA9IGZhbHNlXG4gICAgaXNUcmFja1BlbmRpbmdfID0gZmFsc2VcbiAgICBpc1J1bm5pbmdfID0gZmFsc2VcbiAgICBpc1RyYWNpbmdfOiBUcmFjZU1vZGUgPSBUcmFjZU1vZGUuTk9ORVxuXG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIHB1YmxpYyBuYW1lXzogc3RyaW5nID0gX19ERVZfXyA/IFwiUmVhY3Rpb25AXCIgKyBnZXROZXh0SWQoKSA6IFwiUmVhY3Rpb25cIixcbiAgICAgICAgcHJpdmF0ZSBvbkludmFsaWRhdGVfOiAoKSA9PiB2b2lkLFxuICAgICAgICBwcml2YXRlIGVycm9ySGFuZGxlcl8/OiAoZXJyb3I6IGFueSwgZGVyaXZhdGlvbjogSURlcml2YXRpb24pID0+IHZvaWQsXG4gICAgICAgIHB1YmxpYyByZXF1aXJlc09ic2VydmFibGVfP1xuICAgICkge31cblxuICAgIG9uQmVjb21lU3RhbGVfKCkge1xuICAgICAgICB0aGlzLnNjaGVkdWxlXygpXG4gICAgfVxuXG4gICAgc2NoZWR1bGVfKCkge1xuICAgICAgICBpZiAoIXRoaXMuaXNTY2hlZHVsZWRfKSB7XG4gICAgICAgICAgICB0aGlzLmlzU2NoZWR1bGVkXyA9IHRydWVcbiAgICAgICAgICAgIGdsb2JhbFN0YXRlLnBlbmRpbmdSZWFjdGlvbnMucHVzaCh0aGlzKVxuICAgICAgICAgICAgcnVuUmVhY3Rpb25zKClcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGlzU2NoZWR1bGVkKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5pc1NjaGVkdWxlZF9cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBpbnRlcm5hbCwgdXNlIHNjaGVkdWxlKCkgaWYgeW91IGludGVuZCB0byBraWNrIG9mZiBhIHJlYWN0aW9uXG4gICAgICovXG4gICAgcnVuUmVhY3Rpb25fKCkge1xuICAgICAgICBpZiAoIXRoaXMuaXNEaXNwb3NlZF8pIHtcbiAgICAgICAgICAgIHN0YXJ0QmF0Y2goKVxuICAgICAgICAgICAgdGhpcy5pc1NjaGVkdWxlZF8gPSBmYWxzZVxuICAgICAgICAgICAgY29uc3QgcHJldiA9IGdsb2JhbFN0YXRlLnRyYWNraW5nQ29udGV4dFxuICAgICAgICAgICAgZ2xvYmFsU3RhdGUudHJhY2tpbmdDb250ZXh0ID0gdGhpc1xuICAgICAgICAgICAgaWYgKHNob3VsZENvbXB1dGUodGhpcykpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmlzVHJhY2tQZW5kaW5nXyA9IHRydWVcblxuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMub25JbnZhbGlkYXRlXygpXG4gICAgICAgICAgICAgICAgICAgIGlmIChfX0RFVl9fICYmIHRoaXMuaXNUcmFja1BlbmRpbmdfICYmIGlzU3B5RW5hYmxlZCgpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBvbkludmFsaWRhdGUgZGlkbid0IHRyaWdnZXIgdHJhY2sgcmlnaHQgYXdheS4uXG4gICAgICAgICAgICAgICAgICAgICAgICBzcHlSZXBvcnQoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IHRoaXMubmFtZV8sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJzY2hlZHVsZWQtcmVhY3Rpb25cIlxuICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yZXBvcnRFeGNlcHRpb25JbkRlcml2YXRpb25fKGUpXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZ2xvYmFsU3RhdGUudHJhY2tpbmdDb250ZXh0ID0gcHJldlxuICAgICAgICAgICAgZW5kQmF0Y2goKVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgdHJhY2soZm46ICgpID0+IHZvaWQpIHtcbiAgICAgICAgaWYgKHRoaXMuaXNEaXNwb3NlZF8pIHtcbiAgICAgICAgICAgIHJldHVyblxuICAgICAgICAgICAgLy8gY29uc29sZS53YXJuKFwiUmVhY3Rpb24gYWxyZWFkeSBkaXNwb3NlZFwiKSAvLyBOb3RlOiBOb3QgYSB3YXJuaW5nIC8gZXJyb3IgaW4gbW9ieCA0IGVpdGhlclxuICAgICAgICB9XG4gICAgICAgIHN0YXJ0QmF0Y2goKVxuICAgICAgICBjb25zdCBub3RpZnkgPSBpc1NweUVuYWJsZWQoKVxuICAgICAgICBsZXQgc3RhcnRUaW1lXG4gICAgICAgIGlmIChfX0RFVl9fICYmIG5vdGlmeSkge1xuICAgICAgICAgICAgc3RhcnRUaW1lID0gRGF0ZS5ub3coKVxuICAgICAgICAgICAgc3B5UmVwb3J0U3RhcnQoe1xuICAgICAgICAgICAgICAgIG5hbWU6IHRoaXMubmFtZV8sXG4gICAgICAgICAgICAgICAgdHlwZTogXCJyZWFjdGlvblwiXG4gICAgICAgICAgICB9KVxuICAgICAgICB9XG4gICAgICAgIHRoaXMuaXNSdW5uaW5nXyA9IHRydWVcbiAgICAgICAgY29uc3QgcHJldlJlYWN0aW9uID0gZ2xvYmFsU3RhdGUudHJhY2tpbmdDb250ZXh0IC8vIHJlYWN0aW9ucyBjb3VsZCBjcmVhdGUgcmVhY3Rpb25zLi4uXG4gICAgICAgIGdsb2JhbFN0YXRlLnRyYWNraW5nQ29udGV4dCA9IHRoaXNcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gdHJhY2tEZXJpdmVkRnVuY3Rpb24odGhpcywgZm4sIHVuZGVmaW5lZClcbiAgICAgICAgZ2xvYmFsU3RhdGUudHJhY2tpbmdDb250ZXh0ID0gcHJldlJlYWN0aW9uXG4gICAgICAgIHRoaXMuaXNSdW5uaW5nXyA9IGZhbHNlXG4gICAgICAgIHRoaXMuaXNUcmFja1BlbmRpbmdfID0gZmFsc2VcbiAgICAgICAgaWYgKHRoaXMuaXNEaXNwb3NlZF8pIHtcbiAgICAgICAgICAgIC8vIGRpc3Bvc2VkIGR1cmluZyBsYXN0IHJ1bi4gQ2xlYW4gdXAgZXZlcnl0aGluZyB0aGF0IHdhcyBib3VuZCBhZnRlciB0aGUgZGlzcG9zZSBjYWxsLlxuICAgICAgICAgICAgY2xlYXJPYnNlcnZpbmcodGhpcylcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNDYXVnaHRFeGNlcHRpb24ocmVzdWx0KSkge1xuICAgICAgICAgICAgdGhpcy5yZXBvcnRFeGNlcHRpb25JbkRlcml2YXRpb25fKHJlc3VsdC5jYXVzZSlcbiAgICAgICAgfVxuICAgICAgICBpZiAoX19ERVZfXyAmJiBub3RpZnkpIHtcbiAgICAgICAgICAgIHNweVJlcG9ydEVuZCh7XG4gICAgICAgICAgICAgICAgdGltZTogRGF0ZS5ub3coKSAtIHN0YXJ0VGltZVxuICAgICAgICAgICAgfSlcbiAgICAgICAgfVxuICAgICAgICBlbmRCYXRjaCgpXG4gICAgfVxuXG4gICAgcmVwb3J0RXhjZXB0aW9uSW5EZXJpdmF0aW9uXyhlcnJvcjogYW55KSB7XG4gICAgICAgIGlmICh0aGlzLmVycm9ySGFuZGxlcl8pIHtcbiAgICAgICAgICAgIHRoaXMuZXJyb3JIYW5kbGVyXyhlcnJvciwgdGhpcylcbiAgICAgICAgICAgIHJldHVyblxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGdsb2JhbFN0YXRlLmRpc2FibGVFcnJvckJvdW5kYXJpZXMpIHtcbiAgICAgICAgICAgIHRocm93IGVycm9yXG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBtZXNzYWdlID0gX19ERVZfX1xuICAgICAgICAgICAgPyBgW21vYnhdIEVuY291bnRlcmVkIGFuIHVuY2F1Z2h0IGV4Y2VwdGlvbiB0aGF0IHdhcyB0aHJvd24gYnkgYSByZWFjdGlvbiBvciBvYnNlcnZlciBjb21wb25lbnQsIGluOiAnJHt0aGlzfSdgXG4gICAgICAgICAgICA6IGBbbW9ieF0gdW5jYXVnaHQgZXJyb3IgaW4gJyR7dGhpc30nYFxuICAgICAgICBpZiAoIWdsb2JhbFN0YXRlLnN1cHByZXNzUmVhY3Rpb25FcnJvcnMpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IobWVzc2FnZSwgZXJyb3IpXG4gICAgICAgICAgICAvKiogSWYgZGVidWdnaW5nIGJyb3VnaHQgeW91IGhlcmUsIHBsZWFzZSwgcmVhZCB0aGUgYWJvdmUgbWVzc2FnZSA6LSkuIFRueCEgKi9cbiAgICAgICAgfSBlbHNlIGlmIChfX0RFVl9fKSB7IGNvbnNvbGUud2FybihgW21vYnhdIChlcnJvciBpbiByZWFjdGlvbiAnJHt0aGlzLm5hbWVffScgc3VwcHJlc3NlZCwgZml4IGVycm9yIG9mIGNhdXNpbmcgYWN0aW9uIGJlbG93KWApIH0gLy8gcHJldHRpZXItaWdub3JlXG5cbiAgICAgICAgaWYgKF9fREVWX18gJiYgaXNTcHlFbmFibGVkKCkpIHtcbiAgICAgICAgICAgIHNweVJlcG9ydCh7XG4gICAgICAgICAgICAgICAgdHlwZTogXCJlcnJvclwiLFxuICAgICAgICAgICAgICAgIG5hbWU6IHRoaXMubmFtZV8sXG4gICAgICAgICAgICAgICAgbWVzc2FnZSxcbiAgICAgICAgICAgICAgICBlcnJvcjogXCJcIiArIGVycm9yXG4gICAgICAgICAgICB9KVxuICAgICAgICB9XG5cbiAgICAgICAgZ2xvYmFsU3RhdGUuZ2xvYmFsUmVhY3Rpb25FcnJvckhhbmRsZXJzLmZvckVhY2goZiA9PiBmKGVycm9yLCB0aGlzKSlcbiAgICB9XG5cbiAgICBkaXNwb3NlKCkge1xuICAgICAgICBpZiAoIXRoaXMuaXNEaXNwb3NlZF8pIHtcbiAgICAgICAgICAgIHRoaXMuaXNEaXNwb3NlZF8gPSB0cnVlXG4gICAgICAgICAgICBpZiAoIXRoaXMuaXNSdW5uaW5nXykge1xuICAgICAgICAgICAgICAgIC8vIGlmIGRpc3Bvc2VkIHdoaWxlIHJ1bm5pbmcsIGNsZWFuIHVwIGxhdGVyLiBNYXliZSBub3Qgb3B0aW1hbCwgYnV0IHJhcmUgY2FzZVxuICAgICAgICAgICAgICAgIHN0YXJ0QmF0Y2goKVxuICAgICAgICAgICAgICAgIGNsZWFyT2JzZXJ2aW5nKHRoaXMpXG4gICAgICAgICAgICAgICAgZW5kQmF0Y2goKVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgZ2V0RGlzcG9zZXJfKGFib3J0U2lnbmFsPzogR2VuZXJpY0Fib3J0U2lnbmFsKTogSVJlYWN0aW9uRGlzcG9zZXIge1xuICAgICAgICBjb25zdCBkaXNwb3NlID0gKCgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuZGlzcG9zZSgpXG4gICAgICAgICAgICBhYm9ydFNpZ25hbD8ucmVtb3ZlRXZlbnRMaXN0ZW5lcj8uKFwiYWJvcnRcIiwgZGlzcG9zZSlcbiAgICAgICAgfSkgYXMgSVJlYWN0aW9uRGlzcG9zZXJcbiAgICAgICAgYWJvcnRTaWduYWw/LmFkZEV2ZW50TGlzdGVuZXI/LihcImFib3J0XCIsIGRpc3Bvc2UpXG4gICAgICAgIGRpc3Bvc2VbJG1vYnhdID0gdGhpc1xuXG4gICAgICAgIHJldHVybiBkaXNwb3NlXG4gICAgfVxuXG4gICAgdG9TdHJpbmcoKSB7XG4gICAgICAgIHJldHVybiBgUmVhY3Rpb25bJHt0aGlzLm5hbWVffV1gXG4gICAgfVxuXG4gICAgdHJhY2UoZW50ZXJCcmVha1BvaW50OiBib29sZWFuID0gZmFsc2UpIHtcbiAgICAgICAgdHJhY2UodGhpcywgZW50ZXJCcmVha1BvaW50KVxuICAgIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG9uUmVhY3Rpb25FcnJvcihoYW5kbGVyOiAoZXJyb3I6IGFueSwgZGVyaXZhdGlvbjogSURlcml2YXRpb24pID0+IHZvaWQpOiBMYW1iZGEge1xuICAgIGdsb2JhbFN0YXRlLmdsb2JhbFJlYWN0aW9uRXJyb3JIYW5kbGVycy5wdXNoKGhhbmRsZXIpXG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgICAgY29uc3QgaWR4ID0gZ2xvYmFsU3RhdGUuZ2xvYmFsUmVhY3Rpb25FcnJvckhhbmRsZXJzLmluZGV4T2YoaGFuZGxlcilcbiAgICAgICAgaWYgKGlkeCA+PSAwKSB7XG4gICAgICAgICAgICBnbG9iYWxTdGF0ZS5nbG9iYWxSZWFjdGlvbkVycm9ySGFuZGxlcnMuc3BsaWNlKGlkeCwgMSlcbiAgICAgICAgfVxuICAgIH1cbn1cblxuLyoqXG4gKiBNYWdpYyBudW1iZXIgYWxlcnQhXG4gKiBEZWZpbmVzIHdpdGhpbiBob3cgbWFueSB0aW1lcyBhIHJlYWN0aW9uIGlzIGFsbG93ZWQgdG8gcmUtdHJpZ2dlciBpdHNlbGZcbiAqIHVudGlsIGl0IGlzIGFzc3VtZWQgdGhhdCB0aGlzIGlzIGdvbm5hIGJlIGEgbmV2ZXIgZW5kaW5nIGxvb3AuLi5cbiAqL1xuY29uc3QgTUFYX1JFQUNUSU9OX0lURVJBVElPTlMgPSAxMDBcblxubGV0IHJlYWN0aW9uU2NoZWR1bGVyOiAoZm46ICgpID0+IHZvaWQpID0+IHZvaWQgPSBmID0+IGYoKVxuXG5leHBvcnQgZnVuY3Rpb24gcnVuUmVhY3Rpb25zKCkge1xuICAgIC8vIFRyYW1wb2xpbmluZywgaWYgcnVuUmVhY3Rpb25zIGFyZSBhbHJlYWR5IHJ1bm5pbmcsIG5ldyByZWFjdGlvbnMgd2lsbCBiZSBwaWNrZWQgdXBcbiAgICBpZiAoZ2xvYmFsU3RhdGUuaW5CYXRjaCA+IDAgfHwgZ2xvYmFsU3RhdGUuaXNSdW5uaW5nUmVhY3Rpb25zKSB7XG4gICAgICAgIHJldHVyblxuICAgIH1cbiAgICByZWFjdGlvblNjaGVkdWxlcihydW5SZWFjdGlvbnNIZWxwZXIpXG59XG5cbmZ1bmN0aW9uIHJ1blJlYWN0aW9uc0hlbHBlcigpIHtcbiAgICBnbG9iYWxTdGF0ZS5pc1J1bm5pbmdSZWFjdGlvbnMgPSB0cnVlXG4gICAgY29uc3QgYWxsUmVhY3Rpb25zID0gZ2xvYmFsU3RhdGUucGVuZGluZ1JlYWN0aW9uc1xuICAgIGxldCBpdGVyYXRpb25zID0gMFxuXG4gICAgLy8gV2hpbGUgcnVubmluZyByZWFjdGlvbnMsIG5ldyByZWFjdGlvbnMgbWlnaHQgYmUgdHJpZ2dlcmVkLlxuICAgIC8vIEhlbmNlIHdlIHdvcmsgd2l0aCB0d28gdmFyaWFibGVzIGFuZCBjaGVjayB3aGV0aGVyXG4gICAgLy8gd2UgY29udmVyZ2UgdG8gbm8gcmVtYWluaW5nIHJlYWN0aW9ucyBhZnRlciBhIHdoaWxlLlxuICAgIHdoaWxlIChhbGxSZWFjdGlvbnMubGVuZ3RoID4gMCkge1xuICAgICAgICBpZiAoKytpdGVyYXRpb25zID09PSBNQVhfUkVBQ1RJT05fSVRFUkFUSU9OUykge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihcbiAgICAgICAgICAgICAgICBfX0RFVl9fXG4gICAgICAgICAgICAgICAgICAgID8gYFJlYWN0aW9uIGRvZXNuJ3QgY29udmVyZ2UgdG8gYSBzdGFibGUgc3RhdGUgYWZ0ZXIgJHtNQVhfUkVBQ1RJT05fSVRFUkFUSU9OU30gaXRlcmF0aW9ucy5gICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgYCBQcm9iYWJseSB0aGVyZSBpcyBhIGN5Y2xlIGluIHRoZSByZWFjdGl2ZSBmdW5jdGlvbjogJHthbGxSZWFjdGlvbnNbMF19YFxuICAgICAgICAgICAgICAgICAgICA6IGBbbW9ieF0gY3ljbGUgaW4gcmVhY3Rpb246ICR7YWxsUmVhY3Rpb25zWzBdfWBcbiAgICAgICAgICAgIClcbiAgICAgICAgICAgIGFsbFJlYWN0aW9ucy5zcGxpY2UoMCkgLy8gY2xlYXIgcmVhY3Rpb25zXG4gICAgICAgIH1cbiAgICAgICAgbGV0IHJlbWFpbmluZ1JlYWN0aW9ucyA9IGFsbFJlYWN0aW9ucy5zcGxpY2UoMClcbiAgICAgICAgZm9yIChsZXQgaSA9IDAsIGwgPSByZW1haW5pbmdSZWFjdGlvbnMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgICAgICByZW1haW5pbmdSZWFjdGlvbnNbaV0ucnVuUmVhY3Rpb25fKClcbiAgICAgICAgfVxuICAgIH1cbiAgICBnbG9iYWxTdGF0ZS5pc1J1bm5pbmdSZWFjdGlvbnMgPSBmYWxzZVxufVxuXG5leHBvcnQgY29uc3QgaXNSZWFjdGlvbiA9IGNyZWF0ZUluc3RhbmNlb2ZQcmVkaWNhdGUoXCJSZWFjdGlvblwiLCBSZWFjdGlvbilcblxuZXhwb3J0IGZ1bmN0aW9uIHNldFJlYWN0aW9uU2NoZWR1bGVyKGZuOiAoZjogKCkgPT4gdm9pZCkgPT4gdm9pZCkge1xuICAgIGNvbnN0IGJhc2VTY2hlZHVsZXIgPSByZWFjdGlvblNjaGVkdWxlclxuICAgIHJlYWN0aW9uU2NoZWR1bGVyID0gZiA9PiBmbigoKSA9PiBiYXNlU2NoZWR1bGVyKGYpKVxufVxuIiwiaW1wb3J0IHsgSUNvbXB1dGVkRGlkQ2hhbmdlIH0gZnJvbSBcIi4vY29tcHV0ZWR2YWx1ZVwiXG5pbXBvcnQgeyBJVmFsdWVEaWRDaGFuZ2UsIElCb3hEaWRDaGFuZ2UgfSBmcm9tIFwiLi8uLi90eXBlcy9vYnNlcnZhYmxldmFsdWVcIlxuaW1wb3J0IHsgSU9iamVjdERpZENoYW5nZSB9IGZyb20gXCIuLy4uL3R5cGVzL29ic2VydmFibGVvYmplY3RcIlxuaW1wb3J0IHsgSUFycmF5RGlkQ2hhbmdlIH0gZnJvbSBcIi4vLi4vdHlwZXMvb2JzZXJ2YWJsZWFycmF5XCJcbmltcG9ydCB7IExhbWJkYSwgZ2xvYmFsU3RhdGUsIG9uY2UsIElTZXREaWRDaGFuZ2UsIElNYXBEaWRDaGFuZ2UgfSBmcm9tIFwiLi4vaW50ZXJuYWxcIlxuXG5leHBvcnQgZnVuY3Rpb24gaXNTcHlFbmFibGVkKCkge1xuICAgIHJldHVybiBfX0RFVl9fICYmICEhZ2xvYmFsU3RhdGUuc3B5TGlzdGVuZXJzLmxlbmd0aFxufVxuXG5leHBvcnQgdHlwZSBQdXJlU3B5RXZlbnQgPVxuICAgIHwgeyB0eXBlOiBcImFjdGlvblwiOyBuYW1lOiBzdHJpbmc7IG9iamVjdDogdW5rbm93bjsgYXJndW1lbnRzOiB1bmtub3duW10gfVxuICAgIHwgeyB0eXBlOiBcInNjaGVkdWxlZC1yZWFjdGlvblwiOyBuYW1lOiBzdHJpbmcgfVxuICAgIHwgeyB0eXBlOiBcInJlYWN0aW9uXCI7IG5hbWU6IHN0cmluZyB9XG4gICAgfCB7IHR5cGU6IFwiZXJyb3JcIjsgbmFtZTogc3RyaW5nOyBtZXNzYWdlOiBzdHJpbmc7IGVycm9yOiBzdHJpbmcgfVxuICAgIHwgSUNvbXB1dGVkRGlkQ2hhbmdlPHVua25vd24+XG4gICAgfCBJT2JqZWN0RGlkQ2hhbmdlPHVua25vd24+XG4gICAgfCBJQXJyYXlEaWRDaGFuZ2U8dW5rbm93bj5cbiAgICB8IElNYXBEaWRDaGFuZ2U8dW5rbm93biwgdW5rbm93bj5cbiAgICB8IElTZXREaWRDaGFuZ2U8dW5rbm93bj5cbiAgICB8IElWYWx1ZURpZENoYW5nZTx1bmtub3duPlxuICAgIHwgSUJveERpZENoYW5nZTx1bmtub3duPlxuICAgIHwgeyB0eXBlOiBcInJlcG9ydC1lbmRcIjsgc3B5UmVwb3J0RW5kOiB0cnVlOyB0aW1lPzogbnVtYmVyIH1cblxudHlwZSBTcHlFdmVudCA9IFB1cmVTcHlFdmVudCAmIHsgc3B5UmVwb3J0U3RhcnQ/OiB0cnVlIH1cblxuZXhwb3J0IGZ1bmN0aW9uIHNweVJlcG9ydChldmVudDogU3B5RXZlbnQpIHtcbiAgICBpZiAoIV9fREVWX18pIHtcbiAgICAgICAgcmV0dXJuXG4gICAgfSAvLyBkZWFkIGNvZGUgZWxpbWluYXRpb24gY2FuIGRvIHRoZSByZXN0XG4gICAgaWYgKCFnbG9iYWxTdGF0ZS5zcHlMaXN0ZW5lcnMubGVuZ3RoKSB7XG4gICAgICAgIHJldHVyblxuICAgIH1cbiAgICBjb25zdCBsaXN0ZW5lcnMgPSBnbG9iYWxTdGF0ZS5zcHlMaXN0ZW5lcnNcbiAgICBmb3IgKGxldCBpID0gMCwgbCA9IGxpc3RlbmVycy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgbGlzdGVuZXJzW2ldKGV2ZW50KVxuICAgIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNweVJlcG9ydFN0YXJ0KGV2ZW50OiBQdXJlU3B5RXZlbnQpIHtcbiAgICBpZiAoIV9fREVWX18pIHtcbiAgICAgICAgcmV0dXJuXG4gICAgfVxuICAgIGNvbnN0IGNoYW5nZSA9IHsgLi4uZXZlbnQsIHNweVJlcG9ydFN0YXJ0OiB0cnVlIGFzIGNvbnN0IH1cbiAgICBzcHlSZXBvcnQoY2hhbmdlKVxufVxuXG5jb25zdCBFTkRfRVZFTlQ6IFNweUV2ZW50ID0geyB0eXBlOiBcInJlcG9ydC1lbmRcIiwgc3B5UmVwb3J0RW5kOiB0cnVlIH1cblxuZXhwb3J0IGZ1bmN0aW9uIHNweVJlcG9ydEVuZChjaGFuZ2U/OiB7IHRpbWU/OiBudW1iZXIgfSkge1xuICAgIGlmICghX19ERVZfXykge1xuICAgICAgICByZXR1cm5cbiAgICB9XG4gICAgaWYgKGNoYW5nZSkge1xuICAgICAgICBzcHlSZXBvcnQoeyAuLi5jaGFuZ2UsIHR5cGU6IFwicmVwb3J0LWVuZFwiLCBzcHlSZXBvcnRFbmQ6IHRydWUgfSlcbiAgICB9IGVsc2Uge1xuICAgICAgICBzcHlSZXBvcnQoRU5EX0VWRU5UKVxuICAgIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNweShsaXN0ZW5lcjogKGNoYW5nZTogU3B5RXZlbnQpID0+IHZvaWQpOiBMYW1iZGEge1xuICAgIGlmICghX19ERVZfXykge1xuICAgICAgICBjb25zb2xlLndhcm4oYFttb2J4LnNweV0gSXMgYSBuby1vcCBpbiBwcm9kdWN0aW9uIGJ1aWxkc2ApXG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7fVxuICAgIH0gZWxzZSB7XG4gICAgICAgIGdsb2JhbFN0YXRlLnNweUxpc3RlbmVycy5wdXNoKGxpc3RlbmVyKVxuICAgICAgICByZXR1cm4gb25jZSgoKSA9PiB7XG4gICAgICAgICAgICBnbG9iYWxTdGF0ZS5zcHlMaXN0ZW5lcnMgPSBnbG9iYWxTdGF0ZS5zcHlMaXN0ZW5lcnMuZmlsdGVyKGwgPT4gbCAhPT0gbGlzdGVuZXIpXG4gICAgICAgIH0pXG4gICAgfVxufVxuIiwiaW1wb3J0IHtcbiAgICBjcmVhdGVBY3Rpb24sXG4gICAgZXhlY3V0ZUFjdGlvbixcbiAgICBBbm5vdGF0aW9uLFxuICAgIHN0b3JlQW5ub3RhdGlvbixcbiAgICBkaWUsXG4gICAgaXNGdW5jdGlvbixcbiAgICBpc1N0cmluZ2lzaCxcbiAgICBjcmVhdGVEZWNvcmF0b3JBbm5vdGF0aW9uLFxuICAgIGNyZWF0ZUFjdGlvbkFubm90YXRpb24sXG4gICAgaXMyMDIyM0RlY29yYXRvclxufSBmcm9tIFwiLi4vaW50ZXJuYWxcIlxuXG5pbXBvcnQgdHlwZSB7IENsYXNzRmllbGREZWNvcmF0b3IsIENsYXNzTWV0aG9kRGVjb3JhdG9yIH0gZnJvbSBcIi4uL3R5cGVzL2RlY29yYXRvcl9maWxsc1wiXG5cbmV4cG9ydCBjb25zdCBBQ1RJT04gPSBcImFjdGlvblwiXG5leHBvcnQgY29uc3QgQUNUSU9OX0JPVU5EID0gXCJhY3Rpb24uYm91bmRcIlxuZXhwb3J0IGNvbnN0IEFVVE9BQ1RJT04gPSBcImF1dG9BY3Rpb25cIlxuZXhwb3J0IGNvbnN0IEFVVE9BQ1RJT05fQk9VTkQgPSBcImF1dG9BY3Rpb24uYm91bmRcIlxuXG5jb25zdCBERUZBVUxUX0FDVElPTl9OQU1FID0gXCI8dW5uYW1lZCBhY3Rpb24+XCJcblxuY29uc3QgYWN0aW9uQW5ub3RhdGlvbiA9IGNyZWF0ZUFjdGlvbkFubm90YXRpb24oQUNUSU9OKVxuY29uc3QgYWN0aW9uQm91bmRBbm5vdGF0aW9uID0gY3JlYXRlQWN0aW9uQW5ub3RhdGlvbihBQ1RJT05fQk9VTkQsIHtcbiAgICBib3VuZDogdHJ1ZVxufSlcbmNvbnN0IGF1dG9BY3Rpb25Bbm5vdGF0aW9uID0gY3JlYXRlQWN0aW9uQW5ub3RhdGlvbihBVVRPQUNUSU9OLCB7XG4gICAgYXV0b0FjdGlvbjogdHJ1ZVxufSlcbmNvbnN0IGF1dG9BY3Rpb25Cb3VuZEFubm90YXRpb24gPSBjcmVhdGVBY3Rpb25Bbm5vdGF0aW9uKEFVVE9BQ1RJT05fQk9VTkQsIHtcbiAgICBhdXRvQWN0aW9uOiB0cnVlLFxuICAgIGJvdW5kOiB0cnVlXG59KVxuXG5leHBvcnQgaW50ZXJmYWNlIElBY3Rpb25GYWN0b3J5XG4gICAgZXh0ZW5kcyBBbm5vdGF0aW9uLFxuICAgICAgICBQcm9wZXJ0eURlY29yYXRvcixcbiAgICAgICAgQ2xhc3NNZXRob2REZWNvcmF0b3IsXG4gICAgICAgIENsYXNzRmllbGREZWNvcmF0b3Ige1xuICAgIC8vIG5hbWVsZXNzIGFjdGlvbnNcbiAgICA8VCBleHRlbmRzIEZ1bmN0aW9uIHwgdW5kZWZpbmVkIHwgbnVsbD4oZm46IFQpOiBUXG4gICAgLy8gbmFtZWQgYWN0aW9uc1xuICAgIDxUIGV4dGVuZHMgRnVuY3Rpb24gfCB1bmRlZmluZWQgfCBudWxsPihuYW1lOiBzdHJpbmcsIGZuOiBUKTogVFxuXG4gICAgLy8gbmFtZWQgZGVjb3JhdG9yXG4gICAgKGN1c3RvbU5hbWU6IHN0cmluZyk6IFByb3BlcnR5RGVjb3JhdG9yICZcbiAgICAgICAgQW5ub3RhdGlvbiAmXG4gICAgICAgIENsYXNzTWV0aG9kRGVjb3JhdG9yICZcbiAgICAgICAgQ2xhc3NGaWVsZERlY29yYXRvclxuXG4gICAgLy8gZGVjb3JhdG9yIChuYW1lIG5vIGxvbmdlciBzdXBwb3J0ZWQpXG4gICAgYm91bmQ6IEFubm90YXRpb24gJiBQcm9wZXJ0eURlY29yYXRvciAmIENsYXNzTWV0aG9kRGVjb3JhdG9yICYgQ2xhc3NGaWVsZERlY29yYXRvclxufVxuXG5mdW5jdGlvbiBjcmVhdGVBY3Rpb25GYWN0b3J5KGF1dG9BY3Rpb246IGJvb2xlYW4pOiBJQWN0aW9uRmFjdG9yeSB7XG4gICAgY29uc3QgcmVzOiBJQWN0aW9uRmFjdG9yeSA9IGZ1bmN0aW9uIGFjdGlvbihhcmcxLCBhcmcyPyk6IGFueSB7XG4gICAgICAgIC8vIGFjdGlvbihmbigpIHt9KVxuICAgICAgICBpZiAoaXNGdW5jdGlvbihhcmcxKSkge1xuICAgICAgICAgICAgcmV0dXJuIGNyZWF0ZUFjdGlvbihhcmcxLm5hbWUgfHwgREVGQVVMVF9BQ1RJT05fTkFNRSwgYXJnMSwgYXV0b0FjdGlvbilcbiAgICAgICAgfVxuICAgICAgICAvLyBhY3Rpb24oXCJuYW1lXCIsIGZuKCkge30pXG4gICAgICAgIGlmIChpc0Z1bmN0aW9uKGFyZzIpKSB7XG4gICAgICAgICAgICByZXR1cm4gY3JlYXRlQWN0aW9uKGFyZzEsIGFyZzIsIGF1dG9BY3Rpb24pXG4gICAgICAgIH1cbiAgICAgICAgLy8gQGFjdGlvbiAoMjAyMi4zIERlY29yYXRvcnMpXG4gICAgICAgIGlmIChpczIwMjIzRGVjb3JhdG9yKGFyZzIpKSB7XG4gICAgICAgICAgICByZXR1cm4gKGF1dG9BY3Rpb24gPyBhdXRvQWN0aW9uQW5ub3RhdGlvbiA6IGFjdGlvbkFubm90YXRpb24pLmRlY29yYXRlXzIwMjIzXyhcbiAgICAgICAgICAgICAgICBhcmcxLFxuICAgICAgICAgICAgICAgIGFyZzJcbiAgICAgICAgICAgIClcbiAgICAgICAgfVxuICAgICAgICAvLyBAYWN0aW9uXG4gICAgICAgIGlmIChpc1N0cmluZ2lzaChhcmcyKSkge1xuICAgICAgICAgICAgcmV0dXJuIHN0b3JlQW5ub3RhdGlvbihhcmcxLCBhcmcyLCBhdXRvQWN0aW9uID8gYXV0b0FjdGlvbkFubm90YXRpb24gOiBhY3Rpb25Bbm5vdGF0aW9uKVxuICAgICAgICB9XG4gICAgICAgIC8vIGFjdGlvbihcIm5hbWVcIikgJiBAYWN0aW9uKFwibmFtZVwiKVxuICAgICAgICBpZiAoaXNTdHJpbmdpc2goYXJnMSkpIHtcbiAgICAgICAgICAgIHJldHVybiBjcmVhdGVEZWNvcmF0b3JBbm5vdGF0aW9uKFxuICAgICAgICAgICAgICAgIGNyZWF0ZUFjdGlvbkFubm90YXRpb24oYXV0b0FjdGlvbiA/IEFVVE9BQ1RJT04gOiBBQ1RJT04sIHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogYXJnMSxcbiAgICAgICAgICAgICAgICAgICAgYXV0b0FjdGlvblxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICApXG4gICAgICAgIH1cblxuICAgICAgICBpZiAoX19ERVZfXykge1xuICAgICAgICAgICAgZGllKFwiSW52YWxpZCBhcmd1bWVudHMgZm9yIGBhY3Rpb25gXCIpXG4gICAgICAgIH1cbiAgICB9IGFzIElBY3Rpb25GYWN0b3J5XG4gICAgcmV0dXJuIHJlc1xufVxuXG5leHBvcnQgY29uc3QgYWN0aW9uOiBJQWN0aW9uRmFjdG9yeSA9IGNyZWF0ZUFjdGlvbkZhY3RvcnkoZmFsc2UpXG5PYmplY3QuYXNzaWduKGFjdGlvbiwgYWN0aW9uQW5ub3RhdGlvbilcbmV4cG9ydCBjb25zdCBhdXRvQWN0aW9uOiBJQWN0aW9uRmFjdG9yeSA9IGNyZWF0ZUFjdGlvbkZhY3RvcnkodHJ1ZSlcbk9iamVjdC5hc3NpZ24oYXV0b0FjdGlvbiwgYXV0b0FjdGlvbkFubm90YXRpb24pXG5cbmFjdGlvbi5ib3VuZCA9IGNyZWF0ZURlY29yYXRvckFubm90YXRpb24oYWN0aW9uQm91bmRBbm5vdGF0aW9uKVxuYXV0b0FjdGlvbi5ib3VuZCA9IGNyZWF0ZURlY29yYXRvckFubm90YXRpb24oYXV0b0FjdGlvbkJvdW5kQW5ub3RhdGlvbilcblxuZXhwb3J0IGZ1bmN0aW9uIHJ1bkluQWN0aW9uPFQ+KGZuOiAoKSA9PiBUKTogVCB7XG4gICAgcmV0dXJuIGV4ZWN1dGVBY3Rpb24oZm4ubmFtZSB8fCBERUZBVUxUX0FDVElPTl9OQU1FLCBmYWxzZSwgZm4sIHRoaXMsIHVuZGVmaW5lZClcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzQWN0aW9uKHRoaW5nOiBhbnkpIHtcbiAgICByZXR1cm4gaXNGdW5jdGlvbih0aGluZykgJiYgdGhpbmcuaXNNb2J4QWN0aW9uID09PSB0cnVlXG59XG4iLCJpbXBvcnQge1xuICAgIEVNUFRZX09CSkVDVCxcbiAgICBJRXF1YWxzQ29tcGFyZXIsXG4gICAgSVJlYWN0aW9uRGlzcG9zZXIsXG4gICAgSVJlYWN0aW9uUHVibGljLFxuICAgIExhbWJkYSxcbiAgICBSZWFjdGlvbixcbiAgICBhY3Rpb24sXG4gICAgY29tcGFyZXIsXG4gICAgZ2V0TmV4dElkLFxuICAgIGlzQWN0aW9uLFxuICAgIGlzRnVuY3Rpb24sXG4gICAgaXNQbGFpbk9iamVjdCxcbiAgICBkaWUsXG4gICAgYWxsb3dTdGF0ZUNoYW5nZXMsXG4gICAgR2VuZXJpY0Fib3J0U2lnbmFsXG59IGZyb20gXCIuLi9pbnRlcm5hbFwiXG5cbmV4cG9ydCBpbnRlcmZhY2UgSUF1dG9ydW5PcHRpb25zIHtcbiAgICBkZWxheT86IG51bWJlclxuICAgIG5hbWU/OiBzdHJpbmdcbiAgICAvKipcbiAgICAgKiBFeHBlcmltZW50YWwuXG4gICAgICogV2FybnMgaWYgdGhlIHZpZXcgZG9lc24ndCB0cmFjayBvYnNlcnZhYmxlc1xuICAgICAqL1xuICAgIHJlcXVpcmVzT2JzZXJ2YWJsZT86IGJvb2xlYW5cbiAgICBzY2hlZHVsZXI/OiAoY2FsbGJhY2s6ICgpID0+IHZvaWQpID0+IGFueVxuICAgIG9uRXJyb3I/OiAoZXJyb3I6IGFueSkgPT4gdm9pZFxuICAgIHNpZ25hbD86IEdlbmVyaWNBYm9ydFNpZ25hbFxufVxuXG4vKipcbiAqIENyZWF0ZXMgYSBuYW1lZCByZWFjdGl2ZSB2aWV3IGFuZCBrZWVwcyBpdCBhbGl2ZSwgc28gdGhhdCB0aGUgdmlldyBpcyBhbHdheXNcbiAqIHVwZGF0ZWQgaWYgb25lIG9mIHRoZSBkZXBlbmRlbmNpZXMgY2hhbmdlcywgZXZlbiB3aGVuIHRoZSB2aWV3IGlzIG5vdCBmdXJ0aGVyIHVzZWQgYnkgc29tZXRoaW5nIGVsc2UuXG4gKiBAcGFyYW0gdmlldyBUaGUgcmVhY3RpdmUgdmlld1xuICogQHJldHVybnMgZGlzcG9zZXIgZnVuY3Rpb24sIHdoaWNoIGNhbiBiZSB1c2VkIHRvIHN0b3AgdGhlIHZpZXcgZnJvbSBiZWluZyB1cGRhdGVkIGluIHRoZSBmdXR1cmUuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBhdXRvcnVuKFxuICAgIHZpZXc6IChyOiBJUmVhY3Rpb25QdWJsaWMpID0+IGFueSxcbiAgICBvcHRzOiBJQXV0b3J1bk9wdGlvbnMgPSBFTVBUWV9PQkpFQ1Rcbik6IElSZWFjdGlvbkRpc3Bvc2VyIHtcbiAgICBpZiAoX19ERVZfXykge1xuICAgICAgICBpZiAoIWlzRnVuY3Rpb24odmlldykpIHtcbiAgICAgICAgICAgIGRpZShcIkF1dG9ydW4gZXhwZWN0cyBhIGZ1bmN0aW9uIGFzIGZpcnN0IGFyZ3VtZW50XCIpXG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzQWN0aW9uKHZpZXcpKSB7XG4gICAgICAgICAgICBkaWUoXCJBdXRvcnVuIGRvZXMgbm90IGFjY2VwdCBhY3Rpb25zIHNpbmNlIGFjdGlvbnMgYXJlIHVudHJhY2thYmxlXCIpXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBjb25zdCBuYW1lOiBzdHJpbmcgPVxuICAgICAgICBvcHRzPy5uYW1lID8/IChfX0RFVl9fID8gKHZpZXcgYXMgYW55KS5uYW1lIHx8IFwiQXV0b3J1bkBcIiArIGdldE5leHRJZCgpIDogXCJBdXRvcnVuXCIpXG4gICAgY29uc3QgcnVuU3luYyA9ICFvcHRzLnNjaGVkdWxlciAmJiAhb3B0cy5kZWxheVxuICAgIGxldCByZWFjdGlvbjogUmVhY3Rpb25cblxuICAgIGlmIChydW5TeW5jKSB7XG4gICAgICAgIC8vIG5vcm1hbCBhdXRvcnVuXG4gICAgICAgIHJlYWN0aW9uID0gbmV3IFJlYWN0aW9uKFxuICAgICAgICAgICAgbmFtZSxcbiAgICAgICAgICAgIGZ1bmN0aW9uICh0aGlzOiBSZWFjdGlvbikge1xuICAgICAgICAgICAgICAgIHRoaXMudHJhY2socmVhY3Rpb25SdW5uZXIpXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgb3B0cy5vbkVycm9yLFxuICAgICAgICAgICAgb3B0cy5yZXF1aXJlc09ic2VydmFibGVcbiAgICAgICAgKVxuICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnN0IHNjaGVkdWxlciA9IGNyZWF0ZVNjaGVkdWxlckZyb21PcHRpb25zKG9wdHMpXG4gICAgICAgIC8vIGRlYm91bmNlZCBhdXRvcnVuXG4gICAgICAgIGxldCBpc1NjaGVkdWxlZCA9IGZhbHNlXG5cbiAgICAgICAgcmVhY3Rpb24gPSBuZXcgUmVhY3Rpb24oXG4gICAgICAgICAgICBuYW1lLFxuICAgICAgICAgICAgKCkgPT4ge1xuICAgICAgICAgICAgICAgIGlmICghaXNTY2hlZHVsZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgaXNTY2hlZHVsZWQgPSB0cnVlXG4gICAgICAgICAgICAgICAgICAgIHNjaGVkdWxlcigoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpc1NjaGVkdWxlZCA9IGZhbHNlXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXJlYWN0aW9uLmlzRGlzcG9zZWRfKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVhY3Rpb24udHJhY2socmVhY3Rpb25SdW5uZXIpXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG9wdHMub25FcnJvcixcbiAgICAgICAgICAgIG9wdHMucmVxdWlyZXNPYnNlcnZhYmxlXG4gICAgICAgIClcbiAgICB9XG5cbiAgICBmdW5jdGlvbiByZWFjdGlvblJ1bm5lcigpIHtcbiAgICAgICAgdmlldyhyZWFjdGlvbilcbiAgICB9XG5cbiAgICBpZighb3B0cz8uc2lnbmFsPy5hYm9ydGVkKSB7XG4gICAgICAgIHJlYWN0aW9uLnNjaGVkdWxlXygpXG4gICAgfVxuICAgIHJldHVybiByZWFjdGlvbi5nZXREaXNwb3Nlcl8ob3B0cz8uc2lnbmFsKVxufVxuXG5leHBvcnQgdHlwZSBJUmVhY3Rpb25PcHRpb25zPFQsIEZpcmVJbW1lZGlhdGVseSBleHRlbmRzIGJvb2xlYW4+ID0gSUF1dG9ydW5PcHRpb25zICYge1xuICAgIGZpcmVJbW1lZGlhdGVseT86IEZpcmVJbW1lZGlhdGVseVxuICAgIGVxdWFscz86IElFcXVhbHNDb21wYXJlcjxUPlxufVxuXG5jb25zdCBydW4gPSAoZjogTGFtYmRhKSA9PiBmKClcblxuZnVuY3Rpb24gY3JlYXRlU2NoZWR1bGVyRnJvbU9wdGlvbnMob3B0czogSUF1dG9ydW5PcHRpb25zKSB7XG4gICAgcmV0dXJuIG9wdHMuc2NoZWR1bGVyXG4gICAgICAgID8gb3B0cy5zY2hlZHVsZXJcbiAgICAgICAgOiBvcHRzLmRlbGF5XG4gICAgICAgID8gKGY6IExhbWJkYSkgPT4gc2V0VGltZW91dChmLCBvcHRzLmRlbGF5ISlcbiAgICAgICAgOiBydW5cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJlYWN0aW9uPFQsIEZpcmVJbW1lZGlhdGVseSBleHRlbmRzIGJvb2xlYW4gPSBmYWxzZT4oXG4gICAgZXhwcmVzc2lvbjogKHI6IElSZWFjdGlvblB1YmxpYykgPT4gVCxcbiAgICBlZmZlY3Q6IChcbiAgICAgICAgYXJnOiBULFxuICAgICAgICBwcmV2OiBGaXJlSW1tZWRpYXRlbHkgZXh0ZW5kcyB0cnVlID8gVCB8IHVuZGVmaW5lZCA6IFQsXG4gICAgICAgIHI6IElSZWFjdGlvblB1YmxpY1xuICAgICkgPT4gdm9pZCxcbiAgICBvcHRzOiBJUmVhY3Rpb25PcHRpb25zPFQsIEZpcmVJbW1lZGlhdGVseT4gPSBFTVBUWV9PQkpFQ1Rcbik6IElSZWFjdGlvbkRpc3Bvc2VyIHtcbiAgICBpZiAoX19ERVZfXykge1xuICAgICAgICBpZiAoIWlzRnVuY3Rpb24oZXhwcmVzc2lvbikgfHwgIWlzRnVuY3Rpb24oZWZmZWN0KSkge1xuICAgICAgICAgICAgZGllKFwiRmlyc3QgYW5kIHNlY29uZCBhcmd1bWVudCB0byByZWFjdGlvbiBzaG91bGQgYmUgZnVuY3Rpb25zXCIpXG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFpc1BsYWluT2JqZWN0KG9wdHMpKSB7XG4gICAgICAgICAgICBkaWUoXCJUaGlyZCBhcmd1bWVudCBvZiByZWFjdGlvbnMgc2hvdWxkIGJlIGFuIG9iamVjdFwiKVxuICAgICAgICB9XG4gICAgfVxuICAgIGNvbnN0IG5hbWUgPSBvcHRzLm5hbWUgPz8gKF9fREVWX18gPyBcIlJlYWN0aW9uQFwiICsgZ2V0TmV4dElkKCkgOiBcIlJlYWN0aW9uXCIpXG4gICAgY29uc3QgZWZmZWN0QWN0aW9uID0gYWN0aW9uKFxuICAgICAgICBuYW1lLFxuICAgICAgICBvcHRzLm9uRXJyb3IgPyB3cmFwRXJyb3JIYW5kbGVyKG9wdHMub25FcnJvciwgZWZmZWN0KSA6IGVmZmVjdFxuICAgIClcbiAgICBjb25zdCBydW5TeW5jID0gIW9wdHMuc2NoZWR1bGVyICYmICFvcHRzLmRlbGF5XG4gICAgY29uc3Qgc2NoZWR1bGVyID0gY3JlYXRlU2NoZWR1bGVyRnJvbU9wdGlvbnMob3B0cylcblxuICAgIGxldCBmaXJzdFRpbWUgPSB0cnVlXG4gICAgbGV0IGlzU2NoZWR1bGVkID0gZmFsc2VcbiAgICBsZXQgdmFsdWU6IFRcblxuICAgIGNvbnN0IGVxdWFsczogSUVxdWFsc0NvbXBhcmVyPFQ+ID0gKG9wdHMgYXMgYW55KS5jb21wYXJlU3RydWN0dXJhbFxuICAgICAgICA/IGNvbXBhcmVyLnN0cnVjdHVyYWxcbiAgICAgICAgOiBvcHRzLmVxdWFscyB8fCBjb21wYXJlci5kZWZhdWx0XG5cbiAgICBjb25zdCByID0gbmV3IFJlYWN0aW9uKFxuICAgICAgICBuYW1lLFxuICAgICAgICAoKSA9PiB7XG4gICAgICAgICAgICBpZiAoZmlyc3RUaW1lIHx8IHJ1blN5bmMpIHtcbiAgICAgICAgICAgICAgICByZWFjdGlvblJ1bm5lcigpXG4gICAgICAgICAgICB9IGVsc2UgaWYgKCFpc1NjaGVkdWxlZCkge1xuICAgICAgICAgICAgICAgIGlzU2NoZWR1bGVkID0gdHJ1ZVxuICAgICAgICAgICAgICAgIHNjaGVkdWxlciEocmVhY3Rpb25SdW5uZXIpXG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIG9wdHMub25FcnJvcixcbiAgICAgICAgb3B0cy5yZXF1aXJlc09ic2VydmFibGVcbiAgICApXG5cbiAgICBmdW5jdGlvbiByZWFjdGlvblJ1bm5lcigpIHtcbiAgICAgICAgaXNTY2hlZHVsZWQgPSBmYWxzZVxuICAgICAgICBpZiAoci5pc0Rpc3Bvc2VkXykge1xuICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgIH1cbiAgICAgICAgbGV0IGNoYW5nZWQ6IGJvb2xlYW4gPSBmYWxzZVxuICAgICAgICBjb25zdCBvbGRWYWx1ZSA9IHZhbHVlXG4gICAgICAgIHIudHJhY2soKCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgbmV4dFZhbHVlID0gYWxsb3dTdGF0ZUNoYW5nZXMoZmFsc2UsICgpID0+IGV4cHJlc3Npb24ocikpXG4gICAgICAgICAgICBjaGFuZ2VkID0gZmlyc3RUaW1lIHx8ICFlcXVhbHModmFsdWUsIG5leHRWYWx1ZSlcbiAgICAgICAgICAgIHZhbHVlID0gbmV4dFZhbHVlXG4gICAgICAgIH0pXG5cbiAgICAgICAgLy8gVGhpcyBjYXN0aW5nIGlzIG5lc2Vzc2FyeSBhcyBUUyBjYW5ub3QgaW5mZXIgcHJvcGVyIHR5cGUgaW4gY3VycmVudCBmdW5jdGlvbiBpbXBsZW1lbnRhdGlvblxuICAgICAgICB0eXBlIE9sZFZhbHVlID0gRmlyZUltbWVkaWF0ZWx5IGV4dGVuZHMgdHJ1ZSA/IFQgfCB1bmRlZmluZWQgOiBUXG4gICAgICAgIGlmIChmaXJzdFRpbWUgJiYgb3B0cy5maXJlSW1tZWRpYXRlbHkhKSB7XG4gICAgICAgICAgICBlZmZlY3RBY3Rpb24odmFsdWUsIG9sZFZhbHVlIGFzIE9sZFZhbHVlLCByKVxuICAgICAgICB9IGVsc2UgaWYgKCFmaXJzdFRpbWUgJiYgY2hhbmdlZCkge1xuICAgICAgICAgICAgZWZmZWN0QWN0aW9uKHZhbHVlLCBvbGRWYWx1ZSBhcyBPbGRWYWx1ZSwgcilcbiAgICAgICAgfVxuICAgICAgICBmaXJzdFRpbWUgPSBmYWxzZVxuICAgIH1cblxuICAgIGlmKCFvcHRzPy5zaWduYWw/LmFib3J0ZWQpIHtcbiAgICAgICAgci5zY2hlZHVsZV8oKVxuICAgIH1cbiAgICByZXR1cm4gci5nZXREaXNwb3Nlcl8ob3B0cz8uc2lnbmFsKVxufVxuXG5mdW5jdGlvbiB3cmFwRXJyb3JIYW5kbGVyKGVycm9ySGFuZGxlciwgYmFzZUZuKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHJldHVybiBiYXNlRm4uYXBwbHkodGhpcywgYXJndW1lbnRzKVxuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICBlcnJvckhhbmRsZXIuY2FsbCh0aGlzLCBlKVxuICAgICAgICB9XG4gICAgfVxufVxuIiwiaW1wb3J0IHtcbiAgICBJQ29tcHV0ZWRWYWx1ZSxcbiAgICBJT2JzZXJ2YWJsZSxcbiAgICBJT2JzZXJ2YWJsZUFycmF5LFxuICAgIExhbWJkYSxcbiAgICBPYnNlcnZhYmxlTWFwLFxuICAgIGdldEF0b20sXG4gICAgT2JzZXJ2YWJsZVNldCxcbiAgICBpc0Z1bmN0aW9uLFxuICAgIElPYnNlcnZhYmxlVmFsdWVcbn0gZnJvbSBcIi4uL2ludGVybmFsXCJcblxuY29uc3QgT05fQkVDT01FX09CU0VSVkVEID0gXCJvbkJPXCJcbmNvbnN0IE9OX0JFQ09NRV9VTk9CU0VSVkVEID0gXCJvbkJVT1wiXG5cbmV4cG9ydCBmdW5jdGlvbiBvbkJlY29tZU9ic2VydmVkKFxuICAgIHZhbHVlOlxuICAgICAgICB8IElPYnNlcnZhYmxlXG4gICAgICAgIHwgSUNvbXB1dGVkVmFsdWU8YW55PlxuICAgICAgICB8IElPYnNlcnZhYmxlQXJyYXk8YW55PlxuICAgICAgICB8IE9ic2VydmFibGVNYXA8YW55LCBhbnk+XG4gICAgICAgIHwgT2JzZXJ2YWJsZVNldDxhbnk+XG4gICAgICAgIHwgSU9ic2VydmFibGVWYWx1ZTxhbnk+LFxuICAgIGxpc3RlbmVyOiBMYW1iZGFcbik6IExhbWJkYVxuZXhwb3J0IGZ1bmN0aW9uIG9uQmVjb21lT2JzZXJ2ZWQ8SywgViA9IGFueT4oXG4gICAgdmFsdWU6IE9ic2VydmFibGVNYXA8SywgVj4gfCBPYmplY3QsXG4gICAgcHJvcGVydHk6IEssXG4gICAgbGlzdGVuZXI6IExhbWJkYVxuKTogTGFtYmRhXG5leHBvcnQgZnVuY3Rpb24gb25CZWNvbWVPYnNlcnZlZCh0aGluZywgYXJnMiwgYXJnMz8pOiBMYW1iZGEge1xuICAgIHJldHVybiBpbnRlcmNlcHRIb29rKE9OX0JFQ09NRV9PQlNFUlZFRCwgdGhpbmcsIGFyZzIsIGFyZzMpXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBvbkJlY29tZVVub2JzZXJ2ZWQoXG4gICAgdmFsdWU6XG4gICAgICAgIHwgSU9ic2VydmFibGVcbiAgICAgICAgfCBJQ29tcHV0ZWRWYWx1ZTxhbnk+XG4gICAgICAgIHwgSU9ic2VydmFibGVBcnJheTxhbnk+XG4gICAgICAgIHwgT2JzZXJ2YWJsZU1hcDxhbnksIGFueT5cbiAgICAgICAgfCBPYnNlcnZhYmxlU2V0PGFueT5cbiAgICAgICAgfCBJT2JzZXJ2YWJsZVZhbHVlPGFueT4sXG4gICAgbGlzdGVuZXI6IExhbWJkYVxuKTogTGFtYmRhXG5leHBvcnQgZnVuY3Rpb24gb25CZWNvbWVVbm9ic2VydmVkPEssIFYgPSBhbnk+KFxuICAgIHZhbHVlOiBPYnNlcnZhYmxlTWFwPEssIFY+IHwgT2JqZWN0LFxuICAgIHByb3BlcnR5OiBLLFxuICAgIGxpc3RlbmVyOiBMYW1iZGFcbik6IExhbWJkYVxuZXhwb3J0IGZ1bmN0aW9uIG9uQmVjb21lVW5vYnNlcnZlZCh0aGluZywgYXJnMiwgYXJnMz8pOiBMYW1iZGEge1xuICAgIHJldHVybiBpbnRlcmNlcHRIb29rKE9OX0JFQ09NRV9VTk9CU0VSVkVELCB0aGluZywgYXJnMiwgYXJnMylcbn1cblxuZnVuY3Rpb24gaW50ZXJjZXB0SG9vayhob29rOiBcIm9uQk9cIiB8IFwib25CVU9cIiwgdGhpbmcsIGFyZzIsIGFyZzMpIHtcbiAgICBjb25zdCBhdG9tOiBJT2JzZXJ2YWJsZSA9XG4gICAgICAgIHR5cGVvZiBhcmczID09PSBcImZ1bmN0aW9uXCIgPyBnZXRBdG9tKHRoaW5nLCBhcmcyKSA6IChnZXRBdG9tKHRoaW5nKSBhcyBhbnkpXG4gICAgY29uc3QgY2IgPSBpc0Z1bmN0aW9uKGFyZzMpID8gYXJnMyA6IGFyZzJcbiAgICBjb25zdCBsaXN0ZW5lcnNLZXkgPSBgJHtob29rfUxgIGFzIFwib25CT0xcIiB8IFwib25CVU9MXCJcblxuICAgIGlmIChhdG9tW2xpc3RlbmVyc0tleV0pIHtcbiAgICAgICAgYXRvbVtsaXN0ZW5lcnNLZXldIS5hZGQoY2IpXG4gICAgfSBlbHNlIHtcbiAgICAgICAgYXRvbVtsaXN0ZW5lcnNLZXldID0gbmV3IFNldDxMYW1iZGE+KFtjYl0pXG4gICAgfVxuXG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgY29uc3QgaG9va0xpc3RlbmVycyA9IGF0b21bbGlzdGVuZXJzS2V5XVxuICAgICAgICBpZiAoaG9va0xpc3RlbmVycykge1xuICAgICAgICAgICAgaG9va0xpc3RlbmVycy5kZWxldGUoY2IpXG4gICAgICAgICAgICBpZiAoaG9va0xpc3RlbmVycy5zaXplID09PSAwKSB7XG4gICAgICAgICAgICAgICAgZGVsZXRlIGF0b21bbGlzdGVuZXJzS2V5XVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgZ2xvYmFsU3RhdGUsIGlzb2xhdGVHbG9iYWxTdGF0ZSwgc2V0UmVhY3Rpb25TY2hlZHVsZXIgfSBmcm9tIFwiLi4vaW50ZXJuYWxcIlxuXG5jb25zdCBORVZFUiA9IFwibmV2ZXJcIlxuY29uc3QgQUxXQVlTID0gXCJhbHdheXNcIlxuY29uc3QgT0JTRVJWRUQgPSBcIm9ic2VydmVkXCJcbi8vIGNvbnN0IElGX0FWQUlMQUJMRSA9IFwiaWZhdmFpbGFibGVcIlxuXG5leHBvcnQgZnVuY3Rpb24gY29uZmlndXJlKG9wdGlvbnM6IHtcbiAgICBlbmZvcmNlQWN0aW9ucz86IFwibmV2ZXJcIiB8IFwiYWx3YXlzXCIgfCBcIm9ic2VydmVkXCJcbiAgICBjb21wdXRlZFJlcXVpcmVzUmVhY3Rpb24/OiBib29sZWFuXG4gICAgLyoqXG4gICAgICogV2FybiBpZiB5b3UgdHJ5IHRvIGNyZWF0ZSB0byBkZXJpdmF0aW9uIC8gcmVhY3RpdmUgY29udGV4dCB3aXRob3V0IGFjY2Vzc2luZyBhbnkgb2JzZXJ2YWJsZS5cbiAgICAgKi9cbiAgICByZWFjdGlvblJlcXVpcmVzT2JzZXJ2YWJsZT86IGJvb2xlYW5cbiAgICAvKipcbiAgICAgKiBXYXJuIGlmIG9ic2VydmFibGVzIGFyZSBhY2Nlc3NlZCBvdXRzaWRlIGEgcmVhY3RpdmUgY29udGV4dFxuICAgICAqL1xuICAgIG9ic2VydmFibGVSZXF1aXJlc1JlYWN0aW9uPzogYm9vbGVhblxuICAgIGlzb2xhdGVHbG9iYWxTdGF0ZT86IGJvb2xlYW5cbiAgICBkaXNhYmxlRXJyb3JCb3VuZGFyaWVzPzogYm9vbGVhblxuICAgIHNhZmVEZXNjcmlwdG9ycz86IGJvb2xlYW5cbiAgICByZWFjdGlvblNjaGVkdWxlcj86IChmOiAoKSA9PiB2b2lkKSA9PiB2b2lkXG4gICAgdXNlUHJveGllcz86IFwiYWx3YXlzXCIgfCBcIm5ldmVyXCIgfCBcImlmYXZhaWxhYmxlXCJcbn0pOiB2b2lkIHtcbiAgICBpZiAob3B0aW9ucy5pc29sYXRlR2xvYmFsU3RhdGUgPT09IHRydWUpIHtcbiAgICAgICAgaXNvbGF0ZUdsb2JhbFN0YXRlKClcbiAgICB9XG4gICAgY29uc3QgeyB1c2VQcm94aWVzLCBlbmZvcmNlQWN0aW9ucyB9ID0gb3B0aW9uc1xuICAgIGlmICh1c2VQcm94aWVzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgZ2xvYmFsU3RhdGUudXNlUHJveGllcyA9XG4gICAgICAgICAgICB1c2VQcm94aWVzID09PSBBTFdBWVNcbiAgICAgICAgICAgICAgICA/IHRydWVcbiAgICAgICAgICAgICAgICA6IHVzZVByb3hpZXMgPT09IE5FVkVSXG4gICAgICAgICAgICAgICAgPyBmYWxzZVxuICAgICAgICAgICAgICAgIDogdHlwZW9mIFByb3h5ICE9PSBcInVuZGVmaW5lZFwiXG4gICAgfVxuICAgIGlmICh1c2VQcm94aWVzID09PSBcImlmYXZhaWxhYmxlXCIpIHtcbiAgICAgICAgZ2xvYmFsU3RhdGUudmVyaWZ5UHJveGllcyA9IHRydWVcbiAgICB9XG4gICAgaWYgKGVuZm9yY2VBY3Rpb25zICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgY29uc3QgZWEgPSBlbmZvcmNlQWN0aW9ucyA9PT0gQUxXQVlTID8gQUxXQVlTIDogZW5mb3JjZUFjdGlvbnMgPT09IE9CU0VSVkVEXG4gICAgICAgIGdsb2JhbFN0YXRlLmVuZm9yY2VBY3Rpb25zID0gZWFcbiAgICAgICAgZ2xvYmFsU3RhdGUuYWxsb3dTdGF0ZUNoYW5nZXMgPSBlYSA9PT0gdHJ1ZSB8fCBlYSA9PT0gQUxXQVlTID8gZmFsc2UgOiB0cnVlXG4gICAgfVxuICAgIDtbXG4gICAgICAgIFwiY29tcHV0ZWRSZXF1aXJlc1JlYWN0aW9uXCIsXG4gICAgICAgIFwicmVhY3Rpb25SZXF1aXJlc09ic2VydmFibGVcIixcbiAgICAgICAgXCJvYnNlcnZhYmxlUmVxdWlyZXNSZWFjdGlvblwiLFxuICAgICAgICBcImRpc2FibGVFcnJvckJvdW5kYXJpZXNcIixcbiAgICAgICAgXCJzYWZlRGVzY3JpcHRvcnNcIlxuICAgIF0uZm9yRWFjaChrZXkgPT4ge1xuICAgICAgICBpZiAoa2V5IGluIG9wdGlvbnMpIHtcbiAgICAgICAgICAgIGdsb2JhbFN0YXRlW2tleV0gPSAhIW9wdGlvbnNba2V5XVxuICAgICAgICB9XG4gICAgfSlcbiAgICBnbG9iYWxTdGF0ZS5hbGxvd1N0YXRlUmVhZHMgPSAhZ2xvYmFsU3RhdGUub2JzZXJ2YWJsZVJlcXVpcmVzUmVhY3Rpb25cbiAgICBpZiAoX19ERVZfXyAmJiBnbG9iYWxTdGF0ZS5kaXNhYmxlRXJyb3JCb3VuZGFyaWVzID09PSB0cnVlKSB7XG4gICAgICAgIGNvbnNvbGUud2FybihcbiAgICAgICAgICAgIFwiV0FSTklORzogRGVidWcgZmVhdHVyZSBvbmx5LiBNb2JYIHdpbGwgTk9UIHJlY292ZXIgZnJvbSBlcnJvcnMgd2hlbiBgZGlzYWJsZUVycm9yQm91bmRhcmllc2AgaXMgZW5hYmxlZC5cIlxuICAgICAgICApXG4gICAgfVxuICAgIGlmIChvcHRpb25zLnJlYWN0aW9uU2NoZWR1bGVyKSB7XG4gICAgICAgIHNldFJlYWN0aW9uU2NoZWR1bGVyKG9wdGlvbnMucmVhY3Rpb25TY2hlZHVsZXIpXG4gICAgfVxufVxuIiwiaW1wb3J0IHtcbiAgICBDcmVhdGVPYnNlcnZhYmxlT3B0aW9ucyxcbiAgICBpc09ic2VydmFibGVNYXAsXG4gICAgQW5ub3RhdGlvbnNNYXAsXG4gICAgYXNPYnNlcnZhYmxlT2JqZWN0LFxuICAgIGlzUGxhaW5PYmplY3QsXG4gICAgT2JzZXJ2YWJsZU9iamVjdEFkbWluaXN0cmF0aW9uLFxuICAgIGlzT2JzZXJ2YWJsZSxcbiAgICBkaWUsXG4gICAgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyxcbiAgICAkbW9ieCxcbiAgICBvd25LZXlzLFxuICAgIGluaXRPYnNlcnZhYmxlXG59IGZyb20gXCIuLi9pbnRlcm5hbFwiXG5cbmV4cG9ydCBmdW5jdGlvbiBleHRlbmRPYnNlcnZhYmxlPEEgZXh0ZW5kcyBPYmplY3QsIEIgZXh0ZW5kcyBPYmplY3Q+KFxuICAgIHRhcmdldDogQSxcbiAgICBwcm9wZXJ0aWVzOiBCLFxuICAgIGFubm90YXRpb25zPzogQW5ub3RhdGlvbnNNYXA8QiwgbmV2ZXI+LFxuICAgIG9wdGlvbnM/OiBDcmVhdGVPYnNlcnZhYmxlT3B0aW9uc1xuKTogQSAmIEIge1xuICAgIGlmIChfX0RFVl9fKSB7XG4gICAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID4gNCkge1xuICAgICAgICAgICAgZGllKFwiJ2V4dGVuZE9ic2VydmFibGUnIGV4cGVjdGVkIDItNCBhcmd1bWVudHNcIilcbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZW9mIHRhcmdldCAhPT0gXCJvYmplY3RcIikge1xuICAgICAgICAgICAgZGllKFwiJ2V4dGVuZE9ic2VydmFibGUnIGV4cGVjdHMgYW4gb2JqZWN0IGFzIGZpcnN0IGFyZ3VtZW50XCIpXG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzT2JzZXJ2YWJsZU1hcCh0YXJnZXQpKSB7XG4gICAgICAgICAgICBkaWUoXCInZXh0ZW5kT2JzZXJ2YWJsZScgc2hvdWxkIG5vdCBiZSB1c2VkIG9uIG1hcHMsIHVzZSBtYXAubWVyZ2UgaW5zdGVhZFwiKVxuICAgICAgICB9XG4gICAgICAgIGlmICghaXNQbGFpbk9iamVjdChwcm9wZXJ0aWVzKSkge1xuICAgICAgICAgICAgZGllKGAnZXh0ZW5kT2JzZXJ2YWJsZScgb25seSBhY2NlcHRzIHBsYWluIG9iamVjdHMgYXMgc2Vjb25kIGFyZ3VtZW50YClcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNPYnNlcnZhYmxlKHByb3BlcnRpZXMpIHx8IGlzT2JzZXJ2YWJsZShhbm5vdGF0aW9ucykpIHtcbiAgICAgICAgICAgIGRpZShgRXh0ZW5kaW5nIGFuIG9iamVjdCB3aXRoIGFub3RoZXIgb2JzZXJ2YWJsZSAob2JqZWN0KSBpcyBub3Qgc3VwcG9ydGVkYClcbiAgICAgICAgfVxuICAgIH1cbiAgICAvLyBQdWxsIGRlc2NyaXB0b3JzIGZpcnN0LCBzbyB3ZSBkb24ndCBoYXZlIHRvIGRlYWwgd2l0aCBwcm9wcyBhZGRlZCBieSBhZG1pbmlzdHJhdGlvbiAoJG1vYngpXG4gICAgY29uc3QgZGVzY3JpcHRvcnMgPSBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKHByb3BlcnRpZXMpXG5cbiAgICBpbml0T2JzZXJ2YWJsZSgoKSA9PiB7XG4gICAgICAgIGNvbnN0IGFkbTogT2JzZXJ2YWJsZU9iamVjdEFkbWluaXN0cmF0aW9uID0gYXNPYnNlcnZhYmxlT2JqZWN0KHRhcmdldCwgb3B0aW9ucylbJG1vYnhdXG4gICAgICAgIG93bktleXMoZGVzY3JpcHRvcnMpLmZvckVhY2goa2V5ID0+IHtcbiAgICAgICAgICAgIGFkbS5leHRlbmRfKFxuICAgICAgICAgICAgICAgIGtleSxcbiAgICAgICAgICAgICAgICBkZXNjcmlwdG9yc1trZXkgYXMgYW55XSxcbiAgICAgICAgICAgICAgICAvLyBtdXN0IHBhc3MgXCJ1bmRlZmluZWRcIiBmb3IgeyBrZXk6IHVuZGVmaW5lZCB9XG4gICAgICAgICAgICAgICAgIWFubm90YXRpb25zID8gdHJ1ZSA6IGtleSBpbiBhbm5vdGF0aW9ucyA/IGFubm90YXRpb25zW2tleV0gOiB0cnVlXG4gICAgICAgICAgICApXG4gICAgICAgIH0pXG4gICAgfSlcblxuICAgIHJldHVybiB0YXJnZXQgYXMgYW55XG59XG4iLCJpbXBvcnQgeyBJRGVwVHJlZU5vZGUsIGdldEF0b20sIGdldE9ic2VydmVycywgaGFzT2JzZXJ2ZXJzIH0gZnJvbSBcIi4uL2ludGVybmFsXCJcblxuZXhwb3J0IGludGVyZmFjZSBJRGVwZW5kZW5jeVRyZWUge1xuICAgIG5hbWU6IHN0cmluZ1xuICAgIGRlcGVuZGVuY2llcz86IElEZXBlbmRlbmN5VHJlZVtdXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSU9ic2VydmVyVHJlZSB7XG4gICAgbmFtZTogc3RyaW5nXG4gICAgb2JzZXJ2ZXJzPzogSU9ic2VydmVyVHJlZVtdXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXREZXBlbmRlbmN5VHJlZSh0aGluZzogYW55LCBwcm9wZXJ0eT86IHN0cmluZyk6IElEZXBlbmRlbmN5VHJlZSB7XG4gICAgcmV0dXJuIG5vZGVUb0RlcGVuZGVuY3lUcmVlKGdldEF0b20odGhpbmcsIHByb3BlcnR5KSlcbn1cblxuZnVuY3Rpb24gbm9kZVRvRGVwZW5kZW5jeVRyZWUobm9kZTogSURlcFRyZWVOb2RlKTogSURlcGVuZGVuY3lUcmVlIHtcbiAgICBjb25zdCByZXN1bHQ6IElEZXBlbmRlbmN5VHJlZSA9IHtcbiAgICAgICAgbmFtZTogbm9kZS5uYW1lX1xuICAgIH1cbiAgICBpZiAobm9kZS5vYnNlcnZpbmdfICYmIG5vZGUub2JzZXJ2aW5nXy5sZW5ndGggPiAwKSB7XG4gICAgICAgIHJlc3VsdC5kZXBlbmRlbmNpZXMgPSB1bmlxdWUobm9kZS5vYnNlcnZpbmdfKS5tYXAobm9kZVRvRGVwZW5kZW5jeVRyZWUpXG4gICAgfVxuICAgIHJldHVybiByZXN1bHRcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldE9ic2VydmVyVHJlZSh0aGluZzogYW55LCBwcm9wZXJ0eT86IHN0cmluZyk6IElPYnNlcnZlclRyZWUge1xuICAgIHJldHVybiBub2RlVG9PYnNlcnZlclRyZWUoZ2V0QXRvbSh0aGluZywgcHJvcGVydHkpKVxufVxuXG5mdW5jdGlvbiBub2RlVG9PYnNlcnZlclRyZWUobm9kZTogSURlcFRyZWVOb2RlKTogSU9ic2VydmVyVHJlZSB7XG4gICAgY29uc3QgcmVzdWx0OiBJT2JzZXJ2ZXJUcmVlID0ge1xuICAgICAgICBuYW1lOiBub2RlLm5hbWVfXG4gICAgfVxuICAgIGlmIChoYXNPYnNlcnZlcnMobm9kZSBhcyBhbnkpKSB7XG4gICAgICAgIHJlc3VsdC5vYnNlcnZlcnMgPSBBcnJheS5mcm9tKDxhbnk+Z2V0T2JzZXJ2ZXJzKG5vZGUgYXMgYW55KSkubWFwKDxhbnk+bm9kZVRvT2JzZXJ2ZXJUcmVlKVxuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0XG59XG5cbmZ1bmN0aW9uIHVuaXF1ZTxUPihsaXN0OiBUW10pOiBUW10ge1xuICAgIHJldHVybiBBcnJheS5mcm9tKG5ldyBTZXQobGlzdCkpXG59XG4iLCJpbXBvcnQge1xuICAgIGFjdGlvbixcbiAgICBub29wLFxuICAgIGRpZSxcbiAgICBpc0Z1bmN0aW9uLFxuICAgIEFubm90YXRpb24sXG4gICAgaXNTdHJpbmdpc2gsXG4gICAgc3RvcmVBbm5vdGF0aW9uLFxuICAgIGNyZWF0ZUZsb3dBbm5vdGF0aW9uLFxuICAgIGNyZWF0ZURlY29yYXRvckFubm90YXRpb24sXG4gICAgaXMyMDIyM0RlY29yYXRvclxufSBmcm9tIFwiLi4vaW50ZXJuYWxcIlxuXG5pbXBvcnQgdHlwZSB7IENsYXNzTWV0aG9kRGVjb3JhdG9yIH0gZnJvbSBcIi4uL3R5cGVzL2RlY29yYXRvcl9maWxsc1wiXG5cbmV4cG9ydCBjb25zdCBGTE9XID0gXCJmbG93XCJcblxubGV0IGdlbmVyYXRvcklkID0gMFxuXG5leHBvcnQgZnVuY3Rpb24gRmxvd0NhbmNlbGxhdGlvbkVycm9yKCkge1xuICAgIHRoaXMubWVzc2FnZSA9IFwiRkxPV19DQU5DRUxMRURcIlxufVxuRmxvd0NhbmNlbGxhdGlvbkVycm9yLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoRXJyb3IucHJvdG90eXBlKVxuXG5leHBvcnQgZnVuY3Rpb24gaXNGbG93Q2FuY2VsbGF0aW9uRXJyb3IoZXJyb3I6IEVycm9yKSB7XG4gICAgcmV0dXJuIGVycm9yIGluc3RhbmNlb2YgRmxvd0NhbmNlbGxhdGlvbkVycm9yXG59XG5cbmV4cG9ydCB0eXBlIENhbmNlbGxhYmxlUHJvbWlzZTxUPiA9IFByb21pc2U8VD4gJiB7IGNhbmNlbCgpOiB2b2lkIH1cblxuaW50ZXJmYWNlIEZsb3cgZXh0ZW5kcyBBbm5vdGF0aW9uLCBQcm9wZXJ0eURlY29yYXRvciwgQ2xhc3NNZXRob2REZWNvcmF0b3Ige1xuICAgIDxSLCBBcmdzIGV4dGVuZHMgYW55W10+KFxuICAgICAgICBnZW5lcmF0b3I6ICguLi5hcmdzOiBBcmdzKSA9PiBHZW5lcmF0b3I8YW55LCBSLCBhbnk+IHwgQXN5bmNHZW5lcmF0b3I8YW55LCBSLCBhbnk+XG4gICAgKTogKC4uLmFyZ3M6IEFyZ3MpID0+IENhbmNlbGxhYmxlUHJvbWlzZTxSPlxuICAgIGJvdW5kOiBBbm5vdGF0aW9uICYgUHJvcGVydHlEZWNvcmF0b3IgJiBDbGFzc01ldGhvZERlY29yYXRvclxufVxuXG5jb25zdCBmbG93QW5ub3RhdGlvbiA9IGNyZWF0ZUZsb3dBbm5vdGF0aW9uKFwiZmxvd1wiKVxuY29uc3QgZmxvd0JvdW5kQW5ub3RhdGlvbiA9IGNyZWF0ZUZsb3dBbm5vdGF0aW9uKFwiZmxvdy5ib3VuZFwiLCB7IGJvdW5kOiB0cnVlIH0pXG5cbmV4cG9ydCBjb25zdCBmbG93OiBGbG93ID0gT2JqZWN0LmFzc2lnbihcbiAgICBmdW5jdGlvbiBmbG93KGFyZzEsIGFyZzI/KSB7XG4gICAgICAgIC8vIEBmbG93ICgyMDIyLjMgRGVjb3JhdG9ycylcbiAgICAgICAgaWYgKGlzMjAyMjNEZWNvcmF0b3IoYXJnMikpIHtcbiAgICAgICAgICAgIHJldHVybiBmbG93QW5ub3RhdGlvbi5kZWNvcmF0ZV8yMDIyM18oYXJnMSwgYXJnMilcbiAgICAgICAgfVxuICAgICAgICAvLyBAZmxvd1xuICAgICAgICBpZiAoaXNTdHJpbmdpc2goYXJnMikpIHtcbiAgICAgICAgICAgIHJldHVybiBzdG9yZUFubm90YXRpb24oYXJnMSwgYXJnMiwgZmxvd0Fubm90YXRpb24pXG4gICAgICAgIH1cbiAgICAgICAgLy8gZmxvdyhmbilcbiAgICAgICAgaWYgKF9fREVWX18gJiYgYXJndW1lbnRzLmxlbmd0aCAhPT0gMSkge1xuICAgICAgICAgICAgZGllKGBGbG93IGV4cGVjdHMgc2luZ2xlIGFyZ3VtZW50IHdpdGggZ2VuZXJhdG9yIGZ1bmN0aW9uYClcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBnZW5lcmF0b3IgPSBhcmcxXG4gICAgICAgIGNvbnN0IG5hbWUgPSBnZW5lcmF0b3IubmFtZSB8fCBcIjx1bm5hbWVkIGZsb3c+XCJcblxuICAgICAgICAvLyBJbXBsZW1lbnRhdGlvbiBiYXNlZCBvbiBodHRwczovL2dpdGh1Yi5jb20vdGovY28vYmxvYi9tYXN0ZXIvaW5kZXguanNcbiAgICAgICAgY29uc3QgcmVzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgY29uc3QgY3R4ID0gdGhpc1xuICAgICAgICAgICAgY29uc3QgYXJncyA9IGFyZ3VtZW50c1xuICAgICAgICAgICAgY29uc3QgcnVuSWQgPSArK2dlbmVyYXRvcklkXG4gICAgICAgICAgICBjb25zdCBnZW4gPSBhY3Rpb24oYCR7bmFtZX0gLSBydW5pZDogJHtydW5JZH0gLSBpbml0YCwgZ2VuZXJhdG9yKS5hcHBseShjdHgsIGFyZ3MpXG4gICAgICAgICAgICBsZXQgcmVqZWN0b3I6IChlcnJvcjogYW55KSA9PiB2b2lkXG4gICAgICAgICAgICBsZXQgcGVuZGluZ1Byb21pc2U6IENhbmNlbGxhYmxlUHJvbWlzZTxhbnk+IHwgdW5kZWZpbmVkID0gdW5kZWZpbmVkXG5cbiAgICAgICAgICAgIGNvbnN0IHByb21pc2UgPSBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgICAgICAgICAgbGV0IHN0ZXBJZCA9IDBcbiAgICAgICAgICAgICAgICByZWplY3RvciA9IHJlamVjdFxuXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gb25GdWxmaWxsZWQocmVzOiBhbnkpIHtcbiAgICAgICAgICAgICAgICAgICAgcGVuZGluZ1Byb21pc2UgPSB1bmRlZmluZWRcbiAgICAgICAgICAgICAgICAgICAgbGV0IHJldFxuICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0ID0gYWN0aW9uKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGAke25hbWV9IC0gcnVuaWQ6ICR7cnVuSWR9IC0geWllbGQgJHtzdGVwSWQrK31gLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdlbi5uZXh0XG4gICAgICAgICAgICAgICAgICAgICAgICApLmNhbGwoZ2VuLCByZXMpXG4gICAgICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByZWplY3QoZSlcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIG5leHQocmV0KVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIG9uUmVqZWN0ZWQoZXJyOiBhbnkpIHtcbiAgICAgICAgICAgICAgICAgICAgcGVuZGluZ1Byb21pc2UgPSB1bmRlZmluZWRcbiAgICAgICAgICAgICAgICAgICAgbGV0IHJldFxuICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0ID0gYWN0aW9uKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGAke25hbWV9IC0gcnVuaWQ6ICR7cnVuSWR9IC0geWllbGQgJHtzdGVwSWQrK31gLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdlbi50aHJvdyFcbiAgICAgICAgICAgICAgICAgICAgICAgICkuY2FsbChnZW4sIGVycilcbiAgICAgICAgICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlamVjdChlKVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIG5leHQocmV0KVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIG5leHQocmV0OiBhbnkpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGlzRnVuY3Rpb24ocmV0Py50aGVuKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gYW4gYXN5bmMgaXRlcmF0b3JcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldC50aGVuKG5leHQsIHJlamVjdClcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVyblxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChyZXQuZG9uZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc29sdmUocmV0LnZhbHVlKVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHBlbmRpbmdQcm9taXNlID0gUHJvbWlzZS5yZXNvbHZlKHJldC52YWx1ZSkgYXMgYW55XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBwZW5kaW5nUHJvbWlzZSEudGhlbihvbkZ1bGZpbGxlZCwgb25SZWplY3RlZClcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBvbkZ1bGZpbGxlZCh1bmRlZmluZWQpIC8vIGtpY2sgb2ZmIHRoZSBwcm9jZXNzXG4gICAgICAgICAgICB9KSBhcyBhbnlcblxuICAgICAgICAgICAgcHJvbWlzZS5jYW5jZWwgPSBhY3Rpb24oYCR7bmFtZX0gLSBydW5pZDogJHtydW5JZH0gLSBjYW5jZWxgLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHBlbmRpbmdQcm9taXNlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYW5jZWxQcm9taXNlKHBlbmRpbmdQcm9taXNlKVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIC8vIEZpbmFsbHkgYmxvY2sgY2FuIHJldHVybiAob3IgeWllbGQpIHN0dWZmLi5cbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcmVzID0gZ2VuLnJldHVybiEodW5kZWZpbmVkIGFzIGFueSlcbiAgICAgICAgICAgICAgICAgICAgLy8gZWF0IGFueXRoaW5nIHRoYXQgcHJvbWlzZSB3b3VsZCBkbywgaXQncyBjYW5jZWxsZWQhXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHlpZWxkZWRQcm9taXNlID0gUHJvbWlzZS5yZXNvbHZlKHJlcy52YWx1ZSlcbiAgICAgICAgICAgICAgICAgICAgeWllbGRlZFByb21pc2UudGhlbihub29wLCBub29wKVxuICAgICAgICAgICAgICAgICAgICBjYW5jZWxQcm9taXNlKHlpZWxkZWRQcm9taXNlKSAvLyBtYXliZSBpdCBjYW4gYmUgY2FuY2VsbGVkIDopXG4gICAgICAgICAgICAgICAgICAgIC8vIHJlamVjdCBvdXIgb3JpZ2luYWwgcHJvbWlzZVxuICAgICAgICAgICAgICAgICAgICByZWplY3RvcihuZXcgRmxvd0NhbmNlbGxhdGlvbkVycm9yKCkpXG4gICAgICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgICAgICByZWplY3RvcihlKSAvLyB0aGVyZSBjb3VsZCBiZSBhIHRocm93aW5nIGZpbmFsbHkgYmxvY2tcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgcmV0dXJuIHByb21pc2VcbiAgICAgICAgfVxuICAgICAgICByZXMuaXNNb2JYRmxvdyA9IHRydWVcbiAgICAgICAgcmV0dXJuIHJlc1xuICAgIH0gYXMgYW55LFxuICAgIGZsb3dBbm5vdGF0aW9uXG4pXG5cbmZsb3cuYm91bmQgPSBjcmVhdGVEZWNvcmF0b3JBbm5vdGF0aW9uKGZsb3dCb3VuZEFubm90YXRpb24pXG5cbmZ1bmN0aW9uIGNhbmNlbFByb21pc2UocHJvbWlzZSkge1xuICAgIGlmIChpc0Z1bmN0aW9uKHByb21pc2UuY2FuY2VsKSkge1xuICAgICAgICBwcm9taXNlLmNhbmNlbCgpXG4gICAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gZmxvd1Jlc3VsdDxUPihcbiAgICByZXN1bHQ6IFRcbik6IFQgZXh0ZW5kcyBHZW5lcmF0b3I8YW55LCBpbmZlciBSLCBhbnk+XG4gICAgPyBDYW5jZWxsYWJsZVByb21pc2U8Uj5cbiAgICA6IFQgZXh0ZW5kcyBDYW5jZWxsYWJsZVByb21pc2U8YW55PlxuICAgID8gVFxuICAgIDogbmV2ZXIge1xuICAgIHJldHVybiByZXN1bHQgYXMgYW55IC8vIGp1c3QgdHJpY2tpbmcgVHlwZVNjcmlwdCA6KVxufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNGbG93KGZuOiBhbnkpOiBib29sZWFuIHtcbiAgICByZXR1cm4gZm4/LmlzTW9iWEZsb3cgPT09IHRydWVcbn1cbiIsImltcG9ydCB7XG4gICAgSU9ic2VydmFibGVBcnJheSxcbiAgICBJT2JzZXJ2YWJsZVZhbHVlLFxuICAgIExhbWJkYSxcbiAgICBPYnNlcnZhYmxlTWFwLFxuICAgIGdldEFkbWluaXN0cmF0aW9uLFxuICAgIGlzT2JzZXJ2YWJsZUFycmF5LFxuICAgIGlzT2JzZXJ2YWJsZU1hcCxcbiAgICBpc09ic2VydmFibGVPYmplY3QsXG4gICAgaXNPYnNlcnZhYmxlVmFsdWUsXG4gICAgT2JzZXJ2YWJsZVNldCxcbiAgICBkaWUsXG4gICAgaXNTdHJpbmdpc2hcbn0gZnJvbSBcIi4uL2ludGVybmFsXCJcblxuZXhwb3J0IHR5cGUgUmVhZEludGVyY2VwdG9yPFQ+ID0gKHZhbHVlOiBhbnkpID0+IFRcblxuLyoqIEV4cGVyaW1lbnRhbCBmZWF0dXJlIHJpZ2h0IG5vdywgdGVzdGVkIGluZGlyZWN0bHkgdmlhIE1vYngtU3RhdGUtVHJlZSAqL1xuZXhwb3J0IGZ1bmN0aW9uIGludGVyY2VwdFJlYWRzPFQ+KHZhbHVlOiBJT2JzZXJ2YWJsZVZhbHVlPFQ+LCBoYW5kbGVyOiBSZWFkSW50ZXJjZXB0b3I8VD4pOiBMYW1iZGFcbmV4cG9ydCBmdW5jdGlvbiBpbnRlcmNlcHRSZWFkczxUPihcbiAgICBvYnNlcnZhYmxlQXJyYXk6IElPYnNlcnZhYmxlQXJyYXk8VD4sXG4gICAgaGFuZGxlcjogUmVhZEludGVyY2VwdG9yPFQ+XG4pOiBMYW1iZGFcbmV4cG9ydCBmdW5jdGlvbiBpbnRlcmNlcHRSZWFkczxLLCBWPihcbiAgICBvYnNlcnZhYmxlTWFwOiBPYnNlcnZhYmxlTWFwPEssIFY+LFxuICAgIGhhbmRsZXI6IFJlYWRJbnRlcmNlcHRvcjxWPlxuKTogTGFtYmRhXG5leHBvcnQgZnVuY3Rpb24gaW50ZXJjZXB0UmVhZHM8Vj4oXG4gICAgb2JzZXJ2YWJsZVNldDogT2JzZXJ2YWJsZVNldDxWPixcbiAgICBoYW5kbGVyOiBSZWFkSW50ZXJjZXB0b3I8Vj5cbik6IExhbWJkYVxuZXhwb3J0IGZ1bmN0aW9uIGludGVyY2VwdFJlYWRzKFxuICAgIG9iamVjdDogT2JqZWN0LFxuICAgIHByb3BlcnR5OiBzdHJpbmcsXG4gICAgaGFuZGxlcjogUmVhZEludGVyY2VwdG9yPGFueT5cbik6IExhbWJkYVxuZXhwb3J0IGZ1bmN0aW9uIGludGVyY2VwdFJlYWRzKHRoaW5nLCBwcm9wT3JIYW5kbGVyPywgaGFuZGxlcj8pOiBMYW1iZGEge1xuICAgIGxldCB0YXJnZXRcbiAgICBpZiAoaXNPYnNlcnZhYmxlTWFwKHRoaW5nKSB8fCBpc09ic2VydmFibGVBcnJheSh0aGluZykgfHwgaXNPYnNlcnZhYmxlVmFsdWUodGhpbmcpKSB7XG4gICAgICAgIHRhcmdldCA9IGdldEFkbWluaXN0cmF0aW9uKHRoaW5nKVxuICAgIH0gZWxzZSBpZiAoaXNPYnNlcnZhYmxlT2JqZWN0KHRoaW5nKSkge1xuICAgICAgICBpZiAoX19ERVZfXyAmJiAhaXNTdHJpbmdpc2gocHJvcE9ySGFuZGxlcikpIHtcbiAgICAgICAgICAgIHJldHVybiBkaWUoXG4gICAgICAgICAgICAgICAgYEludGVyY2VwdFJlYWRzIGNhbiBvbmx5IGJlIHVzZWQgd2l0aCBhIHNwZWNpZmljIHByb3BlcnR5LCBub3Qgd2l0aCBhbiBvYmplY3QgaW4gZ2VuZXJhbGBcbiAgICAgICAgICAgIClcbiAgICAgICAgfVxuICAgICAgICB0YXJnZXQgPSBnZXRBZG1pbmlzdHJhdGlvbih0aGluZywgcHJvcE9ySGFuZGxlcilcbiAgICB9IGVsc2UgaWYgKF9fREVWX18pIHtcbiAgICAgICAgcmV0dXJuIGRpZShgRXhwZWN0ZWQgb2JzZXJ2YWJsZSBtYXAsIG9iamVjdCBvciBhcnJheSBhcyBmaXJzdCBhcnJheWApXG4gICAgfVxuICAgIGlmIChfX0RFVl9fICYmIHRhcmdldC5kZWhhbmNlciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiBkaWUoYEFuIGludGVyY2VwdCByZWFkZXIgd2FzIGFscmVhZHkgZXN0YWJsaXNoZWRgKVxuICAgIH1cbiAgICB0YXJnZXQuZGVoYW5jZXIgPSB0eXBlb2YgcHJvcE9ySGFuZGxlciA9PT0gXCJmdW5jdGlvblwiID8gcHJvcE9ySGFuZGxlciA6IGhhbmRsZXJcbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgICB0YXJnZXQuZGVoYW5jZXIgPSB1bmRlZmluZWRcbiAgICB9XG59XG4iLCJpbXBvcnQge1xuICAgIElBcnJheVdpbGxDaGFuZ2UsXG4gICAgSUFycmF5V2lsbFNwbGljZSxcbiAgICBJSW50ZXJjZXB0b3IsXG4gICAgSU1hcFdpbGxDaGFuZ2UsXG4gICAgSU9iamVjdFdpbGxDaGFuZ2UsXG4gICAgSU9ic2VydmFibGVBcnJheSxcbiAgICBJT2JzZXJ2YWJsZVZhbHVlLFxuICAgIElWYWx1ZVdpbGxDaGFuZ2UsXG4gICAgTGFtYmRhLFxuICAgIE9ic2VydmFibGVNYXAsXG4gICAgZ2V0QWRtaW5pc3RyYXRpb24sXG4gICAgT2JzZXJ2YWJsZVNldCxcbiAgICBJU2V0V2lsbENoYW5nZSxcbiAgICBpc0Z1bmN0aW9uXG59IGZyb20gXCIuLi9pbnRlcm5hbFwiXG5cbmV4cG9ydCBmdW5jdGlvbiBpbnRlcmNlcHQ8VD4oXG4gICAgdmFsdWU6IElPYnNlcnZhYmxlVmFsdWU8VD4sXG4gICAgaGFuZGxlcjogSUludGVyY2VwdG9yPElWYWx1ZVdpbGxDaGFuZ2U8VD4+XG4pOiBMYW1iZGFcbmV4cG9ydCBmdW5jdGlvbiBpbnRlcmNlcHQ8VD4oXG4gICAgb2JzZXJ2YWJsZUFycmF5OiBJT2JzZXJ2YWJsZUFycmF5PFQ+IHwgQXJyYXk8VD4sXG4gICAgaGFuZGxlcjogSUludGVyY2VwdG9yPElBcnJheVdpbGxDaGFuZ2U8VD4gfCBJQXJyYXlXaWxsU3BsaWNlPFQ+PlxuKTogTGFtYmRhXG5leHBvcnQgZnVuY3Rpb24gaW50ZXJjZXB0PEssIFY+KFxuICAgIG9ic2VydmFibGVNYXA6IE9ic2VydmFibGVNYXA8SywgVj4gfCBNYXA8SywgVj4sXG4gICAgaGFuZGxlcjogSUludGVyY2VwdG9yPElNYXBXaWxsQ2hhbmdlPEssIFY+PlxuKTogTGFtYmRhXG5leHBvcnQgZnVuY3Rpb24gaW50ZXJjZXB0PFY+KFxuICAgIG9ic2VydmFibGVTZXQ6IE9ic2VydmFibGVTZXQ8Vj4gfCBTZXQ8Vj4sXG4gICAgaGFuZGxlcjogSUludGVyY2VwdG9yPElTZXRXaWxsQ2hhbmdlPFY+PlxuKTogTGFtYmRhXG5leHBvcnQgZnVuY3Rpb24gaW50ZXJjZXB0PEssIFY+KFxuICAgIG9ic2VydmFibGVNYXA6IE9ic2VydmFibGVNYXA8SywgVj4gfCBNYXA8SywgVj4sXG4gICAgcHJvcGVydHk6IEssXG4gICAgaGFuZGxlcjogSUludGVyY2VwdG9yPElWYWx1ZVdpbGxDaGFuZ2U8Vj4+XG4pOiBMYW1iZGFcbmV4cG9ydCBmdW5jdGlvbiBpbnRlcmNlcHQob2JqZWN0OiBvYmplY3QsIGhhbmRsZXI6IElJbnRlcmNlcHRvcjxJT2JqZWN0V2lsbENoYW5nZT4pOiBMYW1iZGFcbmV4cG9ydCBmdW5jdGlvbiBpbnRlcmNlcHQ8VCBleHRlbmRzIG9iamVjdCwgSyBleHRlbmRzIGtleW9mIFQ+KFxuICAgIG9iamVjdDogVCxcbiAgICBwcm9wZXJ0eTogSyxcbiAgICBoYW5kbGVyOiBJSW50ZXJjZXB0b3I8SVZhbHVlV2lsbENoYW5nZTxUW0tdPj5cbik6IExhbWJkYVxuZXhwb3J0IGZ1bmN0aW9uIGludGVyY2VwdCh0aGluZywgcHJvcE9ySGFuZGxlcj8sIGhhbmRsZXI/KTogTGFtYmRhIHtcbiAgICBpZiAoaXNGdW5jdGlvbihoYW5kbGVyKSkge1xuICAgICAgICByZXR1cm4gaW50ZXJjZXB0UHJvcGVydHkodGhpbmcsIHByb3BPckhhbmRsZXIsIGhhbmRsZXIpXG4gICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGludGVyY2VwdEludGVyY2VwdGFibGUodGhpbmcsIHByb3BPckhhbmRsZXIpXG4gICAgfVxufVxuXG5mdW5jdGlvbiBpbnRlcmNlcHRJbnRlcmNlcHRhYmxlKHRoaW5nLCBoYW5kbGVyKSB7XG4gICAgcmV0dXJuIGdldEFkbWluaXN0cmF0aW9uKHRoaW5nKS5pbnRlcmNlcHRfKGhhbmRsZXIpXG59XG5cbmZ1bmN0aW9uIGludGVyY2VwdFByb3BlcnR5KHRoaW5nLCBwcm9wZXJ0eSwgaGFuZGxlcikge1xuICAgIHJldHVybiBnZXRBZG1pbmlzdHJhdGlvbih0aGluZywgcHJvcGVydHkpLmludGVyY2VwdF8oaGFuZGxlcilcbn1cbiIsImltcG9ydCB7ICRtb2J4LCBnZXRBdG9tLCBpc0NvbXB1dGVkVmFsdWUsIGlzT2JzZXJ2YWJsZU9iamVjdCwgZGllLCBpc1N0cmluZ2lzaCB9IGZyb20gXCIuLi9pbnRlcm5hbFwiXG5cbmV4cG9ydCBmdW5jdGlvbiBfaXNDb21wdXRlZCh2YWx1ZSwgcHJvcGVydHk/OiBQcm9wZXJ0eUtleSk6IGJvb2xlYW4ge1xuICAgIGlmIChwcm9wZXJ0eSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiBpc0NvbXB1dGVkVmFsdWUodmFsdWUpXG4gICAgfVxuICAgIGlmIChpc09ic2VydmFibGVPYmplY3QodmFsdWUpID09PSBmYWxzZSkge1xuICAgICAgICByZXR1cm4gZmFsc2VcbiAgICB9XG4gICAgaWYgKCF2YWx1ZVskbW9ieF0udmFsdWVzXy5oYXMocHJvcGVydHkpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZVxuICAgIH1cbiAgICBjb25zdCBhdG9tID0gZ2V0QXRvbSh2YWx1ZSwgcHJvcGVydHkpXG4gICAgcmV0dXJuIGlzQ29tcHV0ZWRWYWx1ZShhdG9tKVxufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNDb21wdXRlZCh2YWx1ZTogYW55KTogYm9vbGVhbiB7XG4gICAgaWYgKF9fREVWX18gJiYgYXJndW1lbnRzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgcmV0dXJuIGRpZShcbiAgICAgICAgICAgIGBpc0NvbXB1dGVkIGV4cGVjdHMgb25seSAxIGFyZ3VtZW50LiBVc2UgaXNDb21wdXRlZFByb3AgdG8gaW5zcGVjdCB0aGUgb2JzZXJ2YWJpbGl0eSBvZiBhIHByb3BlcnR5YFxuICAgICAgICApXG4gICAgfVxuICAgIHJldHVybiBfaXNDb21wdXRlZCh2YWx1ZSlcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzQ29tcHV0ZWRQcm9wKHZhbHVlOiBhbnksIHByb3BOYW1lOiBQcm9wZXJ0eUtleSk6IGJvb2xlYW4ge1xuICAgIGlmIChfX0RFVl9fICYmICFpc1N0cmluZ2lzaChwcm9wTmFtZSkpIHtcbiAgICAgICAgcmV0dXJuIGRpZShgaXNDb21wdXRlZCBleHBlY3RlZCBhIHByb3BlcnR5IG5hbWUgYXMgc2Vjb25kIGFyZ3VtZW50YClcbiAgICB9XG4gICAgcmV0dXJuIF9pc0NvbXB1dGVkKHZhbHVlLCBwcm9wTmFtZSlcbn1cbiIsImltcG9ydCB7XG4gICAgJG1vYngsXG4gICAgaXNBdG9tLFxuICAgIGlzQ29tcHV0ZWRWYWx1ZSxcbiAgICBpc09ic2VydmFibGVBcnJheSxcbiAgICBpc09ic2VydmFibGVNYXAsXG4gICAgaXNPYnNlcnZhYmxlT2JqZWN0LFxuICAgIGlzUmVhY3Rpb24sXG4gICAgZGllLFxuICAgIGlzU3RyaW5naXNoXG59IGZyb20gXCIuLi9pbnRlcm5hbFwiXG5cbmZ1bmN0aW9uIF9pc09ic2VydmFibGUodmFsdWUsIHByb3BlcnR5PzogUHJvcGVydHlLZXkpOiBib29sZWFuIHtcbiAgICBpZiAoIXZhbHVlKSB7XG4gICAgICAgIHJldHVybiBmYWxzZVxuICAgIH1cbiAgICBpZiAocHJvcGVydHkgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBpZiAoX19ERVZfXyAmJiAoaXNPYnNlcnZhYmxlTWFwKHZhbHVlKSB8fCBpc09ic2VydmFibGVBcnJheSh2YWx1ZSkpKSB7XG4gICAgICAgICAgICByZXR1cm4gZGllKFxuICAgICAgICAgICAgICAgIFwiaXNPYnNlcnZhYmxlKG9iamVjdCwgcHJvcGVydHlOYW1lKSBpcyBub3Qgc3VwcG9ydGVkIGZvciBhcnJheXMgYW5kIG1hcHMuIFVzZSBtYXAuaGFzIG9yIGFycmF5Lmxlbmd0aCBpbnN0ZWFkLlwiXG4gICAgICAgICAgICApXG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzT2JzZXJ2YWJsZU9iamVjdCh2YWx1ZSkpIHtcbiAgICAgICAgICAgIHJldHVybiB2YWx1ZVskbW9ieF0udmFsdWVzXy5oYXMocHJvcGVydHkpXG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgfVxuICAgIC8vIEZvciBmaXJzdCBjaGVjaywgc2VlICM3MDFcbiAgICByZXR1cm4gKFxuICAgICAgICBpc09ic2VydmFibGVPYmplY3QodmFsdWUpIHx8XG4gICAgICAgICEhdmFsdWVbJG1vYnhdIHx8XG4gICAgICAgIGlzQXRvbSh2YWx1ZSkgfHxcbiAgICAgICAgaXNSZWFjdGlvbih2YWx1ZSkgfHxcbiAgICAgICAgaXNDb21wdXRlZFZhbHVlKHZhbHVlKVxuICAgIClcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzT2JzZXJ2YWJsZSh2YWx1ZTogYW55KTogYm9vbGVhbiB7XG4gICAgaWYgKF9fREVWX18gJiYgYXJndW1lbnRzLmxlbmd0aCAhPT0gMSkge1xuICAgICAgICBkaWUoXG4gICAgICAgICAgICBgaXNPYnNlcnZhYmxlIGV4cGVjdHMgb25seSAxIGFyZ3VtZW50LiBVc2UgaXNPYnNlcnZhYmxlUHJvcCB0byBpbnNwZWN0IHRoZSBvYnNlcnZhYmlsaXR5IG9mIGEgcHJvcGVydHlgXG4gICAgICAgIClcbiAgICB9XG4gICAgcmV0dXJuIF9pc09ic2VydmFibGUodmFsdWUpXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc09ic2VydmFibGVQcm9wKHZhbHVlOiBhbnksIHByb3BOYW1lOiBQcm9wZXJ0eUtleSk6IGJvb2xlYW4ge1xuICAgIGlmIChfX0RFVl9fICYmICFpc1N0cmluZ2lzaChwcm9wTmFtZSkpIHtcbiAgICAgICAgcmV0dXJuIGRpZShgZXhwZWN0ZWQgYSBwcm9wZXJ0eSBuYW1lIGFzIHNlY29uZCBhcmd1bWVudGApXG4gICAgfVxuICAgIHJldHVybiBfaXNPYnNlcnZhYmxlKHZhbHVlLCBwcm9wTmFtZSlcbn1cbiIsImltcG9ydCB7XG4gICAgJG1vYngsXG4gICAgSUlzT2JzZXJ2YWJsZU9iamVjdCxcbiAgICBJT2JzZXJ2YWJsZUFycmF5LFxuICAgIE9ic2VydmFibGVNYXAsXG4gICAgT2JzZXJ2YWJsZVNldCxcbiAgICBPYnNlcnZhYmxlT2JqZWN0QWRtaW5pc3RyYXRpb24sXG4gICAgZW5kQmF0Y2gsXG4gICAgaXNPYnNlcnZhYmxlQXJyYXksXG4gICAgaXNPYnNlcnZhYmxlTWFwLFxuICAgIGlzT2JzZXJ2YWJsZVNldCxcbiAgICBpc09ic2VydmFibGVPYmplY3QsXG4gICAgc3RhcnRCYXRjaCxcbiAgICBkaWVcbn0gZnJvbSBcIi4uL2ludGVybmFsXCJcblxuZXhwb3J0IGZ1bmN0aW9uIGtleXM8Sz4obWFwOiBPYnNlcnZhYmxlTWFwPEssIGFueT4pOiBSZWFkb25seUFycmF5PEs+XG5leHBvcnQgZnVuY3Rpb24ga2V5czxUPihhcjogSU9ic2VydmFibGVBcnJheTxUPik6IFJlYWRvbmx5QXJyYXk8bnVtYmVyPlxuZXhwb3J0IGZ1bmN0aW9uIGtleXM8VD4oc2V0OiBPYnNlcnZhYmxlU2V0PFQ+KTogUmVhZG9ubHlBcnJheTxUPlxuZXhwb3J0IGZ1bmN0aW9uIGtleXM8VCBleHRlbmRzIE9iamVjdD4ob2JqOiBUKTogUmVhZG9ubHlBcnJheTxQcm9wZXJ0eUtleT5cbmV4cG9ydCBmdW5jdGlvbiBrZXlzKG9iajogYW55KTogYW55IHtcbiAgICBpZiAoaXNPYnNlcnZhYmxlT2JqZWN0KG9iaikpIHtcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIChvYmogYXMgYW55IGFzIElJc09ic2VydmFibGVPYmplY3QpWyRtb2J4XSBhcyBPYnNlcnZhYmxlT2JqZWN0QWRtaW5pc3RyYXRpb25cbiAgICAgICAgKS5rZXlzXygpXG4gICAgfVxuICAgIGlmIChpc09ic2VydmFibGVNYXAob2JqKSB8fCBpc09ic2VydmFibGVTZXQob2JqKSkge1xuICAgICAgICByZXR1cm4gQXJyYXkuZnJvbShvYmoua2V5cygpKVxuICAgIH1cbiAgICBpZiAoaXNPYnNlcnZhYmxlQXJyYXkob2JqKSkge1xuICAgICAgICByZXR1cm4gb2JqLm1hcCgoXywgaW5kZXgpID0+IGluZGV4KVxuICAgIH1cbiAgICBkaWUoNSlcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHZhbHVlczxLLCBUPihtYXA6IE9ic2VydmFibGVNYXA8SywgVD4pOiBSZWFkb25seUFycmF5PFQ+XG5leHBvcnQgZnVuY3Rpb24gdmFsdWVzPFQ+KHNldDogT2JzZXJ2YWJsZVNldDxUPik6IFJlYWRvbmx5QXJyYXk8VD5cbmV4cG9ydCBmdW5jdGlvbiB2YWx1ZXM8VD4oYXI6IElPYnNlcnZhYmxlQXJyYXk8VD4pOiBSZWFkb25seUFycmF5PFQ+XG5leHBvcnQgZnVuY3Rpb24gdmFsdWVzPFQgPSBhbnk+KG9iajogVCk6IFJlYWRvbmx5QXJyYXk8VCBleHRlbmRzIG9iamVjdCA/IFRba2V5b2YgVF0gOiBhbnk+XG5leHBvcnQgZnVuY3Rpb24gdmFsdWVzKG9iajogYW55KTogc3RyaW5nW10ge1xuICAgIGlmIChpc09ic2VydmFibGVPYmplY3Qob2JqKSkge1xuICAgICAgICByZXR1cm4ga2V5cyhvYmopLm1hcChrZXkgPT4gb2JqW2tleV0pXG4gICAgfVxuICAgIGlmIChpc09ic2VydmFibGVNYXAob2JqKSkge1xuICAgICAgICByZXR1cm4ga2V5cyhvYmopLm1hcChrZXkgPT4gb2JqLmdldChrZXkpKVxuICAgIH1cbiAgICBpZiAoaXNPYnNlcnZhYmxlU2V0KG9iaikpIHtcbiAgICAgICAgcmV0dXJuIEFycmF5LmZyb20ob2JqLnZhbHVlcygpKVxuICAgIH1cbiAgICBpZiAoaXNPYnNlcnZhYmxlQXJyYXkob2JqKSkge1xuICAgICAgICByZXR1cm4gb2JqLnNsaWNlKClcbiAgICB9XG4gICAgZGllKDYpXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBlbnRyaWVzPEssIFQ+KG1hcDogT2JzZXJ2YWJsZU1hcDxLLCBUPik6IFJlYWRvbmx5QXJyYXk8W0ssIFRdPlxuZXhwb3J0IGZ1bmN0aW9uIGVudHJpZXM8VD4oc2V0OiBPYnNlcnZhYmxlU2V0PFQ+KTogUmVhZG9ubHlBcnJheTxbVCwgVF0+XG5leHBvcnQgZnVuY3Rpb24gZW50cmllczxUPihhcjogSU9ic2VydmFibGVBcnJheTxUPik6IFJlYWRvbmx5QXJyYXk8W251bWJlciwgVF0+XG5leHBvcnQgZnVuY3Rpb24gZW50cmllczxUID0gYW55PihcbiAgICBvYmo6IFRcbik6IFJlYWRvbmx5QXJyYXk8W3N0cmluZywgVCBleHRlbmRzIG9iamVjdCA/IFRba2V5b2YgVF0gOiBhbnldPlxuZXhwb3J0IGZ1bmN0aW9uIGVudHJpZXMob2JqOiBhbnkpOiBhbnkge1xuICAgIGlmIChpc09ic2VydmFibGVPYmplY3Qob2JqKSkge1xuICAgICAgICByZXR1cm4ga2V5cyhvYmopLm1hcChrZXkgPT4gW2tleSwgb2JqW2tleV1dKVxuICAgIH1cbiAgICBpZiAoaXNPYnNlcnZhYmxlTWFwKG9iaikpIHtcbiAgICAgICAgcmV0dXJuIGtleXMob2JqKS5tYXAoa2V5ID0+IFtrZXksIG9iai5nZXQoa2V5KV0pXG4gICAgfVxuICAgIGlmIChpc09ic2VydmFibGVTZXQob2JqKSkge1xuICAgICAgICByZXR1cm4gQXJyYXkuZnJvbShvYmouZW50cmllcygpKVxuICAgIH1cbiAgICBpZiAoaXNPYnNlcnZhYmxlQXJyYXkob2JqKSkge1xuICAgICAgICByZXR1cm4gb2JqLm1hcCgoa2V5LCBpbmRleCkgPT4gW2luZGV4LCBrZXldKVxuICAgIH1cbiAgICBkaWUoNylcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNldDxWPihvYmo6IE9ic2VydmFibGVNYXA8UHJvcGVydHlLZXksIFY+LCB2YWx1ZXM6IHsgW2tleTogc3RyaW5nXTogViB9KVxuZXhwb3J0IGZ1bmN0aW9uIHNldDxLLCBWPihvYmo6IE9ic2VydmFibGVNYXA8SywgVj4sIGtleTogSywgdmFsdWU6IFYpXG5leHBvcnQgZnVuY3Rpb24gc2V0PFQ+KG9iajogT2JzZXJ2YWJsZVNldDxUPiwgdmFsdWU6IFQpXG5leHBvcnQgZnVuY3Rpb24gc2V0PFQ+KG9iajogSU9ic2VydmFibGVBcnJheTxUPiwgaW5kZXg6IG51bWJlciwgdmFsdWU6IFQpXG5leHBvcnQgZnVuY3Rpb24gc2V0PFQgZXh0ZW5kcyBPYmplY3Q+KG9iajogVCwgdmFsdWVzOiB7IFtrZXk6IHN0cmluZ106IGFueSB9KVxuZXhwb3J0IGZ1bmN0aW9uIHNldDxUIGV4dGVuZHMgT2JqZWN0PihvYmo6IFQsIGtleTogUHJvcGVydHlLZXksIHZhbHVlOiBhbnkpXG5leHBvcnQgZnVuY3Rpb24gc2V0KG9iajogYW55LCBrZXk6IGFueSwgdmFsdWU/OiBhbnkpOiB2b2lkIHtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMiAmJiAhaXNPYnNlcnZhYmxlU2V0KG9iaikpIHtcbiAgICAgICAgc3RhcnRCYXRjaCgpXG4gICAgICAgIGNvbnN0IHZhbHVlcyA9IGtleVxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgZm9yIChsZXQga2V5IGluIHZhbHVlcykge1xuICAgICAgICAgICAgICAgIHNldChvYmosIGtleSwgdmFsdWVzW2tleV0pXG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgICBlbmRCYXRjaCgpXG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuXG4gICAgfVxuICAgIGlmIChpc09ic2VydmFibGVPYmplY3Qob2JqKSkge1xuICAgICAgICA7KG9iaiBhcyBhbnkgYXMgSUlzT2JzZXJ2YWJsZU9iamVjdClbJG1vYnhdLnNldF8oa2V5LCB2YWx1ZSlcbiAgICB9IGVsc2UgaWYgKGlzT2JzZXJ2YWJsZU1hcChvYmopKSB7XG4gICAgICAgIG9iai5zZXQoa2V5LCB2YWx1ZSlcbiAgICB9IGVsc2UgaWYgKGlzT2JzZXJ2YWJsZVNldChvYmopKSB7XG4gICAgICAgIG9iai5hZGQoa2V5KVxuICAgIH0gZWxzZSBpZiAoaXNPYnNlcnZhYmxlQXJyYXkob2JqKSkge1xuICAgICAgICBpZiAodHlwZW9mIGtleSAhPT0gXCJudW1iZXJcIikge1xuICAgICAgICAgICAga2V5ID0gcGFyc2VJbnQoa2V5LCAxMClcbiAgICAgICAgfVxuICAgICAgICBpZiAoa2V5IDwgMCkge1xuICAgICAgICAgICAgZGllKGBJbnZhbGlkIGluZGV4OiAnJHtrZXl9J2ApXG4gICAgICAgIH1cbiAgICAgICAgc3RhcnRCYXRjaCgpXG4gICAgICAgIGlmIChrZXkgPj0gb2JqLmxlbmd0aCkge1xuICAgICAgICAgICAgb2JqLmxlbmd0aCA9IGtleSArIDFcbiAgICAgICAgfVxuICAgICAgICBvYmpba2V5XSA9IHZhbHVlXG4gICAgICAgIGVuZEJhdGNoKClcbiAgICB9IGVsc2Uge1xuICAgICAgICBkaWUoOClcbiAgICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiByZW1vdmU8SywgVj4ob2JqOiBPYnNlcnZhYmxlTWFwPEssIFY+LCBrZXk6IEspXG5leHBvcnQgZnVuY3Rpb24gcmVtb3ZlPFQ+KG9iajogT2JzZXJ2YWJsZVNldDxUPiwga2V5OiBUKVxuZXhwb3J0IGZ1bmN0aW9uIHJlbW92ZTxUPihvYmo6IElPYnNlcnZhYmxlQXJyYXk8VD4sIGluZGV4OiBudW1iZXIpXG5leHBvcnQgZnVuY3Rpb24gcmVtb3ZlPFQgZXh0ZW5kcyBPYmplY3Q+KG9iajogVCwga2V5OiBzdHJpbmcpXG5leHBvcnQgZnVuY3Rpb24gcmVtb3ZlKG9iajogYW55LCBrZXk6IGFueSk6IHZvaWQge1xuICAgIGlmIChpc09ic2VydmFibGVPYmplY3Qob2JqKSkge1xuICAgICAgICA7KG9iaiBhcyBhbnkgYXMgSUlzT2JzZXJ2YWJsZU9iamVjdClbJG1vYnhdLmRlbGV0ZV8oa2V5KVxuICAgIH0gZWxzZSBpZiAoaXNPYnNlcnZhYmxlTWFwKG9iaikpIHtcbiAgICAgICAgb2JqLmRlbGV0ZShrZXkpXG4gICAgfSBlbHNlIGlmIChpc09ic2VydmFibGVTZXQob2JqKSkge1xuICAgICAgICBvYmouZGVsZXRlKGtleSlcbiAgICB9IGVsc2UgaWYgKGlzT2JzZXJ2YWJsZUFycmF5KG9iaikpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBrZXkgIT09IFwibnVtYmVyXCIpIHtcbiAgICAgICAgICAgIGtleSA9IHBhcnNlSW50KGtleSwgMTApXG4gICAgICAgIH1cbiAgICAgICAgb2JqLnNwbGljZShrZXksIDEpXG4gICAgfSBlbHNlIHtcbiAgICAgICAgZGllKDkpXG4gICAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gaGFzPEs+KG9iajogT2JzZXJ2YWJsZU1hcDxLLCBhbnk+LCBrZXk6IEspOiBib29sZWFuXG5leHBvcnQgZnVuY3Rpb24gaGFzPFQ+KG9iajogT2JzZXJ2YWJsZVNldDxUPiwga2V5OiBUKTogYm9vbGVhblxuZXhwb3J0IGZ1bmN0aW9uIGhhczxUPihvYmo6IElPYnNlcnZhYmxlQXJyYXk8VD4sIGluZGV4OiBudW1iZXIpOiBib29sZWFuXG5leHBvcnQgZnVuY3Rpb24gaGFzPFQgZXh0ZW5kcyBPYmplY3Q+KG9iajogVCwga2V5OiBzdHJpbmcpOiBib29sZWFuXG5leHBvcnQgZnVuY3Rpb24gaGFzKG9iajogYW55LCBrZXk6IGFueSk6IGJvb2xlYW4ge1xuICAgIGlmIChpc09ic2VydmFibGVPYmplY3Qob2JqKSkge1xuICAgICAgICByZXR1cm4gKG9iaiBhcyBhbnkgYXMgSUlzT2JzZXJ2YWJsZU9iamVjdClbJG1vYnhdLmhhc18oa2V5KVxuICAgIH0gZWxzZSBpZiAoaXNPYnNlcnZhYmxlTWFwKG9iaikpIHtcbiAgICAgICAgcmV0dXJuIG9iai5oYXMoa2V5KVxuICAgIH0gZWxzZSBpZiAoaXNPYnNlcnZhYmxlU2V0KG9iaikpIHtcbiAgICAgICAgcmV0dXJuIG9iai5oYXMoa2V5KVxuICAgIH0gZWxzZSBpZiAoaXNPYnNlcnZhYmxlQXJyYXkob2JqKSkge1xuICAgICAgICByZXR1cm4ga2V5ID49IDAgJiYga2V5IDwgb2JqLmxlbmd0aFxuICAgIH1cbiAgICBkaWUoMTApXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXQ8SywgVj4ob2JqOiBPYnNlcnZhYmxlTWFwPEssIFY+LCBrZXk6IEspOiBWIHwgdW5kZWZpbmVkXG5leHBvcnQgZnVuY3Rpb24gZ2V0PFQ+KG9iajogSU9ic2VydmFibGVBcnJheTxUPiwgaW5kZXg6IG51bWJlcik6IFQgfCB1bmRlZmluZWRcbmV4cG9ydCBmdW5jdGlvbiBnZXQ8VCBleHRlbmRzIE9iamVjdD4ob2JqOiBULCBrZXk6IHN0cmluZyk6IGFueVxuZXhwb3J0IGZ1bmN0aW9uIGdldChvYmo6IGFueSwga2V5OiBhbnkpOiBhbnkge1xuICAgIGlmICghaGFzKG9iaiwga2V5KSkge1xuICAgICAgICByZXR1cm4gdW5kZWZpbmVkXG4gICAgfVxuICAgIGlmIChpc09ic2VydmFibGVPYmplY3Qob2JqKSkge1xuICAgICAgICByZXR1cm4gKG9iaiBhcyBhbnkgYXMgSUlzT2JzZXJ2YWJsZU9iamVjdClbJG1vYnhdLmdldF8oa2V5KVxuICAgIH0gZWxzZSBpZiAoaXNPYnNlcnZhYmxlTWFwKG9iaikpIHtcbiAgICAgICAgcmV0dXJuIG9iai5nZXQoa2V5KVxuICAgIH0gZWxzZSBpZiAoaXNPYnNlcnZhYmxlQXJyYXkob2JqKSkge1xuICAgICAgICByZXR1cm4gb2JqW2tleV1cbiAgICB9XG4gICAgZGllKDExKVxufVxuXG5leHBvcnQgZnVuY3Rpb24gYXBpRGVmaW5lUHJvcGVydHkob2JqOiBPYmplY3QsIGtleTogUHJvcGVydHlLZXksIGRlc2NyaXB0b3I6IFByb3BlcnR5RGVzY3JpcHRvcikge1xuICAgIGlmIChpc09ic2VydmFibGVPYmplY3Qob2JqKSkge1xuICAgICAgICByZXR1cm4gKG9iaiBhcyBhbnkgYXMgSUlzT2JzZXJ2YWJsZU9iamVjdClbJG1vYnhdLmRlZmluZVByb3BlcnR5XyhrZXksIGRlc2NyaXB0b3IpXG4gICAgfVxuICAgIGRpZSgzOSlcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGFwaU93bktleXMob2JqOiBPYmplY3QpIHtcbiAgICBpZiAoaXNPYnNlcnZhYmxlT2JqZWN0KG9iaikpIHtcbiAgICAgICAgcmV0dXJuIChvYmogYXMgYW55IGFzIElJc09ic2VydmFibGVPYmplY3QpWyRtb2J4XS5vd25LZXlzXygpXG4gICAgfVxuICAgIGRpZSgzOClcbn1cbiIsImltcG9ydCB7XG4gICAgSUFycmF5RGlkQ2hhbmdlLFxuICAgIElDb21wdXRlZFZhbHVlLFxuICAgIElNYXBEaWRDaGFuZ2UsXG4gICAgSU9iamVjdERpZENoYW5nZSxcbiAgICBJT2JzZXJ2YWJsZUFycmF5LFxuICAgIElPYnNlcnZhYmxlVmFsdWUsXG4gICAgSVZhbHVlRGlkQ2hhbmdlLFxuICAgIExhbWJkYSxcbiAgICBPYnNlcnZhYmxlTWFwLFxuICAgIGdldEFkbWluaXN0cmF0aW9uLFxuICAgIE9ic2VydmFibGVTZXQsXG4gICAgSVNldERpZENoYW5nZSxcbiAgICBpc0Z1bmN0aW9uXG59IGZyb20gXCIuLi9pbnRlcm5hbFwiXG5cbmV4cG9ydCBmdW5jdGlvbiBvYnNlcnZlPFQ+KFxuICAgIHZhbHVlOiBJT2JzZXJ2YWJsZVZhbHVlPFQ+IHwgSUNvbXB1dGVkVmFsdWU8VD4sXG4gICAgbGlzdGVuZXI6IChjaGFuZ2U6IElWYWx1ZURpZENoYW5nZTxUPikgPT4gdm9pZCxcbiAgICBmaXJlSW1tZWRpYXRlbHk/OiBib29sZWFuXG4pOiBMYW1iZGFcbmV4cG9ydCBmdW5jdGlvbiBvYnNlcnZlPFQ+KFxuICAgIG9ic2VydmFibGVBcnJheTogSU9ic2VydmFibGVBcnJheTxUPiB8IEFycmF5PFQ+LFxuICAgIGxpc3RlbmVyOiAoY2hhbmdlOiBJQXJyYXlEaWRDaGFuZ2U8VD4pID0+IHZvaWQsXG4gICAgZmlyZUltbWVkaWF0ZWx5PzogYm9vbGVhblxuKTogTGFtYmRhXG5leHBvcnQgZnVuY3Rpb24gb2JzZXJ2ZTxWPihcbiAgICAvLyBPYnNlcnZhYmxlU2V0L09ic2VydmFibGVNYXAgYXJlIHJlcXVpcmVkIGRlc3BpdGUgdGhleSBpbXBsZW1lbnQgU2V0L01hcDogaHR0cHM6Ly9naXRodWIuY29tL21vYnhqcy9tb2J4L3B1bGwvMzE4MCNkaXNjdXNzaW9uX3I3NDY1NDI5MjlcbiAgICBvYnNlcnZhYmxlU2V0OiBPYnNlcnZhYmxlU2V0PFY+IHwgU2V0PFY+LFxuICAgIGxpc3RlbmVyOiAoY2hhbmdlOiBJU2V0RGlkQ2hhbmdlPFY+KSA9PiB2b2lkLFxuICAgIGZpcmVJbW1lZGlhdGVseT86IGJvb2xlYW5cbik6IExhbWJkYVxuZXhwb3J0IGZ1bmN0aW9uIG9ic2VydmU8SywgVj4oXG4gICAgb2JzZXJ2YWJsZU1hcDogT2JzZXJ2YWJsZU1hcDxLLCBWPiB8IE1hcDxLLCBWPixcbiAgICBsaXN0ZW5lcjogKGNoYW5nZTogSU1hcERpZENoYW5nZTxLLCBWPikgPT4gdm9pZCxcbiAgICBmaXJlSW1tZWRpYXRlbHk/OiBib29sZWFuXG4pOiBMYW1iZGFcbmV4cG9ydCBmdW5jdGlvbiBvYnNlcnZlPEssIFY+KFxuICAgIG9ic2VydmFibGVNYXA6IE9ic2VydmFibGVNYXA8SywgVj4gfCBNYXA8SywgVj4sXG4gICAgcHJvcGVydHk6IEssXG4gICAgbGlzdGVuZXI6IChjaGFuZ2U6IElWYWx1ZURpZENoYW5nZTxWPikgPT4gdm9pZCxcbiAgICBmaXJlSW1tZWRpYXRlbHk/OiBib29sZWFuXG4pOiBMYW1iZGFcbmV4cG9ydCBmdW5jdGlvbiBvYnNlcnZlKFxuICAgIG9iamVjdDogT2JqZWN0LFxuICAgIGxpc3RlbmVyOiAoY2hhbmdlOiBJT2JqZWN0RGlkQ2hhbmdlKSA9PiB2b2lkLFxuICAgIGZpcmVJbW1lZGlhdGVseT86IGJvb2xlYW5cbik6IExhbWJkYVxuZXhwb3J0IGZ1bmN0aW9uIG9ic2VydmU8VCwgSyBleHRlbmRzIGtleW9mIFQ+KFxuICAgIG9iamVjdDogVCxcbiAgICBwcm9wZXJ0eTogSyxcbiAgICBsaXN0ZW5lcjogKGNoYW5nZTogSVZhbHVlRGlkQ2hhbmdlPFRbS10+KSA9PiB2b2lkLFxuICAgIGZpcmVJbW1lZGlhdGVseT86IGJvb2xlYW5cbik6IExhbWJkYVxuZXhwb3J0IGZ1bmN0aW9uIG9ic2VydmUodGhpbmcsIHByb3BPckNiPywgY2JPckZpcmU/LCBmaXJlSW1tZWRpYXRlbHk/KTogTGFtYmRhIHtcbiAgICBpZiAoaXNGdW5jdGlvbihjYk9yRmlyZSkpIHtcbiAgICAgICAgcmV0dXJuIG9ic2VydmVPYnNlcnZhYmxlUHJvcGVydHkodGhpbmcsIHByb3BPckNiLCBjYk9yRmlyZSwgZmlyZUltbWVkaWF0ZWx5KVxuICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBvYnNlcnZlT2JzZXJ2YWJsZSh0aGluZywgcHJvcE9yQ2IsIGNiT3JGaXJlKVxuICAgIH1cbn1cblxuZnVuY3Rpb24gb2JzZXJ2ZU9ic2VydmFibGUodGhpbmcsIGxpc3RlbmVyLCBmaXJlSW1tZWRpYXRlbHk6IGJvb2xlYW4pIHtcbiAgICByZXR1cm4gZ2V0QWRtaW5pc3RyYXRpb24odGhpbmcpLm9ic2VydmVfKGxpc3RlbmVyLCBmaXJlSW1tZWRpYXRlbHkpXG59XG5cbmZ1bmN0aW9uIG9ic2VydmVPYnNlcnZhYmxlUHJvcGVydHkodGhpbmcsIHByb3BlcnR5LCBsaXN0ZW5lciwgZmlyZUltbWVkaWF0ZWx5OiBib29sZWFuKSB7XG4gICAgcmV0dXJuIGdldEFkbWluaXN0cmF0aW9uKHRoaW5nLCBwcm9wZXJ0eSkub2JzZXJ2ZV8obGlzdGVuZXIsIGZpcmVJbW1lZGlhdGVseSlcbn1cbiIsImltcG9ydCB7XG4gICAgaXNPYnNlcnZhYmxlLFxuICAgIGlzT2JzZXJ2YWJsZUFycmF5LFxuICAgIGlzT2JzZXJ2YWJsZVZhbHVlLFxuICAgIGlzT2JzZXJ2YWJsZU1hcCxcbiAgICBpc09ic2VydmFibGVTZXQsXG4gICAgaXNDb21wdXRlZFZhbHVlLFxuICAgIGRpZSxcbiAgICBhcGlPd25LZXlzLFxuICAgIG9iamVjdFByb3RvdHlwZVxufSBmcm9tIFwiLi4vaW50ZXJuYWxcIlxuXG5mdW5jdGlvbiBjYWNoZTxLLCBWPihtYXA6IE1hcDxhbnksIGFueT4sIGtleTogSywgdmFsdWU6IFYpOiBWIHtcbiAgICBtYXAuc2V0KGtleSwgdmFsdWUpXG4gICAgcmV0dXJuIHZhbHVlXG59XG5cbmZ1bmN0aW9uIHRvSlNIZWxwZXIoc291cmNlLCBfX2FscmVhZHlTZWVuOiBNYXA8YW55LCBhbnk+KSB7XG4gICAgaWYgKFxuICAgICAgICBzb3VyY2UgPT0gbnVsbCB8fFxuICAgICAgICB0eXBlb2Ygc291cmNlICE9PSBcIm9iamVjdFwiIHx8XG4gICAgICAgIHNvdXJjZSBpbnN0YW5jZW9mIERhdGUgfHxcbiAgICAgICAgIWlzT2JzZXJ2YWJsZShzb3VyY2UpXG4gICAgKSB7XG4gICAgICAgIHJldHVybiBzb3VyY2VcbiAgICB9XG5cbiAgICBpZiAoaXNPYnNlcnZhYmxlVmFsdWUoc291cmNlKSB8fCBpc0NvbXB1dGVkVmFsdWUoc291cmNlKSkge1xuICAgICAgICByZXR1cm4gdG9KU0hlbHBlcihzb3VyY2UuZ2V0KCksIF9fYWxyZWFkeVNlZW4pXG4gICAgfVxuICAgIGlmIChfX2FscmVhZHlTZWVuLmhhcyhzb3VyY2UpKSB7XG4gICAgICAgIHJldHVybiBfX2FscmVhZHlTZWVuLmdldChzb3VyY2UpXG4gICAgfVxuICAgIGlmIChpc09ic2VydmFibGVBcnJheShzb3VyY2UpKSB7XG4gICAgICAgIGNvbnN0IHJlcyA9IGNhY2hlKF9fYWxyZWFkeVNlZW4sIHNvdXJjZSwgbmV3IEFycmF5KHNvdXJjZS5sZW5ndGgpKVxuICAgICAgICBzb3VyY2UuZm9yRWFjaCgodmFsdWUsIGlkeCkgPT4ge1xuICAgICAgICAgICAgcmVzW2lkeF0gPSB0b0pTSGVscGVyKHZhbHVlLCBfX2FscmVhZHlTZWVuKVxuICAgICAgICB9KVxuICAgICAgICByZXR1cm4gcmVzXG4gICAgfVxuICAgIGlmIChpc09ic2VydmFibGVTZXQoc291cmNlKSkge1xuICAgICAgICBjb25zdCByZXMgPSBjYWNoZShfX2FscmVhZHlTZWVuLCBzb3VyY2UsIG5ldyBTZXQoKSlcbiAgICAgICAgc291cmNlLmZvckVhY2godmFsdWUgPT4ge1xuICAgICAgICAgICAgcmVzLmFkZCh0b0pTSGVscGVyKHZhbHVlLCBfX2FscmVhZHlTZWVuKSlcbiAgICAgICAgfSlcbiAgICAgICAgcmV0dXJuIHJlc1xuICAgIH1cbiAgICBpZiAoaXNPYnNlcnZhYmxlTWFwKHNvdXJjZSkpIHtcbiAgICAgICAgY29uc3QgcmVzID0gY2FjaGUoX19hbHJlYWR5U2Vlbiwgc291cmNlLCBuZXcgTWFwKCkpXG4gICAgICAgIHNvdXJjZS5mb3JFYWNoKCh2YWx1ZSwga2V5KSA9PiB7XG4gICAgICAgICAgICByZXMuc2V0KGtleSwgdG9KU0hlbHBlcih2YWx1ZSwgX19hbHJlYWR5U2VlbikpXG4gICAgICAgIH0pXG4gICAgICAgIHJldHVybiByZXNcbiAgICB9IGVsc2Uge1xuICAgICAgICAvLyBtdXN0IGJlIG9ic2VydmFibGUgb2JqZWN0XG4gICAgICAgIGNvbnN0IHJlcyA9IGNhY2hlKF9fYWxyZWFkeVNlZW4sIHNvdXJjZSwge30pXG4gICAgICAgIGFwaU93bktleXMoc291cmNlKS5mb3JFYWNoKChrZXk6IGFueSkgPT4ge1xuICAgICAgICAgICAgaWYgKG9iamVjdFByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKHNvdXJjZSwga2V5KSkge1xuICAgICAgICAgICAgICAgIHJlc1trZXldID0gdG9KU0hlbHBlcihzb3VyY2Vba2V5XSwgX19hbHJlYWR5U2VlbilcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICAgICAgcmV0dXJuIHJlc1xuICAgIH1cbn1cblxuLyoqXG4gKiBSZWN1cnNpdmVseSBjb252ZXJ0cyBhbiBvYnNlcnZhYmxlIHRvIGl0J3Mgbm9uLW9ic2VydmFibGUgbmF0aXZlIGNvdW50ZXJwYXJ0LlxuICogSXQgZG9lcyBOT1QgcmVjdXJzZSBpbnRvIG5vbi1vYnNlcnZhYmxlcywgdGhlc2UgYXJlIGxlZnQgYXMgdGhleSBhcmUsIGV2ZW4gaWYgdGhleSBjb250YWluIG9ic2VydmFibGVzLlxuICogQ29tcHV0ZWQgYW5kIG90aGVyIG5vbi1lbnVtZXJhYmxlIHByb3BlcnRpZXMgYXJlIGNvbXBsZXRlbHkgaWdub3JlZC5cbiAqIENvbXBsZXggc2NlbmFyaW9zIHJlcXVpcmUgY3VzdG9tIHNvbHV0aW9uLCBlZyBpbXBsZW1lbnRpbmcgYHRvSlNPTmAgb3IgdXNpbmcgYHNlcmlhbGl6cmAgbGliLlxuICovXG5leHBvcnQgZnVuY3Rpb24gdG9KUzxUPihzb3VyY2U6IFQsIG9wdGlvbnM/OiBhbnkpOiBUIHtcbiAgICBpZiAoX19ERVZfXyAmJiBvcHRpb25zKSB7XG4gICAgICAgIGRpZShcInRvSlMgbm8gbG9uZ2VyIHN1cHBvcnRzIG9wdGlvbnNcIilcbiAgICB9XG4gICAgcmV0dXJuIHRvSlNIZWxwZXIoc291cmNlLCBuZXcgTWFwKCkpXG59XG4iLCJpbXBvcnQgeyBUcmFjZU1vZGUsIGRpZSwgZ2V0QXRvbSwgZ2xvYmFsU3RhdGUgfSBmcm9tIFwiLi4vaW50ZXJuYWxcIlxuXG5leHBvcnQgZnVuY3Rpb24gdHJhY2UodGhpbmc/OiBhbnksIHByb3A/OiBzdHJpbmcsIGVudGVyQnJlYWtQb2ludD86IGJvb2xlYW4pOiB2b2lkXG5leHBvcnQgZnVuY3Rpb24gdHJhY2UodGhpbmc/OiBhbnksIGVudGVyQnJlYWtQb2ludD86IGJvb2xlYW4pOiB2b2lkXG5leHBvcnQgZnVuY3Rpb24gdHJhY2UoZW50ZXJCcmVha1BvaW50PzogYm9vbGVhbik6IHZvaWRcbmV4cG9ydCBmdW5jdGlvbiB0cmFjZSguLi5hcmdzOiBhbnlbXSk6IHZvaWQge1xuICAgIGlmICghX19ERVZfXykge1xuICAgICAgICByZXR1cm5cbiAgICB9XG4gICAgbGV0IGVudGVyQnJlYWtQb2ludCA9IGZhbHNlXG4gICAgaWYgKHR5cGVvZiBhcmdzW2FyZ3MubGVuZ3RoIC0gMV0gPT09IFwiYm9vbGVhblwiKSB7XG4gICAgICAgIGVudGVyQnJlYWtQb2ludCA9IGFyZ3MucG9wKClcbiAgICB9XG4gICAgY29uc3QgZGVyaXZhdGlvbiA9IGdldEF0b21Gcm9tQXJncyhhcmdzKVxuICAgIGlmICghZGVyaXZhdGlvbikge1xuICAgICAgICByZXR1cm4gZGllKFxuICAgICAgICAgICAgYCd0cmFjZShicmVhaz8pJyBjYW4gb25seSBiZSB1c2VkIGluc2lkZSBhIHRyYWNrZWQgY29tcHV0ZWQgdmFsdWUgb3IgYSBSZWFjdGlvbi4gQ29uc2lkZXIgcGFzc2luZyBpbiB0aGUgY29tcHV0ZWQgdmFsdWUgb3IgcmVhY3Rpb24gZXhwbGljaXRseWBcbiAgICAgICAgKVxuICAgIH1cbiAgICBpZiAoZGVyaXZhdGlvbi5pc1RyYWNpbmdfID09PSBUcmFjZU1vZGUuTk9ORSkge1xuICAgICAgICBjb25zb2xlLmxvZyhgW21vYngudHJhY2VdICcke2Rlcml2YXRpb24ubmFtZV99JyB0cmFjaW5nIGVuYWJsZWRgKVxuICAgIH1cbiAgICBkZXJpdmF0aW9uLmlzVHJhY2luZ18gPSBlbnRlckJyZWFrUG9pbnQgPyBUcmFjZU1vZGUuQlJFQUsgOiBUcmFjZU1vZGUuTE9HXG59XG5cbmZ1bmN0aW9uIGdldEF0b21Gcm9tQXJncyhhcmdzKTogYW55IHtcbiAgICBzd2l0Y2ggKGFyZ3MubGVuZ3RoKSB7XG4gICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgIHJldHVybiBnbG9iYWxTdGF0ZS50cmFja2luZ0Rlcml2YXRpb25cbiAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgcmV0dXJuIGdldEF0b20oYXJnc1swXSlcbiAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgcmV0dXJuIGdldEF0b20oYXJnc1swXSwgYXJnc1sxXSlcbiAgICB9XG59XG4iLCJpbXBvcnQgeyBlbmRCYXRjaCwgc3RhcnRCYXRjaCB9IGZyb20gXCIuLi9pbnRlcm5hbFwiXG5cbi8qKlxuICogRHVyaW5nIGEgdHJhbnNhY3Rpb24gbm8gdmlld3MgYXJlIHVwZGF0ZWQgdW50aWwgdGhlIGVuZCBvZiB0aGUgdHJhbnNhY3Rpb24uXG4gKiBUaGUgdHJhbnNhY3Rpb24gd2lsbCBiZSBydW4gc3luY2hyb25vdXNseSBub25ldGhlbGVzcy5cbiAqXG4gKiBAcGFyYW0gYWN0aW9uIGEgZnVuY3Rpb24gdGhhdCB1cGRhdGVzIHNvbWUgcmVhY3RpdmUgc3RhdGVcbiAqIEByZXR1cm5zIGFueSB2YWx1ZSB0aGF0IHdhcyByZXR1cm5lZCBieSB0aGUgJ2FjdGlvbicgcGFyYW1ldGVyLlxuICovXG5leHBvcnQgZnVuY3Rpb24gdHJhbnNhY3Rpb248VD4oYWN0aW9uOiAoKSA9PiBULCB0aGlzQXJnID0gdW5kZWZpbmVkKTogVCB7XG4gICAgc3RhcnRCYXRjaCgpXG4gICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuIGFjdGlvbi5hcHBseSh0aGlzQXJnKVxuICAgIH0gZmluYWxseSB7XG4gICAgICAgIGVuZEJhdGNoKClcbiAgICB9XG59XG4iLCJpbXBvcnQge1xuICAgICRtb2J4LFxuICAgIElSZWFjdGlvbkRpc3Bvc2VyLFxuICAgIExhbWJkYSxcbiAgICBhdXRvcnVuLFxuICAgIGNyZWF0ZUFjdGlvbixcbiAgICBnZXROZXh0SWQsXG4gICAgZGllLFxuICAgIGFsbG93U3RhdGVDaGFuZ2VzLFxuICAgIEdlbmVyaWNBYm9ydFNpZ25hbFxufSBmcm9tIFwiLi4vaW50ZXJuYWxcIlxuXG5leHBvcnQgaW50ZXJmYWNlIElXaGVuT3B0aW9ucyB7XG4gICAgbmFtZT86IHN0cmluZ1xuICAgIHRpbWVvdXQ/OiBudW1iZXJcbiAgICBvbkVycm9yPzogKGVycm9yOiBhbnkpID0+IHZvaWRcbiAgICBzaWduYWw/OiBHZW5lcmljQWJvcnRTaWduYWxcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHdoZW4oXG4gICAgcHJlZGljYXRlOiAoKSA9PiBib29sZWFuLFxuICAgIG9wdHM/OiBJV2hlbk9wdGlvbnNcbik6IFByb21pc2U8dm9pZD4gJiB7IGNhbmNlbCgpOiB2b2lkIH1cbmV4cG9ydCBmdW5jdGlvbiB3aGVuKFxuICAgIHByZWRpY2F0ZTogKCkgPT4gYm9vbGVhbixcbiAgICBlZmZlY3Q6IExhbWJkYSxcbiAgICBvcHRzPzogSVdoZW5PcHRpb25zXG4pOiBJUmVhY3Rpb25EaXNwb3NlclxuZXhwb3J0IGZ1bmN0aW9uIHdoZW4ocHJlZGljYXRlOiBhbnksIGFyZzE/OiBhbnksIGFyZzI/OiBhbnkpOiBhbnkge1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAxIHx8IChhcmcxICYmIHR5cGVvZiBhcmcxID09PSBcIm9iamVjdFwiKSkge1xuICAgICAgICByZXR1cm4gd2hlblByb21pc2UocHJlZGljYXRlLCBhcmcxKVxuICAgIH1cbiAgICByZXR1cm4gX3doZW4ocHJlZGljYXRlLCBhcmcxLCBhcmcyIHx8IHt9KVxufVxuXG5mdW5jdGlvbiBfd2hlbihwcmVkaWNhdGU6ICgpID0+IGJvb2xlYW4sIGVmZmVjdDogTGFtYmRhLCBvcHRzOiBJV2hlbk9wdGlvbnMpOiBJUmVhY3Rpb25EaXNwb3NlciB7XG4gICAgbGV0IHRpbWVvdXRIYW5kbGU6IGFueVxuICAgIGlmICh0eXBlb2Ygb3B0cy50aW1lb3V0ID09PSBcIm51bWJlclwiKSB7XG4gICAgICAgIGNvbnN0IGVycm9yID0gbmV3IEVycm9yKFwiV0hFTl9USU1FT1VUXCIpXG4gICAgICAgIHRpbWVvdXRIYW5kbGUgPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgIGlmICghZGlzcG9zZXJbJG1vYnhdLmlzRGlzcG9zZWRfKSB7XG4gICAgICAgICAgICAgICAgZGlzcG9zZXIoKVxuICAgICAgICAgICAgICAgIGlmIChvcHRzLm9uRXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgb3B0cy5vbkVycm9yKGVycm9yKVxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IGVycm9yXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9LCBvcHRzLnRpbWVvdXQpXG4gICAgfVxuXG4gICAgb3B0cy5uYW1lID0gX19ERVZfXyA/IG9wdHMubmFtZSB8fCBcIldoZW5AXCIgKyBnZXROZXh0SWQoKSA6IFwiV2hlblwiXG4gICAgY29uc3QgZWZmZWN0QWN0aW9uID0gY3JlYXRlQWN0aW9uKFxuICAgICAgICBfX0RFVl9fID8gb3B0cy5uYW1lICsgXCItZWZmZWN0XCIgOiBcIldoZW4tZWZmZWN0XCIsXG4gICAgICAgIGVmZmVjdCBhcyBGdW5jdGlvblxuICAgIClcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgICB2YXIgZGlzcG9zZXIgPSBhdXRvcnVuKHIgPT4ge1xuICAgICAgICAvLyBwcmVkaWNhdGUgc2hvdWxkIG5vdCBjaGFuZ2Ugc3RhdGVcbiAgICAgICAgbGV0IGNvbmQgPSBhbGxvd1N0YXRlQ2hhbmdlcyhmYWxzZSwgcHJlZGljYXRlKVxuICAgICAgICBpZiAoY29uZCkge1xuICAgICAgICAgICAgci5kaXNwb3NlKClcbiAgICAgICAgICAgIGlmICh0aW1lb3V0SGFuZGxlKSB7XG4gICAgICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHRpbWVvdXRIYW5kbGUpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlZmZlY3RBY3Rpb24oKVxuICAgICAgICB9XG4gICAgfSwgb3B0cylcbiAgICByZXR1cm4gZGlzcG9zZXJcbn1cblxuZnVuY3Rpb24gd2hlblByb21pc2UoXG4gICAgcHJlZGljYXRlOiAoKSA9PiBib29sZWFuLFxuICAgIG9wdHM/OiBJV2hlbk9wdGlvbnNcbik6IFByb21pc2U8dm9pZD4gJiB7IGNhbmNlbCgpOiB2b2lkIH0ge1xuICAgIGlmIChfX0RFVl9fICYmIG9wdHMgJiYgb3B0cy5vbkVycm9yKSB7XG4gICAgICAgIHJldHVybiBkaWUoYHRoZSBvcHRpb25zICdvbkVycm9yJyBhbmQgJ3Byb21pc2UnIGNhbm5vdCBiZSBjb21iaW5lZGApXG4gICAgfVxuICAgIGlmIChvcHRzPy5zaWduYWw/LmFib3J0ZWQpIHtcbiAgICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oUHJvbWlzZS5yZWplY3QobmV3IEVycm9yKFwiV0hFTl9BQk9SVEVEXCIpKSwgeyBjYW5jZWw6ICgpID0+IG51bGwgfSlcbiAgICB9XG4gICAgbGV0IGNhbmNlbFxuICAgIGxldCBhYm9ydFxuICAgIGNvbnN0IHJlcyA9IG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgbGV0IGRpc3Bvc2VyID0gX3doZW4ocHJlZGljYXRlLCByZXNvbHZlIGFzIExhbWJkYSwgeyAuLi5vcHRzLCBvbkVycm9yOiByZWplY3QgfSlcbiAgICAgICAgY2FuY2VsID0gKCkgPT4ge1xuICAgICAgICAgICAgZGlzcG9zZXIoKVxuICAgICAgICAgICAgcmVqZWN0KG5ldyBFcnJvcihcIldIRU5fQ0FOQ0VMTEVEXCIpKVxuICAgICAgICB9XG4gICAgICAgIGFib3J0ID0gKCkgPT4ge1xuICAgICAgICAgICAgZGlzcG9zZXIoKVxuICAgICAgICAgICAgcmVqZWN0KG5ldyBFcnJvcihcIldIRU5fQUJPUlRFRFwiKSlcbiAgICAgICAgfVxuICAgICAgICBvcHRzPy5zaWduYWw/LmFkZEV2ZW50TGlzdGVuZXI/LihcImFib3J0XCIsIGFib3J0KVxuICAgIH0pLmZpbmFsbHkoKCkgPT4gb3B0cz8uc2lnbmFsPy5yZW1vdmVFdmVudExpc3RlbmVyPy4oXCJhYm9ydFwiLCBhYm9ydCkpXG4gICAgOyhyZXMgYXMgYW55KS5jYW5jZWwgPSBjYW5jZWxcbiAgICByZXR1cm4gcmVzIGFzIGFueVxufVxuIiwiaW1wb3J0IHtcbiAgICAkbW9ieCxcbiAgICBJSXNPYnNlcnZhYmxlT2JqZWN0LFxuICAgIE9ic2VydmFibGVPYmplY3RBZG1pbmlzdHJhdGlvbixcbiAgICB3YXJuQWJvdXRQcm94eVJlcXVpcmVtZW50LFxuICAgIGFzc2VydFByb3hpZXMsXG4gICAgZGllLFxuICAgIGlzU3RyaW5naXNoLFxuICAgIGdsb2JhbFN0YXRlLFxuICAgIENyZWF0ZU9ic2VydmFibGVPcHRpb25zLFxuICAgIGFzT2JzZXJ2YWJsZU9iamVjdFxufSBmcm9tIFwiLi4vaW50ZXJuYWxcIlxuXG5mdW5jdGlvbiBnZXRBZG0odGFyZ2V0KTogT2JzZXJ2YWJsZU9iamVjdEFkbWluaXN0cmF0aW9uIHtcbiAgICByZXR1cm4gdGFyZ2V0WyRtb2J4XVxufVxuXG4vLyBPcHRpbWl6YXRpb246IHdlIGRvbid0IG5lZWQgdGhlIGludGVybWVkaWF0ZSBvYmplY3RzIGFuZCBjb3VsZCBoYXZlIGEgY29tcGxldGVseSBjdXN0b20gYWRtaW5pc3RyYXRpb24gZm9yIER5bmFtaWNPYmplY3RzLFxuLy8gYW5kIHNraXAgZWl0aGVyIHRoZSBpbnRlcm5hbCB2YWx1ZXMgbWFwLCBvciB0aGUgYmFzZSBvYmplY3Qgd2l0aCBpdHMgcHJvcGVydHkgZGVzY3JpcHRvcnMhXG5jb25zdCBvYmplY3RQcm94eVRyYXBzOiBQcm94eUhhbmRsZXI8YW55PiA9IHtcbiAgICBoYXModGFyZ2V0OiBJSXNPYnNlcnZhYmxlT2JqZWN0LCBuYW1lOiBQcm9wZXJ0eUtleSk6IGJvb2xlYW4ge1xuICAgICAgICBpZiAoX19ERVZfXyAmJiBnbG9iYWxTdGF0ZS50cmFja2luZ0Rlcml2YXRpb24pIHtcbiAgICAgICAgICAgIHdhcm5BYm91dFByb3h5UmVxdWlyZW1lbnQoXG4gICAgICAgICAgICAgICAgXCJkZXRlY3QgbmV3IHByb3BlcnRpZXMgdXNpbmcgdGhlICdpbicgb3BlcmF0b3IuIFVzZSAnaGFzJyBmcm9tICdtb2J4JyBpbnN0ZWFkLlwiXG4gICAgICAgICAgICApXG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGdldEFkbSh0YXJnZXQpLmhhc18obmFtZSlcbiAgICB9LFxuICAgIGdldCh0YXJnZXQ6IElJc09ic2VydmFibGVPYmplY3QsIG5hbWU6IFByb3BlcnR5S2V5KTogYW55IHtcbiAgICAgICAgcmV0dXJuIGdldEFkbSh0YXJnZXQpLmdldF8obmFtZSlcbiAgICB9LFxuICAgIHNldCh0YXJnZXQ6IElJc09ic2VydmFibGVPYmplY3QsIG5hbWU6IFByb3BlcnR5S2V5LCB2YWx1ZTogYW55KTogYm9vbGVhbiB7XG4gICAgICAgIGlmICghaXNTdHJpbmdpc2gobmFtZSkpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgICB9XG4gICAgICAgIGlmIChfX0RFVl9fICYmICFnZXRBZG0odGFyZ2V0KS52YWx1ZXNfLmhhcyhuYW1lKSkge1xuICAgICAgICAgICAgd2FybkFib3V0UHJveHlSZXF1aXJlbWVudChcbiAgICAgICAgICAgICAgICBcImFkZCBhIG5ldyBvYnNlcnZhYmxlIHByb3BlcnR5IHRocm91Z2ggZGlyZWN0IGFzc2lnbm1lbnQuIFVzZSAnc2V0JyBmcm9tICdtb2J4JyBpbnN0ZWFkLlwiXG4gICAgICAgICAgICApXG4gICAgICAgIH1cbiAgICAgICAgLy8gbnVsbCAoaW50ZXJjZXB0ZWQpIC0+IHRydWUgKHN1Y2Nlc3MpXG4gICAgICAgIHJldHVybiBnZXRBZG0odGFyZ2V0KS5zZXRfKG5hbWUsIHZhbHVlLCB0cnVlKSA/PyB0cnVlXG4gICAgfSxcbiAgICBkZWxldGVQcm9wZXJ0eSh0YXJnZXQ6IElJc09ic2VydmFibGVPYmplY3QsIG5hbWU6IFByb3BlcnR5S2V5KTogYm9vbGVhbiB7XG4gICAgICAgIGlmIChfX0RFVl9fKSB7XG4gICAgICAgICAgICB3YXJuQWJvdXRQcm94eVJlcXVpcmVtZW50KFxuICAgICAgICAgICAgICAgIFwiZGVsZXRlIHByb3BlcnRpZXMgZnJvbSBhbiBvYnNlcnZhYmxlIG9iamVjdC4gVXNlICdyZW1vdmUnIGZyb20gJ21vYngnIGluc3RlYWQuXCJcbiAgICAgICAgICAgIClcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWlzU3RyaW5naXNoKG5hbWUpKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgICAgfVxuICAgICAgICAvLyBudWxsIChpbnRlcmNlcHRlZCkgLT4gdHJ1ZSAoc3VjY2VzcylcbiAgICAgICAgcmV0dXJuIGdldEFkbSh0YXJnZXQpLmRlbGV0ZV8obmFtZSwgdHJ1ZSkgPz8gdHJ1ZVxuICAgIH0sXG4gICAgZGVmaW5lUHJvcGVydHkoXG4gICAgICAgIHRhcmdldDogSUlzT2JzZXJ2YWJsZU9iamVjdCxcbiAgICAgICAgbmFtZTogUHJvcGVydHlLZXksXG4gICAgICAgIGRlc2NyaXB0b3I6IFByb3BlcnR5RGVzY3JpcHRvclxuICAgICk6IGJvb2xlYW4ge1xuICAgICAgICBpZiAoX19ERVZfXykge1xuICAgICAgICAgICAgd2FybkFib3V0UHJveHlSZXF1aXJlbWVudChcbiAgICAgICAgICAgICAgICBcImRlZmluZSBwcm9wZXJ0eSBvbiBhbiBvYnNlcnZhYmxlIG9iamVjdC4gVXNlICdkZWZpbmVQcm9wZXJ0eScgZnJvbSAnbW9ieCcgaW5zdGVhZC5cIlxuICAgICAgICAgICAgKVxuICAgICAgICB9XG4gICAgICAgIC8vIG51bGwgKGludGVyY2VwdGVkKSAtPiB0cnVlIChzdWNjZXNzKVxuICAgICAgICByZXR1cm4gZ2V0QWRtKHRhcmdldCkuZGVmaW5lUHJvcGVydHlfKG5hbWUsIGRlc2NyaXB0b3IpID8/IHRydWVcbiAgICB9LFxuICAgIG93bktleXModGFyZ2V0OiBJSXNPYnNlcnZhYmxlT2JqZWN0KTogQXJyYXlMaWtlPHN0cmluZyB8IHN5bWJvbD4ge1xuICAgICAgICBpZiAoX19ERVZfXyAmJiBnbG9iYWxTdGF0ZS50cmFja2luZ0Rlcml2YXRpb24pIHtcbiAgICAgICAgICAgIHdhcm5BYm91dFByb3h5UmVxdWlyZW1lbnQoXG4gICAgICAgICAgICAgICAgXCJpdGVyYXRlIGtleXMgdG8gZGV0ZWN0IGFkZGVkIC8gcmVtb3ZlZCBwcm9wZXJ0aWVzLiBVc2UgJ2tleXMnIGZyb20gJ21vYngnIGluc3RlYWQuXCJcbiAgICAgICAgICAgIClcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZ2V0QWRtKHRhcmdldCkub3duS2V5c18oKVxuICAgIH0sXG4gICAgcHJldmVudEV4dGVuc2lvbnModGFyZ2V0KSB7XG4gICAgICAgIGRpZSgxMylcbiAgICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhc0R5bmFtaWNPYnNlcnZhYmxlT2JqZWN0KFxuICAgIHRhcmdldDogYW55LFxuICAgIG9wdGlvbnM/OiBDcmVhdGVPYnNlcnZhYmxlT3B0aW9uc1xuKTogSUlzT2JzZXJ2YWJsZU9iamVjdCB7XG4gICAgYXNzZXJ0UHJveGllcygpXG4gICAgdGFyZ2V0ID0gYXNPYnNlcnZhYmxlT2JqZWN0KHRhcmdldCwgb3B0aW9ucylcbiAgICByZXR1cm4gKHRhcmdldFskbW9ieF0ucHJveHlfID8/PSBuZXcgUHJveHkodGFyZ2V0LCBvYmplY3RQcm94eVRyYXBzKSlcbn1cbiIsImltcG9ydCB7IExhbWJkYSwgb25jZSwgdW50cmFja2VkRW5kLCB1bnRyYWNrZWRTdGFydCwgZGllIH0gZnJvbSBcIi4uL2ludGVybmFsXCJcblxuZXhwb3J0IHR5cGUgSUludGVyY2VwdG9yPFQ+ID0gKGNoYW5nZTogVCkgPT4gVCB8IG51bGxcblxuZXhwb3J0IGludGVyZmFjZSBJSW50ZXJjZXB0YWJsZTxUPiB7XG4gICAgaW50ZXJjZXB0b3JzXzogSUludGVyY2VwdG9yPFQ+W10gfCB1bmRlZmluZWRcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGhhc0ludGVyY2VwdG9ycyhpbnRlcmNlcHRhYmxlOiBJSW50ZXJjZXB0YWJsZTxhbnk+KSB7XG4gICAgcmV0dXJuIGludGVyY2VwdGFibGUuaW50ZXJjZXB0b3JzXyAhPT0gdW5kZWZpbmVkICYmIGludGVyY2VwdGFibGUuaW50ZXJjZXB0b3JzXy5sZW5ndGggPiAwXG59XG5cbmV4cG9ydCBmdW5jdGlvbiByZWdpc3RlckludGVyY2VwdG9yPFQ+KFxuICAgIGludGVyY2VwdGFibGU6IElJbnRlcmNlcHRhYmxlPFQ+LFxuICAgIGhhbmRsZXI6IElJbnRlcmNlcHRvcjxUPlxuKTogTGFtYmRhIHtcbiAgICBjb25zdCBpbnRlcmNlcHRvcnMgPSBpbnRlcmNlcHRhYmxlLmludGVyY2VwdG9yc18gfHwgKGludGVyY2VwdGFibGUuaW50ZXJjZXB0b3JzXyA9IFtdKVxuICAgIGludGVyY2VwdG9ycy5wdXNoKGhhbmRsZXIpXG4gICAgcmV0dXJuIG9uY2UoKCkgPT4ge1xuICAgICAgICBjb25zdCBpZHggPSBpbnRlcmNlcHRvcnMuaW5kZXhPZihoYW5kbGVyKVxuICAgICAgICBpZiAoaWR4ICE9PSAtMSkge1xuICAgICAgICAgICAgaW50ZXJjZXB0b3JzLnNwbGljZShpZHgsIDEpXG4gICAgICAgIH1cbiAgICB9KVxufVxuXG5leHBvcnQgZnVuY3Rpb24gaW50ZXJjZXB0Q2hhbmdlPFQ+KFxuICAgIGludGVyY2VwdGFibGU6IElJbnRlcmNlcHRhYmxlPFQgfCBudWxsPixcbiAgICBjaGFuZ2U6IFQgfCBudWxsXG4pOiBUIHwgbnVsbCB7XG4gICAgY29uc3QgcHJldlUgPSB1bnRyYWNrZWRTdGFydCgpXG4gICAgdHJ5IHtcbiAgICAgICAgLy8gSW50ZXJjZXB0b3IgY2FuIG1vZGlmeSB0aGUgYXJyYXksIGNvcHkgaXQgdG8gYXZvaWQgY29uY3VycmVudCBtb2RpZmljYXRpb24sIHNlZSAjMTk1MFxuICAgICAgICBjb25zdCBpbnRlcmNlcHRvcnMgPSBbLi4uKGludGVyY2VwdGFibGUuaW50ZXJjZXB0b3JzXyB8fCBbXSldXG4gICAgICAgIGZvciAobGV0IGkgPSAwLCBsID0gaW50ZXJjZXB0b3JzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICAgICAgY2hhbmdlID0gaW50ZXJjZXB0b3JzW2ldKGNoYW5nZSlcbiAgICAgICAgICAgIGlmIChjaGFuZ2UgJiYgIShjaGFuZ2UgYXMgYW55KS50eXBlKSB7XG4gICAgICAgICAgICAgICAgZGllKDE0KVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCFjaGFuZ2UpIHtcbiAgICAgICAgICAgICAgICBicmVha1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjaGFuZ2VcbiAgICB9IGZpbmFsbHkge1xuICAgICAgICB1bnRyYWNrZWRFbmQocHJldlUpXG4gICAgfVxufVxuIiwiaW1wb3J0IHsgTGFtYmRhLCBvbmNlLCB1bnRyYWNrZWRFbmQsIHVudHJhY2tlZFN0YXJ0IH0gZnJvbSBcIi4uL2ludGVybmFsXCJcblxuZXhwb3J0IGludGVyZmFjZSBJTGlzdGVuYWJsZSB7XG4gICAgY2hhbmdlTGlzdGVuZXJzXzogRnVuY3Rpb25bXSB8IHVuZGVmaW5lZFxufVxuXG5leHBvcnQgZnVuY3Rpb24gaGFzTGlzdGVuZXJzKGxpc3RlbmFibGU6IElMaXN0ZW5hYmxlKSB7XG4gICAgcmV0dXJuIGxpc3RlbmFibGUuY2hhbmdlTGlzdGVuZXJzXyAhPT0gdW5kZWZpbmVkICYmIGxpc3RlbmFibGUuY2hhbmdlTGlzdGVuZXJzXy5sZW5ndGggPiAwXG59XG5cbmV4cG9ydCBmdW5jdGlvbiByZWdpc3Rlckxpc3RlbmVyKGxpc3RlbmFibGU6IElMaXN0ZW5hYmxlLCBoYW5kbGVyOiBGdW5jdGlvbik6IExhbWJkYSB7XG4gICAgY29uc3QgbGlzdGVuZXJzID0gbGlzdGVuYWJsZS5jaGFuZ2VMaXN0ZW5lcnNfIHx8IChsaXN0ZW5hYmxlLmNoYW5nZUxpc3RlbmVyc18gPSBbXSlcbiAgICBsaXN0ZW5lcnMucHVzaChoYW5kbGVyKVxuICAgIHJldHVybiBvbmNlKCgpID0+IHtcbiAgICAgICAgY29uc3QgaWR4ID0gbGlzdGVuZXJzLmluZGV4T2YoaGFuZGxlcilcbiAgICAgICAgaWYgKGlkeCAhPT0gLTEpIHtcbiAgICAgICAgICAgIGxpc3RlbmVycy5zcGxpY2UoaWR4LCAxKVxuICAgICAgICB9XG4gICAgfSlcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG5vdGlmeUxpc3RlbmVyczxUPihsaXN0ZW5hYmxlOiBJTGlzdGVuYWJsZSwgY2hhbmdlOiBUKSB7XG4gICAgY29uc3QgcHJldlUgPSB1bnRyYWNrZWRTdGFydCgpXG4gICAgbGV0IGxpc3RlbmVycyA9IGxpc3RlbmFibGUuY2hhbmdlTGlzdGVuZXJzX1xuICAgIGlmICghbGlzdGVuZXJzKSB7XG4gICAgICAgIHJldHVyblxuICAgIH1cbiAgICBsaXN0ZW5lcnMgPSBsaXN0ZW5lcnMuc2xpY2UoKVxuICAgIGZvciAobGV0IGkgPSAwLCBsID0gbGlzdGVuZXJzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICBsaXN0ZW5lcnNbaV0oY2hhbmdlKVxuICAgIH1cbiAgICB1bnRyYWNrZWRFbmQocHJldlUpXG59XG4iLCJpbXBvcnQge1xuICAgICRtb2J4LFxuICAgIGFzT2JzZXJ2YWJsZU9iamVjdCxcbiAgICBBbm5vdGF0aW9uc01hcCxcbiAgICBDcmVhdGVPYnNlcnZhYmxlT3B0aW9ucyxcbiAgICBPYnNlcnZhYmxlT2JqZWN0QWRtaW5pc3RyYXRpb24sXG4gICAgY29sbGVjdFN0b3JlZEFubm90YXRpb25zLFxuICAgIGlzUGxhaW5PYmplY3QsXG4gICAgaXNPYnNlcnZhYmxlT2JqZWN0LFxuICAgIGRpZSxcbiAgICBvd25LZXlzLFxuICAgIGV4dGVuZE9ic2VydmFibGUsXG4gICAgYWRkSGlkZGVuUHJvcCxcbiAgICBzdG9yZWRBbm5vdGF0aW9uc1N5bWJvbCxcbiAgICBpbml0T2JzZXJ2YWJsZVxufSBmcm9tIFwiLi4vaW50ZXJuYWxcIlxuXG4vLyBIYWNrIGJhc2VkIG9uIGh0dHBzOi8vZ2l0aHViLmNvbS9NaWNyb3NvZnQvVHlwZVNjcmlwdC9pc3N1ZXMvMTQ4MjkjaXNzdWVjb21tZW50LTMyMjI2NzA4OVxuLy8gV2UgbmVlZCB0aGlzLCBiZWNhdXNlIG90aGVyd2lzZSwgQWRkaXRpb25hbEtleXMgaXMgZ29pbmcgdG8gYmUgaW5mZXJyZWQgdG8gYmUgYW55XG4vLyBzZXQgb2Ygc3VwZXJmbHVvdXMga2V5cy4gQnV0LCB3ZSByYXRoZXIgd2FudCB0byBnZXQgYSBjb21waWxlIGVycm9yIHVubGVzcyBBZGRpdGlvbmFsS2V5cyBpc1xuLy8gX2V4cGxpY2l0eV8gcGFzc2VkIGFzIGdlbmVyaWMgYXJndW1lbnRcbi8vIEZpeGVzOiBodHRwczovL2dpdGh1Yi5jb20vbW9ieGpzL21vYngvaXNzdWVzLzIzMjUjaXNzdWVjb21tZW50LTY5MTA3MDAyMlxudHlwZSBOb0luZmVyPFQ+ID0gW1RdW1QgZXh0ZW5kcyBhbnkgPyAwIDogbmV2ZXJdXG5cbnR5cGUgTWFrZU9ic2VydmFibGVPcHRpb25zID0gT21pdDxDcmVhdGVPYnNlcnZhYmxlT3B0aW9ucywgXCJwcm94eVwiPlxuXG5leHBvcnQgZnVuY3Rpb24gbWFrZU9ic2VydmFibGU8VCBleHRlbmRzIG9iamVjdCwgQWRkaXRpb25hbEtleXMgZXh0ZW5kcyBQcm9wZXJ0eUtleSA9IG5ldmVyPihcbiAgICB0YXJnZXQ6IFQsXG4gICAgYW5ub3RhdGlvbnM/OiBBbm5vdGF0aW9uc01hcDxULCBOb0luZmVyPEFkZGl0aW9uYWxLZXlzPj4sXG4gICAgb3B0aW9ucz86IE1ha2VPYnNlcnZhYmxlT3B0aW9uc1xuKTogVCB7XG4gICAgaW5pdE9ic2VydmFibGUoKCkgPT4ge1xuICAgICAgICBjb25zdCBhZG06IE9ic2VydmFibGVPYmplY3RBZG1pbmlzdHJhdGlvbiA9IGFzT2JzZXJ2YWJsZU9iamVjdCh0YXJnZXQsIG9wdGlvbnMpWyRtb2J4XVxuICAgICAgICBpZiAoX19ERVZfXyAmJiBhbm5vdGF0aW9ucyAmJiB0YXJnZXRbc3RvcmVkQW5ub3RhdGlvbnNTeW1ib2xdKSB7XG4gICAgICAgICAgICBkaWUoXG4gICAgICAgICAgICAgICAgYG1ha2VPYnNlcnZhYmxlIHNlY29uZCBhcmcgbXVzdCBiZSBudWxsaXNoIHdoZW4gdXNpbmcgZGVjb3JhdG9ycy4gTWl4aW5nIEBkZWNvcmF0b3Igc3ludGF4IHdpdGggYW5ub3RhdGlvbnMgaXMgbm90IHN1cHBvcnRlZC5gXG4gICAgICAgICAgICApXG4gICAgICAgIH1cbiAgICAgICAgLy8gRGVmYXVsdCB0byBkZWNvcmF0b3JzXG4gICAgICAgIGFubm90YXRpb25zID8/PSBjb2xsZWN0U3RvcmVkQW5ub3RhdGlvbnModGFyZ2V0KVxuXG4gICAgICAgIC8vIEFubm90YXRlXG4gICAgICAgIG93bktleXMoYW5ub3RhdGlvbnMpLmZvckVhY2goa2V5ID0+IGFkbS5tYWtlXyhrZXksIGFubm90YXRpb25zIVtrZXldKSlcbiAgICB9KVxuICAgIHJldHVybiB0YXJnZXRcbn1cblxuLy8gcHJvdG9ba2V5c1N5bWJvbF0gPSBuZXcgU2V0PFByb3BlcnR5S2V5PigpXG5jb25zdCBrZXlzU3ltYm9sID0gU3ltYm9sKFwibW9ieC1rZXlzXCIpXG5cbmV4cG9ydCBmdW5jdGlvbiBtYWtlQXV0b09ic2VydmFibGU8VCBleHRlbmRzIG9iamVjdCwgQWRkaXRpb25hbEtleXMgZXh0ZW5kcyBQcm9wZXJ0eUtleSA9IG5ldmVyPihcbiAgICB0YXJnZXQ6IFQsXG4gICAgb3ZlcnJpZGVzPzogQW5ub3RhdGlvbnNNYXA8VCwgTm9JbmZlcjxBZGRpdGlvbmFsS2V5cz4+LFxuICAgIG9wdGlvbnM/OiBNYWtlT2JzZXJ2YWJsZU9wdGlvbnNcbik6IFQge1xuICAgIGlmIChfX0RFVl9fKSB7XG4gICAgICAgIGlmICghaXNQbGFpbk9iamVjdCh0YXJnZXQpICYmICFpc1BsYWluT2JqZWN0KE9iamVjdC5nZXRQcm90b3R5cGVPZih0YXJnZXQpKSkge1xuICAgICAgICAgICAgZGllKGAnbWFrZUF1dG9PYnNlcnZhYmxlJyBjYW4gb25seSBiZSB1c2VkIGZvciBjbGFzc2VzIHRoYXQgZG9uJ3QgaGF2ZSBhIHN1cGVyY2xhc3NgKVxuICAgICAgICB9XG4gICAgICAgIGlmIChpc09ic2VydmFibGVPYmplY3QodGFyZ2V0KSkge1xuICAgICAgICAgICAgZGllKGBtYWtlQXV0b09ic2VydmFibGUgY2FuIG9ubHkgYmUgdXNlZCBvbiBvYmplY3RzIG5vdCBhbHJlYWR5IG1hZGUgb2JzZXJ2YWJsZWApXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBPcHRpbWl6YXRpb246IGF2b2lkIHZpc2l0aW5nIHByb3Rvc1xuICAgIC8vIEFzc3VtZXMgdGhhdCBhbm5vdGF0aW9uLm1ha2VfLy5leHRlbmRfIHdvcmtzIHRoZSBzYW1lIGZvciBwbGFpbiBvYmplY3RzXG4gICAgaWYgKGlzUGxhaW5PYmplY3QodGFyZ2V0KSkge1xuICAgICAgICByZXR1cm4gZXh0ZW5kT2JzZXJ2YWJsZSh0YXJnZXQsIHRhcmdldCwgb3ZlcnJpZGVzLCBvcHRpb25zKVxuICAgIH1cblxuICAgIGluaXRPYnNlcnZhYmxlKCgpID0+IHtcbiAgICAgICAgY29uc3QgYWRtOiBPYnNlcnZhYmxlT2JqZWN0QWRtaW5pc3RyYXRpb24gPSBhc09ic2VydmFibGVPYmplY3QodGFyZ2V0LCBvcHRpb25zKVskbW9ieF1cblxuICAgICAgICAvLyBPcHRpbWl6YXRpb246IGNhY2hlIGtleXMgb24gcHJvdG9cbiAgICAgICAgLy8gQXNzdW1lcyBtYWtlQXV0b09ic2VydmFibGUgY2FuIGJlIGNhbGxlZCBvbmx5IG9uY2UgcGVyIG9iamVjdCBhbmQgY2FuJ3QgYmUgdXNlZCBpbiBzdWJjbGFzc1xuICAgICAgICBpZiAoIXRhcmdldFtrZXlzU3ltYm9sXSkge1xuICAgICAgICAgICAgY29uc3QgcHJvdG8gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YodGFyZ2V0KVxuICAgICAgICAgICAgY29uc3Qga2V5cyA9IG5ldyBTZXQoWy4uLm93bktleXModGFyZ2V0KSwgLi4ub3duS2V5cyhwcm90byldKVxuICAgICAgICAgICAga2V5cy5kZWxldGUoXCJjb25zdHJ1Y3RvclwiKVxuICAgICAgICAgICAga2V5cy5kZWxldGUoJG1vYngpXG4gICAgICAgICAgICBhZGRIaWRkZW5Qcm9wKHByb3RvLCBrZXlzU3ltYm9sLCBrZXlzKVxuICAgICAgICB9XG5cbiAgICAgICAgdGFyZ2V0W2tleXNTeW1ib2xdLmZvckVhY2goa2V5ID0+XG4gICAgICAgICAgICBhZG0ubWFrZV8oXG4gICAgICAgICAgICAgICAga2V5LFxuICAgICAgICAgICAgICAgIC8vIG11c3QgcGFzcyBcInVuZGVmaW5lZFwiIGZvciB7IGtleTogdW5kZWZpbmVkIH1cbiAgICAgICAgICAgICAgICAhb3ZlcnJpZGVzID8gdHJ1ZSA6IGtleSBpbiBvdmVycmlkZXMgPyBvdmVycmlkZXNba2V5XSA6IHRydWVcbiAgICAgICAgICAgIClcbiAgICAgICAgKVxuICAgIH0pXG5cbiAgICByZXR1cm4gdGFyZ2V0XG59XG4iLCJpbXBvcnQge1xuICAgICRtb2J4LFxuICAgIEF0b20sXG4gICAgRU1QVFlfQVJSQVksXG4gICAgSUF0b20sXG4gICAgSUVuaGFuY2VyLFxuICAgIElJbnRlcmNlcHRhYmxlLFxuICAgIElJbnRlcmNlcHRvcixcbiAgICBJTGlzdGVuYWJsZSxcbiAgICBMYW1iZGEsXG4gICAgYWRkSGlkZGVuRmluYWxQcm9wLFxuICAgIGNoZWNrSWZTdGF0ZU1vZGlmaWNhdGlvbnNBcmVBbGxvd2VkLFxuICAgIGNyZWF0ZUluc3RhbmNlb2ZQcmVkaWNhdGUsXG4gICAgZ2V0TmV4dElkLFxuICAgIGhhc0ludGVyY2VwdG9ycyxcbiAgICBoYXNMaXN0ZW5lcnMsXG4gICAgaW50ZXJjZXB0Q2hhbmdlLFxuICAgIGlzT2JqZWN0LFxuICAgIGlzU3B5RW5hYmxlZCxcbiAgICBub3RpZnlMaXN0ZW5lcnMsXG4gICAgcmVnaXN0ZXJJbnRlcmNlcHRvcixcbiAgICByZWdpc3Rlckxpc3RlbmVyLFxuICAgIHNweVJlcG9ydEVuZCxcbiAgICBzcHlSZXBvcnRTdGFydCxcbiAgICBhc3NlcnRQcm94aWVzLFxuICAgIHJlc2VydmVBcnJheUJ1ZmZlcixcbiAgICBoYXNQcm9wLFxuICAgIGRpZSxcbiAgICBnbG9iYWxTdGF0ZSxcbiAgICBpbml0T2JzZXJ2YWJsZVxufSBmcm9tIFwiLi4vaW50ZXJuYWxcIlxuXG5jb25zdCBTUExJQ0UgPSBcInNwbGljZVwiXG5leHBvcnQgY29uc3QgVVBEQVRFID0gXCJ1cGRhdGVcIlxuZXhwb3J0IGNvbnN0IE1BWF9TUExJQ0VfU0laRSA9IDEwMDAwIC8vIFNlZSBlLmcuIGh0dHBzOi8vZ2l0aHViLmNvbS9tb2J4anMvbW9ieC9pc3N1ZXMvODU5XG5cbmV4cG9ydCBpbnRlcmZhY2UgSU9ic2VydmFibGVBcnJheTxUID0gYW55PiBleHRlbmRzIEFycmF5PFQ+IHtcbiAgICBzcGxpY2VXaXRoQXJyYXkoaW5kZXg6IG51bWJlciwgZGVsZXRlQ291bnQ/OiBudW1iZXIsIG5ld0l0ZW1zPzogVFtdKTogVFtdXG4gICAgY2xlYXIoKTogVFtdXG4gICAgcmVwbGFjZShuZXdJdGVtczogVFtdKTogVFtdXG4gICAgcmVtb3ZlKHZhbHVlOiBUKTogYm9vbGVhblxuICAgIHRvSlNPTigpOiBUW11cbn1cblxuaW50ZXJmYWNlIElBcnJheUJhc2VDaGFuZ2U8VD4ge1xuICAgIG9iamVjdDogSU9ic2VydmFibGVBcnJheTxUPlxuICAgIG9ic2VydmFibGVLaW5kOiBcImFycmF5XCJcbiAgICBkZWJ1Z09iamVjdE5hbWU6IHN0cmluZ1xuICAgIGluZGV4OiBudW1iZXJcbn1cblxuZXhwb3J0IHR5cGUgSUFycmF5RGlkQ2hhbmdlPFQgPSBhbnk+ID0gSUFycmF5VXBkYXRlPFQ+IHwgSUFycmF5U3BsaWNlPFQ+XG5cbmV4cG9ydCBpbnRlcmZhY2UgSUFycmF5VXBkYXRlPFQgPSBhbnk+IGV4dGVuZHMgSUFycmF5QmFzZUNoYW5nZTxUPiB7XG4gICAgdHlwZTogXCJ1cGRhdGVcIlxuICAgIG5ld1ZhbHVlOiBUXG4gICAgb2xkVmFsdWU6IFRcbn1cblxuZXhwb3J0IGludGVyZmFjZSBJQXJyYXlTcGxpY2U8VCA9IGFueT4gZXh0ZW5kcyBJQXJyYXlCYXNlQ2hhbmdlPFQ+IHtcbiAgICB0eXBlOiBcInNwbGljZVwiXG4gICAgYWRkZWQ6IFRbXVxuICAgIGFkZGVkQ291bnQ6IG51bWJlclxuICAgIHJlbW92ZWQ6IFRbXVxuICAgIHJlbW92ZWRDb3VudDogbnVtYmVyXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSUFycmF5V2lsbENoYW5nZTxUID0gYW55PiB7XG4gICAgb2JqZWN0OiBJT2JzZXJ2YWJsZUFycmF5PFQ+XG4gICAgaW5kZXg6IG51bWJlclxuICAgIHR5cGU6IFwidXBkYXRlXCJcbiAgICBuZXdWYWx1ZTogVFxufVxuXG5leHBvcnQgaW50ZXJmYWNlIElBcnJheVdpbGxTcGxpY2U8VCA9IGFueT4ge1xuICAgIG9iamVjdDogSU9ic2VydmFibGVBcnJheTxUPlxuICAgIGluZGV4OiBudW1iZXJcbiAgICB0eXBlOiBcInNwbGljZVwiXG4gICAgYWRkZWQ6IFRbXVxuICAgIHJlbW92ZWRDb3VudDogbnVtYmVyXG59XG5cbmNvbnN0IGFycmF5VHJhcHMgPSB7XG4gICAgZ2V0KHRhcmdldCwgbmFtZSkge1xuICAgICAgICBjb25zdCBhZG06IE9ic2VydmFibGVBcnJheUFkbWluaXN0cmF0aW9uID0gdGFyZ2V0WyRtb2J4XVxuICAgICAgICBpZiAobmFtZSA9PT0gJG1vYngpIHtcbiAgICAgICAgICAgIHJldHVybiBhZG1cbiAgICAgICAgfVxuICAgICAgICBpZiAobmFtZSA9PT0gXCJsZW5ndGhcIikge1xuICAgICAgICAgICAgcmV0dXJuIGFkbS5nZXRBcnJheUxlbmd0aF8oKVxuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlb2YgbmFtZSA9PT0gXCJzdHJpbmdcIiAmJiAhaXNOYU4obmFtZSBhcyBhbnkpKSB7XG4gICAgICAgICAgICByZXR1cm4gYWRtLmdldF8ocGFyc2VJbnQobmFtZSkpXG4gICAgICAgIH1cbiAgICAgICAgaWYgKGhhc1Byb3AoYXJyYXlFeHRlbnNpb25zLCBuYW1lKSkge1xuICAgICAgICAgICAgcmV0dXJuIGFycmF5RXh0ZW5zaW9uc1tuYW1lXVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0YXJnZXRbbmFtZV1cbiAgICB9LFxuICAgIHNldCh0YXJnZXQsIG5hbWUsIHZhbHVlKTogYm9vbGVhbiB7XG4gICAgICAgIGNvbnN0IGFkbTogT2JzZXJ2YWJsZUFycmF5QWRtaW5pc3RyYXRpb24gPSB0YXJnZXRbJG1vYnhdXG4gICAgICAgIGlmIChuYW1lID09PSBcImxlbmd0aFwiKSB7XG4gICAgICAgICAgICBhZG0uc2V0QXJyYXlMZW5ndGhfKHZhbHVlKVxuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlb2YgbmFtZSA9PT0gXCJzeW1ib2xcIiB8fCBpc05hTihuYW1lKSkge1xuICAgICAgICAgICAgdGFyZ2V0W25hbWVdID0gdmFsdWVcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIG51bWVyaWMgc3RyaW5nXG4gICAgICAgICAgICBhZG0uc2V0XyhwYXJzZUludChuYW1lKSwgdmFsdWUpXG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRydWVcbiAgICB9LFxuICAgIHByZXZlbnRFeHRlbnNpb25zKCkge1xuICAgICAgICBkaWUoMTUpXG4gICAgfVxufVxuXG5leHBvcnQgY2xhc3MgT2JzZXJ2YWJsZUFycmF5QWRtaW5pc3RyYXRpb25cbiAgICBpbXBsZW1lbnRzIElJbnRlcmNlcHRhYmxlPElBcnJheVdpbGxDaGFuZ2U8YW55PiB8IElBcnJheVdpbGxTcGxpY2U8YW55Pj4sIElMaXN0ZW5hYmxlXG57XG4gICAgYXRvbV86IElBdG9tXG4gICAgcmVhZG9ubHkgdmFsdWVzXzogYW55W10gPSBbXSAvLyB0aGlzIGlzIHRoZSBwcm9wIHRoYXQgZ2V0cyBwcm94aWVkLCBzbyBjYW4ndCByZXBsYWNlIGl0IVxuICAgIGludGVyY2VwdG9yc19cbiAgICBjaGFuZ2VMaXN0ZW5lcnNfXG4gICAgZW5oYW5jZXJfOiAobmV3VjogYW55LCBvbGRWOiBhbnkgfCB1bmRlZmluZWQpID0+IGFueVxuICAgIGRlaGFuY2VyOiBhbnlcbiAgICBwcm94eV8hOiBJT2JzZXJ2YWJsZUFycmF5PGFueT5cbiAgICBsYXN0S25vd25MZW5ndGhfID0gMFxuXG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIG5hbWUgPSBfX0RFVl9fID8gXCJPYnNlcnZhYmxlQXJyYXlAXCIgKyBnZXROZXh0SWQoKSA6IFwiT2JzZXJ2YWJsZUFycmF5XCIsXG4gICAgICAgIGVuaGFuY2VyOiBJRW5oYW5jZXI8YW55PixcbiAgICAgICAgcHVibGljIG93bmVkXzogYm9vbGVhbixcbiAgICAgICAgcHVibGljIGxlZ2FjeU1vZGVfOiBib29sZWFuXG4gICAgKSB7XG4gICAgICAgIHRoaXMuYXRvbV8gPSBuZXcgQXRvbShuYW1lKVxuICAgICAgICB0aGlzLmVuaGFuY2VyXyA9IChuZXdWLCBvbGRWKSA9PlxuICAgICAgICAgICAgZW5oYW5jZXIobmV3Viwgb2xkViwgX19ERVZfXyA/IG5hbWUgKyBcIlsuLl1cIiA6IFwiT2JzZXJ2YWJsZUFycmF5Wy4uXVwiKVxuICAgIH1cblxuICAgIGRlaGFuY2VWYWx1ZV8odmFsdWU6IGFueSk6IGFueSB7XG4gICAgICAgIGlmICh0aGlzLmRlaGFuY2VyICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmRlaGFuY2VyKHZhbHVlKVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB2YWx1ZVxuICAgIH1cblxuICAgIGRlaGFuY2VWYWx1ZXNfKHZhbHVlczogYW55W10pOiBhbnlbXSB7XG4gICAgICAgIGlmICh0aGlzLmRlaGFuY2VyICE9PSB1bmRlZmluZWQgJiYgdmFsdWVzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIHJldHVybiB2YWx1ZXMubWFwKHRoaXMuZGVoYW5jZXIpIGFzIGFueVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB2YWx1ZXNcbiAgICB9XG5cbiAgICBpbnRlcmNlcHRfKGhhbmRsZXI6IElJbnRlcmNlcHRvcjxJQXJyYXlXaWxsQ2hhbmdlPGFueT4gfCBJQXJyYXlXaWxsU3BsaWNlPGFueT4+KTogTGFtYmRhIHtcbiAgICAgICAgcmV0dXJuIHJlZ2lzdGVySW50ZXJjZXB0b3I8SUFycmF5V2lsbENoYW5nZTxhbnk+IHwgSUFycmF5V2lsbFNwbGljZTxhbnk+Pih0aGlzLCBoYW5kbGVyKVxuICAgIH1cblxuICAgIG9ic2VydmVfKFxuICAgICAgICBsaXN0ZW5lcjogKGNoYW5nZURhdGE6IElBcnJheURpZENoYW5nZTxhbnk+KSA9PiB2b2lkLFxuICAgICAgICBmaXJlSW1tZWRpYXRlbHkgPSBmYWxzZVxuICAgICk6IExhbWJkYSB7XG4gICAgICAgIGlmIChmaXJlSW1tZWRpYXRlbHkpIHtcbiAgICAgICAgICAgIGxpc3RlbmVyKDxJQXJyYXlTcGxpY2U8YW55Pj57XG4gICAgICAgICAgICAgICAgb2JzZXJ2YWJsZUtpbmQ6IFwiYXJyYXlcIixcbiAgICAgICAgICAgICAgICBvYmplY3Q6IHRoaXMucHJveHlfIGFzIGFueSxcbiAgICAgICAgICAgICAgICBkZWJ1Z09iamVjdE5hbWU6IHRoaXMuYXRvbV8ubmFtZV8sXG4gICAgICAgICAgICAgICAgdHlwZTogXCJzcGxpY2VcIixcbiAgICAgICAgICAgICAgICBpbmRleDogMCxcbiAgICAgICAgICAgICAgICBhZGRlZDogdGhpcy52YWx1ZXNfLnNsaWNlKCksXG4gICAgICAgICAgICAgICAgYWRkZWRDb3VudDogdGhpcy52YWx1ZXNfLmxlbmd0aCxcbiAgICAgICAgICAgICAgICByZW1vdmVkOiBbXSxcbiAgICAgICAgICAgICAgICByZW1vdmVkQ291bnQ6IDBcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlZ2lzdGVyTGlzdGVuZXIodGhpcywgbGlzdGVuZXIpXG4gICAgfVxuXG4gICAgZ2V0QXJyYXlMZW5ndGhfKCk6IG51bWJlciB7XG4gICAgICAgIHRoaXMuYXRvbV8ucmVwb3J0T2JzZXJ2ZWQoKVxuICAgICAgICByZXR1cm4gdGhpcy52YWx1ZXNfLmxlbmd0aFxuICAgIH1cblxuICAgIHNldEFycmF5TGVuZ3RoXyhuZXdMZW5ndGg6IG51bWJlcikge1xuICAgICAgICBpZiAodHlwZW9mIG5ld0xlbmd0aCAhPT0gXCJudW1iZXJcIiB8fCBpc05hTihuZXdMZW5ndGgpIHx8IG5ld0xlbmd0aCA8IDApIHtcbiAgICAgICAgICAgIGRpZShcIk91dCBvZiByYW5nZTogXCIgKyBuZXdMZW5ndGgpXG4gICAgICAgIH1cbiAgICAgICAgbGV0IGN1cnJlbnRMZW5ndGggPSB0aGlzLnZhbHVlc18ubGVuZ3RoXG4gICAgICAgIGlmIChuZXdMZW5ndGggPT09IGN1cnJlbnRMZW5ndGgpIHtcbiAgICAgICAgICAgIHJldHVyblxuICAgICAgICB9IGVsc2UgaWYgKG5ld0xlbmd0aCA+IGN1cnJlbnRMZW5ndGgpIHtcbiAgICAgICAgICAgIGNvbnN0IG5ld0l0ZW1zID0gbmV3IEFycmF5KG5ld0xlbmd0aCAtIGN1cnJlbnRMZW5ndGgpXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG5ld0xlbmd0aCAtIGN1cnJlbnRMZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIG5ld0l0ZW1zW2ldID0gdW5kZWZpbmVkXG4gICAgICAgICAgICB9IC8vIE5vIEFycmF5LmZpbGwgZXZlcnl3aGVyZS4uLlxuICAgICAgICAgICAgdGhpcy5zcGxpY2VXaXRoQXJyYXlfKGN1cnJlbnRMZW5ndGgsIDAsIG5ld0l0ZW1zKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5zcGxpY2VXaXRoQXJyYXlfKG5ld0xlbmd0aCwgY3VycmVudExlbmd0aCAtIG5ld0xlbmd0aClcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHVwZGF0ZUFycmF5TGVuZ3RoXyhvbGRMZW5ndGg6IG51bWJlciwgZGVsdGE6IG51bWJlcikge1xuICAgICAgICBpZiAob2xkTGVuZ3RoICE9PSB0aGlzLmxhc3RLbm93bkxlbmd0aF8pIHtcbiAgICAgICAgICAgIGRpZSgxNilcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmxhc3RLbm93bkxlbmd0aF8gKz0gZGVsdGFcbiAgICAgICAgaWYgKHRoaXMubGVnYWN5TW9kZV8gJiYgZGVsdGEgPiAwKSB7XG4gICAgICAgICAgICByZXNlcnZlQXJyYXlCdWZmZXIob2xkTGVuZ3RoICsgZGVsdGEgKyAxKVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgc3BsaWNlV2l0aEFycmF5XyhpbmRleDogbnVtYmVyLCBkZWxldGVDb3VudD86IG51bWJlciwgbmV3SXRlbXM/OiBhbnlbXSk6IGFueVtdIHtcbiAgICAgICAgY2hlY2tJZlN0YXRlTW9kaWZpY2F0aW9uc0FyZUFsbG93ZWQodGhpcy5hdG9tXylcbiAgICAgICAgY29uc3QgbGVuZ3RoID0gdGhpcy52YWx1ZXNfLmxlbmd0aFxuXG4gICAgICAgIGlmIChpbmRleCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBpbmRleCA9IDBcbiAgICAgICAgfSBlbHNlIGlmIChpbmRleCA+IGxlbmd0aCkge1xuICAgICAgICAgICAgaW5kZXggPSBsZW5ndGhcbiAgICAgICAgfSBlbHNlIGlmIChpbmRleCA8IDApIHtcbiAgICAgICAgICAgIGluZGV4ID0gTWF0aC5tYXgoMCwgbGVuZ3RoICsgaW5kZXgpXG4gICAgICAgIH1cblxuICAgICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAgICAgZGVsZXRlQ291bnQgPSBsZW5ndGggLSBpbmRleFxuICAgICAgICB9IGVsc2UgaWYgKGRlbGV0ZUNvdW50ID09PSB1bmRlZmluZWQgfHwgZGVsZXRlQ291bnQgPT09IG51bGwpIHtcbiAgICAgICAgICAgIGRlbGV0ZUNvdW50ID0gMFxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZGVsZXRlQ291bnQgPSBNYXRoLm1heCgwLCBNYXRoLm1pbihkZWxldGVDb3VudCwgbGVuZ3RoIC0gaW5kZXgpKVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG5ld0l0ZW1zID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIG5ld0l0ZW1zID0gRU1QVFlfQVJSQVlcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChoYXNJbnRlcmNlcHRvcnModGhpcykpIHtcbiAgICAgICAgICAgIGNvbnN0IGNoYW5nZSA9IGludGVyY2VwdENoYW5nZTxJQXJyYXlXaWxsU3BsaWNlPGFueT4+KHRoaXMgYXMgYW55LCB7XG4gICAgICAgICAgICAgICAgb2JqZWN0OiB0aGlzLnByb3h5XyBhcyBhbnksXG4gICAgICAgICAgICAgICAgdHlwZTogU1BMSUNFLFxuICAgICAgICAgICAgICAgIGluZGV4LFxuICAgICAgICAgICAgICAgIHJlbW92ZWRDb3VudDogZGVsZXRlQ291bnQsXG4gICAgICAgICAgICAgICAgYWRkZWQ6IG5ld0l0ZW1zXG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgaWYgKCFjaGFuZ2UpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gRU1QVFlfQVJSQVlcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGRlbGV0ZUNvdW50ID0gY2hhbmdlLnJlbW92ZWRDb3VudFxuICAgICAgICAgICAgbmV3SXRlbXMgPSBjaGFuZ2UuYWRkZWRcbiAgICAgICAgfVxuXG4gICAgICAgIG5ld0l0ZW1zID1cbiAgICAgICAgICAgIG5ld0l0ZW1zLmxlbmd0aCA9PT0gMCA/IG5ld0l0ZW1zIDogbmV3SXRlbXMubWFwKHYgPT4gdGhpcy5lbmhhbmNlcl8odiwgdW5kZWZpbmVkKSlcbiAgICAgICAgaWYgKHRoaXMubGVnYWN5TW9kZV8gfHwgX19ERVZfXykge1xuICAgICAgICAgICAgY29uc3QgbGVuZ3RoRGVsdGEgPSBuZXdJdGVtcy5sZW5ndGggLSBkZWxldGVDb3VudFxuICAgICAgICAgICAgdGhpcy51cGRhdGVBcnJheUxlbmd0aF8obGVuZ3RoLCBsZW5ndGhEZWx0YSkgLy8gY2hlY2tzIGlmIGludGVybmFsIGFycmF5IHdhc24ndCBtb2RpZmllZFxuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHJlcyA9IHRoaXMuc3BsaWNlSXRlbXNJbnRvVmFsdWVzXyhpbmRleCwgZGVsZXRlQ291bnQsIG5ld0l0ZW1zKVxuXG4gICAgICAgIGlmIChkZWxldGVDb3VudCAhPT0gMCB8fCBuZXdJdGVtcy5sZW5ndGggIT09IDApIHtcbiAgICAgICAgICAgIHRoaXMubm90aWZ5QXJyYXlTcGxpY2VfKGluZGV4LCBuZXdJdGVtcywgcmVzKVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLmRlaGFuY2VWYWx1ZXNfKHJlcylcbiAgICB9XG5cbiAgICBzcGxpY2VJdGVtc0ludG9WYWx1ZXNfKGluZGV4OiBudW1iZXIsIGRlbGV0ZUNvdW50OiBudW1iZXIsIG5ld0l0ZW1zOiBhbnlbXSk6IGFueVtdIHtcbiAgICAgICAgaWYgKG5ld0l0ZW1zLmxlbmd0aCA8IE1BWF9TUExJQ0VfU0laRSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMudmFsdWVzXy5zcGxpY2UoaW5kZXgsIGRlbGV0ZUNvdW50LCAuLi5uZXdJdGVtcylcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIFRoZSBpdGVtcyByZW1vdmVkIGJ5IHRoZSBzcGxpY2VcbiAgICAgICAgICAgIGNvbnN0IHJlcyA9IHRoaXMudmFsdWVzXy5zbGljZShpbmRleCwgaW5kZXggKyBkZWxldGVDb3VudClcbiAgICAgICAgICAgIC8vIFRoZSBpdGVtcyB0aGF0IHRoYXQgc2hvdWxkIHJlbWFpbiBhdCB0aGUgZW5kIG9mIHRoZSBhcnJheVxuICAgICAgICAgICAgbGV0IG9sZEl0ZW1zID0gdGhpcy52YWx1ZXNfLnNsaWNlKGluZGV4ICsgZGVsZXRlQ291bnQpXG4gICAgICAgICAgICAvLyBOZXcgbGVuZ3RoIGlzIHRoZSBwcmV2aW91cyBsZW5ndGggKyBhZGRpdGlvbiBjb3VudCAtIGRlbGV0aW9uIGNvdW50XG4gICAgICAgICAgICB0aGlzLnZhbHVlc18ubGVuZ3RoICs9IG5ld0l0ZW1zLmxlbmd0aCAtIGRlbGV0ZUNvdW50XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG5ld0l0ZW1zLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgdGhpcy52YWx1ZXNfW2luZGV4ICsgaV0gPSBuZXdJdGVtc1tpXVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBvbGRJdGVtcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIHRoaXMudmFsdWVzX1tpbmRleCArIG5ld0l0ZW1zLmxlbmd0aCArIGldID0gb2xkSXRlbXNbaV1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiByZXNcbiAgICAgICAgfVxuICAgIH1cblxuICAgIG5vdGlmeUFycmF5Q2hpbGRVcGRhdGVfKGluZGV4OiBudW1iZXIsIG5ld1ZhbHVlOiBhbnksIG9sZFZhbHVlOiBhbnkpIHtcbiAgICAgICAgY29uc3Qgbm90aWZ5U3B5ID0gIXRoaXMub3duZWRfICYmIGlzU3B5RW5hYmxlZCgpXG4gICAgICAgIGNvbnN0IG5vdGlmeSA9IGhhc0xpc3RlbmVycyh0aGlzKVxuICAgICAgICBjb25zdCBjaGFuZ2U6IElBcnJheURpZENoYW5nZSB8IG51bGwgPVxuICAgICAgICAgICAgbm90aWZ5IHx8IG5vdGlmeVNweVxuICAgICAgICAgICAgICAgID8gKHtcbiAgICAgICAgICAgICAgICAgICAgICBvYnNlcnZhYmxlS2luZDogXCJhcnJheVwiLFxuICAgICAgICAgICAgICAgICAgICAgIG9iamVjdDogdGhpcy5wcm94eV8sXG4gICAgICAgICAgICAgICAgICAgICAgdHlwZTogVVBEQVRFLFxuICAgICAgICAgICAgICAgICAgICAgIGRlYnVnT2JqZWN0TmFtZTogdGhpcy5hdG9tXy5uYW1lXyxcbiAgICAgICAgICAgICAgICAgICAgICBpbmRleCxcbiAgICAgICAgICAgICAgICAgICAgICBuZXdWYWx1ZSxcbiAgICAgICAgICAgICAgICAgICAgICBvbGRWYWx1ZVxuICAgICAgICAgICAgICAgICAgfSBhcyBjb25zdClcbiAgICAgICAgICAgICAgICA6IG51bGxcblxuICAgICAgICAvLyBUaGUgcmVhc29uIHdoeSB0aGlzIGlzIG9uIHJpZ2h0IGhhbmQgc2lkZSBoZXJlIChhbmQgbm90IGFib3ZlKSwgaXMgdGhpcyB3YXkgdGhlIHVnbGlmaWVyIHdpbGwgZHJvcCBpdCwgYnV0IGl0IHdvbid0XG4gICAgICAgIC8vIGNhdXNlIGFueSBydW50aW1lIG92ZXJoZWFkIGluIGRldmVsb3BtZW50IG1vZGUgd2l0aG91dCBOT0RFX0VOViBzZXQsIHVubGVzcyBzcHlpbmcgaXMgZW5hYmxlZFxuICAgICAgICBpZiAoX19ERVZfXyAmJiBub3RpZnlTcHkpIHtcbiAgICAgICAgICAgIHNweVJlcG9ydFN0YXJ0KGNoYW5nZSEpXG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5hdG9tXy5yZXBvcnRDaGFuZ2VkKClcbiAgICAgICAgaWYgKG5vdGlmeSkge1xuICAgICAgICAgICAgbm90aWZ5TGlzdGVuZXJzKHRoaXMsIGNoYW5nZSlcbiAgICAgICAgfVxuICAgICAgICBpZiAoX19ERVZfXyAmJiBub3RpZnlTcHkpIHtcbiAgICAgICAgICAgIHNweVJlcG9ydEVuZCgpXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBub3RpZnlBcnJheVNwbGljZV8oaW5kZXg6IG51bWJlciwgYWRkZWQ6IGFueVtdLCByZW1vdmVkOiBhbnlbXSkge1xuICAgICAgICBjb25zdCBub3RpZnlTcHkgPSAhdGhpcy5vd25lZF8gJiYgaXNTcHlFbmFibGVkKClcbiAgICAgICAgY29uc3Qgbm90aWZ5ID0gaGFzTGlzdGVuZXJzKHRoaXMpXG4gICAgICAgIGNvbnN0IGNoYW5nZTogSUFycmF5U3BsaWNlIHwgbnVsbCA9XG4gICAgICAgICAgICBub3RpZnkgfHwgbm90aWZ5U3B5XG4gICAgICAgICAgICAgICAgPyAoe1xuICAgICAgICAgICAgICAgICAgICAgIG9ic2VydmFibGVLaW5kOiBcImFycmF5XCIsXG4gICAgICAgICAgICAgICAgICAgICAgb2JqZWN0OiB0aGlzLnByb3h5XyxcbiAgICAgICAgICAgICAgICAgICAgICBkZWJ1Z09iamVjdE5hbWU6IHRoaXMuYXRvbV8ubmFtZV8sXG4gICAgICAgICAgICAgICAgICAgICAgdHlwZTogU1BMSUNFLFxuICAgICAgICAgICAgICAgICAgICAgIGluZGV4LFxuICAgICAgICAgICAgICAgICAgICAgIHJlbW92ZWQsXG4gICAgICAgICAgICAgICAgICAgICAgYWRkZWQsXG4gICAgICAgICAgICAgICAgICAgICAgcmVtb3ZlZENvdW50OiByZW1vdmVkLmxlbmd0aCxcbiAgICAgICAgICAgICAgICAgICAgICBhZGRlZENvdW50OiBhZGRlZC5sZW5ndGhcbiAgICAgICAgICAgICAgICAgIH0gYXMgY29uc3QpXG4gICAgICAgICAgICAgICAgOiBudWxsXG5cbiAgICAgICAgaWYgKF9fREVWX18gJiYgbm90aWZ5U3B5KSB7XG4gICAgICAgICAgICBzcHlSZXBvcnRTdGFydChjaGFuZ2UhKVxuICAgICAgICB9XG4gICAgICAgIHRoaXMuYXRvbV8ucmVwb3J0Q2hhbmdlZCgpXG4gICAgICAgIC8vIGNvbmZvcm06IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL0FycmF5L29ic2VydmVcbiAgICAgICAgaWYgKG5vdGlmeSkge1xuICAgICAgICAgICAgbm90aWZ5TGlzdGVuZXJzKHRoaXMsIGNoYW5nZSlcbiAgICAgICAgfVxuICAgICAgICBpZiAoX19ERVZfXyAmJiBub3RpZnlTcHkpIHtcbiAgICAgICAgICAgIHNweVJlcG9ydEVuZCgpXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBnZXRfKGluZGV4OiBudW1iZXIpOiBhbnkgfCB1bmRlZmluZWQge1xuICAgICAgICBpZiAodGhpcy5sZWdhY3lNb2RlXyAmJiBpbmRleCA+PSB0aGlzLnZhbHVlc18ubGVuZ3RoKSB7XG4gICAgICAgICAgICBjb25zb2xlLndhcm4oXG4gICAgICAgICAgICAgICAgX19ERVZfX1xuICAgICAgICAgICAgICAgICAgICA/IGBbbW9ieC5hcnJheV0gQXR0ZW1wdCB0byByZWFkIGFuIGFycmF5IGluZGV4ICgke2luZGV4fSkgdGhhdCBpcyBvdXQgb2YgYm91bmRzICgke3RoaXMudmFsdWVzXy5sZW5ndGh9KS4gUGxlYXNlIGNoZWNrIGxlbmd0aCBmaXJzdC4gT3V0IG9mIGJvdW5kIGluZGljZXMgd2lsbCBub3QgYmUgdHJhY2tlZCBieSBNb2JYYFxuICAgICAgICAgICAgICAgICAgICA6IGBbbW9ieF0gT3V0IG9mIGJvdW5kcyByZWFkOiAke2luZGV4fWBcbiAgICAgICAgICAgIClcbiAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWRcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmF0b21fLnJlcG9ydE9ic2VydmVkKClcbiAgICAgICAgcmV0dXJuIHRoaXMuZGVoYW5jZVZhbHVlXyh0aGlzLnZhbHVlc19baW5kZXhdKVxuICAgIH1cblxuICAgIHNldF8oaW5kZXg6IG51bWJlciwgbmV3VmFsdWU6IGFueSkge1xuICAgICAgICBjb25zdCB2YWx1ZXMgPSB0aGlzLnZhbHVlc19cbiAgICAgICAgaWYgKHRoaXMubGVnYWN5TW9kZV8gJiYgaW5kZXggPiB2YWx1ZXMubGVuZ3RoKSB7XG4gICAgICAgICAgICAvLyBvdXQgb2YgYm91bmRzXG4gICAgICAgICAgICBkaWUoMTcsIGluZGV4LCB2YWx1ZXMubGVuZ3RoKVxuICAgICAgICB9XG4gICAgICAgIGlmIChpbmRleCA8IHZhbHVlcy5sZW5ndGgpIHtcbiAgICAgICAgICAgIC8vIHVwZGF0ZSBhdCBpbmRleCBpbiByYW5nZVxuICAgICAgICAgICAgY2hlY2tJZlN0YXRlTW9kaWZpY2F0aW9uc0FyZUFsbG93ZWQodGhpcy5hdG9tXylcbiAgICAgICAgICAgIGNvbnN0IG9sZFZhbHVlID0gdmFsdWVzW2luZGV4XVxuICAgICAgICAgICAgaWYgKGhhc0ludGVyY2VwdG9ycyh0aGlzKSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGNoYW5nZSA9IGludGVyY2VwdENoYW5nZTxJQXJyYXlXaWxsQ2hhbmdlPGFueT4+KHRoaXMgYXMgYW55LCB7XG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFVQREFURSxcbiAgICAgICAgICAgICAgICAgICAgb2JqZWN0OiB0aGlzLnByb3h5XyBhcyBhbnksIC8vIHNpbmNlIFwidGhpc1wiIGlzIHRoZSByZWFsIGFycmF5IHdlIG5lZWQgdG8gcGFzcyBpdHMgcHJveHlcbiAgICAgICAgICAgICAgICAgICAgaW5kZXgsXG4gICAgICAgICAgICAgICAgICAgIG5ld1ZhbHVlXG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICBpZiAoIWNoYW5nZSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm5cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgbmV3VmFsdWUgPSBjaGFuZ2UubmV3VmFsdWVcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG5ld1ZhbHVlID0gdGhpcy5lbmhhbmNlcl8obmV3VmFsdWUsIG9sZFZhbHVlKVxuICAgICAgICAgICAgY29uc3QgY2hhbmdlZCA9IG5ld1ZhbHVlICE9PSBvbGRWYWx1ZVxuICAgICAgICAgICAgaWYgKGNoYW5nZWQpIHtcbiAgICAgICAgICAgICAgICB2YWx1ZXNbaW5kZXhdID0gbmV3VmFsdWVcbiAgICAgICAgICAgICAgICB0aGlzLm5vdGlmeUFycmF5Q2hpbGRVcGRhdGVfKGluZGV4LCBuZXdWYWx1ZSwgb2xkVmFsdWUpXG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBGb3Igb3V0IG9mIGJvdW5kIGluZGV4LCB3ZSBkb24ndCBjcmVhdGUgYW4gYWN0dWFsIHNwYXJzZSBhcnJheSxcbiAgICAgICAgICAgIC8vIGJ1dCByYXRoZXIgZmlsbCB0aGUgaG9sZXMgd2l0aCB1bmRlZmluZWQgKHNhbWUgYXMgc2V0QXJyYXlMZW5ndGhfKS5cbiAgICAgICAgICAgIC8vIFRoaXMgY291bGQgYmUgY29uc2lkZXJlZCBhIGJ1Zy5cbiAgICAgICAgICAgIGNvbnN0IG5ld0l0ZW1zID0gbmV3IEFycmF5KGluZGV4ICsgMSAtIHZhbHVlcy5sZW5ndGgpXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG5ld0l0ZW1zLmxlbmd0aCAtIDE7IGkrKykge1xuICAgICAgICAgICAgICAgIG5ld0l0ZW1zW2ldID0gdW5kZWZpbmVkXG4gICAgICAgICAgICB9IC8vIE5vIEFycmF5LmZpbGwgZXZlcnl3aGVyZS4uLlxuICAgICAgICAgICAgbmV3SXRlbXNbbmV3SXRlbXMubGVuZ3RoIC0gMV0gPSBuZXdWYWx1ZVxuICAgICAgICAgICAgdGhpcy5zcGxpY2VXaXRoQXJyYXlfKHZhbHVlcy5sZW5ndGgsIDAsIG5ld0l0ZW1zKVxuICAgICAgICB9XG4gICAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlT2JzZXJ2YWJsZUFycmF5PFQ+KFxuICAgIGluaXRpYWxWYWx1ZXM6IFRbXSB8IHVuZGVmaW5lZCxcbiAgICBlbmhhbmNlcjogSUVuaGFuY2VyPFQ+LFxuICAgIG5hbWUgPSBfX0RFVl9fID8gXCJPYnNlcnZhYmxlQXJyYXlAXCIgKyBnZXROZXh0SWQoKSA6IFwiT2JzZXJ2YWJsZUFycmF5XCIsXG4gICAgb3duZWQgPSBmYWxzZVxuKTogSU9ic2VydmFibGVBcnJheTxUPiB7XG4gICAgYXNzZXJ0UHJveGllcygpXG4gICAgcmV0dXJuIGluaXRPYnNlcnZhYmxlKCgpID0+IHtcbiAgICAgICAgY29uc3QgYWRtID0gbmV3IE9ic2VydmFibGVBcnJheUFkbWluaXN0cmF0aW9uKG5hbWUsIGVuaGFuY2VyLCBvd25lZCwgZmFsc2UpXG4gICAgICAgIGFkZEhpZGRlbkZpbmFsUHJvcChhZG0udmFsdWVzXywgJG1vYngsIGFkbSlcbiAgICAgICAgY29uc3QgcHJveHkgPSBuZXcgUHJveHkoYWRtLnZhbHVlc18sIGFycmF5VHJhcHMpIGFzIGFueVxuICAgICAgICBhZG0ucHJveHlfID0gcHJveHlcbiAgICAgICAgaWYgKGluaXRpYWxWYWx1ZXMgJiYgaW5pdGlhbFZhbHVlcy5sZW5ndGgpIHtcbiAgICAgICAgICAgIGFkbS5zcGxpY2VXaXRoQXJyYXlfKDAsIDAsIGluaXRpYWxWYWx1ZXMpXG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHByb3h5XG4gICAgfSlcbn1cblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG5leHBvcnQgdmFyIGFycmF5RXh0ZW5zaW9ucyA9IHtcbiAgICBjbGVhcigpOiBhbnlbXSB7XG4gICAgICAgIHJldHVybiB0aGlzLnNwbGljZSgwKVxuICAgIH0sXG5cbiAgICByZXBsYWNlKG5ld0l0ZW1zOiBhbnlbXSkge1xuICAgICAgICBjb25zdCBhZG06IE9ic2VydmFibGVBcnJheUFkbWluaXN0cmF0aW9uID0gdGhpc1skbW9ieF1cbiAgICAgICAgcmV0dXJuIGFkbS5zcGxpY2VXaXRoQXJyYXlfKDAsIGFkbS52YWx1ZXNfLmxlbmd0aCwgbmV3SXRlbXMpXG4gICAgfSxcblxuICAgIC8vIFVzZWQgYnkgSlNPTi5zdHJpbmdpZnlcbiAgICB0b0pTT04oKTogYW55W10ge1xuICAgICAgICByZXR1cm4gdGhpcy5zbGljZSgpXG4gICAgfSxcblxuICAgIC8qXG4gICAgICogZnVuY3Rpb25zIHRoYXQgZG8gYWx0ZXIgdGhlIGludGVybmFsIHN0cnVjdHVyZSBvZiB0aGUgYXJyYXksIChiYXNlZCBvbiBsaWIuZXM2LmQudHMpXG4gICAgICogc2luY2UgdGhlc2UgZnVuY3Rpb25zIGFsdGVyIHRoZSBpbm5lciBzdHJ1Y3R1cmUgb2YgdGhlIGFycmF5LCB0aGUgaGF2ZSBzaWRlIGVmZmVjdHMuXG4gICAgICogQmVjYXVzZSB0aGUgaGF2ZSBzaWRlIGVmZmVjdHMsIHRoZXkgc2hvdWxkIG5vdCBiZSB1c2VkIGluIGNvbXB1dGVkIGZ1bmN0aW9uLFxuICAgICAqIGFuZCBmb3IgdGhhdCByZWFzb24gdGhlIGRvIG5vdCBjYWxsIGRlcGVuZGVuY3lTdGF0ZS5ub3RpZnlPYnNlcnZlZFxuICAgICAqL1xuICAgIHNwbGljZShpbmRleDogbnVtYmVyLCBkZWxldGVDb3VudD86IG51bWJlciwgLi4ubmV3SXRlbXM6IGFueVtdKTogYW55W10ge1xuICAgICAgICBjb25zdCBhZG06IE9ic2VydmFibGVBcnJheUFkbWluaXN0cmF0aW9uID0gdGhpc1skbW9ieF1cbiAgICAgICAgc3dpdGNoIChhcmd1bWVudHMubGVuZ3RoKSB7XG4gICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgcmV0dXJuIFtdXG4gICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgcmV0dXJuIGFkbS5zcGxpY2VXaXRoQXJyYXlfKGluZGV4KVxuICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgIHJldHVybiBhZG0uc3BsaWNlV2l0aEFycmF5XyhpbmRleCwgZGVsZXRlQ291bnQpXG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGFkbS5zcGxpY2VXaXRoQXJyYXlfKGluZGV4LCBkZWxldGVDb3VudCwgbmV3SXRlbXMpXG4gICAgfSxcblxuICAgIHNwbGljZVdpdGhBcnJheShpbmRleDogbnVtYmVyLCBkZWxldGVDb3VudD86IG51bWJlciwgbmV3SXRlbXM/OiBhbnlbXSk6IGFueVtdIHtcbiAgICAgICAgcmV0dXJuICh0aGlzWyRtb2J4XSBhcyBPYnNlcnZhYmxlQXJyYXlBZG1pbmlzdHJhdGlvbikuc3BsaWNlV2l0aEFycmF5XyhcbiAgICAgICAgICAgIGluZGV4LFxuICAgICAgICAgICAgZGVsZXRlQ291bnQsXG4gICAgICAgICAgICBuZXdJdGVtc1xuICAgICAgICApXG4gICAgfSxcblxuICAgIHB1c2goLi4uaXRlbXM6IGFueVtdKTogbnVtYmVyIHtcbiAgICAgICAgY29uc3QgYWRtOiBPYnNlcnZhYmxlQXJyYXlBZG1pbmlzdHJhdGlvbiA9IHRoaXNbJG1vYnhdXG4gICAgICAgIGFkbS5zcGxpY2VXaXRoQXJyYXlfKGFkbS52YWx1ZXNfLmxlbmd0aCwgMCwgaXRlbXMpXG4gICAgICAgIHJldHVybiBhZG0udmFsdWVzXy5sZW5ndGhcbiAgICB9LFxuXG4gICAgcG9wKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5zcGxpY2UoTWF0aC5tYXgodGhpc1skbW9ieF0udmFsdWVzXy5sZW5ndGggLSAxLCAwKSwgMSlbMF1cbiAgICB9LFxuXG4gICAgc2hpZnQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnNwbGljZSgwLCAxKVswXVxuICAgIH0sXG5cbiAgICB1bnNoaWZ0KC4uLml0ZW1zOiBhbnlbXSk6IG51bWJlciB7XG4gICAgICAgIGNvbnN0IGFkbTogT2JzZXJ2YWJsZUFycmF5QWRtaW5pc3RyYXRpb24gPSB0aGlzWyRtb2J4XVxuICAgICAgICBhZG0uc3BsaWNlV2l0aEFycmF5XygwLCAwLCBpdGVtcylcbiAgICAgICAgcmV0dXJuIGFkbS52YWx1ZXNfLmxlbmd0aFxuICAgIH0sXG5cbiAgICByZXZlcnNlKCk6IGFueVtdIHtcbiAgICAgICAgLy8gcmV2ZXJzZSBieSBkZWZhdWx0IG11dGF0ZXMgaW4gcGxhY2UgYmVmb3JlIHJldHVybmluZyB0aGUgcmVzdWx0XG4gICAgICAgIC8vIHdoaWNoIG1ha2VzIGl0IGJvdGggYSAnZGVyaXZhdGlvbicgYW5kIGEgJ211dGF0aW9uJy5cbiAgICAgICAgaWYgKGdsb2JhbFN0YXRlLnRyYWNraW5nRGVyaXZhdGlvbikge1xuICAgICAgICAgICAgZGllKDM3LCBcInJldmVyc2VcIilcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnJlcGxhY2UodGhpcy5zbGljZSgpLnJldmVyc2UoKSlcbiAgICAgICAgcmV0dXJuIHRoaXNcbiAgICB9LFxuXG4gICAgc29ydCgpOiBhbnlbXSB7XG4gICAgICAgIC8vIHNvcnQgYnkgZGVmYXVsdCBtdXRhdGVzIGluIHBsYWNlIGJlZm9yZSByZXR1cm5pbmcgdGhlIHJlc3VsdFxuICAgICAgICAvLyB3aGljaCBnb2VzIGFnYWluc3QgYWxsIGdvb2QgcHJhY3RpY2VzLiBMZXQncyBub3QgY2hhbmdlIHRoZSBhcnJheSBpbiBwbGFjZSFcbiAgICAgICAgaWYgKGdsb2JhbFN0YXRlLnRyYWNraW5nRGVyaXZhdGlvbikge1xuICAgICAgICAgICAgZGllKDM3LCBcInNvcnRcIilcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBjb3B5ID0gdGhpcy5zbGljZSgpXG4gICAgICAgIGNvcHkuc29ydC5hcHBseShjb3B5LCBhcmd1bWVudHMpXG4gICAgICAgIHRoaXMucmVwbGFjZShjb3B5KVxuICAgICAgICByZXR1cm4gdGhpc1xuICAgIH0sXG5cbiAgICByZW1vdmUodmFsdWU6IGFueSk6IGJvb2xlYW4ge1xuICAgICAgICBjb25zdCBhZG06IE9ic2VydmFibGVBcnJheUFkbWluaXN0cmF0aW9uID0gdGhpc1skbW9ieF1cbiAgICAgICAgY29uc3QgaWR4ID0gYWRtLmRlaGFuY2VWYWx1ZXNfKGFkbS52YWx1ZXNfKS5pbmRleE9mKHZhbHVlKVxuICAgICAgICBpZiAoaWR4ID4gLTEpIHtcbiAgICAgICAgICAgIHRoaXMuc3BsaWNlKGlkeCwgMSlcbiAgICAgICAgICAgIHJldHVybiB0cnVlXG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgfVxufVxuXG4vKipcbiAqIFdyYXAgZnVuY3Rpb24gZnJvbSBwcm90b3R5cGVcbiAqIFdpdGhvdXQgdGhpcywgZXZlcnl0aGluZyB3b3JrcyBhcyB3ZWxsLCBidXQgdGhpcyB3b3Jrc1xuICogZmFzdGVyIGFzIGV2ZXJ5dGhpbmcgd29ya3Mgb24gdW5wcm94aWVkIHZhbHVlc1xuICovXG5hZGRBcnJheUV4dGVuc2lvbihcImF0XCIsIHNpbXBsZUZ1bmMpXG5hZGRBcnJheUV4dGVuc2lvbihcImNvbmNhdFwiLCBzaW1wbGVGdW5jKVxuYWRkQXJyYXlFeHRlbnNpb24oXCJmbGF0XCIsIHNpbXBsZUZ1bmMpXG5hZGRBcnJheUV4dGVuc2lvbihcImluY2x1ZGVzXCIsIHNpbXBsZUZ1bmMpXG5hZGRBcnJheUV4dGVuc2lvbihcImluZGV4T2ZcIiwgc2ltcGxlRnVuYylcbmFkZEFycmF5RXh0ZW5zaW9uKFwiam9pblwiLCBzaW1wbGVGdW5jKVxuYWRkQXJyYXlFeHRlbnNpb24oXCJsYXN0SW5kZXhPZlwiLCBzaW1wbGVGdW5jKVxuYWRkQXJyYXlFeHRlbnNpb24oXCJzbGljZVwiLCBzaW1wbGVGdW5jKVxuYWRkQXJyYXlFeHRlbnNpb24oXCJ0b1N0cmluZ1wiLCBzaW1wbGVGdW5jKVxuYWRkQXJyYXlFeHRlbnNpb24oXCJ0b0xvY2FsZVN0cmluZ1wiLCBzaW1wbGVGdW5jKVxuYWRkQXJyYXlFeHRlbnNpb24oXCJ0b1NvcnRlZFwiLCBzaW1wbGVGdW5jKVxuYWRkQXJyYXlFeHRlbnNpb24oXCJ0b1NwbGljZWRcIiwgc2ltcGxlRnVuYylcbmFkZEFycmF5RXh0ZW5zaW9uKFwid2l0aFwiLCBzaW1wbGVGdW5jKVxuLy8gbWFwXG5hZGRBcnJheUV4dGVuc2lvbihcImV2ZXJ5XCIsIG1hcExpa2VGdW5jKVxuYWRkQXJyYXlFeHRlbnNpb24oXCJmaWx0ZXJcIiwgbWFwTGlrZUZ1bmMpXG5hZGRBcnJheUV4dGVuc2lvbihcImZpbmRcIiwgbWFwTGlrZUZ1bmMpXG5hZGRBcnJheUV4dGVuc2lvbihcImZpbmRJbmRleFwiLCBtYXBMaWtlRnVuYylcbmFkZEFycmF5RXh0ZW5zaW9uKFwiZmluZExhc3RcIiwgbWFwTGlrZUZ1bmMpXG5hZGRBcnJheUV4dGVuc2lvbihcImZpbmRMYXN0SW5kZXhcIiwgbWFwTGlrZUZ1bmMpXG5hZGRBcnJheUV4dGVuc2lvbihcImZsYXRNYXBcIiwgbWFwTGlrZUZ1bmMpXG5hZGRBcnJheUV4dGVuc2lvbihcImZvckVhY2hcIiwgbWFwTGlrZUZ1bmMpXG5hZGRBcnJheUV4dGVuc2lvbihcIm1hcFwiLCBtYXBMaWtlRnVuYylcbmFkZEFycmF5RXh0ZW5zaW9uKFwic29tZVwiLCBtYXBMaWtlRnVuYylcbmFkZEFycmF5RXh0ZW5zaW9uKFwidG9SZXZlcnNlZFwiLCBtYXBMaWtlRnVuYylcbi8vIHJlZHVjZVxuYWRkQXJyYXlFeHRlbnNpb24oXCJyZWR1Y2VcIiwgcmVkdWNlTGlrZUZ1bmMpXG5hZGRBcnJheUV4dGVuc2lvbihcInJlZHVjZVJpZ2h0XCIsIHJlZHVjZUxpa2VGdW5jKVxuXG5mdW5jdGlvbiBhZGRBcnJheUV4dGVuc2lvbihmdW5jTmFtZSwgZnVuY0ZhY3RvcnkpIHtcbiAgICBpZiAodHlwZW9mIEFycmF5LnByb3RvdHlwZVtmdW5jTmFtZV0gPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICBhcnJheUV4dGVuc2lvbnNbZnVuY05hbWVdID0gZnVuY0ZhY3RvcnkoZnVuY05hbWUpXG4gICAgfVxufVxuXG4vLyBSZXBvcnQgYW5kIGRlbGVnYXRlIHRvIGRlaGFuY2VkIGFycmF5XG5mdW5jdGlvbiBzaW1wbGVGdW5jKGZ1bmNOYW1lKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgY29uc3QgYWRtOiBPYnNlcnZhYmxlQXJyYXlBZG1pbmlzdHJhdGlvbiA9IHRoaXNbJG1vYnhdXG4gICAgICAgIGFkbS5hdG9tXy5yZXBvcnRPYnNlcnZlZCgpXG4gICAgICAgIGNvbnN0IGRlaGFuY2VkVmFsdWVzID0gYWRtLmRlaGFuY2VWYWx1ZXNfKGFkbS52YWx1ZXNfKVxuICAgICAgICByZXR1cm4gZGVoYW5jZWRWYWx1ZXNbZnVuY05hbWVdLmFwcGx5KGRlaGFuY2VkVmFsdWVzLCBhcmd1bWVudHMpXG4gICAgfVxufVxuXG4vLyBNYWtlIHN1cmUgY2FsbGJhY2tzIHJlY2VpdmUgY29ycmVjdCBhcnJheSBhcmcgIzIzMjZcbmZ1bmN0aW9uIG1hcExpa2VGdW5jKGZ1bmNOYW1lKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChjYWxsYmFjaywgdGhpc0FyZykge1xuICAgICAgICBjb25zdCBhZG06IE9ic2VydmFibGVBcnJheUFkbWluaXN0cmF0aW9uID0gdGhpc1skbW9ieF1cbiAgICAgICAgYWRtLmF0b21fLnJlcG9ydE9ic2VydmVkKClcbiAgICAgICAgY29uc3QgZGVoYW5jZWRWYWx1ZXMgPSBhZG0uZGVoYW5jZVZhbHVlc18oYWRtLnZhbHVlc18pXG4gICAgICAgIHJldHVybiBkZWhhbmNlZFZhbHVlc1tmdW5jTmFtZV0oKGVsZW1lbnQsIGluZGV4KSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gY2FsbGJhY2suY2FsbCh0aGlzQXJnLCBlbGVtZW50LCBpbmRleCwgdGhpcylcbiAgICAgICAgfSlcbiAgICB9XG59XG5cbi8vIE1ha2Ugc3VyZSBjYWxsYmFja3MgcmVjZWl2ZSBjb3JyZWN0IGFycmF5IGFyZyAjMjMyNlxuZnVuY3Rpb24gcmVkdWNlTGlrZUZ1bmMoZnVuY05hbWUpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICBjb25zdCBhZG06IE9ic2VydmFibGVBcnJheUFkbWluaXN0cmF0aW9uID0gdGhpc1skbW9ieF1cbiAgICAgICAgYWRtLmF0b21fLnJlcG9ydE9ic2VydmVkKClcbiAgICAgICAgY29uc3QgZGVoYW5jZWRWYWx1ZXMgPSBhZG0uZGVoYW5jZVZhbHVlc18oYWRtLnZhbHVlc18pXG4gICAgICAgIC8vICMyNDMyIC0gcmVkdWNlIGJlaGF2aW9yIGRlcGVuZHMgb24gYXJndW1lbnRzLmxlbmd0aFxuICAgICAgICBjb25zdCBjYWxsYmFjayA9IGFyZ3VtZW50c1swXVxuICAgICAgICBhcmd1bWVudHNbMF0gPSAoYWNjdW11bGF0b3IsIGN1cnJlbnRWYWx1ZSwgaW5kZXgpID0+IHtcbiAgICAgICAgICAgIHJldHVybiBjYWxsYmFjayhhY2N1bXVsYXRvciwgY3VycmVudFZhbHVlLCBpbmRleCwgdGhpcylcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZGVoYW5jZWRWYWx1ZXNbZnVuY05hbWVdLmFwcGx5KGRlaGFuY2VkVmFsdWVzLCBhcmd1bWVudHMpXG4gICAgfVxufVxuXG5jb25zdCBpc09ic2VydmFibGVBcnJheUFkbWluaXN0cmF0aW9uID0gY3JlYXRlSW5zdGFuY2VvZlByZWRpY2F0ZShcbiAgICBcIk9ic2VydmFibGVBcnJheUFkbWluaXN0cmF0aW9uXCIsXG4gICAgT2JzZXJ2YWJsZUFycmF5QWRtaW5pc3RyYXRpb25cbilcblxuZXhwb3J0IGZ1bmN0aW9uIGlzT2JzZXJ2YWJsZUFycmF5KHRoaW5nKTogdGhpbmcgaXMgSU9ic2VydmFibGVBcnJheTxhbnk+IHtcbiAgICByZXR1cm4gaXNPYmplY3QodGhpbmcpICYmIGlzT2JzZXJ2YWJsZUFycmF5QWRtaW5pc3RyYXRpb24odGhpbmdbJG1vYnhdKVxufVxuIiwiaW1wb3J0IHtcbiAgICAkbW9ieCxcbiAgICBJRW5oYW5jZXIsXG4gICAgSUludGVyY2VwdGFibGUsXG4gICAgSUludGVyY2VwdG9yLFxuICAgIElMaXN0ZW5hYmxlLFxuICAgIExhbWJkYSxcbiAgICBPYnNlcnZhYmxlVmFsdWUsXG4gICAgY2hlY2tJZlN0YXRlTW9kaWZpY2F0aW9uc0FyZUFsbG93ZWQsXG4gICAgY3JlYXRlQXRvbSxcbiAgICBjcmVhdGVJbnN0YW5jZW9mUHJlZGljYXRlLFxuICAgIGRlZXBFbmhhbmNlcixcbiAgICBnZXROZXh0SWQsXG4gICAgZ2V0UGxhaW5PYmplY3RLZXlzLFxuICAgIGhhc0ludGVyY2VwdG9ycyxcbiAgICBoYXNMaXN0ZW5lcnMsXG4gICAgaW50ZXJjZXB0Q2hhbmdlLFxuICAgIGlzRVM2TWFwLFxuICAgIGlzUGxhaW5PYmplY3QsXG4gICAgaXNTcHlFbmFibGVkLFxuICAgIG1ha2VJdGVyYWJsZSxcbiAgICBub3RpZnlMaXN0ZW5lcnMsXG4gICAgcmVmZXJlbmNlRW5oYW5jZXIsXG4gICAgcmVnaXN0ZXJJbnRlcmNlcHRvcixcbiAgICByZWdpc3Rlckxpc3RlbmVyLFxuICAgIHNweVJlcG9ydEVuZCxcbiAgICBzcHlSZXBvcnRTdGFydCxcbiAgICBzdHJpbmdpZnlLZXksXG4gICAgdHJhbnNhY3Rpb24sXG4gICAgdW50cmFja2VkLFxuICAgIG9uQmVjb21lVW5vYnNlcnZlZCxcbiAgICBnbG9iYWxTdGF0ZSxcbiAgICBkaWUsXG4gICAgaXNGdW5jdGlvbixcbiAgICBVUERBVEUsXG4gICAgSUF0b20sXG4gICAgUHVyZVNweUV2ZW50LFxuICAgIGluaXRPYnNlcnZhYmxlXG59IGZyb20gXCIuLi9pbnRlcm5hbFwiXG5cbmV4cG9ydCBpbnRlcmZhY2UgSUtleVZhbHVlTWFwPFYgPSBhbnk+IHtcbiAgICBba2V5OiBzdHJpbmddOiBWXG59XG5cbmV4cG9ydCB0eXBlIElNYXBFbnRyeTxLID0gYW55LCBWID0gYW55PiA9IFtLLCBWXVxuZXhwb3J0IHR5cGUgSVJlYWRvbmx5TWFwRW50cnk8SyA9IGFueSwgViA9IGFueT4gPSByZWFkb25seSBbSywgVl1cbmV4cG9ydCB0eXBlIElNYXBFbnRyaWVzPEsgPSBhbnksIFYgPSBhbnk+ID0gSU1hcEVudHJ5PEssIFY+W11cbmV4cG9ydCB0eXBlIElSZWFkb25seU1hcEVudHJpZXM8SyA9IGFueSwgViA9IGFueT4gPSBJUmVhZG9ubHlNYXBFbnRyeTxLLCBWPltdXG5cbmV4cG9ydCB0eXBlIElNYXBEaWRDaGFuZ2U8SyA9IGFueSwgViA9IGFueT4gPSB7IG9ic2VydmFibGVLaW5kOiBcIm1hcFwiOyBkZWJ1Z09iamVjdE5hbWU6IHN0cmluZyB9ICYgKFxuICAgIHwge1xuICAgICAgICAgIG9iamVjdDogT2JzZXJ2YWJsZU1hcDxLLCBWPlxuICAgICAgICAgIG5hbWU6IEsgLy8gYWN0dWFsIHRoZSBrZXkgb3IgaW5kZXgsIGJ1dCB0aGlzIGlzIGJhc2VkIG9uIHRoZSBhbmNpZW50IC5vYnNlcnZlIHByb3Bvc2FsIGZvciBjb25zaXN0ZW5jeVxuICAgICAgICAgIHR5cGU6IFwidXBkYXRlXCJcbiAgICAgICAgICBuZXdWYWx1ZTogVlxuICAgICAgICAgIG9sZFZhbHVlOiBWXG4gICAgICB9XG4gICAgfCB7XG4gICAgICAgICAgb2JqZWN0OiBPYnNlcnZhYmxlTWFwPEssIFY+XG4gICAgICAgICAgbmFtZTogS1xuICAgICAgICAgIHR5cGU6IFwiYWRkXCJcbiAgICAgICAgICBuZXdWYWx1ZTogVlxuICAgICAgfVxuICAgIHwge1xuICAgICAgICAgIG9iamVjdDogT2JzZXJ2YWJsZU1hcDxLLCBWPlxuICAgICAgICAgIG5hbWU6IEtcbiAgICAgICAgICB0eXBlOiBcImRlbGV0ZVwiXG4gICAgICAgICAgb2xkVmFsdWU6IFZcbiAgICAgIH1cbilcblxuZXhwb3J0IGludGVyZmFjZSBJTWFwV2lsbENoYW5nZTxLID0gYW55LCBWID0gYW55PiB7XG4gICAgb2JqZWN0OiBPYnNlcnZhYmxlTWFwPEssIFY+XG4gICAgdHlwZTogXCJ1cGRhdGVcIiB8IFwiYWRkXCIgfCBcImRlbGV0ZVwiXG4gICAgbmFtZTogS1xuICAgIG5ld1ZhbHVlPzogVlxufVxuXG5jb25zdCBPYnNlcnZhYmxlTWFwTWFya2VyID0ge31cblxuZXhwb3J0IGNvbnN0IEFERCA9IFwiYWRkXCJcbmV4cG9ydCBjb25zdCBERUxFVEUgPSBcImRlbGV0ZVwiXG5cbmV4cG9ydCB0eXBlIElPYnNlcnZhYmxlTWFwSW5pdGlhbFZhbHVlczxLID0gYW55LCBWID0gYW55PiA9XG4gICAgfCBJTWFwRW50cmllczxLLCBWPlxuICAgIHwgSVJlYWRvbmx5TWFwRW50cmllczxLLCBWPlxuICAgIHwgSUtleVZhbHVlTWFwPFY+XG4gICAgfCBNYXA8SywgVj5cblxuLy8ganVzdCBleHRlbmQgTWFwPyBTZWUgYWxzbyBodHRwczovL2dpc3QuZ2l0aHViLmNvbS9uZXN0aGFydXMvMTNiNGQ3NGYyZWY0YTJmNDM1N2RiZDNmYzIzYzFlNTRcbi8vIEJ1dDogaHR0cHM6Ly9naXRodWIuY29tL21vYnhqcy9tb2J4L2lzc3Vlcy8xNTU2XG5leHBvcnQgY2xhc3MgT2JzZXJ2YWJsZU1hcDxLID0gYW55LCBWID0gYW55PlxuICAgIGltcGxlbWVudHMgTWFwPEssIFY+LCBJSW50ZXJjZXB0YWJsZTxJTWFwV2lsbENoYW5nZTxLLCBWPj4sIElMaXN0ZW5hYmxlXG57XG4gICAgWyRtb2J4XSA9IE9ic2VydmFibGVNYXBNYXJrZXJcbiAgICBkYXRhXyE6IE1hcDxLLCBPYnNlcnZhYmxlVmFsdWU8Vj4+XG4gICAgaGFzTWFwXyE6IE1hcDxLLCBPYnNlcnZhYmxlVmFsdWU8Ym9vbGVhbj4+IC8vIGhhc01hcCwgbm90IGhhc2hNYXAgPi0pLlxuICAgIGtleXNBdG9tXyE6IElBdG9tXG4gICAgaW50ZXJjZXB0b3JzX1xuICAgIGNoYW5nZUxpc3RlbmVyc19cbiAgICBkZWhhbmNlcjogYW55XG5cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgaW5pdGlhbERhdGE/OiBJT2JzZXJ2YWJsZU1hcEluaXRpYWxWYWx1ZXM8SywgVj4sXG4gICAgICAgIHB1YmxpYyBlbmhhbmNlcl86IElFbmhhbmNlcjxWPiA9IGRlZXBFbmhhbmNlcixcbiAgICAgICAgcHVibGljIG5hbWVfID0gX19ERVZfXyA/IFwiT2JzZXJ2YWJsZU1hcEBcIiArIGdldE5leHRJZCgpIDogXCJPYnNlcnZhYmxlTWFwXCJcbiAgICApIHtcbiAgICAgICAgaWYgKCFpc0Z1bmN0aW9uKE1hcCkpIHtcbiAgICAgICAgICAgIGRpZSgxOClcbiAgICAgICAgfVxuICAgICAgICBpbml0T2JzZXJ2YWJsZSgoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLmtleXNBdG9tXyA9IGNyZWF0ZUF0b20oX19ERVZfXyA/IGAke3RoaXMubmFtZV99LmtleXMoKWAgOiBcIk9ic2VydmFibGVNYXAua2V5cygpXCIpXG4gICAgICAgICAgICB0aGlzLmRhdGFfID0gbmV3IE1hcCgpXG4gICAgICAgICAgICB0aGlzLmhhc01hcF8gPSBuZXcgTWFwKClcbiAgICAgICAgICAgIGlmIChpbml0aWFsRGF0YSkge1xuICAgICAgICAgICAgICAgIHRoaXMubWVyZ2UoaW5pdGlhbERhdGEpXG4gICAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgfVxuXG4gICAgcHJpdmF0ZSBoYXNfKGtleTogSyk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gdGhpcy5kYXRhXy5oYXMoa2V5KVxuICAgIH1cblxuICAgIGhhcyhrZXk6IEspOiBib29sZWFuIHtcbiAgICAgICAgaWYgKCFnbG9iYWxTdGF0ZS50cmFja2luZ0Rlcml2YXRpb24pIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmhhc18oa2V5KVxuICAgICAgICB9XG5cbiAgICAgICAgbGV0IGVudHJ5ID0gdGhpcy5oYXNNYXBfLmdldChrZXkpXG4gICAgICAgIGlmICghZW50cnkpIHtcbiAgICAgICAgICAgIGNvbnN0IG5ld0VudHJ5ID0gKGVudHJ5ID0gbmV3IE9ic2VydmFibGVWYWx1ZShcbiAgICAgICAgICAgICAgICB0aGlzLmhhc18oa2V5KSxcbiAgICAgICAgICAgICAgICByZWZlcmVuY2VFbmhhbmNlcixcbiAgICAgICAgICAgICAgICBfX0RFVl9fID8gYCR7dGhpcy5uYW1lX30uJHtzdHJpbmdpZnlLZXkoa2V5KX0/YCA6IFwiT2JzZXJ2YWJsZU1hcC5rZXk/XCIsXG4gICAgICAgICAgICAgICAgZmFsc2VcbiAgICAgICAgICAgICkpXG4gICAgICAgICAgICB0aGlzLmhhc01hcF8uc2V0KGtleSwgbmV3RW50cnkpXG4gICAgICAgICAgICBvbkJlY29tZVVub2JzZXJ2ZWQobmV3RW50cnksICgpID0+IHRoaXMuaGFzTWFwXy5kZWxldGUoa2V5KSlcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBlbnRyeS5nZXQoKVxuICAgIH1cblxuICAgIHNldChrZXk6IEssIHZhbHVlOiBWKSB7XG4gICAgICAgIGNvbnN0IGhhc0tleSA9IHRoaXMuaGFzXyhrZXkpXG4gICAgICAgIGlmIChoYXNJbnRlcmNlcHRvcnModGhpcykpIHtcbiAgICAgICAgICAgIGNvbnN0IGNoYW5nZSA9IGludGVyY2VwdENoYW5nZTxJTWFwV2lsbENoYW5nZTxLLCBWPj4odGhpcywge1xuICAgICAgICAgICAgICAgIHR5cGU6IGhhc0tleSA/IFVQREFURSA6IEFERCxcbiAgICAgICAgICAgICAgICBvYmplY3Q6IHRoaXMsXG4gICAgICAgICAgICAgICAgbmV3VmFsdWU6IHZhbHVlLFxuICAgICAgICAgICAgICAgIG5hbWU6IGtleVxuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIGlmICghY2hhbmdlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXNcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhbHVlID0gY2hhbmdlLm5ld1ZhbHVlIVxuICAgICAgICB9XG4gICAgICAgIGlmIChoYXNLZXkpIHtcbiAgICAgICAgICAgIHRoaXMudXBkYXRlVmFsdWVfKGtleSwgdmFsdWUpXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmFkZFZhbHVlXyhrZXksIHZhbHVlKVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzXG4gICAgfVxuXG4gICAgZGVsZXRlKGtleTogSyk6IGJvb2xlYW4ge1xuICAgICAgICBjaGVja0lmU3RhdGVNb2RpZmljYXRpb25zQXJlQWxsb3dlZCh0aGlzLmtleXNBdG9tXylcbiAgICAgICAgaWYgKGhhc0ludGVyY2VwdG9ycyh0aGlzKSkge1xuICAgICAgICAgICAgY29uc3QgY2hhbmdlID0gaW50ZXJjZXB0Q2hhbmdlPElNYXBXaWxsQ2hhbmdlPEssIFY+Pih0aGlzLCB7XG4gICAgICAgICAgICAgICAgdHlwZTogREVMRVRFLFxuICAgICAgICAgICAgICAgIG9iamVjdDogdGhpcyxcbiAgICAgICAgICAgICAgICBuYW1lOiBrZXlcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICBpZiAoIWNoYW5nZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmhhc18oa2V5KSkge1xuICAgICAgICAgICAgY29uc3Qgbm90aWZ5U3B5ID0gaXNTcHlFbmFibGVkKClcbiAgICAgICAgICAgIGNvbnN0IG5vdGlmeSA9IGhhc0xpc3RlbmVycyh0aGlzKVxuICAgICAgICAgICAgY29uc3QgY2hhbmdlOiBJTWFwRGlkQ2hhbmdlPEssIFY+IHwgbnVsbCA9XG4gICAgICAgICAgICAgICAgbm90aWZ5IHx8IG5vdGlmeVNweVxuICAgICAgICAgICAgICAgICAgICA/IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgb2JzZXJ2YWJsZUtpbmQ6IFwibWFwXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGRlYnVnT2JqZWN0TmFtZTogdGhpcy5uYW1lXyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogREVMRVRFLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBvYmplY3Q6IHRoaXMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIG9sZFZhbHVlOiAoPGFueT50aGlzLmRhdGFfLmdldChrZXkpKS52YWx1ZV8sXG4gICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IGtleVxuICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgOiBudWxsXG5cbiAgICAgICAgICAgIGlmIChfX0RFVl9fICYmIG5vdGlmeVNweSkge1xuICAgICAgICAgICAgICAgIHNweVJlcG9ydFN0YXJ0KGNoYW5nZSEgYXMgUHVyZVNweUV2ZW50KVxuICAgICAgICAgICAgfSAvLyBUT0RPIGZpeCB0eXBlXG4gICAgICAgICAgICB0cmFuc2FjdGlvbigoKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5rZXlzQXRvbV8ucmVwb3J0Q2hhbmdlZCgpXG4gICAgICAgICAgICAgICAgdGhpcy5oYXNNYXBfLmdldChrZXkpPy5zZXROZXdWYWx1ZV8oZmFsc2UpXG4gICAgICAgICAgICAgICAgY29uc3Qgb2JzZXJ2YWJsZSA9IHRoaXMuZGF0YV8uZ2V0KGtleSkhXG4gICAgICAgICAgICAgICAgb2JzZXJ2YWJsZS5zZXROZXdWYWx1ZV8odW5kZWZpbmVkIGFzIGFueSlcbiAgICAgICAgICAgICAgICB0aGlzLmRhdGFfLmRlbGV0ZShrZXkpXG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgaWYgKG5vdGlmeSkge1xuICAgICAgICAgICAgICAgIG5vdGlmeUxpc3RlbmVycyh0aGlzLCBjaGFuZ2UpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoX19ERVZfXyAmJiBub3RpZnlTcHkpIHtcbiAgICAgICAgICAgICAgICBzcHlSZXBvcnRFbmQoKVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2VcbiAgICB9XG5cbiAgICBwcml2YXRlIHVwZGF0ZVZhbHVlXyhrZXk6IEssIG5ld1ZhbHVlOiBWIHwgdW5kZWZpbmVkKSB7XG4gICAgICAgIGNvbnN0IG9ic2VydmFibGUgPSB0aGlzLmRhdGFfLmdldChrZXkpIVxuICAgICAgICBuZXdWYWx1ZSA9IChvYnNlcnZhYmxlIGFzIGFueSkucHJlcGFyZU5ld1ZhbHVlXyhuZXdWYWx1ZSkgYXMgVlxuICAgICAgICBpZiAobmV3VmFsdWUgIT09IGdsb2JhbFN0YXRlLlVOQ0hBTkdFRCkge1xuICAgICAgICAgICAgY29uc3Qgbm90aWZ5U3B5ID0gaXNTcHlFbmFibGVkKClcbiAgICAgICAgICAgIGNvbnN0IG5vdGlmeSA9IGhhc0xpc3RlbmVycyh0aGlzKVxuICAgICAgICAgICAgY29uc3QgY2hhbmdlOiBJTWFwRGlkQ2hhbmdlPEssIFY+IHwgbnVsbCA9XG4gICAgICAgICAgICAgICAgbm90aWZ5IHx8IG5vdGlmeVNweVxuICAgICAgICAgICAgICAgICAgICA/IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgb2JzZXJ2YWJsZUtpbmQ6IFwibWFwXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGRlYnVnT2JqZWN0TmFtZTogdGhpcy5uYW1lXyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogVVBEQVRFLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBvYmplY3Q6IHRoaXMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIG9sZFZhbHVlOiAob2JzZXJ2YWJsZSBhcyBhbnkpLnZhbHVlXyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZToga2V5LFxuICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdWYWx1ZVxuICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgOiBudWxsXG4gICAgICAgICAgICBpZiAoX19ERVZfXyAmJiBub3RpZnlTcHkpIHtcbiAgICAgICAgICAgICAgICBzcHlSZXBvcnRTdGFydChjaGFuZ2UhIGFzIFB1cmVTcHlFdmVudClcbiAgICAgICAgICAgIH0gLy8gVE9ETyBmaXggdHlwZVxuICAgICAgICAgICAgb2JzZXJ2YWJsZS5zZXROZXdWYWx1ZV8obmV3VmFsdWUgYXMgVilcbiAgICAgICAgICAgIGlmIChub3RpZnkpIHtcbiAgICAgICAgICAgICAgICBub3RpZnlMaXN0ZW5lcnModGhpcywgY2hhbmdlKVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKF9fREVWX18gJiYgbm90aWZ5U3B5KSB7XG4gICAgICAgICAgICAgICAgc3B5UmVwb3J0RW5kKClcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgYWRkVmFsdWVfKGtleTogSywgbmV3VmFsdWU6IFYpIHtcbiAgICAgICAgY2hlY2tJZlN0YXRlTW9kaWZpY2F0aW9uc0FyZUFsbG93ZWQodGhpcy5rZXlzQXRvbV8pXG4gICAgICAgIHRyYW5zYWN0aW9uKCgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IG9ic2VydmFibGUgPSBuZXcgT2JzZXJ2YWJsZVZhbHVlKFxuICAgICAgICAgICAgICAgIG5ld1ZhbHVlLFxuICAgICAgICAgICAgICAgIHRoaXMuZW5oYW5jZXJfLFxuICAgICAgICAgICAgICAgIF9fREVWX18gPyBgJHt0aGlzLm5hbWVffS4ke3N0cmluZ2lmeUtleShrZXkpfWAgOiBcIk9ic2VydmFibGVNYXAua2V5XCIsXG4gICAgICAgICAgICAgICAgZmFsc2VcbiAgICAgICAgICAgIClcbiAgICAgICAgICAgIHRoaXMuZGF0YV8uc2V0KGtleSwgb2JzZXJ2YWJsZSlcbiAgICAgICAgICAgIG5ld1ZhbHVlID0gKG9ic2VydmFibGUgYXMgYW55KS52YWx1ZV8gLy8gdmFsdWUgbWlnaHQgaGF2ZSBiZWVuIGNoYW5nZWRcbiAgICAgICAgICAgIHRoaXMuaGFzTWFwXy5nZXQoa2V5KT8uc2V0TmV3VmFsdWVfKHRydWUpXG4gICAgICAgICAgICB0aGlzLmtleXNBdG9tXy5yZXBvcnRDaGFuZ2VkKClcbiAgICAgICAgfSlcbiAgICAgICAgY29uc3Qgbm90aWZ5U3B5ID0gaXNTcHlFbmFibGVkKClcbiAgICAgICAgY29uc3Qgbm90aWZ5ID0gaGFzTGlzdGVuZXJzKHRoaXMpXG4gICAgICAgIGNvbnN0IGNoYW5nZTogSU1hcERpZENoYW5nZTxLLCBWPiB8IG51bGwgPVxuICAgICAgICAgICAgbm90aWZ5IHx8IG5vdGlmeVNweVxuICAgICAgICAgICAgICAgID8ge1xuICAgICAgICAgICAgICAgICAgICAgIG9ic2VydmFibGVLaW5kOiBcIm1hcFwiLFxuICAgICAgICAgICAgICAgICAgICAgIGRlYnVnT2JqZWN0TmFtZTogdGhpcy5uYW1lXyxcbiAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBBREQsXG4gICAgICAgICAgICAgICAgICAgICAgb2JqZWN0OiB0aGlzLFxuICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IGtleSxcbiAgICAgICAgICAgICAgICAgICAgICBuZXdWYWx1ZVxuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIDogbnVsbFxuICAgICAgICBpZiAoX19ERVZfXyAmJiBub3RpZnlTcHkpIHtcbiAgICAgICAgICAgIHNweVJlcG9ydFN0YXJ0KGNoYW5nZSEgYXMgUHVyZVNweUV2ZW50KVxuICAgICAgICB9IC8vIFRPRE8gZml4IHR5cGVcbiAgICAgICAgaWYgKG5vdGlmeSkge1xuICAgICAgICAgICAgbm90aWZ5TGlzdGVuZXJzKHRoaXMsIGNoYW5nZSlcbiAgICAgICAgfVxuICAgICAgICBpZiAoX19ERVZfXyAmJiBub3RpZnlTcHkpIHtcbiAgICAgICAgICAgIHNweVJlcG9ydEVuZCgpXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBnZXQoa2V5OiBLKTogViB8IHVuZGVmaW5lZCB7XG4gICAgICAgIGlmICh0aGlzLmhhcyhrZXkpKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5kZWhhbmNlVmFsdWVfKHRoaXMuZGF0YV8uZ2V0KGtleSkhLmdldCgpKVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLmRlaGFuY2VWYWx1ZV8odW5kZWZpbmVkKVxuICAgIH1cblxuICAgIHByaXZhdGUgZGVoYW5jZVZhbHVlXzxYIGV4dGVuZHMgViB8IHVuZGVmaW5lZD4odmFsdWU6IFgpOiBYIHtcbiAgICAgICAgaWYgKHRoaXMuZGVoYW5jZXIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZGVoYW5jZXIodmFsdWUpXG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHZhbHVlXG4gICAgfVxuXG4gICAga2V5cygpOiBJdGVyYWJsZUl0ZXJhdG9yPEs+IHtcbiAgICAgICAgdGhpcy5rZXlzQXRvbV8ucmVwb3J0T2JzZXJ2ZWQoKVxuICAgICAgICByZXR1cm4gdGhpcy5kYXRhXy5rZXlzKClcbiAgICB9XG5cbiAgICB2YWx1ZXMoKTogSXRlcmFibGVJdGVyYXRvcjxWPiB7XG4gICAgICAgIGNvbnN0IHNlbGYgPSB0aGlzXG4gICAgICAgIGNvbnN0IGtleXMgPSB0aGlzLmtleXMoKVxuICAgICAgICByZXR1cm4gbWFrZUl0ZXJhYmxlKHtcbiAgICAgICAgICAgIG5leHQoKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgeyBkb25lLCB2YWx1ZSB9ID0ga2V5cy5uZXh0KClcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICBkb25lLFxuICAgICAgICAgICAgICAgICAgICB2YWx1ZTogZG9uZSA/ICh1bmRlZmluZWQgYXMgYW55KSA6IHNlbGYuZ2V0KHZhbHVlKVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICB9XG5cbiAgICBlbnRyaWVzKCk6IEl0ZXJhYmxlSXRlcmF0b3I8SU1hcEVudHJ5PEssIFY+PiB7XG4gICAgICAgIGNvbnN0IHNlbGYgPSB0aGlzXG4gICAgICAgIGNvbnN0IGtleXMgPSB0aGlzLmtleXMoKVxuICAgICAgICByZXR1cm4gbWFrZUl0ZXJhYmxlKHtcbiAgICAgICAgICAgIG5leHQoKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgeyBkb25lLCB2YWx1ZSB9ID0ga2V5cy5uZXh0KClcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICBkb25lLFxuICAgICAgICAgICAgICAgICAgICB2YWx1ZTogZG9uZSA/ICh1bmRlZmluZWQgYXMgYW55KSA6IChbdmFsdWUsIHNlbGYuZ2V0KHZhbHVlKSFdIGFzIFtLLCBWXSlcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgfVxuXG4gICAgW1N5bWJvbC5pdGVyYXRvcl0oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmVudHJpZXMoKVxuICAgIH1cblxuICAgIGZvckVhY2goY2FsbGJhY2s6ICh2YWx1ZTogViwga2V5OiBLLCBvYmplY3Q6IE1hcDxLLCBWPikgPT4gdm9pZCwgdGhpc0FyZz8pIHtcbiAgICAgICAgZm9yIChjb25zdCBba2V5LCB2YWx1ZV0gb2YgdGhpcykge1xuICAgICAgICAgICAgY2FsbGJhY2suY2FsbCh0aGlzQXJnLCB2YWx1ZSwga2V5LCB0aGlzKVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqIE1lcmdlIGFub3RoZXIgb2JqZWN0IGludG8gdGhpcyBvYmplY3QsIHJldHVybnMgdGhpcy4gKi9cbiAgICBtZXJnZShvdGhlcj86IElPYnNlcnZhYmxlTWFwSW5pdGlhbFZhbHVlczxLLCBWPik6IE9ic2VydmFibGVNYXA8SywgVj4ge1xuICAgICAgICBpZiAoaXNPYnNlcnZhYmxlTWFwKG90aGVyKSkge1xuICAgICAgICAgICAgb3RoZXIgPSBuZXcgTWFwKG90aGVyKVxuICAgICAgICB9XG4gICAgICAgIHRyYW5zYWN0aW9uKCgpID0+IHtcbiAgICAgICAgICAgIGlmIChpc1BsYWluT2JqZWN0KG90aGVyKSkge1xuICAgICAgICAgICAgICAgIGdldFBsYWluT2JqZWN0S2V5cyhvdGhlcikuZm9yRWFjaCgoa2V5OiBhbnkpID0+XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0KGtleSBhcyBLLCAob3RoZXIgYXMgSUtleVZhbHVlTWFwKVtrZXldKVxuICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheShvdGhlcikpIHtcbiAgICAgICAgICAgICAgICBvdGhlci5mb3JFYWNoKChba2V5LCB2YWx1ZV0pID0+IHRoaXMuc2V0KGtleSwgdmFsdWUpKVxuICAgICAgICAgICAgfSBlbHNlIGlmIChpc0VTNk1hcChvdGhlcikpIHtcbiAgICAgICAgICAgICAgICBpZiAob3RoZXIuY29uc3RydWN0b3IgIT09IE1hcCkge1xuICAgICAgICAgICAgICAgICAgICBkaWUoMTksIG90aGVyKVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBvdGhlci5mb3JFYWNoKCh2YWx1ZSwga2V5KSA9PiB0aGlzLnNldChrZXksIHZhbHVlKSlcbiAgICAgICAgICAgIH0gZWxzZSBpZiAob3RoZXIgIT09IG51bGwgJiYgb3RoZXIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIGRpZSgyMCwgb3RoZXIpXG4gICAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgICAgIHJldHVybiB0aGlzXG4gICAgfVxuXG4gICAgY2xlYXIoKSB7XG4gICAgICAgIHRyYW5zYWN0aW9uKCgpID0+IHtcbiAgICAgICAgICAgIHVudHJhY2tlZCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBrZXkgb2YgdGhpcy5rZXlzKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kZWxldGUoa2V5KVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pXG4gICAgICAgIH0pXG4gICAgfVxuXG4gICAgcmVwbGFjZSh2YWx1ZXM6IElPYnNlcnZhYmxlTWFwSW5pdGlhbFZhbHVlczxLLCBWPik6IE9ic2VydmFibGVNYXA8SywgVj4ge1xuICAgICAgICAvLyBJbXBsZW1lbnRhdGlvbiByZXF1aXJlbWVudHM6XG4gICAgICAgIC8vIC0gcmVzcGVjdCBvcmRlcmluZyBvZiByZXBsYWNlbWVudCBtYXBcbiAgICAgICAgLy8gLSBhbGxvdyBpbnRlcmNlcHRvcnMgdG8gcnVuIGFuZCBwb3RlbnRpYWxseSBwcmV2ZW50IGluZGl2aWR1YWwgb3BlcmF0aW9uc1xuICAgICAgICAvLyAtIGRvbid0IHJlY3JlYXRlIG9ic2VydmFibGVzIHRoYXQgYWxyZWFkeSBleGlzdCBpbiBvcmlnaW5hbCBtYXAgKHNvIHdlIGRvbid0IGRlc3Ryb3kgZXhpc3Rpbmcgc3Vic2NyaXB0aW9ucylcbiAgICAgICAgLy8gLSBkb24ndCBfa2V5c0F0b20ucmVwb3J0Q2hhbmdlZCBpZiB0aGUga2V5cyBvZiByZXN1bHRpbmcgbWFwIGFyZSBpbmRlbnRpY2FsIChvcmRlciBtYXR0ZXJzISlcbiAgICAgICAgLy8gLSBub3RlIHRoYXQgcmVzdWx0IG1hcCBtYXkgZGlmZmVyIGZyb20gcmVwbGFjZW1lbnQgbWFwIGR1ZSB0byB0aGUgaW50ZXJjZXB0b3JzXG4gICAgICAgIHRyYW5zYWN0aW9uKCgpID0+IHtcbiAgICAgICAgICAgIC8vIENvbnZlcnQgdG8gbWFwIHNvIHdlIGNhbiBkbyBxdWljayBrZXkgbG9va3Vwc1xuICAgICAgICAgICAgY29uc3QgcmVwbGFjZW1lbnRNYXAgPSBjb252ZXJ0VG9NYXAodmFsdWVzKVxuICAgICAgICAgICAgY29uc3Qgb3JkZXJlZERhdGEgPSBuZXcgTWFwKClcbiAgICAgICAgICAgIC8vIFVzZWQgZm9yIG9wdGltaXphdGlvblxuICAgICAgICAgICAgbGV0IGtleXNSZXBvcnRDaGFuZ2VkQ2FsbGVkID0gZmFsc2VcbiAgICAgICAgICAgIC8vIERlbGV0ZSBrZXlzIHRoYXQgZG9uJ3QgZXhpc3QgaW4gcmVwbGFjZW1lbnQgbWFwXG4gICAgICAgICAgICAvLyBpZiB0aGUga2V5IGRlbGV0aW9uIGlzIHByZXZlbnRlZCBieSBpbnRlcmNlcHRvclxuICAgICAgICAgICAgLy8gYWRkIGVudHJ5IGF0IHRoZSBiZWdpbm5pbmcgb2YgdGhlIHJlc3VsdCBtYXBcbiAgICAgICAgICAgIGZvciAoY29uc3Qga2V5IG9mIHRoaXMuZGF0YV8ua2V5cygpKSB7XG4gICAgICAgICAgICAgICAgLy8gQ29uY3VycmVudGx5IGl0ZXJhdGluZy9kZWxldGluZyBrZXlzXG4gICAgICAgICAgICAgICAgLy8gaXRlcmF0b3Igc2hvdWxkIGhhbmRsZSB0aGlzIGNvcnJlY3RseVxuICAgICAgICAgICAgICAgIGlmICghcmVwbGFjZW1lbnRNYXAuaGFzKGtleSkpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZGVsZXRlZCA9IHRoaXMuZGVsZXRlKGtleSlcbiAgICAgICAgICAgICAgICAgICAgLy8gV2FzIHRoZSBrZXkgcmVtb3ZlZD9cbiAgICAgICAgICAgICAgICAgICAgaWYgKGRlbGV0ZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIF9rZXlzQXRvbS5yZXBvcnRDaGFuZ2VkKCkgd2FzIGFscmVhZHkgY2FsbGVkXG4gICAgICAgICAgICAgICAgICAgICAgICBrZXlzUmVwb3J0Q2hhbmdlZENhbGxlZCA9IHRydWVcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIERlbGV0ZSBwcmV2ZW50ZWQgYnkgaW50ZXJjZXB0b3JcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gdGhpcy5kYXRhXy5nZXQoa2V5KVxuICAgICAgICAgICAgICAgICAgICAgICAgb3JkZXJlZERhdGEuc2V0KGtleSwgdmFsdWUpXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBNZXJnZSBlbnRyaWVzXG4gICAgICAgICAgICBmb3IgKGNvbnN0IFtrZXksIHZhbHVlXSBvZiByZXBsYWNlbWVudE1hcC5lbnRyaWVzKCkpIHtcbiAgICAgICAgICAgICAgICAvLyBXZSB3aWxsIHdhbnQgdG8ga25vdyB3aGV0aGVyIGEgbmV3IGtleSBpcyBhZGRlZFxuICAgICAgICAgICAgICAgIGNvbnN0IGtleUV4aXN0ZWQgPSB0aGlzLmRhdGFfLmhhcyhrZXkpXG4gICAgICAgICAgICAgICAgLy8gQWRkIG9yIHVwZGF0ZSB2YWx1ZVxuICAgICAgICAgICAgICAgIHRoaXMuc2V0KGtleSwgdmFsdWUpXG4gICAgICAgICAgICAgICAgLy8gVGhlIGFkZGl0aW9uIGNvdWxkIGhhdmUgYmVlbiBwcmV2ZW50IGJ5IGludGVyY2VwdG9yXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuZGF0YV8uaGFzKGtleSkpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gVGhlIHVwZGF0ZSBjb3VsZCBoYXZlIGJlZW4gcHJldmVudGVkIGJ5IGludGVyY2VwdG9yXG4gICAgICAgICAgICAgICAgICAgIC8vIGFuZCBhbHNvIHdlIHdhbnQgdG8gcHJlc2VydmUgZXhpc3RpbmcgdmFsdWVzXG4gICAgICAgICAgICAgICAgICAgIC8vIHNvIHVzZSB2YWx1ZSBmcm9tIF9kYXRhIG1hcCAoaW5zdGVhZCBvZiByZXBsYWNlbWVudCBtYXApXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gdGhpcy5kYXRhXy5nZXQoa2V5KVxuICAgICAgICAgICAgICAgICAgICBvcmRlcmVkRGF0YS5zZXQoa2V5LCB2YWx1ZSlcbiAgICAgICAgICAgICAgICAgICAgLy8gV2FzIGEgbmV3IGtleSBhZGRlZD9cbiAgICAgICAgICAgICAgICAgICAgaWYgKCFrZXlFeGlzdGVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBfa2V5c0F0b20ucmVwb3J0Q2hhbmdlZCgpIHdhcyBhbHJlYWR5IGNhbGxlZFxuICAgICAgICAgICAgICAgICAgICAgICAga2V5c1JlcG9ydENoYW5nZWRDYWxsZWQgPSB0cnVlXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBDaGVjayBmb3IgcG9zc2libGUga2V5IG9yZGVyIGNoYW5nZVxuICAgICAgICAgICAgaWYgKCFrZXlzUmVwb3J0Q2hhbmdlZENhbGxlZCkge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLmRhdGFfLnNpemUgIT09IG9yZGVyZWREYXRhLnNpemUpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gSWYgc2l6ZSBkaWZmZXJzLCBrZXlzIGFyZSBkZWZpbml0ZWx5IG1vZGlmaWVkXG4gICAgICAgICAgICAgICAgICAgIHRoaXMua2V5c0F0b21fLnJlcG9ydENoYW5nZWQoKVxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGl0ZXIxID0gdGhpcy5kYXRhXy5rZXlzKClcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgaXRlcjIgPSBvcmRlcmVkRGF0YS5rZXlzKClcbiAgICAgICAgICAgICAgICAgICAgbGV0IG5leHQxID0gaXRlcjEubmV4dCgpXG4gICAgICAgICAgICAgICAgICAgIGxldCBuZXh0MiA9IGl0ZXIyLm5leHQoKVxuICAgICAgICAgICAgICAgICAgICB3aGlsZSAoIW5leHQxLmRvbmUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChuZXh0MS52YWx1ZSAhPT0gbmV4dDIudmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmtleXNBdG9tXy5yZXBvcnRDaGFuZ2VkKClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVha1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgbmV4dDEgPSBpdGVyMS5uZXh0KClcbiAgICAgICAgICAgICAgICAgICAgICAgIG5leHQyID0gaXRlcjIubmV4dCgpXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBVc2UgY29ycmVjdGx5IG9yZGVyZWQgbWFwXG4gICAgICAgICAgICB0aGlzLmRhdGFfID0gb3JkZXJlZERhdGFcbiAgICAgICAgfSlcbiAgICAgICAgcmV0dXJuIHRoaXNcbiAgICB9XG5cbiAgICBnZXQgc2l6ZSgpOiBudW1iZXIge1xuICAgICAgICB0aGlzLmtleXNBdG9tXy5yZXBvcnRPYnNlcnZlZCgpXG4gICAgICAgIHJldHVybiB0aGlzLmRhdGFfLnNpemVcbiAgICB9XG5cbiAgICB0b1N0cmluZygpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gXCJbb2JqZWN0IE9ic2VydmFibGVNYXBdXCJcbiAgICB9XG5cbiAgICB0b0pTT04oKTogW0ssIFZdW10ge1xuICAgICAgICByZXR1cm4gQXJyYXkuZnJvbSh0aGlzKVxuICAgIH1cblxuICAgIGdldCBbU3ltYm9sLnRvU3RyaW5nVGFnXSgpIHtcbiAgICAgICAgcmV0dXJuIFwiTWFwXCJcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBPYnNlcnZlcyB0aGlzIG9iamVjdC4gVHJpZ2dlcnMgZm9yIHRoZSBldmVudHMgJ2FkZCcsICd1cGRhdGUnIGFuZCAnZGVsZXRlJy5cbiAgICAgKiBTZWU6IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL09iamVjdC9vYnNlcnZlXG4gICAgICogZm9yIGNhbGxiYWNrIGRldGFpbHNcbiAgICAgKi9cbiAgICBvYnNlcnZlXyhsaXN0ZW5lcjogKGNoYW5nZXM6IElNYXBEaWRDaGFuZ2U8SywgVj4pID0+IHZvaWQsIGZpcmVJbW1lZGlhdGVseT86IGJvb2xlYW4pOiBMYW1iZGEge1xuICAgICAgICBpZiAoX19ERVZfXyAmJiBmaXJlSW1tZWRpYXRlbHkgPT09IHRydWUpIHtcbiAgICAgICAgICAgIGRpZShcImBvYnNlcnZlYCBkb2Vzbid0IHN1cHBvcnQgZmlyZUltbWVkaWF0ZWx5PXRydWUgaW4gY29tYmluYXRpb24gd2l0aCBtYXBzLlwiKVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZWdpc3Rlckxpc3RlbmVyKHRoaXMsIGxpc3RlbmVyKVxuICAgIH1cblxuICAgIGludGVyY2VwdF8oaGFuZGxlcjogSUludGVyY2VwdG9yPElNYXBXaWxsQ2hhbmdlPEssIFY+Pik6IExhbWJkYSB7XG4gICAgICAgIHJldHVybiByZWdpc3RlckludGVyY2VwdG9yKHRoaXMsIGhhbmRsZXIpXG4gICAgfVxufVxuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbmV4cG9ydCB2YXIgaXNPYnNlcnZhYmxlTWFwID0gY3JlYXRlSW5zdGFuY2VvZlByZWRpY2F0ZShcIk9ic2VydmFibGVNYXBcIiwgT2JzZXJ2YWJsZU1hcCkgYXMgKFxuICAgIHRoaW5nOiBhbnlcbikgPT4gdGhpbmcgaXMgT2JzZXJ2YWJsZU1hcDxhbnksIGFueT5cblxuZnVuY3Rpb24gY29udmVydFRvTWFwKGRhdGFTdHJ1Y3R1cmU6IGFueSk6IE1hcDxhbnksIGFueT4ge1xuICAgIGlmIChpc0VTNk1hcChkYXRhU3RydWN0dXJlKSB8fCBpc09ic2VydmFibGVNYXAoZGF0YVN0cnVjdHVyZSkpIHtcbiAgICAgICAgcmV0dXJuIGRhdGFTdHJ1Y3R1cmVcbiAgICB9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkoZGF0YVN0cnVjdHVyZSkpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBNYXAoZGF0YVN0cnVjdHVyZSlcbiAgICB9IGVsc2UgaWYgKGlzUGxhaW5PYmplY3QoZGF0YVN0cnVjdHVyZSkpIHtcbiAgICAgICAgY29uc3QgbWFwID0gbmV3IE1hcCgpXG4gICAgICAgIGZvciAoY29uc3Qga2V5IGluIGRhdGFTdHJ1Y3R1cmUpIHtcbiAgICAgICAgICAgIG1hcC5zZXQoa2V5LCBkYXRhU3RydWN0dXJlW2tleV0pXG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG1hcFxuICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBkaWUoMjEsIGRhdGFTdHJ1Y3R1cmUpXG4gICAgfVxufVxuIiwiaW1wb3J0IHtcbiAgICAkbW9ieCxcbiAgICBjcmVhdGVBdG9tLFxuICAgIGRlZXBFbmhhbmNlcixcbiAgICBnZXROZXh0SWQsXG4gICAgSUVuaGFuY2VyLFxuICAgIGlzU3B5RW5hYmxlZCxcbiAgICBoYXNMaXN0ZW5lcnMsXG4gICAgSUxpc3RlbmFibGUsXG4gICAgcmVnaXN0ZXJMaXN0ZW5lcixcbiAgICBMYW1iZGEsXG4gICAgc3B5UmVwb3J0U3RhcnQsXG4gICAgbm90aWZ5TGlzdGVuZXJzLFxuICAgIHNweVJlcG9ydEVuZCxcbiAgICBjcmVhdGVJbnN0YW5jZW9mUHJlZGljYXRlLFxuICAgIGhhc0ludGVyY2VwdG9ycyxcbiAgICBpbnRlcmNlcHRDaGFuZ2UsXG4gICAgSUludGVyY2VwdGFibGUsXG4gICAgSUludGVyY2VwdG9yLFxuICAgIHJlZ2lzdGVySW50ZXJjZXB0b3IsXG4gICAgY2hlY2tJZlN0YXRlTW9kaWZpY2F0aW9uc0FyZUFsbG93ZWQsXG4gICAgdW50cmFja2VkLFxuICAgIG1ha2VJdGVyYWJsZSxcbiAgICB0cmFuc2FjdGlvbixcbiAgICBpc0VTNlNldCxcbiAgICBJQXRvbSxcbiAgICBERUxFVEUsXG4gICAgQURELFxuICAgIGRpZSxcbiAgICBpc0Z1bmN0aW9uLFxuICAgIGluaXRPYnNlcnZhYmxlXG59IGZyb20gXCIuLi9pbnRlcm5hbFwiXG5cbmNvbnN0IE9ic2VydmFibGVTZXRNYXJrZXIgPSB7fVxuXG5leHBvcnQgdHlwZSBJT2JzZXJ2YWJsZVNldEluaXRpYWxWYWx1ZXM8VD4gPSBTZXQ8VD4gfCByZWFkb25seSBUW11cblxuZXhwb3J0IHR5cGUgSVNldERpZENoYW5nZTxUID0gYW55PiA9XG4gICAgfCB7XG4gICAgICAgICAgb2JqZWN0OiBPYnNlcnZhYmxlU2V0PFQ+XG4gICAgICAgICAgb2JzZXJ2YWJsZUtpbmQ6IFwic2V0XCJcbiAgICAgICAgICBkZWJ1Z09iamVjdE5hbWU6IHN0cmluZ1xuICAgICAgICAgIHR5cGU6IFwiYWRkXCJcbiAgICAgICAgICBuZXdWYWx1ZTogVFxuICAgICAgfVxuICAgIHwge1xuICAgICAgICAgIG9iamVjdDogT2JzZXJ2YWJsZVNldDxUPlxuICAgICAgICAgIG9ic2VydmFibGVLaW5kOiBcInNldFwiXG4gICAgICAgICAgZGVidWdPYmplY3ROYW1lOiBzdHJpbmdcbiAgICAgICAgICB0eXBlOiBcImRlbGV0ZVwiXG4gICAgICAgICAgb2xkVmFsdWU6IFRcbiAgICAgIH1cblxuZXhwb3J0IHR5cGUgSVNldFdpbGxDaGFuZ2U8VCA9IGFueT4gPVxuICAgIHwge1xuICAgICAgICAgIHR5cGU6IFwiZGVsZXRlXCJcbiAgICAgICAgICBvYmplY3Q6IE9ic2VydmFibGVTZXQ8VD5cbiAgICAgICAgICBvbGRWYWx1ZTogVFxuICAgICAgfVxuICAgIHwge1xuICAgICAgICAgIHR5cGU6IFwiYWRkXCJcbiAgICAgICAgICBvYmplY3Q6IE9ic2VydmFibGVTZXQ8VD5cbiAgICAgICAgICBuZXdWYWx1ZTogVFxuICAgICAgfVxuXG5leHBvcnQgY2xhc3MgT2JzZXJ2YWJsZVNldDxUID0gYW55PiBpbXBsZW1lbnRzIFNldDxUPiwgSUludGVyY2VwdGFibGU8SVNldFdpbGxDaGFuZ2U+LCBJTGlzdGVuYWJsZSB7XG4gICAgWyRtb2J4XSA9IE9ic2VydmFibGVTZXRNYXJrZXJcbiAgICBwcml2YXRlIGRhdGFfOiBTZXQ8YW55PiA9IG5ldyBTZXQoKVxuICAgIGF0b21fITogSUF0b21cbiAgICBjaGFuZ2VMaXN0ZW5lcnNfXG4gICAgaW50ZXJjZXB0b3JzX1xuICAgIGRlaGFuY2VyOiBhbnlcbiAgICBlbmhhbmNlcl86IChuZXdWOiBhbnksIG9sZFY6IGFueSB8IHVuZGVmaW5lZCkgPT4gYW55XG5cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgaW5pdGlhbERhdGE/OiBJT2JzZXJ2YWJsZVNldEluaXRpYWxWYWx1ZXM8VD4sXG4gICAgICAgIGVuaGFuY2VyOiBJRW5oYW5jZXI8VD4gPSBkZWVwRW5oYW5jZXIsXG4gICAgICAgIHB1YmxpYyBuYW1lXyA9IF9fREVWX18gPyBcIk9ic2VydmFibGVTZXRAXCIgKyBnZXROZXh0SWQoKSA6IFwiT2JzZXJ2YWJsZVNldFwiXG4gICAgKSB7XG4gICAgICAgIGlmICghaXNGdW5jdGlvbihTZXQpKSB7XG4gICAgICAgICAgICBkaWUoMjIpXG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5lbmhhbmNlcl8gPSAobmV3Viwgb2xkVikgPT4gZW5oYW5jZXIobmV3Viwgb2xkViwgbmFtZV8pXG4gICAgICAgIGluaXRPYnNlcnZhYmxlKCgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuYXRvbV8gPSBjcmVhdGVBdG9tKHRoaXMubmFtZV8pXG4gICAgICAgICAgICBpZiAoaW5pdGlhbERhdGEpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnJlcGxhY2UoaW5pdGlhbERhdGEpXG4gICAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgfVxuXG4gICAgcHJpdmF0ZSBkZWhhbmNlVmFsdWVfPFggZXh0ZW5kcyBUIHwgdW5kZWZpbmVkPih2YWx1ZTogWCk6IFgge1xuICAgICAgICBpZiAodGhpcy5kZWhhbmNlciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5kZWhhbmNlcih2YWx1ZSlcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdmFsdWVcbiAgICB9XG5cbiAgICBjbGVhcigpIHtcbiAgICAgICAgdHJhbnNhY3Rpb24oKCkgPT4ge1xuICAgICAgICAgICAgdW50cmFja2VkKCgpID0+IHtcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IHZhbHVlIG9mIHRoaXMuZGF0YV8udmFsdWVzKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kZWxldGUodmFsdWUpXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSlcbiAgICAgICAgfSlcbiAgICB9XG5cbiAgICBmb3JFYWNoKGNhbGxiYWNrRm46ICh2YWx1ZTogVCwgdmFsdWUyOiBULCBzZXQ6IFNldDxUPikgPT4gdm9pZCwgdGhpc0FyZz86IGFueSkge1xuICAgICAgICBmb3IgKGNvbnN0IHZhbHVlIG9mIHRoaXMpIHtcbiAgICAgICAgICAgIGNhbGxiYWNrRm4uY2FsbCh0aGlzQXJnLCB2YWx1ZSwgdmFsdWUsIHRoaXMpXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBnZXQgc2l6ZSgpIHtcbiAgICAgICAgdGhpcy5hdG9tXy5yZXBvcnRPYnNlcnZlZCgpXG4gICAgICAgIHJldHVybiB0aGlzLmRhdGFfLnNpemVcbiAgICB9XG5cbiAgICBhZGQodmFsdWU6IFQpIHtcbiAgICAgICAgY2hlY2tJZlN0YXRlTW9kaWZpY2F0aW9uc0FyZUFsbG93ZWQodGhpcy5hdG9tXylcbiAgICAgICAgaWYgKGhhc0ludGVyY2VwdG9ycyh0aGlzKSkge1xuICAgICAgICAgICAgY29uc3QgY2hhbmdlID0gaW50ZXJjZXB0Q2hhbmdlPElTZXRXaWxsQ2hhbmdlPFQ+Pih0aGlzLCB7XG4gICAgICAgICAgICAgICAgdHlwZTogQURELFxuICAgICAgICAgICAgICAgIG9iamVjdDogdGhpcyxcbiAgICAgICAgICAgICAgICBuZXdWYWx1ZTogdmFsdWVcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICBpZiAoIWNoYW5nZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBpZGVhbGx5LCB2YWx1ZSA9IGNoYW5nZS52YWx1ZSB3b3VsZCBiZSBkb25lIGhlcmUsIHNvIHRoYXQgdmFsdWVzIGNhbiBiZVxuICAgICAgICAgICAgLy8gY2hhbmdlZCBieSBpbnRlcmNlcHRvci4gU2FtZSBhcHBsaWVzIGZvciBvdGhlciBTZXQgYW5kIE1hcCBhcGkncy5cbiAgICAgICAgfVxuICAgICAgICBpZiAoIXRoaXMuaGFzKHZhbHVlKSkge1xuICAgICAgICAgICAgdHJhbnNhY3Rpb24oKCkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuZGF0YV8uYWRkKHRoaXMuZW5oYW5jZXJfKHZhbHVlLCB1bmRlZmluZWQpKVxuICAgICAgICAgICAgICAgIHRoaXMuYXRvbV8ucmVwb3J0Q2hhbmdlZCgpXG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgY29uc3Qgbm90aWZ5U3B5ID0gX19ERVZfXyAmJiBpc1NweUVuYWJsZWQoKVxuICAgICAgICAgICAgY29uc3Qgbm90aWZ5ID0gaGFzTGlzdGVuZXJzKHRoaXMpXG4gICAgICAgICAgICBjb25zdCBjaGFuZ2UgPVxuICAgICAgICAgICAgICAgIG5vdGlmeSB8fCBub3RpZnlTcHlcbiAgICAgICAgICAgICAgICAgICAgPyA8SVNldERpZENoYW5nZTxUPj57XG4gICAgICAgICAgICAgICAgICAgICAgICAgIG9ic2VydmFibGVLaW5kOiBcInNldFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBkZWJ1Z09iamVjdE5hbWU6IHRoaXMubmFtZV8sXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IEFERCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgb2JqZWN0OiB0aGlzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdWYWx1ZTogdmFsdWVcbiAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIDogbnVsbFxuICAgICAgICAgICAgaWYgKG5vdGlmeVNweSAmJiBfX0RFVl9fKSB7XG4gICAgICAgICAgICAgICAgc3B5UmVwb3J0U3RhcnQoY2hhbmdlISlcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChub3RpZnkpIHtcbiAgICAgICAgICAgICAgICBub3RpZnlMaXN0ZW5lcnModGhpcywgY2hhbmdlKVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG5vdGlmeVNweSAmJiBfX0RFVl9fKSB7XG4gICAgICAgICAgICAgICAgc3B5UmVwb3J0RW5kKClcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzXG4gICAgfVxuXG4gICAgZGVsZXRlKHZhbHVlOiBUKSB7XG4gICAgICAgIGlmIChoYXNJbnRlcmNlcHRvcnModGhpcykpIHtcbiAgICAgICAgICAgIGNvbnN0IGNoYW5nZSA9IGludGVyY2VwdENoYW5nZTxJU2V0V2lsbENoYW5nZTxUPj4odGhpcywge1xuICAgICAgICAgICAgICAgIHR5cGU6IERFTEVURSxcbiAgICAgICAgICAgICAgICBvYmplY3Q6IHRoaXMsXG4gICAgICAgICAgICAgICAgb2xkVmFsdWU6IHZhbHVlXG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgaWYgKCFjaGFuZ2UpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5oYXModmFsdWUpKSB7XG4gICAgICAgICAgICBjb25zdCBub3RpZnlTcHkgPSBfX0RFVl9fICYmIGlzU3B5RW5hYmxlZCgpXG4gICAgICAgICAgICBjb25zdCBub3RpZnkgPSBoYXNMaXN0ZW5lcnModGhpcylcbiAgICAgICAgICAgIGNvbnN0IGNoYW5nZSA9XG4gICAgICAgICAgICAgICAgbm90aWZ5IHx8IG5vdGlmeVNweVxuICAgICAgICAgICAgICAgICAgICA/IDxJU2V0RGlkQ2hhbmdlPFQ+PntcbiAgICAgICAgICAgICAgICAgICAgICAgICAgb2JzZXJ2YWJsZUtpbmQ6IFwic2V0XCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGRlYnVnT2JqZWN0TmFtZTogdGhpcy5uYW1lXyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogREVMRVRFLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBvYmplY3Q6IHRoaXMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIG9sZFZhbHVlOiB2YWx1ZVxuICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgOiBudWxsXG5cbiAgICAgICAgICAgIGlmIChub3RpZnlTcHkgJiYgX19ERVZfXykge1xuICAgICAgICAgICAgICAgIHNweVJlcG9ydFN0YXJ0KGNoYW5nZSEpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0cmFuc2FjdGlvbigoKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5hdG9tXy5yZXBvcnRDaGFuZ2VkKClcbiAgICAgICAgICAgICAgICB0aGlzLmRhdGFfLmRlbGV0ZSh2YWx1ZSlcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICBpZiAobm90aWZ5KSB7XG4gICAgICAgICAgICAgICAgbm90aWZ5TGlzdGVuZXJzKHRoaXMsIGNoYW5nZSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChub3RpZnlTcHkgJiYgX19ERVZfXykge1xuICAgICAgICAgICAgICAgIHNweVJlcG9ydEVuZCgpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZVxuICAgIH1cblxuICAgIGhhcyh2YWx1ZTogVCkge1xuICAgICAgICB0aGlzLmF0b21fLnJlcG9ydE9ic2VydmVkKClcbiAgICAgICAgcmV0dXJuIHRoaXMuZGF0YV8uaGFzKHRoaXMuZGVoYW5jZVZhbHVlXyh2YWx1ZSkpXG4gICAgfVxuXG4gICAgZW50cmllcygpIHtcbiAgICAgICAgbGV0IG5leHRJbmRleCA9IDBcbiAgICAgICAgY29uc3Qga2V5cyA9IEFycmF5LmZyb20odGhpcy5rZXlzKCkpXG4gICAgICAgIGNvbnN0IHZhbHVlcyA9IEFycmF5LmZyb20odGhpcy52YWx1ZXMoKSlcbiAgICAgICAgcmV0dXJuIG1ha2VJdGVyYWJsZTxbVCwgVF0+KHtcbiAgICAgICAgICAgIG5leHQoKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgaW5kZXggPSBuZXh0SW5kZXhcbiAgICAgICAgICAgICAgICBuZXh0SW5kZXggKz0gMVxuICAgICAgICAgICAgICAgIHJldHVybiBpbmRleCA8IHZhbHVlcy5sZW5ndGhcbiAgICAgICAgICAgICAgICAgICAgPyB7IHZhbHVlOiBba2V5c1tpbmRleF0sIHZhbHVlc1tpbmRleF1dLCBkb25lOiBmYWxzZSB9XG4gICAgICAgICAgICAgICAgICAgIDogeyBkb25lOiB0cnVlIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBhcyBhbnkpXG4gICAgfVxuXG4gICAga2V5cygpOiBJdGVyYWJsZUl0ZXJhdG9yPFQ+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMudmFsdWVzKClcbiAgICB9XG5cbiAgICB2YWx1ZXMoKTogSXRlcmFibGVJdGVyYXRvcjxUPiB7XG4gICAgICAgIHRoaXMuYXRvbV8ucmVwb3J0T2JzZXJ2ZWQoKVxuICAgICAgICBjb25zdCBzZWxmID0gdGhpc1xuICAgICAgICBsZXQgbmV4dEluZGV4ID0gMFxuICAgICAgICBjb25zdCBvYnNlcnZhYmxlVmFsdWVzID0gQXJyYXkuZnJvbSh0aGlzLmRhdGFfLnZhbHVlcygpKVxuICAgICAgICByZXR1cm4gbWFrZUl0ZXJhYmxlPFQ+KHtcbiAgICAgICAgICAgIG5leHQoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5leHRJbmRleCA8IG9ic2VydmFibGVWYWx1ZXMubGVuZ3RoXG4gICAgICAgICAgICAgICAgICAgID8geyB2YWx1ZTogc2VsZi5kZWhhbmNlVmFsdWVfKG9ic2VydmFibGVWYWx1ZXNbbmV4dEluZGV4KytdKSwgZG9uZTogZmFsc2UgfVxuICAgICAgICAgICAgICAgICAgICA6IHsgZG9uZTogdHJ1ZSB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gYXMgYW55KVxuICAgIH1cblxuICAgIHJlcGxhY2Uob3RoZXI6IE9ic2VydmFibGVTZXQ8VD4gfCBJT2JzZXJ2YWJsZVNldEluaXRpYWxWYWx1ZXM8VD4pOiBPYnNlcnZhYmxlU2V0PFQ+IHtcbiAgICAgICAgaWYgKGlzT2JzZXJ2YWJsZVNldChvdGhlcikpIHtcbiAgICAgICAgICAgIG90aGVyID0gbmV3IFNldChvdGhlcilcbiAgICAgICAgfVxuXG4gICAgICAgIHRyYW5zYWN0aW9uKCgpID0+IHtcbiAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KG90aGVyKSkge1xuICAgICAgICAgICAgICAgIHRoaXMuY2xlYXIoKVxuICAgICAgICAgICAgICAgIG90aGVyLmZvckVhY2godmFsdWUgPT4gdGhpcy5hZGQodmFsdWUpKVxuICAgICAgICAgICAgfSBlbHNlIGlmIChpc0VTNlNldChvdGhlcikpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmNsZWFyKClcbiAgICAgICAgICAgICAgICBvdGhlci5mb3JFYWNoKHZhbHVlID0+IHRoaXMuYWRkKHZhbHVlKSlcbiAgICAgICAgICAgIH0gZWxzZSBpZiAob3RoZXIgIT09IG51bGwgJiYgb3RoZXIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIGRpZShcIkNhbm5vdCBpbml0aWFsaXplIHNldCBmcm9tIFwiICsgb3RoZXIpXG4gICAgICAgICAgICB9XG4gICAgICAgIH0pXG5cbiAgICAgICAgcmV0dXJuIHRoaXNcbiAgICB9XG4gICAgb2JzZXJ2ZV8obGlzdGVuZXI6IChjaGFuZ2VzOiBJU2V0RGlkQ2hhbmdlPFQ+KSA9PiB2b2lkLCBmaXJlSW1tZWRpYXRlbHk/OiBib29sZWFuKTogTGFtYmRhIHtcbiAgICAgICAgLy8gLi4uICdmaXJlSW1tZWRpYXRlbHknIGNvdWxkIGFsc28gYmUgdHJ1ZT9cbiAgICAgICAgaWYgKF9fREVWX18gJiYgZmlyZUltbWVkaWF0ZWx5ID09PSB0cnVlKSB7XG4gICAgICAgICAgICBkaWUoXCJgb2JzZXJ2ZWAgZG9lc24ndCBzdXBwb3J0IGZpcmVJbW1lZGlhdGVseT10cnVlIGluIGNvbWJpbmF0aW9uIHdpdGggc2V0cy5cIilcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVnaXN0ZXJMaXN0ZW5lcih0aGlzLCBsaXN0ZW5lcilcbiAgICB9XG5cbiAgICBpbnRlcmNlcHRfKGhhbmRsZXI6IElJbnRlcmNlcHRvcjxJU2V0V2lsbENoYW5nZTxUPj4pOiBMYW1iZGEge1xuICAgICAgICByZXR1cm4gcmVnaXN0ZXJJbnRlcmNlcHRvcih0aGlzLCBoYW5kbGVyKVxuICAgIH1cblxuICAgIHRvSlNPTigpOiBUW10ge1xuICAgICAgICByZXR1cm4gQXJyYXkuZnJvbSh0aGlzKVxuICAgIH1cblxuICAgIHRvU3RyaW5nKCk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiBcIltvYmplY3QgT2JzZXJ2YWJsZVNldF1cIlxuICAgIH1cblxuICAgIFtTeW1ib2wuaXRlcmF0b3JdKCkge1xuICAgICAgICByZXR1cm4gdGhpcy52YWx1ZXMoKVxuICAgIH1cblxuICAgIGdldCBbU3ltYm9sLnRvU3RyaW5nVGFnXSgpIHtcbiAgICAgICAgcmV0dXJuIFwiU2V0XCJcbiAgICB9XG59XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuZXhwb3J0IHZhciBpc09ic2VydmFibGVTZXQgPSBjcmVhdGVJbnN0YW5jZW9mUHJlZGljYXRlKFwiT2JzZXJ2YWJsZVNldFwiLCBPYnNlcnZhYmxlU2V0KSBhcyAoXG4gICAgdGhpbmc6IGFueVxuKSA9PiB0aGluZyBpcyBPYnNlcnZhYmxlU2V0PGFueT5cbiIsImltcG9ydCB7XG4gICAgQ3JlYXRlT2JzZXJ2YWJsZU9wdGlvbnMsXG4gICAgZ2V0QW5ub3RhdGlvbkZyb21PcHRpb25zLFxuICAgIHByb3BhZ2F0ZUNoYW5nZWQsXG4gICAgaXNBbm5vdGF0aW9uLFxuICAgICRtb2J4LFxuICAgIEF0b20sXG4gICAgQW5ub3RhdGlvbixcbiAgICBDb21wdXRlZFZhbHVlLFxuICAgIElBdG9tLFxuICAgIElDb21wdXRlZFZhbHVlT3B0aW9ucyxcbiAgICBJRW5oYW5jZXIsXG4gICAgSUludGVyY2VwdGFibGUsXG4gICAgSUxpc3RlbmFibGUsXG4gICAgTGFtYmRhLFxuICAgIE9ic2VydmFibGVWYWx1ZSxcbiAgICBhZGRIaWRkZW5Qcm9wLFxuICAgIGNyZWF0ZUluc3RhbmNlb2ZQcmVkaWNhdGUsXG4gICAgZW5kQmF0Y2gsXG4gICAgZ2V0TmV4dElkLFxuICAgIGhhc0ludGVyY2VwdG9ycyxcbiAgICBoYXNMaXN0ZW5lcnMsXG4gICAgaW50ZXJjZXB0Q2hhbmdlLFxuICAgIGlzT2JqZWN0LFxuICAgIGlzUGxhaW5PYmplY3QsXG4gICAgaXNTcHlFbmFibGVkLFxuICAgIG5vdGlmeUxpc3RlbmVycyxcbiAgICByZWZlcmVuY2VFbmhhbmNlcixcbiAgICByZWdpc3RlckludGVyY2VwdG9yLFxuICAgIHJlZ2lzdGVyTGlzdGVuZXIsXG4gICAgc3B5UmVwb3J0RW5kLFxuICAgIHNweVJlcG9ydFN0YXJ0LFxuICAgIHN0YXJ0QmF0Y2gsXG4gICAgc3RyaW5naWZ5S2V5LFxuICAgIGdsb2JhbFN0YXRlLFxuICAgIEFERCxcbiAgICBVUERBVEUsXG4gICAgZGllLFxuICAgIGhhc1Byb3AsXG4gICAgZ2V0RGVzY3JpcHRvcixcbiAgICBzdG9yZWRBbm5vdGF0aW9uc1N5bWJvbCxcbiAgICBvd25LZXlzLFxuICAgIGlzT3ZlcnJpZGUsXG4gICAgZGVmaW5lUHJvcGVydHksXG4gICAgYXV0b0Fubm90YXRpb24sXG4gICAgZ2V0QWRtaW5pc3RyYXRpb24sXG4gICAgZ2V0RGVidWdOYW1lLFxuICAgIG9iamVjdFByb3RvdHlwZSxcbiAgICBNYWtlUmVzdWx0LFxuICAgIGNoZWNrSWZTdGF0ZU1vZGlmaWNhdGlvbnNBcmVBbGxvd2VkXG59IGZyb20gXCIuLi9pbnRlcm5hbFwiXG5cbmNvbnN0IGRlc2NyaXB0b3JDYWNoZSA9IE9iamVjdC5jcmVhdGUobnVsbClcblxuZXhwb3J0IHR5cGUgSU9iamVjdERpZENoYW5nZTxUID0gYW55PiA9IHtcbiAgICBvYnNlcnZhYmxlS2luZDogXCJvYmplY3RcIlxuICAgIG5hbWU6IFByb3BlcnR5S2V5XG4gICAgb2JqZWN0OiBUXG4gICAgZGVidWdPYmplY3ROYW1lOiBzdHJpbmdcbn0gJiAoXG4gICAgfCB7XG4gICAgICAgICAgdHlwZTogXCJhZGRcIlxuICAgICAgICAgIG5ld1ZhbHVlOiBhbnlcbiAgICAgIH1cbiAgICB8IHtcbiAgICAgICAgICB0eXBlOiBcInVwZGF0ZVwiXG4gICAgICAgICAgb2xkVmFsdWU6IGFueVxuICAgICAgICAgIG5ld1ZhbHVlOiBhbnlcbiAgICAgIH1cbiAgICB8IHtcbiAgICAgICAgICB0eXBlOiBcInJlbW92ZVwiXG4gICAgICAgICAgb2xkVmFsdWU6IGFueVxuICAgICAgfVxuKVxuXG5leHBvcnQgdHlwZSBJT2JqZWN0V2lsbENoYW5nZTxUID0gYW55PiA9XG4gICAgfCB7XG4gICAgICAgICAgb2JqZWN0OiBUXG4gICAgICAgICAgdHlwZTogXCJ1cGRhdGVcIiB8IFwiYWRkXCJcbiAgICAgICAgICBuYW1lOiBQcm9wZXJ0eUtleVxuICAgICAgICAgIG5ld1ZhbHVlOiBhbnlcbiAgICAgIH1cbiAgICB8IHtcbiAgICAgICAgICBvYmplY3Q6IFRcbiAgICAgICAgICB0eXBlOiBcInJlbW92ZVwiXG4gICAgICAgICAgbmFtZTogUHJvcGVydHlLZXlcbiAgICAgIH1cblxuY29uc3QgUkVNT1ZFID0gXCJyZW1vdmVcIlxuXG5leHBvcnQgY2xhc3MgT2JzZXJ2YWJsZU9iamVjdEFkbWluaXN0cmF0aW9uXG4gICAgaW1wbGVtZW50cyBJSW50ZXJjZXB0YWJsZTxJT2JqZWN0V2lsbENoYW5nZT4sIElMaXN0ZW5hYmxlXG57XG4gICAga2V5c0F0b21fOiBJQXRvbVxuICAgIGNoYW5nZUxpc3RlbmVyc19cbiAgICBpbnRlcmNlcHRvcnNfXG4gICAgcHJveHlfOiBhbnlcbiAgICBpc1BsYWluT2JqZWN0XzogYm9vbGVhblxuICAgIGFwcGxpZWRBbm5vdGF0aW9uc18/OiBvYmplY3RcbiAgICBwcml2YXRlIHBlbmRpbmdLZXlzXzogdW5kZWZpbmVkIHwgTWFwPFByb3BlcnR5S2V5LCBPYnNlcnZhYmxlVmFsdWU8Ym9vbGVhbj4+XG5cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgcHVibGljIHRhcmdldF86IGFueSxcbiAgICAgICAgcHVibGljIHZhbHVlc18gPSBuZXcgTWFwPFByb3BlcnR5S2V5LCBPYnNlcnZhYmxlVmFsdWU8YW55PiB8IENvbXB1dGVkVmFsdWU8YW55Pj4oKSxcbiAgICAgICAgcHVibGljIG5hbWVfOiBzdHJpbmcsXG4gICAgICAgIC8vIFVzZWQgYW55dGltZSBhbm5vdGF0aW9uIGlzIG5vdCBleHBsaWNpdGVseSBwcm92aWRlZFxuICAgICAgICBwdWJsaWMgZGVmYXVsdEFubm90YXRpb25fOiBBbm5vdGF0aW9uID0gYXV0b0Fubm90YXRpb25cbiAgICApIHtcbiAgICAgICAgdGhpcy5rZXlzQXRvbV8gPSBuZXcgQXRvbShfX0RFVl9fID8gYCR7dGhpcy5uYW1lX30ua2V5c2AgOiBcIk9ic2VydmFibGVPYmplY3Qua2V5c1wiKVxuICAgICAgICAvLyBPcHRpbWl6YXRpb246IHdlIHVzZSB0aGlzIGZyZXF1ZW50bHlcbiAgICAgICAgdGhpcy5pc1BsYWluT2JqZWN0XyA9IGlzUGxhaW5PYmplY3QodGhpcy50YXJnZXRfKVxuICAgICAgICBpZiAoX19ERVZfXyAmJiAhaXNBbm5vdGF0aW9uKHRoaXMuZGVmYXVsdEFubm90YXRpb25fKSkge1xuICAgICAgICAgICAgZGllKGBkZWZhdWx0QW5ub3RhdGlvbiBtdXN0IGJlIHZhbGlkIGFubm90YXRpb25gKVxuICAgICAgICB9XG4gICAgICAgIGlmIChfX0RFVl9fKSB7XG4gICAgICAgICAgICAvLyBQcmVwYXJlIHN0cnVjdHVyZSBmb3IgdHJhY2tpbmcgd2hpY2ggZmllbGRzIHdlcmUgYWxyZWFkeSBhbm5vdGF0ZWRcbiAgICAgICAgICAgIHRoaXMuYXBwbGllZEFubm90YXRpb25zXyA9IHt9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBnZXRPYnNlcnZhYmxlUHJvcFZhbHVlXyhrZXk6IFByb3BlcnR5S2V5KTogYW55IHtcbiAgICAgICAgcmV0dXJuIHRoaXMudmFsdWVzXy5nZXQoa2V5KSEuZ2V0KClcbiAgICB9XG5cbiAgICBzZXRPYnNlcnZhYmxlUHJvcFZhbHVlXyhrZXk6IFByb3BlcnR5S2V5LCBuZXdWYWx1ZSk6IGJvb2xlYW4gfCBudWxsIHtcbiAgICAgICAgY29uc3Qgb2JzZXJ2YWJsZSA9IHRoaXMudmFsdWVzXy5nZXQoa2V5KVxuICAgICAgICBpZiAob2JzZXJ2YWJsZSBpbnN0YW5jZW9mIENvbXB1dGVkVmFsdWUpIHtcbiAgICAgICAgICAgIG9ic2VydmFibGUuc2V0KG5ld1ZhbHVlKVxuICAgICAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGludGVyY2VwdFxuICAgICAgICBpZiAoaGFzSW50ZXJjZXB0b3JzKHRoaXMpKSB7XG4gICAgICAgICAgICBjb25zdCBjaGFuZ2UgPSBpbnRlcmNlcHRDaGFuZ2U8SU9iamVjdFdpbGxDaGFuZ2U+KHRoaXMsIHtcbiAgICAgICAgICAgICAgICB0eXBlOiBVUERBVEUsXG4gICAgICAgICAgICAgICAgb2JqZWN0OiB0aGlzLnByb3h5XyB8fCB0aGlzLnRhcmdldF8sXG4gICAgICAgICAgICAgICAgbmFtZToga2V5LFxuICAgICAgICAgICAgICAgIG5ld1ZhbHVlXG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgaWYgKCFjaGFuZ2UpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbFxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbmV3VmFsdWUgPSAoY2hhbmdlIGFzIGFueSkubmV3VmFsdWVcbiAgICAgICAgfVxuICAgICAgICBuZXdWYWx1ZSA9IChvYnNlcnZhYmxlIGFzIGFueSkucHJlcGFyZU5ld1ZhbHVlXyhuZXdWYWx1ZSlcblxuICAgICAgICAvLyBub3RpZnkgc3B5ICYgb2JzZXJ2ZXJzXG4gICAgICAgIGlmIChuZXdWYWx1ZSAhPT0gZ2xvYmFsU3RhdGUuVU5DSEFOR0VEKSB7XG4gICAgICAgICAgICBjb25zdCBub3RpZnkgPSBoYXNMaXN0ZW5lcnModGhpcylcbiAgICAgICAgICAgIGNvbnN0IG5vdGlmeVNweSA9IF9fREVWX18gJiYgaXNTcHlFbmFibGVkKClcbiAgICAgICAgICAgIGNvbnN0IGNoYW5nZTogSU9iamVjdERpZENoYW5nZSB8IG51bGwgPVxuICAgICAgICAgICAgICAgIG5vdGlmeSB8fCBub3RpZnlTcHlcbiAgICAgICAgICAgICAgICAgICAgPyB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IFVQREFURSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgb2JzZXJ2YWJsZUtpbmQ6IFwib2JqZWN0XCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGRlYnVnT2JqZWN0TmFtZTogdGhpcy5uYW1lXyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgb2JqZWN0OiB0aGlzLnByb3h5XyB8fCB0aGlzLnRhcmdldF8sXG4gICAgICAgICAgICAgICAgICAgICAgICAgIG9sZFZhbHVlOiAob2JzZXJ2YWJsZSBhcyBhbnkpLnZhbHVlXyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZToga2V5LFxuICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdWYWx1ZVxuICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgOiBudWxsXG5cbiAgICAgICAgICAgIGlmIChfX0RFVl9fICYmIG5vdGlmeVNweSkge1xuICAgICAgICAgICAgICAgIHNweVJlcG9ydFN0YXJ0KGNoYW5nZSEpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICA7KG9ic2VydmFibGUgYXMgT2JzZXJ2YWJsZVZhbHVlPGFueT4pLnNldE5ld1ZhbHVlXyhuZXdWYWx1ZSlcbiAgICAgICAgICAgIGlmIChub3RpZnkpIHtcbiAgICAgICAgICAgICAgICBub3RpZnlMaXN0ZW5lcnModGhpcywgY2hhbmdlKVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKF9fREVWX18gJiYgbm90aWZ5U3B5KSB7XG4gICAgICAgICAgICAgICAgc3B5UmVwb3J0RW5kKClcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZVxuICAgIH1cblxuICAgIGdldF8oa2V5OiBQcm9wZXJ0eUtleSk6IGFueSB7XG4gICAgICAgIGlmIChnbG9iYWxTdGF0ZS50cmFja2luZ0Rlcml2YXRpb24gJiYgIWhhc1Byb3AodGhpcy50YXJnZXRfLCBrZXkpKSB7XG4gICAgICAgICAgICAvLyBLZXkgZG9lc24ndCBleGlzdCB5ZXQsIHN1YnNjcmliZSBmb3IgaXQgaW4gY2FzZSBpdCdzIGFkZGVkIGxhdGVyXG4gICAgICAgICAgICB0aGlzLmhhc18oa2V5KVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLnRhcmdldF9ba2V5XVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7UHJvcGVydHlLZXl9IGtleVxuICAgICAqIEBwYXJhbSB7YW55fSB2YWx1ZVxuICAgICAqIEBwYXJhbSB7QW5ub3RhdGlvbnxib29sZWFufSBhbm5vdGF0aW9uIHRydWUgLSB1c2UgZGVmYXVsdCBhbm5vdGF0aW9uLCBmYWxzZSAtIGNvcHkgYXMgaXNcbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IHByb3h5VHJhcCB3aGV0aGVyIGl0J3MgY2FsbGVkIGZyb20gcHJveHkgdHJhcFxuICAgICAqIEByZXR1cm5zIHtib29sZWFufG51bGx9IHRydWUgb24gc3VjY2VzcywgZmFsc2Ugb24gZmFpbHVyZSAocHJveHlUcmFwICsgbm9uLWNvbmZpZ3VyYWJsZSksIG51bGwgd2hlbiBjYW5jZWxsZWQgYnkgaW50ZXJjZXB0b3JcbiAgICAgKi9cbiAgICBzZXRfKGtleTogUHJvcGVydHlLZXksIHZhbHVlOiBhbnksIHByb3h5VHJhcDogYm9vbGVhbiA9IGZhbHNlKTogYm9vbGVhbiB8IG51bGwge1xuICAgICAgICAvLyBEb24ndCB1c2UgLmhhcyhrZXkpIC0gd2UgY2FyZSBhYm91dCBvd25cbiAgICAgICAgaWYgKGhhc1Byb3AodGhpcy50YXJnZXRfLCBrZXkpKSB7XG4gICAgICAgICAgICAvLyBFeGlzdGluZyBwcm9wXG4gICAgICAgICAgICBpZiAodGhpcy52YWx1ZXNfLmhhcyhrZXkpKSB7XG4gICAgICAgICAgICAgICAgLy8gT2JzZXJ2YWJsZSAoY2FuIGJlIGludGVyY2VwdGVkKVxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnNldE9ic2VydmFibGVQcm9wVmFsdWVfKGtleSwgdmFsdWUpXG4gICAgICAgICAgICB9IGVsc2UgaWYgKHByb3h5VHJhcCkge1xuICAgICAgICAgICAgICAgIC8vIE5vbi1vYnNlcnZhYmxlIC0gcHJveHlcbiAgICAgICAgICAgICAgICByZXR1cm4gUmVmbGVjdC5zZXQodGhpcy50YXJnZXRfLCBrZXksIHZhbHVlKVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBOb24tb2JzZXJ2YWJsZVxuICAgICAgICAgICAgICAgIHRoaXMudGFyZ2V0X1trZXldID0gdmFsdWVcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZVxuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gTmV3IHByb3BcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmV4dGVuZF8oXG4gICAgICAgICAgICAgICAga2V5LFxuICAgICAgICAgICAgICAgIHsgdmFsdWUsIGVudW1lcmFibGU6IHRydWUsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSxcbiAgICAgICAgICAgICAgICB0aGlzLmRlZmF1bHRBbm5vdGF0aW9uXyxcbiAgICAgICAgICAgICAgICBwcm94eVRyYXBcbiAgICAgICAgICAgIClcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIFRyYXAgZm9yIFwiaW5cIlxuICAgIGhhc18oa2V5OiBQcm9wZXJ0eUtleSk6IGJvb2xlYW4ge1xuICAgICAgICBpZiAoIWdsb2JhbFN0YXRlLnRyYWNraW5nRGVyaXZhdGlvbikge1xuICAgICAgICAgICAgLy8gU2tpcCBrZXkgc3Vic2NyaXB0aW9uIG91dHNpZGUgZGVyaXZhdGlvblxuICAgICAgICAgICAgcmV0dXJuIGtleSBpbiB0aGlzLnRhcmdldF9cbiAgICAgICAgfVxuICAgICAgICB0aGlzLnBlbmRpbmdLZXlzXyB8fD0gbmV3IE1hcCgpXG4gICAgICAgIGxldCBlbnRyeSA9IHRoaXMucGVuZGluZ0tleXNfLmdldChrZXkpXG4gICAgICAgIGlmICghZW50cnkpIHtcbiAgICAgICAgICAgIGVudHJ5ID0gbmV3IE9ic2VydmFibGVWYWx1ZShcbiAgICAgICAgICAgICAgICBrZXkgaW4gdGhpcy50YXJnZXRfLFxuICAgICAgICAgICAgICAgIHJlZmVyZW5jZUVuaGFuY2VyLFxuICAgICAgICAgICAgICAgIF9fREVWX18gPyBgJHt0aGlzLm5hbWVffS4ke3N0cmluZ2lmeUtleShrZXkpfT9gIDogXCJPYnNlcnZhYmxlT2JqZWN0LmtleT9cIixcbiAgICAgICAgICAgICAgICBmYWxzZVxuICAgICAgICAgICAgKVxuICAgICAgICAgICAgdGhpcy5wZW5kaW5nS2V5c18uc2V0KGtleSwgZW50cnkpXG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGVudHJ5LmdldCgpXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtQcm9wZXJ0eUtleX0ga2V5XG4gICAgICogQHBhcmFtIHtBbm5vdGF0aW9ufGJvb2xlYW59IGFubm90YXRpb24gdHJ1ZSAtIHVzZSBkZWZhdWx0IGFubm90YXRpb24sIGZhbHNlIC0gaWdub3JlIHByb3BcbiAgICAgKi9cbiAgICBtYWtlXyhrZXk6IFByb3BlcnR5S2V5LCBhbm5vdGF0aW9uOiBBbm5vdGF0aW9uIHwgYm9vbGVhbik6IHZvaWQge1xuICAgICAgICBpZiAoYW5ub3RhdGlvbiA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgYW5ub3RhdGlvbiA9IHRoaXMuZGVmYXVsdEFubm90YXRpb25fXG4gICAgICAgIH1cbiAgICAgICAgaWYgKGFubm90YXRpb24gPT09IGZhbHNlKSB7XG4gICAgICAgICAgICByZXR1cm5cbiAgICAgICAgfVxuICAgICAgICBhc3NlcnRBbm5vdGFibGUodGhpcywgYW5ub3RhdGlvbiwga2V5KVxuICAgICAgICBpZiAoIShrZXkgaW4gdGhpcy50YXJnZXRfKSkge1xuICAgICAgICAgICAgLy8gVGhyb3cgb24gbWlzc2luZyBrZXksIGV4Y2VwdCBmb3IgZGVjb3JhdG9yczpcbiAgICAgICAgICAgIC8vIERlY29yYXRvciBhbm5vdGF0aW9ucyBhcmUgY29sbGVjdGVkIGZyb20gd2hvbGUgcHJvdG90eXBlIGNoYWluLlxuICAgICAgICAgICAgLy8gV2hlbiBjYWxsZWQgZnJvbSBzdXBlcigpIHNvbWUgcHJvcHMgbWF5IG5vdCBleGlzdCB5ZXQuXG4gICAgICAgICAgICAvLyBIb3dldmVyIHdlIGRvbid0IGhhdmUgdG8gd29ycnkgYWJvdXQgbWlzc2luZyBwcm9wLFxuICAgICAgICAgICAgLy8gYmVjYXVzZSB0aGUgZGVjb3JhdG9yIG11c3QgaGF2ZSBiZWVuIGFwcGxpZWQgdG8gc29tZXRoaW5nLlxuICAgICAgICAgICAgaWYgKHRoaXMudGFyZ2V0X1tzdG9yZWRBbm5vdGF0aW9uc1N5bWJvbF0/LltrZXldKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIC8vIHdpbGwgYmUgYW5ub3RhdGVkIGJ5IHN1YmNsYXNzIGNvbnN0cnVjdG9yXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGRpZSgxLCBhbm5vdGF0aW9uLmFubm90YXRpb25UeXBlXywgYCR7dGhpcy5uYW1lX30uJHtrZXkudG9TdHJpbmcoKX1gKVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGxldCBzb3VyY2UgPSB0aGlzLnRhcmdldF9cbiAgICAgICAgd2hpbGUgKHNvdXJjZSAmJiBzb3VyY2UgIT09IG9iamVjdFByb3RvdHlwZSkge1xuICAgICAgICAgICAgY29uc3QgZGVzY3JpcHRvciA9IGdldERlc2NyaXB0b3Ioc291cmNlLCBrZXkpXG4gICAgICAgICAgICBpZiAoZGVzY3JpcHRvcikge1xuICAgICAgICAgICAgICAgIGNvbnN0IG91dGNvbWUgPSBhbm5vdGF0aW9uLm1ha2VfKHRoaXMsIGtleSwgZGVzY3JpcHRvciwgc291cmNlKVxuICAgICAgICAgICAgICAgIGlmIChvdXRjb21lID09PSBNYWtlUmVzdWx0LkNhbmNlbCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm5cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKG91dGNvbWUgPT09IE1ha2VSZXN1bHQuQnJlYWspIHtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzb3VyY2UgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Yoc291cmNlKVxuICAgICAgICB9XG4gICAgICAgIHJlY29yZEFubm90YXRpb25BcHBsaWVkKHRoaXMsIGFubm90YXRpb24sIGtleSlcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge1Byb3BlcnR5S2V5fSBrZXlcbiAgICAgKiBAcGFyYW0ge1Byb3BlcnR5RGVzY3JpcHRvcn0gZGVzY3JpcHRvclxuICAgICAqIEBwYXJhbSB7QW5ub3RhdGlvbnxib29sZWFufSBhbm5vdGF0aW9uIHRydWUgLSB1c2UgZGVmYXVsdCBhbm5vdGF0aW9uLCBmYWxzZSAtIGNvcHkgYXMgaXNcbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IHByb3h5VHJhcCB3aGV0aGVyIGl0J3MgY2FsbGVkIGZyb20gcHJveHkgdHJhcFxuICAgICAqIEByZXR1cm5zIHtib29sZWFufG51bGx9IHRydWUgb24gc3VjY2VzcywgZmFsc2Ugb24gZmFpbHVyZSAocHJveHlUcmFwICsgbm9uLWNvbmZpZ3VyYWJsZSksIG51bGwgd2hlbiBjYW5jZWxsZWQgYnkgaW50ZXJjZXB0b3JcbiAgICAgKi9cbiAgICBleHRlbmRfKFxuICAgICAgICBrZXk6IFByb3BlcnR5S2V5LFxuICAgICAgICBkZXNjcmlwdG9yOiBQcm9wZXJ0eURlc2NyaXB0b3IsXG4gICAgICAgIGFubm90YXRpb246IEFubm90YXRpb24gfCBib29sZWFuLFxuICAgICAgICBwcm94eVRyYXA6IGJvb2xlYW4gPSBmYWxzZVxuICAgICk6IGJvb2xlYW4gfCBudWxsIHtcbiAgICAgICAgaWYgKGFubm90YXRpb24gPT09IHRydWUpIHtcbiAgICAgICAgICAgIGFubm90YXRpb24gPSB0aGlzLmRlZmF1bHRBbm5vdGF0aW9uX1xuICAgICAgICB9XG4gICAgICAgIGlmIChhbm5vdGF0aW9uID09PSBmYWxzZSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZGVmaW5lUHJvcGVydHlfKGtleSwgZGVzY3JpcHRvciwgcHJveHlUcmFwKVxuICAgICAgICB9XG4gICAgICAgIGFzc2VydEFubm90YWJsZSh0aGlzLCBhbm5vdGF0aW9uLCBrZXkpXG4gICAgICAgIGNvbnN0IG91dGNvbWUgPSBhbm5vdGF0aW9uLmV4dGVuZF8odGhpcywga2V5LCBkZXNjcmlwdG9yLCBwcm94eVRyYXApXG4gICAgICAgIGlmIChvdXRjb21lKSB7XG4gICAgICAgICAgICByZWNvcmRBbm5vdGF0aW9uQXBwbGllZCh0aGlzLCBhbm5vdGF0aW9uLCBrZXkpXG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG91dGNvbWVcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge1Byb3BlcnR5S2V5fSBrZXlcbiAgICAgKiBAcGFyYW0ge1Byb3BlcnR5RGVzY3JpcHRvcn0gZGVzY3JpcHRvclxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gcHJveHlUcmFwIHdoZXRoZXIgaXQncyBjYWxsZWQgZnJvbSBwcm94eSB0cmFwXG4gICAgICogQHJldHVybnMge2Jvb2xlYW58bnVsbH0gdHJ1ZSBvbiBzdWNjZXNzLCBmYWxzZSBvbiBmYWlsdXJlIChwcm94eVRyYXAgKyBub24tY29uZmlndXJhYmxlKSwgbnVsbCB3aGVuIGNhbmNlbGxlZCBieSBpbnRlcmNlcHRvclxuICAgICAqL1xuICAgIGRlZmluZVByb3BlcnR5XyhcbiAgICAgICAga2V5OiBQcm9wZXJ0eUtleSxcbiAgICAgICAgZGVzY3JpcHRvcjogUHJvcGVydHlEZXNjcmlwdG9yLFxuICAgICAgICBwcm94eVRyYXA6IGJvb2xlYW4gPSBmYWxzZVxuICAgICk6IGJvb2xlYW4gfCBudWxsIHtcbiAgICAgICAgY2hlY2tJZlN0YXRlTW9kaWZpY2F0aW9uc0FyZUFsbG93ZWQodGhpcy5rZXlzQXRvbV8pXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBzdGFydEJhdGNoKClcblxuICAgICAgICAgICAgLy8gRGVsZXRlXG4gICAgICAgICAgICBjb25zdCBkZWxldGVPdXRjb21lID0gdGhpcy5kZWxldGVfKGtleSlcbiAgICAgICAgICAgIGlmICghZGVsZXRlT3V0Y29tZSkge1xuICAgICAgICAgICAgICAgIC8vIEZhaWx1cmUgb3IgaW50ZXJjZXB0ZWRcbiAgICAgICAgICAgICAgICByZXR1cm4gZGVsZXRlT3V0Y29tZVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBBREQgaW50ZXJjZXB0b3JcbiAgICAgICAgICAgIGlmIChoYXNJbnRlcmNlcHRvcnModGhpcykpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBjaGFuZ2UgPSBpbnRlcmNlcHRDaGFuZ2U8SU9iamVjdFdpbGxDaGFuZ2U+KHRoaXMsIHtcbiAgICAgICAgICAgICAgICAgICAgb2JqZWN0OiB0aGlzLnByb3h5XyB8fCB0aGlzLnRhcmdldF8sXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IGtleSxcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogQURELFxuICAgICAgICAgICAgICAgICAgICBuZXdWYWx1ZTogZGVzY3JpcHRvci52YWx1ZVxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgaWYgKCFjaGFuZ2UpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGxcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY29uc3QgeyBuZXdWYWx1ZSB9ID0gY2hhbmdlIGFzIGFueVxuICAgICAgICAgICAgICAgIGlmIChkZXNjcmlwdG9yLnZhbHVlICE9PSBuZXdWYWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdG9yID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgLi4uZGVzY3JpcHRvcixcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBuZXdWYWx1ZVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBEZWZpbmVcbiAgICAgICAgICAgIGlmIChwcm94eVRyYXApIHtcbiAgICAgICAgICAgICAgICBpZiAoIVJlZmxlY3QuZGVmaW5lUHJvcGVydHkodGhpcy50YXJnZXRfLCBrZXksIGRlc2NyaXB0b3IpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgZGVmaW5lUHJvcGVydHkodGhpcy50YXJnZXRfLCBrZXksIGRlc2NyaXB0b3IpXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIE5vdGlmeVxuICAgICAgICAgICAgdGhpcy5ub3RpZnlQcm9wZXJ0eUFkZGl0aW9uXyhrZXksIGRlc2NyaXB0b3IudmFsdWUpXG4gICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgICBlbmRCYXRjaCgpXG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRydWVcbiAgICB9XG5cbiAgICAvLyBJZiBvcmlnaW5hbCBkZXNjcmlwdG9yIGJlY29tZXMgcmVsZXZhbnQsIG1vdmUgdGhpcyB0byBhbm5vdGF0aW9uIGRpcmVjdGx5XG4gICAgZGVmaW5lT2JzZXJ2YWJsZVByb3BlcnR5XyhcbiAgICAgICAga2V5OiBQcm9wZXJ0eUtleSxcbiAgICAgICAgdmFsdWU6IGFueSxcbiAgICAgICAgZW5oYW5jZXI6IElFbmhhbmNlcjxhbnk+LFxuICAgICAgICBwcm94eVRyYXA6IGJvb2xlYW4gPSBmYWxzZVxuICAgICk6IGJvb2xlYW4gfCBudWxsIHtcbiAgICAgICAgY2hlY2tJZlN0YXRlTW9kaWZpY2F0aW9uc0FyZUFsbG93ZWQodGhpcy5rZXlzQXRvbV8pXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBzdGFydEJhdGNoKClcblxuICAgICAgICAgICAgLy8gRGVsZXRlXG4gICAgICAgICAgICBjb25zdCBkZWxldGVPdXRjb21lID0gdGhpcy5kZWxldGVfKGtleSlcbiAgICAgICAgICAgIGlmICghZGVsZXRlT3V0Y29tZSkge1xuICAgICAgICAgICAgICAgIC8vIEZhaWx1cmUgb3IgaW50ZXJjZXB0ZWRcbiAgICAgICAgICAgICAgICByZXR1cm4gZGVsZXRlT3V0Y29tZVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBBREQgaW50ZXJjZXB0b3JcbiAgICAgICAgICAgIGlmIChoYXNJbnRlcmNlcHRvcnModGhpcykpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBjaGFuZ2UgPSBpbnRlcmNlcHRDaGFuZ2U8SU9iamVjdFdpbGxDaGFuZ2U+KHRoaXMsIHtcbiAgICAgICAgICAgICAgICAgICAgb2JqZWN0OiB0aGlzLnByb3h5XyB8fCB0aGlzLnRhcmdldF8sXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IGtleSxcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogQURELFxuICAgICAgICAgICAgICAgICAgICBuZXdWYWx1ZTogdmFsdWVcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIGlmICghY2hhbmdlKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHZhbHVlID0gKGNoYW5nZSBhcyBhbnkpLm5ld1ZhbHVlXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNvbnN0IGNhY2hlZERlc2NyaXB0b3IgPSBnZXRDYWNoZWRPYnNlcnZhYmxlUHJvcERlc2NyaXB0b3Ioa2V5KVxuICAgICAgICAgICAgY29uc3QgZGVzY3JpcHRvciA9IHtcbiAgICAgICAgICAgICAgICBjb25maWd1cmFibGU6IGdsb2JhbFN0YXRlLnNhZmVEZXNjcmlwdG9ycyA/IHRoaXMuaXNQbGFpbk9iamVjdF8gOiB0cnVlLFxuICAgICAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICAgICAgZ2V0OiBjYWNoZWREZXNjcmlwdG9yLmdldCxcbiAgICAgICAgICAgICAgICBzZXQ6IGNhY2hlZERlc2NyaXB0b3Iuc2V0XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIERlZmluZVxuICAgICAgICAgICAgaWYgKHByb3h5VHJhcCkge1xuICAgICAgICAgICAgICAgIGlmICghUmVmbGVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLnRhcmdldF8sIGtleSwgZGVzY3JpcHRvcikpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBkZWZpbmVQcm9wZXJ0eSh0aGlzLnRhcmdldF8sIGtleSwgZGVzY3JpcHRvcilcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY29uc3Qgb2JzZXJ2YWJsZSA9IG5ldyBPYnNlcnZhYmxlVmFsdWUoXG4gICAgICAgICAgICAgICAgdmFsdWUsXG4gICAgICAgICAgICAgICAgZW5oYW5jZXIsXG4gICAgICAgICAgICAgICAgX19ERVZfXyA/IGAke3RoaXMubmFtZV99LiR7a2V5LnRvU3RyaW5nKCl9YCA6IFwiT2JzZXJ2YWJsZU9iamVjdC5rZXlcIixcbiAgICAgICAgICAgICAgICBmYWxzZVxuICAgICAgICAgICAgKVxuXG4gICAgICAgICAgICB0aGlzLnZhbHVlc18uc2V0KGtleSwgb2JzZXJ2YWJsZSlcblxuICAgICAgICAgICAgLy8gTm90aWZ5ICh2YWx1ZSBwb3NzaWJseSBjaGFuZ2VkIGJ5IE9ic2VydmFibGVWYWx1ZSlcbiAgICAgICAgICAgIHRoaXMubm90aWZ5UHJvcGVydHlBZGRpdGlvbl8oa2V5LCBvYnNlcnZhYmxlLnZhbHVlXylcbiAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICAgIGVuZEJhdGNoKClcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZVxuICAgIH1cblxuICAgIC8vIElmIG9yaWdpbmFsIGRlc2NyaXB0b3IgYmVjb21lcyByZWxldmFudCwgbW92ZSB0aGlzIHRvIGFubm90YXRpb24gZGlyZWN0bHlcbiAgICBkZWZpbmVDb21wdXRlZFByb3BlcnR5XyhcbiAgICAgICAga2V5OiBQcm9wZXJ0eUtleSxcbiAgICAgICAgb3B0aW9uczogSUNvbXB1dGVkVmFsdWVPcHRpb25zPGFueT4sXG4gICAgICAgIHByb3h5VHJhcDogYm9vbGVhbiA9IGZhbHNlXG4gICAgKTogYm9vbGVhbiB8IG51bGwge1xuICAgICAgICBjaGVja0lmU3RhdGVNb2RpZmljYXRpb25zQXJlQWxsb3dlZCh0aGlzLmtleXNBdG9tXylcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHN0YXJ0QmF0Y2goKVxuXG4gICAgICAgICAgICAvLyBEZWxldGVcbiAgICAgICAgICAgIGNvbnN0IGRlbGV0ZU91dGNvbWUgPSB0aGlzLmRlbGV0ZV8oa2V5KVxuICAgICAgICAgICAgaWYgKCFkZWxldGVPdXRjb21lKSB7XG4gICAgICAgICAgICAgICAgLy8gRmFpbHVyZSBvciBpbnRlcmNlcHRlZFxuICAgICAgICAgICAgICAgIHJldHVybiBkZWxldGVPdXRjb21lXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIEFERCBpbnRlcmNlcHRvclxuICAgICAgICAgICAgaWYgKGhhc0ludGVyY2VwdG9ycyh0aGlzKSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGNoYW5nZSA9IGludGVyY2VwdENoYW5nZTxJT2JqZWN0V2lsbENoYW5nZT4odGhpcywge1xuICAgICAgICAgICAgICAgICAgICBvYmplY3Q6IHRoaXMucHJveHlfIHx8IHRoaXMudGFyZ2V0XyxcbiAgICAgICAgICAgICAgICAgICAgbmFtZToga2V5LFxuICAgICAgICAgICAgICAgICAgICB0eXBlOiBBREQsXG4gICAgICAgICAgICAgICAgICAgIG5ld1ZhbHVlOiB1bmRlZmluZWRcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIGlmICghY2hhbmdlKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgb3B0aW9ucy5uYW1lIHx8PSBfX0RFVl9fID8gYCR7dGhpcy5uYW1lX30uJHtrZXkudG9TdHJpbmcoKX1gIDogXCJPYnNlcnZhYmxlT2JqZWN0LmtleVwiXG4gICAgICAgICAgICBvcHRpb25zLmNvbnRleHQgPSB0aGlzLnByb3h5XyB8fCB0aGlzLnRhcmdldF9cbiAgICAgICAgICAgIGNvbnN0IGNhY2hlZERlc2NyaXB0b3IgPSBnZXRDYWNoZWRPYnNlcnZhYmxlUHJvcERlc2NyaXB0b3Ioa2V5KVxuICAgICAgICAgICAgY29uc3QgZGVzY3JpcHRvciA9IHtcbiAgICAgICAgICAgICAgICBjb25maWd1cmFibGU6IGdsb2JhbFN0YXRlLnNhZmVEZXNjcmlwdG9ycyA/IHRoaXMuaXNQbGFpbk9iamVjdF8gOiB0cnVlLFxuICAgICAgICAgICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICAgICAgICAgIGdldDogY2FjaGVkRGVzY3JpcHRvci5nZXQsXG4gICAgICAgICAgICAgICAgc2V0OiBjYWNoZWREZXNjcmlwdG9yLnNldFxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBEZWZpbmVcbiAgICAgICAgICAgIGlmIChwcm94eVRyYXApIHtcbiAgICAgICAgICAgICAgICBpZiAoIVJlZmxlY3QuZGVmaW5lUHJvcGVydHkodGhpcy50YXJnZXRfLCBrZXksIGRlc2NyaXB0b3IpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgZGVmaW5lUHJvcGVydHkodGhpcy50YXJnZXRfLCBrZXksIGRlc2NyaXB0b3IpXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMudmFsdWVzXy5zZXQoa2V5LCBuZXcgQ29tcHV0ZWRWYWx1ZShvcHRpb25zKSlcblxuICAgICAgICAgICAgLy8gTm90aWZ5XG4gICAgICAgICAgICB0aGlzLm5vdGlmeVByb3BlcnR5QWRkaXRpb25fKGtleSwgdW5kZWZpbmVkKVxuICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgICAgZW5kQmF0Y2goKVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVlXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtQcm9wZXJ0eUtleX0ga2V5XG4gICAgICogQHBhcmFtIHtQcm9wZXJ0eURlc2NyaXB0b3J9IGRlc2NyaXB0b3JcbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IHByb3h5VHJhcCB3aGV0aGVyIGl0J3MgY2FsbGVkIGZyb20gcHJveHkgdHJhcFxuICAgICAqIEByZXR1cm5zIHtib29sZWFufG51bGx9IHRydWUgb24gc3VjY2VzcywgZmFsc2Ugb24gZmFpbHVyZSAocHJveHlUcmFwICsgbm9uLWNvbmZpZ3VyYWJsZSksIG51bGwgd2hlbiBjYW5jZWxsZWQgYnkgaW50ZXJjZXB0b3JcbiAgICAgKi9cbiAgICBkZWxldGVfKGtleTogUHJvcGVydHlLZXksIHByb3h5VHJhcDogYm9vbGVhbiA9IGZhbHNlKTogYm9vbGVhbiB8IG51bGwge1xuICAgICAgICBjaGVja0lmU3RhdGVNb2RpZmljYXRpb25zQXJlQWxsb3dlZCh0aGlzLmtleXNBdG9tXylcbiAgICAgICAgLy8gTm8gc3VjaCBwcm9wXG4gICAgICAgIGlmICghaGFzUHJvcCh0aGlzLnRhcmdldF8sIGtleSkpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlXG4gICAgICAgIH1cblxuICAgICAgICAvLyBJbnRlcmNlcHRcbiAgICAgICAgaWYgKGhhc0ludGVyY2VwdG9ycyh0aGlzKSkge1xuICAgICAgICAgICAgY29uc3QgY2hhbmdlID0gaW50ZXJjZXB0Q2hhbmdlPElPYmplY3RXaWxsQ2hhbmdlPih0aGlzLCB7XG4gICAgICAgICAgICAgICAgb2JqZWN0OiB0aGlzLnByb3h5XyB8fCB0aGlzLnRhcmdldF8sXG4gICAgICAgICAgICAgICAgbmFtZToga2V5LFxuICAgICAgICAgICAgICAgIHR5cGU6IFJFTU9WRVxuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC8vIENhbmNlbGxlZFxuICAgICAgICAgICAgaWYgKCFjaGFuZ2UpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbFxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gRGVsZXRlXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBzdGFydEJhdGNoKClcbiAgICAgICAgICAgIGNvbnN0IG5vdGlmeSA9IGhhc0xpc3RlbmVycyh0aGlzKVxuICAgICAgICAgICAgY29uc3Qgbm90aWZ5U3B5ID0gX19ERVZfXyAmJiBpc1NweUVuYWJsZWQoKVxuICAgICAgICAgICAgY29uc3Qgb2JzZXJ2YWJsZSA9IHRoaXMudmFsdWVzXy5nZXQoa2V5KVxuICAgICAgICAgICAgLy8gVmFsdWUgbmVlZGVkIGZvciBzcGllcy9saXN0ZW5lcnNcbiAgICAgICAgICAgIGxldCB2YWx1ZSA9IHVuZGVmaW5lZFxuICAgICAgICAgICAgLy8gT3B0aW1pemF0aW9uOiBkb24ndCBwdWxsIHRoZSB2YWx1ZSB1bmxlc3Mgd2Ugd2lsbCBuZWVkIGl0XG4gICAgICAgICAgICBpZiAoIW9ic2VydmFibGUgJiYgKG5vdGlmeSB8fCBub3RpZnlTcHkpKSB7XG4gICAgICAgICAgICAgICAgdmFsdWUgPSBnZXREZXNjcmlwdG9yKHRoaXMudGFyZ2V0Xywga2V5KT8udmFsdWVcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIGRlbGV0ZSBwcm9wIChkbyBmaXJzdCwgbWF5IGZhaWwpXG4gICAgICAgICAgICBpZiAocHJveHlUcmFwKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFSZWZsZWN0LmRlbGV0ZVByb3BlcnR5KHRoaXMudGFyZ2V0Xywga2V5KSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGRlbGV0ZSB0aGlzLnRhcmdldF9ba2V5XVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gQWxsb3cgcmUtYW5ub3RhdGluZyB0aGlzIGZpZWxkXG4gICAgICAgICAgICBpZiAoX19ERVZfXykge1xuICAgICAgICAgICAgICAgIGRlbGV0ZSB0aGlzLmFwcGxpZWRBbm5vdGF0aW9uc18hW2tleV1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIENsZWFyIG9ic2VydmFibGVcbiAgICAgICAgICAgIGlmIChvYnNlcnZhYmxlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy52YWx1ZXNfLmRlbGV0ZShrZXkpXG4gICAgICAgICAgICAgICAgLy8gZm9yIGNvbXB1dGVkLCB2YWx1ZSBpcyB1bmRlZmluZWRcbiAgICAgICAgICAgICAgICBpZiAob2JzZXJ2YWJsZSBpbnN0YW5jZW9mIE9ic2VydmFibGVWYWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IG9ic2VydmFibGUudmFsdWVfXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIE5vdGlmeTogYXV0b3J1bigoKSA9PiBvYmpba2V5XSksIHNlZSAjMTc5NlxuICAgICAgICAgICAgICAgIHByb3BhZ2F0ZUNoYW5nZWQob2JzZXJ2YWJsZSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIE5vdGlmeSBcImtleXMvZW50cmllcy92YWx1ZXNcIiBvYnNlcnZlcnNcbiAgICAgICAgICAgIHRoaXMua2V5c0F0b21fLnJlcG9ydENoYW5nZWQoKVxuXG4gICAgICAgICAgICAvLyBOb3RpZnkgXCJoYXNcIiBvYnNlcnZlcnNcbiAgICAgICAgICAgIC8vIFwiaW5cIiBhcyBpdCBtYXkgc3RpbGwgZXhpc3QgaW4gcHJvdG9cbiAgICAgICAgICAgIHRoaXMucGVuZGluZ0tleXNfPy5nZXQoa2V5KT8uc2V0KGtleSBpbiB0aGlzLnRhcmdldF8pXG5cbiAgICAgICAgICAgIC8vIE5vdGlmeSBzcGllcy9saXN0ZW5lcnNcbiAgICAgICAgICAgIGlmIChub3RpZnkgfHwgbm90aWZ5U3B5KSB7XG4gICAgICAgICAgICAgICAgY29uc3QgY2hhbmdlOiBJT2JqZWN0RGlkQ2hhbmdlID0ge1xuICAgICAgICAgICAgICAgICAgICB0eXBlOiBSRU1PVkUsXG4gICAgICAgICAgICAgICAgICAgIG9ic2VydmFibGVLaW5kOiBcIm9iamVjdFwiLFxuICAgICAgICAgICAgICAgICAgICBvYmplY3Q6IHRoaXMucHJveHlfIHx8IHRoaXMudGFyZ2V0XyxcbiAgICAgICAgICAgICAgICAgICAgZGVidWdPYmplY3ROYW1lOiB0aGlzLm5hbWVfLFxuICAgICAgICAgICAgICAgICAgICBvbGRWYWx1ZTogdmFsdWUsXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IGtleVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoX19ERVZfXyAmJiBub3RpZnlTcHkpIHtcbiAgICAgICAgICAgICAgICAgICAgc3B5UmVwb3J0U3RhcnQoY2hhbmdlISlcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKG5vdGlmeSkge1xuICAgICAgICAgICAgICAgICAgICBub3RpZnlMaXN0ZW5lcnModGhpcywgY2hhbmdlKVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoX19ERVZfXyAmJiBub3RpZnlTcHkpIHtcbiAgICAgICAgICAgICAgICAgICAgc3B5UmVwb3J0RW5kKClcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgICBlbmRCYXRjaCgpXG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRydWVcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBPYnNlcnZlcyB0aGlzIG9iamVjdC4gVHJpZ2dlcnMgZm9yIHRoZSBldmVudHMgJ2FkZCcsICd1cGRhdGUnIGFuZCAnZGVsZXRlJy5cbiAgICAgKiBTZWU6IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL09iamVjdC9vYnNlcnZlXG4gICAgICogZm9yIGNhbGxiYWNrIGRldGFpbHNcbiAgICAgKi9cbiAgICBvYnNlcnZlXyhjYWxsYmFjazogKGNoYW5nZXM6IElPYmplY3REaWRDaGFuZ2UpID0+IHZvaWQsIGZpcmVJbW1lZGlhdGVseT86IGJvb2xlYW4pOiBMYW1iZGEge1xuICAgICAgICBpZiAoX19ERVZfXyAmJiBmaXJlSW1tZWRpYXRlbHkgPT09IHRydWUpIHtcbiAgICAgICAgICAgIGRpZShcImBvYnNlcnZlYCBkb2Vzbid0IHN1cHBvcnQgdGhlIGZpcmUgaW1tZWRpYXRlbHkgcHJvcGVydHkgZm9yIG9ic2VydmFibGUgb2JqZWN0cy5cIilcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVnaXN0ZXJMaXN0ZW5lcih0aGlzLCBjYWxsYmFjaylcbiAgICB9XG5cbiAgICBpbnRlcmNlcHRfKGhhbmRsZXIpOiBMYW1iZGEge1xuICAgICAgICByZXR1cm4gcmVnaXN0ZXJJbnRlcmNlcHRvcih0aGlzLCBoYW5kbGVyKVxuICAgIH1cblxuICAgIG5vdGlmeVByb3BlcnR5QWRkaXRpb25fKGtleTogUHJvcGVydHlLZXksIHZhbHVlOiBhbnkpIHtcbiAgICAgICAgY29uc3Qgbm90aWZ5ID0gaGFzTGlzdGVuZXJzKHRoaXMpXG4gICAgICAgIGNvbnN0IG5vdGlmeVNweSA9IF9fREVWX18gJiYgaXNTcHlFbmFibGVkKClcbiAgICAgICAgaWYgKG5vdGlmeSB8fCBub3RpZnlTcHkpIHtcbiAgICAgICAgICAgIGNvbnN0IGNoYW5nZTogSU9iamVjdERpZENoYW5nZSB8IG51bGwgPVxuICAgICAgICAgICAgICAgIG5vdGlmeSB8fCBub3RpZnlTcHlcbiAgICAgICAgICAgICAgICAgICAgPyAoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBBREQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIG9ic2VydmFibGVLaW5kOiBcIm9iamVjdFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBkZWJ1Z09iamVjdE5hbWU6IHRoaXMubmFtZV8sXG4gICAgICAgICAgICAgICAgICAgICAgICAgIG9iamVjdDogdGhpcy5wcm94eV8gfHwgdGhpcy50YXJnZXRfLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiBrZXksXG4gICAgICAgICAgICAgICAgICAgICAgICAgIG5ld1ZhbHVlOiB2YWx1ZVxuICAgICAgICAgICAgICAgICAgICAgIH0gYXMgY29uc3QpXG4gICAgICAgICAgICAgICAgICAgIDogbnVsbFxuXG4gICAgICAgICAgICBpZiAoX19ERVZfXyAmJiBub3RpZnlTcHkpIHtcbiAgICAgICAgICAgICAgICBzcHlSZXBvcnRTdGFydChjaGFuZ2UhKVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG5vdGlmeSkge1xuICAgICAgICAgICAgICAgIG5vdGlmeUxpc3RlbmVycyh0aGlzLCBjaGFuZ2UpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoX19ERVZfXyAmJiBub3RpZnlTcHkpIHtcbiAgICAgICAgICAgICAgICBzcHlSZXBvcnRFbmQoKVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5wZW5kaW5nS2V5c18/LmdldChrZXkpPy5zZXQodHJ1ZSlcblxuICAgICAgICAvLyBOb3RpZnkgXCJrZXlzL2VudHJpZXMvdmFsdWVzXCIgb2JzZXJ2ZXJzXG4gICAgICAgIHRoaXMua2V5c0F0b21fLnJlcG9ydENoYW5nZWQoKVxuICAgIH1cblxuICAgIG93bktleXNfKCk6IEFycmF5PHN0cmluZyB8IHN5bWJvbD4ge1xuICAgICAgICB0aGlzLmtleXNBdG9tXy5yZXBvcnRPYnNlcnZlZCgpXG4gICAgICAgIHJldHVybiBvd25LZXlzKHRoaXMudGFyZ2V0XylcbiAgICB9XG5cbiAgICBrZXlzXygpOiBQcm9wZXJ0eUtleVtdIHtcbiAgICAgICAgLy8gUmV0dXJucyBlbnVtZXJhYmxlICYmIG93biwgYnV0IHVuZm9ydHVuYXRlbHkga2V5c0F0b20gd2lsbCByZXBvcnQgb24gQU5ZIGtleSBjaGFuZ2UuXG4gICAgICAgIC8vIFRoZXJlIGlzIG5vIHdheSB0byBkaXN0aW5ndWlzaCBiZXR3ZWVuIE9iamVjdC5rZXlzKG9iamVjdCkgYW5kIFJlZmxlY3Qub3duS2V5cyhvYmplY3QpIC0gYm90aCBhcmUgaGFuZGxlZCBieSBvd25LZXlzIHRyYXAuXG4gICAgICAgIC8vIFdlIGNhbiBlaXRoZXIgb3Zlci1yZXBvcnQgaW4gT2JqZWN0LmtleXMob2JqZWN0KSBvciB1bmRlci1yZXBvcnQgaW4gUmVmbGVjdC5vd25LZXlzKG9iamVjdClcbiAgICAgICAgLy8gV2UgY2hvb3NlIHRvIG92ZXItcmVwb3J0IGluIE9iamVjdC5rZXlzKG9iamVjdCksIGJlY2F1c2U6XG4gICAgICAgIC8vIC0gdHlwaWNhbGx5IGl0J3MgdXNlZCB3aXRoIHNpbXBsZSBkYXRhIG9iamVjdHNcbiAgICAgICAgLy8gLSB3aGVuIHN5bWJvbGljL25vbi1lbnVtZXJhYmxlIGtleXMgYXJlIHJlbGV2YW50IFJlZmxlY3Qub3duS2V5cyB3b3JrcyBhcyBleHBlY3RlZFxuICAgICAgICB0aGlzLmtleXNBdG9tXy5yZXBvcnRPYnNlcnZlZCgpXG4gICAgICAgIHJldHVybiBPYmplY3Qua2V5cyh0aGlzLnRhcmdldF8pXG4gICAgfVxufVxuXG5leHBvcnQgaW50ZXJmYWNlIElJc09ic2VydmFibGVPYmplY3Qge1xuICAgIFskbW9ieF06IE9ic2VydmFibGVPYmplY3RBZG1pbmlzdHJhdGlvblxufVxuXG5leHBvcnQgZnVuY3Rpb24gYXNPYnNlcnZhYmxlT2JqZWN0KFxuICAgIHRhcmdldDogYW55LFxuICAgIG9wdGlvbnM/OiBDcmVhdGVPYnNlcnZhYmxlT3B0aW9uc1xuKTogSUlzT2JzZXJ2YWJsZU9iamVjdCB7XG4gICAgaWYgKF9fREVWX18gJiYgb3B0aW9ucyAmJiBpc09ic2VydmFibGVPYmplY3QodGFyZ2V0KSkge1xuICAgICAgICBkaWUoYE9wdGlvbnMgY2FuJ3QgYmUgcHJvdmlkZWQgZm9yIGFscmVhZHkgb2JzZXJ2YWJsZSBvYmplY3RzLmApXG4gICAgfVxuXG4gICAgaWYgKGhhc1Byb3AodGFyZ2V0LCAkbW9ieCkpIHtcbiAgICAgICAgaWYgKF9fREVWX18gJiYgIShnZXRBZG1pbmlzdHJhdGlvbih0YXJnZXQpIGluc3RhbmNlb2YgT2JzZXJ2YWJsZU9iamVjdEFkbWluaXN0cmF0aW9uKSkge1xuICAgICAgICAgICAgZGllKFxuICAgICAgICAgICAgICAgIGBDYW5ub3QgY29udmVydCAnJHtnZXREZWJ1Z05hbWUodGFyZ2V0KX0nIGludG8gb2JzZXJ2YWJsZSBvYmplY3Q6YCArXG4gICAgICAgICAgICAgICAgICAgIGBcXG5UaGUgdGFyZ2V0IGlzIGFscmVhZHkgb2JzZXJ2YWJsZSBvZiBkaWZmZXJlbnQgdHlwZS5gICtcbiAgICAgICAgICAgICAgICAgICAgYFxcbkV4dGVuZGluZyBidWlsdGlucyBpcyBub3Qgc3VwcG9ydGVkLmBcbiAgICAgICAgICAgIClcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGFyZ2V0XG4gICAgfVxuXG4gICAgaWYgKF9fREVWX18gJiYgIU9iamVjdC5pc0V4dGVuc2libGUodGFyZ2V0KSkge1xuICAgICAgICBkaWUoXCJDYW5ub3QgbWFrZSB0aGUgZGVzaWduYXRlZCBvYmplY3Qgb2JzZXJ2YWJsZTsgaXQgaXMgbm90IGV4dGVuc2libGVcIilcbiAgICB9XG5cbiAgICBjb25zdCBuYW1lID1cbiAgICAgICAgb3B0aW9ucz8ubmFtZSA/P1xuICAgICAgICAoX19ERVZfX1xuICAgICAgICAgICAgPyBgJHtcbiAgICAgICAgICAgICAgICAgIGlzUGxhaW5PYmplY3QodGFyZ2V0KSA/IFwiT2JzZXJ2YWJsZU9iamVjdFwiIDogdGFyZ2V0LmNvbnN0cnVjdG9yLm5hbWVcbiAgICAgICAgICAgICAgfUAke2dldE5leHRJZCgpfWBcbiAgICAgICAgICAgIDogXCJPYnNlcnZhYmxlT2JqZWN0XCIpXG5cbiAgICBjb25zdCBhZG0gPSBuZXcgT2JzZXJ2YWJsZU9iamVjdEFkbWluaXN0cmF0aW9uKFxuICAgICAgICB0YXJnZXQsXG4gICAgICAgIG5ldyBNYXAoKSxcbiAgICAgICAgU3RyaW5nKG5hbWUpLFxuICAgICAgICBnZXRBbm5vdGF0aW9uRnJvbU9wdGlvbnMob3B0aW9ucylcbiAgICApXG5cbiAgICBhZGRIaWRkZW5Qcm9wKHRhcmdldCwgJG1vYngsIGFkbSlcblxuICAgIHJldHVybiB0YXJnZXRcbn1cblxuY29uc3QgaXNPYnNlcnZhYmxlT2JqZWN0QWRtaW5pc3RyYXRpb24gPSBjcmVhdGVJbnN0YW5jZW9mUHJlZGljYXRlKFxuICAgIFwiT2JzZXJ2YWJsZU9iamVjdEFkbWluaXN0cmF0aW9uXCIsXG4gICAgT2JzZXJ2YWJsZU9iamVjdEFkbWluaXN0cmF0aW9uXG4pXG5cbmZ1bmN0aW9uIGdldENhY2hlZE9ic2VydmFibGVQcm9wRGVzY3JpcHRvcihrZXkpIHtcbiAgICByZXR1cm4gKFxuICAgICAgICBkZXNjcmlwdG9yQ2FjaGVba2V5XSB8fFxuICAgICAgICAoZGVzY3JpcHRvckNhY2hlW2tleV0gPSB7XG4gICAgICAgICAgICBnZXQoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXNbJG1vYnhdLmdldE9ic2VydmFibGVQcm9wVmFsdWVfKGtleSlcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzZXQodmFsdWUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpc1skbW9ieF0uc2V0T2JzZXJ2YWJsZVByb3BWYWx1ZV8oa2V5LCB2YWx1ZSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICApXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc09ic2VydmFibGVPYmplY3QodGhpbmc6IGFueSk6IGJvb2xlYW4ge1xuICAgIGlmIChpc09iamVjdCh0aGluZykpIHtcbiAgICAgICAgcmV0dXJuIGlzT2JzZXJ2YWJsZU9iamVjdEFkbWluaXN0cmF0aW9uKCh0aGluZyBhcyBhbnkpWyRtb2J4XSlcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlXG59XG5cbmV4cG9ydCBmdW5jdGlvbiByZWNvcmRBbm5vdGF0aW9uQXBwbGllZChcbiAgICBhZG06IE9ic2VydmFibGVPYmplY3RBZG1pbmlzdHJhdGlvbixcbiAgICBhbm5vdGF0aW9uOiBBbm5vdGF0aW9uLFxuICAgIGtleTogUHJvcGVydHlLZXlcbikge1xuICAgIGlmIChfX0RFVl9fKSB7XG4gICAgICAgIGFkbS5hcHBsaWVkQW5ub3RhdGlvbnNfIVtrZXldID0gYW5ub3RhdGlvblxuICAgIH1cbiAgICAvLyBSZW1vdmUgYXBwbGllZCBkZWNvcmF0b3IgYW5ub3RhdGlvbiBzbyB3ZSBkb24ndCB0cnkgdG8gYXBwbHkgaXQgYWdhaW4gaW4gc3ViY2xhc3MgY29uc3RydWN0b3JcbiAgICBkZWxldGUgYWRtLnRhcmdldF9bc3RvcmVkQW5ub3RhdGlvbnNTeW1ib2xdPy5ba2V5XVxufVxuXG5mdW5jdGlvbiBhc3NlcnRBbm5vdGFibGUoXG4gICAgYWRtOiBPYnNlcnZhYmxlT2JqZWN0QWRtaW5pc3RyYXRpb24sXG4gICAgYW5ub3RhdGlvbjogQW5ub3RhdGlvbixcbiAgICBrZXk6IFByb3BlcnR5S2V5XG4pIHtcbiAgICAvLyBWYWxpZCBhbm5vdGF0aW9uXG4gICAgaWYgKF9fREVWX18gJiYgIWlzQW5ub3RhdGlvbihhbm5vdGF0aW9uKSkge1xuICAgICAgICBkaWUoYENhbm5vdCBhbm5vdGF0ZSAnJHthZG0ubmFtZV99LiR7a2V5LnRvU3RyaW5nKCl9JzogSW52YWxpZCBhbm5vdGF0aW9uLmApXG4gICAgfVxuXG4gICAgLypcbiAgICAvLyBDb25maWd1cmFibGUsIG5vdCBzZWFsZWQsIG5vdCBmcm96ZW5cbiAgICAvLyBQb3NzaWJseSBub3QgbmVlZGVkLCBqdXN0IGEgbGl0dGxlIGJldHRlciBlcnJvciB0aGVuIHRoZSBvbmUgdGhyb3duIGJ5IGVuZ2luZS5cbiAgICAvLyBDYXNlcyB3aGVyZSB0aGlzIHdvdWxkIGJlIHVzZWZ1bCB0aGUgbW9zdCAoc3ViY2xhc3MgZmllbGQgaW5pdGlhbGl6ZXIpIGFyZSBub3QgaW50ZXJjZXB0YWJsZSBieSB0aGlzLlxuICAgIGlmIChfX0RFVl9fKSB7XG4gICAgICAgIGNvbnN0IGNvbmZpZ3VyYWJsZSA9IGdldERlc2NyaXB0b3IoYWRtLnRhcmdldF8sIGtleSk/LmNvbmZpZ3VyYWJsZVxuICAgICAgICBjb25zdCBmcm96ZW4gPSBPYmplY3QuaXNGcm96ZW4oYWRtLnRhcmdldF8pXG4gICAgICAgIGNvbnN0IHNlYWxlZCA9IE9iamVjdC5pc1NlYWxlZChhZG0udGFyZ2V0XylcbiAgICAgICAgaWYgKCFjb25maWd1cmFibGUgfHwgZnJvemVuIHx8IHNlYWxlZCkge1xuICAgICAgICAgICAgY29uc3QgZmllbGROYW1lID0gYCR7YWRtLm5hbWVffS4ke2tleS50b1N0cmluZygpfWBcbiAgICAgICAgICAgIGNvbnN0IHJlcXVlc3RlZEFubm90YXRpb25UeXBlID0gYW5ub3RhdGlvbi5hbm5vdGF0aW9uVHlwZV9cbiAgICAgICAgICAgIGxldCBlcnJvciA9IGBDYW5ub3QgYXBwbHkgJyR7cmVxdWVzdGVkQW5ub3RhdGlvblR5cGV9JyB0byAnJHtmaWVsZE5hbWV9JzpgXG4gICAgICAgICAgICBpZiAoZnJvemVuKSB7XG4gICAgICAgICAgICAgICAgZXJyb3IgKz0gYFxcbk9iamVjdCBpcyBmcm96ZW4uYFxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHNlYWxlZCkge1xuICAgICAgICAgICAgICAgIGVycm9yICs9IGBcXG5PYmplY3QgaXMgc2VhbGVkLmBcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghY29uZmlndXJhYmxlKSB7XG4gICAgICAgICAgICAgICAgZXJyb3IgKz0gYFxcbnByb3BlcnR5IGlzIG5vdCBjb25maWd1cmFibGUuYFxuICAgICAgICAgICAgICAgIC8vIE1lbnRpb24gb25seSBpZiBjYXVzZWQgYnkgdXMgdG8gYXZvaWQgY29uZnVzaW9uXG4gICAgICAgICAgICAgICAgaWYgKGhhc1Byb3AoYWRtLmFwcGxpZWRBbm5vdGF0aW9ucyEsIGtleSkpIHtcbiAgICAgICAgICAgICAgICAgICAgZXJyb3IgKz0gYFxcblRvIHByZXZlbnQgYWNjaWRlbnRhbCByZS1kZWZpbml0aW9uIG9mIGEgZmllbGQgYnkgYSBzdWJjbGFzcywgYFxuICAgICAgICAgICAgICAgICAgICBlcnJvciArPSBgYWxsIGFubm90YXRlZCBmaWVsZHMgb2Ygbm9uLXBsYWluIG9iamVjdHMgKGNsYXNzZXMpIGFyZSBub3QgY29uZmlndXJhYmxlLmBcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBkaWUoZXJyb3IpXG4gICAgICAgIH1cbiAgICB9XG4gICAgKi9cblxuICAgIC8vIE5vdCBhbm5vdGF0ZWRcbiAgICBpZiAoX19ERVZfXyAmJiAhaXNPdmVycmlkZShhbm5vdGF0aW9uKSAmJiBoYXNQcm9wKGFkbS5hcHBsaWVkQW5ub3RhdGlvbnNfISwga2V5KSkge1xuICAgICAgICBjb25zdCBmaWVsZE5hbWUgPSBgJHthZG0ubmFtZV99LiR7a2V5LnRvU3RyaW5nKCl9YFxuICAgICAgICBjb25zdCBjdXJyZW50QW5ub3RhdGlvblR5cGUgPSBhZG0uYXBwbGllZEFubm90YXRpb25zXyFba2V5XS5hbm5vdGF0aW9uVHlwZV9cbiAgICAgICAgY29uc3QgcmVxdWVzdGVkQW5ub3RhdGlvblR5cGUgPSBhbm5vdGF0aW9uLmFubm90YXRpb25UeXBlX1xuICAgICAgICBkaWUoXG4gICAgICAgICAgICBgQ2Fubm90IGFwcGx5ICcke3JlcXVlc3RlZEFubm90YXRpb25UeXBlfScgdG8gJyR7ZmllbGROYW1lfSc6YCArXG4gICAgICAgICAgICAgICAgYFxcblRoZSBmaWVsZCBpcyBhbHJlYWR5IGFubm90YXRlZCB3aXRoICcke2N1cnJlbnRBbm5vdGF0aW9uVHlwZX0nLmAgK1xuICAgICAgICAgICAgICAgIGBcXG5SZS1hbm5vdGF0aW5nIGZpZWxkcyBpcyBub3QgYWxsb3dlZC5gICtcbiAgICAgICAgICAgICAgICBgXFxuVXNlICdvdmVycmlkZScgYW5ub3RhdGlvbiBmb3IgbWV0aG9kcyBvdmVycmlkZGVuIGJ5IHN1YmNsYXNzLmBcbiAgICAgICAgKVxuICAgIH1cbn1cbiIsImltcG9ydCB7XG4gICAgZ2V0TmV4dElkLFxuICAgIGFkZEhpZGRlbkZpbmFsUHJvcCxcbiAgICBtYWtlSXRlcmFibGUsXG4gICAgYWRkSGlkZGVuUHJvcCxcbiAgICBPYnNlcnZhYmxlQXJyYXlBZG1pbmlzdHJhdGlvbixcbiAgICAkbW9ieCxcbiAgICBhcnJheUV4dGVuc2lvbnMsXG4gICAgSUVuaGFuY2VyLFxuICAgIGlzT2JzZXJ2YWJsZUFycmF5LFxuICAgIElPYnNlcnZhYmxlQXJyYXksXG4gICAgZGVmaW5lUHJvcGVydHksXG4gICAgaW5pdE9ic2VydmFibGVcbn0gZnJvbSBcIi4uL2ludGVybmFsXCJcblxuLy8gQnVnIGluIHNhZmFyaSA5LiogKG9yIGlPUyA5IHNhZmFyaSBtb2JpbGUpLiBTZWUgIzM2NFxuY29uc3QgRU5UUllfMCA9IGNyZWF0ZUFycmF5RW50cnlEZXNjcmlwdG9yKDApXG5cbmNvbnN0IHNhZmFyaVByb3RvdHlwZVNldHRlckluaGVyaXRhbmNlQnVnID0gKCgpID0+IHtcbiAgICBsZXQgdiA9IGZhbHNlXG4gICAgY29uc3QgcCA9IHt9XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHAsIFwiMFwiLCB7XG4gICAgICAgIHNldDogKCkgPT4ge1xuICAgICAgICAgICAgdiA9IHRydWVcbiAgICAgICAgfVxuICAgIH0pXG4gICAgT2JqZWN0LmNyZWF0ZShwKVtcIjBcIl0gPSAxXG4gICAgcmV0dXJuIHYgPT09IGZhbHNlXG59KSgpXG5cbi8qKlxuICogVGhpcyBhcnJheSBidWZmZXIgY29udGFpbnMgdHdvIGxpc3RzIG9mIHByb3BlcnRpZXMsIHNvIHRoYXQgYWxsIGFycmF5c1xuICogY2FuIHJlY3ljbGUgdGhlaXIgcHJvcGVydHkgZGVmaW5pdGlvbnMsIHdoaWNoIHNpZ25pZmljYW50bHkgaW1wcm92ZXMgcGVyZm9ybWFuY2Ugb2YgY3JlYXRpbmdcbiAqIHByb3BlcnRpZXMgb24gdGhlIGZseS5cbiAqL1xubGV0IE9CU0VSVkFCTEVfQVJSQVlfQlVGRkVSX1NJWkUgPSAwXG5cbi8vIFR5cGVzY3JpcHQgd29ya2Fyb3VuZCB0byBtYWtlIHN1cmUgT2JzZXJ2YWJsZUFycmF5IGV4dGVuZHMgQXJyYXlcbmNsYXNzIFN0dWJBcnJheSB7fVxuZnVuY3Rpb24gaW5oZXJpdChjdG9yLCBwcm90bykge1xuICAgIGlmIChPYmplY3Quc2V0UHJvdG90eXBlT2YpIHtcbiAgICAgICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKGN0b3IucHJvdG90eXBlLCBwcm90bylcbiAgICB9IGVsc2UgaWYgKGN0b3IucHJvdG90eXBlLl9fcHJvdG9fXyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGN0b3IucHJvdG90eXBlLl9fcHJvdG9fXyA9IHByb3RvXG4gICAgfSBlbHNlIHtcbiAgICAgICAgY3Rvci5wcm90b3R5cGUgPSBwcm90b1xuICAgIH1cbn1cbmluaGVyaXQoU3R1YkFycmF5LCBBcnJheS5wcm90b3R5cGUpXG5cbi8vIFdlZXggcHJvdG8gZnJlZXplIHByb3RlY3Rpb24gd2FzIGhlcmUsXG4vLyBidXQgaXQgaXMgdW5jbGVhciB3aHkgdGhlIGhhY2sgaXMgbmVlZCBhcyBNb2JYIG5ldmVyIGNoYW5nZWQgdGhlIHByb3RvdHlwZVxuLy8gYW55d2F5LCBzbyByZW1vdmVkIGl0IGluIFY2XG5cbmV4cG9ydCBjbGFzcyBMZWdhY3lPYnNlcnZhYmxlQXJyYXk8VD4gZXh0ZW5kcyBTdHViQXJyYXkge1xuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBpbml0aWFsVmFsdWVzOiBUW10gfCB1bmRlZmluZWQsXG4gICAgICAgIGVuaGFuY2VyOiBJRW5oYW5jZXI8VD4sXG4gICAgICAgIG5hbWUgPSBfX0RFVl9fID8gXCJPYnNlcnZhYmxlQXJyYXlAXCIgKyBnZXROZXh0SWQoKSA6IFwiT2JzZXJ2YWJsZUFycmF5XCIsXG4gICAgICAgIG93bmVkID0gZmFsc2VcbiAgICApIHtcbiAgICAgICAgc3VwZXIoKVxuICAgICAgICBpbml0T2JzZXJ2YWJsZSgoKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBhZG0gPSBuZXcgT2JzZXJ2YWJsZUFycmF5QWRtaW5pc3RyYXRpb24obmFtZSwgZW5oYW5jZXIsIG93bmVkLCB0cnVlKVxuICAgICAgICAgICAgYWRtLnByb3h5XyA9IHRoaXMgYXMgYW55XG4gICAgICAgICAgICBhZGRIaWRkZW5GaW5hbFByb3AodGhpcywgJG1vYngsIGFkbSlcblxuICAgICAgICAgICAgaWYgKGluaXRpYWxWYWx1ZXMgJiYgaW5pdGlhbFZhbHVlcy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgICAgICAgICAgdGhpcy5zcGxpY2VXaXRoQXJyYXkoMCwgMCwgaW5pdGlhbFZhbHVlcylcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHNhZmFyaVByb3RvdHlwZVNldHRlckluaGVyaXRhbmNlQnVnKSB7XG4gICAgICAgICAgICAgICAgLy8gU2VlbXMgdGhhdCBTYWZhcmkgd29uJ3QgdXNlIG51bWVyaWMgcHJvdG90eXBlIHNldHRlciB1bnRpbCBhbnkgKiBudW1lcmljIHByb3BlcnR5IGlzXG4gICAgICAgICAgICAgICAgLy8gZGVmaW5lZCBvbiB0aGUgaW5zdGFuY2UuIEFmdGVyIHRoYXQgaXQgd29ya3MgZmluZSwgZXZlbiBpZiB0aGlzIHByb3BlcnR5IGlzIGRlbGV0ZWQuXG4gICAgICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwiMFwiLCBFTlRSWV8wKVxuICAgICAgICAgICAgfVxuICAgICAgICB9KVxuICAgIH1cblxuICAgIGNvbmNhdCguLi5hcnJheXM6IFRbXVtdKTogVFtdIHtcbiAgICAgICAgOyh0aGlzWyRtb2J4XSBhcyBPYnNlcnZhYmxlQXJyYXlBZG1pbmlzdHJhdGlvbikuYXRvbV8ucmVwb3J0T2JzZXJ2ZWQoKVxuICAgICAgICByZXR1cm4gQXJyYXkucHJvdG90eXBlLmNvbmNhdC5hcHBseShcbiAgICAgICAgICAgICh0aGlzIGFzIGFueSkuc2xpY2UoKSxcbiAgICAgICAgICAgIC8vQHRzLWlnbm9yZVxuICAgICAgICAgICAgYXJyYXlzLm1hcChhID0+IChpc09ic2VydmFibGVBcnJheShhKSA/IGEuc2xpY2UoKSA6IGEpKVxuICAgICAgICApXG4gICAgfVxuXG4gICAgZ2V0IGxlbmd0aCgpOiBudW1iZXIge1xuICAgICAgICByZXR1cm4gKHRoaXNbJG1vYnhdIGFzIE9ic2VydmFibGVBcnJheUFkbWluaXN0cmF0aW9uKS5nZXRBcnJheUxlbmd0aF8oKVxuICAgIH1cblxuICAgIHNldCBsZW5ndGgobmV3TGVuZ3RoOiBudW1iZXIpIHtcbiAgICAgICAgOyh0aGlzWyRtb2J4XSBhcyBPYnNlcnZhYmxlQXJyYXlBZG1pbmlzdHJhdGlvbikuc2V0QXJyYXlMZW5ndGhfKG5ld0xlbmd0aClcbiAgICB9XG5cbiAgICBnZXQgW1N5bWJvbC50b1N0cmluZ1RhZ10oKSB7XG4gICAgICAgIHJldHVybiBcIkFycmF5XCJcbiAgICB9XG5cbiAgICBbU3ltYm9sLml0ZXJhdG9yXSgpIHtcbiAgICAgICAgY29uc3Qgc2VsZiA9IHRoaXNcbiAgICAgICAgbGV0IG5leHRJbmRleCA9IDBcbiAgICAgICAgcmV0dXJuIG1ha2VJdGVyYWJsZSh7XG4gICAgICAgICAgICBuZXh0KCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBuZXh0SW5kZXggPCBzZWxmLmxlbmd0aFxuICAgICAgICAgICAgICAgICAgICA/IHsgdmFsdWU6IHNlbGZbbmV4dEluZGV4KytdLCBkb25lOiBmYWxzZSB9XG4gICAgICAgICAgICAgICAgICAgIDogeyBkb25lOiB0cnVlLCB2YWx1ZTogdW5kZWZpbmVkIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICB9XG59XG5cbk9iamVjdC5lbnRyaWVzKGFycmF5RXh0ZW5zaW9ucykuZm9yRWFjaCgoW3Byb3AsIGZuXSkgPT4ge1xuICAgIGlmIChwcm9wICE9PSBcImNvbmNhdFwiKSB7XG4gICAgICAgIGFkZEhpZGRlblByb3AoTGVnYWN5T2JzZXJ2YWJsZUFycmF5LnByb3RvdHlwZSwgcHJvcCwgZm4pXG4gICAgfVxufSlcblxuZnVuY3Rpb24gY3JlYXRlQXJyYXlFbnRyeURlc2NyaXB0b3IoaW5kZXg6IG51bWJlcikge1xuICAgIHJldHVybiB7XG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXNbJG1vYnhdLmdldF8oaW5kZXgpXG4gICAgICAgIH0sXG4gICAgICAgIHNldDogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICB0aGlzWyRtb2J4XS5zZXRfKGluZGV4LCB2YWx1ZSlcbiAgICAgICAgfVxuICAgIH1cbn1cblxuZnVuY3Rpb24gY3JlYXRlQXJyYXlCdWZmZXJJdGVtKGluZGV4OiBudW1iZXIpIHtcbiAgICBkZWZpbmVQcm9wZXJ0eShMZWdhY3lPYnNlcnZhYmxlQXJyYXkucHJvdG90eXBlLCBcIlwiICsgaW5kZXgsIGNyZWF0ZUFycmF5RW50cnlEZXNjcmlwdG9yKGluZGV4KSlcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJlc2VydmVBcnJheUJ1ZmZlcihtYXg6IG51bWJlcikge1xuICAgIGlmIChtYXggPiBPQlNFUlZBQkxFX0FSUkFZX0JVRkZFUl9TSVpFKSB7XG4gICAgICAgIGZvciAobGV0IGluZGV4ID0gT0JTRVJWQUJMRV9BUlJBWV9CVUZGRVJfU0laRTsgaW5kZXggPCBtYXggKyAxMDA7IGluZGV4KyspIHtcbiAgICAgICAgICAgIGNyZWF0ZUFycmF5QnVmZmVySXRlbShpbmRleClcbiAgICAgICAgfVxuICAgICAgICBPQlNFUlZBQkxFX0FSUkFZX0JVRkZFUl9TSVpFID0gbWF4XG4gICAgfVxufVxuXG5yZXNlcnZlQXJyYXlCdWZmZXIoMTAwMClcblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUxlZ2FjeUFycmF5PFQ+KFxuICAgIGluaXRpYWxWYWx1ZXM6IFRbXSB8IHVuZGVmaW5lZCxcbiAgICBlbmhhbmNlcjogSUVuaGFuY2VyPFQ+LFxuICAgIG5hbWU/OiBzdHJpbmdcbik6IElPYnNlcnZhYmxlQXJyYXk8VD4ge1xuICAgIHJldHVybiBuZXcgTGVnYWN5T2JzZXJ2YWJsZUFycmF5KGluaXRpYWxWYWx1ZXMsIGVuaGFuY2VyLCBuYW1lKSBhcyBhbnlcbn1cbiIsImltcG9ydCB7IGlzQWN0aW9uIH0gZnJvbSBcIi4uL2FwaS9hY3Rpb25cIlxuaW1wb3J0IHtcbiAgICAkbW9ieCxcbiAgICBJRGVwVHJlZU5vZGUsXG4gICAgaXNBdG9tLFxuICAgIGlzQ29tcHV0ZWRWYWx1ZSxcbiAgICBpc09ic2VydmFibGVBcnJheSxcbiAgICBpc09ic2VydmFibGVNYXAsXG4gICAgaXNPYnNlcnZhYmxlT2JqZWN0LFxuICAgIGlzUmVhY3Rpb24sXG4gICAgaXNPYnNlcnZhYmxlU2V0LFxuICAgIGRpZSxcbiAgICBpc0Z1bmN0aW9uLFxuICAgIGFsbG93U3RhdGVDaGFuZ2VzU3RhcnQsXG4gICAgdW50cmFja2VkU3RhcnQsXG4gICAgYWxsb3dTdGF0ZUNoYW5nZXNFbmQsXG4gICAgdW50cmFja2VkRW5kLFxuICAgIHN0YXJ0QmF0Y2gsXG4gICAgZW5kQmF0Y2hcbn0gZnJvbSBcIi4uL2ludGVybmFsXCJcblxuZXhwb3J0IGZ1bmN0aW9uIGdldEF0b20odGhpbmc6IGFueSwgcHJvcGVydHk/OiBQcm9wZXJ0eUtleSk6IElEZXBUcmVlTm9kZSB7XG4gICAgaWYgKHR5cGVvZiB0aGluZyA9PT0gXCJvYmplY3RcIiAmJiB0aGluZyAhPT0gbnVsbCkge1xuICAgICAgICBpZiAoaXNPYnNlcnZhYmxlQXJyYXkodGhpbmcpKSB7XG4gICAgICAgICAgICBpZiAocHJvcGVydHkgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIGRpZSgyMylcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiAodGhpbmcgYXMgYW55KVskbW9ieF0uYXRvbV9cbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNPYnNlcnZhYmxlU2V0KHRoaW5nKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaW5nLmF0b21fXG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzT2JzZXJ2YWJsZU1hcCh0aGluZykpIHtcbiAgICAgICAgICAgIGlmIChwcm9wZXJ0eSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaW5nLmtleXNBdG9tX1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3Qgb2JzZXJ2YWJsZSA9IHRoaW5nLmRhdGFfLmdldChwcm9wZXJ0eSkgfHwgdGhpbmcuaGFzTWFwXy5nZXQocHJvcGVydHkpXG4gICAgICAgICAgICBpZiAoIW9ic2VydmFibGUpIHtcbiAgICAgICAgICAgICAgICBkaWUoMjUsIHByb3BlcnR5LCBnZXREZWJ1Z05hbWUodGhpbmcpKVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG9ic2VydmFibGVcbiAgICAgICAgfVxuICAgICAgICBpZiAocHJvcGVydHkgJiYgIXRoaW5nWyRtb2J4XSkge1xuICAgICAgICAgICAgdGhpbmdbcHJvcGVydHldXG4gICAgICAgIH0gLy8gU2VlICMxMDcyXG4gICAgICAgIGlmIChpc09ic2VydmFibGVPYmplY3QodGhpbmcpKSB7XG4gICAgICAgICAgICBpZiAoIXByb3BlcnR5KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGRpZSgyNilcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IG9ic2VydmFibGUgPSAodGhpbmcgYXMgYW55KVskbW9ieF0udmFsdWVzXy5nZXQocHJvcGVydHkpXG4gICAgICAgICAgICBpZiAoIW9ic2VydmFibGUpIHtcbiAgICAgICAgICAgICAgICBkaWUoMjcsIHByb3BlcnR5LCBnZXREZWJ1Z05hbWUodGhpbmcpKVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG9ic2VydmFibGVcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNBdG9tKHRoaW5nKSB8fCBpc0NvbXB1dGVkVmFsdWUodGhpbmcpIHx8IGlzUmVhY3Rpb24odGhpbmcpKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpbmdcbiAgICAgICAgfVxuICAgIH0gZWxzZSBpZiAoaXNGdW5jdGlvbih0aGluZykpIHtcbiAgICAgICAgaWYgKGlzUmVhY3Rpb24odGhpbmdbJG1vYnhdKSkge1xuICAgICAgICAgICAgLy8gZGlzcG9zZXIgZnVuY3Rpb25cbiAgICAgICAgICAgIHJldHVybiB0aGluZ1skbW9ieF1cbiAgICAgICAgfVxuICAgIH1cbiAgICBkaWUoMjgpXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRBZG1pbmlzdHJhdGlvbih0aGluZzogYW55LCBwcm9wZXJ0eT86IHN0cmluZykge1xuICAgIGlmICghdGhpbmcpIHtcbiAgICAgICAgZGllKDI5KVxuICAgIH1cbiAgICBpZiAocHJvcGVydHkgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gZ2V0QWRtaW5pc3RyYXRpb24oZ2V0QXRvbSh0aGluZywgcHJvcGVydHkpKVxuICAgIH1cbiAgICBpZiAoaXNBdG9tKHRoaW5nKSB8fCBpc0NvbXB1dGVkVmFsdWUodGhpbmcpIHx8IGlzUmVhY3Rpb24odGhpbmcpKSB7XG4gICAgICAgIHJldHVybiB0aGluZ1xuICAgIH1cbiAgICBpZiAoaXNPYnNlcnZhYmxlTWFwKHRoaW5nKSB8fCBpc09ic2VydmFibGVTZXQodGhpbmcpKSB7XG4gICAgICAgIHJldHVybiB0aGluZ1xuICAgIH1cbiAgICBpZiAodGhpbmdbJG1vYnhdKSB7XG4gICAgICAgIHJldHVybiB0aGluZ1skbW9ieF1cbiAgICB9XG4gICAgZGllKDI0LCB0aGluZylcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldERlYnVnTmFtZSh0aGluZzogYW55LCBwcm9wZXJ0eT86IHN0cmluZyk6IHN0cmluZyB7XG4gICAgbGV0IG5hbWVkXG4gICAgaWYgKHByb3BlcnR5ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgbmFtZWQgPSBnZXRBdG9tKHRoaW5nLCBwcm9wZXJ0eSlcbiAgICB9IGVsc2UgaWYgKGlzQWN0aW9uKHRoaW5nKSkge1xuICAgICAgICByZXR1cm4gdGhpbmcubmFtZVxuICAgIH0gZWxzZSBpZiAoaXNPYnNlcnZhYmxlT2JqZWN0KHRoaW5nKSB8fCBpc09ic2VydmFibGVNYXAodGhpbmcpIHx8IGlzT2JzZXJ2YWJsZVNldCh0aGluZykpIHtcbiAgICAgICAgbmFtZWQgPSBnZXRBZG1pbmlzdHJhdGlvbih0aGluZylcbiAgICB9IGVsc2Uge1xuICAgICAgICAvLyB2YWxpZCBmb3IgYXJyYXlzIGFzIHdlbGxcbiAgICAgICAgbmFtZWQgPSBnZXRBdG9tKHRoaW5nKVxuICAgIH1cbiAgICByZXR1cm4gbmFtZWQubmFtZV9cbn1cblxuLyoqXG4gKiBIZWxwZXIgZnVuY3Rpb24gZm9yIGluaXRpYWxpemluZyBvYnNlcnZhYmxlIHN0cnVjdHVyZXMsIGl0IGFwcGxpZXM6XG4gKiAxLiBhbGxvd1N0YXRlQ2hhbmdlcyBzbyB3ZSBkb24ndCB2aW9sYXRlIGVuZm9yY2VBY3Rpb25zLlxuICogMi4gdW50cmFja2VkIHNvIHdlIGRvbid0IGFjY2lkZW50YWx5IHN1YnNjcmliZSB0byBhbnl0aGluZyBvYnNlcnZhYmxlIGFjY2Vzc2VkIGR1cmluZyBpbml0IGluIGNhc2UgdGhlIG9ic2VydmFibGUgaXMgY3JlYXRlZCBpbnNpZGUgZGVyaXZhdGlvbi5cbiAqIDMuIGJhdGNoIHRvIGF2b2lkIHN0YXRlIHZlcnNpb24gdXBkYXRlc1xuICovXG5leHBvcnQgZnVuY3Rpb24gaW5pdE9ic2VydmFibGU8VD4oY2I6ICgpID0+IFQpOiBUIHtcbiAgICBjb25zdCBkZXJpdmF0aW9uID0gdW50cmFja2VkU3RhcnQoKVxuICAgIGNvbnN0IGFsbG93U3RhdGVDaGFuZ2VzID0gYWxsb3dTdGF0ZUNoYW5nZXNTdGFydCh0cnVlKVxuICAgIHN0YXJ0QmF0Y2goKVxuICAgIHRyeSB7XG4gICAgICAgIHJldHVybiBjYigpXG4gICAgfSBmaW5hbGx5IHtcbiAgICAgICAgZW5kQmF0Y2goKVxuICAgICAgICBhbGxvd1N0YXRlQ2hhbmdlc0VuZChhbGxvd1N0YXRlQ2hhbmdlcylcbiAgICAgICAgdW50cmFja2VkRW5kKGRlcml2YXRpb24pXG4gICAgfVxufVxuIiwiaW1wb3J0IHtcbiAgICBpc0VTNk1hcCxcbiAgICBpc09ic2VydmFibGVBcnJheSxcbiAgICBpc09ic2VydmFibGVNYXAsXG4gICAgaXNFUzZTZXQsXG4gICAgaXNPYnNlcnZhYmxlU2V0LFxuICAgIGhhc1Byb3AsXG4gICAgaXNGdW5jdGlvbixcbiAgICBvYmplY3RQcm90b3R5cGVcbn0gZnJvbSBcIi4uL2ludGVybmFsXCJcblxuZGVjbGFyZSBjb25zdCBTeW1ib2xcbmNvbnN0IHRvU3RyaW5nID0gb2JqZWN0UHJvdG90eXBlLnRvU3RyaW5nXG5cbmV4cG9ydCBmdW5jdGlvbiBkZWVwRXF1YWwoYTogYW55LCBiOiBhbnksIGRlcHRoOiBudW1iZXIgPSAtMSk6IGJvb2xlYW4ge1xuICAgIHJldHVybiBlcShhLCBiLCBkZXB0aClcbn1cblxuLy8gQ29waWVkIGZyb20gaHR0cHM6Ly9naXRodWIuY29tL2phc2hrZW5hcy91bmRlcnNjb3JlL2Jsb2IvNWMyMzdhN2M2ODJmYjY4ZmQ1Mzc4MjAzZjBiZjIyZGNlMTYyNDg1NC91bmRlcnNjb3JlLmpzI0wxMTg2LUwxMjg5XG4vLyBJbnRlcm5hbCByZWN1cnNpdmUgY29tcGFyaXNvbiBmdW5jdGlvbiBmb3IgYGlzRXF1YWxgLlxuZnVuY3Rpb24gZXEoYTogYW55LCBiOiBhbnksIGRlcHRoOiBudW1iZXIsIGFTdGFjaz86IGFueVtdLCBiU3RhY2s/OiBhbnlbXSkge1xuICAgIC8vIElkZW50aWNhbCBvYmplY3RzIGFyZSBlcXVhbC4gYDAgPT09IC0wYCwgYnV0IHRoZXkgYXJlbid0IGlkZW50aWNhbC5cbiAgICAvLyBTZWUgdGhlIFtIYXJtb255IGBlZ2FsYCBwcm9wb3NhbF0oaHR0cDovL3dpa2kuZWNtYXNjcmlwdC5vcmcvZG9rdS5waHA/aWQ9aGFybW9ueTplZ2FsKS5cbiAgICBpZiAoYSA9PT0gYikge1xuICAgICAgICByZXR1cm4gYSAhPT0gMCB8fCAxIC8gYSA9PT0gMSAvIGJcbiAgICB9XG4gICAgLy8gYG51bGxgIG9yIGB1bmRlZmluZWRgIG9ubHkgZXF1YWwgdG8gaXRzZWxmIChzdHJpY3QgY29tcGFyaXNvbikuXG4gICAgaWYgKGEgPT0gbnVsbCB8fCBiID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgfVxuICAgIC8vIGBOYU5gcyBhcmUgZXF1aXZhbGVudCwgYnV0IG5vbi1yZWZsZXhpdmUuXG4gICAgaWYgKGEgIT09IGEpIHtcbiAgICAgICAgcmV0dXJuIGIgIT09IGJcbiAgICB9XG4gICAgLy8gRXhoYXVzdCBwcmltaXRpdmUgY2hlY2tzXG4gICAgY29uc3QgdHlwZSA9IHR5cGVvZiBhXG4gICAgaWYgKHR5cGUgIT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlICE9PSBcIm9iamVjdFwiICYmIHR5cGVvZiBiICE9IFwib2JqZWN0XCIpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgfVxuXG4gICAgLy8gQ29tcGFyZSBgW1tDbGFzc11dYCBuYW1lcy5cbiAgICBjb25zdCBjbGFzc05hbWUgPSB0b1N0cmluZy5jYWxsKGEpXG4gICAgaWYgKGNsYXNzTmFtZSAhPT0gdG9TdHJpbmcuY2FsbChiKSkge1xuICAgICAgICByZXR1cm4gZmFsc2VcbiAgICB9XG4gICAgc3dpdGNoIChjbGFzc05hbWUpIHtcbiAgICAgICAgLy8gU3RyaW5ncywgbnVtYmVycywgcmVndWxhciBleHByZXNzaW9ucywgZGF0ZXMsIGFuZCBib29sZWFucyBhcmUgY29tcGFyZWQgYnkgdmFsdWUuXG4gICAgICAgIGNhc2UgXCJbb2JqZWN0IFJlZ0V4cF1cIjpcbiAgICAgICAgLy8gUmVnRXhwcyBhcmUgY29lcmNlZCB0byBzdHJpbmdzIGZvciBjb21wYXJpc29uIChOb3RlOiAnJyArIC9hL2kgPT09ICcvYS9pJylcbiAgICAgICAgY2FzZSBcIltvYmplY3QgU3RyaW5nXVwiOlxuICAgICAgICAgICAgLy8gUHJpbWl0aXZlcyBhbmQgdGhlaXIgY29ycmVzcG9uZGluZyBvYmplY3Qgd3JhcHBlcnMgYXJlIGVxdWl2YWxlbnQ7IHRodXMsIGBcIjVcImAgaXNcbiAgICAgICAgICAgIC8vIGVxdWl2YWxlbnQgdG8gYG5ldyBTdHJpbmcoXCI1XCIpYC5cbiAgICAgICAgICAgIHJldHVybiBcIlwiICsgYSA9PT0gXCJcIiArIGJcbiAgICAgICAgY2FzZSBcIltvYmplY3QgTnVtYmVyXVwiOlxuICAgICAgICAgICAgLy8gYE5hTmBzIGFyZSBlcXVpdmFsZW50LCBidXQgbm9uLXJlZmxleGl2ZS5cbiAgICAgICAgICAgIC8vIE9iamVjdChOYU4pIGlzIGVxdWl2YWxlbnQgdG8gTmFOLlxuICAgICAgICAgICAgaWYgKCthICE9PSArYSkge1xuICAgICAgICAgICAgICAgIHJldHVybiArYiAhPT0gK2JcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIEFuIGBlZ2FsYCBjb21wYXJpc29uIGlzIHBlcmZvcm1lZCBmb3Igb3RoZXIgbnVtZXJpYyB2YWx1ZXMuXG4gICAgICAgICAgICByZXR1cm4gK2EgPT09IDAgPyAxIC8gK2EgPT09IDEgLyBiIDogK2EgPT09ICtiXG4gICAgICAgIGNhc2UgXCJbb2JqZWN0IERhdGVdXCI6XG4gICAgICAgIGNhc2UgXCJbb2JqZWN0IEJvb2xlYW5dXCI6XG4gICAgICAgICAgICAvLyBDb2VyY2UgZGF0ZXMgYW5kIGJvb2xlYW5zIHRvIG51bWVyaWMgcHJpbWl0aXZlIHZhbHVlcy4gRGF0ZXMgYXJlIGNvbXBhcmVkIGJ5IHRoZWlyXG4gICAgICAgICAgICAvLyBtaWxsaXNlY29uZCByZXByZXNlbnRhdGlvbnMuIE5vdGUgdGhhdCBpbnZhbGlkIGRhdGVzIHdpdGggbWlsbGlzZWNvbmQgcmVwcmVzZW50YXRpb25zXG4gICAgICAgICAgICAvLyBvZiBgTmFOYCBhcmUgbm90IGVxdWl2YWxlbnQuXG4gICAgICAgICAgICByZXR1cm4gK2EgPT09ICtiXG4gICAgICAgIGNhc2UgXCJbb2JqZWN0IFN5bWJvbF1cIjpcbiAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgdHlwZW9mIFN5bWJvbCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBTeW1ib2wudmFsdWVPZi5jYWxsKGEpID09PSBTeW1ib2wudmFsdWVPZi5jYWxsKGIpXG4gICAgICAgICAgICApXG4gICAgICAgIGNhc2UgXCJbb2JqZWN0IE1hcF1cIjpcbiAgICAgICAgY2FzZSBcIltvYmplY3QgU2V0XVwiOlxuICAgICAgICAgICAgLy8gTWFwcyBhbmQgU2V0cyBhcmUgdW53cmFwcGVkIHRvIGFycmF5cyBvZiBlbnRyeS1wYWlycywgYWRkaW5nIGFuIGluY2lkZW50YWwgbGV2ZWwuXG4gICAgICAgICAgICAvLyBIaWRlIHRoaXMgZXh0cmEgbGV2ZWwgYnkgaW5jcmVhc2luZyB0aGUgZGVwdGguXG4gICAgICAgICAgICBpZiAoZGVwdGggPj0gMCkge1xuICAgICAgICAgICAgICAgIGRlcHRoKytcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJyZWFrXG4gICAgfVxuICAgIC8vIFVud3JhcCBhbnkgd3JhcHBlZCBvYmplY3RzLlxuICAgIGEgPSB1bndyYXAoYSlcbiAgICBiID0gdW53cmFwKGIpXG5cbiAgICBjb25zdCBhcmVBcnJheXMgPSBjbGFzc05hbWUgPT09IFwiW29iamVjdCBBcnJheV1cIlxuICAgIGlmICghYXJlQXJyYXlzKSB7XG4gICAgICAgIGlmICh0eXBlb2YgYSAhPSBcIm9iamVjdFwiIHx8IHR5cGVvZiBiICE9IFwib2JqZWN0XCIpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gT2JqZWN0cyB3aXRoIGRpZmZlcmVudCBjb25zdHJ1Y3RvcnMgYXJlIG5vdCBlcXVpdmFsZW50LCBidXQgYE9iamVjdGBzIG9yIGBBcnJheWBzXG4gICAgICAgIC8vIGZyb20gZGlmZmVyZW50IGZyYW1lcyBhcmUuXG4gICAgICAgIGNvbnN0IGFDdG9yID0gYS5jb25zdHJ1Y3RvcixcbiAgICAgICAgICAgIGJDdG9yID0gYi5jb25zdHJ1Y3RvclxuICAgICAgICBpZiAoXG4gICAgICAgICAgICBhQ3RvciAhPT0gYkN0b3IgJiZcbiAgICAgICAgICAgICEoXG4gICAgICAgICAgICAgICAgaXNGdW5jdGlvbihhQ3RvcikgJiZcbiAgICAgICAgICAgICAgICBhQ3RvciBpbnN0YW5jZW9mIGFDdG9yICYmXG4gICAgICAgICAgICAgICAgaXNGdW5jdGlvbihiQ3RvcikgJiZcbiAgICAgICAgICAgICAgICBiQ3RvciBpbnN0YW5jZW9mIGJDdG9yXG4gICAgICAgICAgICApICYmXG4gICAgICAgICAgICBcImNvbnN0cnVjdG9yXCIgaW4gYSAmJlxuICAgICAgICAgICAgXCJjb25zdHJ1Y3RvclwiIGluIGJcbiAgICAgICAgKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGlmIChkZXB0aCA9PT0gMCkge1xuICAgICAgICByZXR1cm4gZmFsc2VcbiAgICB9IGVsc2UgaWYgKGRlcHRoIDwgMCkge1xuICAgICAgICBkZXB0aCA9IC0xXG4gICAgfVxuXG4gICAgLy8gQXNzdW1lIGVxdWFsaXR5IGZvciBjeWNsaWMgc3RydWN0dXJlcy4gVGhlIGFsZ29yaXRobSBmb3IgZGV0ZWN0aW5nIGN5Y2xpY1xuICAgIC8vIHN0cnVjdHVyZXMgaXMgYWRhcHRlZCBmcm9tIEVTIDUuMSBzZWN0aW9uIDE1LjEyLjMsIGFic3RyYWN0IG9wZXJhdGlvbiBgSk9gLlxuXG4gICAgLy8gSW5pdGlhbGl6aW5nIHN0YWNrIG9mIHRyYXZlcnNlZCBvYmplY3RzLlxuICAgIC8vIEl0J3MgZG9uZSBoZXJlIHNpbmNlIHdlIG9ubHkgbmVlZCB0aGVtIGZvciBvYmplY3RzIGFuZCBhcnJheXMgY29tcGFyaXNvbi5cbiAgICBhU3RhY2sgPSBhU3RhY2sgfHwgW11cbiAgICBiU3RhY2sgPSBiU3RhY2sgfHwgW11cbiAgICBsZXQgbGVuZ3RoID0gYVN0YWNrLmxlbmd0aFxuICAgIHdoaWxlIChsZW5ndGgtLSkge1xuICAgICAgICAvLyBMaW5lYXIgc2VhcmNoLiBQZXJmb3JtYW5jZSBpcyBpbnZlcnNlbHkgcHJvcG9ydGlvbmFsIHRvIHRoZSBudW1iZXIgb2ZcbiAgICAgICAgLy8gdW5pcXVlIG5lc3RlZCBzdHJ1Y3R1cmVzLlxuICAgICAgICBpZiAoYVN0YWNrW2xlbmd0aF0gPT09IGEpIHtcbiAgICAgICAgICAgIHJldHVybiBiU3RhY2tbbGVuZ3RoXSA9PT0gYlxuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8gQWRkIHRoZSBmaXJzdCBvYmplY3QgdG8gdGhlIHN0YWNrIG9mIHRyYXZlcnNlZCBvYmplY3RzLlxuICAgIGFTdGFjay5wdXNoKGEpXG4gICAgYlN0YWNrLnB1c2goYilcblxuICAgIC8vIFJlY3Vyc2l2ZWx5IGNvbXBhcmUgb2JqZWN0cyBhbmQgYXJyYXlzLlxuICAgIGlmIChhcmVBcnJheXMpIHtcbiAgICAgICAgLy8gQ29tcGFyZSBhcnJheSBsZW5ndGhzIHRvIGRldGVybWluZSBpZiBhIGRlZXAgY29tcGFyaXNvbiBpcyBuZWNlc3NhcnkuXG4gICAgICAgIGxlbmd0aCA9IGEubGVuZ3RoXG4gICAgICAgIGlmIChsZW5ndGggIT09IGIubGVuZ3RoKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgICAgfVxuICAgICAgICAvLyBEZWVwIGNvbXBhcmUgdGhlIGNvbnRlbnRzLCBpZ25vcmluZyBub24tbnVtZXJpYyBwcm9wZXJ0aWVzLlxuICAgICAgICB3aGlsZSAobGVuZ3RoLS0pIHtcbiAgICAgICAgICAgIGlmICghZXEoYVtsZW5ndGhdLCBiW2xlbmd0aF0sIGRlcHRoIC0gMSwgYVN0YWNrLCBiU3RhY2spKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgICAvLyBEZWVwIGNvbXBhcmUgb2JqZWN0cy5cbiAgICAgICAgY29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKGEpXG4gICAgICAgIGxldCBrZXlcbiAgICAgICAgbGVuZ3RoID0ga2V5cy5sZW5ndGhcbiAgICAgICAgLy8gRW5zdXJlIHRoYXQgYm90aCBvYmplY3RzIGNvbnRhaW4gdGhlIHNhbWUgbnVtYmVyIG9mIHByb3BlcnRpZXMgYmVmb3JlIGNvbXBhcmluZyBkZWVwIGVxdWFsaXR5LlxuICAgICAgICBpZiAoT2JqZWN0LmtleXMoYikubGVuZ3RoICE9PSBsZW5ndGgpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgICB9XG4gICAgICAgIHdoaWxlIChsZW5ndGgtLSkge1xuICAgICAgICAgICAgLy8gRGVlcCBjb21wYXJlIGVhY2ggbWVtYmVyXG4gICAgICAgICAgICBrZXkgPSBrZXlzW2xlbmd0aF1cbiAgICAgICAgICAgIGlmICghKGhhc1Byb3AoYiwga2V5KSAmJiBlcShhW2tleV0sIGJba2V5XSwgZGVwdGggLSAxLCBhU3RhY2ssIGJTdGFjaykpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgLy8gUmVtb3ZlIHRoZSBmaXJzdCBvYmplY3QgZnJvbSB0aGUgc3RhY2sgb2YgdHJhdmVyc2VkIG9iamVjdHMuXG4gICAgYVN0YWNrLnBvcCgpXG4gICAgYlN0YWNrLnBvcCgpXG4gICAgcmV0dXJuIHRydWVcbn1cblxuZnVuY3Rpb24gdW53cmFwKGE6IGFueSkge1xuICAgIGlmIChpc09ic2VydmFibGVBcnJheShhKSkge1xuICAgICAgICByZXR1cm4gYS5zbGljZSgpXG4gICAgfVxuICAgIGlmIChpc0VTNk1hcChhKSB8fCBpc09ic2VydmFibGVNYXAoYSkpIHtcbiAgICAgICAgcmV0dXJuIEFycmF5LmZyb20oYS5lbnRyaWVzKCkpXG4gICAgfVxuICAgIGlmIChpc0VTNlNldChhKSB8fCBpc09ic2VydmFibGVTZXQoYSkpIHtcbiAgICAgICAgcmV0dXJuIEFycmF5LmZyb20oYS5lbnRyaWVzKCkpXG4gICAgfVxuICAgIHJldHVybiBhXG59XG4iLCJleHBvcnQgZnVuY3Rpb24gbWFrZUl0ZXJhYmxlPFQ+KGl0ZXJhdG9yOiBJdGVyYXRvcjxUPik6IEl0ZXJhYmxlSXRlcmF0b3I8VD4ge1xuICAgIGl0ZXJhdG9yW1N5bWJvbC5pdGVyYXRvcl0gPSBnZXRTZWxmXG4gICAgcmV0dXJuIGl0ZXJhdG9yIGFzIGFueVxufVxuXG5mdW5jdGlvbiBnZXRTZWxmKCkge1xuICAgIHJldHVybiB0aGlzXG59XG4iLCJpbXBvcnQgeyBPYnNlcnZhYmxlT2JqZWN0QWRtaW5pc3RyYXRpb24sIGlzRnVuY3Rpb24gfSBmcm9tIFwiLi4vaW50ZXJuYWxcIlxuXG5leHBvcnQgY29uc3QgZW51bSBNYWtlUmVzdWx0IHtcbiAgICBDYW5jZWwsXG4gICAgQnJlYWssXG4gICAgQ29udGludWVcbn1cblxuZXhwb3J0IHR5cGUgQW5ub3RhdGlvbiA9IHtcbiAgICBhbm5vdGF0aW9uVHlwZV86IHN0cmluZ1xuICAgIG1ha2VfKFxuICAgICAgICBhZG06IE9ic2VydmFibGVPYmplY3RBZG1pbmlzdHJhdGlvbixcbiAgICAgICAga2V5OiBQcm9wZXJ0eUtleSxcbiAgICAgICAgZGVzY3JpcHRvcjogUHJvcGVydHlEZXNjcmlwdG9yLFxuICAgICAgICBzb3VyY2U6IG9iamVjdFxuICAgICk6IE1ha2VSZXN1bHRcbiAgICBleHRlbmRfKFxuICAgICAgICBhZG06IE9ic2VydmFibGVPYmplY3RBZG1pbmlzdHJhdGlvbixcbiAgICAgICAga2V5OiBQcm9wZXJ0eUtleSxcbiAgICAgICAgZGVzY3JpcHRvcjogUHJvcGVydHlEZXNjcmlwdG9yLFxuICAgICAgICBwcm94eVRyYXA6IGJvb2xlYW5cbiAgICApOiBib29sZWFuIHwgbnVsbFxuICAgIGRlY29yYXRlXzIwMjIzXyh2YWx1ZTogYW55LCBjb250ZXh0OiBEZWNvcmF0b3JDb250ZXh0KVxuICAgIG9wdGlvbnNfPzogYW55XG59XG5cbmV4cG9ydCB0eXBlIEFubm90YXRpb25NYXBFbnRyeSA9XG4gICAgfCBBbm5vdGF0aW9uXG4gICAgfCB0cnVlIC8qIGZvbGxvdyB0aGUgZGVmYXVsdCBkZWNvcmF0b3IsIHVzdWFsbHkgZGVlcCAqL1xuICAgIHwgZmFsc2UgLyogZG9uJ3QgZGVjb3JhdGUgdGhpcyBwcm9wZXJ0eSAqL1xuXG4vLyBBZGRpdGlvbmFsRmllbGRzIGNhbiBiZSB1c2VkIHRvIGRlY2xhcmUgYWRkaXRpb25hbCBrZXlzIHRoYXQgY2FuIGJlIHVzZWQsIGZvciBleGFtcGxlIHRvIGJlIGFibGUgdG9cbi8vIGRlY2xhcmUgYW5ub3RhdGlvbnMgZm9yIHByaXZhdGUvIHByb3RlY3RlZCBtZW1iZXJzLCBzZWUgIzIzMzlcbmV4cG9ydCB0eXBlIEFubm90YXRpb25zTWFwPFQsIEFkZGl0aW9uYWxGaWVsZHMgZXh0ZW5kcyBQcm9wZXJ0eUtleT4gPSB7XG4gICAgW1AgaW4gRXhjbHVkZTxrZXlvZiBULCBcInRvU3RyaW5nXCI+XT86IEFubm90YXRpb25NYXBFbnRyeVxufSAmIFJlY29yZDxBZGRpdGlvbmFsRmllbGRzLCBBbm5vdGF0aW9uTWFwRW50cnk+XG5cbmV4cG9ydCBmdW5jdGlvbiBpc0Fubm90YXRpb24odGhpbmc6IGFueSkge1xuICAgIHJldHVybiAoXG4gICAgICAgIC8vIENhbiBiZSBmdW5jdGlvblxuICAgICAgICB0aGluZyBpbnN0YW5jZW9mIE9iamVjdCAmJlxuICAgICAgICB0eXBlb2YgdGhpbmcuYW5ub3RhdGlvblR5cGVfID09PSBcInN0cmluZ1wiICYmXG4gICAgICAgIGlzRnVuY3Rpb24odGhpbmcubWFrZV8pICYmXG4gICAgICAgIGlzRnVuY3Rpb24odGhpbmcuZXh0ZW5kXylcbiAgICApXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc0Fubm90YXRpb25NYXBFbnRyeSh0aGluZzogYW55KSB7XG4gICAgcmV0dXJuIHR5cGVvZiB0aGluZyA9PT0gXCJib29sZWFuXCIgfHwgaXNBbm5vdGF0aW9uKHRoaW5nKVxufVxuIiwiLyoqXG4gKiAoYykgTWljaGVsIFdlc3RzdHJhdGUgMjAxNSAtIDIwMjBcbiAqIE1JVCBMaWNlbnNlZFxuICpcbiAqIFdlbGNvbWUgdG8gdGhlIG1vYnggc291cmNlcyEgVG8gZ2V0IGEgZ2xvYmFsIG92ZXJ2aWV3IG9mIGhvdyBNb2JYIGludGVybmFsbHkgd29ya3MsXG4gKiB0aGlzIGlzIGEgZ29vZCBwbGFjZSB0byBzdGFydDpcbiAqIGh0dHBzOi8vbWVkaXVtLmNvbS9AbXdlc3RzdHJhdGUvYmVjb21pbmctZnVsbHktcmVhY3RpdmUtYW4taW4tZGVwdGgtZXhwbGFuYXRpb24tb2YtbW9ic2VydmFibGUtNTU5OTUyNjJhMjU0Iy54dmJoNnFkNzRcbiAqXG4gKiBTb3VyY2UgZm9sZGVyczpcbiAqID09PT09PT09PT09PT09PVxuICpcbiAqIC0gYXBpLyAgICAgTW9zdCBvZiB0aGUgcHVibGljIHN0YXRpYyBtZXRob2RzIGV4cG9zZWQgYnkgdGhlIG1vZHVsZSBjYW4gYmUgZm91bmQgaGVyZS5cbiAqIC0gY29yZS8gICAgSW1wbGVtZW50YXRpb24gb2YgdGhlIE1vYlggYWxnb3JpdGhtOyBhdG9tcywgZGVyaXZhdGlvbnMsIHJlYWN0aW9ucywgZGVwZW5kZW5jeSB0cmVlcywgb3B0aW1pemF0aW9ucy4gQ29vbCBzdHVmZiBjYW4gYmUgZm91bmQgaGVyZS5cbiAqIC0gdHlwZXMvICAgQWxsIHRoZSBtYWdpYyB0aGF0IGlzIG5lZWQgdG8gaGF2ZSBvYnNlcnZhYmxlIG9iamVjdHMsIGFycmF5cyBhbmQgdmFsdWVzIGlzIGluIHRoaXMgZm9sZGVyLiBJbmNsdWRpbmcgdGhlIG1vZGlmaWVycyBsaWtlIGBhc0ZsYXRgLlxuICogLSB1dGlscy8gICBVdGlsaXR5IHN0dWZmLlxuICpcbiAqL1xuaW1wb3J0IHsgZGllIH0gZnJvbSBcIi4vZXJyb3JzXCJcbmltcG9ydCB7IGdldEdsb2JhbCB9IGZyb20gXCIuL3V0aWxzL2dsb2JhbFwiXG47W1wiU3ltYm9sXCIsIFwiTWFwXCIsIFwiU2V0XCJdLmZvckVhY2gobSA9PiB7XG4gICAgbGV0IGcgPSBnZXRHbG9iYWwoKVxuICAgIGlmICh0eXBlb2YgZ1ttXSA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICBkaWUoYE1vYlggcmVxdWlyZXMgZ2xvYmFsICcke219JyB0byBiZSBhdmFpbGFibGUgb3IgcG9seWZpbGxlZGApXG4gICAgfVxufSlcblxuaW1wb3J0IHsgc3B5LCBnZXREZWJ1Z05hbWUsICRtb2J4IH0gZnJvbSBcIi4vaW50ZXJuYWxcIlxuXG5leHBvcnQge1xuICAgIElPYnNlcnZhYmxlLFxuICAgIElEZXBUcmVlTm9kZSxcbiAgICBSZWFjdGlvbixcbiAgICBJUmVhY3Rpb25QdWJsaWMsXG4gICAgSVJlYWN0aW9uRGlzcG9zZXIsXG4gICAgdW50cmFja2VkLFxuICAgIElBdG9tLFxuICAgIGNyZWF0ZUF0b20sXG4gICAgc3B5LFxuICAgIElDb21wdXRlZFZhbHVlLFxuICAgIElFcXVhbHNDb21wYXJlcixcbiAgICBjb21wYXJlcixcbiAgICBJRW5oYW5jZXIsXG4gICAgSUludGVyY2VwdGFibGUsXG4gICAgSUludGVyY2VwdG9yLFxuICAgIElMaXN0ZW5hYmxlLFxuICAgIElPYmplY3RXaWxsQ2hhbmdlLFxuICAgIElPYmplY3REaWRDaGFuZ2UsXG4gICAgaXNPYnNlcnZhYmxlT2JqZWN0LFxuICAgIElWYWx1ZURpZENoYW5nZSxcbiAgICBJVmFsdWVXaWxsQ2hhbmdlLFxuICAgIElPYnNlcnZhYmxlVmFsdWUsXG4gICAgaXNPYnNlcnZhYmxlVmFsdWUgYXMgaXNCb3hlZE9ic2VydmFibGUsXG4gICAgSU9ic2VydmFibGVBcnJheSxcbiAgICBJQXJyYXlXaWxsQ2hhbmdlLFxuICAgIElBcnJheVdpbGxTcGxpY2UsXG4gICAgSUFycmF5U3BsaWNlLFxuICAgIElBcnJheVVwZGF0ZSxcbiAgICBJQXJyYXlEaWRDaGFuZ2UsXG4gICAgaXNPYnNlcnZhYmxlQXJyYXksXG4gICAgSUtleVZhbHVlTWFwLFxuICAgIE9ic2VydmFibGVNYXAsXG4gICAgSU1hcEVudHJpZXMsXG4gICAgSU1hcEVudHJ5LFxuICAgIElNYXBXaWxsQ2hhbmdlLFxuICAgIElNYXBEaWRDaGFuZ2UsXG4gICAgaXNPYnNlcnZhYmxlTWFwLFxuICAgIElPYnNlcnZhYmxlTWFwSW5pdGlhbFZhbHVlcyxcbiAgICBPYnNlcnZhYmxlU2V0LFxuICAgIGlzT2JzZXJ2YWJsZVNldCxcbiAgICBJU2V0RGlkQ2hhbmdlLFxuICAgIElTZXRXaWxsQ2hhbmdlLFxuICAgIElPYnNlcnZhYmxlU2V0SW5pdGlhbFZhbHVlcyxcbiAgICB0cmFuc2FjdGlvbixcbiAgICBvYnNlcnZhYmxlLFxuICAgIElPYnNlcnZhYmxlRmFjdG9yeSxcbiAgICBDcmVhdGVPYnNlcnZhYmxlT3B0aW9ucyxcbiAgICBjb21wdXRlZCxcbiAgICBJQ29tcHV0ZWRGYWN0b3J5LFxuICAgIGlzT2JzZXJ2YWJsZSxcbiAgICBpc09ic2VydmFibGVQcm9wLFxuICAgIGlzQ29tcHV0ZWQsXG4gICAgaXNDb21wdXRlZFByb3AsXG4gICAgZXh0ZW5kT2JzZXJ2YWJsZSxcbiAgICBvYnNlcnZlLFxuICAgIGludGVyY2VwdCxcbiAgICBhdXRvcnVuLFxuICAgIElBdXRvcnVuT3B0aW9ucyxcbiAgICByZWFjdGlvbixcbiAgICBJUmVhY3Rpb25PcHRpb25zLFxuICAgIHdoZW4sXG4gICAgSVdoZW5PcHRpb25zLFxuICAgIGFjdGlvbixcbiAgICBpc0FjdGlvbixcbiAgICBydW5JbkFjdGlvbixcbiAgICBJQWN0aW9uRmFjdG9yeSxcbiAgICBrZXlzLFxuICAgIHZhbHVlcyxcbiAgICBlbnRyaWVzLFxuICAgIHNldCxcbiAgICByZW1vdmUsXG4gICAgaGFzLFxuICAgIGdldCxcbiAgICBhcGlPd25LZXlzIGFzIG93bktleXMsXG4gICAgYXBpRGVmaW5lUHJvcGVydHkgYXMgZGVmaW5lUHJvcGVydHksXG4gICAgY29uZmlndXJlLFxuICAgIG9uQmVjb21lT2JzZXJ2ZWQsXG4gICAgb25CZWNvbWVVbm9ic2VydmVkLFxuICAgIGZsb3csXG4gICAgaXNGbG93LFxuICAgIGZsb3dSZXN1bHQsXG4gICAgRmxvd0NhbmNlbGxhdGlvbkVycm9yLFxuICAgIGlzRmxvd0NhbmNlbGxhdGlvbkVycm9yLFxuICAgIHRvSlMsXG4gICAgdHJhY2UsXG4gICAgSU9ic2VydmVyVHJlZSxcbiAgICBJRGVwZW5kZW5jeVRyZWUsXG4gICAgZ2V0RGVwZW5kZW5jeVRyZWUsXG4gICAgZ2V0T2JzZXJ2ZXJUcmVlLFxuICAgIHJlc2V0R2xvYmFsU3RhdGUgYXMgX3Jlc2V0R2xvYmFsU3RhdGUsXG4gICAgZ2V0R2xvYmFsU3RhdGUgYXMgX2dldEdsb2JhbFN0YXRlLFxuICAgIGdldERlYnVnTmFtZSxcbiAgICBnZXRBdG9tLFxuICAgIGdldEFkbWluaXN0cmF0aW9uIGFzIF9nZXRBZG1pbmlzdHJhdGlvbixcbiAgICBhbGxvd1N0YXRlQ2hhbmdlcyBhcyBfYWxsb3dTdGF0ZUNoYW5nZXMsXG4gICAgcnVuSW5BY3Rpb24gYXMgX2FsbG93U3RhdGVDaGFuZ2VzSW5zaWRlQ29tcHV0ZWQsIC8vIFRoaXMgaGFzIGJlY29tZSB0aGUgZGVmYXVsdCBiZWhhdmlvciBpbiBNb2J4IDZcbiAgICBMYW1iZGEsXG4gICAgJG1vYngsXG4gICAgaXNDb21wdXRpbmdEZXJpdmF0aW9uIGFzIF9pc0NvbXB1dGluZ0Rlcml2YXRpb24sXG4gICAgb25SZWFjdGlvbkVycm9yLFxuICAgIGludGVyY2VwdFJlYWRzIGFzIF9pbnRlcmNlcHRSZWFkcyxcbiAgICBJQ29tcHV0ZWRWYWx1ZU9wdGlvbnMsXG4gICAgSUFjdGlvblJ1bkluZm8sXG4gICAgX3N0YXJ0QWN0aW9uLFxuICAgIF9lbmRBY3Rpb24sXG4gICAgYWxsb3dTdGF0ZVJlYWRzU3RhcnQgYXMgX2FsbG93U3RhdGVSZWFkc1N0YXJ0LFxuICAgIGFsbG93U3RhdGVSZWFkc0VuZCBhcyBfYWxsb3dTdGF0ZVJlYWRzRW5kLFxuICAgIG1ha2VPYnNlcnZhYmxlLFxuICAgIG1ha2VBdXRvT2JzZXJ2YWJsZSxcbiAgICBhdXRvQWN0aW9uIGFzIF9hdXRvQWN0aW9uLFxuICAgIEFubm90YXRpb25zTWFwLFxuICAgIEFubm90YXRpb25NYXBFbnRyeSxcbiAgICBvdmVycmlkZVxufSBmcm9tIFwiLi9pbnRlcm5hbFwiXG5cbi8vIERldnRvb2xzIHN1cHBvcnRcbmRlY2xhcmUgY29uc3QgX19NT0JYX0RFVlRPT0xTX0dMT0JBTF9IT09LX186IHsgaW5qZWN0TW9ieDogKGFueSkgPT4gdm9pZCB9XG5pZiAodHlwZW9mIF9fTU9CWF9ERVZUT09MU19HTE9CQUxfSE9PS19fID09PSBcIm9iamVjdFwiKSB7XG4gICAgLy8gU2VlOiBodHRwczovL2dpdGh1Yi5jb20vYW5keWtvZy9tb2J4LWRldnRvb2xzL1xuICAgIF9fTU9CWF9ERVZUT09MU19HTE9CQUxfSE9PS19fLmluamVjdE1vYngoe1xuICAgICAgICBzcHksXG4gICAgICAgIGV4dHJhczoge1xuICAgICAgICAgICAgZ2V0RGVidWdOYW1lXG4gICAgICAgIH0sXG4gICAgICAgICRtb2J4XG4gICAgfSlcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gYmluZChmbiwgdGhpc0FyZykge1xuICByZXR1cm4gZnVuY3Rpb24gd3JhcCgpIHtcbiAgICByZXR1cm4gZm4uYXBwbHkodGhpc0FyZywgYXJndW1lbnRzKTtcbiAgfTtcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IGJpbmQgZnJvbSAnLi9oZWxwZXJzL2JpbmQuanMnO1xuXG4vLyB1dGlscyBpcyBhIGxpYnJhcnkgb2YgZ2VuZXJpYyBoZWxwZXIgZnVuY3Rpb25zIG5vbi1zcGVjaWZpYyB0byBheGlvc1xuXG5jb25zdCB7dG9TdHJpbmd9ID0gT2JqZWN0LnByb3RvdHlwZTtcbmNvbnN0IHtnZXRQcm90b3R5cGVPZn0gPSBPYmplY3Q7XG5cbmNvbnN0IGtpbmRPZiA9IChjYWNoZSA9PiB0aGluZyA9PiB7XG4gICAgY29uc3Qgc3RyID0gdG9TdHJpbmcuY2FsbCh0aGluZyk7XG4gICAgcmV0dXJuIGNhY2hlW3N0cl0gfHwgKGNhY2hlW3N0cl0gPSBzdHIuc2xpY2UoOCwgLTEpLnRvTG93ZXJDYXNlKCkpO1xufSkoT2JqZWN0LmNyZWF0ZShudWxsKSk7XG5cbmNvbnN0IGtpbmRPZlRlc3QgPSAodHlwZSkgPT4ge1xuICB0eXBlID0gdHlwZS50b0xvd2VyQ2FzZSgpO1xuICByZXR1cm4gKHRoaW5nKSA9PiBraW5kT2YodGhpbmcpID09PSB0eXBlXG59XG5cbmNvbnN0IHR5cGVPZlRlc3QgPSB0eXBlID0+IHRoaW5nID0+IHR5cGVvZiB0aGluZyA9PT0gdHlwZTtcblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhbiBBcnJheVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhbiBBcnJheSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmNvbnN0IHtpc0FycmF5fSA9IEFycmF5O1xuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIHVuZGVmaW5lZFxuICpcbiAqIEBwYXJhbSB7Kn0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdGhlIHZhbHVlIGlzIHVuZGVmaW5lZCwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmNvbnN0IGlzVW5kZWZpbmVkID0gdHlwZU9mVGVzdCgndW5kZWZpbmVkJyk7XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBCdWZmZXJcbiAqXG4gKiBAcGFyYW0geyp9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICpcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgQnVmZmVyLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNCdWZmZXIodmFsKSB7XG4gIHJldHVybiB2YWwgIT09IG51bGwgJiYgIWlzVW5kZWZpbmVkKHZhbCkgJiYgdmFsLmNvbnN0cnVjdG9yICE9PSBudWxsICYmICFpc1VuZGVmaW5lZCh2YWwuY29uc3RydWN0b3IpXG4gICAgJiYgaXNGdW5jdGlvbih2YWwuY29uc3RydWN0b3IuaXNCdWZmZXIpICYmIHZhbC5jb25zdHJ1Y3Rvci5pc0J1ZmZlcih2YWwpO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGFuIEFycmF5QnVmZmVyXG4gKlxuICogQHBhcmFtIHsqfSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhbiBBcnJheUJ1ZmZlciwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmNvbnN0IGlzQXJyYXlCdWZmZXIgPSBraW5kT2ZUZXN0KCdBcnJheUJ1ZmZlcicpO1xuXG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSB2aWV3IG9uIGFuIEFycmF5QnVmZmVyXG4gKlxuICogQHBhcmFtIHsqfSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIHZpZXcgb24gYW4gQXJyYXlCdWZmZXIsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0FycmF5QnVmZmVyVmlldyh2YWwpIHtcbiAgbGV0IHJlc3VsdDtcbiAgaWYgKCh0eXBlb2YgQXJyYXlCdWZmZXIgIT09ICd1bmRlZmluZWQnKSAmJiAoQXJyYXlCdWZmZXIuaXNWaWV3KSkge1xuICAgIHJlc3VsdCA9IEFycmF5QnVmZmVyLmlzVmlldyh2YWwpO1xuICB9IGVsc2Uge1xuICAgIHJlc3VsdCA9ICh2YWwpICYmICh2YWwuYnVmZmVyKSAmJiAoaXNBcnJheUJ1ZmZlcih2YWwuYnVmZmVyKSk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIFN0cmluZ1xuICpcbiAqIEBwYXJhbSB7Kn0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBTdHJpbmcsIG90aGVyd2lzZSBmYWxzZVxuICovXG5jb25zdCBpc1N0cmluZyA9IHR5cGVPZlRlc3QoJ3N0cmluZycpO1xuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgRnVuY3Rpb25cbiAqXG4gKiBAcGFyYW0geyp9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBGdW5jdGlvbiwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmNvbnN0IGlzRnVuY3Rpb24gPSB0eXBlT2ZUZXN0KCdmdW5jdGlvbicpO1xuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgTnVtYmVyXG4gKlxuICogQHBhcmFtIHsqfSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIE51bWJlciwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmNvbnN0IGlzTnVtYmVyID0gdHlwZU9mVGVzdCgnbnVtYmVyJyk7XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYW4gT2JqZWN0XG4gKlxuICogQHBhcmFtIHsqfSB0aGluZyBUaGUgdmFsdWUgdG8gdGVzdFxuICpcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGFuIE9iamVjdCwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmNvbnN0IGlzT2JqZWN0ID0gKHRoaW5nKSA9PiB0aGluZyAhPT0gbnVsbCAmJiB0eXBlb2YgdGhpbmcgPT09ICdvYmplY3QnO1xuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgQm9vbGVhblxuICpcbiAqIEBwYXJhbSB7Kn0gdGhpbmcgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgQm9vbGVhbiwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmNvbnN0IGlzQm9vbGVhbiA9IHRoaW5nID0+IHRoaW5nID09PSB0cnVlIHx8IHRoaW5nID09PSBmYWxzZTtcblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIHBsYWluIE9iamVjdFxuICpcbiAqIEBwYXJhbSB7Kn0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBwbGFpbiBPYmplY3QsIG90aGVyd2lzZSBmYWxzZVxuICovXG5jb25zdCBpc1BsYWluT2JqZWN0ID0gKHZhbCkgPT4ge1xuICBpZiAoa2luZE9mKHZhbCkgIT09ICdvYmplY3QnKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgY29uc3QgcHJvdG90eXBlID0gZ2V0UHJvdG90eXBlT2YodmFsKTtcbiAgcmV0dXJuIChwcm90b3R5cGUgPT09IG51bGwgfHwgcHJvdG90eXBlID09PSBPYmplY3QucHJvdG90eXBlIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihwcm90b3R5cGUpID09PSBudWxsKSAmJiAhKFN5bWJvbC50b1N0cmluZ1RhZyBpbiB2YWwpICYmICEoU3ltYm9sLml0ZXJhdG9yIGluIHZhbCk7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBEYXRlXG4gKlxuICogQHBhcmFtIHsqfSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIERhdGUsIG90aGVyd2lzZSBmYWxzZVxuICovXG5jb25zdCBpc0RhdGUgPSBraW5kT2ZUZXN0KCdEYXRlJyk7XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBGaWxlXG4gKlxuICogQHBhcmFtIHsqfSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIEZpbGUsIG90aGVyd2lzZSBmYWxzZVxuICovXG5jb25zdCBpc0ZpbGUgPSBraW5kT2ZUZXN0KCdGaWxlJyk7XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBCbG9iXG4gKlxuICogQHBhcmFtIHsqfSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIEJsb2IsIG90aGVyd2lzZSBmYWxzZVxuICovXG5jb25zdCBpc0Jsb2IgPSBraW5kT2ZUZXN0KCdCbG9iJyk7XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBGaWxlTGlzdFxuICpcbiAqIEBwYXJhbSB7Kn0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBGaWxlLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuY29uc3QgaXNGaWxlTGlzdCA9IGtpbmRPZlRlc3QoJ0ZpbGVMaXN0Jyk7XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBTdHJlYW1cbiAqXG4gKiBAcGFyYW0geyp9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICpcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgU3RyZWFtLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuY29uc3QgaXNTdHJlYW0gPSAodmFsKSA9PiBpc09iamVjdCh2YWwpICYmIGlzRnVuY3Rpb24odmFsLnBpcGUpO1xuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgRm9ybURhdGFcbiAqXG4gKiBAcGFyYW0geyp9IHRoaW5nIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYW4gRm9ybURhdGEsIG90aGVyd2lzZSBmYWxzZVxuICovXG5jb25zdCBpc0Zvcm1EYXRhID0gKHRoaW5nKSA9PiB7XG4gIGxldCBraW5kO1xuICByZXR1cm4gdGhpbmcgJiYgKFxuICAgICh0eXBlb2YgRm9ybURhdGEgPT09ICdmdW5jdGlvbicgJiYgdGhpbmcgaW5zdGFuY2VvZiBGb3JtRGF0YSkgfHwgKFxuICAgICAgaXNGdW5jdGlvbih0aGluZy5hcHBlbmQpICYmIChcbiAgICAgICAgKGtpbmQgPSBraW5kT2YodGhpbmcpKSA9PT0gJ2Zvcm1kYXRhJyB8fFxuICAgICAgICAvLyBkZXRlY3QgZm9ybS1kYXRhIGluc3RhbmNlXG4gICAgICAgIChraW5kID09PSAnb2JqZWN0JyAmJiBpc0Z1bmN0aW9uKHRoaW5nLnRvU3RyaW5nKSAmJiB0aGluZy50b1N0cmluZygpID09PSAnW29iamVjdCBGb3JtRGF0YV0nKVxuICAgICAgKVxuICAgIClcbiAgKVxufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgVVJMU2VhcmNoUGFyYW1zIG9iamVjdFxuICpcbiAqIEBwYXJhbSB7Kn0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBVUkxTZWFyY2hQYXJhbXMgb2JqZWN0LCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuY29uc3QgaXNVUkxTZWFyY2hQYXJhbXMgPSBraW5kT2ZUZXN0KCdVUkxTZWFyY2hQYXJhbXMnKTtcblxuLyoqXG4gKiBUcmltIGV4Y2VzcyB3aGl0ZXNwYWNlIG9mZiB0aGUgYmVnaW5uaW5nIGFuZCBlbmQgb2YgYSBzdHJpbmdcbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gc3RyIFRoZSBTdHJpbmcgdG8gdHJpbVxuICpcbiAqIEByZXR1cm5zIHtTdHJpbmd9IFRoZSBTdHJpbmcgZnJlZWQgb2YgZXhjZXNzIHdoaXRlc3BhY2VcbiAqL1xuY29uc3QgdHJpbSA9IChzdHIpID0+IHN0ci50cmltID9cbiAgc3RyLnRyaW0oKSA6IHN0ci5yZXBsYWNlKC9eW1xcc1xcdUZFRkZcXHhBMF0rfFtcXHNcXHVGRUZGXFx4QTBdKyQvZywgJycpO1xuXG4vKipcbiAqIEl0ZXJhdGUgb3ZlciBhbiBBcnJheSBvciBhbiBPYmplY3QgaW52b2tpbmcgYSBmdW5jdGlvbiBmb3IgZWFjaCBpdGVtLlxuICpcbiAqIElmIGBvYmpgIGlzIGFuIEFycmF5IGNhbGxiYWNrIHdpbGwgYmUgY2FsbGVkIHBhc3NpbmdcbiAqIHRoZSB2YWx1ZSwgaW5kZXgsIGFuZCBjb21wbGV0ZSBhcnJheSBmb3IgZWFjaCBpdGVtLlxuICpcbiAqIElmICdvYmonIGlzIGFuIE9iamVjdCBjYWxsYmFjayB3aWxsIGJlIGNhbGxlZCBwYXNzaW5nXG4gKiB0aGUgdmFsdWUsIGtleSwgYW5kIGNvbXBsZXRlIG9iamVjdCBmb3IgZWFjaCBwcm9wZXJ0eS5cbiAqXG4gKiBAcGFyYW0ge09iamVjdHxBcnJheX0gb2JqIFRoZSBvYmplY3QgdG8gaXRlcmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gVGhlIGNhbGxiYWNrIHRvIGludm9rZSBmb3IgZWFjaCBpdGVtXG4gKlxuICogQHBhcmFtIHtCb29sZWFufSBbYWxsT3duS2V5cyA9IGZhbHNlXVxuICogQHJldHVybnMge2FueX1cbiAqL1xuZnVuY3Rpb24gZm9yRWFjaChvYmosIGZuLCB7YWxsT3duS2V5cyA9IGZhbHNlfSA9IHt9KSB7XG4gIC8vIERvbid0IGJvdGhlciBpZiBubyB2YWx1ZSBwcm92aWRlZFxuICBpZiAob2JqID09PSBudWxsIHx8IHR5cGVvZiBvYmogPT09ICd1bmRlZmluZWQnKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgbGV0IGk7XG4gIGxldCBsO1xuXG4gIC8vIEZvcmNlIGFuIGFycmF5IGlmIG5vdCBhbHJlYWR5IHNvbWV0aGluZyBpdGVyYWJsZVxuICBpZiAodHlwZW9mIG9iaiAhPT0gJ29iamVjdCcpIHtcbiAgICAvKmVzbGludCBuby1wYXJhbS1yZWFzc2lnbjowKi9cbiAgICBvYmogPSBbb2JqXTtcbiAgfVxuXG4gIGlmIChpc0FycmF5KG9iaikpIHtcbiAgICAvLyBJdGVyYXRlIG92ZXIgYXJyYXkgdmFsdWVzXG4gICAgZm9yIChpID0gMCwgbCA9IG9iai5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgIGZuLmNhbGwobnVsbCwgb2JqW2ldLCBpLCBvYmopO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICAvLyBJdGVyYXRlIG92ZXIgb2JqZWN0IGtleXNcbiAgICBjb25zdCBrZXlzID0gYWxsT3duS2V5cyA/IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKG9iaikgOiBPYmplY3Qua2V5cyhvYmopO1xuICAgIGNvbnN0IGxlbiA9IGtleXMubGVuZ3RoO1xuICAgIGxldCBrZXk7XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgIGtleSA9IGtleXNbaV07XG4gICAgICBmbi5jYWxsKG51bGwsIG9ialtrZXldLCBrZXksIG9iaik7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGZpbmRLZXkob2JqLCBrZXkpIHtcbiAga2V5ID0ga2V5LnRvTG93ZXJDYXNlKCk7XG4gIGNvbnN0IGtleXMgPSBPYmplY3Qua2V5cyhvYmopO1xuICBsZXQgaSA9IGtleXMubGVuZ3RoO1xuICBsZXQgX2tleTtcbiAgd2hpbGUgKGktLSA+IDApIHtcbiAgICBfa2V5ID0ga2V5c1tpXTtcbiAgICBpZiAoa2V5ID09PSBfa2V5LnRvTG93ZXJDYXNlKCkpIHtcbiAgICAgIHJldHVybiBfa2V5O1xuICAgIH1cbiAgfVxuICByZXR1cm4gbnVsbDtcbn1cblxuY29uc3QgX2dsb2JhbCA9ICgoKSA9PiB7XG4gIC8qZXNsaW50IG5vLXVuZGVmOjAqL1xuICBpZiAodHlwZW9mIGdsb2JhbFRoaXMgIT09IFwidW5kZWZpbmVkXCIpIHJldHVybiBnbG9iYWxUaGlzO1xuICByZXR1cm4gdHlwZW9mIHNlbGYgIT09IFwidW5kZWZpbmVkXCIgPyBzZWxmIDogKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnID8gd2luZG93IDogZ2xvYmFsKVxufSkoKTtcblxuY29uc3QgaXNDb250ZXh0RGVmaW5lZCA9IChjb250ZXh0KSA9PiAhaXNVbmRlZmluZWQoY29udGV4dCkgJiYgY29udGV4dCAhPT0gX2dsb2JhbDtcblxuLyoqXG4gKiBBY2NlcHRzIHZhcmFyZ3MgZXhwZWN0aW5nIGVhY2ggYXJndW1lbnQgdG8gYmUgYW4gb2JqZWN0LCB0aGVuXG4gKiBpbW11dGFibHkgbWVyZ2VzIHRoZSBwcm9wZXJ0aWVzIG9mIGVhY2ggb2JqZWN0IGFuZCByZXR1cm5zIHJlc3VsdC5cbiAqXG4gKiBXaGVuIG11bHRpcGxlIG9iamVjdHMgY29udGFpbiB0aGUgc2FtZSBrZXkgdGhlIGxhdGVyIG9iamVjdCBpblxuICogdGhlIGFyZ3VtZW50cyBsaXN0IHdpbGwgdGFrZSBwcmVjZWRlbmNlLlxuICpcbiAqIEV4YW1wbGU6XG4gKlxuICogYGBganNcbiAqIHZhciByZXN1bHQgPSBtZXJnZSh7Zm9vOiAxMjN9LCB7Zm9vOiA0NTZ9KTtcbiAqIGNvbnNvbGUubG9nKHJlc3VsdC5mb28pOyAvLyBvdXRwdXRzIDQ1NlxuICogYGBgXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IG9iajEgT2JqZWN0IHRvIG1lcmdlXG4gKlxuICogQHJldHVybnMge09iamVjdH0gUmVzdWx0IG9mIGFsbCBtZXJnZSBwcm9wZXJ0aWVzXG4gKi9cbmZ1bmN0aW9uIG1lcmdlKC8qIG9iajEsIG9iajIsIG9iajMsIC4uLiAqLykge1xuICBjb25zdCB7Y2FzZWxlc3N9ID0gaXNDb250ZXh0RGVmaW5lZCh0aGlzKSAmJiB0aGlzIHx8IHt9O1xuICBjb25zdCByZXN1bHQgPSB7fTtcbiAgY29uc3QgYXNzaWduVmFsdWUgPSAodmFsLCBrZXkpID0+IHtcbiAgICBjb25zdCB0YXJnZXRLZXkgPSBjYXNlbGVzcyAmJiBmaW5kS2V5KHJlc3VsdCwga2V5KSB8fCBrZXk7XG4gICAgaWYgKGlzUGxhaW5PYmplY3QocmVzdWx0W3RhcmdldEtleV0pICYmIGlzUGxhaW5PYmplY3QodmFsKSkge1xuICAgICAgcmVzdWx0W3RhcmdldEtleV0gPSBtZXJnZShyZXN1bHRbdGFyZ2V0S2V5XSwgdmFsKTtcbiAgICB9IGVsc2UgaWYgKGlzUGxhaW5PYmplY3QodmFsKSkge1xuICAgICAgcmVzdWx0W3RhcmdldEtleV0gPSBtZXJnZSh7fSwgdmFsKTtcbiAgICB9IGVsc2UgaWYgKGlzQXJyYXkodmFsKSkge1xuICAgICAgcmVzdWx0W3RhcmdldEtleV0gPSB2YWwuc2xpY2UoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVzdWx0W3RhcmdldEtleV0gPSB2YWw7XG4gICAgfVxuICB9XG5cbiAgZm9yIChsZXQgaSA9IDAsIGwgPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgYXJndW1lbnRzW2ldICYmIGZvckVhY2goYXJndW1lbnRzW2ldLCBhc3NpZ25WYWx1ZSk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLyoqXG4gKiBFeHRlbmRzIG9iamVjdCBhIGJ5IG11dGFibHkgYWRkaW5nIHRvIGl0IHRoZSBwcm9wZXJ0aWVzIG9mIG9iamVjdCBiLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBhIFRoZSBvYmplY3QgdG8gYmUgZXh0ZW5kZWRcbiAqIEBwYXJhbSB7T2JqZWN0fSBiIFRoZSBvYmplY3QgdG8gY29weSBwcm9wZXJ0aWVzIGZyb21cbiAqIEBwYXJhbSB7T2JqZWN0fSB0aGlzQXJnIFRoZSBvYmplY3QgdG8gYmluZCBmdW5jdGlvbiB0b1xuICpcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gW2FsbE93bktleXNdXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBUaGUgcmVzdWx0aW5nIHZhbHVlIG9mIG9iamVjdCBhXG4gKi9cbmNvbnN0IGV4dGVuZCA9IChhLCBiLCB0aGlzQXJnLCB7YWxsT3duS2V5c309IHt9KSA9PiB7XG4gIGZvckVhY2goYiwgKHZhbCwga2V5KSA9PiB7XG4gICAgaWYgKHRoaXNBcmcgJiYgaXNGdW5jdGlvbih2YWwpKSB7XG4gICAgICBhW2tleV0gPSBiaW5kKHZhbCwgdGhpc0FyZyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFba2V5XSA9IHZhbDtcbiAgICB9XG4gIH0sIHthbGxPd25LZXlzfSk7XG4gIHJldHVybiBhO1xufVxuXG4vKipcbiAqIFJlbW92ZSBieXRlIG9yZGVyIG1hcmtlci4gVGhpcyBjYXRjaGVzIEVGIEJCIEJGICh0aGUgVVRGLTggQk9NKVxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBjb250ZW50IHdpdGggQk9NXG4gKlxuICogQHJldHVybnMge3N0cmluZ30gY29udGVudCB2YWx1ZSB3aXRob3V0IEJPTVxuICovXG5jb25zdCBzdHJpcEJPTSA9IChjb250ZW50KSA9PiB7XG4gIGlmIChjb250ZW50LmNoYXJDb2RlQXQoMCkgPT09IDB4RkVGRikge1xuICAgIGNvbnRlbnQgPSBjb250ZW50LnNsaWNlKDEpO1xuICB9XG4gIHJldHVybiBjb250ZW50O1xufVxuXG4vKipcbiAqIEluaGVyaXQgdGhlIHByb3RvdHlwZSBtZXRob2RzIGZyb20gb25lIGNvbnN0cnVjdG9yIGludG8gYW5vdGhlclxuICogQHBhcmFtIHtmdW5jdGlvbn0gY29uc3RydWN0b3JcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IHN1cGVyQ29uc3RydWN0b3JcbiAqIEBwYXJhbSB7b2JqZWN0fSBbcHJvcHNdXG4gKiBAcGFyYW0ge29iamVjdH0gW2Rlc2NyaXB0b3JzXVxuICpcbiAqIEByZXR1cm5zIHt2b2lkfVxuICovXG5jb25zdCBpbmhlcml0cyA9IChjb25zdHJ1Y3Rvciwgc3VwZXJDb25zdHJ1Y3RvciwgcHJvcHMsIGRlc2NyaXB0b3JzKSA9PiB7XG4gIGNvbnN0cnVjdG9yLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIGRlc2NyaXB0b3JzKTtcbiAgY29uc3RydWN0b3IucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gY29uc3RydWN0b3I7XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShjb25zdHJ1Y3RvciwgJ3N1cGVyJywge1xuICAgIHZhbHVlOiBzdXBlckNvbnN0cnVjdG9yLnByb3RvdHlwZVxuICB9KTtcbiAgcHJvcHMgJiYgT2JqZWN0LmFzc2lnbihjb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3BzKTtcbn1cblxuLyoqXG4gKiBSZXNvbHZlIG9iamVjdCB3aXRoIGRlZXAgcHJvdG90eXBlIGNoYWluIHRvIGEgZmxhdCBvYmplY3RcbiAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2VPYmogc291cmNlIG9iamVjdFxuICogQHBhcmFtIHtPYmplY3R9IFtkZXN0T2JqXVxuICogQHBhcmFtIHtGdW5jdGlvbnxCb29sZWFufSBbZmlsdGVyXVxuICogQHBhcmFtIHtGdW5jdGlvbn0gW3Byb3BGaWx0ZXJdXG4gKlxuICogQHJldHVybnMge09iamVjdH1cbiAqL1xuY29uc3QgdG9GbGF0T2JqZWN0ID0gKHNvdXJjZU9iaiwgZGVzdE9iaiwgZmlsdGVyLCBwcm9wRmlsdGVyKSA9PiB7XG4gIGxldCBwcm9wcztcbiAgbGV0IGk7XG4gIGxldCBwcm9wO1xuICBjb25zdCBtZXJnZWQgPSB7fTtcblxuICBkZXN0T2JqID0gZGVzdE9iaiB8fCB7fTtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWVxLW51bGwsZXFlcWVxXG4gIGlmIChzb3VyY2VPYmogPT0gbnVsbCkgcmV0dXJuIGRlc3RPYmo7XG5cbiAgZG8ge1xuICAgIHByb3BzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoc291cmNlT2JqKTtcbiAgICBpID0gcHJvcHMubGVuZ3RoO1xuICAgIHdoaWxlIChpLS0gPiAwKSB7XG4gICAgICBwcm9wID0gcHJvcHNbaV07XG4gICAgICBpZiAoKCFwcm9wRmlsdGVyIHx8IHByb3BGaWx0ZXIocHJvcCwgc291cmNlT2JqLCBkZXN0T2JqKSkgJiYgIW1lcmdlZFtwcm9wXSkge1xuICAgICAgICBkZXN0T2JqW3Byb3BdID0gc291cmNlT2JqW3Byb3BdO1xuICAgICAgICBtZXJnZWRbcHJvcF0gPSB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgICBzb3VyY2VPYmogPSBmaWx0ZXIgIT09IGZhbHNlICYmIGdldFByb3RvdHlwZU9mKHNvdXJjZU9iaik7XG4gIH0gd2hpbGUgKHNvdXJjZU9iaiAmJiAoIWZpbHRlciB8fCBmaWx0ZXIoc291cmNlT2JqLCBkZXN0T2JqKSkgJiYgc291cmNlT2JqICE9PSBPYmplY3QucHJvdG90eXBlKTtcblxuICByZXR1cm4gZGVzdE9iajtcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmVzIHdoZXRoZXIgYSBzdHJpbmcgZW5kcyB3aXRoIHRoZSBjaGFyYWN0ZXJzIG9mIGEgc3BlY2lmaWVkIHN0cmluZ1xuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBzdHJcbiAqIEBwYXJhbSB7U3RyaW5nfSBzZWFyY2hTdHJpbmdcbiAqIEBwYXJhbSB7TnVtYmVyfSBbcG9zaXRpb249IDBdXG4gKlxuICogQHJldHVybnMge2Jvb2xlYW59XG4gKi9cbmNvbnN0IGVuZHNXaXRoID0gKHN0ciwgc2VhcmNoU3RyaW5nLCBwb3NpdGlvbikgPT4ge1xuICBzdHIgPSBTdHJpbmcoc3RyKTtcbiAgaWYgKHBvc2l0aW9uID09PSB1bmRlZmluZWQgfHwgcG9zaXRpb24gPiBzdHIubGVuZ3RoKSB7XG4gICAgcG9zaXRpb24gPSBzdHIubGVuZ3RoO1xuICB9XG4gIHBvc2l0aW9uIC09IHNlYXJjaFN0cmluZy5sZW5ndGg7XG4gIGNvbnN0IGxhc3RJbmRleCA9IHN0ci5pbmRleE9mKHNlYXJjaFN0cmluZywgcG9zaXRpb24pO1xuICByZXR1cm4gbGFzdEluZGV4ICE9PSAtMSAmJiBsYXN0SW5kZXggPT09IHBvc2l0aW9uO1xufVxuXG5cbi8qKlxuICogUmV0dXJucyBuZXcgYXJyYXkgZnJvbSBhcnJheSBsaWtlIG9iamVjdCBvciBudWxsIGlmIGZhaWxlZFxuICpcbiAqIEBwYXJhbSB7Kn0gW3RoaW5nXVxuICpcbiAqIEByZXR1cm5zIHs/QXJyYXl9XG4gKi9cbmNvbnN0IHRvQXJyYXkgPSAodGhpbmcpID0+IHtcbiAgaWYgKCF0aGluZykgcmV0dXJuIG51bGw7XG4gIGlmIChpc0FycmF5KHRoaW5nKSkgcmV0dXJuIHRoaW5nO1xuICBsZXQgaSA9IHRoaW5nLmxlbmd0aDtcbiAgaWYgKCFpc051bWJlcihpKSkgcmV0dXJuIG51bGw7XG4gIGNvbnN0IGFyciA9IG5ldyBBcnJheShpKTtcbiAgd2hpbGUgKGktLSA+IDApIHtcbiAgICBhcnJbaV0gPSB0aGluZ1tpXTtcbiAgfVxuICByZXR1cm4gYXJyO1xufVxuXG4vKipcbiAqIENoZWNraW5nIGlmIHRoZSBVaW50OEFycmF5IGV4aXN0cyBhbmQgaWYgaXQgZG9lcywgaXQgcmV0dXJucyBhIGZ1bmN0aW9uIHRoYXQgY2hlY2tzIGlmIHRoZVxuICogdGhpbmcgcGFzc2VkIGluIGlzIGFuIGluc3RhbmNlIG9mIFVpbnQ4QXJyYXlcbiAqXG4gKiBAcGFyYW0ge1R5cGVkQXJyYXl9XG4gKlxuICogQHJldHVybnMge0FycmF5fVxuICovXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xuY29uc3QgaXNUeXBlZEFycmF5ID0gKFR5cGVkQXJyYXkgPT4ge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xuICByZXR1cm4gdGhpbmcgPT4ge1xuICAgIHJldHVybiBUeXBlZEFycmF5ICYmIHRoaW5nIGluc3RhbmNlb2YgVHlwZWRBcnJheTtcbiAgfTtcbn0pKHR5cGVvZiBVaW50OEFycmF5ICE9PSAndW5kZWZpbmVkJyAmJiBnZXRQcm90b3R5cGVPZihVaW50OEFycmF5KSk7XG5cbi8qKlxuICogRm9yIGVhY2ggZW50cnkgaW4gdGhlIG9iamVjdCwgY2FsbCB0aGUgZnVuY3Rpb24gd2l0aCB0aGUga2V5IGFuZCB2YWx1ZS5cbiAqXG4gKiBAcGFyYW0ge09iamVjdDxhbnksIGFueT59IG9iaiAtIFRoZSBvYmplY3QgdG8gaXRlcmF0ZSBvdmVyLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gLSBUaGUgZnVuY3Rpb24gdG8gY2FsbCBmb3IgZWFjaCBlbnRyeS5cbiAqXG4gKiBAcmV0dXJucyB7dm9pZH1cbiAqL1xuY29uc3QgZm9yRWFjaEVudHJ5ID0gKG9iaiwgZm4pID0+IHtcbiAgY29uc3QgZ2VuZXJhdG9yID0gb2JqICYmIG9ialtTeW1ib2wuaXRlcmF0b3JdO1xuXG4gIGNvbnN0IGl0ZXJhdG9yID0gZ2VuZXJhdG9yLmNhbGwob2JqKTtcblxuICBsZXQgcmVzdWx0O1xuXG4gIHdoaWxlICgocmVzdWx0ID0gaXRlcmF0b3IubmV4dCgpKSAmJiAhcmVzdWx0LmRvbmUpIHtcbiAgICBjb25zdCBwYWlyID0gcmVzdWx0LnZhbHVlO1xuICAgIGZuLmNhbGwob2JqLCBwYWlyWzBdLCBwYWlyWzFdKTtcbiAgfVxufVxuXG4vKipcbiAqIEl0IHRha2VzIGEgcmVndWxhciBleHByZXNzaW9uIGFuZCBhIHN0cmluZywgYW5kIHJldHVybnMgYW4gYXJyYXkgb2YgYWxsIHRoZSBtYXRjaGVzXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHJlZ0V4cCAtIFRoZSByZWd1bGFyIGV4cHJlc3Npb24gdG8gbWF0Y2ggYWdhaW5zdC5cbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHIgLSBUaGUgc3RyaW5nIHRvIHNlYXJjaC5cbiAqXG4gKiBAcmV0dXJucyB7QXJyYXk8Ym9vbGVhbj59XG4gKi9cbmNvbnN0IG1hdGNoQWxsID0gKHJlZ0V4cCwgc3RyKSA9PiB7XG4gIGxldCBtYXRjaGVzO1xuICBjb25zdCBhcnIgPSBbXTtcblxuICB3aGlsZSAoKG1hdGNoZXMgPSByZWdFeHAuZXhlYyhzdHIpKSAhPT0gbnVsbCkge1xuICAgIGFyci5wdXNoKG1hdGNoZXMpO1xuICB9XG5cbiAgcmV0dXJuIGFycjtcbn1cblxuLyogQ2hlY2tpbmcgaWYgdGhlIGtpbmRPZlRlc3QgZnVuY3Rpb24gcmV0dXJucyB0cnVlIHdoZW4gcGFzc2VkIGFuIEhUTUxGb3JtRWxlbWVudC4gKi9cbmNvbnN0IGlzSFRNTEZvcm0gPSBraW5kT2ZUZXN0KCdIVE1MRm9ybUVsZW1lbnQnKTtcblxuY29uc3QgdG9DYW1lbENhc2UgPSBzdHIgPT4ge1xuICByZXR1cm4gc3RyLnRvTG93ZXJDYXNlKCkucmVwbGFjZSgvWy1fXFxzXShbYS16XFxkXSkoXFx3KikvZyxcbiAgICBmdW5jdGlvbiByZXBsYWNlcihtLCBwMSwgcDIpIHtcbiAgICAgIHJldHVybiBwMS50b1VwcGVyQ2FzZSgpICsgcDI7XG4gICAgfVxuICApO1xufTtcblxuLyogQ3JlYXRpbmcgYSBmdW5jdGlvbiB0aGF0IHdpbGwgY2hlY2sgaWYgYW4gb2JqZWN0IGhhcyBhIHByb3BlcnR5LiAqL1xuY29uc3QgaGFzT3duUHJvcGVydHkgPSAoKHtoYXNPd25Qcm9wZXJ0eX0pID0+IChvYmosIHByb3ApID0+IGhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKSkoT2JqZWN0LnByb3RvdHlwZSk7XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBSZWdFeHAgb2JqZWN0XG4gKlxuICogQHBhcmFtIHsqfSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIFJlZ0V4cCBvYmplY3QsIG90aGVyd2lzZSBmYWxzZVxuICovXG5jb25zdCBpc1JlZ0V4cCA9IGtpbmRPZlRlc3QoJ1JlZ0V4cCcpO1xuXG5jb25zdCByZWR1Y2VEZXNjcmlwdG9ycyA9IChvYmosIHJlZHVjZXIpID0+IHtcbiAgY29uc3QgZGVzY3JpcHRvcnMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyhvYmopO1xuICBjb25zdCByZWR1Y2VkRGVzY3JpcHRvcnMgPSB7fTtcblxuICBmb3JFYWNoKGRlc2NyaXB0b3JzLCAoZGVzY3JpcHRvciwgbmFtZSkgPT4ge1xuICAgIGxldCByZXQ7XG4gICAgaWYgKChyZXQgPSByZWR1Y2VyKGRlc2NyaXB0b3IsIG5hbWUsIG9iaikpICE9PSBmYWxzZSkge1xuICAgICAgcmVkdWNlZERlc2NyaXB0b3JzW25hbWVdID0gcmV0IHx8IGRlc2NyaXB0b3I7XG4gICAgfVxuICB9KTtcblxuICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyhvYmosIHJlZHVjZWREZXNjcmlwdG9ycyk7XG59XG5cbi8qKlxuICogTWFrZXMgYWxsIG1ldGhvZHMgcmVhZC1vbmx5XG4gKiBAcGFyYW0ge09iamVjdH0gb2JqXG4gKi9cblxuY29uc3QgZnJlZXplTWV0aG9kcyA9IChvYmopID0+IHtcbiAgcmVkdWNlRGVzY3JpcHRvcnMob2JqLCAoZGVzY3JpcHRvciwgbmFtZSkgPT4ge1xuICAgIC8vIHNraXAgcmVzdHJpY3RlZCBwcm9wcyBpbiBzdHJpY3QgbW9kZVxuICAgIGlmIChpc0Z1bmN0aW9uKG9iaikgJiYgWydhcmd1bWVudHMnLCAnY2FsbGVyJywgJ2NhbGxlZSddLmluZGV4T2YobmFtZSkgIT09IC0xKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgY29uc3QgdmFsdWUgPSBvYmpbbmFtZV07XG5cbiAgICBpZiAoIWlzRnVuY3Rpb24odmFsdWUpKSByZXR1cm47XG5cbiAgICBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBmYWxzZTtcblxuICAgIGlmICgnd3JpdGFibGUnIGluIGRlc2NyaXB0b3IpIHtcbiAgICAgIGRlc2NyaXB0b3Iud3JpdGFibGUgPSBmYWxzZTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoIWRlc2NyaXB0b3Iuc2V0KSB7XG4gICAgICBkZXNjcmlwdG9yLnNldCA9ICgpID0+IHtcbiAgICAgICAgdGhyb3cgRXJyb3IoJ0NhbiBub3QgcmV3cml0ZSByZWFkLW9ubHkgbWV0aG9kIFxcJycgKyBuYW1lICsgJ1xcJycpO1xuICAgICAgfTtcbiAgICB9XG4gIH0pO1xufVxuXG5jb25zdCB0b09iamVjdFNldCA9IChhcnJheU9yU3RyaW5nLCBkZWxpbWl0ZXIpID0+IHtcbiAgY29uc3Qgb2JqID0ge307XG5cbiAgY29uc3QgZGVmaW5lID0gKGFycikgPT4ge1xuICAgIGFyci5mb3JFYWNoKHZhbHVlID0+IHtcbiAgICAgIG9ialt2YWx1ZV0gPSB0cnVlO1xuICAgIH0pO1xuICB9XG5cbiAgaXNBcnJheShhcnJheU9yU3RyaW5nKSA/IGRlZmluZShhcnJheU9yU3RyaW5nKSA6IGRlZmluZShTdHJpbmcoYXJyYXlPclN0cmluZykuc3BsaXQoZGVsaW1pdGVyKSk7XG5cbiAgcmV0dXJuIG9iajtcbn1cblxuY29uc3Qgbm9vcCA9ICgpID0+IHt9XG5cbmNvbnN0IHRvRmluaXRlTnVtYmVyID0gKHZhbHVlLCBkZWZhdWx0VmFsdWUpID0+IHtcbiAgdmFsdWUgPSArdmFsdWU7XG4gIHJldHVybiBOdW1iZXIuaXNGaW5pdGUodmFsdWUpID8gdmFsdWUgOiBkZWZhdWx0VmFsdWU7XG59XG5cbmNvbnN0IEFMUEhBID0gJ2FiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6J1xuXG5jb25zdCBESUdJVCA9ICcwMTIzNDU2Nzg5JztcblxuY29uc3QgQUxQSEFCRVQgPSB7XG4gIERJR0lULFxuICBBTFBIQSxcbiAgQUxQSEFfRElHSVQ6IEFMUEhBICsgQUxQSEEudG9VcHBlckNhc2UoKSArIERJR0lUXG59XG5cbmNvbnN0IGdlbmVyYXRlU3RyaW5nID0gKHNpemUgPSAxNiwgYWxwaGFiZXQgPSBBTFBIQUJFVC5BTFBIQV9ESUdJVCkgPT4ge1xuICBsZXQgc3RyID0gJyc7XG4gIGNvbnN0IHtsZW5ndGh9ID0gYWxwaGFiZXQ7XG4gIHdoaWxlIChzaXplLS0pIHtcbiAgICBzdHIgKz0gYWxwaGFiZXRbTWF0aC5yYW5kb20oKSAqIGxlbmd0aHwwXVxuICB9XG5cbiAgcmV0dXJuIHN0cjtcbn1cblxuLyoqXG4gKiBJZiB0aGUgdGhpbmcgaXMgYSBGb3JtRGF0YSBvYmplY3QsIHJldHVybiB0cnVlLCBvdGhlcndpc2UgcmV0dXJuIGZhbHNlLlxuICpcbiAqIEBwYXJhbSB7dW5rbm93bn0gdGhpbmcgLSBUaGUgdGhpbmcgdG8gY2hlY2suXG4gKlxuICogQHJldHVybnMge2Jvb2xlYW59XG4gKi9cbmZ1bmN0aW9uIGlzU3BlY0NvbXBsaWFudEZvcm0odGhpbmcpIHtcbiAgcmV0dXJuICEhKHRoaW5nICYmIGlzRnVuY3Rpb24odGhpbmcuYXBwZW5kKSAmJiB0aGluZ1tTeW1ib2wudG9TdHJpbmdUYWddID09PSAnRm9ybURhdGEnICYmIHRoaW5nW1N5bWJvbC5pdGVyYXRvcl0pO1xufVxuXG5jb25zdCB0b0pTT05PYmplY3QgPSAob2JqKSA9PiB7XG4gIGNvbnN0IHN0YWNrID0gbmV3IEFycmF5KDEwKTtcblxuICBjb25zdCB2aXNpdCA9IChzb3VyY2UsIGkpID0+IHtcblxuICAgIGlmIChpc09iamVjdChzb3VyY2UpKSB7XG4gICAgICBpZiAoc3RhY2suaW5kZXhPZihzb3VyY2UpID49IDApIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZighKCd0b0pTT04nIGluIHNvdXJjZSkpIHtcbiAgICAgICAgc3RhY2tbaV0gPSBzb3VyY2U7XG4gICAgICAgIGNvbnN0IHRhcmdldCA9IGlzQXJyYXkoc291cmNlKSA/IFtdIDoge307XG5cbiAgICAgICAgZm9yRWFjaChzb3VyY2UsICh2YWx1ZSwga2V5KSA9PiB7XG4gICAgICAgICAgY29uc3QgcmVkdWNlZFZhbHVlID0gdmlzaXQodmFsdWUsIGkgKyAxKTtcbiAgICAgICAgICAhaXNVbmRlZmluZWQocmVkdWNlZFZhbHVlKSAmJiAodGFyZ2V0W2tleV0gPSByZWR1Y2VkVmFsdWUpO1xuICAgICAgICB9KTtcblxuICAgICAgICBzdGFja1tpXSA9IHVuZGVmaW5lZDtcblxuICAgICAgICByZXR1cm4gdGFyZ2V0O1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBzb3VyY2U7XG4gIH1cblxuICByZXR1cm4gdmlzaXQob2JqLCAwKTtcbn1cblxuY29uc3QgaXNBc3luY0ZuID0ga2luZE9mVGVzdCgnQXN5bmNGdW5jdGlvbicpO1xuXG5jb25zdCBpc1RoZW5hYmxlID0gKHRoaW5nKSA9PlxuICB0aGluZyAmJiAoaXNPYmplY3QodGhpbmcpIHx8IGlzRnVuY3Rpb24odGhpbmcpKSAmJiBpc0Z1bmN0aW9uKHRoaW5nLnRoZW4pICYmIGlzRnVuY3Rpb24odGhpbmcuY2F0Y2gpO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIGlzQXJyYXksXG4gIGlzQXJyYXlCdWZmZXIsXG4gIGlzQnVmZmVyLFxuICBpc0Zvcm1EYXRhLFxuICBpc0FycmF5QnVmZmVyVmlldyxcbiAgaXNTdHJpbmcsXG4gIGlzTnVtYmVyLFxuICBpc0Jvb2xlYW4sXG4gIGlzT2JqZWN0LFxuICBpc1BsYWluT2JqZWN0LFxuICBpc1VuZGVmaW5lZCxcbiAgaXNEYXRlLFxuICBpc0ZpbGUsXG4gIGlzQmxvYixcbiAgaXNSZWdFeHAsXG4gIGlzRnVuY3Rpb24sXG4gIGlzU3RyZWFtLFxuICBpc1VSTFNlYXJjaFBhcmFtcyxcbiAgaXNUeXBlZEFycmF5LFxuICBpc0ZpbGVMaXN0LFxuICBmb3JFYWNoLFxuICBtZXJnZSxcbiAgZXh0ZW5kLFxuICB0cmltLFxuICBzdHJpcEJPTSxcbiAgaW5oZXJpdHMsXG4gIHRvRmxhdE9iamVjdCxcbiAga2luZE9mLFxuICBraW5kT2ZUZXN0LFxuICBlbmRzV2l0aCxcbiAgdG9BcnJheSxcbiAgZm9yRWFjaEVudHJ5LFxuICBtYXRjaEFsbCxcbiAgaXNIVE1MRm9ybSxcbiAgaGFzT3duUHJvcGVydHksXG4gIGhhc093blByb3A6IGhhc093blByb3BlcnR5LCAvLyBhbiBhbGlhcyB0byBhdm9pZCBFU0xpbnQgbm8tcHJvdG90eXBlLWJ1aWx0aW5zIGRldGVjdGlvblxuICByZWR1Y2VEZXNjcmlwdG9ycyxcbiAgZnJlZXplTWV0aG9kcyxcbiAgdG9PYmplY3RTZXQsXG4gIHRvQ2FtZWxDYXNlLFxuICBub29wLFxuICB0b0Zpbml0ZU51bWJlcixcbiAgZmluZEtleSxcbiAgZ2xvYmFsOiBfZ2xvYmFsLFxuICBpc0NvbnRleHREZWZpbmVkLFxuICBBTFBIQUJFVCxcbiAgZ2VuZXJhdGVTdHJpbmcsXG4gIGlzU3BlY0NvbXBsaWFudEZvcm0sXG4gIHRvSlNPTk9iamVjdCxcbiAgaXNBc3luY0ZuLFxuICBpc1RoZW5hYmxlXG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgdXRpbHMgZnJvbSAnLi4vdXRpbHMuanMnO1xuXG4vKipcbiAqIENyZWF0ZSBhbiBFcnJvciB3aXRoIHRoZSBzcGVjaWZpZWQgbWVzc2FnZSwgY29uZmlnLCBlcnJvciBjb2RlLCByZXF1ZXN0IGFuZCByZXNwb25zZS5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gbWVzc2FnZSBUaGUgZXJyb3IgbWVzc2FnZS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBbY29kZV0gVGhlIGVycm9yIGNvZGUgKGZvciBleGFtcGxlLCAnRUNPTk5BQk9SVEVEJykuXG4gKiBAcGFyYW0ge09iamVjdH0gW2NvbmZpZ10gVGhlIGNvbmZpZy5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbcmVxdWVzdF0gVGhlIHJlcXVlc3QuXG4gKiBAcGFyYW0ge09iamVjdH0gW3Jlc3BvbnNlXSBUaGUgcmVzcG9uc2UuXG4gKlxuICogQHJldHVybnMge0Vycm9yfSBUaGUgY3JlYXRlZCBlcnJvci5cbiAqL1xuZnVuY3Rpb24gQXhpb3NFcnJvcihtZXNzYWdlLCBjb2RlLCBjb25maWcsIHJlcXVlc3QsIHJlc3BvbnNlKSB7XG4gIEVycm9yLmNhbGwodGhpcyk7XG5cbiAgaWYgKEVycm9yLmNhcHR1cmVTdGFja1RyYWNlKSB7XG4gICAgRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UodGhpcywgdGhpcy5jb25zdHJ1Y3Rvcik7XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5zdGFjayA9IChuZXcgRXJyb3IoKSkuc3RhY2s7XG4gIH1cblxuICB0aGlzLm1lc3NhZ2UgPSBtZXNzYWdlO1xuICB0aGlzLm5hbWUgPSAnQXhpb3NFcnJvcic7XG4gIGNvZGUgJiYgKHRoaXMuY29kZSA9IGNvZGUpO1xuICBjb25maWcgJiYgKHRoaXMuY29uZmlnID0gY29uZmlnKTtcbiAgcmVxdWVzdCAmJiAodGhpcy5yZXF1ZXN0ID0gcmVxdWVzdCk7XG4gIHJlc3BvbnNlICYmICh0aGlzLnJlc3BvbnNlID0gcmVzcG9uc2UpO1xufVxuXG51dGlscy5pbmhlcml0cyhBeGlvc0Vycm9yLCBFcnJvciwge1xuICB0b0pTT046IGZ1bmN0aW9uIHRvSlNPTigpIHtcbiAgICByZXR1cm4ge1xuICAgICAgLy8gU3RhbmRhcmRcbiAgICAgIG1lc3NhZ2U6IHRoaXMubWVzc2FnZSxcbiAgICAgIG5hbWU6IHRoaXMubmFtZSxcbiAgICAgIC8vIE1pY3Jvc29mdFxuICAgICAgZGVzY3JpcHRpb246IHRoaXMuZGVzY3JpcHRpb24sXG4gICAgICBudW1iZXI6IHRoaXMubnVtYmVyLFxuICAgICAgLy8gTW96aWxsYVxuICAgICAgZmlsZU5hbWU6IHRoaXMuZmlsZU5hbWUsXG4gICAgICBsaW5lTnVtYmVyOiB0aGlzLmxpbmVOdW1iZXIsXG4gICAgICBjb2x1bW5OdW1iZXI6IHRoaXMuY29sdW1uTnVtYmVyLFxuICAgICAgc3RhY2s6IHRoaXMuc3RhY2ssXG4gICAgICAvLyBBeGlvc1xuICAgICAgY29uZmlnOiB1dGlscy50b0pTT05PYmplY3QodGhpcy5jb25maWcpLFxuICAgICAgY29kZTogdGhpcy5jb2RlLFxuICAgICAgc3RhdHVzOiB0aGlzLnJlc3BvbnNlICYmIHRoaXMucmVzcG9uc2Uuc3RhdHVzID8gdGhpcy5yZXNwb25zZS5zdGF0dXMgOiBudWxsXG4gICAgfTtcbiAgfVxufSk7XG5cbmNvbnN0IHByb3RvdHlwZSA9IEF4aW9zRXJyb3IucHJvdG90eXBlO1xuY29uc3QgZGVzY3JpcHRvcnMgPSB7fTtcblxuW1xuICAnRVJSX0JBRF9PUFRJT05fVkFMVUUnLFxuICAnRVJSX0JBRF9PUFRJT04nLFxuICAnRUNPTk5BQk9SVEVEJyxcbiAgJ0VUSU1FRE9VVCcsXG4gICdFUlJfTkVUV09SSycsXG4gICdFUlJfRlJfVE9PX01BTllfUkVESVJFQ1RTJyxcbiAgJ0VSUl9ERVBSRUNBVEVEJyxcbiAgJ0VSUl9CQURfUkVTUE9OU0UnLFxuICAnRVJSX0JBRF9SRVFVRVNUJyxcbiAgJ0VSUl9DQU5DRUxFRCcsXG4gICdFUlJfTk9UX1NVUFBPUlQnLFxuICAnRVJSX0lOVkFMSURfVVJMJ1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcbl0uZm9yRWFjaChjb2RlID0+IHtcbiAgZGVzY3JpcHRvcnNbY29kZV0gPSB7dmFsdWU6IGNvZGV9O1xufSk7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKEF4aW9zRXJyb3IsIGRlc2NyaXB0b3JzKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShwcm90b3R5cGUsICdpc0F4aW9zRXJyb3InLCB7dmFsdWU6IHRydWV9KTtcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcbkF4aW9zRXJyb3IuZnJvbSA9IChlcnJvciwgY29kZSwgY29uZmlnLCByZXF1ZXN0LCByZXNwb25zZSwgY3VzdG9tUHJvcHMpID0+IHtcbiAgY29uc3QgYXhpb3NFcnJvciA9IE9iamVjdC5jcmVhdGUocHJvdG90eXBlKTtcblxuICB1dGlscy50b0ZsYXRPYmplY3QoZXJyb3IsIGF4aW9zRXJyb3IsIGZ1bmN0aW9uIGZpbHRlcihvYmopIHtcbiAgICByZXR1cm4gb2JqICE9PSBFcnJvci5wcm90b3R5cGU7XG4gIH0sIHByb3AgPT4ge1xuICAgIHJldHVybiBwcm9wICE9PSAnaXNBeGlvc0Vycm9yJztcbiAgfSk7XG5cbiAgQXhpb3NFcnJvci5jYWxsKGF4aW9zRXJyb3IsIGVycm9yLm1lc3NhZ2UsIGNvZGUsIGNvbmZpZywgcmVxdWVzdCwgcmVzcG9uc2UpO1xuXG4gIGF4aW9zRXJyb3IuY2F1c2UgPSBlcnJvcjtcblxuICBheGlvc0Vycm9yLm5hbWUgPSBlcnJvci5uYW1lO1xuXG4gIGN1c3RvbVByb3BzICYmIE9iamVjdC5hc3NpZ24oYXhpb3NFcnJvciwgY3VzdG9tUHJvcHMpO1xuXG4gIHJldHVybiBheGlvc0Vycm9yO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgQXhpb3NFcnJvcjtcbiIsIi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBzdHJpY3RcbmV4cG9ydCBkZWZhdWx0IG51bGw7XG4iLCIndXNlIHN0cmljdCc7XG5cbmltcG9ydCB1dGlscyBmcm9tICcuLi91dGlscy5qcyc7XG5pbXBvcnQgQXhpb3NFcnJvciBmcm9tICcuLi9jb3JlL0F4aW9zRXJyb3IuanMnO1xuLy8gdGVtcG9yYXJ5IGhvdGZpeCB0byBhdm9pZCBjaXJjdWxhciByZWZlcmVuY2VzIHVudGlsIEF4aW9zVVJMU2VhcmNoUGFyYW1zIGlzIHJlZmFjdG9yZWRcbmltcG9ydCBQbGF0Zm9ybUZvcm1EYXRhIGZyb20gJy4uL3BsYXRmb3JtL25vZGUvY2xhc3Nlcy9Gb3JtRGF0YS5qcyc7XG5cbi8qKlxuICogRGV0ZXJtaW5lcyBpZiB0aGUgZ2l2ZW4gdGhpbmcgaXMgYSBhcnJheSBvciBqcyBvYmplY3QuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHRoaW5nIC0gVGhlIG9iamVjdCBvciBhcnJheSB0byBiZSB2aXNpdGVkLlxuICpcbiAqIEByZXR1cm5zIHtib29sZWFufVxuICovXG5mdW5jdGlvbiBpc1Zpc2l0YWJsZSh0aGluZykge1xuICByZXR1cm4gdXRpbHMuaXNQbGFpbk9iamVjdCh0aGluZykgfHwgdXRpbHMuaXNBcnJheSh0aGluZyk7XG59XG5cbi8qKlxuICogSXQgcmVtb3ZlcyB0aGUgYnJhY2tldHMgZnJvbSB0aGUgZW5kIG9mIGEgc3RyaW5nXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGtleSAtIFRoZSBrZXkgb2YgdGhlIHBhcmFtZXRlci5cbiAqXG4gKiBAcmV0dXJucyB7c3RyaW5nfSB0aGUga2V5IHdpdGhvdXQgdGhlIGJyYWNrZXRzLlxuICovXG5mdW5jdGlvbiByZW1vdmVCcmFja2V0cyhrZXkpIHtcbiAgcmV0dXJuIHV0aWxzLmVuZHNXaXRoKGtleSwgJ1tdJykgPyBrZXkuc2xpY2UoMCwgLTIpIDoga2V5O1xufVxuXG4vKipcbiAqIEl0IHRha2VzIGEgcGF0aCwgYSBrZXksIGFuZCBhIGJvb2xlYW4sIGFuZCByZXR1cm5zIGEgc3RyaW5nXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHBhdGggLSBUaGUgcGF0aCB0byB0aGUgY3VycmVudCBrZXkuXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IC0gVGhlIGtleSBvZiB0aGUgY3VycmVudCBvYmplY3QgYmVpbmcgaXRlcmF0ZWQgb3Zlci5cbiAqIEBwYXJhbSB7c3RyaW5nfSBkb3RzIC0gSWYgdHJ1ZSwgdGhlIGtleSB3aWxsIGJlIHJlbmRlcmVkIHdpdGggZG90cyBpbnN0ZWFkIG9mIGJyYWNrZXRzLlxuICpcbiAqIEByZXR1cm5zIHtzdHJpbmd9IFRoZSBwYXRoIHRvIHRoZSBjdXJyZW50IGtleS5cbiAqL1xuZnVuY3Rpb24gcmVuZGVyS2V5KHBhdGgsIGtleSwgZG90cykge1xuICBpZiAoIXBhdGgpIHJldHVybiBrZXk7XG4gIHJldHVybiBwYXRoLmNvbmNhdChrZXkpLm1hcChmdW5jdGlvbiBlYWNoKHRva2VuLCBpKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gICAgdG9rZW4gPSByZW1vdmVCcmFja2V0cyh0b2tlbik7XG4gICAgcmV0dXJuICFkb3RzICYmIGkgPyAnWycgKyB0b2tlbiArICddJyA6IHRva2VuO1xuICB9KS5qb2luKGRvdHMgPyAnLicgOiAnJyk7XG59XG5cbi8qKlxuICogSWYgdGhlIGFycmF5IGlzIGFuIGFycmF5IGFuZCBub25lIG9mIGl0cyBlbGVtZW50cyBhcmUgdmlzaXRhYmxlLCB0aGVuIGl0J3MgYSBmbGF0IGFycmF5LlxuICpcbiAqIEBwYXJhbSB7QXJyYXk8YW55Pn0gYXJyIC0gVGhlIGFycmF5IHRvIGNoZWNrXG4gKlxuICogQHJldHVybnMge2Jvb2xlYW59XG4gKi9cbmZ1bmN0aW9uIGlzRmxhdEFycmF5KGFycikge1xuICByZXR1cm4gdXRpbHMuaXNBcnJheShhcnIpICYmICFhcnIuc29tZShpc1Zpc2l0YWJsZSk7XG59XG5cbmNvbnN0IHByZWRpY2F0ZXMgPSB1dGlscy50b0ZsYXRPYmplY3QodXRpbHMsIHt9LCBudWxsLCBmdW5jdGlvbiBmaWx0ZXIocHJvcCkge1xuICByZXR1cm4gL15pc1tBLVpdLy50ZXN0KHByb3ApO1xufSk7XG5cbi8qKlxuICogQ29udmVydCBhIGRhdGEgb2JqZWN0IHRvIEZvcm1EYXRhXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IG9ialxuICogQHBhcmFtIHs/T2JqZWN0fSBbZm9ybURhdGFdXG4gKiBAcGFyYW0gez9PYmplY3R9IFtvcHRpb25zXVxuICogQHBhcmFtIHtGdW5jdGlvbn0gW29wdGlvbnMudmlzaXRvcl1cbiAqIEBwYXJhbSB7Qm9vbGVhbn0gW29wdGlvbnMubWV0YVRva2VucyA9IHRydWVdXG4gKiBAcGFyYW0ge0Jvb2xlYW59IFtvcHRpb25zLmRvdHMgPSBmYWxzZV1cbiAqIEBwYXJhbSB7P0Jvb2xlYW59IFtvcHRpb25zLmluZGV4ZXMgPSBmYWxzZV1cbiAqXG4gKiBAcmV0dXJucyB7T2JqZWN0fVxuICoqL1xuXG4vKipcbiAqIEl0IGNvbnZlcnRzIGFuIG9iamVjdCBpbnRvIGEgRm9ybURhdGEgb2JqZWN0XG4gKlxuICogQHBhcmFtIHtPYmplY3Q8YW55LCBhbnk+fSBvYmogLSBUaGUgb2JqZWN0IHRvIGNvbnZlcnQgdG8gZm9ybSBkYXRhLlxuICogQHBhcmFtIHtzdHJpbmd9IGZvcm1EYXRhIC0gVGhlIEZvcm1EYXRhIG9iamVjdCB0byBhcHBlbmQgdG8uXG4gKiBAcGFyYW0ge09iamVjdDxzdHJpbmcsIGFueT59IG9wdGlvbnNcbiAqXG4gKiBAcmV0dXJuc1xuICovXG5mdW5jdGlvbiB0b0Zvcm1EYXRhKG9iaiwgZm9ybURhdGEsIG9wdGlvbnMpIHtcbiAgaWYgKCF1dGlscy5pc09iamVjdChvYmopKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcigndGFyZ2V0IG11c3QgYmUgYW4gb2JqZWN0Jyk7XG4gIH1cblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgZm9ybURhdGEgPSBmb3JtRGF0YSB8fCBuZXcgKFBsYXRmb3JtRm9ybURhdGEgfHwgRm9ybURhdGEpKCk7XG5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gIG9wdGlvbnMgPSB1dGlscy50b0ZsYXRPYmplY3Qob3B0aW9ucywge1xuICAgIG1ldGFUb2tlbnM6IHRydWUsXG4gICAgZG90czogZmFsc2UsXG4gICAgaW5kZXhlczogZmFsc2VcbiAgfSwgZmFsc2UsIGZ1bmN0aW9uIGRlZmluZWQob3B0aW9uLCBzb3VyY2UpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tZXEtbnVsbCxlcWVxZXFcbiAgICByZXR1cm4gIXV0aWxzLmlzVW5kZWZpbmVkKHNvdXJjZVtvcHRpb25dKTtcbiAgfSk7XG5cbiAgY29uc3QgbWV0YVRva2VucyA9IG9wdGlvbnMubWV0YVRva2VucztcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVzZS1iZWZvcmUtZGVmaW5lXG4gIGNvbnN0IHZpc2l0b3IgPSBvcHRpb25zLnZpc2l0b3IgfHwgZGVmYXVsdFZpc2l0b3I7XG4gIGNvbnN0IGRvdHMgPSBvcHRpb25zLmRvdHM7XG4gIGNvbnN0IGluZGV4ZXMgPSBvcHRpb25zLmluZGV4ZXM7XG4gIGNvbnN0IF9CbG9iID0gb3B0aW9ucy5CbG9iIHx8IHR5cGVvZiBCbG9iICE9PSAndW5kZWZpbmVkJyAmJiBCbG9iO1xuICBjb25zdCB1c2VCbG9iID0gX0Jsb2IgJiYgdXRpbHMuaXNTcGVjQ29tcGxpYW50Rm9ybShmb3JtRGF0YSk7XG5cbiAgaWYgKCF1dGlscy5pc0Z1bmN0aW9uKHZpc2l0b3IpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcigndmlzaXRvciBtdXN0IGJlIGEgZnVuY3Rpb24nKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNvbnZlcnRWYWx1ZSh2YWx1ZSkge1xuICAgIGlmICh2YWx1ZSA9PT0gbnVsbCkgcmV0dXJuICcnO1xuXG4gICAgaWYgKHV0aWxzLmlzRGF0ZSh2YWx1ZSkpIHtcbiAgICAgIHJldHVybiB2YWx1ZS50b0lTT1N0cmluZygpO1xuICAgIH1cblxuICAgIGlmICghdXNlQmxvYiAmJiB1dGlscy5pc0Jsb2IodmFsdWUpKSB7XG4gICAgICB0aHJvdyBuZXcgQXhpb3NFcnJvcignQmxvYiBpcyBub3Qgc3VwcG9ydGVkLiBVc2UgYSBCdWZmZXIgaW5zdGVhZC4nKTtcbiAgICB9XG5cbiAgICBpZiAodXRpbHMuaXNBcnJheUJ1ZmZlcih2YWx1ZSkgfHwgdXRpbHMuaXNUeXBlZEFycmF5KHZhbHVlKSkge1xuICAgICAgcmV0dXJuIHVzZUJsb2IgJiYgdHlwZW9mIEJsb2IgPT09ICdmdW5jdGlvbicgPyBuZXcgQmxvYihbdmFsdWVdKSA6IEJ1ZmZlci5mcm9tKHZhbHVlKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cblxuICAvKipcbiAgICogRGVmYXVsdCB2aXNpdG9yLlxuICAgKlxuICAgKiBAcGFyYW0geyp9IHZhbHVlXG4gICAqIEBwYXJhbSB7U3RyaW5nfE51bWJlcn0ga2V5XG4gICAqIEBwYXJhbSB7QXJyYXk8U3RyaW5nfE51bWJlcj59IHBhdGhcbiAgICogQHRoaXMge0Zvcm1EYXRhfVxuICAgKlxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gcmV0dXJuIHRydWUgdG8gdmlzaXQgdGhlIGVhY2ggcHJvcCBvZiB0aGUgdmFsdWUgcmVjdXJzaXZlbHlcbiAgICovXG4gIGZ1bmN0aW9uIGRlZmF1bHRWaXNpdG9yKHZhbHVlLCBrZXksIHBhdGgpIHtcbiAgICBsZXQgYXJyID0gdmFsdWU7XG5cbiAgICBpZiAodmFsdWUgJiYgIXBhdGggJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0Jykge1xuICAgICAgaWYgKHV0aWxzLmVuZHNXaXRoKGtleSwgJ3t9JykpIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gICAgICAgIGtleSA9IG1ldGFUb2tlbnMgPyBrZXkgOiBrZXkuc2xpY2UoMCwgLTIpO1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgICAgICAgdmFsdWUgPSBKU09OLnN0cmluZ2lmeSh2YWx1ZSk7XG4gICAgICB9IGVsc2UgaWYgKFxuICAgICAgICAodXRpbHMuaXNBcnJheSh2YWx1ZSkgJiYgaXNGbGF0QXJyYXkodmFsdWUpKSB8fFxuICAgICAgICAoKHV0aWxzLmlzRmlsZUxpc3QodmFsdWUpIHx8IHV0aWxzLmVuZHNXaXRoKGtleSwgJ1tdJykpICYmIChhcnIgPSB1dGlscy50b0FycmF5KHZhbHVlKSlcbiAgICAgICAgKSkge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgICAgICAga2V5ID0gcmVtb3ZlQnJhY2tldHMoa2V5KTtcblxuICAgICAgICBhcnIuZm9yRWFjaChmdW5jdGlvbiBlYWNoKGVsLCBpbmRleCkge1xuICAgICAgICAgICEodXRpbHMuaXNVbmRlZmluZWQoZWwpIHx8IGVsID09PSBudWxsKSAmJiBmb3JtRGF0YS5hcHBlbmQoXG4gICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tbmVzdGVkLXRlcm5hcnlcbiAgICAgICAgICAgIGluZGV4ZXMgPT09IHRydWUgPyByZW5kZXJLZXkoW2tleV0sIGluZGV4LCBkb3RzKSA6IChpbmRleGVzID09PSBudWxsID8ga2V5IDoga2V5ICsgJ1tdJyksXG4gICAgICAgICAgICBjb252ZXJ0VmFsdWUoZWwpXG4gICAgICAgICAgKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoaXNWaXNpdGFibGUodmFsdWUpKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICBmb3JtRGF0YS5hcHBlbmQocmVuZGVyS2V5KHBhdGgsIGtleSwgZG90cyksIGNvbnZlcnRWYWx1ZSh2YWx1ZSkpO1xuXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgY29uc3Qgc3RhY2sgPSBbXTtcblxuICBjb25zdCBleHBvc2VkSGVscGVycyA9IE9iamVjdC5hc3NpZ24ocHJlZGljYXRlcywge1xuICAgIGRlZmF1bHRWaXNpdG9yLFxuICAgIGNvbnZlcnRWYWx1ZSxcbiAgICBpc1Zpc2l0YWJsZVxuICB9KTtcblxuICBmdW5jdGlvbiBidWlsZCh2YWx1ZSwgcGF0aCkge1xuICAgIGlmICh1dGlscy5pc1VuZGVmaW5lZCh2YWx1ZSkpIHJldHVybjtcblxuICAgIGlmIChzdGFjay5pbmRleE9mKHZhbHVlKSAhPT0gLTEpIHtcbiAgICAgIHRocm93IEVycm9yKCdDaXJjdWxhciByZWZlcmVuY2UgZGV0ZWN0ZWQgaW4gJyArIHBhdGguam9pbignLicpKTtcbiAgICB9XG5cbiAgICBzdGFjay5wdXNoKHZhbHVlKTtcblxuICAgIHV0aWxzLmZvckVhY2godmFsdWUsIGZ1bmN0aW9uIGVhY2goZWwsIGtleSkge1xuICAgICAgY29uc3QgcmVzdWx0ID0gISh1dGlscy5pc1VuZGVmaW5lZChlbCkgfHwgZWwgPT09IG51bGwpICYmIHZpc2l0b3IuY2FsbChcbiAgICAgICAgZm9ybURhdGEsIGVsLCB1dGlscy5pc1N0cmluZyhrZXkpID8ga2V5LnRyaW0oKSA6IGtleSwgcGF0aCwgZXhwb3NlZEhlbHBlcnNcbiAgICAgICk7XG5cbiAgICAgIGlmIChyZXN1bHQgPT09IHRydWUpIHtcbiAgICAgICAgYnVpbGQoZWwsIHBhdGggPyBwYXRoLmNvbmNhdChrZXkpIDogW2tleV0pO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgc3RhY2sucG9wKCk7XG4gIH1cblxuICBpZiAoIXV0aWxzLmlzT2JqZWN0KG9iaikpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdkYXRhIG11c3QgYmUgYW4gb2JqZWN0Jyk7XG4gIH1cblxuICBidWlsZChvYmopO1xuXG4gIHJldHVybiBmb3JtRGF0YTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgdG9Gb3JtRGF0YTtcbiIsIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IHRvRm9ybURhdGEgZnJvbSAnLi90b0Zvcm1EYXRhLmpzJztcblxuLyoqXG4gKiBJdCBlbmNvZGVzIGEgc3RyaW5nIGJ5IHJlcGxhY2luZyBhbGwgY2hhcmFjdGVycyB0aGF0IGFyZSBub3QgaW4gdGhlIHVucmVzZXJ2ZWQgc2V0IHdpdGhcbiAqIHRoZWlyIHBlcmNlbnQtZW5jb2RlZCBlcXVpdmFsZW50c1xuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHIgLSBUaGUgc3RyaW5nIHRvIGVuY29kZS5cbiAqXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgZW5jb2RlZCBzdHJpbmcuXG4gKi9cbmZ1bmN0aW9uIGVuY29kZShzdHIpIHtcbiAgY29uc3QgY2hhck1hcCA9IHtcbiAgICAnISc6ICclMjEnLFxuICAgIFwiJ1wiOiAnJTI3JyxcbiAgICAnKCc6ICclMjgnLFxuICAgICcpJzogJyUyOScsXG4gICAgJ34nOiAnJTdFJyxcbiAgICAnJTIwJzogJysnLFxuICAgICclMDAnOiAnXFx4MDAnXG4gIH07XG4gIHJldHVybiBlbmNvZGVVUklDb21wb25lbnQoc3RyKS5yZXBsYWNlKC9bIScoKX5dfCUyMHwlMDAvZywgZnVuY3Rpb24gcmVwbGFjZXIobWF0Y2gpIHtcbiAgICByZXR1cm4gY2hhck1hcFttYXRjaF07XG4gIH0pO1xufVxuXG4vKipcbiAqIEl0IHRha2VzIGEgcGFyYW1zIG9iamVjdCBhbmQgY29udmVydHMgaXQgdG8gYSBGb3JtRGF0YSBvYmplY3RcbiAqXG4gKiBAcGFyYW0ge09iamVjdDxzdHJpbmcsIGFueT59IHBhcmFtcyAtIFRoZSBwYXJhbWV0ZXJzIHRvIGJlIGNvbnZlcnRlZCB0byBhIEZvcm1EYXRhIG9iamVjdC5cbiAqIEBwYXJhbSB7T2JqZWN0PHN0cmluZywgYW55Pn0gb3B0aW9ucyAtIFRoZSBvcHRpb25zIG9iamVjdCBwYXNzZWQgdG8gdGhlIEF4aW9zIGNvbnN0cnVjdG9yLlxuICpcbiAqIEByZXR1cm5zIHt2b2lkfVxuICovXG5mdW5jdGlvbiBBeGlvc1VSTFNlYXJjaFBhcmFtcyhwYXJhbXMsIG9wdGlvbnMpIHtcbiAgdGhpcy5fcGFpcnMgPSBbXTtcblxuICBwYXJhbXMgJiYgdG9Gb3JtRGF0YShwYXJhbXMsIHRoaXMsIG9wdGlvbnMpO1xufVxuXG5jb25zdCBwcm90b3R5cGUgPSBBeGlvc1VSTFNlYXJjaFBhcmFtcy5wcm90b3R5cGU7XG5cbnByb3RvdHlwZS5hcHBlbmQgPSBmdW5jdGlvbiBhcHBlbmQobmFtZSwgdmFsdWUpIHtcbiAgdGhpcy5fcGFpcnMucHVzaChbbmFtZSwgdmFsdWVdKTtcbn07XG5cbnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKGVuY29kZXIpIHtcbiAgY29uc3QgX2VuY29kZSA9IGVuY29kZXIgPyBmdW5jdGlvbih2YWx1ZSkge1xuICAgIHJldHVybiBlbmNvZGVyLmNhbGwodGhpcywgdmFsdWUsIGVuY29kZSk7XG4gIH0gOiBlbmNvZGU7XG5cbiAgcmV0dXJuIHRoaXMuX3BhaXJzLm1hcChmdW5jdGlvbiBlYWNoKHBhaXIpIHtcbiAgICByZXR1cm4gX2VuY29kZShwYWlyWzBdKSArICc9JyArIF9lbmNvZGUocGFpclsxXSk7XG4gIH0sICcnKS5qb2luKCcmJyk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBBeGlvc1VSTFNlYXJjaFBhcmFtcztcbiIsIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IHV0aWxzIGZyb20gJy4uL3V0aWxzLmpzJztcbmltcG9ydCBBeGlvc1VSTFNlYXJjaFBhcmFtcyBmcm9tICcuLi9oZWxwZXJzL0F4aW9zVVJMU2VhcmNoUGFyYW1zLmpzJztcblxuLyoqXG4gKiBJdCByZXBsYWNlcyBhbGwgaW5zdGFuY2VzIG9mIHRoZSBjaGFyYWN0ZXJzIGA6YCwgYCRgLCBgLGAsIGArYCwgYFtgLCBhbmQgYF1gIHdpdGggdGhlaXJcbiAqIFVSSSBlbmNvZGVkIGNvdW50ZXJwYXJ0c1xuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB2YWwgVGhlIHZhbHVlIHRvIGJlIGVuY29kZWQuXG4gKlxuICogQHJldHVybnMge3N0cmluZ30gVGhlIGVuY29kZWQgdmFsdWUuXG4gKi9cbmZ1bmN0aW9uIGVuY29kZSh2YWwpIHtcbiAgcmV0dXJuIGVuY29kZVVSSUNvbXBvbmVudCh2YWwpLlxuICAgIHJlcGxhY2UoLyUzQS9naSwgJzonKS5cbiAgICByZXBsYWNlKC8lMjQvZywgJyQnKS5cbiAgICByZXBsYWNlKC8lMkMvZ2ksICcsJykuXG4gICAgcmVwbGFjZSgvJTIwL2csICcrJykuXG4gICAgcmVwbGFjZSgvJTVCL2dpLCAnWycpLlxuICAgIHJlcGxhY2UoLyU1RC9naSwgJ10nKTtcbn1cblxuLyoqXG4gKiBCdWlsZCBhIFVSTCBieSBhcHBlbmRpbmcgcGFyYW1zIHRvIHRoZSBlbmRcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gdXJsIFRoZSBiYXNlIG9mIHRoZSB1cmwgKGUuZy4sIGh0dHA6Ly93d3cuZ29vZ2xlLmNvbSlcbiAqIEBwYXJhbSB7b2JqZWN0fSBbcGFyYW1zXSBUaGUgcGFyYW1zIHRvIGJlIGFwcGVuZGVkXG4gKiBAcGFyYW0gez9vYmplY3R9IG9wdGlvbnNcbiAqXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgZm9ybWF0dGVkIHVybFxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBidWlsZFVSTCh1cmwsIHBhcmFtcywgb3B0aW9ucykge1xuICAvKmVzbGludCBuby1wYXJhbS1yZWFzc2lnbjowKi9cbiAgaWYgKCFwYXJhbXMpIHtcbiAgICByZXR1cm4gdXJsO1xuICB9XG4gIFxuICBjb25zdCBfZW5jb2RlID0gb3B0aW9ucyAmJiBvcHRpb25zLmVuY29kZSB8fCBlbmNvZGU7XG5cbiAgY29uc3Qgc2VyaWFsaXplRm4gPSBvcHRpb25zICYmIG9wdGlvbnMuc2VyaWFsaXplO1xuXG4gIGxldCBzZXJpYWxpemVkUGFyYW1zO1xuXG4gIGlmIChzZXJpYWxpemVGbikge1xuICAgIHNlcmlhbGl6ZWRQYXJhbXMgPSBzZXJpYWxpemVGbihwYXJhbXMsIG9wdGlvbnMpO1xuICB9IGVsc2Uge1xuICAgIHNlcmlhbGl6ZWRQYXJhbXMgPSB1dGlscy5pc1VSTFNlYXJjaFBhcmFtcyhwYXJhbXMpID9cbiAgICAgIHBhcmFtcy50b1N0cmluZygpIDpcbiAgICAgIG5ldyBBeGlvc1VSTFNlYXJjaFBhcmFtcyhwYXJhbXMsIG9wdGlvbnMpLnRvU3RyaW5nKF9lbmNvZGUpO1xuICB9XG5cbiAgaWYgKHNlcmlhbGl6ZWRQYXJhbXMpIHtcbiAgICBjb25zdCBoYXNobWFya0luZGV4ID0gdXJsLmluZGV4T2YoXCIjXCIpO1xuXG4gICAgaWYgKGhhc2htYXJrSW5kZXggIT09IC0xKSB7XG4gICAgICB1cmwgPSB1cmwuc2xpY2UoMCwgaGFzaG1hcmtJbmRleCk7XG4gICAgfVxuICAgIHVybCArPSAodXJsLmluZGV4T2YoJz8nKSA9PT0gLTEgPyAnPycgOiAnJicpICsgc2VyaWFsaXplZFBhcmFtcztcbiAgfVxuXG4gIHJldHVybiB1cmw7XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbmltcG9ydCB1dGlscyBmcm9tICcuLy4uL3V0aWxzLmpzJztcblxuY2xhc3MgSW50ZXJjZXB0b3JNYW5hZ2VyIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5oYW5kbGVycyA9IFtdO1xuICB9XG5cbiAgLyoqXG4gICAqIEFkZCBhIG5ldyBpbnRlcmNlcHRvciB0byB0aGUgc3RhY2tcbiAgICpcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVsZmlsbGVkIFRoZSBmdW5jdGlvbiB0byBoYW5kbGUgYHRoZW5gIGZvciBhIGBQcm9taXNlYFxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSByZWplY3RlZCBUaGUgZnVuY3Rpb24gdG8gaGFuZGxlIGByZWplY3RgIGZvciBhIGBQcm9taXNlYFxuICAgKlxuICAgKiBAcmV0dXJuIHtOdW1iZXJ9IEFuIElEIHVzZWQgdG8gcmVtb3ZlIGludGVyY2VwdG9yIGxhdGVyXG4gICAqL1xuICB1c2UoZnVsZmlsbGVkLCByZWplY3RlZCwgb3B0aW9ucykge1xuICAgIHRoaXMuaGFuZGxlcnMucHVzaCh7XG4gICAgICBmdWxmaWxsZWQsXG4gICAgICByZWplY3RlZCxcbiAgICAgIHN5bmNocm9ub3VzOiBvcHRpb25zID8gb3B0aW9ucy5zeW5jaHJvbm91cyA6IGZhbHNlLFxuICAgICAgcnVuV2hlbjogb3B0aW9ucyA/IG9wdGlvbnMucnVuV2hlbiA6IG51bGxcbiAgICB9KTtcbiAgICByZXR1cm4gdGhpcy5oYW5kbGVycy5sZW5ndGggLSAxO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlbW92ZSBhbiBpbnRlcmNlcHRvciBmcm9tIHRoZSBzdGFja1xuICAgKlxuICAgKiBAcGFyYW0ge051bWJlcn0gaWQgVGhlIElEIHRoYXQgd2FzIHJldHVybmVkIGJ5IGB1c2VgXG4gICAqXG4gICAqIEByZXR1cm5zIHtCb29sZWFufSBgdHJ1ZWAgaWYgdGhlIGludGVyY2VwdG9yIHdhcyByZW1vdmVkLCBgZmFsc2VgIG90aGVyd2lzZVxuICAgKi9cbiAgZWplY3QoaWQpIHtcbiAgICBpZiAodGhpcy5oYW5kbGVyc1tpZF0pIHtcbiAgICAgIHRoaXMuaGFuZGxlcnNbaWRdID0gbnVsbDtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQ2xlYXIgYWxsIGludGVyY2VwdG9ycyBmcm9tIHRoZSBzdGFja1xuICAgKlxuICAgKiBAcmV0dXJucyB7dm9pZH1cbiAgICovXG4gIGNsZWFyKCkge1xuICAgIGlmICh0aGlzLmhhbmRsZXJzKSB7XG4gICAgICB0aGlzLmhhbmRsZXJzID0gW107XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEl0ZXJhdGUgb3ZlciBhbGwgdGhlIHJlZ2lzdGVyZWQgaW50ZXJjZXB0b3JzXG4gICAqXG4gICAqIFRoaXMgbWV0aG9kIGlzIHBhcnRpY3VsYXJseSB1c2VmdWwgZm9yIHNraXBwaW5nIG92ZXIgYW55XG4gICAqIGludGVyY2VwdG9ycyB0aGF0IG1heSBoYXZlIGJlY29tZSBgbnVsbGAgY2FsbGluZyBgZWplY3RgLlxuICAgKlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBUaGUgZnVuY3Rpb24gdG8gY2FsbCBmb3IgZWFjaCBpbnRlcmNlcHRvclxuICAgKlxuICAgKiBAcmV0dXJucyB7dm9pZH1cbiAgICovXG4gIGZvckVhY2goZm4pIHtcbiAgICB1dGlscy5mb3JFYWNoKHRoaXMuaGFuZGxlcnMsIGZ1bmN0aW9uIGZvckVhY2hIYW5kbGVyKGgpIHtcbiAgICAgIGlmIChoICE9PSBudWxsKSB7XG4gICAgICAgIGZuKGgpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IEludGVyY2VwdG9yTWFuYWdlcjtcbiIsIid1c2Ugc3RyaWN0JztcblxuZXhwb3J0IGRlZmF1bHQge1xuICBzaWxlbnRKU09OUGFyc2luZzogdHJ1ZSxcbiAgZm9yY2VkSlNPTlBhcnNpbmc6IHRydWUsXG4gIGNsYXJpZnlUaW1lb3V0RXJyb3I6IGZhbHNlXG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgQXhpb3NVUkxTZWFyY2hQYXJhbXMgZnJvbSAnLi4vLi4vLi4vaGVscGVycy9BeGlvc1VSTFNlYXJjaFBhcmFtcy5qcyc7XG5leHBvcnQgZGVmYXVsdCB0eXBlb2YgVVJMU2VhcmNoUGFyYW1zICE9PSAndW5kZWZpbmVkJyA/IFVSTFNlYXJjaFBhcmFtcyA6IEF4aW9zVVJMU2VhcmNoUGFyYW1zO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnQgZGVmYXVsdCB0eXBlb2YgRm9ybURhdGEgIT09ICd1bmRlZmluZWQnID8gRm9ybURhdGEgOiBudWxsO1xuIiwiJ3VzZSBzdHJpY3QnXG5cbmV4cG9ydCBkZWZhdWx0IHR5cGVvZiBCbG9iICE9PSAndW5kZWZpbmVkJyA/IEJsb2IgOiBudWxsXG4iLCJpbXBvcnQgVVJMU2VhcmNoUGFyYW1zIGZyb20gJy4vY2xhc3Nlcy9VUkxTZWFyY2hQYXJhbXMuanMnXG5pbXBvcnQgRm9ybURhdGEgZnJvbSAnLi9jbGFzc2VzL0Zvcm1EYXRhLmpzJ1xuaW1wb3J0IEJsb2IgZnJvbSAnLi9jbGFzc2VzL0Jsb2IuanMnXG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgaXNCcm93c2VyOiB0cnVlLFxuICBjbGFzc2VzOiB7XG4gICAgVVJMU2VhcmNoUGFyYW1zLFxuICAgIEZvcm1EYXRhLFxuICAgIEJsb2JcbiAgfSxcbiAgcHJvdG9jb2xzOiBbJ2h0dHAnLCAnaHR0cHMnLCAnZmlsZScsICdibG9iJywgJ3VybCcsICdkYXRhJ11cbn07XG4iLCJjb25zdCBoYXNCcm93c2VyRW52ID0gdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIGRvY3VtZW50ICE9PSAndW5kZWZpbmVkJztcblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgd2UncmUgcnVubmluZyBpbiBhIHN0YW5kYXJkIGJyb3dzZXIgZW52aXJvbm1lbnRcbiAqXG4gKiBUaGlzIGFsbG93cyBheGlvcyB0byBydW4gaW4gYSB3ZWIgd29ya2VyLCBhbmQgcmVhY3QtbmF0aXZlLlxuICogQm90aCBlbnZpcm9ubWVudHMgc3VwcG9ydCBYTUxIdHRwUmVxdWVzdCwgYnV0IG5vdCBmdWxseSBzdGFuZGFyZCBnbG9iYWxzLlxuICpcbiAqIHdlYiB3b3JrZXJzOlxuICogIHR5cGVvZiB3aW5kb3cgLT4gdW5kZWZpbmVkXG4gKiAgdHlwZW9mIGRvY3VtZW50IC0+IHVuZGVmaW5lZFxuICpcbiAqIHJlYWN0LW5hdGl2ZTpcbiAqICBuYXZpZ2F0b3IucHJvZHVjdCAtPiAnUmVhY3ROYXRpdmUnXG4gKiBuYXRpdmVzY3JpcHRcbiAqICBuYXZpZ2F0b3IucHJvZHVjdCAtPiAnTmF0aXZlU2NyaXB0JyBvciAnTlMnXG4gKlxuICogQHJldHVybnMge2Jvb2xlYW59XG4gKi9cbmNvbnN0IGhhc1N0YW5kYXJkQnJvd3NlckVudiA9IChcbiAgKHByb2R1Y3QpID0+IHtcbiAgICByZXR1cm4gaGFzQnJvd3NlckVudiAmJiBbJ1JlYWN0TmF0aXZlJywgJ05hdGl2ZVNjcmlwdCcsICdOUyddLmluZGV4T2YocHJvZHVjdCkgPCAwXG4gIH0pKHR5cGVvZiBuYXZpZ2F0b3IgIT09ICd1bmRlZmluZWQnICYmIG5hdmlnYXRvci5wcm9kdWN0KTtcblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgd2UncmUgcnVubmluZyBpbiBhIHN0YW5kYXJkIGJyb3dzZXIgd2ViV29ya2VyIGVudmlyb25tZW50XG4gKlxuICogQWx0aG91Z2ggdGhlIGBpc1N0YW5kYXJkQnJvd3NlckVudmAgbWV0aG9kIGluZGljYXRlcyB0aGF0XG4gKiBgYWxsb3dzIGF4aW9zIHRvIHJ1biBpbiBhIHdlYiB3b3JrZXJgLCB0aGUgV2ViV29ya2VyIHdpbGwgc3RpbGwgYmVcbiAqIGZpbHRlcmVkIG91dCBkdWUgdG8gaXRzIGp1ZGdtZW50IHN0YW5kYXJkXG4gKiBgdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIGRvY3VtZW50ICE9PSAndW5kZWZpbmVkJ2AuXG4gKiBUaGlzIGxlYWRzIHRvIGEgcHJvYmxlbSB3aGVuIGF4aW9zIHBvc3QgYEZvcm1EYXRhYCBpbiB3ZWJXb3JrZXJcbiAqL1xuY29uc3QgaGFzU3RhbmRhcmRCcm93c2VyV2ViV29ya2VyRW52ID0gKCgpID0+IHtcbiAgcmV0dXJuIChcbiAgICB0eXBlb2YgV29ya2VyR2xvYmFsU2NvcGUgIT09ICd1bmRlZmluZWQnICYmXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmXG4gICAgc2VsZiBpbnN0YW5jZW9mIFdvcmtlckdsb2JhbFNjb3BlICYmXG4gICAgdHlwZW9mIHNlbGYuaW1wb3J0U2NyaXB0cyA9PT0gJ2Z1bmN0aW9uJ1xuICApO1xufSkoKTtcblxuZXhwb3J0IHtcbiAgaGFzQnJvd3NlckVudixcbiAgaGFzU3RhbmRhcmRCcm93c2VyV2ViV29ya2VyRW52LFxuICBoYXNTdGFuZGFyZEJyb3dzZXJFbnZcbn1cbiIsImltcG9ydCBwbGF0Zm9ybSBmcm9tICcuL25vZGUvaW5kZXguanMnO1xuaW1wb3J0ICogYXMgdXRpbHMgZnJvbSAnLi9jb21tb24vdXRpbHMuanMnO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIC4uLnV0aWxzLFxuICAuLi5wbGF0Zm9ybVxufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgdXRpbHMgZnJvbSAnLi4vdXRpbHMuanMnO1xuaW1wb3J0IHRvRm9ybURhdGEgZnJvbSAnLi90b0Zvcm1EYXRhLmpzJztcbmltcG9ydCBwbGF0Zm9ybSBmcm9tICcuLi9wbGF0Zm9ybS9pbmRleC5qcyc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHRvVVJMRW5jb2RlZEZvcm0oZGF0YSwgb3B0aW9ucykge1xuICByZXR1cm4gdG9Gb3JtRGF0YShkYXRhLCBuZXcgcGxhdGZvcm0uY2xhc3Nlcy5VUkxTZWFyY2hQYXJhbXMoKSwgT2JqZWN0LmFzc2lnbih7XG4gICAgdmlzaXRvcjogZnVuY3Rpb24odmFsdWUsIGtleSwgcGF0aCwgaGVscGVycykge1xuICAgICAgaWYgKHBsYXRmb3JtLmlzTm9kZSAmJiB1dGlscy5pc0J1ZmZlcih2YWx1ZSkpIHtcbiAgICAgICAgdGhpcy5hcHBlbmQoa2V5LCB2YWx1ZS50b1N0cmluZygnYmFzZTY0JykpO1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBoZWxwZXJzLmRlZmF1bHRWaXNpdG9yLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgfVxuICB9LCBvcHRpb25zKSk7XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbmltcG9ydCB1dGlscyBmcm9tICcuLi91dGlscy5qcyc7XG5cbi8qKlxuICogSXQgdGFrZXMgYSBzdHJpbmcgbGlrZSBgZm9vW3hdW3ldW3pdYCBhbmQgcmV0dXJucyBhbiBhcnJheSBsaWtlIGBbJ2ZvbycsICd4JywgJ3knLCAneiddXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgLSBUaGUgbmFtZSBvZiB0aGUgcHJvcGVydHkgdG8gZ2V0LlxuICpcbiAqIEByZXR1cm5zIEFuIGFycmF5IG9mIHN0cmluZ3MuXG4gKi9cbmZ1bmN0aW9uIHBhcnNlUHJvcFBhdGgobmFtZSkge1xuICAvLyBmb29beF1beV1bel1cbiAgLy8gZm9vLngueS56XG4gIC8vIGZvby14LXktelxuICAvLyBmb28geCB5IHpcbiAgcmV0dXJuIHV0aWxzLm1hdGNoQWxsKC9cXHcrfFxcWyhcXHcqKV0vZywgbmFtZSkubWFwKG1hdGNoID0+IHtcbiAgICByZXR1cm4gbWF0Y2hbMF0gPT09ICdbXScgPyAnJyA6IG1hdGNoWzFdIHx8IG1hdGNoWzBdO1xuICB9KTtcbn1cblxuLyoqXG4gKiBDb252ZXJ0IGFuIGFycmF5IHRvIGFuIG9iamVjdC5cbiAqXG4gKiBAcGFyYW0ge0FycmF5PGFueT59IGFyciAtIFRoZSBhcnJheSB0byBjb252ZXJ0IHRvIGFuIG9iamVjdC5cbiAqXG4gKiBAcmV0dXJucyBBbiBvYmplY3Qgd2l0aCB0aGUgc2FtZSBrZXlzIGFuZCB2YWx1ZXMgYXMgdGhlIGFycmF5LlxuICovXG5mdW5jdGlvbiBhcnJheVRvT2JqZWN0KGFycikge1xuICBjb25zdCBvYmogPSB7fTtcbiAgY29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKGFycik7XG4gIGxldCBpO1xuICBjb25zdCBsZW4gPSBrZXlzLmxlbmd0aDtcbiAgbGV0IGtleTtcbiAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAga2V5ID0ga2V5c1tpXTtcbiAgICBvYmpba2V5XSA9IGFycltrZXldO1xuICB9XG4gIHJldHVybiBvYmo7XG59XG5cbi8qKlxuICogSXQgdGFrZXMgYSBGb3JtRGF0YSBvYmplY3QgYW5kIHJldHVybnMgYSBKYXZhU2NyaXB0IG9iamVjdFxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBmb3JtRGF0YSBUaGUgRm9ybURhdGEgb2JqZWN0IHRvIGNvbnZlcnQgdG8gSlNPTi5cbiAqXG4gKiBAcmV0dXJucyB7T2JqZWN0PHN0cmluZywgYW55PiB8IG51bGx9IFRoZSBjb252ZXJ0ZWQgb2JqZWN0LlxuICovXG5mdW5jdGlvbiBmb3JtRGF0YVRvSlNPTihmb3JtRGF0YSkge1xuICBmdW5jdGlvbiBidWlsZFBhdGgocGF0aCwgdmFsdWUsIHRhcmdldCwgaW5kZXgpIHtcbiAgICBsZXQgbmFtZSA9IHBhdGhbaW5kZXgrK107XG5cbiAgICBpZiAobmFtZSA9PT0gJ19fcHJvdG9fXycpIHJldHVybiB0cnVlO1xuXG4gICAgY29uc3QgaXNOdW1lcmljS2V5ID0gTnVtYmVyLmlzRmluaXRlKCtuYW1lKTtcbiAgICBjb25zdCBpc0xhc3QgPSBpbmRleCA+PSBwYXRoLmxlbmd0aDtcbiAgICBuYW1lID0gIW5hbWUgJiYgdXRpbHMuaXNBcnJheSh0YXJnZXQpID8gdGFyZ2V0Lmxlbmd0aCA6IG5hbWU7XG5cbiAgICBpZiAoaXNMYXN0KSB7XG4gICAgICBpZiAodXRpbHMuaGFzT3duUHJvcCh0YXJnZXQsIG5hbWUpKSB7XG4gICAgICAgIHRhcmdldFtuYW1lXSA9IFt0YXJnZXRbbmFtZV0sIHZhbHVlXTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRhcmdldFtuYW1lXSA9IHZhbHVlO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gIWlzTnVtZXJpY0tleTtcbiAgICB9XG5cbiAgICBpZiAoIXRhcmdldFtuYW1lXSB8fCAhdXRpbHMuaXNPYmplY3QodGFyZ2V0W25hbWVdKSkge1xuICAgICAgdGFyZ2V0W25hbWVdID0gW107XG4gICAgfVxuXG4gICAgY29uc3QgcmVzdWx0ID0gYnVpbGRQYXRoKHBhdGgsIHZhbHVlLCB0YXJnZXRbbmFtZV0sIGluZGV4KTtcblxuICAgIGlmIChyZXN1bHQgJiYgdXRpbHMuaXNBcnJheSh0YXJnZXRbbmFtZV0pKSB7XG4gICAgICB0YXJnZXRbbmFtZV0gPSBhcnJheVRvT2JqZWN0KHRhcmdldFtuYW1lXSk7XG4gICAgfVxuXG4gICAgcmV0dXJuICFpc051bWVyaWNLZXk7XG4gIH1cblxuICBpZiAodXRpbHMuaXNGb3JtRGF0YShmb3JtRGF0YSkgJiYgdXRpbHMuaXNGdW5jdGlvbihmb3JtRGF0YS5lbnRyaWVzKSkge1xuICAgIGNvbnN0IG9iaiA9IHt9O1xuXG4gICAgdXRpbHMuZm9yRWFjaEVudHJ5KGZvcm1EYXRhLCAobmFtZSwgdmFsdWUpID0+IHtcbiAgICAgIGJ1aWxkUGF0aChwYXJzZVByb3BQYXRoKG5hbWUpLCB2YWx1ZSwgb2JqLCAwKTtcbiAgICB9KTtcblxuICAgIHJldHVybiBvYmo7XG4gIH1cblxuICByZXR1cm4gbnVsbDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZm9ybURhdGFUb0pTT047XG4iLCIndXNlIHN0cmljdCc7XG5cbmltcG9ydCB1dGlscyBmcm9tICcuLi91dGlscy5qcyc7XG5pbXBvcnQgQXhpb3NFcnJvciBmcm9tICcuLi9jb3JlL0F4aW9zRXJyb3IuanMnO1xuaW1wb3J0IHRyYW5zaXRpb25hbERlZmF1bHRzIGZyb20gJy4vdHJhbnNpdGlvbmFsLmpzJztcbmltcG9ydCB0b0Zvcm1EYXRhIGZyb20gJy4uL2hlbHBlcnMvdG9Gb3JtRGF0YS5qcyc7XG5pbXBvcnQgdG9VUkxFbmNvZGVkRm9ybSBmcm9tICcuLi9oZWxwZXJzL3RvVVJMRW5jb2RlZEZvcm0uanMnO1xuaW1wb3J0IHBsYXRmb3JtIGZyb20gJy4uL3BsYXRmb3JtL2luZGV4LmpzJztcbmltcG9ydCBmb3JtRGF0YVRvSlNPTiBmcm9tICcuLi9oZWxwZXJzL2Zvcm1EYXRhVG9KU09OLmpzJztcblxuLyoqXG4gKiBJdCB0YWtlcyBhIHN0cmluZywgdHJpZXMgdG8gcGFyc2UgaXQsIGFuZCBpZiBpdCBmYWlscywgaXQgcmV0dXJucyB0aGUgc3RyaW5naWZpZWQgdmVyc2lvblxuICogb2YgdGhlIGlucHV0XG4gKlxuICogQHBhcmFtIHthbnl9IHJhd1ZhbHVlIC0gVGhlIHZhbHVlIHRvIGJlIHN0cmluZ2lmaWVkLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gcGFyc2VyIC0gQSBmdW5jdGlvbiB0aGF0IHBhcnNlcyBhIHN0cmluZyBpbnRvIGEgSmF2YVNjcmlwdCBvYmplY3QuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBlbmNvZGVyIC0gQSBmdW5jdGlvbiB0aGF0IHRha2VzIGEgdmFsdWUgYW5kIHJldHVybnMgYSBzdHJpbmcuXG4gKlxuICogQHJldHVybnMge3N0cmluZ30gQSBzdHJpbmdpZmllZCB2ZXJzaW9uIG9mIHRoZSByYXdWYWx1ZS5cbiAqL1xuZnVuY3Rpb24gc3RyaW5naWZ5U2FmZWx5KHJhd1ZhbHVlLCBwYXJzZXIsIGVuY29kZXIpIHtcbiAgaWYgKHV0aWxzLmlzU3RyaW5nKHJhd1ZhbHVlKSkge1xuICAgIHRyeSB7XG4gICAgICAocGFyc2VyIHx8IEpTT04ucGFyc2UpKHJhd1ZhbHVlKTtcbiAgICAgIHJldHVybiB1dGlscy50cmltKHJhd1ZhbHVlKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBpZiAoZS5uYW1lICE9PSAnU3ludGF4RXJyb3InKSB7XG4gICAgICAgIHRocm93IGU7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIChlbmNvZGVyIHx8IEpTT04uc3RyaW5naWZ5KShyYXdWYWx1ZSk7XG59XG5cbmNvbnN0IGRlZmF1bHRzID0ge1xuXG4gIHRyYW5zaXRpb25hbDogdHJhbnNpdGlvbmFsRGVmYXVsdHMsXG5cbiAgYWRhcHRlcjogWyd4aHInLCAnaHR0cCddLFxuXG4gIHRyYW5zZm9ybVJlcXVlc3Q6IFtmdW5jdGlvbiB0cmFuc2Zvcm1SZXF1ZXN0KGRhdGEsIGhlYWRlcnMpIHtcbiAgICBjb25zdCBjb250ZW50VHlwZSA9IGhlYWRlcnMuZ2V0Q29udGVudFR5cGUoKSB8fCAnJztcbiAgICBjb25zdCBoYXNKU09OQ29udGVudFR5cGUgPSBjb250ZW50VHlwZS5pbmRleE9mKCdhcHBsaWNhdGlvbi9qc29uJykgPiAtMTtcbiAgICBjb25zdCBpc09iamVjdFBheWxvYWQgPSB1dGlscy5pc09iamVjdChkYXRhKTtcblxuICAgIGlmIChpc09iamVjdFBheWxvYWQgJiYgdXRpbHMuaXNIVE1MRm9ybShkYXRhKSkge1xuICAgICAgZGF0YSA9IG5ldyBGb3JtRGF0YShkYXRhKTtcbiAgICB9XG5cbiAgICBjb25zdCBpc0Zvcm1EYXRhID0gdXRpbHMuaXNGb3JtRGF0YShkYXRhKTtcblxuICAgIGlmIChpc0Zvcm1EYXRhKSB7XG4gICAgICByZXR1cm4gaGFzSlNPTkNvbnRlbnRUeXBlID8gSlNPTi5zdHJpbmdpZnkoZm9ybURhdGFUb0pTT04oZGF0YSkpIDogZGF0YTtcbiAgICB9XG5cbiAgICBpZiAodXRpbHMuaXNBcnJheUJ1ZmZlcihkYXRhKSB8fFxuICAgICAgdXRpbHMuaXNCdWZmZXIoZGF0YSkgfHxcbiAgICAgIHV0aWxzLmlzU3RyZWFtKGRhdGEpIHx8XG4gICAgICB1dGlscy5pc0ZpbGUoZGF0YSkgfHxcbiAgICAgIHV0aWxzLmlzQmxvYihkYXRhKVxuICAgICkge1xuICAgICAgcmV0dXJuIGRhdGE7XG4gICAgfVxuICAgIGlmICh1dGlscy5pc0FycmF5QnVmZmVyVmlldyhkYXRhKSkge1xuICAgICAgcmV0dXJuIGRhdGEuYnVmZmVyO1xuICAgIH1cbiAgICBpZiAodXRpbHMuaXNVUkxTZWFyY2hQYXJhbXMoZGF0YSkpIHtcbiAgICAgIGhlYWRlcnMuc2V0Q29udGVudFR5cGUoJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZDtjaGFyc2V0PXV0Zi04JywgZmFsc2UpO1xuICAgICAgcmV0dXJuIGRhdGEudG9TdHJpbmcoKTtcbiAgICB9XG5cbiAgICBsZXQgaXNGaWxlTGlzdDtcblxuICAgIGlmIChpc09iamVjdFBheWxvYWQpIHtcbiAgICAgIGlmIChjb250ZW50VHlwZS5pbmRleE9mKCdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQnKSA+IC0xKSB7XG4gICAgICAgIHJldHVybiB0b1VSTEVuY29kZWRGb3JtKGRhdGEsIHRoaXMuZm9ybVNlcmlhbGl6ZXIpLnRvU3RyaW5nKCk7XG4gICAgICB9XG5cbiAgICAgIGlmICgoaXNGaWxlTGlzdCA9IHV0aWxzLmlzRmlsZUxpc3QoZGF0YSkpIHx8IGNvbnRlbnRUeXBlLmluZGV4T2YoJ211bHRpcGFydC9mb3JtLWRhdGEnKSA+IC0xKSB7XG4gICAgICAgIGNvbnN0IF9Gb3JtRGF0YSA9IHRoaXMuZW52ICYmIHRoaXMuZW52LkZvcm1EYXRhO1xuXG4gICAgICAgIHJldHVybiB0b0Zvcm1EYXRhKFxuICAgICAgICAgIGlzRmlsZUxpc3QgPyB7J2ZpbGVzW10nOiBkYXRhfSA6IGRhdGEsXG4gICAgICAgICAgX0Zvcm1EYXRhICYmIG5ldyBfRm9ybURhdGEoKSxcbiAgICAgICAgICB0aGlzLmZvcm1TZXJpYWxpemVyXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGlzT2JqZWN0UGF5bG9hZCB8fCBoYXNKU09OQ29udGVudFR5cGUgKSB7XG4gICAgICBoZWFkZXJzLnNldENvbnRlbnRUeXBlKCdhcHBsaWNhdGlvbi9qc29uJywgZmFsc2UpO1xuICAgICAgcmV0dXJuIHN0cmluZ2lmeVNhZmVseShkYXRhKTtcbiAgICB9XG5cbiAgICByZXR1cm4gZGF0YTtcbiAgfV0sXG5cbiAgdHJhbnNmb3JtUmVzcG9uc2U6IFtmdW5jdGlvbiB0cmFuc2Zvcm1SZXNwb25zZShkYXRhKSB7XG4gICAgY29uc3QgdHJhbnNpdGlvbmFsID0gdGhpcy50cmFuc2l0aW9uYWwgfHwgZGVmYXVsdHMudHJhbnNpdGlvbmFsO1xuICAgIGNvbnN0IGZvcmNlZEpTT05QYXJzaW5nID0gdHJhbnNpdGlvbmFsICYmIHRyYW5zaXRpb25hbC5mb3JjZWRKU09OUGFyc2luZztcbiAgICBjb25zdCBKU09OUmVxdWVzdGVkID0gdGhpcy5yZXNwb25zZVR5cGUgPT09ICdqc29uJztcblxuICAgIGlmIChkYXRhICYmIHV0aWxzLmlzU3RyaW5nKGRhdGEpICYmICgoZm9yY2VkSlNPTlBhcnNpbmcgJiYgIXRoaXMucmVzcG9uc2VUeXBlKSB8fCBKU09OUmVxdWVzdGVkKSkge1xuICAgICAgY29uc3Qgc2lsZW50SlNPTlBhcnNpbmcgPSB0cmFuc2l0aW9uYWwgJiYgdHJhbnNpdGlvbmFsLnNpbGVudEpTT05QYXJzaW5nO1xuICAgICAgY29uc3Qgc3RyaWN0SlNPTlBhcnNpbmcgPSAhc2lsZW50SlNPTlBhcnNpbmcgJiYgSlNPTlJlcXVlc3RlZDtcblxuICAgICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuIEpTT04ucGFyc2UoZGF0YSk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGlmIChzdHJpY3RKU09OUGFyc2luZykge1xuICAgICAgICAgIGlmIChlLm5hbWUgPT09ICdTeW50YXhFcnJvcicpIHtcbiAgICAgICAgICAgIHRocm93IEF4aW9zRXJyb3IuZnJvbShlLCBBeGlvc0Vycm9yLkVSUl9CQURfUkVTUE9OU0UsIHRoaXMsIG51bGwsIHRoaXMucmVzcG9uc2UpO1xuICAgICAgICAgIH1cbiAgICAgICAgICB0aHJvdyBlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGRhdGE7XG4gIH1dLFxuXG4gIC8qKlxuICAgKiBBIHRpbWVvdXQgaW4gbWlsbGlzZWNvbmRzIHRvIGFib3J0IGEgcmVxdWVzdC4gSWYgc2V0IHRvIDAgKGRlZmF1bHQpIGFcbiAgICogdGltZW91dCBpcyBub3QgY3JlYXRlZC5cbiAgICovXG4gIHRpbWVvdXQ6IDAsXG5cbiAgeHNyZkNvb2tpZU5hbWU6ICdYU1JGLVRPS0VOJyxcbiAgeHNyZkhlYWRlck5hbWU6ICdYLVhTUkYtVE9LRU4nLFxuXG4gIG1heENvbnRlbnRMZW5ndGg6IC0xLFxuICBtYXhCb2R5TGVuZ3RoOiAtMSxcblxuICBlbnY6IHtcbiAgICBGb3JtRGF0YTogcGxhdGZvcm0uY2xhc3Nlcy5Gb3JtRGF0YSxcbiAgICBCbG9iOiBwbGF0Zm9ybS5jbGFzc2VzLkJsb2JcbiAgfSxcblxuICB2YWxpZGF0ZVN0YXR1czogZnVuY3Rpb24gdmFsaWRhdGVTdGF0dXMoc3RhdHVzKSB7XG4gICAgcmV0dXJuIHN0YXR1cyA+PSAyMDAgJiYgc3RhdHVzIDwgMzAwO1xuICB9LFxuXG4gIGhlYWRlcnM6IHtcbiAgICBjb21tb246IHtcbiAgICAgICdBY2NlcHQnOiAnYXBwbGljYXRpb24vanNvbiwgdGV4dC9wbGFpbiwgKi8qJyxcbiAgICAgICdDb250ZW50LVR5cGUnOiB1bmRlZmluZWRcbiAgICB9XG4gIH1cbn07XG5cbnV0aWxzLmZvckVhY2goWydkZWxldGUnLCAnZ2V0JywgJ2hlYWQnLCAncG9zdCcsICdwdXQnLCAncGF0Y2gnXSwgKG1ldGhvZCkgPT4ge1xuICBkZWZhdWx0cy5oZWFkZXJzW21ldGhvZF0gPSB7fTtcbn0pO1xuXG5leHBvcnQgZGVmYXVsdCBkZWZhdWx0cztcbiIsIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IHV0aWxzIGZyb20gJy4vLi4vdXRpbHMuanMnO1xuXG4vLyBSYXdBeGlvc0hlYWRlcnMgd2hvc2UgZHVwbGljYXRlcyBhcmUgaWdub3JlZCBieSBub2RlXG4vLyBjLmYuIGh0dHBzOi8vbm9kZWpzLm9yZy9hcGkvaHR0cC5odG1sI2h0dHBfbWVzc2FnZV9oZWFkZXJzXG5jb25zdCBpZ25vcmVEdXBsaWNhdGVPZiA9IHV0aWxzLnRvT2JqZWN0U2V0KFtcbiAgJ2FnZScsICdhdXRob3JpemF0aW9uJywgJ2NvbnRlbnQtbGVuZ3RoJywgJ2NvbnRlbnQtdHlwZScsICdldGFnJyxcbiAgJ2V4cGlyZXMnLCAnZnJvbScsICdob3N0JywgJ2lmLW1vZGlmaWVkLXNpbmNlJywgJ2lmLXVubW9kaWZpZWQtc2luY2UnLFxuICAnbGFzdC1tb2RpZmllZCcsICdsb2NhdGlvbicsICdtYXgtZm9yd2FyZHMnLCAncHJveHktYXV0aG9yaXphdGlvbicsXG4gICdyZWZlcmVyJywgJ3JldHJ5LWFmdGVyJywgJ3VzZXItYWdlbnQnXG5dKTtcblxuLyoqXG4gKiBQYXJzZSBoZWFkZXJzIGludG8gYW4gb2JqZWN0XG4gKlxuICogYGBgXG4gKiBEYXRlOiBXZWQsIDI3IEF1ZyAyMDE0IDA4OjU4OjQ5IEdNVFxuICogQ29udGVudC1UeXBlOiBhcHBsaWNhdGlvbi9qc29uXG4gKiBDb25uZWN0aW9uOiBrZWVwLWFsaXZlXG4gKiBUcmFuc2Zlci1FbmNvZGluZzogY2h1bmtlZFxuICogYGBgXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHJhd0hlYWRlcnMgSGVhZGVycyBuZWVkaW5nIHRvIGJlIHBhcnNlZFxuICpcbiAqIEByZXR1cm5zIHtPYmplY3R9IEhlYWRlcnMgcGFyc2VkIGludG8gYW4gb2JqZWN0XG4gKi9cbmV4cG9ydCBkZWZhdWx0IHJhd0hlYWRlcnMgPT4ge1xuICBjb25zdCBwYXJzZWQgPSB7fTtcbiAgbGV0IGtleTtcbiAgbGV0IHZhbDtcbiAgbGV0IGk7XG5cbiAgcmF3SGVhZGVycyAmJiByYXdIZWFkZXJzLnNwbGl0KCdcXG4nKS5mb3JFYWNoKGZ1bmN0aW9uIHBhcnNlcihsaW5lKSB7XG4gICAgaSA9IGxpbmUuaW5kZXhPZignOicpO1xuICAgIGtleSA9IGxpbmUuc3Vic3RyaW5nKDAsIGkpLnRyaW0oKS50b0xvd2VyQ2FzZSgpO1xuICAgIHZhbCA9IGxpbmUuc3Vic3RyaW5nKGkgKyAxKS50cmltKCk7XG5cbiAgICBpZiAoIWtleSB8fCAocGFyc2VkW2tleV0gJiYgaWdub3JlRHVwbGljYXRlT2Zba2V5XSkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoa2V5ID09PSAnc2V0LWNvb2tpZScpIHtcbiAgICAgIGlmIChwYXJzZWRba2V5XSkge1xuICAgICAgICBwYXJzZWRba2V5XS5wdXNoKHZhbCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwYXJzZWRba2V5XSA9IFt2YWxdO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBwYXJzZWRba2V5XSA9IHBhcnNlZFtrZXldID8gcGFyc2VkW2tleV0gKyAnLCAnICsgdmFsIDogdmFsO1xuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuIHBhcnNlZDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbmltcG9ydCB1dGlscyBmcm9tICcuLi91dGlscy5qcyc7XG5pbXBvcnQgcGFyc2VIZWFkZXJzIGZyb20gJy4uL2hlbHBlcnMvcGFyc2VIZWFkZXJzLmpzJztcblxuY29uc3QgJGludGVybmFscyA9IFN5bWJvbCgnaW50ZXJuYWxzJyk7XG5cbmZ1bmN0aW9uIG5vcm1hbGl6ZUhlYWRlcihoZWFkZXIpIHtcbiAgcmV0dXJuIGhlYWRlciAmJiBTdHJpbmcoaGVhZGVyKS50cmltKCkudG9Mb3dlckNhc2UoKTtcbn1cblxuZnVuY3Rpb24gbm9ybWFsaXplVmFsdWUodmFsdWUpIHtcbiAgaWYgKHZhbHVlID09PSBmYWxzZSB8fCB2YWx1ZSA9PSBudWxsKSB7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG5cbiAgcmV0dXJuIHV0aWxzLmlzQXJyYXkodmFsdWUpID8gdmFsdWUubWFwKG5vcm1hbGl6ZVZhbHVlKSA6IFN0cmluZyh2YWx1ZSk7XG59XG5cbmZ1bmN0aW9uIHBhcnNlVG9rZW5zKHN0cikge1xuICBjb25zdCB0b2tlbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICBjb25zdCB0b2tlbnNSRSA9IC8oW15cXHMsOz1dKylcXHMqKD86PVxccyooW14sO10rKSk/L2c7XG4gIGxldCBtYXRjaDtcblxuICB3aGlsZSAoKG1hdGNoID0gdG9rZW5zUkUuZXhlYyhzdHIpKSkge1xuICAgIHRva2Vuc1ttYXRjaFsxXV0gPSBtYXRjaFsyXTtcbiAgfVxuXG4gIHJldHVybiB0b2tlbnM7XG59XG5cbmNvbnN0IGlzVmFsaWRIZWFkZXJOYW1lID0gKHN0cikgPT4gL15bLV9hLXpBLVowLTleYHx+LCEjJCUmJyorLl0rJC8udGVzdChzdHIudHJpbSgpKTtcblxuZnVuY3Rpb24gbWF0Y2hIZWFkZXJWYWx1ZShjb250ZXh0LCB2YWx1ZSwgaGVhZGVyLCBmaWx0ZXIsIGlzSGVhZGVyTmFtZUZpbHRlcikge1xuICBpZiAodXRpbHMuaXNGdW5jdGlvbihmaWx0ZXIpKSB7XG4gICAgcmV0dXJuIGZpbHRlci5jYWxsKHRoaXMsIHZhbHVlLCBoZWFkZXIpO1xuICB9XG5cbiAgaWYgKGlzSGVhZGVyTmFtZUZpbHRlcikge1xuICAgIHZhbHVlID0gaGVhZGVyO1xuICB9XG5cbiAgaWYgKCF1dGlscy5pc1N0cmluZyh2YWx1ZSkpIHJldHVybjtcblxuICBpZiAodXRpbHMuaXNTdHJpbmcoZmlsdGVyKSkge1xuICAgIHJldHVybiB2YWx1ZS5pbmRleE9mKGZpbHRlcikgIT09IC0xO1xuICB9XG5cbiAgaWYgKHV0aWxzLmlzUmVnRXhwKGZpbHRlcikpIHtcbiAgICByZXR1cm4gZmlsdGVyLnRlc3QodmFsdWUpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGZvcm1hdEhlYWRlcihoZWFkZXIpIHtcbiAgcmV0dXJuIGhlYWRlci50cmltKClcbiAgICAudG9Mb3dlckNhc2UoKS5yZXBsYWNlKC8oW2EtelxcZF0pKFxcdyopL2csICh3LCBjaGFyLCBzdHIpID0+IHtcbiAgICAgIHJldHVybiBjaGFyLnRvVXBwZXJDYXNlKCkgKyBzdHI7XG4gICAgfSk7XG59XG5cbmZ1bmN0aW9uIGJ1aWxkQWNjZXNzb3JzKG9iaiwgaGVhZGVyKSB7XG4gIGNvbnN0IGFjY2Vzc29yTmFtZSA9IHV0aWxzLnRvQ2FtZWxDYXNlKCcgJyArIGhlYWRlcik7XG5cbiAgWydnZXQnLCAnc2V0JywgJ2hhcyddLmZvckVhY2gobWV0aG9kTmFtZSA9PiB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwgbWV0aG9kTmFtZSArIGFjY2Vzc29yTmFtZSwge1xuICAgICAgdmFsdWU6IGZ1bmN0aW9uKGFyZzEsIGFyZzIsIGFyZzMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXNbbWV0aG9kTmFtZV0uY2FsbCh0aGlzLCBoZWFkZXIsIGFyZzEsIGFyZzIsIGFyZzMpO1xuICAgICAgfSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICB9KTtcbn1cblxuY2xhc3MgQXhpb3NIZWFkZXJzIHtcbiAgY29uc3RydWN0b3IoaGVhZGVycykge1xuICAgIGhlYWRlcnMgJiYgdGhpcy5zZXQoaGVhZGVycyk7XG4gIH1cblxuICBzZXQoaGVhZGVyLCB2YWx1ZU9yUmV3cml0ZSwgcmV3cml0ZSkge1xuICAgIGNvbnN0IHNlbGYgPSB0aGlzO1xuXG4gICAgZnVuY3Rpb24gc2V0SGVhZGVyKF92YWx1ZSwgX2hlYWRlciwgX3Jld3JpdGUpIHtcbiAgICAgIGNvbnN0IGxIZWFkZXIgPSBub3JtYWxpemVIZWFkZXIoX2hlYWRlcik7XG5cbiAgICAgIGlmICghbEhlYWRlcikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2hlYWRlciBuYW1lIG11c3QgYmUgYSBub24tZW1wdHkgc3RyaW5nJyk7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IGtleSA9IHV0aWxzLmZpbmRLZXkoc2VsZiwgbEhlYWRlcik7XG5cbiAgICAgIGlmKCFrZXkgfHwgc2VsZltrZXldID09PSB1bmRlZmluZWQgfHwgX3Jld3JpdGUgPT09IHRydWUgfHwgKF9yZXdyaXRlID09PSB1bmRlZmluZWQgJiYgc2VsZltrZXldICE9PSBmYWxzZSkpIHtcbiAgICAgICAgc2VsZltrZXkgfHwgX2hlYWRlcl0gPSBub3JtYWxpemVWYWx1ZShfdmFsdWUpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGNvbnN0IHNldEhlYWRlcnMgPSAoaGVhZGVycywgX3Jld3JpdGUpID0+XG4gICAgICB1dGlscy5mb3JFYWNoKGhlYWRlcnMsIChfdmFsdWUsIF9oZWFkZXIpID0+IHNldEhlYWRlcihfdmFsdWUsIF9oZWFkZXIsIF9yZXdyaXRlKSk7XG5cbiAgICBpZiAodXRpbHMuaXNQbGFpbk9iamVjdChoZWFkZXIpIHx8IGhlYWRlciBpbnN0YW5jZW9mIHRoaXMuY29uc3RydWN0b3IpIHtcbiAgICAgIHNldEhlYWRlcnMoaGVhZGVyLCB2YWx1ZU9yUmV3cml0ZSlcbiAgICB9IGVsc2UgaWYodXRpbHMuaXNTdHJpbmcoaGVhZGVyKSAmJiAoaGVhZGVyID0gaGVhZGVyLnRyaW0oKSkgJiYgIWlzVmFsaWRIZWFkZXJOYW1lKGhlYWRlcikpIHtcbiAgICAgIHNldEhlYWRlcnMocGFyc2VIZWFkZXJzKGhlYWRlciksIHZhbHVlT3JSZXdyaXRlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaGVhZGVyICE9IG51bGwgJiYgc2V0SGVhZGVyKHZhbHVlT3JSZXdyaXRlLCBoZWFkZXIsIHJld3JpdGUpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgZ2V0KGhlYWRlciwgcGFyc2VyKSB7XG4gICAgaGVhZGVyID0gbm9ybWFsaXplSGVhZGVyKGhlYWRlcik7XG5cbiAgICBpZiAoaGVhZGVyKSB7XG4gICAgICBjb25zdCBrZXkgPSB1dGlscy5maW5kS2V5KHRoaXMsIGhlYWRlcik7XG5cbiAgICAgIGlmIChrZXkpIHtcbiAgICAgICAgY29uc3QgdmFsdWUgPSB0aGlzW2tleV07XG5cbiAgICAgICAgaWYgKCFwYXJzZXIpIHtcbiAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAocGFyc2VyID09PSB0cnVlKSB7XG4gICAgICAgICAgcmV0dXJuIHBhcnNlVG9rZW5zKHZhbHVlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh1dGlscy5pc0Z1bmN0aW9uKHBhcnNlcikpIHtcbiAgICAgICAgICByZXR1cm4gcGFyc2VyLmNhbGwodGhpcywgdmFsdWUsIGtleSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodXRpbHMuaXNSZWdFeHAocGFyc2VyKSkge1xuICAgICAgICAgIHJldHVybiBwYXJzZXIuZXhlYyh2YWx1ZSk7XG4gICAgICAgIH1cblxuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdwYXJzZXIgbXVzdCBiZSBib29sZWFufHJlZ2V4cHxmdW5jdGlvbicpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGhhcyhoZWFkZXIsIG1hdGNoZXIpIHtcbiAgICBoZWFkZXIgPSBub3JtYWxpemVIZWFkZXIoaGVhZGVyKTtcblxuICAgIGlmIChoZWFkZXIpIHtcbiAgICAgIGNvbnN0IGtleSA9IHV0aWxzLmZpbmRLZXkodGhpcywgaGVhZGVyKTtcblxuICAgICAgcmV0dXJuICEhKGtleSAmJiB0aGlzW2tleV0gIT09IHVuZGVmaW5lZCAmJiAoIW1hdGNoZXIgfHwgbWF0Y2hIZWFkZXJWYWx1ZSh0aGlzLCB0aGlzW2tleV0sIGtleSwgbWF0Y2hlcikpKTtcbiAgICB9XG5cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBkZWxldGUoaGVhZGVyLCBtYXRjaGVyKSB7XG4gICAgY29uc3Qgc2VsZiA9IHRoaXM7XG4gICAgbGV0IGRlbGV0ZWQgPSBmYWxzZTtcblxuICAgIGZ1bmN0aW9uIGRlbGV0ZUhlYWRlcihfaGVhZGVyKSB7XG4gICAgICBfaGVhZGVyID0gbm9ybWFsaXplSGVhZGVyKF9oZWFkZXIpO1xuXG4gICAgICBpZiAoX2hlYWRlcikge1xuICAgICAgICBjb25zdCBrZXkgPSB1dGlscy5maW5kS2V5KHNlbGYsIF9oZWFkZXIpO1xuXG4gICAgICAgIGlmIChrZXkgJiYgKCFtYXRjaGVyIHx8IG1hdGNoSGVhZGVyVmFsdWUoc2VsZiwgc2VsZltrZXldLCBrZXksIG1hdGNoZXIpKSkge1xuICAgICAgICAgIGRlbGV0ZSBzZWxmW2tleV07XG5cbiAgICAgICAgICBkZWxldGVkID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmICh1dGlscy5pc0FycmF5KGhlYWRlcikpIHtcbiAgICAgIGhlYWRlci5mb3JFYWNoKGRlbGV0ZUhlYWRlcik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGRlbGV0ZUhlYWRlcihoZWFkZXIpO1xuICAgIH1cblxuICAgIHJldHVybiBkZWxldGVkO1xuICB9XG5cbiAgY2xlYXIobWF0Y2hlcikge1xuICAgIGNvbnN0IGtleXMgPSBPYmplY3Qua2V5cyh0aGlzKTtcbiAgICBsZXQgaSA9IGtleXMubGVuZ3RoO1xuICAgIGxldCBkZWxldGVkID0gZmFsc2U7XG5cbiAgICB3aGlsZSAoaS0tKSB7XG4gICAgICBjb25zdCBrZXkgPSBrZXlzW2ldO1xuICAgICAgaWYoIW1hdGNoZXIgfHwgbWF0Y2hIZWFkZXJWYWx1ZSh0aGlzLCB0aGlzW2tleV0sIGtleSwgbWF0Y2hlciwgdHJ1ZSkpIHtcbiAgICAgICAgZGVsZXRlIHRoaXNba2V5XTtcbiAgICAgICAgZGVsZXRlZCA9IHRydWU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGRlbGV0ZWQ7XG4gIH1cblxuICBub3JtYWxpemUoZm9ybWF0KSB7XG4gICAgY29uc3Qgc2VsZiA9IHRoaXM7XG4gICAgY29uc3QgaGVhZGVycyA9IHt9O1xuXG4gICAgdXRpbHMuZm9yRWFjaCh0aGlzLCAodmFsdWUsIGhlYWRlcikgPT4ge1xuICAgICAgY29uc3Qga2V5ID0gdXRpbHMuZmluZEtleShoZWFkZXJzLCBoZWFkZXIpO1xuXG4gICAgICBpZiAoa2V5KSB7XG4gICAgICAgIHNlbGZba2V5XSA9IG5vcm1hbGl6ZVZhbHVlKHZhbHVlKTtcbiAgICAgICAgZGVsZXRlIHNlbGZbaGVhZGVyXTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBub3JtYWxpemVkID0gZm9ybWF0ID8gZm9ybWF0SGVhZGVyKGhlYWRlcikgOiBTdHJpbmcoaGVhZGVyKS50cmltKCk7XG5cbiAgICAgIGlmIChub3JtYWxpemVkICE9PSBoZWFkZXIpIHtcbiAgICAgICAgZGVsZXRlIHNlbGZbaGVhZGVyXTtcbiAgICAgIH1cblxuICAgICAgc2VsZltub3JtYWxpemVkXSA9IG5vcm1hbGl6ZVZhbHVlKHZhbHVlKTtcblxuICAgICAgaGVhZGVyc1tub3JtYWxpemVkXSA9IHRydWU7XG4gICAgfSk7XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIGNvbmNhdCguLi50YXJnZXRzKSB7XG4gICAgcmV0dXJuIHRoaXMuY29uc3RydWN0b3IuY29uY2F0KHRoaXMsIC4uLnRhcmdldHMpO1xuICB9XG5cbiAgdG9KU09OKGFzU3RyaW5ncykge1xuICAgIGNvbnN0IG9iaiA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG5cbiAgICB1dGlscy5mb3JFYWNoKHRoaXMsICh2YWx1ZSwgaGVhZGVyKSA9PiB7XG4gICAgICB2YWx1ZSAhPSBudWxsICYmIHZhbHVlICE9PSBmYWxzZSAmJiAob2JqW2hlYWRlcl0gPSBhc1N0cmluZ3MgJiYgdXRpbHMuaXNBcnJheSh2YWx1ZSkgPyB2YWx1ZS5qb2luKCcsICcpIDogdmFsdWUpO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIG9iajtcbiAgfVxuXG4gIFtTeW1ib2wuaXRlcmF0b3JdKCkge1xuICAgIHJldHVybiBPYmplY3QuZW50cmllcyh0aGlzLnRvSlNPTigpKVtTeW1ib2wuaXRlcmF0b3JdKCk7XG4gIH1cblxuICB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gT2JqZWN0LmVudHJpZXModGhpcy50b0pTT04oKSkubWFwKChbaGVhZGVyLCB2YWx1ZV0pID0+IGhlYWRlciArICc6ICcgKyB2YWx1ZSkuam9pbignXFxuJyk7XG4gIH1cblxuICBnZXQgW1N5bWJvbC50b1N0cmluZ1RhZ10oKSB7XG4gICAgcmV0dXJuICdBeGlvc0hlYWRlcnMnO1xuICB9XG5cbiAgc3RhdGljIGZyb20odGhpbmcpIHtcbiAgICByZXR1cm4gdGhpbmcgaW5zdGFuY2VvZiB0aGlzID8gdGhpbmcgOiBuZXcgdGhpcyh0aGluZyk7XG4gIH1cblxuICBzdGF0aWMgY29uY2F0KGZpcnN0LCAuLi50YXJnZXRzKSB7XG4gICAgY29uc3QgY29tcHV0ZWQgPSBuZXcgdGhpcyhmaXJzdCk7XG5cbiAgICB0YXJnZXRzLmZvckVhY2goKHRhcmdldCkgPT4gY29tcHV0ZWQuc2V0KHRhcmdldCkpO1xuXG4gICAgcmV0dXJuIGNvbXB1dGVkO1xuICB9XG5cbiAgc3RhdGljIGFjY2Vzc29yKGhlYWRlcikge1xuICAgIGNvbnN0IGludGVybmFscyA9IHRoaXNbJGludGVybmFsc10gPSAodGhpc1skaW50ZXJuYWxzXSA9IHtcbiAgICAgIGFjY2Vzc29yczoge31cbiAgICB9KTtcblxuICAgIGNvbnN0IGFjY2Vzc29ycyA9IGludGVybmFscy5hY2Nlc3NvcnM7XG4gICAgY29uc3QgcHJvdG90eXBlID0gdGhpcy5wcm90b3R5cGU7XG5cbiAgICBmdW5jdGlvbiBkZWZpbmVBY2Nlc3NvcihfaGVhZGVyKSB7XG4gICAgICBjb25zdCBsSGVhZGVyID0gbm9ybWFsaXplSGVhZGVyKF9oZWFkZXIpO1xuXG4gICAgICBpZiAoIWFjY2Vzc29yc1tsSGVhZGVyXSkge1xuICAgICAgICBidWlsZEFjY2Vzc29ycyhwcm90b3R5cGUsIF9oZWFkZXIpO1xuICAgICAgICBhY2Nlc3NvcnNbbEhlYWRlcl0gPSB0cnVlO1xuICAgICAgfVxuICAgIH1cblxuICAgIHV0aWxzLmlzQXJyYXkoaGVhZGVyKSA/IGhlYWRlci5mb3JFYWNoKGRlZmluZUFjY2Vzc29yKSA6IGRlZmluZUFjY2Vzc29yKGhlYWRlcik7XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfVxufVxuXG5BeGlvc0hlYWRlcnMuYWNjZXNzb3IoWydDb250ZW50LVR5cGUnLCAnQ29udGVudC1MZW5ndGgnLCAnQWNjZXB0JywgJ0FjY2VwdC1FbmNvZGluZycsICdVc2VyLUFnZW50JywgJ0F1dGhvcml6YXRpb24nXSk7XG5cbi8vIHJlc2VydmVkIG5hbWVzIGhvdGZpeFxudXRpbHMucmVkdWNlRGVzY3JpcHRvcnMoQXhpb3NIZWFkZXJzLnByb3RvdHlwZSwgKHt2YWx1ZX0sIGtleSkgPT4ge1xuICBsZXQgbWFwcGVkID0ga2V5WzBdLnRvVXBwZXJDYXNlKCkgKyBrZXkuc2xpY2UoMSk7IC8vIG1hcCBgc2V0YCA9PiBgU2V0YFxuICByZXR1cm4ge1xuICAgIGdldDogKCkgPT4gdmFsdWUsXG4gICAgc2V0KGhlYWRlclZhbHVlKSB7XG4gICAgICB0aGlzW21hcHBlZF0gPSBoZWFkZXJWYWx1ZTtcbiAgICB9XG4gIH1cbn0pO1xuXG51dGlscy5mcmVlemVNZXRob2RzKEF4aW9zSGVhZGVycyk7XG5cbmV4cG9ydCBkZWZhdWx0IEF4aW9zSGVhZGVycztcbiIsIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IHV0aWxzIGZyb20gJy4vLi4vdXRpbHMuanMnO1xuaW1wb3J0IGRlZmF1bHRzIGZyb20gJy4uL2RlZmF1bHRzL2luZGV4LmpzJztcbmltcG9ydCBBeGlvc0hlYWRlcnMgZnJvbSAnLi4vY29yZS9BeGlvc0hlYWRlcnMuanMnO1xuXG4vKipcbiAqIFRyYW5zZm9ybSB0aGUgZGF0YSBmb3IgYSByZXF1ZXN0IG9yIGEgcmVzcG9uc2VcbiAqXG4gKiBAcGFyYW0ge0FycmF5fEZ1bmN0aW9ufSBmbnMgQSBzaW5nbGUgZnVuY3Rpb24gb3IgQXJyYXkgb2YgZnVuY3Rpb25zXG4gKiBAcGFyYW0gez9PYmplY3R9IHJlc3BvbnNlIFRoZSByZXNwb25zZSBvYmplY3RcbiAqXG4gKiBAcmV0dXJucyB7Kn0gVGhlIHJlc3VsdGluZyB0cmFuc2Zvcm1lZCBkYXRhXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHRyYW5zZm9ybURhdGEoZm5zLCByZXNwb25zZSkge1xuICBjb25zdCBjb25maWcgPSB0aGlzIHx8IGRlZmF1bHRzO1xuICBjb25zdCBjb250ZXh0ID0gcmVzcG9uc2UgfHwgY29uZmlnO1xuICBjb25zdCBoZWFkZXJzID0gQXhpb3NIZWFkZXJzLmZyb20oY29udGV4dC5oZWFkZXJzKTtcbiAgbGV0IGRhdGEgPSBjb250ZXh0LmRhdGE7XG5cbiAgdXRpbHMuZm9yRWFjaChmbnMsIGZ1bmN0aW9uIHRyYW5zZm9ybShmbikge1xuICAgIGRhdGEgPSBmbi5jYWxsKGNvbmZpZywgZGF0YSwgaGVhZGVycy5ub3JtYWxpemUoKSwgcmVzcG9uc2UgPyByZXNwb25zZS5zdGF0dXMgOiB1bmRlZmluZWQpO1xuICB9KTtcblxuICBoZWFkZXJzLm5vcm1hbGl6ZSgpO1xuXG4gIHJldHVybiBkYXRhO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBpc0NhbmNlbCh2YWx1ZSkge1xuICByZXR1cm4gISEodmFsdWUgJiYgdmFsdWUuX19DQU5DRUxfXyk7XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbmltcG9ydCBBeGlvc0Vycm9yIGZyb20gJy4uL2NvcmUvQXhpb3NFcnJvci5qcyc7XG5pbXBvcnQgdXRpbHMgZnJvbSAnLi4vdXRpbHMuanMnO1xuXG4vKipcbiAqIEEgYENhbmNlbGVkRXJyb3JgIGlzIGFuIG9iamVjdCB0aGF0IGlzIHRocm93biB3aGVuIGFuIG9wZXJhdGlvbiBpcyBjYW5jZWxlZC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZz19IG1lc3NhZ2UgVGhlIG1lc3NhZ2UuXG4gKiBAcGFyYW0ge09iamVjdD19IGNvbmZpZyBUaGUgY29uZmlnLlxuICogQHBhcmFtIHtPYmplY3Q9fSByZXF1ZXN0IFRoZSByZXF1ZXN0LlxuICpcbiAqIEByZXR1cm5zIHtDYW5jZWxlZEVycm9yfSBUaGUgY3JlYXRlZCBlcnJvci5cbiAqL1xuZnVuY3Rpb24gQ2FuY2VsZWRFcnJvcihtZXNzYWdlLCBjb25maWcsIHJlcXVlc3QpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWVxLW51bGwsZXFlcWVxXG4gIEF4aW9zRXJyb3IuY2FsbCh0aGlzLCBtZXNzYWdlID09IG51bGwgPyAnY2FuY2VsZWQnIDogbWVzc2FnZSwgQXhpb3NFcnJvci5FUlJfQ0FOQ0VMRUQsIGNvbmZpZywgcmVxdWVzdCk7XG4gIHRoaXMubmFtZSA9ICdDYW5jZWxlZEVycm9yJztcbn1cblxudXRpbHMuaW5oZXJpdHMoQ2FuY2VsZWRFcnJvciwgQXhpb3NFcnJvciwge1xuICBfX0NBTkNFTF9fOiB0cnVlXG59KTtcblxuZXhwb3J0IGRlZmF1bHQgQ2FuY2VsZWRFcnJvcjtcbiIsIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IEF4aW9zRXJyb3IgZnJvbSAnLi9BeGlvc0Vycm9yLmpzJztcblxuLyoqXG4gKiBSZXNvbHZlIG9yIHJlamVjdCBhIFByb21pc2UgYmFzZWQgb24gcmVzcG9uc2Ugc3RhdHVzLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IHJlc29sdmUgQSBmdW5jdGlvbiB0aGF0IHJlc29sdmVzIHRoZSBwcm9taXNlLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gcmVqZWN0IEEgZnVuY3Rpb24gdGhhdCByZWplY3RzIHRoZSBwcm9taXNlLlxuICogQHBhcmFtIHtvYmplY3R9IHJlc3BvbnNlIFRoZSByZXNwb25zZS5cbiAqXG4gKiBAcmV0dXJucyB7b2JqZWN0fSBUaGUgcmVzcG9uc2UuXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHNldHRsZShyZXNvbHZlLCByZWplY3QsIHJlc3BvbnNlKSB7XG4gIGNvbnN0IHZhbGlkYXRlU3RhdHVzID0gcmVzcG9uc2UuY29uZmlnLnZhbGlkYXRlU3RhdHVzO1xuICBpZiAoIXJlc3BvbnNlLnN0YXR1cyB8fCAhdmFsaWRhdGVTdGF0dXMgfHwgdmFsaWRhdGVTdGF0dXMocmVzcG9uc2Uuc3RhdHVzKSkge1xuICAgIHJlc29sdmUocmVzcG9uc2UpO1xuICB9IGVsc2Uge1xuICAgIHJlamVjdChuZXcgQXhpb3NFcnJvcihcbiAgICAgICdSZXF1ZXN0IGZhaWxlZCB3aXRoIHN0YXR1cyBjb2RlICcgKyByZXNwb25zZS5zdGF0dXMsXG4gICAgICBbQXhpb3NFcnJvci5FUlJfQkFEX1JFUVVFU1QsIEF4aW9zRXJyb3IuRVJSX0JBRF9SRVNQT05TRV1bTWF0aC5mbG9vcihyZXNwb25zZS5zdGF0dXMgLyAxMDApIC0gNF0sXG4gICAgICByZXNwb25zZS5jb25maWcsXG4gICAgICByZXNwb25zZS5yZXF1ZXN0LFxuICAgICAgcmVzcG9uc2VcbiAgICApKTtcbiAgfVxufVxuIiwiaW1wb3J0IHV0aWxzIGZyb20gJy4vLi4vdXRpbHMuanMnO1xuaW1wb3J0IHBsYXRmb3JtIGZyb20gJy4uL3BsYXRmb3JtL2luZGV4LmpzJztcblxuZXhwb3J0IGRlZmF1bHQgcGxhdGZvcm0uaGFzU3RhbmRhcmRCcm93c2VyRW52ID9cblxuICAvLyBTdGFuZGFyZCBicm93c2VyIGVudnMgc3VwcG9ydCBkb2N1bWVudC5jb29raWVcbiAge1xuICAgIHdyaXRlKG5hbWUsIHZhbHVlLCBleHBpcmVzLCBwYXRoLCBkb21haW4sIHNlY3VyZSkge1xuICAgICAgY29uc3QgY29va2llID0gW25hbWUgKyAnPScgKyBlbmNvZGVVUklDb21wb25lbnQodmFsdWUpXTtcblxuICAgICAgdXRpbHMuaXNOdW1iZXIoZXhwaXJlcykgJiYgY29va2llLnB1c2goJ2V4cGlyZXM9JyArIG5ldyBEYXRlKGV4cGlyZXMpLnRvR01UU3RyaW5nKCkpO1xuXG4gICAgICB1dGlscy5pc1N0cmluZyhwYXRoKSAmJiBjb29raWUucHVzaCgncGF0aD0nICsgcGF0aCk7XG5cbiAgICAgIHV0aWxzLmlzU3RyaW5nKGRvbWFpbikgJiYgY29va2llLnB1c2goJ2RvbWFpbj0nICsgZG9tYWluKTtcblxuICAgICAgc2VjdXJlID09PSB0cnVlICYmIGNvb2tpZS5wdXNoKCdzZWN1cmUnKTtcblxuICAgICAgZG9jdW1lbnQuY29va2llID0gY29va2llLmpvaW4oJzsgJyk7XG4gICAgfSxcblxuICAgIHJlYWQobmFtZSkge1xuICAgICAgY29uc3QgbWF0Y2ggPSBkb2N1bWVudC5jb29raWUubWF0Y2gobmV3IFJlZ0V4cCgnKF58O1xcXFxzKikoJyArIG5hbWUgKyAnKT0oW147XSopJykpO1xuICAgICAgcmV0dXJuIChtYXRjaCA/IGRlY29kZVVSSUNvbXBvbmVudChtYXRjaFszXSkgOiBudWxsKTtcbiAgICB9LFxuXG4gICAgcmVtb3ZlKG5hbWUpIHtcbiAgICAgIHRoaXMud3JpdGUobmFtZSwgJycsIERhdGUubm93KCkgLSA4NjQwMDAwMCk7XG4gICAgfVxuICB9XG5cbiAgOlxuXG4gIC8vIE5vbi1zdGFuZGFyZCBicm93c2VyIGVudiAod2ViIHdvcmtlcnMsIHJlYWN0LW5hdGl2ZSkgbGFjayBuZWVkZWQgc3VwcG9ydC5cbiAge1xuICAgIHdyaXRlKCkge30sXG4gICAgcmVhZCgpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH0sXG4gICAgcmVtb3ZlKCkge31cbiAgfTtcblxuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIERldGVybWluZXMgd2hldGhlciB0aGUgc3BlY2lmaWVkIFVSTCBpcyBhYnNvbHV0ZVxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB1cmwgVGhlIFVSTCB0byB0ZXN0XG4gKlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdGhlIHNwZWNpZmllZCBVUkwgaXMgYWJzb2x1dGUsIG90aGVyd2lzZSBmYWxzZVxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBpc0Fic29sdXRlVVJMKHVybCkge1xuICAvLyBBIFVSTCBpcyBjb25zaWRlcmVkIGFic29sdXRlIGlmIGl0IGJlZ2lucyB3aXRoIFwiPHNjaGVtZT46Ly9cIiBvciBcIi8vXCIgKHByb3RvY29sLXJlbGF0aXZlIFVSTCkuXG4gIC8vIFJGQyAzOTg2IGRlZmluZXMgc2NoZW1lIG5hbWUgYXMgYSBzZXF1ZW5jZSBvZiBjaGFyYWN0ZXJzIGJlZ2lubmluZyB3aXRoIGEgbGV0dGVyIGFuZCBmb2xsb3dlZFxuICAvLyBieSBhbnkgY29tYmluYXRpb24gb2YgbGV0dGVycywgZGlnaXRzLCBwbHVzLCBwZXJpb2QsIG9yIGh5cGhlbi5cbiAgcmV0dXJuIC9eKFthLXpdW2EtelxcZCtcXC0uXSo6KT9cXC9cXC8vaS50ZXN0KHVybCk7XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogQ3JlYXRlcyBhIG5ldyBVUkwgYnkgY29tYmluaW5nIHRoZSBzcGVjaWZpZWQgVVJMc1xuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBiYXNlVVJMIFRoZSBiYXNlIFVSTFxuICogQHBhcmFtIHtzdHJpbmd9IHJlbGF0aXZlVVJMIFRoZSByZWxhdGl2ZSBVUkxcbiAqXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgY29tYmluZWQgVVJMXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNvbWJpbmVVUkxzKGJhc2VVUkwsIHJlbGF0aXZlVVJMKSB7XG4gIHJldHVybiByZWxhdGl2ZVVSTFxuICAgID8gYmFzZVVSTC5yZXBsYWNlKC9cXC8/XFwvJC8sICcnKSArICcvJyArIHJlbGF0aXZlVVJMLnJlcGxhY2UoL15cXC8rLywgJycpXG4gICAgOiBiYXNlVVJMO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgaXNBYnNvbHV0ZVVSTCBmcm9tICcuLi9oZWxwZXJzL2lzQWJzb2x1dGVVUkwuanMnO1xuaW1wb3J0IGNvbWJpbmVVUkxzIGZyb20gJy4uL2hlbHBlcnMvY29tYmluZVVSTHMuanMnO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgVVJMIGJ5IGNvbWJpbmluZyB0aGUgYmFzZVVSTCB3aXRoIHRoZSByZXF1ZXN0ZWRVUkwsXG4gKiBvbmx5IHdoZW4gdGhlIHJlcXVlc3RlZFVSTCBpcyBub3QgYWxyZWFkeSBhbiBhYnNvbHV0ZSBVUkwuXG4gKiBJZiB0aGUgcmVxdWVzdFVSTCBpcyBhYnNvbHV0ZSwgdGhpcyBmdW5jdGlvbiByZXR1cm5zIHRoZSByZXF1ZXN0ZWRVUkwgdW50b3VjaGVkLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBiYXNlVVJMIFRoZSBiYXNlIFVSTFxuICogQHBhcmFtIHtzdHJpbmd9IHJlcXVlc3RlZFVSTCBBYnNvbHV0ZSBvciByZWxhdGl2ZSBVUkwgdG8gY29tYmluZVxuICpcbiAqIEByZXR1cm5zIHtzdHJpbmd9IFRoZSBjb21iaW5lZCBmdWxsIHBhdGhcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gYnVpbGRGdWxsUGF0aChiYXNlVVJMLCByZXF1ZXN0ZWRVUkwpIHtcbiAgaWYgKGJhc2VVUkwgJiYgIWlzQWJzb2x1dGVVUkwocmVxdWVzdGVkVVJMKSkge1xuICAgIHJldHVybiBjb21iaW5lVVJMcyhiYXNlVVJMLCByZXF1ZXN0ZWRVUkwpO1xuICB9XG4gIHJldHVybiByZXF1ZXN0ZWRVUkw7XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbmltcG9ydCB1dGlscyBmcm9tICcuLy4uL3V0aWxzLmpzJztcbmltcG9ydCBwbGF0Zm9ybSBmcm9tICcuLi9wbGF0Zm9ybS9pbmRleC5qcyc7XG5cbmV4cG9ydCBkZWZhdWx0IHBsYXRmb3JtLmhhc1N0YW5kYXJkQnJvd3NlckVudiA/XG5cbi8vIFN0YW5kYXJkIGJyb3dzZXIgZW52cyBoYXZlIGZ1bGwgc3VwcG9ydCBvZiB0aGUgQVBJcyBuZWVkZWQgdG8gdGVzdFxuLy8gd2hldGhlciB0aGUgcmVxdWVzdCBVUkwgaXMgb2YgdGhlIHNhbWUgb3JpZ2luIGFzIGN1cnJlbnQgbG9jYXRpb24uXG4gIChmdW5jdGlvbiBzdGFuZGFyZEJyb3dzZXJFbnYoKSB7XG4gICAgY29uc3QgbXNpZSA9IC8obXNpZXx0cmlkZW50KS9pLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCk7XG4gICAgY29uc3QgdXJsUGFyc2luZ05vZGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdhJyk7XG4gICAgbGV0IG9yaWdpblVSTDtcblxuICAgIC8qKlxuICAgICogUGFyc2UgYSBVUkwgdG8gZGlzY292ZXIgaXRzIGNvbXBvbmVudHNcbiAgICAqXG4gICAgKiBAcGFyYW0ge1N0cmluZ30gdXJsIFRoZSBVUkwgdG8gYmUgcGFyc2VkXG4gICAgKiBAcmV0dXJucyB7T2JqZWN0fVxuICAgICovXG4gICAgZnVuY3Rpb24gcmVzb2x2ZVVSTCh1cmwpIHtcbiAgICAgIGxldCBocmVmID0gdXJsO1xuXG4gICAgICBpZiAobXNpZSkge1xuICAgICAgICAvLyBJRSBuZWVkcyBhdHRyaWJ1dGUgc2V0IHR3aWNlIHRvIG5vcm1hbGl6ZSBwcm9wZXJ0aWVzXG4gICAgICAgIHVybFBhcnNpbmdOb2RlLnNldEF0dHJpYnV0ZSgnaHJlZicsIGhyZWYpO1xuICAgICAgICBocmVmID0gdXJsUGFyc2luZ05vZGUuaHJlZjtcbiAgICAgIH1cblxuICAgICAgdXJsUGFyc2luZ05vZGUuc2V0QXR0cmlidXRlKCdocmVmJywgaHJlZik7XG5cbiAgICAgIC8vIHVybFBhcnNpbmdOb2RlIHByb3ZpZGVzIHRoZSBVcmxVdGlscyBpbnRlcmZhY2UgLSBodHRwOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jdXJsdXRpbHNcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGhyZWY6IHVybFBhcnNpbmdOb2RlLmhyZWYsXG4gICAgICAgIHByb3RvY29sOiB1cmxQYXJzaW5nTm9kZS5wcm90b2NvbCA/IHVybFBhcnNpbmdOb2RlLnByb3RvY29sLnJlcGxhY2UoLzokLywgJycpIDogJycsXG4gICAgICAgIGhvc3Q6IHVybFBhcnNpbmdOb2RlLmhvc3QsXG4gICAgICAgIHNlYXJjaDogdXJsUGFyc2luZ05vZGUuc2VhcmNoID8gdXJsUGFyc2luZ05vZGUuc2VhcmNoLnJlcGxhY2UoL15cXD8vLCAnJykgOiAnJyxcbiAgICAgICAgaGFzaDogdXJsUGFyc2luZ05vZGUuaGFzaCA/IHVybFBhcnNpbmdOb2RlLmhhc2gucmVwbGFjZSgvXiMvLCAnJykgOiAnJyxcbiAgICAgICAgaG9zdG5hbWU6IHVybFBhcnNpbmdOb2RlLmhvc3RuYW1lLFxuICAgICAgICBwb3J0OiB1cmxQYXJzaW5nTm9kZS5wb3J0LFxuICAgICAgICBwYXRobmFtZTogKHVybFBhcnNpbmdOb2RlLnBhdGhuYW1lLmNoYXJBdCgwKSA9PT0gJy8nKSA/XG4gICAgICAgICAgdXJsUGFyc2luZ05vZGUucGF0aG5hbWUgOlxuICAgICAgICAgICcvJyArIHVybFBhcnNpbmdOb2RlLnBhdGhuYW1lXG4gICAgICB9O1xuICAgIH1cblxuICAgIG9yaWdpblVSTCA9IHJlc29sdmVVUkwod2luZG93LmxvY2F0aW9uLmhyZWYpO1xuXG4gICAgLyoqXG4gICAgKiBEZXRlcm1pbmUgaWYgYSBVUkwgc2hhcmVzIHRoZSBzYW1lIG9yaWdpbiBhcyB0aGUgY3VycmVudCBsb2NhdGlvblxuICAgICpcbiAgICAqIEBwYXJhbSB7U3RyaW5nfSByZXF1ZXN0VVJMIFRoZSBVUkwgdG8gdGVzdFxuICAgICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgVVJMIHNoYXJlcyB0aGUgc2FtZSBvcmlnaW4sIG90aGVyd2lzZSBmYWxzZVxuICAgICovXG4gICAgcmV0dXJuIGZ1bmN0aW9uIGlzVVJMU2FtZU9yaWdpbihyZXF1ZXN0VVJMKSB7XG4gICAgICBjb25zdCBwYXJzZWQgPSAodXRpbHMuaXNTdHJpbmcocmVxdWVzdFVSTCkpID8gcmVzb2x2ZVVSTChyZXF1ZXN0VVJMKSA6IHJlcXVlc3RVUkw7XG4gICAgICByZXR1cm4gKHBhcnNlZC5wcm90b2NvbCA9PT0gb3JpZ2luVVJMLnByb3RvY29sICYmXG4gICAgICAgICAgcGFyc2VkLmhvc3QgPT09IG9yaWdpblVSTC5ob3N0KTtcbiAgICB9O1xuICB9KSgpIDpcblxuICAvLyBOb24gc3RhbmRhcmQgYnJvd3NlciBlbnZzICh3ZWIgd29ya2VycywgcmVhY3QtbmF0aXZlKSBsYWNrIG5lZWRlZCBzdXBwb3J0LlxuICAoZnVuY3Rpb24gbm9uU3RhbmRhcmRCcm93c2VyRW52KCkge1xuICAgIHJldHVybiBmdW5jdGlvbiBpc1VSTFNhbWVPcmlnaW4oKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9O1xuICB9KSgpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBwYXJzZVByb3RvY29sKHVybCkge1xuICBjb25zdCBtYXRjaCA9IC9eKFstK1xcd117MSwyNX0pKDo/XFwvXFwvfDopLy5leGVjKHVybCk7XG4gIHJldHVybiBtYXRjaCAmJiBtYXRjaFsxXSB8fCAnJztcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBDYWxjdWxhdGUgZGF0YSBtYXhSYXRlXG4gKiBAcGFyYW0ge051bWJlcn0gW3NhbXBsZXNDb3VudD0gMTBdXG4gKiBAcGFyYW0ge051bWJlcn0gW21pbj0gMTAwMF1cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn1cbiAqL1xuZnVuY3Rpb24gc3BlZWRvbWV0ZXIoc2FtcGxlc0NvdW50LCBtaW4pIHtcbiAgc2FtcGxlc0NvdW50ID0gc2FtcGxlc0NvdW50IHx8IDEwO1xuICBjb25zdCBieXRlcyA9IG5ldyBBcnJheShzYW1wbGVzQ291bnQpO1xuICBjb25zdCB0aW1lc3RhbXBzID0gbmV3IEFycmF5KHNhbXBsZXNDb3VudCk7XG4gIGxldCBoZWFkID0gMDtcbiAgbGV0IHRhaWwgPSAwO1xuICBsZXQgZmlyc3RTYW1wbGVUUztcblxuICBtaW4gPSBtaW4gIT09IHVuZGVmaW5lZCA/IG1pbiA6IDEwMDA7XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIHB1c2goY2h1bmtMZW5ndGgpIHtcbiAgICBjb25zdCBub3cgPSBEYXRlLm5vdygpO1xuXG4gICAgY29uc3Qgc3RhcnRlZEF0ID0gdGltZXN0YW1wc1t0YWlsXTtcblxuICAgIGlmICghZmlyc3RTYW1wbGVUUykge1xuICAgICAgZmlyc3RTYW1wbGVUUyA9IG5vdztcbiAgICB9XG5cbiAgICBieXRlc1toZWFkXSA9IGNodW5rTGVuZ3RoO1xuICAgIHRpbWVzdGFtcHNbaGVhZF0gPSBub3c7XG5cbiAgICBsZXQgaSA9IHRhaWw7XG4gICAgbGV0IGJ5dGVzQ291bnQgPSAwO1xuXG4gICAgd2hpbGUgKGkgIT09IGhlYWQpIHtcbiAgICAgIGJ5dGVzQ291bnQgKz0gYnl0ZXNbaSsrXTtcbiAgICAgIGkgPSBpICUgc2FtcGxlc0NvdW50O1xuICAgIH1cblxuICAgIGhlYWQgPSAoaGVhZCArIDEpICUgc2FtcGxlc0NvdW50O1xuXG4gICAgaWYgKGhlYWQgPT09IHRhaWwpIHtcbiAgICAgIHRhaWwgPSAodGFpbCArIDEpICUgc2FtcGxlc0NvdW50O1xuICAgIH1cblxuICAgIGlmIChub3cgLSBmaXJzdFNhbXBsZVRTIDwgbWluKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3QgcGFzc2VkID0gc3RhcnRlZEF0ICYmIG5vdyAtIHN0YXJ0ZWRBdDtcblxuICAgIHJldHVybiBwYXNzZWQgPyBNYXRoLnJvdW5kKGJ5dGVzQ291bnQgKiAxMDAwIC8gcGFzc2VkKSA6IHVuZGVmaW5lZDtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgc3BlZWRvbWV0ZXI7XG4iLCIndXNlIHN0cmljdCc7XG5cbmltcG9ydCB1dGlscyBmcm9tICcuLy4uL3V0aWxzLmpzJztcbmltcG9ydCBzZXR0bGUgZnJvbSAnLi8uLi9jb3JlL3NldHRsZS5qcyc7XG5pbXBvcnQgY29va2llcyBmcm9tICcuLy4uL2hlbHBlcnMvY29va2llcy5qcyc7XG5pbXBvcnQgYnVpbGRVUkwgZnJvbSAnLi8uLi9oZWxwZXJzL2J1aWxkVVJMLmpzJztcbmltcG9ydCBidWlsZEZ1bGxQYXRoIGZyb20gJy4uL2NvcmUvYnVpbGRGdWxsUGF0aC5qcyc7XG5pbXBvcnQgaXNVUkxTYW1lT3JpZ2luIGZyb20gJy4vLi4vaGVscGVycy9pc1VSTFNhbWVPcmlnaW4uanMnO1xuaW1wb3J0IHRyYW5zaXRpb25hbERlZmF1bHRzIGZyb20gJy4uL2RlZmF1bHRzL3RyYW5zaXRpb25hbC5qcyc7XG5pbXBvcnQgQXhpb3NFcnJvciBmcm9tICcuLi9jb3JlL0F4aW9zRXJyb3IuanMnO1xuaW1wb3J0IENhbmNlbGVkRXJyb3IgZnJvbSAnLi4vY2FuY2VsL0NhbmNlbGVkRXJyb3IuanMnO1xuaW1wb3J0IHBhcnNlUHJvdG9jb2wgZnJvbSAnLi4vaGVscGVycy9wYXJzZVByb3RvY29sLmpzJztcbmltcG9ydCBwbGF0Zm9ybSBmcm9tICcuLi9wbGF0Zm9ybS9pbmRleC5qcyc7XG5pbXBvcnQgQXhpb3NIZWFkZXJzIGZyb20gJy4uL2NvcmUvQXhpb3NIZWFkZXJzLmpzJztcbmltcG9ydCBzcGVlZG9tZXRlciBmcm9tICcuLi9oZWxwZXJzL3NwZWVkb21ldGVyLmpzJztcblxuZnVuY3Rpb24gcHJvZ3Jlc3NFdmVudFJlZHVjZXIobGlzdGVuZXIsIGlzRG93bmxvYWRTdHJlYW0pIHtcbiAgbGV0IGJ5dGVzTm90aWZpZWQgPSAwO1xuICBjb25zdCBfc3BlZWRvbWV0ZXIgPSBzcGVlZG9tZXRlcig1MCwgMjUwKTtcblxuICByZXR1cm4gZSA9PiB7XG4gICAgY29uc3QgbG9hZGVkID0gZS5sb2FkZWQ7XG4gICAgY29uc3QgdG90YWwgPSBlLmxlbmd0aENvbXB1dGFibGUgPyBlLnRvdGFsIDogdW5kZWZpbmVkO1xuICAgIGNvbnN0IHByb2dyZXNzQnl0ZXMgPSBsb2FkZWQgLSBieXRlc05vdGlmaWVkO1xuICAgIGNvbnN0IHJhdGUgPSBfc3BlZWRvbWV0ZXIocHJvZ3Jlc3NCeXRlcyk7XG4gICAgY29uc3QgaW5SYW5nZSA9IGxvYWRlZCA8PSB0b3RhbDtcblxuICAgIGJ5dGVzTm90aWZpZWQgPSBsb2FkZWQ7XG5cbiAgICBjb25zdCBkYXRhID0ge1xuICAgICAgbG9hZGVkLFxuICAgICAgdG90YWwsXG4gICAgICBwcm9ncmVzczogdG90YWwgPyAobG9hZGVkIC8gdG90YWwpIDogdW5kZWZpbmVkLFxuICAgICAgYnl0ZXM6IHByb2dyZXNzQnl0ZXMsXG4gICAgICByYXRlOiByYXRlID8gcmF0ZSA6IHVuZGVmaW5lZCxcbiAgICAgIGVzdGltYXRlZDogcmF0ZSAmJiB0b3RhbCAmJiBpblJhbmdlID8gKHRvdGFsIC0gbG9hZGVkKSAvIHJhdGUgOiB1bmRlZmluZWQsXG4gICAgICBldmVudDogZVxuICAgIH07XG5cbiAgICBkYXRhW2lzRG93bmxvYWRTdHJlYW0gPyAnZG93bmxvYWQnIDogJ3VwbG9hZCddID0gdHJ1ZTtcblxuICAgIGxpc3RlbmVyKGRhdGEpO1xuICB9O1xufVxuXG5jb25zdCBpc1hIUkFkYXB0ZXJTdXBwb3J0ZWQgPSB0eXBlb2YgWE1MSHR0cFJlcXVlc3QgIT09ICd1bmRlZmluZWQnO1xuXG5leHBvcnQgZGVmYXVsdCBpc1hIUkFkYXB0ZXJTdXBwb3J0ZWQgJiYgZnVuY3Rpb24gKGNvbmZpZykge1xuICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gZGlzcGF0Y2hYaHJSZXF1ZXN0KHJlc29sdmUsIHJlamVjdCkge1xuICAgIGxldCByZXF1ZXN0RGF0YSA9IGNvbmZpZy5kYXRhO1xuICAgIGNvbnN0IHJlcXVlc3RIZWFkZXJzID0gQXhpb3NIZWFkZXJzLmZyb20oY29uZmlnLmhlYWRlcnMpLm5vcm1hbGl6ZSgpO1xuICAgIGxldCB7cmVzcG9uc2VUeXBlLCB3aXRoWFNSRlRva2VufSA9IGNvbmZpZztcbiAgICBsZXQgb25DYW5jZWxlZDtcbiAgICBmdW5jdGlvbiBkb25lKCkge1xuICAgICAgaWYgKGNvbmZpZy5jYW5jZWxUb2tlbikge1xuICAgICAgICBjb25maWcuY2FuY2VsVG9rZW4udW5zdWJzY3JpYmUob25DYW5jZWxlZCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChjb25maWcuc2lnbmFsKSB7XG4gICAgICAgIGNvbmZpZy5zaWduYWwucmVtb3ZlRXZlbnRMaXN0ZW5lcignYWJvcnQnLCBvbkNhbmNlbGVkKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBsZXQgY29udGVudFR5cGU7XG5cbiAgICBpZiAodXRpbHMuaXNGb3JtRGF0YShyZXF1ZXN0RGF0YSkpIHtcbiAgICAgIGlmIChwbGF0Zm9ybS5oYXNTdGFuZGFyZEJyb3dzZXJFbnYgfHwgcGxhdGZvcm0uaGFzU3RhbmRhcmRCcm93c2VyV2ViV29ya2VyRW52KSB7XG4gICAgICAgIHJlcXVlc3RIZWFkZXJzLnNldENvbnRlbnRUeXBlKGZhbHNlKTsgLy8gTGV0IHRoZSBicm93c2VyIHNldCBpdFxuICAgICAgfSBlbHNlIGlmICgoY29udGVudFR5cGUgPSByZXF1ZXN0SGVhZGVycy5nZXRDb250ZW50VHlwZSgpKSAhPT0gZmFsc2UpIHtcbiAgICAgICAgLy8gZml4IHNlbWljb2xvbiBkdXBsaWNhdGlvbiBpc3N1ZSBmb3IgUmVhY3ROYXRpdmUgRm9ybURhdGEgaW1wbGVtZW50YXRpb25cbiAgICAgICAgY29uc3QgW3R5cGUsIC4uLnRva2Vuc10gPSBjb250ZW50VHlwZSA/IGNvbnRlbnRUeXBlLnNwbGl0KCc7JykubWFwKHRva2VuID0+IHRva2VuLnRyaW0oKSkuZmlsdGVyKEJvb2xlYW4pIDogW107XG4gICAgICAgIHJlcXVlc3RIZWFkZXJzLnNldENvbnRlbnRUeXBlKFt0eXBlIHx8ICdtdWx0aXBhcnQvZm9ybS1kYXRhJywgLi4udG9rZW5zXS5qb2luKCc7ICcpKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBsZXQgcmVxdWVzdCA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xuXG4gICAgLy8gSFRUUCBiYXNpYyBhdXRoZW50aWNhdGlvblxuICAgIGlmIChjb25maWcuYXV0aCkge1xuICAgICAgY29uc3QgdXNlcm5hbWUgPSBjb25maWcuYXV0aC51c2VybmFtZSB8fCAnJztcbiAgICAgIGNvbnN0IHBhc3N3b3JkID0gY29uZmlnLmF1dGgucGFzc3dvcmQgPyB1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoY29uZmlnLmF1dGgucGFzc3dvcmQpKSA6ICcnO1xuICAgICAgcmVxdWVzdEhlYWRlcnMuc2V0KCdBdXRob3JpemF0aW9uJywgJ0Jhc2ljICcgKyBidG9hKHVzZXJuYW1lICsgJzonICsgcGFzc3dvcmQpKTtcbiAgICB9XG5cbiAgICBjb25zdCBmdWxsUGF0aCA9IGJ1aWxkRnVsbFBhdGgoY29uZmlnLmJhc2VVUkwsIGNvbmZpZy51cmwpO1xuXG4gICAgcmVxdWVzdC5vcGVuKGNvbmZpZy5tZXRob2QudG9VcHBlckNhc2UoKSwgYnVpbGRVUkwoZnVsbFBhdGgsIGNvbmZpZy5wYXJhbXMsIGNvbmZpZy5wYXJhbXNTZXJpYWxpemVyKSwgdHJ1ZSk7XG5cbiAgICAvLyBTZXQgdGhlIHJlcXVlc3QgdGltZW91dCBpbiBNU1xuICAgIHJlcXVlc3QudGltZW91dCA9IGNvbmZpZy50aW1lb3V0O1xuXG4gICAgZnVuY3Rpb24gb25sb2FkZW5kKCkge1xuICAgICAgaWYgKCFyZXF1ZXN0KSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIC8vIFByZXBhcmUgdGhlIHJlc3BvbnNlXG4gICAgICBjb25zdCByZXNwb25zZUhlYWRlcnMgPSBBeGlvc0hlYWRlcnMuZnJvbShcbiAgICAgICAgJ2dldEFsbFJlc3BvbnNlSGVhZGVycycgaW4gcmVxdWVzdCAmJiByZXF1ZXN0LmdldEFsbFJlc3BvbnNlSGVhZGVycygpXG4gICAgICApO1xuICAgICAgY29uc3QgcmVzcG9uc2VEYXRhID0gIXJlc3BvbnNlVHlwZSB8fCByZXNwb25zZVR5cGUgPT09ICd0ZXh0JyB8fCByZXNwb25zZVR5cGUgPT09ICdqc29uJyA/XG4gICAgICAgIHJlcXVlc3QucmVzcG9uc2VUZXh0IDogcmVxdWVzdC5yZXNwb25zZTtcbiAgICAgIGNvbnN0IHJlc3BvbnNlID0ge1xuICAgICAgICBkYXRhOiByZXNwb25zZURhdGEsXG4gICAgICAgIHN0YXR1czogcmVxdWVzdC5zdGF0dXMsXG4gICAgICAgIHN0YXR1c1RleHQ6IHJlcXVlc3Quc3RhdHVzVGV4dCxcbiAgICAgICAgaGVhZGVyczogcmVzcG9uc2VIZWFkZXJzLFxuICAgICAgICBjb25maWcsXG4gICAgICAgIHJlcXVlc3RcbiAgICAgIH07XG5cbiAgICAgIHNldHRsZShmdW5jdGlvbiBfcmVzb2x2ZSh2YWx1ZSkge1xuICAgICAgICByZXNvbHZlKHZhbHVlKTtcbiAgICAgICAgZG9uZSgpO1xuICAgICAgfSwgZnVuY3Rpb24gX3JlamVjdChlcnIpIHtcbiAgICAgICAgcmVqZWN0KGVycik7XG4gICAgICAgIGRvbmUoKTtcbiAgICAgIH0sIHJlc3BvbnNlKTtcblxuICAgICAgLy8gQ2xlYW4gdXAgcmVxdWVzdFxuICAgICAgcmVxdWVzdCA9IG51bGw7XG4gICAgfVxuXG4gICAgaWYgKCdvbmxvYWRlbmQnIGluIHJlcXVlc3QpIHtcbiAgICAgIC8vIFVzZSBvbmxvYWRlbmQgaWYgYXZhaWxhYmxlXG4gICAgICByZXF1ZXN0Lm9ubG9hZGVuZCA9IG9ubG9hZGVuZDtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gTGlzdGVuIGZvciByZWFkeSBzdGF0ZSB0byBlbXVsYXRlIG9ubG9hZGVuZFxuICAgICAgcmVxdWVzdC5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbiBoYW5kbGVMb2FkKCkge1xuICAgICAgICBpZiAoIXJlcXVlc3QgfHwgcmVxdWVzdC5yZWFkeVN0YXRlICE9PSA0KSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gVGhlIHJlcXVlc3QgZXJyb3JlZCBvdXQgYW5kIHdlIGRpZG4ndCBnZXQgYSByZXNwb25zZSwgdGhpcyB3aWxsIGJlXG4gICAgICAgIC8vIGhhbmRsZWQgYnkgb25lcnJvciBpbnN0ZWFkXG4gICAgICAgIC8vIFdpdGggb25lIGV4Y2VwdGlvbjogcmVxdWVzdCB0aGF0IHVzaW5nIGZpbGU6IHByb3RvY29sLCBtb3N0IGJyb3dzZXJzXG4gICAgICAgIC8vIHdpbGwgcmV0dXJuIHN0YXR1cyBhcyAwIGV2ZW4gdGhvdWdoIGl0J3MgYSBzdWNjZXNzZnVsIHJlcXVlc3RcbiAgICAgICAgaWYgKHJlcXVlc3Quc3RhdHVzID09PSAwICYmICEocmVxdWVzdC5yZXNwb25zZVVSTCAmJiByZXF1ZXN0LnJlc3BvbnNlVVJMLmluZGV4T2YoJ2ZpbGU6JykgPT09IDApKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIC8vIHJlYWR5c3RhdGUgaGFuZGxlciBpcyBjYWxsaW5nIGJlZm9yZSBvbmVycm9yIG9yIG9udGltZW91dCBoYW5kbGVycyxcbiAgICAgICAgLy8gc28gd2Ugc2hvdWxkIGNhbGwgb25sb2FkZW5kIG9uIHRoZSBuZXh0ICd0aWNrJ1xuICAgICAgICBzZXRUaW1lb3V0KG9ubG9hZGVuZCk7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8vIEhhbmRsZSBicm93c2VyIHJlcXVlc3QgY2FuY2VsbGF0aW9uIChhcyBvcHBvc2VkIHRvIGEgbWFudWFsIGNhbmNlbGxhdGlvbilcbiAgICByZXF1ZXN0Lm9uYWJvcnQgPSBmdW5jdGlvbiBoYW5kbGVBYm9ydCgpIHtcbiAgICAgIGlmICghcmVxdWVzdCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHJlamVjdChuZXcgQXhpb3NFcnJvcignUmVxdWVzdCBhYm9ydGVkJywgQXhpb3NFcnJvci5FQ09OTkFCT1JURUQsIGNvbmZpZywgcmVxdWVzdCkpO1xuXG4gICAgICAvLyBDbGVhbiB1cCByZXF1ZXN0XG4gICAgICByZXF1ZXN0ID0gbnVsbDtcbiAgICB9O1xuXG4gICAgLy8gSGFuZGxlIGxvdyBsZXZlbCBuZXR3b3JrIGVycm9yc1xuICAgIHJlcXVlc3Qub25lcnJvciA9IGZ1bmN0aW9uIGhhbmRsZUVycm9yKCkge1xuICAgICAgLy8gUmVhbCBlcnJvcnMgYXJlIGhpZGRlbiBmcm9tIHVzIGJ5IHRoZSBicm93c2VyXG4gICAgICAvLyBvbmVycm9yIHNob3VsZCBvbmx5IGZpcmUgaWYgaXQncyBhIG5ldHdvcmsgZXJyb3JcbiAgICAgIHJlamVjdChuZXcgQXhpb3NFcnJvcignTmV0d29yayBFcnJvcicsIEF4aW9zRXJyb3IuRVJSX05FVFdPUkssIGNvbmZpZywgcmVxdWVzdCkpO1xuXG4gICAgICAvLyBDbGVhbiB1cCByZXF1ZXN0XG4gICAgICByZXF1ZXN0ID0gbnVsbDtcbiAgICB9O1xuXG4gICAgLy8gSGFuZGxlIHRpbWVvdXRcbiAgICByZXF1ZXN0Lm9udGltZW91dCA9IGZ1bmN0aW9uIGhhbmRsZVRpbWVvdXQoKSB7XG4gICAgICBsZXQgdGltZW91dEVycm9yTWVzc2FnZSA9IGNvbmZpZy50aW1lb3V0ID8gJ3RpbWVvdXQgb2YgJyArIGNvbmZpZy50aW1lb3V0ICsgJ21zIGV4Y2VlZGVkJyA6ICd0aW1lb3V0IGV4Y2VlZGVkJztcbiAgICAgIGNvbnN0IHRyYW5zaXRpb25hbCA9IGNvbmZpZy50cmFuc2l0aW9uYWwgfHwgdHJhbnNpdGlvbmFsRGVmYXVsdHM7XG4gICAgICBpZiAoY29uZmlnLnRpbWVvdXRFcnJvck1lc3NhZ2UpIHtcbiAgICAgICAgdGltZW91dEVycm9yTWVzc2FnZSA9IGNvbmZpZy50aW1lb3V0RXJyb3JNZXNzYWdlO1xuICAgICAgfVxuICAgICAgcmVqZWN0KG5ldyBBeGlvc0Vycm9yKFxuICAgICAgICB0aW1lb3V0RXJyb3JNZXNzYWdlLFxuICAgICAgICB0cmFuc2l0aW9uYWwuY2xhcmlmeVRpbWVvdXRFcnJvciA/IEF4aW9zRXJyb3IuRVRJTUVET1VUIDogQXhpb3NFcnJvci5FQ09OTkFCT1JURUQsXG4gICAgICAgIGNvbmZpZyxcbiAgICAgICAgcmVxdWVzdCkpO1xuXG4gICAgICAvLyBDbGVhbiB1cCByZXF1ZXN0XG4gICAgICByZXF1ZXN0ID0gbnVsbDtcbiAgICB9O1xuXG4gICAgLy8gQWRkIHhzcmYgaGVhZGVyXG4gICAgLy8gVGhpcyBpcyBvbmx5IGRvbmUgaWYgcnVubmluZyBpbiBhIHN0YW5kYXJkIGJyb3dzZXIgZW52aXJvbm1lbnQuXG4gICAgLy8gU3BlY2lmaWNhbGx5IG5vdCBpZiB3ZSdyZSBpbiBhIHdlYiB3b3JrZXIsIG9yIHJlYWN0LW5hdGl2ZS5cbiAgICBpZihwbGF0Zm9ybS5oYXNTdGFuZGFyZEJyb3dzZXJFbnYpIHtcbiAgICAgIHdpdGhYU1JGVG9rZW4gJiYgdXRpbHMuaXNGdW5jdGlvbih3aXRoWFNSRlRva2VuKSAmJiAod2l0aFhTUkZUb2tlbiA9IHdpdGhYU1JGVG9rZW4oY29uZmlnKSk7XG5cbiAgICAgIGlmICh3aXRoWFNSRlRva2VuIHx8ICh3aXRoWFNSRlRva2VuICE9PSBmYWxzZSAmJiBpc1VSTFNhbWVPcmlnaW4oZnVsbFBhdGgpKSkge1xuICAgICAgICAvLyBBZGQgeHNyZiBoZWFkZXJcbiAgICAgICAgY29uc3QgeHNyZlZhbHVlID0gY29uZmlnLnhzcmZIZWFkZXJOYW1lICYmIGNvbmZpZy54c3JmQ29va2llTmFtZSAmJiBjb29raWVzLnJlYWQoY29uZmlnLnhzcmZDb29raWVOYW1lKTtcblxuICAgICAgICBpZiAoeHNyZlZhbHVlKSB7XG4gICAgICAgICAgcmVxdWVzdEhlYWRlcnMuc2V0KGNvbmZpZy54c3JmSGVhZGVyTmFtZSwgeHNyZlZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIC8vIFJlbW92ZSBDb250ZW50LVR5cGUgaWYgZGF0YSBpcyB1bmRlZmluZWRcbiAgICByZXF1ZXN0RGF0YSA9PT0gdW5kZWZpbmVkICYmIHJlcXVlc3RIZWFkZXJzLnNldENvbnRlbnRUeXBlKG51bGwpO1xuXG4gICAgLy8gQWRkIGhlYWRlcnMgdG8gdGhlIHJlcXVlc3RcbiAgICBpZiAoJ3NldFJlcXVlc3RIZWFkZXInIGluIHJlcXVlc3QpIHtcbiAgICAgIHV0aWxzLmZvckVhY2gocmVxdWVzdEhlYWRlcnMudG9KU09OKCksIGZ1bmN0aW9uIHNldFJlcXVlc3RIZWFkZXIodmFsLCBrZXkpIHtcbiAgICAgICAgcmVxdWVzdC5zZXRSZXF1ZXN0SGVhZGVyKGtleSwgdmFsKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8vIEFkZCB3aXRoQ3JlZGVudGlhbHMgdG8gcmVxdWVzdCBpZiBuZWVkZWRcbiAgICBpZiAoIXV0aWxzLmlzVW5kZWZpbmVkKGNvbmZpZy53aXRoQ3JlZGVudGlhbHMpKSB7XG4gICAgICByZXF1ZXN0LndpdGhDcmVkZW50aWFscyA9ICEhY29uZmlnLndpdGhDcmVkZW50aWFscztcbiAgICB9XG5cbiAgICAvLyBBZGQgcmVzcG9uc2VUeXBlIHRvIHJlcXVlc3QgaWYgbmVlZGVkXG4gICAgaWYgKHJlc3BvbnNlVHlwZSAmJiByZXNwb25zZVR5cGUgIT09ICdqc29uJykge1xuICAgICAgcmVxdWVzdC5yZXNwb25zZVR5cGUgPSBjb25maWcucmVzcG9uc2VUeXBlO1xuICAgIH1cblxuICAgIC8vIEhhbmRsZSBwcm9ncmVzcyBpZiBuZWVkZWRcbiAgICBpZiAodHlwZW9mIGNvbmZpZy5vbkRvd25sb2FkUHJvZ3Jlc3MgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHJlcXVlc3QuYWRkRXZlbnRMaXN0ZW5lcigncHJvZ3Jlc3MnLCBwcm9ncmVzc0V2ZW50UmVkdWNlcihjb25maWcub25Eb3dubG9hZFByb2dyZXNzLCB0cnVlKSk7XG4gICAgfVxuXG4gICAgLy8gTm90IGFsbCBicm93c2VycyBzdXBwb3J0IHVwbG9hZCBldmVudHNcbiAgICBpZiAodHlwZW9mIGNvbmZpZy5vblVwbG9hZFByb2dyZXNzID09PSAnZnVuY3Rpb24nICYmIHJlcXVlc3QudXBsb2FkKSB7XG4gICAgICByZXF1ZXN0LnVwbG9hZC5hZGRFdmVudExpc3RlbmVyKCdwcm9ncmVzcycsIHByb2dyZXNzRXZlbnRSZWR1Y2VyKGNvbmZpZy5vblVwbG9hZFByb2dyZXNzKSk7XG4gICAgfVxuXG4gICAgaWYgKGNvbmZpZy5jYW5jZWxUb2tlbiB8fCBjb25maWcuc2lnbmFsKSB7XG4gICAgICAvLyBIYW5kbGUgY2FuY2VsbGF0aW9uXG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xuICAgICAgb25DYW5jZWxlZCA9IGNhbmNlbCA9PiB7XG4gICAgICAgIGlmICghcmVxdWVzdCkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICByZWplY3QoIWNhbmNlbCB8fCBjYW5jZWwudHlwZSA/IG5ldyBDYW5jZWxlZEVycm9yKG51bGwsIGNvbmZpZywgcmVxdWVzdCkgOiBjYW5jZWwpO1xuICAgICAgICByZXF1ZXN0LmFib3J0KCk7XG4gICAgICAgIHJlcXVlc3QgPSBudWxsO1xuICAgICAgfTtcblxuICAgICAgY29uZmlnLmNhbmNlbFRva2VuICYmIGNvbmZpZy5jYW5jZWxUb2tlbi5zdWJzY3JpYmUob25DYW5jZWxlZCk7XG4gICAgICBpZiAoY29uZmlnLnNpZ25hbCkge1xuICAgICAgICBjb25maWcuc2lnbmFsLmFib3J0ZWQgPyBvbkNhbmNlbGVkKCkgOiBjb25maWcuc2lnbmFsLmFkZEV2ZW50TGlzdGVuZXIoJ2Fib3J0Jywgb25DYW5jZWxlZCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgY29uc3QgcHJvdG9jb2wgPSBwYXJzZVByb3RvY29sKGZ1bGxQYXRoKTtcblxuICAgIGlmIChwcm90b2NvbCAmJiBwbGF0Zm9ybS5wcm90b2NvbHMuaW5kZXhPZihwcm90b2NvbCkgPT09IC0xKSB7XG4gICAgICByZWplY3QobmV3IEF4aW9zRXJyb3IoJ1Vuc3VwcG9ydGVkIHByb3RvY29sICcgKyBwcm90b2NvbCArICc6JywgQXhpb3NFcnJvci5FUlJfQkFEX1JFUVVFU1QsIGNvbmZpZykpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuXG4gICAgLy8gU2VuZCB0aGUgcmVxdWVzdFxuICAgIHJlcXVlc3Quc2VuZChyZXF1ZXN0RGF0YSB8fCBudWxsKTtcbiAgfSk7XG59XG4iLCJpbXBvcnQgdXRpbHMgZnJvbSAnLi4vdXRpbHMuanMnO1xuaW1wb3J0IGh0dHBBZGFwdGVyIGZyb20gJy4vaHR0cC5qcyc7XG5pbXBvcnQgeGhyQWRhcHRlciBmcm9tICcuL3hoci5qcyc7XG5pbXBvcnQgQXhpb3NFcnJvciBmcm9tIFwiLi4vY29yZS9BeGlvc0Vycm9yLmpzXCI7XG5cbmNvbnN0IGtub3duQWRhcHRlcnMgPSB7XG4gIGh0dHA6IGh0dHBBZGFwdGVyLFxuICB4aHI6IHhockFkYXB0ZXJcbn1cblxudXRpbHMuZm9yRWFjaChrbm93bkFkYXB0ZXJzLCAoZm4sIHZhbHVlKSA9PiB7XG4gIGlmIChmbikge1xuICAgIHRyeSB7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZm4sICduYW1lJywge3ZhbHVlfSk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWVtcHR5XG4gICAgfVxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShmbiwgJ2FkYXB0ZXJOYW1lJywge3ZhbHVlfSk7XG4gIH1cbn0pO1xuXG5jb25zdCByZW5kZXJSZWFzb24gPSAocmVhc29uKSA9PiBgLSAke3JlYXNvbn1gO1xuXG5jb25zdCBpc1Jlc29sdmVkSGFuZGxlID0gKGFkYXB0ZXIpID0+IHV0aWxzLmlzRnVuY3Rpb24oYWRhcHRlcikgfHwgYWRhcHRlciA9PT0gbnVsbCB8fCBhZGFwdGVyID09PSBmYWxzZTtcblxuZXhwb3J0IGRlZmF1bHQge1xuICBnZXRBZGFwdGVyOiAoYWRhcHRlcnMpID0+IHtcbiAgICBhZGFwdGVycyA9IHV0aWxzLmlzQXJyYXkoYWRhcHRlcnMpID8gYWRhcHRlcnMgOiBbYWRhcHRlcnNdO1xuXG4gICAgY29uc3Qge2xlbmd0aH0gPSBhZGFwdGVycztcbiAgICBsZXQgbmFtZU9yQWRhcHRlcjtcbiAgICBsZXQgYWRhcHRlcjtcblxuICAgIGNvbnN0IHJlamVjdGVkUmVhc29ucyA9IHt9O1xuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgbmFtZU9yQWRhcHRlciA9IGFkYXB0ZXJzW2ldO1xuICAgICAgbGV0IGlkO1xuXG4gICAgICBhZGFwdGVyID0gbmFtZU9yQWRhcHRlcjtcblxuICAgICAgaWYgKCFpc1Jlc29sdmVkSGFuZGxlKG5hbWVPckFkYXB0ZXIpKSB7XG4gICAgICAgIGFkYXB0ZXIgPSBrbm93bkFkYXB0ZXJzWyhpZCA9IFN0cmluZyhuYW1lT3JBZGFwdGVyKSkudG9Mb3dlckNhc2UoKV07XG5cbiAgICAgICAgaWYgKGFkYXB0ZXIgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIHRocm93IG5ldyBBeGlvc0Vycm9yKGBVbmtub3duIGFkYXB0ZXIgJyR7aWR9J2ApO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChhZGFwdGVyKSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuXG4gICAgICByZWplY3RlZFJlYXNvbnNbaWQgfHwgJyMnICsgaV0gPSBhZGFwdGVyO1xuICAgIH1cblxuICAgIGlmICghYWRhcHRlcikge1xuXG4gICAgICBjb25zdCByZWFzb25zID0gT2JqZWN0LmVudHJpZXMocmVqZWN0ZWRSZWFzb25zKVxuICAgICAgICAubWFwKChbaWQsIHN0YXRlXSkgPT4gYGFkYXB0ZXIgJHtpZH0gYCArXG4gICAgICAgICAgKHN0YXRlID09PSBmYWxzZSA/ICdpcyBub3Qgc3VwcG9ydGVkIGJ5IHRoZSBlbnZpcm9ubWVudCcgOiAnaXMgbm90IGF2YWlsYWJsZSBpbiB0aGUgYnVpbGQnKVxuICAgICAgICApO1xuXG4gICAgICBsZXQgcyA9IGxlbmd0aCA/XG4gICAgICAgIChyZWFzb25zLmxlbmd0aCA+IDEgPyAnc2luY2UgOlxcbicgKyByZWFzb25zLm1hcChyZW5kZXJSZWFzb24pLmpvaW4oJ1xcbicpIDogJyAnICsgcmVuZGVyUmVhc29uKHJlYXNvbnNbMF0pKSA6XG4gICAgICAgICdhcyBubyBhZGFwdGVyIHNwZWNpZmllZCc7XG5cbiAgICAgIHRocm93IG5ldyBBeGlvc0Vycm9yKFxuICAgICAgICBgVGhlcmUgaXMgbm8gc3VpdGFibGUgYWRhcHRlciB0byBkaXNwYXRjaCB0aGUgcmVxdWVzdCBgICsgcyxcbiAgICAgICAgJ0VSUl9OT1RfU1VQUE9SVCdcbiAgICAgICk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGFkYXB0ZXI7XG4gIH0sXG4gIGFkYXB0ZXJzOiBrbm93bkFkYXB0ZXJzXG59XG4iLCIndXNlIHN0cmljdCc7XG5cbmltcG9ydCB0cmFuc2Zvcm1EYXRhIGZyb20gJy4vdHJhbnNmb3JtRGF0YS5qcyc7XG5pbXBvcnQgaXNDYW5jZWwgZnJvbSAnLi4vY2FuY2VsL2lzQ2FuY2VsLmpzJztcbmltcG9ydCBkZWZhdWx0cyBmcm9tICcuLi9kZWZhdWx0cy9pbmRleC5qcyc7XG5pbXBvcnQgQ2FuY2VsZWRFcnJvciBmcm9tICcuLi9jYW5jZWwvQ2FuY2VsZWRFcnJvci5qcyc7XG5pbXBvcnQgQXhpb3NIZWFkZXJzIGZyb20gJy4uL2NvcmUvQXhpb3NIZWFkZXJzLmpzJztcbmltcG9ydCBhZGFwdGVycyBmcm9tIFwiLi4vYWRhcHRlcnMvYWRhcHRlcnMuanNcIjtcblxuLyoqXG4gKiBUaHJvd3MgYSBgQ2FuY2VsZWRFcnJvcmAgaWYgY2FuY2VsbGF0aW9uIGhhcyBiZWVuIHJlcXVlc3RlZC5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gY29uZmlnIFRoZSBjb25maWcgdGhhdCBpcyB0byBiZSB1c2VkIGZvciB0aGUgcmVxdWVzdFxuICpcbiAqIEByZXR1cm5zIHt2b2lkfVxuICovXG5mdW5jdGlvbiB0aHJvd0lmQ2FuY2VsbGF0aW9uUmVxdWVzdGVkKGNvbmZpZykge1xuICBpZiAoY29uZmlnLmNhbmNlbFRva2VuKSB7XG4gICAgY29uZmlnLmNhbmNlbFRva2VuLnRocm93SWZSZXF1ZXN0ZWQoKTtcbiAgfVxuXG4gIGlmIChjb25maWcuc2lnbmFsICYmIGNvbmZpZy5zaWduYWwuYWJvcnRlZCkge1xuICAgIHRocm93IG5ldyBDYW5jZWxlZEVycm9yKG51bGwsIGNvbmZpZyk7XG4gIH1cbn1cblxuLyoqXG4gKiBEaXNwYXRjaCBhIHJlcXVlc3QgdG8gdGhlIHNlcnZlciB1c2luZyB0aGUgY29uZmlndXJlZCBhZGFwdGVyLlxuICpcbiAqIEBwYXJhbSB7b2JqZWN0fSBjb25maWcgVGhlIGNvbmZpZyB0aGF0IGlzIHRvIGJlIHVzZWQgZm9yIHRoZSByZXF1ZXN0XG4gKlxuICogQHJldHVybnMge1Byb21pc2V9IFRoZSBQcm9taXNlIHRvIGJlIGZ1bGZpbGxlZFxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBkaXNwYXRjaFJlcXVlc3QoY29uZmlnKSB7XG4gIHRocm93SWZDYW5jZWxsYXRpb25SZXF1ZXN0ZWQoY29uZmlnKTtcblxuICBjb25maWcuaGVhZGVycyA9IEF4aW9zSGVhZGVycy5mcm9tKGNvbmZpZy5oZWFkZXJzKTtcblxuICAvLyBUcmFuc2Zvcm0gcmVxdWVzdCBkYXRhXG4gIGNvbmZpZy5kYXRhID0gdHJhbnNmb3JtRGF0YS5jYWxsKFxuICAgIGNvbmZpZyxcbiAgICBjb25maWcudHJhbnNmb3JtUmVxdWVzdFxuICApO1xuXG4gIGlmIChbJ3Bvc3QnLCAncHV0JywgJ3BhdGNoJ10uaW5kZXhPZihjb25maWcubWV0aG9kKSAhPT0gLTEpIHtcbiAgICBjb25maWcuaGVhZGVycy5zZXRDb250ZW50VHlwZSgnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkJywgZmFsc2UpO1xuICB9XG5cbiAgY29uc3QgYWRhcHRlciA9IGFkYXB0ZXJzLmdldEFkYXB0ZXIoY29uZmlnLmFkYXB0ZXIgfHwgZGVmYXVsdHMuYWRhcHRlcik7XG5cbiAgcmV0dXJuIGFkYXB0ZXIoY29uZmlnKS50aGVuKGZ1bmN0aW9uIG9uQWRhcHRlclJlc29sdXRpb24ocmVzcG9uc2UpIHtcbiAgICB0aHJvd0lmQ2FuY2VsbGF0aW9uUmVxdWVzdGVkKGNvbmZpZyk7XG5cbiAgICAvLyBUcmFuc2Zvcm0gcmVzcG9uc2UgZGF0YVxuICAgIHJlc3BvbnNlLmRhdGEgPSB0cmFuc2Zvcm1EYXRhLmNhbGwoXG4gICAgICBjb25maWcsXG4gICAgICBjb25maWcudHJhbnNmb3JtUmVzcG9uc2UsXG4gICAgICByZXNwb25zZVxuICAgICk7XG5cbiAgICByZXNwb25zZS5oZWFkZXJzID0gQXhpb3NIZWFkZXJzLmZyb20ocmVzcG9uc2UuaGVhZGVycyk7XG5cbiAgICByZXR1cm4gcmVzcG9uc2U7XG4gIH0sIGZ1bmN0aW9uIG9uQWRhcHRlclJlamVjdGlvbihyZWFzb24pIHtcbiAgICBpZiAoIWlzQ2FuY2VsKHJlYXNvbikpIHtcbiAgICAgIHRocm93SWZDYW5jZWxsYXRpb25SZXF1ZXN0ZWQoY29uZmlnKTtcblxuICAgICAgLy8gVHJhbnNmb3JtIHJlc3BvbnNlIGRhdGFcbiAgICAgIGlmIChyZWFzb24gJiYgcmVhc29uLnJlc3BvbnNlKSB7XG4gICAgICAgIHJlYXNvbi5yZXNwb25zZS5kYXRhID0gdHJhbnNmb3JtRGF0YS5jYWxsKFxuICAgICAgICAgIGNvbmZpZyxcbiAgICAgICAgICBjb25maWcudHJhbnNmb3JtUmVzcG9uc2UsXG4gICAgICAgICAgcmVhc29uLnJlc3BvbnNlXG4gICAgICAgICk7XG4gICAgICAgIHJlYXNvbi5yZXNwb25zZS5oZWFkZXJzID0gQXhpb3NIZWFkZXJzLmZyb20ocmVhc29uLnJlc3BvbnNlLmhlYWRlcnMpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBQcm9taXNlLnJlamVjdChyZWFzb24pO1xuICB9KTtcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IHV0aWxzIGZyb20gJy4uL3V0aWxzLmpzJztcbmltcG9ydCBBeGlvc0hlYWRlcnMgZnJvbSBcIi4vQXhpb3NIZWFkZXJzLmpzXCI7XG5cbmNvbnN0IGhlYWRlcnNUb09iamVjdCA9ICh0aGluZykgPT4gdGhpbmcgaW5zdGFuY2VvZiBBeGlvc0hlYWRlcnMgPyB7IC4uLnRoaW5nIH0gOiB0aGluZztcblxuLyoqXG4gKiBDb25maWctc3BlY2lmaWMgbWVyZ2UtZnVuY3Rpb24gd2hpY2ggY3JlYXRlcyBhIG5ldyBjb25maWctb2JqZWN0XG4gKiBieSBtZXJnaW5nIHR3byBjb25maWd1cmF0aW9uIG9iamVjdHMgdG9nZXRoZXIuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGNvbmZpZzFcbiAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWcyXG4gKlxuICogQHJldHVybnMge09iamVjdH0gTmV3IG9iamVjdCByZXN1bHRpbmcgZnJvbSBtZXJnaW5nIGNvbmZpZzIgdG8gY29uZmlnMVxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBtZXJnZUNvbmZpZyhjb25maWcxLCBjb25maWcyKSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICBjb25maWcyID0gY29uZmlnMiB8fCB7fTtcbiAgY29uc3QgY29uZmlnID0ge307XG5cbiAgZnVuY3Rpb24gZ2V0TWVyZ2VkVmFsdWUodGFyZ2V0LCBzb3VyY2UsIGNhc2VsZXNzKSB7XG4gICAgaWYgKHV0aWxzLmlzUGxhaW5PYmplY3QodGFyZ2V0KSAmJiB1dGlscy5pc1BsYWluT2JqZWN0KHNvdXJjZSkpIHtcbiAgICAgIHJldHVybiB1dGlscy5tZXJnZS5jYWxsKHtjYXNlbGVzc30sIHRhcmdldCwgc291cmNlKTtcbiAgICB9IGVsc2UgaWYgKHV0aWxzLmlzUGxhaW5PYmplY3Qoc291cmNlKSkge1xuICAgICAgcmV0dXJuIHV0aWxzLm1lcmdlKHt9LCBzb3VyY2UpO1xuICAgIH0gZWxzZSBpZiAodXRpbHMuaXNBcnJheShzb3VyY2UpKSB7XG4gICAgICByZXR1cm4gc291cmNlLnNsaWNlKCk7XG4gICAgfVxuICAgIHJldHVybiBzb3VyY2U7XG4gIH1cblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgY29uc2lzdGVudC1yZXR1cm5cbiAgZnVuY3Rpb24gbWVyZ2VEZWVwUHJvcGVydGllcyhhLCBiLCBjYXNlbGVzcykge1xuICAgIGlmICghdXRpbHMuaXNVbmRlZmluZWQoYikpIHtcbiAgICAgIHJldHVybiBnZXRNZXJnZWRWYWx1ZShhLCBiLCBjYXNlbGVzcyk7XG4gICAgfSBlbHNlIGlmICghdXRpbHMuaXNVbmRlZmluZWQoYSkpIHtcbiAgICAgIHJldHVybiBnZXRNZXJnZWRWYWx1ZSh1bmRlZmluZWQsIGEsIGNhc2VsZXNzKTtcbiAgICB9XG4gIH1cblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgY29uc2lzdGVudC1yZXR1cm5cbiAgZnVuY3Rpb24gdmFsdWVGcm9tQ29uZmlnMihhLCBiKSB7XG4gICAgaWYgKCF1dGlscy5pc1VuZGVmaW5lZChiKSkge1xuICAgICAgcmV0dXJuIGdldE1lcmdlZFZhbHVlKHVuZGVmaW5lZCwgYik7XG4gICAgfVxuICB9XG5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNvbnNpc3RlbnQtcmV0dXJuXG4gIGZ1bmN0aW9uIGRlZmF1bHRUb0NvbmZpZzIoYSwgYikge1xuICAgIGlmICghdXRpbHMuaXNVbmRlZmluZWQoYikpIHtcbiAgICAgIHJldHVybiBnZXRNZXJnZWRWYWx1ZSh1bmRlZmluZWQsIGIpO1xuICAgIH0gZWxzZSBpZiAoIXV0aWxzLmlzVW5kZWZpbmVkKGEpKSB7XG4gICAgICByZXR1cm4gZ2V0TWVyZ2VkVmFsdWUodW5kZWZpbmVkLCBhKTtcbiAgICB9XG4gIH1cblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgY29uc2lzdGVudC1yZXR1cm5cbiAgZnVuY3Rpb24gbWVyZ2VEaXJlY3RLZXlzKGEsIGIsIHByb3ApIHtcbiAgICBpZiAocHJvcCBpbiBjb25maWcyKSB7XG4gICAgICByZXR1cm4gZ2V0TWVyZ2VkVmFsdWUoYSwgYik7XG4gICAgfSBlbHNlIGlmIChwcm9wIGluIGNvbmZpZzEpIHtcbiAgICAgIHJldHVybiBnZXRNZXJnZWRWYWx1ZSh1bmRlZmluZWQsIGEpO1xuICAgIH1cbiAgfVxuXG4gIGNvbnN0IG1lcmdlTWFwID0ge1xuICAgIHVybDogdmFsdWVGcm9tQ29uZmlnMixcbiAgICBtZXRob2Q6IHZhbHVlRnJvbUNvbmZpZzIsXG4gICAgZGF0YTogdmFsdWVGcm9tQ29uZmlnMixcbiAgICBiYXNlVVJMOiBkZWZhdWx0VG9Db25maWcyLFxuICAgIHRyYW5zZm9ybVJlcXVlc3Q6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgdHJhbnNmb3JtUmVzcG9uc2U6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgcGFyYW1zU2VyaWFsaXplcjogZGVmYXVsdFRvQ29uZmlnMixcbiAgICB0aW1lb3V0OiBkZWZhdWx0VG9Db25maWcyLFxuICAgIHRpbWVvdXRNZXNzYWdlOiBkZWZhdWx0VG9Db25maWcyLFxuICAgIHdpdGhDcmVkZW50aWFsczogZGVmYXVsdFRvQ29uZmlnMixcbiAgICB3aXRoWFNSRlRva2VuOiBkZWZhdWx0VG9Db25maWcyLFxuICAgIGFkYXB0ZXI6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgcmVzcG9uc2VUeXBlOiBkZWZhdWx0VG9Db25maWcyLFxuICAgIHhzcmZDb29raWVOYW1lOiBkZWZhdWx0VG9Db25maWcyLFxuICAgIHhzcmZIZWFkZXJOYW1lOiBkZWZhdWx0VG9Db25maWcyLFxuICAgIG9uVXBsb2FkUHJvZ3Jlc3M6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgb25Eb3dubG9hZFByb2dyZXNzOiBkZWZhdWx0VG9Db25maWcyLFxuICAgIGRlY29tcHJlc3M6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgbWF4Q29udGVudExlbmd0aDogZGVmYXVsdFRvQ29uZmlnMixcbiAgICBtYXhCb2R5TGVuZ3RoOiBkZWZhdWx0VG9Db25maWcyLFxuICAgIGJlZm9yZVJlZGlyZWN0OiBkZWZhdWx0VG9Db25maWcyLFxuICAgIHRyYW5zcG9ydDogZGVmYXVsdFRvQ29uZmlnMixcbiAgICBodHRwQWdlbnQ6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgaHR0cHNBZ2VudDogZGVmYXVsdFRvQ29uZmlnMixcbiAgICBjYW5jZWxUb2tlbjogZGVmYXVsdFRvQ29uZmlnMixcbiAgICBzb2NrZXRQYXRoOiBkZWZhdWx0VG9Db25maWcyLFxuICAgIHJlc3BvbnNlRW5jb2Rpbmc6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgdmFsaWRhdGVTdGF0dXM6IG1lcmdlRGlyZWN0S2V5cyxcbiAgICBoZWFkZXJzOiAoYSwgYikgPT4gbWVyZ2VEZWVwUHJvcGVydGllcyhoZWFkZXJzVG9PYmplY3QoYSksIGhlYWRlcnNUb09iamVjdChiKSwgdHJ1ZSlcbiAgfTtcblxuICB1dGlscy5mb3JFYWNoKE9iamVjdC5rZXlzKE9iamVjdC5hc3NpZ24oe30sIGNvbmZpZzEsIGNvbmZpZzIpKSwgZnVuY3Rpb24gY29tcHV0ZUNvbmZpZ1ZhbHVlKHByb3ApIHtcbiAgICBjb25zdCBtZXJnZSA9IG1lcmdlTWFwW3Byb3BdIHx8IG1lcmdlRGVlcFByb3BlcnRpZXM7XG4gICAgY29uc3QgY29uZmlnVmFsdWUgPSBtZXJnZShjb25maWcxW3Byb3BdLCBjb25maWcyW3Byb3BdLCBwcm9wKTtcbiAgICAodXRpbHMuaXNVbmRlZmluZWQoY29uZmlnVmFsdWUpICYmIG1lcmdlICE9PSBtZXJnZURpcmVjdEtleXMpIHx8IChjb25maWdbcHJvcF0gPSBjb25maWdWYWx1ZSk7XG4gIH0pO1xuXG4gIHJldHVybiBjb25maWc7XG59XG4iLCJleHBvcnQgY29uc3QgVkVSU0lPTiA9IFwiMS42LjhcIjsiLCIndXNlIHN0cmljdCc7XG5cbmltcG9ydCB7VkVSU0lPTn0gZnJvbSAnLi4vZW52L2RhdGEuanMnO1xuaW1wb3J0IEF4aW9zRXJyb3IgZnJvbSAnLi4vY29yZS9BeGlvc0Vycm9yLmpzJztcblxuY29uc3QgdmFsaWRhdG9ycyA9IHt9O1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xuWydvYmplY3QnLCAnYm9vbGVhbicsICdudW1iZXInLCAnZnVuY3Rpb24nLCAnc3RyaW5nJywgJ3N5bWJvbCddLmZvckVhY2goKHR5cGUsIGkpID0+IHtcbiAgdmFsaWRhdG9yc1t0eXBlXSA9IGZ1bmN0aW9uIHZhbGlkYXRvcih0aGluZykge1xuICAgIHJldHVybiB0eXBlb2YgdGhpbmcgPT09IHR5cGUgfHwgJ2EnICsgKGkgPCAxID8gJ24gJyA6ICcgJykgKyB0eXBlO1xuICB9O1xufSk7XG5cbmNvbnN0IGRlcHJlY2F0ZWRXYXJuaW5ncyA9IHt9O1xuXG4vKipcbiAqIFRyYW5zaXRpb25hbCBvcHRpb24gdmFsaWRhdG9yXG4gKlxuICogQHBhcmFtIHtmdW5jdGlvbnxib29sZWFuP30gdmFsaWRhdG9yIC0gc2V0IHRvIGZhbHNlIGlmIHRoZSB0cmFuc2l0aW9uYWwgb3B0aW9uIGhhcyBiZWVuIHJlbW92ZWRcbiAqIEBwYXJhbSB7c3RyaW5nP30gdmVyc2lvbiAtIGRlcHJlY2F0ZWQgdmVyc2lvbiAvIHJlbW92ZWQgc2luY2UgdmVyc2lvblxuICogQHBhcmFtIHtzdHJpbmc/fSBtZXNzYWdlIC0gc29tZSBtZXNzYWdlIHdpdGggYWRkaXRpb25hbCBpbmZvXG4gKlxuICogQHJldHVybnMge2Z1bmN0aW9ufVxuICovXG52YWxpZGF0b3JzLnRyYW5zaXRpb25hbCA9IGZ1bmN0aW9uIHRyYW5zaXRpb25hbCh2YWxpZGF0b3IsIHZlcnNpb24sIG1lc3NhZ2UpIHtcbiAgZnVuY3Rpb24gZm9ybWF0TWVzc2FnZShvcHQsIGRlc2MpIHtcbiAgICByZXR1cm4gJ1tBeGlvcyB2JyArIFZFUlNJT04gKyAnXSBUcmFuc2l0aW9uYWwgb3B0aW9uIFxcJycgKyBvcHQgKyAnXFwnJyArIGRlc2MgKyAobWVzc2FnZSA/ICcuICcgKyBtZXNzYWdlIDogJycpO1xuICB9XG5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcbiAgcmV0dXJuICh2YWx1ZSwgb3B0LCBvcHRzKSA9PiB7XG4gICAgaWYgKHZhbGlkYXRvciA9PT0gZmFsc2UpIHtcbiAgICAgIHRocm93IG5ldyBBeGlvc0Vycm9yKFxuICAgICAgICBmb3JtYXRNZXNzYWdlKG9wdCwgJyBoYXMgYmVlbiByZW1vdmVkJyArICh2ZXJzaW9uID8gJyBpbiAnICsgdmVyc2lvbiA6ICcnKSksXG4gICAgICAgIEF4aW9zRXJyb3IuRVJSX0RFUFJFQ0FURURcbiAgICAgICk7XG4gICAgfVxuXG4gICAgaWYgKHZlcnNpb24gJiYgIWRlcHJlY2F0ZWRXYXJuaW5nc1tvcHRdKSB7XG4gICAgICBkZXByZWNhdGVkV2FybmluZ3Nbb3B0XSA9IHRydWU7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxuICAgICAgY29uc29sZS53YXJuKFxuICAgICAgICBmb3JtYXRNZXNzYWdlKFxuICAgICAgICAgIG9wdCxcbiAgICAgICAgICAnIGhhcyBiZWVuIGRlcHJlY2F0ZWQgc2luY2UgdicgKyB2ZXJzaW9uICsgJyBhbmQgd2lsbCBiZSByZW1vdmVkIGluIHRoZSBuZWFyIGZ1dHVyZSdcbiAgICAgICAgKVxuICAgICAgKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdmFsaWRhdG9yID8gdmFsaWRhdG9yKHZhbHVlLCBvcHQsIG9wdHMpIDogdHJ1ZTtcbiAgfTtcbn07XG5cbi8qKlxuICogQXNzZXJ0IG9iamVjdCdzIHByb3BlcnRpZXMgdHlwZVxuICpcbiAqIEBwYXJhbSB7b2JqZWN0fSBvcHRpb25zXG4gKiBAcGFyYW0ge29iamVjdH0gc2NoZW1hXG4gKiBAcGFyYW0ge2Jvb2xlYW4/fSBhbGxvd1Vua25vd25cbiAqXG4gKiBAcmV0dXJucyB7b2JqZWN0fVxuICovXG5cbmZ1bmN0aW9uIGFzc2VydE9wdGlvbnMob3B0aW9ucywgc2NoZW1hLCBhbGxvd1Vua25vd24pIHtcbiAgaWYgKHR5cGVvZiBvcHRpb25zICE9PSAnb2JqZWN0Jykge1xuICAgIHRocm93IG5ldyBBeGlvc0Vycm9yKCdvcHRpb25zIG11c3QgYmUgYW4gb2JqZWN0JywgQXhpb3NFcnJvci5FUlJfQkFEX09QVElPTl9WQUxVRSk7XG4gIH1cbiAgY29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKG9wdGlvbnMpO1xuICBsZXQgaSA9IGtleXMubGVuZ3RoO1xuICB3aGlsZSAoaS0tID4gMCkge1xuICAgIGNvbnN0IG9wdCA9IGtleXNbaV07XG4gICAgY29uc3QgdmFsaWRhdG9yID0gc2NoZW1hW29wdF07XG4gICAgaWYgKHZhbGlkYXRvcikge1xuICAgICAgY29uc3QgdmFsdWUgPSBvcHRpb25zW29wdF07XG4gICAgICBjb25zdCByZXN1bHQgPSB2YWx1ZSA9PT0gdW5kZWZpbmVkIHx8IHZhbGlkYXRvcih2YWx1ZSwgb3B0LCBvcHRpb25zKTtcbiAgICAgIGlmIChyZXN1bHQgIT09IHRydWUpIHtcbiAgICAgICAgdGhyb3cgbmV3IEF4aW9zRXJyb3IoJ29wdGlvbiAnICsgb3B0ICsgJyBtdXN0IGJlICcgKyByZXN1bHQsIEF4aW9zRXJyb3IuRVJSX0JBRF9PUFRJT05fVkFMVUUpO1xuICAgICAgfVxuICAgICAgY29udGludWU7XG4gICAgfVxuICAgIGlmIChhbGxvd1Vua25vd24gIT09IHRydWUpIHtcbiAgICAgIHRocm93IG5ldyBBeGlvc0Vycm9yKCdVbmtub3duIG9wdGlvbiAnICsgb3B0LCBBeGlvc0Vycm9yLkVSUl9CQURfT1BUSU9OKTtcbiAgICB9XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQge1xuICBhc3NlcnRPcHRpb25zLFxuICB2YWxpZGF0b3JzXG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgdXRpbHMgZnJvbSAnLi8uLi91dGlscy5qcyc7XG5pbXBvcnQgYnVpbGRVUkwgZnJvbSAnLi4vaGVscGVycy9idWlsZFVSTC5qcyc7XG5pbXBvcnQgSW50ZXJjZXB0b3JNYW5hZ2VyIGZyb20gJy4vSW50ZXJjZXB0b3JNYW5hZ2VyLmpzJztcbmltcG9ydCBkaXNwYXRjaFJlcXVlc3QgZnJvbSAnLi9kaXNwYXRjaFJlcXVlc3QuanMnO1xuaW1wb3J0IG1lcmdlQ29uZmlnIGZyb20gJy4vbWVyZ2VDb25maWcuanMnO1xuaW1wb3J0IGJ1aWxkRnVsbFBhdGggZnJvbSAnLi9idWlsZEZ1bGxQYXRoLmpzJztcbmltcG9ydCB2YWxpZGF0b3IgZnJvbSAnLi4vaGVscGVycy92YWxpZGF0b3IuanMnO1xuaW1wb3J0IEF4aW9zSGVhZGVycyBmcm9tICcuL0F4aW9zSGVhZGVycy5qcyc7XG5cbmNvbnN0IHZhbGlkYXRvcnMgPSB2YWxpZGF0b3IudmFsaWRhdG9ycztcblxuLyoqXG4gKiBDcmVhdGUgYSBuZXcgaW5zdGFuY2Ugb2YgQXhpb3NcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gaW5zdGFuY2VDb25maWcgVGhlIGRlZmF1bHQgY29uZmlnIGZvciB0aGUgaW5zdGFuY2VcbiAqXG4gKiBAcmV0dXJuIHtBeGlvc30gQSBuZXcgaW5zdGFuY2Ugb2YgQXhpb3NcbiAqL1xuY2xhc3MgQXhpb3Mge1xuICBjb25zdHJ1Y3RvcihpbnN0YW5jZUNvbmZpZykge1xuICAgIHRoaXMuZGVmYXVsdHMgPSBpbnN0YW5jZUNvbmZpZztcbiAgICB0aGlzLmludGVyY2VwdG9ycyA9IHtcbiAgICAgIHJlcXVlc3Q6IG5ldyBJbnRlcmNlcHRvck1hbmFnZXIoKSxcbiAgICAgIHJlc3BvbnNlOiBuZXcgSW50ZXJjZXB0b3JNYW5hZ2VyKClcbiAgICB9O1xuICB9XG5cbiAgLyoqXG4gICAqIERpc3BhdGNoIGEgcmVxdWVzdFxuICAgKlxuICAgKiBAcGFyYW0ge1N0cmluZ3xPYmplY3R9IGNvbmZpZ09yVXJsIFRoZSBjb25maWcgc3BlY2lmaWMgZm9yIHRoaXMgcmVxdWVzdCAobWVyZ2VkIHdpdGggdGhpcy5kZWZhdWx0cylcbiAgICogQHBhcmFtIHs/T2JqZWN0fSBjb25maWdcbiAgICpcbiAgICogQHJldHVybnMge1Byb21pc2V9IFRoZSBQcm9taXNlIHRvIGJlIGZ1bGZpbGxlZFxuICAgKi9cbiAgYXN5bmMgcmVxdWVzdChjb25maWdPclVybCwgY29uZmlnKSB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiBhd2FpdCB0aGlzLl9yZXF1ZXN0KGNvbmZpZ09yVXJsLCBjb25maWcpO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgaWYgKGVyciBpbnN0YW5jZW9mIEVycm9yKSB7XG4gICAgICAgIGxldCBkdW1teTtcblxuICAgICAgICBFcnJvci5jYXB0dXJlU3RhY2tUcmFjZSA/IEVycm9yLmNhcHR1cmVTdGFja1RyYWNlKGR1bW15ID0ge30pIDogKGR1bW15ID0gbmV3IEVycm9yKCkpO1xuXG4gICAgICAgIC8vIHNsaWNlIG9mZiB0aGUgRXJyb3I6IC4uLiBsaW5lXG4gICAgICAgIGNvbnN0IHN0YWNrID0gZHVtbXkuc3RhY2sgPyBkdW1teS5zdGFjay5yZXBsYWNlKC9eLitcXG4vLCAnJykgOiAnJztcblxuICAgICAgICBpZiAoIWVyci5zdGFjaykge1xuICAgICAgICAgIGVyci5zdGFjayA9IHN0YWNrO1xuICAgICAgICAgIC8vIG1hdGNoIHdpdGhvdXQgdGhlIDIgdG9wIHN0YWNrIGxpbmVzXG4gICAgICAgIH0gZWxzZSBpZiAoc3RhY2sgJiYgIVN0cmluZyhlcnIuc3RhY2spLmVuZHNXaXRoKHN0YWNrLnJlcGxhY2UoL14uK1xcbi4rXFxuLywgJycpKSkge1xuICAgICAgICAgIGVyci5zdGFjayArPSAnXFxuJyArIHN0YWNrXG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdGhyb3cgZXJyO1xuICAgIH1cbiAgfVxuXG4gIF9yZXF1ZXN0KGNvbmZpZ09yVXJsLCBjb25maWcpIHtcbiAgICAvKmVzbGludCBuby1wYXJhbS1yZWFzc2lnbjowKi9cbiAgICAvLyBBbGxvdyBmb3IgYXhpb3MoJ2V4YW1wbGUvdXJsJ1ssIGNvbmZpZ10pIGEgbGEgZmV0Y2ggQVBJXG4gICAgaWYgKHR5cGVvZiBjb25maWdPclVybCA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGNvbmZpZyA9IGNvbmZpZyB8fCB7fTtcbiAgICAgIGNvbmZpZy51cmwgPSBjb25maWdPclVybDtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uZmlnID0gY29uZmlnT3JVcmwgfHwge307XG4gICAgfVxuXG4gICAgY29uZmlnID0gbWVyZ2VDb25maWcodGhpcy5kZWZhdWx0cywgY29uZmlnKTtcblxuICAgIGNvbnN0IHt0cmFuc2l0aW9uYWwsIHBhcmFtc1NlcmlhbGl6ZXIsIGhlYWRlcnN9ID0gY29uZmlnO1xuXG4gICAgaWYgKHRyYW5zaXRpb25hbCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICB2YWxpZGF0b3IuYXNzZXJ0T3B0aW9ucyh0cmFuc2l0aW9uYWwsIHtcbiAgICAgICAgc2lsZW50SlNPTlBhcnNpbmc6IHZhbGlkYXRvcnMudHJhbnNpdGlvbmFsKHZhbGlkYXRvcnMuYm9vbGVhbiksXG4gICAgICAgIGZvcmNlZEpTT05QYXJzaW5nOiB2YWxpZGF0b3JzLnRyYW5zaXRpb25hbCh2YWxpZGF0b3JzLmJvb2xlYW4pLFxuICAgICAgICBjbGFyaWZ5VGltZW91dEVycm9yOiB2YWxpZGF0b3JzLnRyYW5zaXRpb25hbCh2YWxpZGF0b3JzLmJvb2xlYW4pXG4gICAgICB9LCBmYWxzZSk7XG4gICAgfVxuXG4gICAgaWYgKHBhcmFtc1NlcmlhbGl6ZXIgIT0gbnVsbCkge1xuICAgICAgaWYgKHV0aWxzLmlzRnVuY3Rpb24ocGFyYW1zU2VyaWFsaXplcikpIHtcbiAgICAgICAgY29uZmlnLnBhcmFtc1NlcmlhbGl6ZXIgPSB7XG4gICAgICAgICAgc2VyaWFsaXplOiBwYXJhbXNTZXJpYWxpemVyXG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhbGlkYXRvci5hc3NlcnRPcHRpb25zKHBhcmFtc1NlcmlhbGl6ZXIsIHtcbiAgICAgICAgICBlbmNvZGU6IHZhbGlkYXRvcnMuZnVuY3Rpb24sXG4gICAgICAgICAgc2VyaWFsaXplOiB2YWxpZGF0b3JzLmZ1bmN0aW9uXG4gICAgICAgIH0sIHRydWUpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIFNldCBjb25maWcubWV0aG9kXG4gICAgY29uZmlnLm1ldGhvZCA9IChjb25maWcubWV0aG9kIHx8IHRoaXMuZGVmYXVsdHMubWV0aG9kIHx8ICdnZXQnKS50b0xvd2VyQ2FzZSgpO1xuXG4gICAgLy8gRmxhdHRlbiBoZWFkZXJzXG4gICAgbGV0IGNvbnRleHRIZWFkZXJzID0gaGVhZGVycyAmJiB1dGlscy5tZXJnZShcbiAgICAgIGhlYWRlcnMuY29tbW9uLFxuICAgICAgaGVhZGVyc1tjb25maWcubWV0aG9kXVxuICAgICk7XG5cbiAgICBoZWFkZXJzICYmIHV0aWxzLmZvckVhY2goXG4gICAgICBbJ2RlbGV0ZScsICdnZXQnLCAnaGVhZCcsICdwb3N0JywgJ3B1dCcsICdwYXRjaCcsICdjb21tb24nXSxcbiAgICAgIChtZXRob2QpID0+IHtcbiAgICAgICAgZGVsZXRlIGhlYWRlcnNbbWV0aG9kXTtcbiAgICAgIH1cbiAgICApO1xuXG4gICAgY29uZmlnLmhlYWRlcnMgPSBBeGlvc0hlYWRlcnMuY29uY2F0KGNvbnRleHRIZWFkZXJzLCBoZWFkZXJzKTtcblxuICAgIC8vIGZpbHRlciBvdXQgc2tpcHBlZCBpbnRlcmNlcHRvcnNcbiAgICBjb25zdCByZXF1ZXN0SW50ZXJjZXB0b3JDaGFpbiA9IFtdO1xuICAgIGxldCBzeW5jaHJvbm91c1JlcXVlc3RJbnRlcmNlcHRvcnMgPSB0cnVlO1xuICAgIHRoaXMuaW50ZXJjZXB0b3JzLnJlcXVlc3QuZm9yRWFjaChmdW5jdGlvbiB1bnNoaWZ0UmVxdWVzdEludGVyY2VwdG9ycyhpbnRlcmNlcHRvcikge1xuICAgICAgaWYgKHR5cGVvZiBpbnRlcmNlcHRvci5ydW5XaGVuID09PSAnZnVuY3Rpb24nICYmIGludGVyY2VwdG9yLnJ1bldoZW4oY29uZmlnKSA9PT0gZmFsc2UpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBzeW5jaHJvbm91c1JlcXVlc3RJbnRlcmNlcHRvcnMgPSBzeW5jaHJvbm91c1JlcXVlc3RJbnRlcmNlcHRvcnMgJiYgaW50ZXJjZXB0b3Iuc3luY2hyb25vdXM7XG5cbiAgICAgIHJlcXVlc3RJbnRlcmNlcHRvckNoYWluLnVuc2hpZnQoaW50ZXJjZXB0b3IuZnVsZmlsbGVkLCBpbnRlcmNlcHRvci5yZWplY3RlZCk7XG4gICAgfSk7XG5cbiAgICBjb25zdCByZXNwb25zZUludGVyY2VwdG9yQ2hhaW4gPSBbXTtcbiAgICB0aGlzLmludGVyY2VwdG9ycy5yZXNwb25zZS5mb3JFYWNoKGZ1bmN0aW9uIHB1c2hSZXNwb25zZUludGVyY2VwdG9ycyhpbnRlcmNlcHRvcikge1xuICAgICAgcmVzcG9uc2VJbnRlcmNlcHRvckNoYWluLnB1c2goaW50ZXJjZXB0b3IuZnVsZmlsbGVkLCBpbnRlcmNlcHRvci5yZWplY3RlZCk7XG4gICAgfSk7XG5cbiAgICBsZXQgcHJvbWlzZTtcbiAgICBsZXQgaSA9IDA7XG4gICAgbGV0IGxlbjtcblxuICAgIGlmICghc3luY2hyb25vdXNSZXF1ZXN0SW50ZXJjZXB0b3JzKSB7XG4gICAgICBjb25zdCBjaGFpbiA9IFtkaXNwYXRjaFJlcXVlc3QuYmluZCh0aGlzKSwgdW5kZWZpbmVkXTtcbiAgICAgIGNoYWluLnVuc2hpZnQuYXBwbHkoY2hhaW4sIHJlcXVlc3RJbnRlcmNlcHRvckNoYWluKTtcbiAgICAgIGNoYWluLnB1c2guYXBwbHkoY2hhaW4sIHJlc3BvbnNlSW50ZXJjZXB0b3JDaGFpbik7XG4gICAgICBsZW4gPSBjaGFpbi5sZW5ndGg7XG5cbiAgICAgIHByb21pc2UgPSBQcm9taXNlLnJlc29sdmUoY29uZmlnKTtcblxuICAgICAgd2hpbGUgKGkgPCBsZW4pIHtcbiAgICAgICAgcHJvbWlzZSA9IHByb21pc2UudGhlbihjaGFpbltpKytdLCBjaGFpbltpKytdKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHByb21pc2U7XG4gICAgfVxuXG4gICAgbGVuID0gcmVxdWVzdEludGVyY2VwdG9yQ2hhaW4ubGVuZ3RoO1xuXG4gICAgbGV0IG5ld0NvbmZpZyA9IGNvbmZpZztcblxuICAgIGkgPSAwO1xuXG4gICAgd2hpbGUgKGkgPCBsZW4pIHtcbiAgICAgIGNvbnN0IG9uRnVsZmlsbGVkID0gcmVxdWVzdEludGVyY2VwdG9yQ2hhaW5baSsrXTtcbiAgICAgIGNvbnN0IG9uUmVqZWN0ZWQgPSByZXF1ZXN0SW50ZXJjZXB0b3JDaGFpbltpKytdO1xuICAgICAgdHJ5IHtcbiAgICAgICAgbmV3Q29uZmlnID0gb25GdWxmaWxsZWQobmV3Q29uZmlnKTtcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIG9uUmVqZWN0ZWQuY2FsbCh0aGlzLCBlcnJvcik7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cblxuICAgIHRyeSB7XG4gICAgICBwcm9taXNlID0gZGlzcGF0Y2hSZXF1ZXN0LmNhbGwodGhpcywgbmV3Q29uZmlnKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KGVycm9yKTtcbiAgICB9XG5cbiAgICBpID0gMDtcbiAgICBsZW4gPSByZXNwb25zZUludGVyY2VwdG9yQ2hhaW4ubGVuZ3RoO1xuXG4gICAgd2hpbGUgKGkgPCBsZW4pIHtcbiAgICAgIHByb21pc2UgPSBwcm9taXNlLnRoZW4ocmVzcG9uc2VJbnRlcmNlcHRvckNoYWluW2krK10sIHJlc3BvbnNlSW50ZXJjZXB0b3JDaGFpbltpKytdKTtcbiAgICB9XG5cbiAgICByZXR1cm4gcHJvbWlzZTtcbiAgfVxuXG4gIGdldFVyaShjb25maWcpIHtcbiAgICBjb25maWcgPSBtZXJnZUNvbmZpZyh0aGlzLmRlZmF1bHRzLCBjb25maWcpO1xuICAgIGNvbnN0IGZ1bGxQYXRoID0gYnVpbGRGdWxsUGF0aChjb25maWcuYmFzZVVSTCwgY29uZmlnLnVybCk7XG4gICAgcmV0dXJuIGJ1aWxkVVJMKGZ1bGxQYXRoLCBjb25maWcucGFyYW1zLCBjb25maWcucGFyYW1zU2VyaWFsaXplcik7XG4gIH1cbn1cblxuLy8gUHJvdmlkZSBhbGlhc2VzIGZvciBzdXBwb3J0ZWQgcmVxdWVzdCBtZXRob2RzXG51dGlscy5mb3JFYWNoKFsnZGVsZXRlJywgJ2dldCcsICdoZWFkJywgJ29wdGlvbnMnXSwgZnVuY3Rpb24gZm9yRWFjaE1ldGhvZE5vRGF0YShtZXRob2QpIHtcbiAgLyplc2xpbnQgZnVuYy1uYW1lczowKi9cbiAgQXhpb3MucHJvdG90eXBlW21ldGhvZF0gPSBmdW5jdGlvbih1cmwsIGNvbmZpZykge1xuICAgIHJldHVybiB0aGlzLnJlcXVlc3QobWVyZ2VDb25maWcoY29uZmlnIHx8IHt9LCB7XG4gICAgICBtZXRob2QsXG4gICAgICB1cmwsXG4gICAgICBkYXRhOiAoY29uZmlnIHx8IHt9KS5kYXRhXG4gICAgfSkpO1xuICB9O1xufSk7XG5cbnV0aWxzLmZvckVhY2goWydwb3N0JywgJ3B1dCcsICdwYXRjaCddLCBmdW5jdGlvbiBmb3JFYWNoTWV0aG9kV2l0aERhdGEobWV0aG9kKSB7XG4gIC8qZXNsaW50IGZ1bmMtbmFtZXM6MCovXG5cbiAgZnVuY3Rpb24gZ2VuZXJhdGVIVFRQTWV0aG9kKGlzRm9ybSkge1xuICAgIHJldHVybiBmdW5jdGlvbiBodHRwTWV0aG9kKHVybCwgZGF0YSwgY29uZmlnKSB7XG4gICAgICByZXR1cm4gdGhpcy5yZXF1ZXN0KG1lcmdlQ29uZmlnKGNvbmZpZyB8fCB7fSwge1xuICAgICAgICBtZXRob2QsXG4gICAgICAgIGhlYWRlcnM6IGlzRm9ybSA/IHtcbiAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ211bHRpcGFydC9mb3JtLWRhdGEnXG4gICAgICAgIH0gOiB7fSxcbiAgICAgICAgdXJsLFxuICAgICAgICBkYXRhXG4gICAgICB9KSk7XG4gICAgfTtcbiAgfVxuXG4gIEF4aW9zLnByb3RvdHlwZVttZXRob2RdID0gZ2VuZXJhdGVIVFRQTWV0aG9kKCk7XG5cbiAgQXhpb3MucHJvdG90eXBlW21ldGhvZCArICdGb3JtJ10gPSBnZW5lcmF0ZUhUVFBNZXRob2QodHJ1ZSk7XG59KTtcblxuZXhwb3J0IGRlZmF1bHQgQXhpb3M7XG4iLCIndXNlIHN0cmljdCc7XG5cbmltcG9ydCBDYW5jZWxlZEVycm9yIGZyb20gJy4vQ2FuY2VsZWRFcnJvci5qcyc7XG5cbi8qKlxuICogQSBgQ2FuY2VsVG9rZW5gIGlzIGFuIG9iamVjdCB0aGF0IGNhbiBiZSB1c2VkIHRvIHJlcXVlc3QgY2FuY2VsbGF0aW9uIG9mIGFuIG9wZXJhdGlvbi5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBleGVjdXRvciBUaGUgZXhlY3V0b3IgZnVuY3Rpb24uXG4gKlxuICogQHJldHVybnMge0NhbmNlbFRva2VufVxuICovXG5jbGFzcyBDYW5jZWxUb2tlbiB7XG4gIGNvbnN0cnVjdG9yKGV4ZWN1dG9yKSB7XG4gICAgaWYgKHR5cGVvZiBleGVjdXRvciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignZXhlY3V0b3IgbXVzdCBiZSBhIGZ1bmN0aW9uLicpO1xuICAgIH1cblxuICAgIGxldCByZXNvbHZlUHJvbWlzZTtcblxuICAgIHRoaXMucHJvbWlzZSA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uIHByb21pc2VFeGVjdXRvcihyZXNvbHZlKSB7XG4gICAgICByZXNvbHZlUHJvbWlzZSA9IHJlc29sdmU7XG4gICAgfSk7XG5cbiAgICBjb25zdCB0b2tlbiA9IHRoaXM7XG5cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xuICAgIHRoaXMucHJvbWlzZS50aGVuKGNhbmNlbCA9PiB7XG4gICAgICBpZiAoIXRva2VuLl9saXN0ZW5lcnMpIHJldHVybjtcblxuICAgICAgbGV0IGkgPSB0b2tlbi5fbGlzdGVuZXJzLmxlbmd0aDtcblxuICAgICAgd2hpbGUgKGktLSA+IDApIHtcbiAgICAgICAgdG9rZW4uX2xpc3RlbmVyc1tpXShjYW5jZWwpO1xuICAgICAgfVxuICAgICAgdG9rZW4uX2xpc3RlbmVycyA9IG51bGw7XG4gICAgfSk7XG5cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xuICAgIHRoaXMucHJvbWlzZS50aGVuID0gb25mdWxmaWxsZWQgPT4ge1xuICAgICAgbGV0IF9yZXNvbHZlO1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcbiAgICAgIGNvbnN0IHByb21pc2UgPSBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHtcbiAgICAgICAgdG9rZW4uc3Vic2NyaWJlKHJlc29sdmUpO1xuICAgICAgICBfcmVzb2x2ZSA9IHJlc29sdmU7XG4gICAgICB9KS50aGVuKG9uZnVsZmlsbGVkKTtcblxuICAgICAgcHJvbWlzZS5jYW5jZWwgPSBmdW5jdGlvbiByZWplY3QoKSB7XG4gICAgICAgIHRva2VuLnVuc3Vic2NyaWJlKF9yZXNvbHZlKTtcbiAgICAgIH07XG5cbiAgICAgIHJldHVybiBwcm9taXNlO1xuICAgIH07XG5cbiAgICBleGVjdXRvcihmdW5jdGlvbiBjYW5jZWwobWVzc2FnZSwgY29uZmlnLCByZXF1ZXN0KSB7XG4gICAgICBpZiAodG9rZW4ucmVhc29uKSB7XG4gICAgICAgIC8vIENhbmNlbGxhdGlvbiBoYXMgYWxyZWFkeSBiZWVuIHJlcXVlc3RlZFxuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHRva2VuLnJlYXNvbiA9IG5ldyBDYW5jZWxlZEVycm9yKG1lc3NhZ2UsIGNvbmZpZywgcmVxdWVzdCk7XG4gICAgICByZXNvbHZlUHJvbWlzZSh0b2tlbi5yZWFzb24pO1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIFRocm93cyBhIGBDYW5jZWxlZEVycm9yYCBpZiBjYW5jZWxsYXRpb24gaGFzIGJlZW4gcmVxdWVzdGVkLlxuICAgKi9cbiAgdGhyb3dJZlJlcXVlc3RlZCgpIHtcbiAgICBpZiAodGhpcy5yZWFzb24pIHtcbiAgICAgIHRocm93IHRoaXMucmVhc29uO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBTdWJzY3JpYmUgdG8gdGhlIGNhbmNlbCBzaWduYWxcbiAgICovXG5cbiAgc3Vic2NyaWJlKGxpc3RlbmVyKSB7XG4gICAgaWYgKHRoaXMucmVhc29uKSB7XG4gICAgICBsaXN0ZW5lcih0aGlzLnJlYXNvbik7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuX2xpc3RlbmVycykge1xuICAgICAgdGhpcy5fbGlzdGVuZXJzLnB1c2gobGlzdGVuZXIpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl9saXN0ZW5lcnMgPSBbbGlzdGVuZXJdO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBVbnN1YnNjcmliZSBmcm9tIHRoZSBjYW5jZWwgc2lnbmFsXG4gICAqL1xuXG4gIHVuc3Vic2NyaWJlKGxpc3RlbmVyKSB7XG4gICAgaWYgKCF0aGlzLl9saXN0ZW5lcnMpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgaW5kZXggPSB0aGlzLl9saXN0ZW5lcnMuaW5kZXhPZihsaXN0ZW5lcik7XG4gICAgaWYgKGluZGV4ICE9PSAtMSkge1xuICAgICAgdGhpcy5fbGlzdGVuZXJzLnNwbGljZShpbmRleCwgMSk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgYW4gb2JqZWN0IHRoYXQgY29udGFpbnMgYSBuZXcgYENhbmNlbFRva2VuYCBhbmQgYSBmdW5jdGlvbiB0aGF0LCB3aGVuIGNhbGxlZCxcbiAgICogY2FuY2VscyB0aGUgYENhbmNlbFRva2VuYC5cbiAgICovXG4gIHN0YXRpYyBzb3VyY2UoKSB7XG4gICAgbGV0IGNhbmNlbDtcbiAgICBjb25zdCB0b2tlbiA9IG5ldyBDYW5jZWxUb2tlbihmdW5jdGlvbiBleGVjdXRvcihjKSB7XG4gICAgICBjYW5jZWwgPSBjO1xuICAgIH0pO1xuICAgIHJldHVybiB7XG4gICAgICB0b2tlbixcbiAgICAgIGNhbmNlbFxuICAgIH07XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgQ2FuY2VsVG9rZW47XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogU3ludGFjdGljIHN1Z2FyIGZvciBpbnZva2luZyBhIGZ1bmN0aW9uIGFuZCBleHBhbmRpbmcgYW4gYXJyYXkgZm9yIGFyZ3VtZW50cy5cbiAqXG4gKiBDb21tb24gdXNlIGNhc2Ugd291bGQgYmUgdG8gdXNlIGBGdW5jdGlvbi5wcm90b3R5cGUuYXBwbHlgLlxuICpcbiAqICBgYGBqc1xuICogIGZ1bmN0aW9uIGYoeCwgeSwgeikge31cbiAqICB2YXIgYXJncyA9IFsxLCAyLCAzXTtcbiAqICBmLmFwcGx5KG51bGwsIGFyZ3MpO1xuICogIGBgYFxuICpcbiAqIFdpdGggYHNwcmVhZGAgdGhpcyBleGFtcGxlIGNhbiBiZSByZS13cml0dGVuLlxuICpcbiAqICBgYGBqc1xuICogIHNwcmVhZChmdW5jdGlvbih4LCB5LCB6KSB7fSkoWzEsIDIsIDNdKTtcbiAqICBgYGBcbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFja1xuICpcbiAqIEByZXR1cm5zIHtGdW5jdGlvbn1cbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc3ByZWFkKGNhbGxiYWNrKSB7XG4gIHJldHVybiBmdW5jdGlvbiB3cmFwKGFycikge1xuICAgIHJldHVybiBjYWxsYmFjay5hcHBseShudWxsLCBhcnIpO1xuICB9O1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgdXRpbHMgZnJvbSAnLi8uLi91dGlscy5qcyc7XG5cbi8qKlxuICogRGV0ZXJtaW5lcyB3aGV0aGVyIHRoZSBwYXlsb2FkIGlzIGFuIGVycm9yIHRocm93biBieSBBeGlvc1xuICpcbiAqIEBwYXJhbSB7Kn0gcGF5bG9hZCBUaGUgdmFsdWUgdG8gdGVzdFxuICpcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHRoZSBwYXlsb2FkIGlzIGFuIGVycm9yIHRocm93biBieSBBeGlvcywgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGlzQXhpb3NFcnJvcihwYXlsb2FkKSB7XG4gIHJldHVybiB1dGlscy5pc09iamVjdChwYXlsb2FkKSAmJiAocGF5bG9hZC5pc0F4aW9zRXJyb3IgPT09IHRydWUpO1xufVxuIiwiY29uc3QgSHR0cFN0YXR1c0NvZGUgPSB7XG4gIENvbnRpbnVlOiAxMDAsXG4gIFN3aXRjaGluZ1Byb3RvY29sczogMTAxLFxuICBQcm9jZXNzaW5nOiAxMDIsXG4gIEVhcmx5SGludHM6IDEwMyxcbiAgT2s6IDIwMCxcbiAgQ3JlYXRlZDogMjAxLFxuICBBY2NlcHRlZDogMjAyLFxuICBOb25BdXRob3JpdGF0aXZlSW5mb3JtYXRpb246IDIwMyxcbiAgTm9Db250ZW50OiAyMDQsXG4gIFJlc2V0Q29udGVudDogMjA1LFxuICBQYXJ0aWFsQ29udGVudDogMjA2LFxuICBNdWx0aVN0YXR1czogMjA3LFxuICBBbHJlYWR5UmVwb3J0ZWQ6IDIwOCxcbiAgSW1Vc2VkOiAyMjYsXG4gIE11bHRpcGxlQ2hvaWNlczogMzAwLFxuICBNb3ZlZFBlcm1hbmVudGx5OiAzMDEsXG4gIEZvdW5kOiAzMDIsXG4gIFNlZU90aGVyOiAzMDMsXG4gIE5vdE1vZGlmaWVkOiAzMDQsXG4gIFVzZVByb3h5OiAzMDUsXG4gIFVudXNlZDogMzA2LFxuICBUZW1wb3JhcnlSZWRpcmVjdDogMzA3LFxuICBQZXJtYW5lbnRSZWRpcmVjdDogMzA4LFxuICBCYWRSZXF1ZXN0OiA0MDAsXG4gIFVuYXV0aG9yaXplZDogNDAxLFxuICBQYXltZW50UmVxdWlyZWQ6IDQwMixcbiAgRm9yYmlkZGVuOiA0MDMsXG4gIE5vdEZvdW5kOiA0MDQsXG4gIE1ldGhvZE5vdEFsbG93ZWQ6IDQwNSxcbiAgTm90QWNjZXB0YWJsZTogNDA2LFxuICBQcm94eUF1dGhlbnRpY2F0aW9uUmVxdWlyZWQ6IDQwNyxcbiAgUmVxdWVzdFRpbWVvdXQ6IDQwOCxcbiAgQ29uZmxpY3Q6IDQwOSxcbiAgR29uZTogNDEwLFxuICBMZW5ndGhSZXF1aXJlZDogNDExLFxuICBQcmVjb25kaXRpb25GYWlsZWQ6IDQxMixcbiAgUGF5bG9hZFRvb0xhcmdlOiA0MTMsXG4gIFVyaVRvb0xvbmc6IDQxNCxcbiAgVW5zdXBwb3J0ZWRNZWRpYVR5cGU6IDQxNSxcbiAgUmFuZ2VOb3RTYXRpc2ZpYWJsZTogNDE2LFxuICBFeHBlY3RhdGlvbkZhaWxlZDogNDE3LFxuICBJbUFUZWFwb3Q6IDQxOCxcbiAgTWlzZGlyZWN0ZWRSZXF1ZXN0OiA0MjEsXG4gIFVucHJvY2Vzc2FibGVFbnRpdHk6IDQyMixcbiAgTG9ja2VkOiA0MjMsXG4gIEZhaWxlZERlcGVuZGVuY3k6IDQyNCxcbiAgVG9vRWFybHk6IDQyNSxcbiAgVXBncmFkZVJlcXVpcmVkOiA0MjYsXG4gIFByZWNvbmRpdGlvblJlcXVpcmVkOiA0MjgsXG4gIFRvb01hbnlSZXF1ZXN0czogNDI5LFxuICBSZXF1ZXN0SGVhZGVyRmllbGRzVG9vTGFyZ2U6IDQzMSxcbiAgVW5hdmFpbGFibGVGb3JMZWdhbFJlYXNvbnM6IDQ1MSxcbiAgSW50ZXJuYWxTZXJ2ZXJFcnJvcjogNTAwLFxuICBOb3RJbXBsZW1lbnRlZDogNTAxLFxuICBCYWRHYXRld2F5OiA1MDIsXG4gIFNlcnZpY2VVbmF2YWlsYWJsZTogNTAzLFxuICBHYXRld2F5VGltZW91dDogNTA0LFxuICBIdHRwVmVyc2lvbk5vdFN1cHBvcnRlZDogNTA1LFxuICBWYXJpYW50QWxzb05lZ290aWF0ZXM6IDUwNixcbiAgSW5zdWZmaWNpZW50U3RvcmFnZTogNTA3LFxuICBMb29wRGV0ZWN0ZWQ6IDUwOCxcbiAgTm90RXh0ZW5kZWQ6IDUxMCxcbiAgTmV0d29ya0F1dGhlbnRpY2F0aW9uUmVxdWlyZWQ6IDUxMSxcbn07XG5cbk9iamVjdC5lbnRyaWVzKEh0dHBTdGF0dXNDb2RlKS5mb3JFYWNoKChba2V5LCB2YWx1ZV0pID0+IHtcbiAgSHR0cFN0YXR1c0NvZGVbdmFsdWVdID0ga2V5O1xufSk7XG5cbmV4cG9ydCBkZWZhdWx0IEh0dHBTdGF0dXNDb2RlO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgdXRpbHMgZnJvbSAnLi91dGlscy5qcyc7XG5pbXBvcnQgYmluZCBmcm9tICcuL2hlbHBlcnMvYmluZC5qcyc7XG5pbXBvcnQgQXhpb3MgZnJvbSAnLi9jb3JlL0F4aW9zLmpzJztcbmltcG9ydCBtZXJnZUNvbmZpZyBmcm9tICcuL2NvcmUvbWVyZ2VDb25maWcuanMnO1xuaW1wb3J0IGRlZmF1bHRzIGZyb20gJy4vZGVmYXVsdHMvaW5kZXguanMnO1xuaW1wb3J0IGZvcm1EYXRhVG9KU09OIGZyb20gJy4vaGVscGVycy9mb3JtRGF0YVRvSlNPTi5qcyc7XG5pbXBvcnQgQ2FuY2VsZWRFcnJvciBmcm9tICcuL2NhbmNlbC9DYW5jZWxlZEVycm9yLmpzJztcbmltcG9ydCBDYW5jZWxUb2tlbiBmcm9tICcuL2NhbmNlbC9DYW5jZWxUb2tlbi5qcyc7XG5pbXBvcnQgaXNDYW5jZWwgZnJvbSAnLi9jYW5jZWwvaXNDYW5jZWwuanMnO1xuaW1wb3J0IHtWRVJTSU9OfSBmcm9tICcuL2Vudi9kYXRhLmpzJztcbmltcG9ydCB0b0Zvcm1EYXRhIGZyb20gJy4vaGVscGVycy90b0Zvcm1EYXRhLmpzJztcbmltcG9ydCBBeGlvc0Vycm9yIGZyb20gJy4vY29yZS9BeGlvc0Vycm9yLmpzJztcbmltcG9ydCBzcHJlYWQgZnJvbSAnLi9oZWxwZXJzL3NwcmVhZC5qcyc7XG5pbXBvcnQgaXNBeGlvc0Vycm9yIGZyb20gJy4vaGVscGVycy9pc0F4aW9zRXJyb3IuanMnO1xuaW1wb3J0IEF4aW9zSGVhZGVycyBmcm9tIFwiLi9jb3JlL0F4aW9zSGVhZGVycy5qc1wiO1xuaW1wb3J0IGFkYXB0ZXJzIGZyb20gJy4vYWRhcHRlcnMvYWRhcHRlcnMuanMnO1xuaW1wb3J0IEh0dHBTdGF0dXNDb2RlIGZyb20gJy4vaGVscGVycy9IdHRwU3RhdHVzQ29kZS5qcyc7XG5cbi8qKlxuICogQ3JlYXRlIGFuIGluc3RhbmNlIG9mIEF4aW9zXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGRlZmF1bHRDb25maWcgVGhlIGRlZmF1bHQgY29uZmlnIGZvciB0aGUgaW5zdGFuY2VcbiAqXG4gKiBAcmV0dXJucyB7QXhpb3N9IEEgbmV3IGluc3RhbmNlIG9mIEF4aW9zXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUluc3RhbmNlKGRlZmF1bHRDb25maWcpIHtcbiAgY29uc3QgY29udGV4dCA9IG5ldyBBeGlvcyhkZWZhdWx0Q29uZmlnKTtcbiAgY29uc3QgaW5zdGFuY2UgPSBiaW5kKEF4aW9zLnByb3RvdHlwZS5yZXF1ZXN0LCBjb250ZXh0KTtcblxuICAvLyBDb3B5IGF4aW9zLnByb3RvdHlwZSB0byBpbnN0YW5jZVxuICB1dGlscy5leHRlbmQoaW5zdGFuY2UsIEF4aW9zLnByb3RvdHlwZSwgY29udGV4dCwge2FsbE93bktleXM6IHRydWV9KTtcblxuICAvLyBDb3B5IGNvbnRleHQgdG8gaW5zdGFuY2VcbiAgdXRpbHMuZXh0ZW5kKGluc3RhbmNlLCBjb250ZXh0LCBudWxsLCB7YWxsT3duS2V5czogdHJ1ZX0pO1xuXG4gIC8vIEZhY3RvcnkgZm9yIGNyZWF0aW5nIG5ldyBpbnN0YW5jZXNcbiAgaW5zdGFuY2UuY3JlYXRlID0gZnVuY3Rpb24gY3JlYXRlKGluc3RhbmNlQ29uZmlnKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUluc3RhbmNlKG1lcmdlQ29uZmlnKGRlZmF1bHRDb25maWcsIGluc3RhbmNlQ29uZmlnKSk7XG4gIH07XG5cbiAgcmV0dXJuIGluc3RhbmNlO1xufVxuXG4vLyBDcmVhdGUgdGhlIGRlZmF1bHQgaW5zdGFuY2UgdG8gYmUgZXhwb3J0ZWRcbmNvbnN0IGF4aW9zID0gY3JlYXRlSW5zdGFuY2UoZGVmYXVsdHMpO1xuXG4vLyBFeHBvc2UgQXhpb3MgY2xhc3MgdG8gYWxsb3cgY2xhc3MgaW5oZXJpdGFuY2VcbmF4aW9zLkF4aW9zID0gQXhpb3M7XG5cbi8vIEV4cG9zZSBDYW5jZWwgJiBDYW5jZWxUb2tlblxuYXhpb3MuQ2FuY2VsZWRFcnJvciA9IENhbmNlbGVkRXJyb3I7XG5heGlvcy5DYW5jZWxUb2tlbiA9IENhbmNlbFRva2VuO1xuYXhpb3MuaXNDYW5jZWwgPSBpc0NhbmNlbDtcbmF4aW9zLlZFUlNJT04gPSBWRVJTSU9OO1xuYXhpb3MudG9Gb3JtRGF0YSA9IHRvRm9ybURhdGE7XG5cbi8vIEV4cG9zZSBBeGlvc0Vycm9yIGNsYXNzXG5heGlvcy5BeGlvc0Vycm9yID0gQXhpb3NFcnJvcjtcblxuLy8gYWxpYXMgZm9yIENhbmNlbGVkRXJyb3IgZm9yIGJhY2t3YXJkIGNvbXBhdGliaWxpdHlcbmF4aW9zLkNhbmNlbCA9IGF4aW9zLkNhbmNlbGVkRXJyb3I7XG5cbi8vIEV4cG9zZSBhbGwvc3ByZWFkXG5heGlvcy5hbGwgPSBmdW5jdGlvbiBhbGwocHJvbWlzZXMpIHtcbiAgcmV0dXJuIFByb21pc2UuYWxsKHByb21pc2VzKTtcbn07XG5cbmF4aW9zLnNwcmVhZCA9IHNwcmVhZDtcblxuLy8gRXhwb3NlIGlzQXhpb3NFcnJvclxuYXhpb3MuaXNBeGlvc0Vycm9yID0gaXNBeGlvc0Vycm9yO1xuXG4vLyBFeHBvc2UgbWVyZ2VDb25maWdcbmF4aW9zLm1lcmdlQ29uZmlnID0gbWVyZ2VDb25maWc7XG5cbmF4aW9zLkF4aW9zSGVhZGVycyA9IEF4aW9zSGVhZGVycztcblxuYXhpb3MuZm9ybVRvSlNPTiA9IHRoaW5nID0+IGZvcm1EYXRhVG9KU09OKHV0aWxzLmlzSFRNTEZvcm0odGhpbmcpID8gbmV3IEZvcm1EYXRhKHRoaW5nKSA6IHRoaW5nKTtcblxuYXhpb3MuZ2V0QWRhcHRlciA9IGFkYXB0ZXJzLmdldEFkYXB0ZXI7XG5cbmF4aW9zLkh0dHBTdGF0dXNDb2RlID0gSHR0cFN0YXR1c0NvZGU7XG5cbmF4aW9zLmRlZmF1bHQgPSBheGlvcztcblxuLy8gdGhpcyBtb2R1bGUgc2hvdWxkIG9ubHkgaGF2ZSBhIGRlZmF1bHQgZXhwb3J0XG5leHBvcnQgZGVmYXVsdCBheGlvc1xuIiwiaW1wb3J0IHsgUmVjaXBlVHlwZSwgU3RhdHVzIH0gZnJvbSBcInR5cGVzL2FwaVR5cGVzXCI7XHJcblxyXG5leHBvcnQgY29uc3QgUmVjaXBlSW5pdDogUmVjaXBlVHlwZSA9IHtcclxuICAgIGlkOiAwLFxyXG4gICAgdGl0bGU6ICcuLi4nLFxyXG4gICAgaW1hZ2U6ICcnLFxyXG4gICAgcHJlcGFyYXRpb25NaW51dGVzOiAwLFxyXG4gICAgY29va2luZ01pbnV0ZXM6IDAsXHJcbiAgICByZWFkeUluTWludXRlczogMCxcclxuICAgIHNlcnZpbmdzOiAwLCAgICBcclxuICAgIHN1bW1hcnk6ICcuLi4nLFxyXG4gICAgYWdncmVnYXRlTGlrZXM6IDAsXHJcbiAgICBleHRlbmRlZEluZ3JlZGllbnRzOiBbXSxcclxuICAgIGFuYWx5emVkSW5zdHJ1Y3Rpb25zOiBbeyBzdGVwczogW10gfV1cclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IE5vdFN0YXJ0ZWRTdGF0dXM6IFN0YXR1cyA9IHtcclxuICAgIHN0YXR1c05hbWU6ICdOT1RfU1RBUlRFRCcsXHJcbiAgICBzdGF0dXNNZXNzYWdlOiAn0LfQsNCz0YDRg9C30LrQsCDQtNCw0L3QvdGL0YUg0L3QtSDQvdCw0YfQsNC70LDRgdGMJyxcclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IExvYWRpbmdTdGF0dXM6IFN0YXR1cyA9IHtcclxuICAgIHN0YXR1c05hbWU6ICdMT0FESU5HJyxcclxuICAgIHN0YXR1c01lc3NhZ2U6ICcnLFxyXG59XHJcblxyXG5leHBvcnQgY29uc3QgU3VjY2Vzc2Z1bFN0YXR1czogU3RhdHVzID0ge1xyXG4gICAgc3RhdHVzTmFtZTogJ1NVQ0NFU1MnLFxyXG4gICAgc3RhdHVzTWVzc2FnZTogJycsXHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBlcnJvclN0YXR1cyA9IChlcnJvck1lczogc3RyaW5nKTogU3RhdHVzID0+ICh7XHJcbiAgICBzdGF0dXNOYW1lOiAnRVJST1InLFxyXG4gICAgc3RhdHVzTWVzc2FnZTogZXJyb3JNZXMsXHJcbn0pIiwiZXhwb3J0IGNvbnN0IGFwaUtleSA9ICc0MDUzMmIzZTcwMWM0NjViYjIwMTM0OTgzYWMwZjgzNyc7XHJcbi8vIDY2ZTRkZjQ3ODYyYzQ5NzhiZmFmYTk5Y2U5OTFlMTZkXHJcbi8vIDQwNTMyYjNlNzAxYzQ2NWJiMjAxMzQ5ODNhYzBmODM3XHJcbmV4cG9ydCBjb25zdCBwYWdlRWxlbWVudENvdW50ID0gOTtcclxuZXhwb3J0IGNvbnN0IHVybFByZWZpeCA9ICdodHRwczovL2FwaS5zcG9vbmFjdWxhci5jb20vJztcclxuZXhwb3J0IGNvbnN0IGltYWdlUHJlZml4ID0gJ2h0dHBzOi8vaW1nLnNwb29uYWN1bGFyLmNvbS8nO1xyXG5cclxuZXhwb3J0IGNvbnN0IG1lYWxUeXBlcyA9IFtcclxuICAgICdtYWluIGNvdXJzZScsICdzaWRlIGRpc2gnLFxyXG4gICAgJ2Rlc3NlcnQnLCAnYXBwZXRpemVyJyxcclxuICAgICdzYWxhZCcsICdicmVhZCcsXHJcbiAgICAnYnJlYWtmYXN0JywgJ3NvdXAnLFxyXG4gICAgJ2JldmVyYWdlJywgJ3NhdWNlJyxcclxuICAgICdtYXJpbmFkZScsICdmaW5nZXJmb29kJyxcclxuICAgICdzbmFjaycsICdkcmluayddO1xyXG5cclxuZXhwb3J0IGNvbnN0IGN1aXNpbmVMaXN0ID0gW1xyXG4gICAgJ0FmcmljYW4nLCAnQXNpYW4nLCAnQW1lcmljYW4nLCBcclxuICAgICdCcml0aXNoJywgJ0NhanVuJywgJ0NhcmliYmVhbicsXHJcbiAgICAnQ2hpbmVzZScsICdFYXN0ZXJuIEV1cm9wZWFuJywgJ0V1cm9wZWFuJywgXHJcbiAgICAnRnJlbmNoJywgJ0dlcm1hbicsICdHcmVlaycsICdJbmRpYW4nLCBcclxuICAgICdJcmlzaCcsICdJdGFsaWFuJywgJ0phcGFuZXNlJyxcclxuICAgICdKZXdpc2gnLCAnS29yZWFuJywgJ0xhdGluIEFtZXJpY2FuJywgXHJcbiAgICAnTWVkaXRlcnJhbmVhbicsICdNZXhpY2FuJywgJ01pZGRsZSBFYXN0ZXJuJyxcclxuICAgICdOb3JkaWMnLCAnU290aGVybicsICdTcGFuaXNoJywgXHJcbiAgICAnVGhhaScsICdWaWV0bmFtZXNlJ107XHJcblxyXG5leHBvcnQgY29uc3QgZGlldExpc3QgPSBbXHJcbiAgICAnR2x1dGVuIEZyZWUnLCAnS2V0b2dlbmljJyxcclxuICAgICdWZWdldGFyaWFuJywgJ0xhY3RvLVZlZ2V0YXJpYW4nLFxyXG4gICAgJ092by1WZWdldGFyaWFuJywgJ1ZlZ2FuJyxcclxuICAgICdQZXNjZXRhcmlhbicsICdQYWxlbycsXHJcbiAgICAnUHJpbWFsJywgJ0xvdyBGT0RNQVAnLCAnV2hvbGUzMCddO1xyXG5cclxuZXhwb3J0IGNvbnN0IGludG9sZXJhbmNlTGlzdCA9IFtcclxuICAgICdEYWlyeScsICdFZ2cnLFxyXG4gICAgJ0dsdXRlbicsICdHcmFpbicsXHJcbiAgICAnUGVhbnV0JywgJ1NlYWZvb2QnLFxyXG4gICAgJ1Nlc2FtZScsICdTaGVsbGZpc2gnLFxyXG4gICAgJ1NveScsICdTdWxmaXRlJyxcclxuICAgICdUcmVlIE51dCcsICdXaGVhdCddO1xyXG5cclxuZXhwb3J0IGNvbnN0IHNvcnRMaXN0ID0gW1xyXG4gICAgJ21ldGEtc2NvcmUnLCAncG9wdWxhcml0eScsICdoZWFsdGhpbmVzcycsXHJcbiAgICAncHJpY2UnLCAndGltZScsICdyYW5kb20nLFxyXG4gICAgJ21heC11c2VkLWluZ3JlZGllbnRzJywgJ21pbi1taXNzaW5nLWluZ3JlZGllbnRzJywgJ2FsY29ob2wnLFxyXG4gICAgJ2NhZmZlaW5lJywgJ2NvcHBlcicsICdlbmVyZ3knLFxyXG4gICAgJ2NhbG9yaWVzJywgJ2NhbGNpdW0nLCAnY2FyYm9oeWRyYXRlcycsXHJcbiAgICAnY2FyYnMnLCAnY2hvbGluZScsICdjaG9sZXN0ZXJvbCcsXHJcbiAgICAndG90YWwtZmF0JywgJ2ZsdW9yaWRlJywgJ3RyYW5zLWZhdCcsXHJcbiAgICAnc2F0dXJhdGVkLWZhdCcsICdtb25vLXVuc2F0dXJhdGVkLWZhdCcsICdwb2x5LXVuc2F0dXJhdGVkLWZhdCcsXHJcbiAgICAnZmliZXInLCAnZm9sYXRlJywgJ2ZvbGljLWFjaWQnLFxyXG4gICAgJ2lvZGluZScsICdpcm9uJywgJ21hZ25lc2l1bScsXHJcbiAgICAnbWFuZ2FuZXNlJywgJ3ZpdGFtaW4tYjMnLCAnbmlhY2luJyxcclxuICAgICd2aXRhbWluLWI1JywgJ3BhbnRvdGhlbmljLWFjaWQnLCAncGhvc3Bob3J1cycsXHJcbiAgICAncG90YXNzaXVtJywgJ3Byb3RlaW4nLCAndml0YW1pbi1iMicsXHJcbiAgICAncmlib2ZsYXZpbicsICdzZWxlbml1bScsICdzb2RpdW0nLFxyXG4gICAgJ3ZpdGFtaW4tYjEnLCAndGhpYW1pbicsICd2aXRhbWluLWEnLFxyXG4gICAgJ3ZpdGFtaW4tYjYnLCAndml0YW1pbi1iMTInLCAndml0YW1pbi1jJyxcclxuICAgICd2aXRhbWluLWQnLCAndml0YW1pbi1lJywgJ3ZpdGFtaW4taycsXHJcbiAgICAnc3VnYXInLCAnemluYyddO1xyXG5cclxuZXhwb3J0IGNvbnN0IHNvcnREaXJlY3Rpb25MaXN0ID0gWydhc2MnLCAnZGVzYyddO1xyXG5cclxuZXhwb3J0IGNvbnN0IHN0cmluZ0ZpbHRlcnMgPSBbXHJcbiAgICAnYXV0aG9yJywgJ3RhZ3MnLCBcclxuICAgICd0aXRsZU1hdGNoJywgJ2VxdWlwbWVudCdcclxuXTtcclxuXHJcbmV4cG9ydCBjb25zdCBib29sZWFuRmlsdGVycyA9IFsgJ2lnbm9yZVBhbnRyeScgXTtcclxuXHJcbmV4cG9ydCBjb25zdCBtaW5NYXhGaWx0ZXJzID0gW1xyXG4gICAgJ1NlcnZpbmdzJywgJ0NhcmJzJywgJ1Byb3RlaW4nLFxyXG4gICAgJ0NhbG9yaWVzJywgJ0ZhdCcsICdBbGNvaG9sJyxcclxuICAgICdDYWZmZWluZScsICdDb3BwZXInLCAnQ2FsY2l1bScsXHJcbiAgICAnQ2hvbGluZScsICdDaG9sZXN0ZXJvbCcsICdGbHVvcmlkZScsXHJcbiAgICAnU2F0dXJhdGVkRmF0JywgJ1ZpdGFtaW5BJywgJ1ZpdGFtaW5DJyxcclxuICAgICdWaXRhbWluRCcsICdWaXRhbWluRScsICdWaXRhbWluSycsXHJcbiAgICAnVml0YW1pbkIxJywgJ1ZpdGFtaW5CMicsICdWaXRhbWluQjUnLFxyXG4gICAgJ1ZpdGFtaW5CMycsICdWaXRhbWluQjYnLCAnVml0YW1pbkIxMicsXHJcbiAgICAnRmliZXInLCAnRm9sYXRlJywgJ0ZvbGljQWNpZCcsXHJcbiAgICAnSW9kaW5lJywgJ0lyb24nLCAnTWFnbmVzaXVtJyxcclxuICAgICdNYW5nYW5lc2UnLCAnUGhvc3Bob3J1cycsICdQb3Rhc3NpdW0nLFxyXG4gICAgJ1NlbGVuaXVtJywgJ1NvZGl1bScsICdTdWdhcicsXHJcbiAgICAnWmluYyddO1xyXG5cclxuZXhwb3J0IGNvbnN0IG51bWJlckZpbHRlcnMgPSBbICdtYXhSZWFkeVRpbWUnIF07XHJcblxyXG5leHBvcnQgY29uc3QgbWVhbFR5cGVzT3B0aW9ucyA9IG1lYWxUeXBlc1xyXG4gICAgLm1hcCgodHlwZSwgaW5kZXgpID0+ICh7IGtleTogaW5kZXgudG9TdHJpbmcoKSwgdmFsdWU6IHR5cGUgfSkpO1xyXG5cclxuZXhwb3J0IGNvbnN0IGN1aXNpbmVUeXBlc09wdGlvbnMgPSBjdWlzaW5lTGlzdFxyXG4gICAgLm1hcCgodHlwZSwgaW5kZXgpID0+ICh7IGtleTogaW5kZXgudG9TdHJpbmcoKSwgdmFsdWU6IHR5cGUudG9Mb3dlckNhc2UoKSB9KSk7XHJcblxyXG5leHBvcnQgY29uc3QgZGlldFR5cGVzT3B0aW9ucyA9IGRpZXRMaXN0XHJcbiAgICAubWFwKCh0eXBlLCBpbmRleCkgPT4gKHsga2V5OiBpbmRleC50b1N0cmluZygpLCB2YWx1ZTogdHlwZS50b0xvd2VyQ2FzZSgpIH0pKTtcclxuXHJcbmV4cG9ydCBjb25zdCBpbnRvbGVyYW5jZVR5cGVzT3B0aW9ucyA9IGludG9sZXJhbmNlTGlzdFxyXG4gICAgLm1hcCgodHlwZSwgaW5kZXgpID0+ICh7IGtleTogaW5kZXgudG9TdHJpbmcoKSwgdmFsdWU6IHR5cGUudG9Mb3dlckNhc2UoKSB9KSk7XHJcblxyXG5leHBvcnQgY29uc3QgbWluTWF4VHlwZXNPcHRpb25zID0gbWluTWF4RmlsdGVyc1xyXG4gICAgLm1hcCgodHlwZSwgaW5kZXgpID0+ICh7IGtleTogaW5kZXgudG9TdHJpbmcoKSwgdmFsdWU6IHR5cGUgfSkpO1xyXG5cclxuZXhwb3J0IGNvbnN0IHNvcnRUeXBlc09wdGlvbnMgPSBzb3J0TGlzdFxyXG4gICAgLm1hcCgodHlwZSwgaW5kZXgpID0+ICh7IGtleTogaW5kZXgudG9TdHJpbmcoKSwgdmFsdWU6IHR5cGUgfSkpO1xyXG5cclxuZXhwb3J0IGNvbnN0IHNvcnRkaXJlY3RUeXBlc09wdGlvbnMgPSBzb3J0RGlyZWN0aW9uTGlzdFxyXG4gICAgLm1hcCgodHlwZSwgaW5kZXgpID0+ICh7IGtleTogaW5kZXgudG9TdHJpbmcoKSwgdmFsdWU6IHR5cGUgfSkpO1xyXG5cclxuZXhwb3J0IGNvbnN0IHB1YmxpY1RlbXBsYXRlcyA9IFtcclxuICAgIHtcclxuICAgICAgICBrZXk6ICczNycsXHJcbiAgICAgICAgdmFsdWU6IFwiQnVzeSBXb3JrIFdlZWtcIlxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgICBrZXk6ICc0ODAnLFxyXG4gICAgICAgIHZhbHVlOiBcIktldG8gTWVhbCBQbGFuXCJcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgICAga2V5OiAnMTIwJyxcclxuICAgICAgICB2YWx1ZTogXCJOb3QtU28tU3RyaWN0IFBhbGVvIE1lYWwgUGxhblwiXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICAgIGtleTogJzQ1MScsXHJcbiAgICAgICAgdmFsdWU6IFwiV2VlayAxIE1lYWwgUGxhblwiXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICAgIGtleTogJzU4MScsXHJcbiAgICAgICAgdmFsdWU6IFwiV2hvbGUzMCBNZWFsIFBsYW5cIlxyXG4gICAgfSxcclxuXTtcclxuXHJcbmV4cG9ydCBjb25zdCBpbmdyZWRpZW50RmlsdGVycyA9IHtcclxuICAgIHNvcnQ6IHtcclxuICAgICAgICB0eXBlOiAnT1BUSU9OJyxcclxuICAgICAgICBwbGFjZWhvbGRlcjogJ3NvcnQnLFxyXG4gICAgICAgIG9wdGlvbnM6IHNvcnRUeXBlc09wdGlvbnMsXHJcbiAgICAgICAgc2VsZWN0TW9kZTogJ09ORSdcclxuICAgIH0sXHJcbiAgICBzb3J0RGlyZWN0aW9uOiB7XHJcbiAgICAgICAgdHlwZTogJ09QVElPTicsXHJcbiAgICAgICAgcGxhY2Vob2xkZXI6ICdzb3J0IGRpcmVjdGlvbicsXHJcbiAgICAgICAgb3B0aW9uczogc29ydGRpcmVjdFR5cGVzT3B0aW9ucyxcclxuICAgICAgICBzZWxlY3RNb2RlOiAnT05FJ1xyXG4gICAgfSxcclxuICAgIGxhbmd1YWdlOiB7XHJcbiAgICAgICAgdHlwZTogJ1NUUklORycsXHJcbiAgICAgICAgcGxhY2Vob2xkZXI6ICdlbiBvciBkZSdcclxuICAgIH0sXHJcbn07XHJcblxyXG5leHBvcnQgY29uc3QgcmVjaXBlc0ZpbHRlcnMgPSB7XHJcbiAgICAgICAgY3Vpc2luZToge1xyXG4gICAgICAgICAgICB0eXBlOiAnT1BUSU9OJyxcclxuICAgICAgICAgICAgcGxhY2Vob2xkZXI6ICdjdWlzaW5lJyxcclxuICAgICAgICAgICAgb3B0aW9uczogY3Vpc2luZVR5cGVzT3B0aW9uc1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZXhjbHVkZUN1aXNpbmU6IHtcclxuICAgICAgICAgICAgdHlwZTogJ09QVElPTicsXHJcbiAgICAgICAgICAgIHBsYWNlaG9sZGVyOiAnZXhjbHVkZUN1aXNpbmUnLFxyXG4gICAgICAgICAgICBvcHRpb25zOiBjdWlzaW5lVHlwZXNPcHRpb25zXHJcbiAgICAgICAgfSxcclxuICAgICAgICBkaWV0OiB7XHJcbiAgICAgICAgICAgIHR5cGU6ICdPUFRJT04nLFxyXG4gICAgICAgICAgICBwbGFjZWhvbGRlcjogJ2RpZXQnLFxyXG4gICAgICAgICAgICBvcHRpb25zOiBkaWV0VHlwZXNPcHRpb25zLFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgaW50b2xlcmFuY2VzOiB7IFxyXG4gICAgICAgICAgICB0eXBlOiAnT1BUSU9OJyxcclxuICAgICAgICAgICAgcGxhY2Vob2xkZXI6ICdpbnRvbGVyYW5jZXMnLFxyXG4gICAgICAgICAgICBvcHRpb25zOiBpbnRvbGVyYW5jZVR5cGVzT3B0aW9uc1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZXF1aXBtZW50OiB7XHJcbiAgICAgICAgICAgIHR5cGU6ICdTVFJJTkcnLFxyXG4gICAgICAgICAgICBwbGFjZWhvbGRlcjogJ2VxdWlwbWVudCdcclxuICAgICAgICB9LFxyXG4gICAgICAgIGluY2x1ZGVJbmdyZWRpZW50czoge1xyXG4gICAgICAgICAgICB0eXBlOiAnU1RSSU5HJyxcclxuICAgICAgICAgICAgcGxhY2Vob2xkZXI6ICd0b21hdG8sY2hlZXNlJ1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZXhjbHVkZUluZ3JlZGllbnRzOiB7XHJcbiAgICAgICAgICAgIHR5cGU6ICdTVFJJTkcnLFxyXG4gICAgICAgICAgICBwbGFjZWhvbGRlcjogJ2VnZ3MsdG9tYXRvJ1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgYXV0aG9yOiB7XHJcbiAgICAgICAgICAgIHR5cGU6ICdTVFJJTkcnLFxyXG4gICAgICAgICAgICBwbGFjZWhvbGRlcjogJ2F1dGhvcicsXHJcbiAgICAgICAgfSxcclxuICAgICAgICB0YWdzOiB7XHJcbiAgICAgICAgICAgIHR5cGU6ICdTVFJJTkcnLFxyXG4gICAgICAgICAgICBwbGFjZWhvbGRlcjogJ3RhZzEsdGFnMiwuLi4nXHJcbiAgICAgICAgfSxcclxuICAgICAgICB0aXRsdGVNYXRjaDoge1xyXG4gICAgICAgICAgICB0eXBlOiAnU1RSSU5HJyxcclxuICAgICAgICAgICAgcGxhY2Vob2xkZXI6ICdUaXRsZSdcclxuICAgICAgICB9LFxyXG4gICAgICAgIG1heFJlYWR5VGltZToge1xyXG4gICAgICAgICAgICB0eXBlOiAnTlVNQkVSJyxcclxuICAgICAgICAgICAgcGxhY2Vob2xkZXI6ICdtYXggcmVhZHkgdGltZScsXHJcbiAgICAgICAgfSxcclxuICAgICAgICBpZ25vcmVQYW50cnk6IHtcclxuICAgICAgICAgICAgdHlwZTogJ0JPT0xFQU4nLFxyXG4gICAgICAgICAgICBwbGFjZWhvbGRlcjogJy4uLicsXHJcbiAgICAgICAgfSxcclxuICAgICAgICBvdGhlcjoge1xyXG4gICAgICAgICAgICB0eXBlOiAnTUlOTUFYJyxcclxuICAgICAgICAgICAgbWluTWF4VmFsdWVzOiBtaW5NYXhUeXBlc09wdGlvbnMsXHJcbiAgICAgICAgfSxcclxuICAgICAgICBzb3J0OiB7XHJcbiAgICAgICAgICAgIHR5cGU6ICdPUFRJT04nLFxyXG4gICAgICAgICAgICBwbGFjZWhvbGRlcjogJ3NvcnQnLFxyXG4gICAgICAgICAgICBvcHRpb25zOiBzb3J0VHlwZXNPcHRpb25zLFxyXG4gICAgICAgICAgICBzZWxlY3RNb2RlOiAnT05FJ1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgc29ydERpcmVjdGlvbjoge1xyXG4gICAgICAgICAgICB0eXBlOiAnT1BUSU9OJyxcclxuICAgICAgICAgICAgcGxhY2Vob2xkZXI6ICdzb3J0IGRpcmVjdGlvbicsXHJcbiAgICAgICAgICAgIG9wdGlvbnM6IHNvcnRkaXJlY3RUeXBlc09wdGlvbnMsXHJcbiAgICAgICAgICAgIHNlbGVjdE1vZGU6ICdPTkUnXHJcbiAgICAgICAgfVxyXG4gICAgfTsiLCJpbXBvcnQgeyBJTG9jYWxTdG9yZSB9IGZyb20gXCJob29rcy91c2VMb2NhbFN0b3JlXCI7XHJcbmltcG9ydCB7IGFjdGlvbiwgbWFrZU9ic2VydmFibGUsIG9ic2VydmFibGUsIGNvbXB1dGVkIH0gZnJvbSBcIm1vYnhcIjtcclxuaW1wb3J0IHsgU3RhdHVzIH0gZnJvbSBcInR5cGVzL2FwaVR5cGVzXCI7XHJcbmltcG9ydCBheGlvcyBmcm9tIFwiYXhpb3NcIjtcclxuaW1wb3J0IHtcclxuICAgIExvYWRpbmdTdGF0dXMsIFxyXG4gICAgTm90U3RhcnRlZFN0YXR1cywgXHJcbiAgICBTdWNjZXNzZnVsU3RhdHVzLCBcclxuICAgIGVycm9yU3RhdHVzIFxyXG59IGZyb20gXCJjb25maWcvaW5pdFZhbHVlc1wiO1xyXG5pbXBvcnQgeyB1cmxQcmVmaXgsIGFwaUtleSB9IGZyb20gXCJjb25maWcvYXBpXCI7XHJcblxyXG50eXBlIENvb2tpZU9iamVjdFR5cGUgPSB7XHJcbiAgICBba2V5OiBzdHJpbmddOiBzdHJpbmcsXHJcbn1cclxuXHJcbnR5cGUgVXNlclN0YXR1c1R5cGUgPSAnbm9uZScgfCAnYXV0aCc7XHJcbmV4cG9ydCB0eXBlIExvZ2luUmVxdWVzdFR5cGUgPSB7XHJcbiAgICB1c2VybmFtZTogc3RyaW5nLFxyXG4gICAgZmlyc3ROYW1lOiBzdHJpbmcsXHJcbiAgICBsYXN0TmFtZTogc3RyaW5nLFxyXG4gICAgZW1haWw6IHN0cmluZyxcclxufVxyXG50eXBlIExvZ2luUmVzcG9uc2VUeXBlID0ge1xyXG4gICAgdXNlcm5hbWU6IHN0cmluZyxcclxuICAgIHNwb29uYWN1bGFyUGFzc3dvcmQ6IHN0cmluZyxcclxuICAgIGhhc2g6IHN0cmluZyxcclxufVxyXG50eXBlIFVzZXJUeXBlID0gTG9naW5SZXF1ZXN0VHlwZSAmIExvZ2luUmVzcG9uc2VUeXBlOyBcclxuXHJcbnR5cGUgUHJpdmF0ZUZpZWxkcyA9ICdfdXNlcicgfCAnX3VzZXJTdGF0dXMnIHwgJ19zdGF0dXMnO1xyXG5jb25zdCBpbml0VXNlcjogVXNlclR5cGUgPSB7XHJcbiAgICB1c2VybmFtZTogJycsXHJcbiAgICBmaXJzdE5hbWU6ICcnLFxyXG4gICAgbGFzdE5hbWU6ICcnLFxyXG4gICAgZW1haWw6ICcnLFxyXG4gICAgc3Bvb25hY3VsYXJQYXNzd29yZDogJycsXHJcbiAgICBoYXNoOiAnJyxcclxufTtcclxuXHJcbmNsYXNzIFVzZXJTdG9yZSBpbXBsZW1lbnRzIElMb2NhbFN0b3JlIHtcclxuXHJcbiAgICBwcml2YXRlIF91c2VyOiBVc2VyVHlwZSA9IGluaXRVc2VyO1xyXG4gICAgcHJpdmF0ZSBfdXNlclN0YXR1czogVXNlclN0YXR1c1R5cGUgPSAnbm9uZSc7XHJcbiAgICBwcml2YXRlIF9zdGF0dXM6IFN0YXR1cyA9IE5vdFN0YXJ0ZWRTdGF0dXM7XHJcblxyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgbWFrZU9ic2VydmFibGU8VXNlclN0b3JlLCBQcml2YXRlRmllbGRzPih0aGlzLCB7XHJcbiAgICAgICAgICAgIF91c2VyOiBvYnNlcnZhYmxlLnJlZixcclxuICAgICAgICAgICAgX3VzZXJTdGF0dXM6IG9ic2VydmFibGUsXHJcbiAgICAgICAgICAgIF9zdGF0dXM6IG9ic2VydmFibGUucmVmLFxyXG4gICAgICAgICAgICBzZXRTdGF0dXM6IGFjdGlvbi5ib3VuZCxcclxuICAgICAgICAgICAgc2V0VXNlckRhdGE6IGFjdGlvbi5ib3VuZCxcclxuICAgICAgICAgICAgZGVsZXRlVXNlckRhdGE6IGFjdGlvbi5ib3VuZCxcclxuICAgICAgICAgICAgbG9naW46IGFjdGlvbi5ib3VuZCxcclxuICAgICAgICAgICAgZ2V0Q29va2llczogYWN0aW9uLmJvdW5kLFxyXG4gICAgICAgICAgICBsb2dvdXQ6IGFjdGlvbi5ib3VuZCxcclxuXHJcbiAgICAgICAgICAgIHVzZXI6IGNvbXB1dGVkLFxyXG4gICAgICAgICAgICBzdGF0dXM6IGNvbXB1dGVkLFxyXG4gICAgICAgICAgICB1c2VyU3RhdHVzOiBjb21wdXRlZCxcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBzZXRDb29raWUoa2V5OiBzdHJpbmcsIHZhbHVlOiBzdHJpbmcsIG1vbnRoczogbnVtYmVyID0gMykge1xyXG4gICAgICAgIGNvbnN0IGNvb2tpZUtleSA9IGVuY29kZVVSSUNvbXBvbmVudChrZXkpO1xyXG4gICAgICAgIGNvbnN0IGNvb2tpZVZhbHVlID0gZW5jb2RlVVJJQ29tcG9uZW50KHZhbHVlKTtcclxuICAgICAgICBjb25zdCBjb29raWVEYXRhID0gW2Nvb2tpZUtleSwgY29va2llVmFsdWVdLmpvaW4oJz0nKTtcclxuICAgICAgICBsZXQgZGF0ZSA9IG5ldyBEYXRlKCk7XHJcbiAgICAgICAgZGF0ZS5zZXRNb250aChkYXRlLmdldE1vbnRoKCkgKyBtb250aHMpO1xyXG4gICAgICAgIGNvbnN0IGNvb2tpZUV4cGlyZXMgPSBbJ2V4cGlyZXMnLCBkYXRlLnRvVVRDU3RyaW5nKCldLmpvaW4oJz0nKTtcclxuICAgICAgICBkb2N1bWVudC5jb29raWUgPSBcclxuICAgICAgICAgICAgW2Nvb2tpZURhdGEsIGNvb2tpZUV4cGlyZXMsICdzZWN1cmUnLCAnc2FtZXNpdGU9bGF4J10uam9pbignOyAnKTtcclxuICAgIH1cclxuXHJcbiAgICBkZWxldGVDb29raWUoa2V5OiBzdHJpbmcpIHtcclxuICAgICAgICB0aGlzLnNldENvb2tpZShrZXksICcnLCAwKTtcclxuICAgIH1cclxuXHJcbiAgICBwYXJzZUNvb2tpZSgpOiBDb29raWVPYmplY3RUeXBlIHtcclxuICAgICAgICBjb25zdCBjb29raWVPYmogPSB7fSBhcyBDb29raWVPYmplY3RUeXBlO1xyXG4gICAgICAgIGRvY3VtZW50LmNvb2tpZS5zcGxpdCgnOyAnKS5mb3JFYWNoKChjb29raWUpID0+IHtcclxuICAgICAgICAgICAgY29uc3QgY29va2llUGFpciA9IGNvb2tpZS5zcGxpdCgnPScpLm1hcCgocGFpclVuaXQpID0+IGRlY29kZVVSSUNvbXBvbmVudChwYWlyVW5pdCkpO1xyXG4gICAgICAgICAgICBPYmplY3QuYXNzaWduKGNvb2tpZU9iaiwgeyBbY29va2llUGFpclswXV06IGNvb2tpZVBhaXJbMV0gfSk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHJldHVybiBjb29raWVPYmo7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0Q29va2llUHJvcGVydHkoY29va2llT2JqOiBDb29raWVPYmplY3RUeXBlLCBuYW1lOiBzdHJpbmcpIHtcclxuICAgICAgICByZXR1cm4gY29va2llT2JqW25hbWVdIHx8ICcnO1xyXG4gICAgfVxyXG5cclxuICAgIHNldFVzZXJEYXRhKHVzZXI6IFVzZXJUeXBlKSB7XHJcbiAgICAgICAgT2JqZWN0LmVudHJpZXModXNlcikuZm9yRWFjaCgoW2tleSwgdmFsdWVdKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuc2V0Q29va2llKCdfJyArIGtleSwgdmFsdWUpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRoaXMuX3VzZXIgPSB7IC4uLnVzZXIgfTtcclxuICAgICAgICB0aGlzLl91c2VyU3RhdHVzID0gJ2F1dGgnO1xyXG4gICAgfVxyXG5cclxuICAgIGRlbGV0ZVVzZXJEYXRhKCkge1xyXG4gICAgICAgIE9iamVjdC5rZXlzKHRoaXMuX3VzZXIpLmZvckVhY2goKGtleSkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLmRlbGV0ZUNvb2tpZSgnXycgKyBrZXkpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRoaXMuX3VzZXJTdGF0dXMgPSAnbm9uZSc7XHJcbiAgICAgICAgdGhpcy5fdXNlciA9IGluaXRVc2VyO1xyXG4gICAgICAgIHRoaXMuc2V0U3RhdHVzKE5vdFN0YXJ0ZWRTdGF0dXMpO1xyXG4gICAgfVxyXG5cclxuICAgIHNldFN0YXR1cyhuZXdTdGF0dXM6IFN0YXR1cykge1xyXG4gICAgICAgIHRoaXMuX3N0YXR1cyA9IHsgLi4ubmV3U3RhdHVzIH07XHJcbiAgICB9XHJcblxyXG4gICAgbG9naW4odXNlcjogTG9naW5SZXF1ZXN0VHlwZSkge1xyXG4gICAgICAgIHRoaXMuX3VzZXIgPSBpbml0VXNlcjtcclxuICAgICAgICB0aGlzLl91c2VyU3RhdHVzID0gJ25vbmUnO1xyXG4gICAgICAgIHRoaXMuc2V0U3RhdHVzKExvYWRpbmdTdGF0dXMpO1xyXG4gICAgICAgIGF4aW9zLnBvc3QodXJsUHJlZml4ICsgJ3VzZXJzL2Nvbm5lY3Q/YXBpS2V5PScgKyBhcGlLZXksIHsgLi4udXNlciB9KVxyXG4gICAgICAgIC50aGVuKChyZXNwKSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IHsgc3RhdHVzLCAuLi51c2VyUmVzcCB9ID0gcmVzcC5kYXRhO1xyXG4gICAgICAgICAgICBpZiAoc3RhdHVzID09PSAnc3VjY2VzcycpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2V0U3RhdHVzKFN1Y2Nlc3NmdWxTdGF0dXMpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgdXNlclJlc3BvbnNlID0gdXNlclJlc3AgYXMgTG9naW5SZXNwb25zZVR5cGU7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNldFVzZXJEYXRhKHtcclxuICAgICAgICAgICAgICAgICAgICAuLi51c2VyLCAuLi51c2VyUmVzcG9uc2UsXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3VzZXIgPSB7IC4uLnRoaXMuX3VzZXIgfTtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3VzZXJTdGF0dXMgPSB0aGlzLl91c2VyU3RhdHVzO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zZXRTdGF0dXMoZXJyb3JTdGF0dXMocmVzcC5kYXRhWydtZXNzYWdlJ10pKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pXHJcbiAgICAgICAgLmNhdGNoKChlcnIpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5zZXRTdGF0dXMoZXJyb3JTdGF0dXMoZXJyLm1lc3NhZ2UpKTtcclxuICAgICAgICAgICAgdGhpcy5fdXNlciA9IHsgLi4udGhpcy5fdXNlciB9O1xyXG4gICAgICAgICAgICB0aGlzLl91c2VyU3RhdHVzID0gdGhpcy5fdXNlclN0YXR1cztcclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLl91c2VyID0geyAuLi50aGlzLl91c2VyIH07XHJcbiAgICAgICAgdGhpcy5fdXNlclN0YXR1cyA9IHRoaXMuX3VzZXJTdGF0dXM7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0Q29va2llcygpIHtcclxuICAgICAgICB0aGlzLl91c2VyU3RhdHVzID0gJ25vbmUnO1xyXG4gICAgICAgIGNvbnN0IGNvb2tpZU9iaiA9IHRoaXMucGFyc2VDb29raWUoKTtcclxuICAgICAgICBPYmplY3Qua2V5cyh0aGlzLl91c2VyKS5mb3JFYWNoKChrZXkpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5fdXNlcltrZXkgYXMga2V5b2YgVXNlclR5cGVdID0gdGhpcy5nZXRDb29raWVQcm9wZXJ0eShjb29raWVPYmosICdfJyArIGtleSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgaWYgKHRoaXMuX3VzZXIuaGFzaCAhPT0gJycpIHtcclxuICAgICAgICAgICAgdGhpcy5fdXNlclN0YXR1cyA9ICdhdXRoJztcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgbG9nb3V0KCkge1xyXG4gICAgICAgIHRoaXMuZGVsZXRlVXNlckRhdGEoKTtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgdXNlcigpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fdXNlcjtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgc3RhdHVzKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9zdGF0dXM7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IHVzZXJTdGF0dXMoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3VzZXJTdGF0dXM7XHJcbiAgICB9XHJcblxyXG4gICAgZGVzdHJveSgpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLl91c2VyID0gaW5pdFVzZXI7XHJcbiAgICAgICAgdGhpcy5fdXNlclN0YXR1cyA9ICdub25lJzsgICAgICAgIFxyXG4gICAgICAgIHRoaXMuX3N0YXR1cyA9IE5vdFN0YXJ0ZWRTdGF0dXM7XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IG5ldyBVc2VyU3RvcmUoKTsiLCJleHBvcnQgeyBkZWZhdWx0IH0gZnJvbSAnLi9Vc2VyU3RvcmUnOyIsImNvbnN0IHBhdGhzID0gW1xyXG4gICAge1xyXG4gICAgICAgIG5hbWU6ICdSZWNpcGVzJyxcclxuICAgICAgICB1cmw6ICcvcmVjaXBlcycsXHJcbiAgICAgICAgYXV0aFJlcXVpcmVkOiBmYWxzZSxcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgICAgbmFtZTogJ0luZ3JlZGllbnRzJyxcclxuICAgICAgICB1cmw6ICcvaW5ncmVkaWVudHMnLFxyXG4gICAgICAgIGF1dGhSZXF1aXJlZDogZmFsc2UsXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICAgIG5hbWU6ICdQcm9kdWN0cycsXHJcbiAgICAgICAgdXJsOiAnL3Byb2R1Y3RzJyxcclxuICAgICAgICBhdXRoUmVxdWlyZWQ6IGZhbHNlLFxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgICBuYW1lOiAnTWVudSBJdGVtcycsXHJcbiAgICAgICAgdXJsOiAnL21lbnVJdGVtcycsXHJcbiAgICAgICAgYXV0aFJlcXVpcmVkOiBmYWxzZSxcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgICAgbmFtZTogJ01lYWwgcGxhbm5pbmcnLFxyXG4gICAgICAgIHVybDogJy9wbGFubmluZycsXHJcbiAgICAgICAgYXV0aFJlcXVpcmVkOiB0cnVlLFxyXG4gICAgfSxcclxuXTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IHBhdGhzOyIsIlxuICAgICAgaW1wb3J0IEFQSSBmcm9tIFwiIS4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiO1xuICAgICAgaW1wb3J0IGRvbUFQSSBmcm9tIFwiIS4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0Rm4gZnJvbSBcIiEuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzXCI7XG4gICAgICBpbXBvcnQgc2V0QXR0cmlidXRlcyBmcm9tIFwiIS4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydFN0eWxlRWxlbWVudCBmcm9tIFwiIS4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qc1wiO1xuICAgICAgaW1wb3J0IHN0eWxlVGFnVHJhbnNmb3JtRm4gZnJvbSBcIiEuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qc1wiO1xuICAgICAgaW1wb3J0IGNvbnRlbnQsICogYXMgbmFtZWRFeHBvcnQgZnJvbSBcIiEhLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanM/P3J1bGVTZXRbMV0ucnVsZXNbMF0udXNlWzFdIS4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9wb3N0Y3NzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cnVsZVNldFsxXS5ydWxlc1swXS51c2VbMl0hLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vTWVudS5tb2R1bGUuc2Nzc1wiO1xuICAgICAgXG4gICAgICBcblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybSA9IHN0eWxlVGFnVHJhbnNmb3JtRm47XG5vcHRpb25zLnNldEF0dHJpYnV0ZXMgPSBzZXRBdHRyaWJ1dGVzO1xub3B0aW9ucy5pbnNlcnQgPSBpbnNlcnRGbi5iaW5kKG51bGwsIFwiaGVhZFwiKTtcbm9wdGlvbnMuZG9tQVBJID0gZG9tQVBJO1xub3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7XG5cbnZhciB1cGRhdGUgPSBBUEkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5leHBvcnQgKiBmcm9tIFwiISEuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cnVsZVNldFsxXS5ydWxlc1swXS51c2VbMV0hLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Bvc3Rjc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9ydWxlU2V0WzFdLnJ1bGVzWzBdLnVzZVsyXSEuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanMhLi9NZW51Lm1vZHVsZS5zY3NzXCI7XG4gICAgICAgZXhwb3J0IGRlZmF1bHQgY29udGVudCAmJiBjb250ZW50LmxvY2FscyA/IGNvbnRlbnQubG9jYWxzIDogdW5kZWZpbmVkO1xuIiwiaW1wb3J0IGNsYXNzTmFtZXMgZnJvbSBcImNsYXNzbmFtZXNcIjtcclxuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSBcInJlYWN0XCI7XHJcbmltcG9ydCB7IHVzZUVmZmVjdCwgdXNlU3RhdGUgfSBmcm9tIFwicmVhY3RcIjtcclxuXHJcbmltcG9ydCB7IHVzZU5hdmlnYXRlICwgdXNlTG9jYXRpb24gfSBmcm9tIFwicmVhY3Qtcm91dGVyLWRvbVwiO1xyXG5pbXBvcnQgdXNlclN0b3JlIGZyb20gXCJzdG9yZS9Vc2VyU3RvcmVcIjtcclxuXHJcbmltcG9ydCBUZXh0IGZyb20gXCJjb21wb25lbnRzL1RleHRcIjtcclxuaW1wb3J0IHBhdGhzIGZyb20gXCJjb25maWcvcGF0aHNcIjtcclxuaW1wb3J0IHN0eWxlcyBmcm9tICcuL01lbnUubW9kdWxlLnNjc3MnO1xyXG5cclxuY29uc3QgTWVudTogUmVhY3QuRkMgPSAoKSA9PiB7XHJcblxyXG4gICAgY29uc3QgbmF2aWdhdGUgPSB1c2VOYXZpZ2F0ZSgpO1xyXG4gICAgY29uc3QgbG9jYXRpb24gPSB1c2VMb2NhdGlvbigpO1xyXG4gICAgY29uc3QgW3NlbGVjdGVkVXJsLCBzZXRVcmxdID0gdXNlU3RhdGUoMCk7XHJcbiAgICBjb25zdCB7IHVzZXJTdGF0dXMgfSA9IHVzZXJTdG9yZTtcclxuXHJcbiAgICB1c2VFZmZlY3QoKCkgPT4ge1xyXG4gICAgICAgIGNvbnN0IGluZGV4ID0gcGF0aHMubWFwKChwYXRoKSA9PiBwYXRoLnVybCkuaW5kZXhPZihsb2NhdGlvbi5wYXRobmFtZSk7XHJcbiAgICAgICAgc2V0VXJsKGluZGV4KTtcclxuICAgIH0sIFtsb2NhdGlvbi5wYXRobmFtZV0pO1xyXG5cclxuICAgIGNvbnN0IGdvVG9QYXRoID0gKGluZGV4OiBudW1iZXIsIHVybDogc3RyaW5nLCBhdXRoUmVxdWlyZWQ6IGJvb2xlYW4gPSBmYWxzZSkgPT4ge1xyXG4gICAgICAgIGlmICghYXV0aFJlcXVpcmVkIHx8IHVzZXJTdGF0dXMgPT09ICdhdXRoJykge1xyXG4gICAgICAgICAgICBzZXRVcmwoaW5kZXgpO1xyXG4gICAgICAgICAgICBuYXZpZ2F0ZSh1cmwpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIG5hdmlnYXRlKCcvbG9naW4nKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIHJldHVybiAoXHJcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9e3N0eWxlc1tcIm1lbnVcIl19PlxyXG4gICAgICAgICAgICB7cGF0aHMubWFwKChwYXRoLCBpbmRleCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgaGFuZGxlQ2xpY2sgPSAoKSA9PiB7IFxyXG4gICAgICAgICAgICAgICAgICAgIGdvVG9QYXRoKGluZGV4LCBwYXRoLnVybCwgcGF0aC5hdXRoUmVxdWlyZWQpOyBcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gKFxyXG4gICAgICAgICAgICAgICAgICAgIDxUZXh0XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGtleT17cGF0aC5uYW1lfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9e2NsYXNzTmFtZXMoe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgW3N0eWxlc1snbWVudV9fb3B0aW9uJ11dOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgW3N0eWxlc1snbWVudV9fb3B0aW9uX3NlbGVjdGVkJ11dOiBzZWxlY3RlZFVybCA9PT0gaW5kZXgsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2aWV3PSdwLTE2JyB0YWc9J2RpdidcclxuICAgICAgICAgICAgICAgICAgICAgICAgb25DTGljaz17aGFuZGxlQ2xpY2t9XHJcbiAgICAgICAgICAgICAgICAgICAgPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB7cGF0aC5uYW1lfVxyXG4gICAgICAgICAgICAgICAgICAgIDwvVGV4dD5cclxuICAgICAgICAgICAgICAgIClcclxuICAgICAgICAgICAgfSl9XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICApXHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IE1lbnU7IiwiZXhwb3J0IHsgZGVmYXVsdCB9IGZyb20gJy4vTWVudSc7IiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnXHJcbmltcG9ydCBJY29uLCB7IEljb25Qcm9wcyB9IGZyb20gJy4uL0ljb24nO1xyXG5cclxuXHJcbmNvbnN0IEhlYXJ0SWNvbjogUmVhY3QuRkM8SWNvblByb3BzPiA9IChwcm9wcykgPT4ge1xyXG5cclxuICAgIHJldHVybiAoXHJcbiAgICAgICAgPEljb24gXHJcbiAgICAgICAgICAgIHsuLi5wcm9wc31cclxuICAgICAgICAgICAgd2lkdGg9JzE5JyBoZWlnaHQ9JzE5JyB2aWV3Qm94PVwiMCAwIDE5IDE5XCJcclxuICAgICAgICA+XHJcbiAgICAgICAgICAgIDxwYXRoIFxyXG4gICAgICAgICAgICAgICAgZmlsbFJ1bGU9XCJldmVub2RkXCIgXHJcbiAgICAgICAgICAgICAgICBjbGlwUnVsZT1cImV2ZW5vZGRcIiBcclxuICAgICAgICAgICAgICAgIGQ9XCJNOS41MDAwMSAzLjA5NTg2QzcuODAwNTcgMC44NjMzODcgNC45NjA3OSAwLjE3MzQ1NiAyLjgzMTUgMi4yMTc3M0MwLjcwMjE5NyA0LjI2MjAxIDAuNDAyNDIxIDcuNjc5OTEgMi4wNzQ1NyAxMC4wOTc3QzMuNDY0ODUgMTIuMTA3OSA3LjY3MjMyIDE2LjM0NzYgOS4wNTEzIDE3LjcxOTlDOS4yMDU1MyAxNy44NzM0IDkuMjgyNjkgMTcuOTUwMiA5LjM3MjcgMTcuOTgwM0M5LjQ1MTE4IDE4LjAwNjYgOS41MzcxMiAxOC4wMDY2IDkuNjE1NyAxNy45ODAzQzkuNzA1NzEgMTcuOTUwMiA5Ljc4Mjc3IDE3Ljg3MzQgOS45MzcxIDE3LjcxOTlDMTEuMzE2MSAxNi4zNDc2IDE1LjUyMzUgMTIuMTA3OSAxNi45MTM4IDEwLjA5NzdDMTguNTg2IDcuNjc5OTEgMTguMzIyNyA0LjI0MDUgMTYuMTU2OCAyLjIxNzczQzEzLjk5MDkgMC4xOTQ5NiAxMS4xOTk0IDAuODYzMzg3IDkuNTAwMDEgMy4wOTU4NlpcIiBcclxuICAgICAgICAgICAgICAgIHN0cm9rZT1cIiNCNTQ2MEZcIiBcclxuICAgICAgICAgICAgICAgIHN0cm9rZVdpZHRoPVwiMlwiIFxyXG4gICAgICAgICAgICAgICAgc3Ryb2tlTGluZWNhcD1cInJvdW5kXCIgXHJcbiAgICAgICAgICAgICAgICBzdHJva2VMaW5lam9pbj1cInJvdW5kXCJcclxuICAgICAgICAgICAgLz5cclxuICAgICAgICA8L0ljb24+XHJcbiAgICApXHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IEhlYXJ0SWNvbjtcclxuIiwiZXhwb3J0IHsgZGVmYXVsdCB9IGZyb20gJy4vSGVhcnRJY29uJzsiLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCdcclxuaW1wb3J0IEljb24sIHsgSWNvblByb3BzIH0gZnJvbSAnLi4vSWNvbic7XHJcblxyXG5cclxuY29uc3QgVXNlckljb246IFJlYWN0LkZDPEljb25Qcm9wcz4gPSAocHJvcHMpID0+IHtcclxuXHJcbiAgICByZXR1cm4gKFxyXG4gICAgICAgIDxJY29uIHsuLi5wcm9wc30+XHJcbiAgICAgICAgICAgIDxnIGNsaXBQYXRoPVwidXJsKCNjbGlwMF81MDVfNjUxKVwiPlxyXG4gICAgICAgICAgICA8cGF0aCBcclxuICAgICAgICAgICAgICAgIGZpbGxSdWxlPVwiZXZlbm9kZFwiIFxyXG4gICAgICAgICAgICAgICAgY2xpcFJ1bGU9XCJldmVub2RkXCIgXHJcbiAgICAgICAgICAgICAgICBkPVwiTTEyIDEzQzE0LjM5NTUgMTMgMTYuNTc1MyAxMy42OTM3IDE4LjE3NzcgMTQuNjcxNUMxOC45Nzg2IDE1LjE2MDIgMTkuNjYyMSAxNS43MzYzIDIwLjE1NiAxNi4zNjE1QzIwLjY0MiAxNi45NzY3IDIxIDE3LjcxMyAyMSAxOC41QzIxIDE5LjM0NDkgMjAuNTg4OSAyMC4wMTExIDE5Ljk5NzMgMjAuNDg1OUMxOS40MzY4IDIwLjkzNTkgMTguNjk4MiAyMS4yMzM2IDE3LjkxMjggMjEuNDQxNkMxNi4zMzUzIDIxLjg1OTMgMTQuMjI5IDIyIDEyIDIyQzkuNzcxMDEgMjIgNy42NjQ2NiAyMS44NTkzIDYuMDg3MTYgMjEuNDQxNkM1LjMwMTgyIDIxLjIzMzYgNC41NjMyNCAyMC45MzU5IDQuMDAyNjYgMjAuNDg1OUMzLjQxMTE0IDIwLjAxMTEgMyAxOS4zNDQ5IDMgMTguNUMzIDE3LjcxMyAzLjM1ODA1IDE2Ljk3NjcgMy44NDM5NyAxNi4zNjE1QzQuMzM3ODggMTUuNzM2MyA1LjAyMTQzIDE1LjE2MDIgNS44MjIyNyAxNC42NzE1QzcuNDI0NjcgMTMuNjkzNyA5LjYwNDUzIDEzIDEyIDEzWk0xMiAxNUM5Ljk3NzE5IDE1IDguMTU3MDUgMTUuNTg5OCA2Ljg2NDAyIDE2LjM3ODhDNi4yMTcxNCAxNi43NzM1IDUuNzI5MTMgMTcuMjAxNSA1LjQxMzM5IDE3LjYwMTNDNS4wODk2NyAxOC4wMTExIDUgMTguMzIwNiA1IDE4LjVDNSAxOC42MjE2IDUuMDM2NTcgMTguNzUxMiA1LjI1NDcgMTguOTI2M0M1LjUwMzc2IDE5LjEyNjIgNS45MzY3NiAxOS4zMzI4IDYuNTk5MTQgMTkuNTA4MkM3LjkxNzA2IDE5Ljg1NzIgOS44MTA3MSAyMCAxMiAyMEMxNC4xODkzIDIwIDE2LjA4MjkgMTkuODU3MiAxNy40MDA5IDE5LjUwODJDMTguMDYzMiAxOS4zMzI4IDE4LjQ5NjIgMTkuMTI2MiAxOC43NDUzIDE4LjkyNjNDMTguOTYzNCAxOC43NTEyIDE5IDE4LjYyMTYgMTkgMTguNUMxOSAxOC4zMjA2IDE4LjkxMDMgMTguMDExMSAxOC41ODY2IDE3LjYwMTNDMTguMjcwOSAxNy4yMDE1IDE3Ljc4MjkgMTYuNzczNSAxNy4xMzYgMTYuMzc4OEMxNS44NDI5IDE1LjU4OTggMTQuMDIyOCAxNSAxMiAxNVpNMTIgMkMxNC43NjE0IDIgMTcgNC4yMzg1OCAxNyA3QzE3IDkuNzYxNDIgMTQuNzYxNCAxMiAxMiAxMkM5LjIzODU4IDEyIDcgOS43NjE0MiA3IDdDNyA0LjIzODU4IDkuMjM4NTggMiAxMiAyWk0xMiA0QzEwLjM0MzEgNCA5IDUuMzQzMTUgOSA3QzkgOC42NTY4NSAxMC4zNDMxIDEwIDEyIDEwQzEzLjY1NjkgMTAgMTUgOC42NTY4NSAxNSA3QzE1IDUuMzQzMTUgMTMuNjU2OSA0IDEyIDRaXCIgXHJcbiAgICAgICAgICAgICAgICBmaWxsPVwiI0I1NDYwRlwiXHJcbiAgICAgICAgICAgIC8+XHJcbiAgICAgICAgICAgIDwvZz5cclxuICAgICAgICAgICAgPGRlZnM+XHJcbiAgICAgICAgICAgIDxjbGlwUGF0aCBpZD1cImNsaXAwXzUwNV82NTFcIj5cclxuICAgICAgICAgICAgPHJlY3QgXHJcbiAgICAgICAgICAgICAgICB3aWR0aD1cIjI0XCIgXHJcbiAgICAgICAgICAgICAgICBoZWlnaHQ9XCIyNFwiIFxyXG4gICAgICAgICAgICAgICAgZmlsbD1cIndoaXRlXCJcclxuICAgICAgICAgICAgLz5cclxuICAgICAgICAgICAgPC9jbGlwUGF0aD5cclxuICAgICAgICAgICAgPC9kZWZzPlxyXG4gICAgICAgIDwvSWNvbj5cclxuICAgIClcclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgVXNlckljb247XHJcbiIsImV4cG9ydCB7IGRlZmF1bHQgfSBmcm9tICcuL1VzZXJJY29uJzsiLCJcbiAgICAgIGltcG9ydCBBUEkgZnJvbSBcIiEuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIjtcbiAgICAgIGltcG9ydCBkb21BUEkgZnJvbSBcIiEuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydEZuIGZyb20gXCIhLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qc1wiO1xuICAgICAgaW1wb3J0IHNldEF0dHJpYnV0ZXMgZnJvbSBcIiEuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRTdHlsZUVsZW1lbnQgZnJvbSBcIiEuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanNcIjtcbiAgICAgIGltcG9ydCBzdHlsZVRhZ1RyYW5zZm9ybUZuIGZyb20gXCIhLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanNcIjtcbiAgICAgIGltcG9ydCBjb250ZW50LCAqIGFzIG5hbWVkRXhwb3J0IGZyb20gXCIhIS4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9ydWxlU2V0WzFdLnJ1bGVzWzBdLnVzZVsxXSEuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvcG9zdGNzcy1sb2FkZXIvZGlzdC9janMuanM/P3J1bGVTZXRbMV0ucnVsZXNbMF0udXNlWzJdIS4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL1JpZ2h0QmxvY2subW9kdWxlLnNjc3NcIjtcbiAgICAgIFxuICAgICAgXG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0gPSBzdHlsZVRhZ1RyYW5zZm9ybUZuO1xub3B0aW9ucy5zZXRBdHRyaWJ1dGVzID0gc2V0QXR0cmlidXRlcztcbm9wdGlvbnMuaW5zZXJ0ID0gaW5zZXJ0Rm4uYmluZChudWxsLCBcImhlYWRcIik7XG5vcHRpb25zLmRvbUFQSSA9IGRvbUFQSTtcbm9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50ID0gaW5zZXJ0U3R5bGVFbGVtZW50O1xuXG52YXIgdXBkYXRlID0gQVBJKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0ICogZnJvbSBcIiEhLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanM/P3J1bGVTZXRbMV0ucnVsZXNbMF0udXNlWzFdIS4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9wb3N0Y3NzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cnVsZVNldFsxXS5ydWxlc1swXS51c2VbMl0hLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vUmlnaHRCbG9jay5tb2R1bGUuc2Nzc1wiO1xuICAgICAgIGV4cG9ydCBkZWZhdWx0IGNvbnRlbnQgJiYgY29udGVudC5sb2NhbHMgPyBjb250ZW50LmxvY2FscyA6IHVuZGVmaW5lZDtcbiIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gXCJyZWFjdFwiO1xyXG5pbXBvcnQgeyBtZW1vLCB1c2VDYWxsYmFjayB9IGZyb20gXCJyZWFjdFwiO1xyXG5pbXBvcnQgeyB1c2VOYXZpZ2F0ZSB9IGZyb20gXCJyZWFjdC1yb3V0ZXItZG9tXCI7XHJcbmltcG9ydCBIZWFydEljb24gZnJvbSBcImNvbXBvbmVudHMvaWNvbnMvSGVhcnRJY29uXCI7XHJcbmltcG9ydCBVc2VySWNvbiBmcm9tIFwiY29tcG9uZW50cy9pY29ucy9Vc2VySWNvblwiO1xyXG5pbXBvcnQgdXNlclN0b3JlIGZyb20gXCJzdG9yZS9Vc2VyU3RvcmVcIjtcclxuaW1wb3J0IHN0eWxlcyBmcm9tICcuL1JpZ2h0QmxvY2subW9kdWxlLnNjc3MnO1xyXG5cclxuY29uc3QgUmlnaHRCbG9jazogUmVhY3QuRkMgPSAoKSA9PiB7XHJcblxyXG4gICAgY29uc3QgbmF2aWdhdGUgPSB1c2VOYXZpZ2F0ZSgpO1xyXG4gICAgY29uc3QgeyB1c2VyU3RhdHVzIH0gPSB1c2VyU3RvcmU7XHJcblxyXG4gICAgY29uc3QgZ29Ub1NhdmVkID0gdXNlQ2FsbGJhY2soKCkgPT4geyBcclxuICAgICAgICBuYXZpZ2F0ZSgnL3NhdmVkJyk7XHJcbiAgICB9LCBbbmF2aWdhdGVdKTtcclxuXHJcbiAgICBjb25zdCBnb1RvUHJvZmlsZSA9IHVzZUNhbGxiYWNrKCgpID0+IHsgXHJcbiAgICAgICAgaWYgKHVzZXJTdGF0dXMgPT09ICdhdXRoJykge1xyXG4gICAgICAgICAgICBuYXZpZ2F0ZSgnL3VzZXInKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBuYXZpZ2F0ZSgnL2xvZ2luJyk7XHJcbiAgICAgICAgfVxyXG4gICAgfSwgW25hdmlnYXRlXSk7XHJcblxyXG4gICAgcmV0dXJuIChcclxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT17c3R5bGVzW1wicmlnaHQtYmxvY2tcIl19PlxyXG4gICAgICAgICAgICA8SGVhcnRJY29uIG9uQ2xpY2s9e2dvVG9TYXZlZH0vPlxyXG4gICAgICAgICAgICA8VXNlckljb24gb25DbGljaz17Z29Ub1Byb2ZpbGV9Lz5cclxuICAgICAgICA8L2Rpdj5cclxuICAgIClcclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgbWVtbyhSaWdodEJsb2NrKTsiLCJleHBvcnQgeyBkZWZhdWx0IH0gZnJvbSAnLi9SaWdodEJsb2NrJzsiLCJcbiAgICAgIGltcG9ydCBBUEkgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIjtcbiAgICAgIGltcG9ydCBkb21BUEkgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydEZuIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qc1wiO1xuICAgICAgaW1wb3J0IHNldEF0dHJpYnV0ZXMgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRTdHlsZUVsZW1lbnQgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanNcIjtcbiAgICAgIGltcG9ydCBzdHlsZVRhZ1RyYW5zZm9ybUZuIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanNcIjtcbiAgICAgIGltcG9ydCBjb250ZW50LCAqIGFzIG5hbWVkRXhwb3J0IGZyb20gXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9ydWxlU2V0WzFdLnJ1bGVzWzBdLnVzZVsxXSEuLi8uLi8uLi9ub2RlX21vZHVsZXMvcG9zdGNzcy1sb2FkZXIvZGlzdC9janMuanM/P3J1bGVTZXRbMV0ucnVsZXNbMF0udXNlWzJdIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL0hlYWRlci5tb2R1bGUuc2Nzc1wiO1xuICAgICAgXG4gICAgICBcblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybSA9IHN0eWxlVGFnVHJhbnNmb3JtRm47XG5vcHRpb25zLnNldEF0dHJpYnV0ZXMgPSBzZXRBdHRyaWJ1dGVzO1xub3B0aW9ucy5pbnNlcnQgPSBpbnNlcnRGbi5iaW5kKG51bGwsIFwiaGVhZFwiKTtcbm9wdGlvbnMuZG9tQVBJID0gZG9tQVBJO1xub3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7XG5cbnZhciB1cGRhdGUgPSBBUEkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5leHBvcnQgKiBmcm9tIFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cnVsZVNldFsxXS5ydWxlc1swXS51c2VbMV0hLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Bvc3Rjc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9ydWxlU2V0WzFdLnJ1bGVzWzBdLnVzZVsyXSEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanMhLi9IZWFkZXIubW9kdWxlLnNjc3NcIjtcbiAgICAgICBleHBvcnQgZGVmYXVsdCBjb250ZW50ICYmIGNvbnRlbnQubG9jYWxzID8gY29udGVudC5sb2NhbHMgOiB1bmRlZmluZWQ7XG4iLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tIFwicmVhY3RcIjtcclxuXHJcbmltcG9ydCBMb2dvQmxvY2sgZnJvbSBcIi4vY29tcG9uZW50cy9Mb2dvQmxvY2tcIjtcclxuaW1wb3J0IE1lbnUgZnJvbSAnLi9jb21wb25lbnRzL01lbnUnO1xyXG5pbXBvcnQgUmlnaHRCbG9jayBmcm9tIFwiLi9jb21wb25lbnRzL1JpZ2h0QmxvY2tcIjtcclxuaW1wb3J0IHN0eWxlcyBmcm9tICcuL0hlYWRlci5tb2R1bGUuc2Nzcyc7XHJcblxyXG5leHBvcnQgY29uc3QgSGVhZGVyOiBSZWFjdC5GQyA9ICgpID0+IHtcclxuICAgIHJldHVybiAoXHJcbiAgICAgICAgPG5hdiBjbGFzc05hbWU9e3N0eWxlc1tcImhlYWRlclwiXX0+XHJcbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPXtzdHlsZXNbXCJoZWFkZXJfX2xlZnRcIl19PlxyXG4gICAgICAgICAgICAgICAgPExvZ29CbG9jayAvPlxyXG4gICAgICAgICAgICAgICAgPE1lbnUgLz5cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPXtzdHlsZXNbXCJoZWFkZXJfX3JpZ2h0XCJdfT5cclxuICAgICAgICAgICAgICAgIDxSaWdodEJsb2NrIC8+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgIDwvbmF2PlxyXG4gICAgKVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBIZWFkZXI7IiwiZXhwb3J0IHsgZGVmYXVsdCB9IGZyb20gJy4vSGVhZGVyJzsiLCJcbiAgICAgIGltcG9ydCBBUEkgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIjtcbiAgICAgIGltcG9ydCBkb21BUEkgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydEZuIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qc1wiO1xuICAgICAgaW1wb3J0IHNldEF0dHJpYnV0ZXMgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRTdHlsZUVsZW1lbnQgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanNcIjtcbiAgICAgIGltcG9ydCBzdHlsZVRhZ1RyYW5zZm9ybUZuIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanNcIjtcbiAgICAgIGltcG9ydCBjb250ZW50LCAqIGFzIG5hbWVkRXhwb3J0IGZyb20gXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9ydWxlU2V0WzFdLnJ1bGVzWzBdLnVzZVsxXSEuLi8uLi8uLi9ub2RlX21vZHVsZXMvcG9zdGNzcy1sb2FkZXIvZGlzdC9janMuanM/P3J1bGVTZXRbMV0ucnVsZXNbMF0udXNlWzJdIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL01haW4ubW9kdWxlLnNjc3NcIjtcbiAgICAgIFxuICAgICAgXG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0gPSBzdHlsZVRhZ1RyYW5zZm9ybUZuO1xub3B0aW9ucy5zZXRBdHRyaWJ1dGVzID0gc2V0QXR0cmlidXRlcztcbm9wdGlvbnMuaW5zZXJ0ID0gaW5zZXJ0Rm4uYmluZChudWxsLCBcImhlYWRcIik7XG5vcHRpb25zLmRvbUFQSSA9IGRvbUFQSTtcbm9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50ID0gaW5zZXJ0U3R5bGVFbGVtZW50O1xuXG52YXIgdXBkYXRlID0gQVBJKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0ICogZnJvbSBcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanM/P3J1bGVTZXRbMV0ucnVsZXNbMF0udXNlWzFdIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9wb3N0Y3NzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cnVsZVNldFsxXS5ydWxlc1swXS51c2VbMl0hLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vTWFpbi5tb2R1bGUuc2Nzc1wiO1xuICAgICAgIGV4cG9ydCBkZWZhdWx0IGNvbnRlbnQgJiYgY29udGVudC5sb2NhbHMgPyBjb250ZW50LmxvY2FscyA6IHVuZGVmaW5lZDtcbiIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gXCJyZWFjdFwiO1xyXG5pbXBvcnQgeyBPdXRsZXQgfSBmcm9tIFwicmVhY3Qtcm91dGVyLWRvbVwiO1xyXG5pbXBvcnQgSGVhZGVyIGZyb20gXCJjb21wb25lbnRzL0hlYWRlclwiO1xyXG5pbXBvcnQgc3R5bGVzIGZyb20gJy4vTWFpbi5tb2R1bGUuc2Nzcyc7XHJcblxyXG5leHBvcnQgY29uc3QgTWFpbjogUmVhY3QuRkMgPSAoKSA9PiB7XHJcblxyXG4gICAgcmV0dXJuIChcclxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT17c3R5bGVzLm1haW59PlxyXG4gICAgICAgICAgICA8SGVhZGVyIC8+XHJcbiAgICAgICAgICAgIDxPdXRsZXQgLz5cclxuICAgICAgICA8L2Rpdj5cclxuICAgIClcclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgTWFpbjsiLCJleHBvcnQgeyBkZWZhdWx0IH0gZnJvbSAnLi9NYWluJzsgIixudWxsLG51bGwsbnVsbCxudWxsLG51bGwsbnVsbCxudWxsLG51bGwsbnVsbCxudWxsLG51bGwsbnVsbCxudWxsLG51bGwsIlxuICAgICAgaW1wb3J0IEFQSSBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiO1xuICAgICAgaW1wb3J0IGRvbUFQSSBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0Rm4gZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzXCI7XG4gICAgICBpbXBvcnQgc2V0QXR0cmlidXRlcyBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydFN0eWxlRWxlbWVudCBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qc1wiO1xuICAgICAgaW1wb3J0IHN0eWxlVGFnVHJhbnNmb3JtRm4gZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qc1wiO1xuICAgICAgaW1wb3J0IGNvbnRlbnQsICogYXMgbmFtZWRFeHBvcnQgZnJvbSBcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanM/P3J1bGVTZXRbMV0ucnVsZXNbMF0udXNlWzFdIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9wb3N0Y3NzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cnVsZVNldFsxXS5ydWxlc1swXS51c2VbMl0hLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vTG9hZGVyLm1vZHVsZS5zY3NzXCI7XG4gICAgICBcbiAgICAgIFxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtID0gc3R5bGVUYWdUcmFuc2Zvcm1Gbjtcbm9wdGlvbnMuc2V0QXR0cmlidXRlcyA9IHNldEF0dHJpYnV0ZXM7XG5vcHRpb25zLmluc2VydCA9IGluc2VydEZuLmJpbmQobnVsbCwgXCJoZWFkXCIpO1xub3B0aW9ucy5kb21BUEkgPSBkb21BUEk7XG5vcHRpb25zLmluc2VydFN0eWxlRWxlbWVudCA9IGluc2VydFN0eWxlRWxlbWVudDtcblxudmFyIHVwZGF0ZSA9IEFQSShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbmV4cG9ydCAqIGZyb20gXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9ydWxlU2V0WzFdLnJ1bGVzWzBdLnVzZVsxXSEuLi8uLi8uLi9ub2RlX21vZHVsZXMvcG9zdGNzcy1sb2FkZXIvZGlzdC9janMuanM/P3J1bGVTZXRbMV0ucnVsZXNbMF0udXNlWzJdIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL0xvYWRlci5tb2R1bGUuc2Nzc1wiO1xuICAgICAgIGV4cG9ydCBkZWZhdWx0IGNvbnRlbnQgJiYgY29udGVudC5sb2NhbHMgPyBjb250ZW50LmxvY2FscyA6IHVuZGVmaW5lZDtcbiIsImltcG9ydCBjbGFzc05hbWVzIGZyb20gJ2NsYXNzbmFtZXMnO1xyXG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCB7IG1lbW8gfSBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCBzdHlsZXMgZnJvbSAnLi9Mb2FkZXIubW9kdWxlLnNjc3MnO1xyXG5cclxuZXhwb3J0IHR5cGUgTG9hZGVyUHJvcHMgPSB7XHJcbiAgICAvKiog0KDQsNC30LzQtdGAICovXHJcbiAgICBzaXplPzogJ3MnIHwgJ20nIHwgJ2wnO1xyXG4gICAgLyoqINCU0L7Qv9C+0LvQvdC40YLQtdC70YzQvdGL0Lkg0LrQu9Cw0YHRgSAqL1xyXG4gICAgY2xhc3NOYW1lPzogc3RyaW5nO1xyXG59O1xyXG5cclxuY29uc3QgTG9hZGVyOiBSZWFjdC5GQzxMb2FkZXJQcm9wcz4gPSAoe1xyXG4gICAgc2l6ZT0nbCcsXHJcbiAgICBjbGFzc05hbWVcclxufSkgPT4ge1xyXG5cclxuICAgIHJldHVybiAoXHJcbiAgICAgICAgPGRpdlxyXG4gICAgICAgICAgICBjbGFzc05hbWU9e2NsYXNzTmFtZXMoe1xyXG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lLFxyXG4gICAgICAgICAgICAgICAgW3N0eWxlc1snbG9hZGVyJ11dOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgW3N0eWxlc1snbG9hZGVyX3NpemVfJyArIHNpemVdXTogdHJ1ZSxcclxuICAgICAgICAgICAgfSl9XHJcbiAgICAgICAgPlxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgKVxyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgbWVtbyhMb2FkZXIpO1xyXG4iLCJleHBvcnQgeyBkZWZhdWx0IH0gZnJvbSAnLi9Mb2FkZXInO1xyXG5leHBvcnQgKiBmcm9tICcuL0xvYWRlcic7XHJcbiIsIlxuICAgICAgaW1wb3J0IEFQSSBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiO1xuICAgICAgaW1wb3J0IGRvbUFQSSBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0Rm4gZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzXCI7XG4gICAgICBpbXBvcnQgc2V0QXR0cmlidXRlcyBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydFN0eWxlRWxlbWVudCBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qc1wiO1xuICAgICAgaW1wb3J0IHN0eWxlVGFnVHJhbnNmb3JtRm4gZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qc1wiO1xuICAgICAgaW1wb3J0IGNvbnRlbnQsICogYXMgbmFtZWRFeHBvcnQgZnJvbSBcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanM/P3J1bGVTZXRbMV0ucnVsZXNbMF0udXNlWzFdIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9wb3N0Y3NzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cnVsZVNldFsxXS5ydWxlc1swXS51c2VbMl0hLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vQnV0dG9uLm1vZHVsZS5zY3NzXCI7XG4gICAgICBcbiAgICAgIFxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtID0gc3R5bGVUYWdUcmFuc2Zvcm1Gbjtcbm9wdGlvbnMuc2V0QXR0cmlidXRlcyA9IHNldEF0dHJpYnV0ZXM7XG5vcHRpb25zLmluc2VydCA9IGluc2VydEZuLmJpbmQobnVsbCwgXCJoZWFkXCIpO1xub3B0aW9ucy5kb21BUEkgPSBkb21BUEk7XG5vcHRpb25zLmluc2VydFN0eWxlRWxlbWVudCA9IGluc2VydFN0eWxlRWxlbWVudDtcblxudmFyIHVwZGF0ZSA9IEFQSShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbmV4cG9ydCAqIGZyb20gXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9ydWxlU2V0WzFdLnJ1bGVzWzBdLnVzZVsxXSEuLi8uLi8uLi9ub2RlX21vZHVsZXMvcG9zdGNzcy1sb2FkZXIvZGlzdC9janMuanM/P3J1bGVTZXRbMV0ucnVsZXNbMF0udXNlWzJdIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL0J1dHRvbi5tb2R1bGUuc2Nzc1wiO1xuICAgICAgIGV4cG9ydCBkZWZhdWx0IGNvbnRlbnQgJiYgY29udGVudC5sb2NhbHMgPyBjb250ZW50LmxvY2FscyA6IHVuZGVmaW5lZDtcbiIsImltcG9ydCBjbGFzc05hbWVzIGZyb20gJ2NsYXNzbmFtZXMnO1xyXG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tIFwicmVhY3RcIjtcclxuaW1wb3J0IHsgbWVtbyB9IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IExvYWRlciBmcm9tICcuLi9Mb2FkZXInO1xyXG5pbXBvcnQgc3R5bGVzIGZyb20gJy4vQnV0dG9uLm1vZHVsZS5zY3NzJztcclxuXHJcblxyXG5leHBvcnQgdHlwZSBCdXR0b25Qcm9wcyA9IFJlYWN0LkJ1dHRvbkhUTUxBdHRyaWJ1dGVzPEhUTUxCdXR0b25FbGVtZW50PiAmIHtcclxuICAvKiog0KHQvtGB0YLQvtGP0L3QuNC1INC30LDQs9GA0YPQt9C60LggKi9cclxuICBsb2FkaW5nPzogYm9vbGVhbjtcclxuICAvKiog0KLQtdC60YHRgiDQutC90L7Qv9C60LggKi9cclxuICBjaGlsZHJlbjogUmVhY3QuUmVhY3ROb2RlO1xyXG59O1xyXG5cclxuY29uc3QgQnV0dG9uOiBSZWFjdC5GQzxCdXR0b25Qcm9wcz4gPSAoe1xyXG4gIGxvYWRpbmcsXHJcbiAgY2hpbGRyZW4sXHJcbiAgZGlzYWJsZWQ9ZmFsc2UsXHJcbiAgY2xhc3NOYW1lPScnLFxyXG4gIC4uLnByb3BzXHJcbn0pID0+IHtcclxuXHJcbiAgcmV0dXJuIChcclxuICAgIDxidXR0b25cclxuICAgICAgey4uLnByb3BzfVxyXG4gICAgICBjbGFzc05hbWU9e2NsYXNzTmFtZXMoe1xyXG4gICAgICAgIFtjbGFzc05hbWVdOiB0cnVlLFxyXG4gICAgICAgIFtzdHlsZXMuYnV0dG9uXTogdHJ1ZSxcclxuICAgICAgICBbc3R5bGVzWydidXR0b25fbG9hZGluZyddXTogbG9hZGluZyxcclxuICAgICAgICBbc3R5bGVzWydidXR0b25fdW5sb2FkaW5nJ11dOiAhbG9hZGluZyxcclxuICAgICAgICBbc3R5bGVzWydidXR0b25fbG9hZGluZ19kaXNhYmxlZCddXTogbG9hZGluZyAmJiBkaXNhYmxlZFxyXG4gICAgICB9KX1cclxuICAgICAgZGlzYWJsZWQ9e2Rpc2FibGVkIHx8IGxvYWRpbmd9XHJcbiAgICA+XHJcbiAgICAgIHtsb2FkaW5nICYmIDxMb2FkZXIgc2l6ZT0ncycgLz59XHJcbiAgICAgIHtjaGlsZHJlbn1cclxuICAgIDwvYnV0dG9uPlxyXG4gIClcclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IG1lbW8oQnV0dG9uKTtcclxuIiwiZXhwb3J0IHsgZGVmYXVsdCB9IGZyb20gJy4vQnV0dG9uJztcclxuZXhwb3J0ICogZnJvbSAnLi9CdXR0b24nO1xyXG4iLCJcbiAgICAgIGltcG9ydCBBUEkgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIjtcbiAgICAgIGltcG9ydCBkb21BUEkgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydEZuIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qc1wiO1xuICAgICAgaW1wb3J0IHNldEF0dHJpYnV0ZXMgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRTdHlsZUVsZW1lbnQgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanNcIjtcbiAgICAgIGltcG9ydCBzdHlsZVRhZ1RyYW5zZm9ybUZuIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanNcIjtcbiAgICAgIGltcG9ydCBjb250ZW50LCAqIGFzIG5hbWVkRXhwb3J0IGZyb20gXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9ydWxlU2V0WzFdLnJ1bGVzWzBdLnVzZVsxXSEuLi8uLi8uLi9ub2RlX21vZHVsZXMvcG9zdGNzcy1sb2FkZXIvZGlzdC9janMuanM/P3J1bGVTZXRbMV0ucnVsZXNbMF0udXNlWzJdIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL0Vycm9yQm94Lm1vZHVsZS5zY3NzXCI7XG4gICAgICBcbiAgICAgIFxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtID0gc3R5bGVUYWdUcmFuc2Zvcm1Gbjtcbm9wdGlvbnMuc2V0QXR0cmlidXRlcyA9IHNldEF0dHJpYnV0ZXM7XG5vcHRpb25zLmluc2VydCA9IGluc2VydEZuLmJpbmQobnVsbCwgXCJoZWFkXCIpO1xub3B0aW9ucy5kb21BUEkgPSBkb21BUEk7XG5vcHRpb25zLmluc2VydFN0eWxlRWxlbWVudCA9IGluc2VydFN0eWxlRWxlbWVudDtcblxudmFyIHVwZGF0ZSA9IEFQSShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbmV4cG9ydCAqIGZyb20gXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9ydWxlU2V0WzFdLnJ1bGVzWzBdLnVzZVsxXSEuLi8uLi8uLi9ub2RlX21vZHVsZXMvcG9zdGNzcy1sb2FkZXIvZGlzdC9janMuanM/P3J1bGVTZXRbMV0ucnVsZXNbMF0udXNlWzJdIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL0Vycm9yQm94Lm1vZHVsZS5zY3NzXCI7XG4gICAgICAgZXhwb3J0IGRlZmF1bHQgY29udGVudCAmJiBjb250ZW50LmxvY2FscyA/IGNvbnRlbnQubG9jYWxzIDogdW5kZWZpbmVkO1xuIiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSBcInJlYWN0XCI7XHJcbmltcG9ydCB7IG1lbW8gfSBmcm9tIFwicmVhY3RcIjtcclxuaW1wb3J0IFRleHQgZnJvbSBcImNvbXBvbmVudHMvVGV4dFwiO1xyXG5pbXBvcnQgc3R5bGVzIGZyb20gJy4vRXJyb3JCb3gubW9kdWxlLnNjc3MnO1xyXG5cclxuXHJcbnR5cGUgRXJyb3JCb3hQcm9wcyA9IHtcclxuICAgIGNvZGU/OiBudW1iZXIsXHJcbiAgICBjaGlsZHJlbjogc3RyaW5nLFxyXG4gICAgZXJyb3JTbG90PzogUmVhY3QuUmVhY3ROb2RlLFxyXG59XHJcblxyXG5jb25zdCBFcnJvckJveDogUmVhY3QuRkM8RXJyb3JCb3hQcm9wcz4gPSAocHJvcHMpID0+IHtcclxuXHJcbiAgICByZXR1cm4gKFxyXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPXtzdHlsZXNbXCJlcnJvci1ib3hcIl19PlxyXG4gICAgICAgICAgICA8VGV4dCB2aWV3PSd0aXRsZScgdGFnPSdkaXYnPkVycm9yIHtwcm9wcy5jb2RlIHx8ICcnfTwvVGV4dD5cclxuICAgICAgICAgICAgPFRleHQgdmlldz0ncC0yMCcgdGFnPSdkaXYnIGNsYXNzTmFtZT17c3R5bGVzW1wiZXJyb3ItYm94X19tZXNzYWdlXCJdfT5cclxuICAgICAgICAgICAgICAgIHtwcm9wcy5jaGlsZHJlbn1cclxuICAgICAgICAgICAgPC9UZXh0PlxyXG4gICAgICAgICAgICB7cHJvcHMuZXJyb3JTbG90fVxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgKVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBtZW1vKEVycm9yQm94KTsiLCJleHBvcnQgeyBkZWZhdWx0IH0gZnJvbSAnLi9FcnJvckJveCc7IiwiXG4gICAgICBpbXBvcnQgQVBJIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICBpbXBvcnQgZG9tQVBJIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRGbiBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanNcIjtcbiAgICAgIGltcG9ydCBzZXRBdHRyaWJ1dGVzIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0U3R5bGVFbGVtZW50IGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzXCI7XG4gICAgICBpbXBvcnQgc3R5bGVUYWdUcmFuc2Zvcm1GbiBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzXCI7XG4gICAgICBpbXBvcnQgY29udGVudCwgKiBhcyBuYW1lZEV4cG9ydCBmcm9tIFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cnVsZVNldFsxXS5ydWxlc1swXS51c2VbMV0hLi4vLi4vbm9kZV9tb2R1bGVzL3Bvc3Rjc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9ydWxlU2V0WzFdLnJ1bGVzWzBdLnVzZVsyXSEuLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanMhLi9jdXN0b21TdHlsZXMubW9kdWxlLnNjc3NcIjtcbiAgICAgIFxuICAgICAgXG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0gPSBzdHlsZVRhZ1RyYW5zZm9ybUZuO1xub3B0aW9ucy5zZXRBdHRyaWJ1dGVzID0gc2V0QXR0cmlidXRlcztcbm9wdGlvbnMuaW5zZXJ0ID0gaW5zZXJ0Rm4uYmluZChudWxsLCBcImhlYWRcIik7XG5vcHRpb25zLmRvbUFQSSA9IGRvbUFQSTtcbm9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50ID0gaW5zZXJ0U3R5bGVFbGVtZW50O1xuXG52YXIgdXBkYXRlID0gQVBJKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0ICogZnJvbSBcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanM/P3J1bGVTZXRbMV0ucnVsZXNbMF0udXNlWzFdIS4uLy4uL25vZGVfbW9kdWxlcy9wb3N0Y3NzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cnVsZVNldFsxXS5ydWxlc1swXS51c2VbMl0hLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vY3VzdG9tU3R5bGVzLm1vZHVsZS5zY3NzXCI7XG4gICAgICAgZXhwb3J0IGRlZmF1bHQgY29udGVudCAmJiBjb250ZW50LmxvY2FscyA/IGNvbnRlbnQubG9jYWxzIDogdW5kZWZpbmVkO1xuIiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnXHJcbmltcG9ydCBzdHlsZXMgZnJvbSAnc3R5bGVzL2N1c3RvbVN0eWxlcy5tb2R1bGUuc2Nzcyc7XHJcbmltcG9ydCBJY29uLCB7IEljb25Qcm9wcyB9IGZyb20gJy4uL0ljb24nO1xyXG5cclxuY29uc3QgQXJyb3dMZWZ0SWNvbjogUmVhY3QuRkM8SWNvblByb3BzPiA9IChwcm9wcykgPT4ge1xyXG5cclxuICAgIHJldHVybiAoXHJcbiAgICAgICAgPEljb24gXHJcbiAgICAgICAgICAgIHN0eWxlPXt7XHJcbiAgICAgICAgICAgICAgICBjdXJzb3I6ICdwb2ludGVyJ1xyXG4gICAgICAgICAgICB9fVxyXG4gICAgICAgICAgICB7Li4ucHJvcHN9XHJcbiAgICAgICAgICAgIHZpZXdCb3g9JzAgMCAzMiAzMidcclxuICAgICAgICAgICAgd2lkdGg9JzMyJ1xyXG4gICAgICAgICAgICBoZWlnaHQ9JzMyJ1xyXG4gICAgICAgID5cclxuICAgICAgICAgICAgPHBhdGggXHJcbiAgICAgICAgICAgICAgICBjbGFzc05hbWU9e3N0eWxlc1snaWNvbl9zdHJva2VfY29sb3JfJyArIChwcm9wcy5jb2xvciB8fCAnaW5oZXJpdCcpXX1cclxuICAgICAgICAgICAgICAgIGQ9XCJNMjAuMTIgMjYuNTU5OUwxMS40MjY3IDE3Ljg2NjZDMTAuNCAxNi44Mzk5IDEwLjQgMTUuMTU5OSAxMS40MjY3IDE0LjEzMzNMMjAuMTIgNS40Mzk5NFwiIFxyXG4gICAgICAgICAgICAgICAgc3Ryb2tlV2lkdGg9XCIxLjVcIiBcclxuICAgICAgICAgICAgICAgIHN0cm9rZU1pdGVybGltaXQ9XCIxMFwiIFxyXG4gICAgICAgICAgICAgICAgc3Ryb2tlTGluZWNhcD1cInJvdW5kXCIgXHJcbiAgICAgICAgICAgICAgICBzdHJva2VMaW5lam9pbj1cInJvdW5kXCJcclxuICAgICAgICAgICAgLz5cclxuICAgICAgICA8L0ljb24+XHJcbiAgICApXHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IEFycm93TGVmdEljb247XHJcbiIsImV4cG9ydCB7IGRlZmF1bHQgfSBmcm9tICcuL0Fycm93TGVmdEljb24nO1xyXG4iLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCdcclxuaW1wb3J0IEljb24sIHsgSWNvblByb3BzIH0gZnJvbSAnLi4vSWNvbic7XHJcblxyXG5cclxuY29uc3QgRXFJY29uOiBSZWFjdC5GQzxJY29uUHJvcHM+ID0gKHByb3BzKSA9PiB7XHJcblxyXG4gICAgcmV0dXJuIChcclxuICAgICAgICA8SWNvbiB7Li4ucHJvcHN9PlxyXG4gICAgICAgICAgICA8cGF0aCBcclxuICAgICAgICAgICAgICAgIGZpbGxSdWxlPVwiZXZlbm9kZFwiIFxyXG4gICAgICAgICAgICAgICAgY2xpcFJ1bGU9XCJldmVub2RkXCIgXHJcbiAgICAgICAgICAgICAgICBkPVwiTTQuOTQ5ODIgMS42NzQ0MkMzLjE0MDg2IDEuNjc0NDIgMS42NzQ0MiAzLjE0MDg2IDEuNjc0NDIgNC45NDk4MkMxLjY3NDQyIDUuNDEyMTkgMS4yOTk1OCA1Ljc4NzAyIDAuODM3MjA5IDUuNzg3MDJDMC4zNzQ4MzUgNS43ODcwMiAwIDUuNDEyMTkgMCA0Ljk0OTgyQzAgMi4yMTYxIDIuMjE2MSAwIDQuOTQ5ODIgMEM3LjY4MzUzIDAgOS44OTk2MyAyLjIxNjEgOS44OTk2MyA0Ljk0OTgyVjEyLjY2NTdDMTAuMzA4OSAxMi40MjIgMTAuNzc3NiAxMi4yMTA4IDExLjI3MjUgMTIuMDMwNkMxMi43NjA0IDExLjQ4OTIgMTQuNjcyMSAxMS4xNjI4IDE2LjQ2NTEgMTEuMTYyOEMxOC4yNTk4IDExLjE2MjggMjAuMDQzMiAxMS40ODk5IDIxLjQwNjMgMTIuMDQxM0MyMi4wODU1IDEyLjMxNiAyMi43MDIzIDEyLjY2MzQgMjMuMTYzNyAxMy4wODk0QzIzLjYyMjkgMTMuNTEzNSAyNCAxNC4wODcyIDI0IDE0Ljc5MDdWMTYuMTEyNkMyNCAyMC40Njg3IDIwLjQ2ODcgMjQgMTYuMTEyNiAyNEMxMS43NTY1IDI0IDguMjI1MjEgMjAuNDY4NyA4LjIyNTIxIDE2LjExMjZWNC45NDk4MkM4LjIyNTIxIDMuMTQwODYgNi43NTg3NyAxLjY3NDQyIDQuOTQ5ODIgMS42NzQ0MlpNMjIuMjQwMiAxNy4xNDUyQzIxLjc0ODUgMjAuMDg1IDE5LjE5MjIgMjIuMzI1NiAxNi4xMTI2IDIyLjMyNTZDMTIuOTY0NyAyMi4zMjU2IDEwLjM2MzYgMTkuOTg0NSA5Ljk1NTM3IDE2Ljk0ODRDMTAuMzUxMyAxNy4xNzg0IDEwLjc5OTggMTcuMzc4OCAxMS4yNzI1IDE3LjU1MDhDMTIuNzYwNCAxOC4wOTIyIDE0LjY3MjEgMTguNDE4NiAxNi40NjUxIDE4LjQxODZDMTguMjU5OCAxOC40MTg2IDIwLjA0MzIgMTguMDkxNiAyMS40MDYzIDE3LjU0MDFDMjEuNjk4MiAxNy40MjIgMjEuOTc4NiAxNy4yOTA1IDIyLjI0MDIgMTcuMTQ1MlpNMjIuMzI1NiAxNC43OTA3QzIyLjMyNTYgMTQuNzIzNSAyMi4yOTE1IDE0LjU2MzIgMjIuMDI3OCAxNC4zMTk1QzIxLjc2NTkgMTQuMDc3NyAyMS4zNDc1IDEzLjgyMzggMjAuNzc4MyAxMy41OTM1QzE5LjY0NDggMTMuMTM0OSAxOC4wNzk1IDEyLjgzNzIgMTYuNDY1MSAxMi44MzcyQzE0Ljg0OTEgMTIuODM3MiAxMy4xMzI5IDEzLjEzNTUgMTEuODQ1MSAxMy42MDQxQzExLjE5OCAxMy44Mzk2IDEwLjcwNDQgMTQuMTAxOCAxMC4zODkzIDE0LjM1NkMxMC4wNTk0IDE0LjYyMjEgMTAuMDQ2NSAxNC43NzQ3IDEwLjA0NjUgMTQuNzkwN0MxMC4wNDY1IDE0LjgwNjcgMTAuMDU5NCAxNC45NTkzIDEwLjM4OTMgMTUuMjI1NEMxMC43MDQ0IDE1LjQ3OTYgMTEuMTk4IDE1Ljc0MTggMTEuODQ1MiAxNS45NzczQzEzLjEzMjkgMTYuNDQ1OSAxNC44NDkxIDE2Ljc0NDIgMTYuNDY1MSAxNi43NDQyQzE4LjA3OTUgMTYuNzQ0MiAxOS42NDQ4IDE2LjQ0NjYgMjAuNzc4MyAxNS45ODc5QzIxLjM0NzUgMTUuNzU3NyAyMS43NjU5IDE1LjUwMzcgMjIuMDI3OCAxNS4yNjE5QzIyLjI5MTUgMTUuMDE4MiAyMi4zMjU2IDE0Ljg1NzkgMjIuMzI1NiAxNC43OTA3WlwiIFxyXG4gICAgICAgICAgICAgICAgZmlsbD1cIiNCNTQ2MEZcIlxyXG4gICAgICAgICAgICAvPlxyXG4gICAgICAgIDwvSWNvbj5cclxuICAgIClcclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgRXFJY29uO1xyXG4iLCJleHBvcnQgeyBkZWZhdWx0IH0gZnJvbSAnLi9FcUljb24nO1xyXG4iLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCdcclxuaW1wb3J0IEljb24sIHsgSWNvblByb3BzIH0gZnJvbSAnLi4vSWNvbic7XHJcblxyXG5cclxuY29uc3QgSW5nSWNvbjogUmVhY3QuRkM8SWNvblByb3BzPiA9IChwcm9wcykgPT4ge1xyXG5cclxuICAgIHJldHVybiAoXHJcbiAgICAgICAgPEljb24gey4uLnByb3BzfT5cclxuICAgICAgICAgICAgPGcgY2xpcFBhdGg9XCJ1cmwoI2NsaXAwXzUxMl8yMDQ4KVwiPlxyXG4gICAgICAgICAgICA8cGF0aCBcclxuICAgICAgICAgICAgICAgIGQ9XCJNMjMuMTYwNSAxNy4xODlDMjMuMDQ2NiAxNC4zNzkyIDIxLjg5OTEgMTEuNzUzOSAxOS44OTg4IDkuNzUzNjdDMTguNTE0OCA4LjM2OTY0IDE2LjgzMTYgNy4zOTM1NiAxNC45OTUgNi44ODU3MUMxNC44NzgzIDUuMzM0OTQgMTMuNTgwMSA0LjEwODU1IDEyIDQuMTA4NTVDMTAuNDE5OSA0LjEwODU1IDkuMTIxNzUgNS4zMzQ5IDkuMDA1MDMgNi44ODU3MUM3LjE2ODQ3IDcuMzkzNTYgNS40ODUyMyA4LjM2OTY0IDQuMTAxMjQgOS43NTM2N0MyLjEwMDk0IDExLjc1MzkgMC45NTM0ODYgMTQuMzc5MiAwLjgzOTUzMyAxNy4xODlDMC4zNjQxMjYgMTcuMjY3NyAwIDE3LjY4MDUgMCAxOC4xNzc4VjE4Ljg4ODFDMCAxOS40NDEzIDAuNDUwMTQyIDE5Ljg5MTQgMS4wMDMzNiAxOS44OTE0SDIyLjk5NjZDMjMuNTQ5OSAxOS44OTE0IDI0IDE5LjQ0MTMgMjQgMTguODg4MVYxOC4xNzc4QzI0IDE3LjY4MDUgMjMuNjM1OSAxNy4yNjc3IDIzLjE2MDUgMTcuMTg5Wk0xMiA1LjA2NDc2QzEyLjk3MzYgNS4wNjQ3NiAxMy43OSA1Ljc0NzY4IDEzLjk5NyA2LjY1OTRDMTMuMzQ0NSA2LjU0MjI2IDEyLjY3NjkgNi40ODE4NCAxMiA2LjQ4MTg0QzExLjMyMzEgNi40ODE4NCAxMC42NTU1IDYuNTQyMjYgMTAuMDAzIDYuNjU5NEMxMC4yMSA1Ljc0NzY4IDExLjAyNjUgNS4wNjQ3NiAxMiA1LjA2NDc2Wk0xMiA3LjQzODA0QzE3LjQ3MjEgNy40MzgwNCAyMS45NTMgMTEuNzYzMiAyMi4yMDM0IDE3LjE3NDRIMS43OTY2M0MyLjA0NzA0IDExLjc2MzIgNi41Mjc5MiA3LjQzODA0IDEyIDcuNDM4MDRaTTIzLjA0MzkgMTguODg4MUMyMy4wNDM5IDE4LjkxNDEgMjMuMDIyNyAxOC45MzUzIDIyLjk5NjcgMTguOTM1M0gxLjAwMzM2QzAuOTc3MzQ2IDE4LjkzNTMgMC45NTYxNTggMTguOTE0MSAwLjk1NjE1OCAxOC44ODgxVjE4LjE3NzhDMC45NTYxNTggMTguMTUxOCAwLjk3NzM0NiAxOC4xMzA2IDEuMDAzMzYgMTguMTMwNkgyMi45OTY3QzIzLjAyMjcgMTguMTMwNiAyMy4wNDM5IDE4LjE1MTggMjMuMDQzOSAxOC4xNzc4VjE4Ljg4ODFaXCIgXHJcbiAgICAgICAgICAgICAgICBmaWxsPVwiI0I1NDYwRlwiXHJcbiAgICAgICAgICAgIC8+XHJcbiAgICAgICAgICAgIDxwYXRoIFxyXG4gICAgICAgICAgICAgICAgZD1cIk0yMS40MTk4IDE1Ljg1MzZDMjEuMTU2MiAxNC40NjU2IDIwLjU3MzYgMTMuMTI3OSAxOS43MzUgMTEuOTg1MUMxOS41Nzg3IDExLjc3MjIgMTkuMjc5NSAxMS43MjYzIDE5LjA2NjYgMTEuODgyNUMxOC44NTM3IDEyLjAzODcgMTguODA3OCAxMi4zMzc5IDE4Ljk2NCAxMi41NTA4QzE5LjcyOTcgMTMuNTk0MSAyMC4yMzk5IDE0Ljc2NTQgMjAuNDgwNCAxNi4wMzE5QzIwLjUyMzkgMTYuMjYxMiAyMC43MjQ1IDE2LjQyMDkgMjAuOTQ5NSAxNi40MjA5QzIwLjk3OTEgMTYuNDIwOSAyMS4wMDkxIDE2LjQxODEgMjEuMDM5MiAxNi40MTIzQzIxLjI5ODggMTYuMzYzMiAyMS40NjkxIDE2LjExMjkgMjEuNDE5OCAxNS44NTM2WlwiIFxyXG4gICAgICAgICAgICAgICAgZmlsbD1cIiNCNTQ2MEZcIlxyXG4gICAgICAgICAgICAvPlxyXG4gICAgICAgICAgICA8cGF0aCBcclxuICAgICAgICAgICAgICAgIGQ9XCJNMTguNzEwNyAxMC44MDM4QzE4LjYwNzUgMTAuNzAyNiAxOC41MDA0IDEwLjYwMjMgMTguMzkyNCAxMC41MDU3QzE4LjE5NTggMTAuMzI5NyAxNy44OTM0IDEwLjM0NjMgMTcuNzE3NCAxMC41NDNDMTcuNTQxMiAxMC43Mzk4IDE3LjU1NzkgMTEuMDQyIDE3Ljc1NDcgMTEuMjE4MUMxNy44NTIgMTEuMzA1MiAxNy45NDg1IDExLjM5NTYgMTguMDQxMyAxMS40ODY3QzE4LjEzNDQgMTEuNTc3OSAxOC4yNTUyIDExLjYyMzMgMTguMzc1OSAxMS42MjMzQzE4LjQ5OTkgMTEuNjIzMyAxOC42MjM4IDExLjU3NTQgMTguNzE3NCAxMS40Nzk5QzE4LjkwMjMgMTEuMjkxMyAxOC44OTkzIDEwLjk4ODYgMTguNzEwNyAxMC44MDM4WlwiIFxyXG4gICAgICAgICAgICAgICAgZmlsbD1cIiNCNTQ2MEZcIlxyXG4gICAgICAgICAgICAvPlxyXG4gICAgICAgICAgICA8L2c+XHJcbiAgICAgICAgICAgIDxkZWZzPlxyXG4gICAgICAgICAgICA8Y2xpcFBhdGggaWQ9XCJjbGlwMF81MTJfMjA0OFwiPlxyXG4gICAgICAgICAgICA8cmVjdCB3aWR0aD1cIjI0XCIgaGVpZ2h0PVwiMjRcIiBmaWxsPVwid2hpdGVcIi8+XHJcbiAgICAgICAgICAgIDwvY2xpcFBhdGg+XHJcbiAgICAgICAgICAgIDwvZGVmcz5cclxuICAgICAgICA8L0ljb24+XHJcbiAgICApXHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IEluZ0ljb247XHJcbiIsImV4cG9ydCB7IGRlZmF1bHQgfSBmcm9tICcuL0luZ0ljb24nO1xyXG4iLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIElMb2NhbFN0b3JlIHsgIFxyXG4gIGRlc3Ryb3koKTogdm9pZDtcclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IHVzZUxvY2FsU3RvcmUgPSA8VCBleHRlbmRzIElMb2NhbFN0b3JlPihjcmVhdG9yOiAoKSA9PiBUKTogVCA9PiB7XHJcblxyXG4gIGNvbnN0IGNvbnRhaW5lciA9IFJlYWN0LnVzZVJlZjxudWxsIHwgVD4obnVsbCk7XHJcbiAgaWYgKGNvbnRhaW5lci5jdXJyZW50ID09PSBudWxsKSB7XHJcbiAgICBjb250YWluZXIuY3VycmVudCA9IGNyZWF0b3IoKTtcclxuICB9XHJcblxyXG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XHJcbiAgICByZXR1cm4gKCkgPT4gY29udGFpbmVyLmN1cnJlbnQ/LmRlc3Ryb3koKTtcclxuICB9LCBbXSk7XHJcblxyXG4gIHJldHVybiBjb250YWluZXIuY3VycmVudDtcclxufTsiLCJpbXBvcnQgYXhpb3MgZnJvbSBcImF4aW9zXCI7XHJcbmltcG9ydCB7IGFjdGlvbiwgY29tcHV0ZWQsIG1ha2VPYnNlcnZhYmxlLCBvYnNlcnZhYmxlIH0gZnJvbSBcIm1vYnhcIjtcclxuaW1wb3J0IHsgdXJsUHJlZml4LCBhcGlLZXkgfSBmcm9tIFwiY29uZmlnL2FwaVwiO1xyXG5pbXBvcnQgeyBcclxuICAgIFJlY2lwZUluaXQsIFxyXG4gICAgTm90U3RhcnRlZFN0YXR1cywgXHJcbiAgICBMb2FkaW5nU3RhdHVzLCBcclxuICAgIFN1Y2Nlc3NmdWxTdGF0dXMsIFxyXG4gICAgZXJyb3JTdGF0dXMgXHJcbn0gZnJvbSBcImNvbmZpZy9pbml0VmFsdWVzXCI7XHJcbmltcG9ydCB7IElMb2NhbFN0b3JlIH0gZnJvbSBcImhvb2tzL3VzZUxvY2FsU3RvcmVcIjtcclxuaW1wb3J0IHsgUmVjaXBlVHlwZSwgU3RhdHVzIH0gZnJvbSBcInR5cGVzL2FwaVR5cGVzXCI7XHJcblxyXG50eXBlIFByaXZhdGVGaWVsZHMgPSAnX3N0YXR1cycgfCAnX3JlY2lwZSc7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBSZWNpcGVTdG9yZSBpbXBsZW1lbnRzIElMb2NhbFN0b3JlIHtcclxuICAgIHByaXZhdGUgX3N0YXR1czogU3RhdHVzID0gTm90U3RhcnRlZFN0YXR1cztcclxuICAgIHByaXZhdGUgX3JlY2lwZTogUmVjaXBlVHlwZSA9IFJlY2lwZUluaXQ7XHJcbiAgICBcclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIG1ha2VPYnNlcnZhYmxlPFJlY2lwZVN0b3JlLCBQcml2YXRlRmllbGRzPih0aGlzLCB7XHJcbiAgICAgICAgICAgIF9zdGF0dXM6IG9ic2VydmFibGUucmVmLFxyXG4gICAgICAgICAgICBfcmVjaXBlOiBvYnNlcnZhYmxlLnJlZixcclxuICAgICAgICAgICAgc2V0U3RhdHVzOiBhY3Rpb24uYm91bmQsXHJcbiAgICAgICAgICAgIHNldFJlY2lwZTogYWN0aW9uLmJvdW5kLFxyXG4gICAgICAgICAgICBsb2FkaW5nUmVjaXBlOiBhY3Rpb24uYm91bmQsXHJcbiAgICAgICAgICAgIHJlY2lwZTogY29tcHV0ZWQsXHJcbiAgICAgICAgICAgIHN0YXR1czogY29tcHV0ZWQsXHJcbiAgICAgICAgfSlcclxuICAgIH1cclxuXHJcbiAgICBzZXRTdGF0dXMobmV3U3RhdHVzOiBTdGF0dXMpIHtcclxuICAgICAgICB0aGlzLl9zdGF0dXMgPSB7IC4uLm5ld1N0YXR1cyB9O1xyXG4gICAgfVxyXG5cclxuICAgIHNldFJlY2lwZShuZXdSZWNpcGU6IFJlY2lwZVR5cGUpIHtcclxuICAgICAgICB0aGlzLl9yZWNpcGUgPSB7IC4uLm5ld1JlY2lwZSB9O1xyXG4gICAgfVxyXG5cclxuICAgIGxvYWRpbmdSZWNpcGUoaWQ6IG51bWJlcikge1xyXG4gICAgICAgIGNvbnN0IHVybCA9IHVybFByZWZpeCArICdyZWNpcGVzLycgKyBpZCArICcvaW5mb3JtYXRpb24/YXBpS2V5PScgKyBhcGlLZXk7XHJcbiAgICAgICAgdGhpcy5zZXRTdGF0dXMoTG9hZGluZ1N0YXR1cyk7XHJcbiAgICAgICAgYXhpb3MuZ2V0KHVybClcclxuICAgICAgICAudGhlbigocmVzcCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLnNldFN0YXR1cyhTdWNjZXNzZnVsU3RhdHVzKTtcclxuICAgICAgICAgICAgdGhpcy5zZXRSZWNpcGUocmVzcC5kYXRhKTtcclxuICAgICAgICB9KVxyXG4gICAgICAgIC5jYXRjaCgoZXJyKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuc2V0U3RhdHVzKGVycm9yU3RhdHVzKGVyci5tZXNzYWdlKSk7XHJcbiAgICAgICAgfSlcclxuICAgIH1cclxuXHJcbiAgICBnZXQgcmVjaXBlKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9yZWNpcGU7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IHN0YXR1cygpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fc3RhdHVzO1xyXG4gICAgfVxyXG5cclxuICAgIGRlc3Ryb3koKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5fcmVjaXBlID0gUmVjaXBlSW5pdDtcclxuICAgICAgICB0aGlzLl9zdGF0dXMgPSBOb3RTdGFydGVkU3RhdHVzO1xyXG4gICAgfVxyXG59IiwiZXhwb3J0IHsgZGVmYXVsdCB9IGZyb20gJy4vUmVjaXBlU3RvcmUnOyIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gXCJyZWFjdFwiO1xyXG5pbXBvcnQgeyBtZW1vIH0gZnJvbSBcInJlYWN0XCI7XHJcblxyXG5pbXBvcnQgVGV4dCBmcm9tIFwiY29tcG9uZW50cy9UZXh0XCI7XHJcblxyXG50eXBlIFByZXZpZXdCbG9ja1Byb3BzID0ge1xyXG4gICAgbmFtZTogc3RyaW5nLFxyXG4gICAgY2hpbGRyZW46IG51bWJlcixcclxuICAgIHVuaXQ6IHN0cmluZyxcclxufVxyXG5cclxuY29uc3QgUHJldmlld0Jsb2NrOiBSZWFjdC5GQzxQcmV2aWV3QmxvY2tQcm9wcz4gPSAocHJvcHMpID0+IHtcclxuXHJcbiAgICByZXR1cm4gKFxyXG4gICAgICAgIDxkaXY+XHJcbiAgICAgICAgICAgIDxUZXh0IHZpZXc9J3AtMTYnPntwcm9wcy5uYW1lfTwvVGV4dD5cclxuICAgICAgICAgICAgPFRleHQgd2VpZ2h0PSdib2xkJyBjb2xvcj0nYWNjZW50JyB2aWV3PSdwLTE2Jz57cHJvcHMuY2hpbGRyZW59IHtwcm9wcy51bml0fTwvVGV4dD5cclxuICAgICAgICA8L2Rpdj5cclxuICAgIClcclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgbWVtbyhQcmV2aWV3QmxvY2spOyIsImV4cG9ydCB7IGRlZmF1bHQgfSBmcm9tICcuL1ByZXZpZXdCbG9jayc7IiwiXG4gICAgICBpbXBvcnQgQVBJIGZyb20gXCIhLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICBpbXBvcnQgZG9tQVBJIGZyb20gXCIhLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRGbiBmcm9tIFwiIS4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanNcIjtcbiAgICAgIGltcG9ydCBzZXRBdHRyaWJ1dGVzIGZyb20gXCIhLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0U3R5bGVFbGVtZW50IGZyb20gXCIhLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzXCI7XG4gICAgICBpbXBvcnQgc3R5bGVUYWdUcmFuc2Zvcm1GbiBmcm9tIFwiIS4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzXCI7XG4gICAgICBpbXBvcnQgY29udGVudCwgKiBhcyBuYW1lZEV4cG9ydCBmcm9tIFwiISEuLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cnVsZVNldFsxXS5ydWxlc1swXS51c2VbMV0hLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Bvc3Rjc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9ydWxlU2V0WzFdLnJ1bGVzWzBdLnVzZVsyXSEuLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanMhLi9SZWNpcGVOZWVkLm1vZHVsZS5zY3NzXCI7XG4gICAgICBcbiAgICAgIFxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtID0gc3R5bGVUYWdUcmFuc2Zvcm1Gbjtcbm9wdGlvbnMuc2V0QXR0cmlidXRlcyA9IHNldEF0dHJpYnV0ZXM7XG5vcHRpb25zLmluc2VydCA9IGluc2VydEZuLmJpbmQobnVsbCwgXCJoZWFkXCIpO1xub3B0aW9ucy5kb21BUEkgPSBkb21BUEk7XG5vcHRpb25zLmluc2VydFN0eWxlRWxlbWVudCA9IGluc2VydFN0eWxlRWxlbWVudDtcblxudmFyIHVwZGF0ZSA9IEFQSShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbmV4cG9ydCAqIGZyb20gXCIhIS4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9ydWxlU2V0WzFdLnJ1bGVzWzBdLnVzZVsxXSEuLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvcG9zdGNzcy1sb2FkZXIvZGlzdC9janMuanM/P3J1bGVTZXRbMV0ucnVsZXNbMF0udXNlWzJdIS4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL1JlY2lwZU5lZWQubW9kdWxlLnNjc3NcIjtcbiAgICAgICBleHBvcnQgZGVmYXVsdCBjb250ZW50ICYmIGNvbnRlbnQubG9jYWxzID8gY29udGVudC5sb2NhbHMgOiB1bmRlZmluZWQ7XG4iLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tIFwicmVhY3RcIjtcclxuaW1wb3J0IHsgbWVtbyB9IGZyb20gXCJyZWFjdFwiO1xyXG5pbXBvcnQgVGV4dCBmcm9tIFwiY29tcG9uZW50cy9UZXh0XCI7XHJcbmltcG9ydCBzdHlsZXMgZnJvbSAnLi9SZWNpcGVOZWVkLm1vZHVsZS5zY3NzJztcclxuXHJcblxyXG50eXBlIFJlY2lwZU5lZWRQcm9wcyA9IHtcclxuICAgIG5hbWU6IHN0cmluZyxcclxuICAgIGVsZW1lbnRzOiBBcnJheTxzdHJpbmc+LFxyXG4gICAgaWNvbjogUmVhY3QuUmVhY3ROb2RlXHJcbn1cclxuXHJcbmNvbnN0IFJlY2lwZU5lZWQ6IFJlYWN0LkZDPFJlY2lwZU5lZWRQcm9wcz4gPSAocHJvcHMpID0+IHtcclxuXHJcbiAgICByZXR1cm4gKFxyXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPXtzdHlsZXNbXCJyZWNpcGVfX2JveF9fbmVlZHNfX2Jsb2NrXCJdfT5cclxuICAgICAgICAgICAgPFRleHQgdmlldz0ncC0yMCcgd2VpZ2h0PSdib2xkJz5cclxuICAgICAgICAgICAgICAgIHtwcm9wcy5uYW1lfVxyXG4gICAgICAgICAgICA8L1RleHQ+XHJcbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPXtzdHlsZXNbXCJyZWNpcGVfX2JveF9fbmVlZHNfX2Jsb2NrX19lbGVtc1wiXX0+XHJcbiAgICAgICAgICAgICAgICB7cHJvcHMuZWxlbWVudHMubWFwKChlbGVtZW50LCBpbmRleCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYga2V5PXtbZWxlbWVudCwgaW5kZXhdLmpvaW4oJyAnKX0+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7cHJvcHMuaWNvbn1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxUZXh0IHZpZXc9J3AtMTYnPntlbGVtZW50fTwvVGV4dD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgKVxyXG4gICAgICAgICAgICAgICAgfSl9XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgKVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBtZW1vKFJlY2lwZU5lZWQpOyIsImV4cG9ydCB7IGRlZmF1bHQgfSBmcm9tICcuL1JlY2lwZU5lZWQnOyIsIlxuICAgICAgaW1wb3J0IEFQSSBmcm9tIFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiO1xuICAgICAgaW1wb3J0IGRvbUFQSSBmcm9tIFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0Rm4gZnJvbSBcIiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzXCI7XG4gICAgICBpbXBvcnQgc2V0QXR0cmlidXRlcyBmcm9tIFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydFN0eWxlRWxlbWVudCBmcm9tIFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qc1wiO1xuICAgICAgaW1wb3J0IHN0eWxlVGFnVHJhbnNmb3JtRm4gZnJvbSBcIiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qc1wiO1xuICAgICAgaW1wb3J0IGNvbnRlbnQsICogYXMgbmFtZWRFeHBvcnQgZnJvbSBcIiEhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanM/P3J1bGVTZXRbMV0ucnVsZXNbMF0udXNlWzFdIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9wb3N0Y3NzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cnVsZVNldFsxXS5ydWxlc1swXS51c2VbMl0hLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vUmVjaXBlLm1vZHVsZS5zY3NzXCI7XG4gICAgICBcbiAgICAgIFxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtID0gc3R5bGVUYWdUcmFuc2Zvcm1Gbjtcbm9wdGlvbnMuc2V0QXR0cmlidXRlcyA9IHNldEF0dHJpYnV0ZXM7XG5vcHRpb25zLmluc2VydCA9IGluc2VydEZuLmJpbmQobnVsbCwgXCJoZWFkXCIpO1xub3B0aW9ucy5kb21BUEkgPSBkb21BUEk7XG5vcHRpb25zLmluc2VydFN0eWxlRWxlbWVudCA9IGluc2VydFN0eWxlRWxlbWVudDtcblxudmFyIHVwZGF0ZSA9IEFQSShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbmV4cG9ydCAqIGZyb20gXCIhIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9ydWxlU2V0WzFdLnJ1bGVzWzBdLnVzZVsxXSEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvcG9zdGNzcy1sb2FkZXIvZGlzdC9janMuanM/P3J1bGVTZXRbMV0ucnVsZXNbMF0udXNlWzJdIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL1JlY2lwZS5tb2R1bGUuc2Nzc1wiO1xuICAgICAgIGV4cG9ydCBkZWZhdWx0IGNvbnRlbnQgJiYgY29udGVudC5sb2NhbHMgPyBjb250ZW50LmxvY2FscyA6IHVuZGVmaW5lZDtcbiIsImltcG9ydCB7IG9ic2VydmVyIH0gZnJvbSBcIm1vYngtcmVhY3QtbGl0ZVwiO1xyXG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tIFwicmVhY3RcIjtcclxuaW1wb3J0IHsgdXNlRWZmZWN0IH0gZnJvbSBcInJlYWN0XCI7XHJcbmltcG9ydCB7IHVzZVBhcmFtcyAsIHVzZU5hdmlnYXRlIH0gZnJvbSBcInJlYWN0LXJvdXRlci1kb21cIjtcclxuXHJcbmltcG9ydCBCdXR0b24gZnJvbSBcImNvbXBvbmVudHMvQnV0dG9uXCI7XHJcbmltcG9ydCBFcnJvckJveCBmcm9tIFwiY29tcG9uZW50cy9FcnJvckJveFwiO1xyXG5pbXBvcnQgVGV4dCBmcm9tIFwiY29tcG9uZW50cy9UZXh0XCI7XHJcbmltcG9ydCBBcnJvd0xlZnRJY29uIGZyb20gXCJjb21wb25lbnRzL2ljb25zL0Fycm93TGVmdEljb25cIjtcclxuaW1wb3J0IEVxSWNvbiBmcm9tIFwiY29tcG9uZW50cy9pY29ucy9FcUljb25cIjtcclxuaW1wb3J0IEluZ0ljb24gZnJvbSBcImNvbXBvbmVudHMvaWNvbnMvSW5nSWNvblwiO1xyXG5cclxuXHJcbmltcG9ydCB7IHVzZUxvY2FsU3RvcmUgfSBmcm9tIFwiaG9va3MvdXNlTG9jYWxTdG9yZVwiO1xyXG5pbXBvcnQgUmVjaXBlU3RvcmUgZnJvbSBcInN0b3JlL1JlY2lwZVN0b3JlXCI7XHJcbmltcG9ydCB7IFJlY2lwZVR5cGUgfSBmcm9tIFwidHlwZXMvYXBpVHlwZXNcIjtcclxuaW1wb3J0IFByZXZpZXdCbG9jayBmcm9tIFwiLi9jb21wb25lbnRzL1ByZXZpZXdCbG9ja1wiO1xyXG5pbXBvcnQgUmVjaXBlTmVlZCBmcm9tIFwiLi9jb21wb25lbnRzL1JlY2lwZU5lZWRcIjtcclxuaW1wb3J0IHN0eWxlcyBmcm9tICcuL1JlY2lwZS5tb2R1bGUuc2Nzcyc7XHJcblxyXG5jb25zdCBSZWNpcGU6IFJlYWN0LkZDID0gKCkgPT4ge1xyXG5cclxuICAgIGNvbnN0IHsgaWQgfSA9IHVzZVBhcmFtcygpO1xyXG4gICAgY29uc3QgeyBcclxuICAgICAgICByZWNpcGU6IHJlY2lwZU9iaiwgXHJcbiAgICAgICAgc3RhdHVzLCBcclxuICAgICAgICBsb2FkaW5nUmVjaXBlIFxyXG4gICAgfSA9IHVzZUxvY2FsU3RvcmUoKCkgPT4gbmV3IFJlY2lwZVN0b3JlKCkpO1xyXG4gICAgY29uc3QgbmF2aWdhdGUgPSB1c2VOYXZpZ2F0ZSgpO1xyXG5cclxuICAgIHVzZUVmZmVjdCgoKSA9PiB7XHJcbiAgICAgICAgbG9hZGluZ1JlY2lwZShOdW1iZXIoaWQpKTtcclxuICAgIH0sIFtpZCwgbG9hZGluZ1JlY2lwZV0pO1xyXG5cclxuICAgIGNvbnN0IGdldEVxdWlwbWVudCA9IChyZWNpcGVPYmo6IFJlY2lwZVR5cGUpID0+IHtcclxuICAgICAgICBjb25zdCB1bmlxRXEgPSBuZXcgU2V0PHN0cmluZz4oKTtcclxuICAgICAgICByZWNpcGVPYmouYW5hbHl6ZWRJbnN0cnVjdGlvbnNbMF0uc3RlcHMuZm9yRWFjaCgoc3RlcCkgPT4ge1xyXG4gICAgICAgICAgICBzdGVwLmVxdWlwbWVudC5mb3JFYWNoKChlcSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgdW5pcUVxLmFkZChlcS5uYW1lKTtcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgcmV0dXJuIEFycmF5LmZyb208c3RyaW5nPih1bmlxRXEpO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IGdldEluZ3JlZGllbnRzID0gKHJlY2lwZU9iajogUmVjaXBlVHlwZSkgPT4ge1xyXG4gICAgICAgIHJldHVybiByZWNpcGVPYmouZXh0ZW5kZWRJbmdyZWRpZW50c1xyXG4gICAgICAgICAgICAubWFwKCh7IGFtb3VudCwgdW5pdCwgbmFtZX0pID0+IFthbW91bnQsIHVuaXQsIG5hbWVdLmpvaW4oJyAnKSk7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIChcclxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT17c3R5bGVzW1wicmVjaXBlXCJdfT5cclxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9e3N0eWxlc1tcInJlY2lwZV9faGVhZGVyXCJdfT5cclxuICAgICAgICAgICAgICAgIDxBcnJvd0xlZnRJY29uXHJcbiAgICAgICAgICAgICAgICAgICAgY29sb3I9J2FjY2VudCdcclxuICAgICAgICAgICAgICAgICAgICBvbkNsaWNrPXsoKSA9PiB7IG5hdmlnYXRlKCcvcmVjaXBlcycpIH19IFxyXG4gICAgICAgICAgICAgICAgLz5cclxuICAgICAgICAgICAgICAgIDxUZXh0IHdlaWdodD0nYm9sZCcgdmlldz0ndGl0bGUnPlxyXG4gICAgICAgICAgICAgICAgICAgIHtyZWNpcGVPYmoudGl0bGV9XHJcbiAgICAgICAgICAgICAgICA8L1RleHQ+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICB7c3RhdHVzLnN0YXR1c05hbWUgPT09ICdFUlJPUicgP1xyXG4gICAgICAgICAgICA8RXJyb3JCb3hcclxuICAgICAgICAgICAgICAgIGVycm9yU2xvdD17PEJ1dHRvbiBvbkNsaWNrPXsoKSA9PiBuYXZpZ2F0ZSgnL3JlY2lwZXMnKX0+R28gdG8gbWFpbiBwYWdlPC9CdXR0b24+fVxyXG4gICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgICB7c3RhdHVzLnN0YXR1c01lc3NhZ2V9XHJcbiAgICAgICAgICAgIDwvRXJyb3JCb3g+XHJcbiAgICAgICAgICAgIDpcclxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9e3N0eWxlc1tcInJlY2lwZV9fYm94XCJdfT5cclxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPXtzdHlsZXNbXCJyZWNpcGVfX2JveF9fcHJldmlld1wiXX0+XHJcbiAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9e3JlY2lwZU9iai5pbWFnZX0gYWx0PSdyZWNpcGUgcGhvdG8nIC8+XHJcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9e3N0eWxlc1tcInJlY2lwZV9fYm94X19wcmV2aWV3X19pbmZvXCJdfT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPFByZXZpZXdCbG9jayBuYW1lPSdQcmVwYXJhdGlvbicgdW5pdD0nbWludXRlcycga2V5PSdQcmVwYXJhdGlvbic+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7cmVjaXBlT2JqLnByZXBhcmF0aW9uTWludXRlc31cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9QcmV2aWV3QmxvY2s+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxQcmV2aWV3QmxvY2sgbmFtZT0nQ29va2luZycgdW5pdD0nbWludXRlcycga2V5PSdDb29raW5nJz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtyZWNpcGVPYmouY29va2luZ01pbnV0ZXN9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvUHJldmlld0Jsb2NrPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8UHJldmlld0Jsb2NrIG5hbWU9J1RvdGFsJyB1bml0PSdtaW51dGVzJyBrZXk9J1RvdGFsJz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtyZWNpcGVPYmoucmVhZHlJbk1pbnV0ZXN9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvUHJldmlld0Jsb2NrPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8UHJldmlld0Jsb2NrIG5hbWU9J1NlcnZpbmdzJyB1bml0PSdzZXJ2aW5ncycga2V5PSdTZXJ2aW5ncyc+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7cmVjaXBlT2JqLnNlcnZpbmdzfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L1ByZXZpZXdCbG9jaz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPFByZXZpZXdCbG9jayBuYW1lPSdSYXRpbmcnIHVuaXQ9J2xpa2VzJyBrZXk9J1JhdGluZyc+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7cmVjaXBlT2JqLmFnZ3JlZ2F0ZUxpa2VzfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L1ByZXZpZXdCbG9jaz5cclxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9e3N0eWxlc1tcInJlY2lwZV9fYm94X19kZXNjcmlwdGlvblwiXX0+XHJcbiAgICAgICAgICAgICAgICAgICAgPFRleHQgdmlldz0ncC0xNic+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYW5nZXJvdXNseVNldElubmVySFRNTD17e1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9faHRtbDogcmVjaXBlT2JqLnN1bW1hcnksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9fVxyXG4gICAgICAgICAgICAgICAgICAgICAgICA+PC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvVGV4dD5cclxuICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9e3N0eWxlc1tcInJlY2lwZV9fYm94X19uZWVkc1wiXX0+XHJcbiAgICAgICAgICAgICAgICAgICAgPFJlY2lwZU5lZWRcclxuICAgICAgICAgICAgICAgICAgICAgICAgbmFtZT0nSW5ncmVkaWVudHMnXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnRzPXtnZXRJbmdyZWRpZW50cyhyZWNpcGVPYmopfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpY29uPXs8SW5nSWNvbiAvPn1cclxuICAgICAgICAgICAgICAgICAgICAvPlxyXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPXtzdHlsZXNbXCJyZWNpcGVfX2JveF9fbmVlZHNfX2xpbmVcIl19PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT17c3R5bGVzW1wiY2lyY2xlXCJdfT48L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9e3N0eWxlc1tcImJvdHRvbS1saW5lXCJdfT48L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICA8UmVjaXBlTmVlZCBcclxuICAgICAgICAgICAgICAgICAgICAgICAgbmFtZT0nRXF1aXBtZW50J1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbGVtZW50cz17Z2V0RXF1aXBtZW50KHJlY2lwZU9iail9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGljb249ezxFcUljb24gLz59XHJcbiAgICAgICAgICAgICAgICAgICAgLz5cclxuICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9e3N0eWxlc1sncmVjaXBlX19ib3hfX2RpcmVjdGlvbnMnXX0+XHJcbiAgICAgICAgICAgICAgICAgICAgPFRleHRcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGFnPSdkaXYnXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZpZXc9J3AtMjAnXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHdlaWdodD0nYm9sZCdcclxuICAgICAgICAgICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIERpcmVjdGlvbnNcclxuICAgICAgICAgICAgICAgICAgICA8L1RleHQ+XHJcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9e3N0eWxlc1tcInJlY2lwZV9fYm94X19kaXJlY3Rpb25zX19zdGVwc1wiXX0+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHtyZWNpcGVPYmouYW5hbHl6ZWRJbnN0cnVjdGlvbnNbMF0uc3RlcHMubWFwKChlbGVtKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYga2V5PXtlbGVtLm51bWJlcn0+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxUZXh0IHZpZXc9J3AtMTYnIHdlaWdodD0nYm9sZCc+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBTdGVwIHtlbGVtLm51bWJlcn1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9UZXh0PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8VGV4dCB2aWV3PSdwLTE0Jz57ZWxlbS5zdGVwfTwvVGV4dD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIClcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSl9XHJcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICA8L2Rpdj4gICAgXHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICApXHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IG9ic2VydmVyKFJlY2lwZSk7IiwiZXhwb3J0IHsgZGVmYXVsdCB9IGZyb20gJy4vUmVjaXBlJzsiLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCdcclxuaW1wb3J0IHN0eWxlcyBmcm9tICdzdHlsZXMvY3VzdG9tU3R5bGVzLm1vZHVsZS5zY3NzJztcclxuaW1wb3J0IEljb24sIHsgSWNvblByb3BzIH0gZnJvbSAnLi4vSWNvbic7XHJcblxyXG5jb25zdCBBcnJvd1JpZ2h0SWNvbjogUmVhY3QuRkM8SWNvblByb3BzPiA9IChwcm9wcykgPT4ge1xyXG5cclxuICAgIHJldHVybiAoXHJcbiAgICAgICAgPEljb24gXHJcbiAgICAgICAgICAgIHN0eWxlPXt7XHJcbiAgICAgICAgICAgICAgICBjdXJzb3I6ICdwb2ludGVyJ1xyXG4gICAgICAgICAgICB9fVxyXG4gICAgICAgICAgICB7Li4ucHJvcHN9XHJcbiAgICAgICAgICAgIHZpZXdCb3g9JzAgMCAzMiAzMidcclxuICAgICAgICAgICAgd2lkdGg9JzMyJ1xyXG4gICAgICAgICAgICBoZWlnaHQ9JzMyJ1xyXG4gICAgICAgID5cclxuICAgICAgICAgICAgPHBhdGggXHJcbiAgICAgICAgICAgICAgICBjbGFzc05hbWU9e3N0eWxlc1snaWNvbl9zdHJva2VfY29sb3JfJyArIChwcm9wcy5jb2xvciB8fCAnaW5oZXJpdCcpXX1cclxuICAgICAgICAgICAgICAgIGQ9XCJNMTEuODggMjYuNTU5OUwyMC41NzMzIDE3Ljg2NjZDMjEuNiAxNi44Mzk5IDIxLjYgMTUuMTU5OSAyMC41NzMzIDE0LjEzMzNMMTEuODggNS40Mzk5NFwiIFxyXG4gICAgICAgICAgICAgICAgc3Ryb2tlV2lkdGg9XCIxLjVcIiBcclxuICAgICAgICAgICAgICAgIHN0cm9rZU1pdGVybGltaXQ9XCIxMFwiIFxyXG4gICAgICAgICAgICAgICAgc3Ryb2tlTGluZWNhcD1cInJvdW5kXCIgXHJcbiAgICAgICAgICAgICAgICBzdHJva2VMaW5lam9pbj1cInJvdW5kXCJcclxuICAgICAgICAgICAgLz5cclxuICAgICAgICA8L0ljb24+XHJcbiAgICApXHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IEFycm93UmlnaHRJY29uO1xyXG4iLCJleHBvcnQgeyBkZWZhdWx0IH0gZnJvbSAnLi9BcnJvd1JpZ2h0SWNvbic7XHJcbiIsImltcG9ydCB7IGFjdGlvbiwgY29tcHV0ZWQsIG1ha2VPYnNlcnZhYmxlLCBvYnNlcnZhYmxlIH0gZnJvbSBcIm1vYnhcIjtcclxuaW1wb3J0IHsgSUxvY2FsU3RvcmUgfSBmcm9tIFwiaG9va3MvdXNlTG9jYWxTdG9yZVwiO1xyXG5cclxudHlwZSBQcml2YXRlRmllbGRzID0gJ190b3RhbCcgfCAnX3BhZ2VzJztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFBhZ2VDb250cm9sbGVyU3RvcmUgaW1wbGVtZW50cyBJTG9jYWxTdG9yZSB7XHJcbiAgICBwcml2YXRlIF9wYWdlczogbnVtYmVyID0gOTtcclxuICAgIHByaXZhdGUgX3RvdGFsOiBudW1iZXIgPSAwO1xyXG4gICAgXHJcbiAgICBjb25zdHJ1Y3Rvcih0b3RhbFJlc3VsdHM6IG51bWJlcikge1xyXG4gICAgICAgIG1ha2VPYnNlcnZhYmxlPFBhZ2VDb250cm9sbGVyU3RvcmUsIFByaXZhdGVGaWVsZHM+KHRoaXMsIHtcclxuICAgICAgICAgICAgX3RvdGFsOiBvYnNlcnZhYmxlLFxyXG4gICAgICAgICAgICBfcGFnZXM6IG9ic2VydmFibGUsXHJcbiAgICAgICAgICAgIGdldFBvaW50c0FycmF5OiBhY3Rpb24uYm91bmQsXHJcbiAgICAgICAgICAgIHBhZ2VzOiBjb21wdXRlZCxcclxuICAgICAgICAgICAgdG90YWw6IGNvbXB1dGVkLFxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICB0aGlzLl90b3RhbCA9IE1hdGguZmxvb3IodG90YWxSZXN1bHRzIC8gdGhpcy5fcGFnZXMgKyAodG90YWxSZXN1bHRzICUgdGhpcy5fcGFnZXMgIT09IDAgPyAxIDogMCkpOztcclxuICAgIH1cclxuXHJcbiAgICBnZXRQb2ludHNBcnJheShzZWxlY3RlZFBhZ2U6IG51bWJlcikge1xyXG4gICAgICAgIGlmICh0aGlzLl90b3RhbCA8IHRoaXMuX3BhZ2VzKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBBcnJheS5mcm9tKHtsZW5ndGg6IHRoaXMuX3RvdGFsfSwgKF8sIGluZGV4KSA9PiBpbmRleCArIDEpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGVuZEl0ZW0gPSBNYXRoLm1pbih0aGlzLl9wYWdlcyArIHNlbGVjdGVkUGFnZSAtIChzZWxlY3RlZFBhZ2UgJSAzICE9PSAwID8gc2VsZWN0ZWRQYWdlICUgMyA6IDMpLCB0aGlzLl90b3RhbCk7XHJcbiAgICAgICAgICAgIGxldCBmaXJzdEl0ZW0gPSBzZWxlY3RlZFBhZ2U7XHJcbiAgICAgICAgICAgIGlmIChzZWxlY3RlZFBhZ2UgJSAzID09PSAxKSB7XHJcbiAgICAgICAgICAgICAgICBmaXJzdEl0ZW0gPSBzZWxlY3RlZFBhZ2U7XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoc2VsZWN0ZWRQYWdlICUgMyA9PT0gMikge1xyXG4gICAgICAgICAgICAgICAgZmlyc3RJdGVtID0gc2VsZWN0ZWRQYWdlIC0gMTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGZpcnN0SXRlbSA9IHNlbGVjdGVkUGFnZSAtIDI7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKGVuZEl0ZW0gLSBmaXJzdEl0ZW0gKyAxID49IHRoaXMuX3BhZ2VzKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gW2ZpcnN0SXRlbSwgZmlyc3RJdGVtICsgMSwgZmlyc3RJdGVtICsgMiwgMCwgZW5kSXRlbV07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIEFycmF5LmZyb20oe2xlbmd0aDogZW5kSXRlbSAtIGZpcnN0SXRlbSArIDF9LCAoXywgaW5kZXgpID0+IGluZGV4ICsgZmlyc3RJdGVtKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IHBhZ2VzKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9wYWdlcztcclxuICAgIH1cclxuXHJcbiAgICBnZXQgdG90YWwoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3RvdGFsO1xyXG4gICAgfVxyXG5cclxuICAgIGRlc3Ryb3koKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5fcGFnZXMgPSA5O1xyXG4gICAgfVxyXG59IiwiXG4gICAgICBpbXBvcnQgQVBJIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICBpbXBvcnQgZG9tQVBJIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRGbiBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanNcIjtcbiAgICAgIGltcG9ydCBzZXRBdHRyaWJ1dGVzIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0U3R5bGVFbGVtZW50IGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzXCI7XG4gICAgICBpbXBvcnQgc3R5bGVUYWdUcmFuc2Zvcm1GbiBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzXCI7XG4gICAgICBpbXBvcnQgY29udGVudCwgKiBhcyBuYW1lZEV4cG9ydCBmcm9tIFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cnVsZVNldFsxXS5ydWxlc1swXS51c2VbMV0hLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Bvc3Rjc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9ydWxlU2V0WzFdLnJ1bGVzWzBdLnVzZVsyXSEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanMhLi9QYWdlQ29udHJvbGxlci5tb2R1bGUuc2Nzc1wiO1xuICAgICAgXG4gICAgICBcblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybSA9IHN0eWxlVGFnVHJhbnNmb3JtRm47XG5vcHRpb25zLnNldEF0dHJpYnV0ZXMgPSBzZXRBdHRyaWJ1dGVzO1xub3B0aW9ucy5pbnNlcnQgPSBpbnNlcnRGbi5iaW5kKG51bGwsIFwiaGVhZFwiKTtcbm9wdGlvbnMuZG9tQVBJID0gZG9tQVBJO1xub3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7XG5cbnZhciB1cGRhdGUgPSBBUEkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5leHBvcnQgKiBmcm9tIFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cnVsZVNldFsxXS5ydWxlc1swXS51c2VbMV0hLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Bvc3Rjc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9ydWxlU2V0WzFdLnJ1bGVzWzBdLnVzZVsyXSEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanMhLi9QYWdlQ29udHJvbGxlci5tb2R1bGUuc2Nzc1wiO1xuICAgICAgIGV4cG9ydCBkZWZhdWx0IGNvbnRlbnQgJiYgY29udGVudC5sb2NhbHMgPyBjb250ZW50LmxvY2FscyA6IHVuZGVmaW5lZDtcbiIsImltcG9ydCBjbGFzc05hbWVzIGZyb20gXCJjbGFzc25hbWVzXCI7XHJcbmltcG9ydCB7IG9ic2VydmVyIH0gZnJvbSBcIm1vYngtcmVhY3QtbGl0ZVwiO1xyXG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tIFwicmVhY3RcIjtcclxuaW1wb3J0IFRleHQgZnJvbSBcImNvbXBvbmVudHMvVGV4dFwiO1xyXG5pbXBvcnQgQXJyb3dMZWZ0SWNvbiBmcm9tIFwiY29tcG9uZW50cy9pY29ucy9BcnJvd0xlZnRJY29uXCI7XHJcbmltcG9ydCBBcnJvd1JpZ2h0SWNvbiBmcm9tIFwiY29tcG9uZW50cy9pY29ucy9BcnJvd1JpZ2h0SWNvblwiO1xyXG5pbXBvcnQgeyB1c2VMb2NhbFN0b3JlIH0gZnJvbSBcImhvb2tzL3VzZUxvY2FsU3RvcmVcIjtcclxuaW1wb3J0IFBhZ2VDb250cm9sbGVyU3RvcmUgZnJvbSBcInN0b3JlL1BhZ2VDb250cm9sbGVyU3RvcmVcIjtcclxuaW1wb3J0IHN0eWxlcyBmcm9tICcuL1BhZ2VDb250cm9sbGVyLm1vZHVsZS5zY3NzJztcclxuXHJcbnR5cGUgUGFnZUNvbnRyb2xsZXJQcm9wcyA9IHtcclxuICAgIHNlbGVjdGVkUGFnZTogbnVtYmVyLFxyXG4gICAgdG90YWxSZXN1bHRzOiBudW1iZXIsXHJcbiAgICBvbkNsaWNrOiAocGFnZTogbnVtYmVyKSA9PiB2b2lkLFxyXG59XHJcblxyXG5jb25zdCBQYWdlQ29udHJvbGxlcjogUmVhY3QuRkM8UGFnZUNvbnRyb2xsZXJQcm9wcz4gPSAoe1xyXG4gICAgc2VsZWN0ZWRQYWdlLFxyXG4gICAgdG90YWxSZXN1bHRzLFxyXG4gICAgb25DbGlja1xyXG59KSA9PiB7XHJcblxyXG4gICAgY29uc3QgeyBcclxuICAgICAgICBnZXRQb2ludHNBcnJheSwgXHJcbiAgICAgICAgdG90YWwgXHJcbiAgICB9ID0gdXNlTG9jYWxTdG9yZSgoKSA9PiBuZXcgUGFnZUNvbnRyb2xsZXJTdG9yZSh0b3RhbFJlc3VsdHMpKTtcclxuXHJcbiAgICBjb25zdCBnb0JhY2sgPSAoKSA9PiB7XHJcbiAgICAgICAgaWYgKHNlbGVjdGVkUGFnZSA+IDEpIHtcclxuICAgICAgICAgICAgb25DbGljayhzZWxlY3RlZFBhZ2UgLSAxKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgZ29OZXh0ID0gKCkgPT4ge1xyXG4gICAgICAgIGlmIChzZWxlY3RlZFBhZ2UgPCB0b3RhbCkge1xyXG4gICAgICAgICAgICBvbkNsaWNrKHNlbGVjdGVkUGFnZSArIDEpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBzZWxlY3RQYWdlID0gKHBhZ2VOdW1iZXI6IG51bWJlcikgPT4ge1xyXG4gICAgICAgIG9uQ2xpY2socGFnZU51bWJlcik7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIChcclxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT17c3R5bGVzW1wicGFnZS1jb250cm9sbGVyXCJdfT5cclxuICAgICAgICAgICAgPEFycm93TGVmdEljb24gXHJcbiAgICAgICAgICAgICAgICBjb2xvcj17c2VsZWN0ZWRQYWdlID4gMSA/ICdwcmltYXJ5JyA6ICdzZWNvbmRhcnknfVxyXG4gICAgICAgICAgICAgICAgb25DbGljaz17Z29CYWNrfVxyXG4gICAgICAgICAgICAvPlxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT17c3R5bGVzW1wicGFnZS1jb250cm9sbGVyX19udW1iZXJzXCJdfT5cclxuICAgICAgICAgICAgICAgIHtnZXRQb2ludHNBcnJheShzZWxlY3RlZFBhZ2UpLm1hcCgobnVtYmVyKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG51bWJlciA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPFRleHRcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBrZXk9e251bWJlcn0gdGFnPSdkaXYnIHZpZXc9J3AtMTgnXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPXtzdHlsZXNbJ3BhZ2UtY29udHJvbGxlcl9fbnVtYmVyc19fcG9pbnRzJ119XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLi4uXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L1RleHQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIClcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxUZXh0XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBrZXk9e251bWJlcn0gdGFnPSdkaXYnIHZpZXc9J3AtMTgnXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9e2NsYXNzTmFtZXMoe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtzdHlsZXNbXCJwYWdlLWNvbnRyb2xsZXJfX251bWJlcnNfX251bWJlclwiXV06IHRydWUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgW3N0eWxlc1tcInBhZ2UtY29udHJvbGxlcl9fbnVtYmVyc19fbnVtYmVyX3NlbGVjdGVkXCJdXTogc2VsZWN0ZWRQYWdlID09PSBudW1iZXIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uQ0xpY2s9eygpID0+IHsgc2VsZWN0UGFnZShudW1iZXIpIH19XHJcbiAgICAgICAgICAgICAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtudW1iZXJ9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvVGV4dD5cclxuICAgICAgICAgICAgICAgICAgICApXHJcbiAgICAgICAgICAgICAgICB9KX1cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgIDxBcnJvd1JpZ2h0SWNvblxyXG4gICAgICAgICAgICAgICAgY29sb3I9e3NlbGVjdGVkUGFnZSA8IHRvdGFsID8gJ3ByaW1hcnknIDogJ3NlY29uZGFyeSd9IFxyXG4gICAgICAgICAgICAgICAgb25DbGljaz17Z29OZXh0fVxyXG4gICAgICAgICAgICAvPlxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgKVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBvYnNlcnZlcihQYWdlQ29udHJvbGxlcik7IiwiZXhwb3J0IHsgZGVmYXVsdCB9IGZyb20gJy4vUGFnZUNvbnRyb2xsZXInOyIsIlxuICAgICAgaW1wb3J0IEFQSSBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiO1xuICAgICAgaW1wb3J0IGRvbUFQSSBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0Rm4gZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzXCI7XG4gICAgICBpbXBvcnQgc2V0QXR0cmlidXRlcyBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydFN0eWxlRWxlbWVudCBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qc1wiO1xuICAgICAgaW1wb3J0IHN0eWxlVGFnVHJhbnNmb3JtRm4gZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qc1wiO1xuICAgICAgaW1wb3J0IGNvbnRlbnQsICogYXMgbmFtZWRFeHBvcnQgZnJvbSBcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanM/P3J1bGVTZXRbMV0ucnVsZXNbMF0udXNlWzFdIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9wb3N0Y3NzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cnVsZVNldFsxXS5ydWxlc1swXS51c2VbMl0hLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vTGlzdFNob3dlci5tb2R1bGUuc2Nzc1wiO1xuICAgICAgXG4gICAgICBcblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybSA9IHN0eWxlVGFnVHJhbnNmb3JtRm47XG5vcHRpb25zLnNldEF0dHJpYnV0ZXMgPSBzZXRBdHRyaWJ1dGVzO1xub3B0aW9ucy5pbnNlcnQgPSBpbnNlcnRGbi5iaW5kKG51bGwsIFwiaGVhZFwiKTtcbm9wdGlvbnMuZG9tQVBJID0gZG9tQVBJO1xub3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7XG5cbnZhciB1cGRhdGUgPSBBUEkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5leHBvcnQgKiBmcm9tIFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cnVsZVNldFsxXS5ydWxlc1swXS51c2VbMV0hLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Bvc3Rjc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9ydWxlU2V0WzFdLnJ1bGVzWzBdLnVzZVsyXSEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanMhLi9MaXN0U2hvd2VyLm1vZHVsZS5zY3NzXCI7XG4gICAgICAgZXhwb3J0IGRlZmF1bHQgY29udGVudCAmJiBjb250ZW50LmxvY2FscyA/IGNvbnRlbnQubG9jYWxzIDogdW5kZWZpbmVkO1xuIiwiaW1wb3J0IHsgYWN0aW9uLCBjb21wdXRlZCwgbWFrZU9ic2VydmFibGUsIG9ic2VydmFibGUgfSBmcm9tIFwibW9ieFwiO1xyXG5pbXBvcnQgeyBJTG9jYWxTdG9yZSB9IGZyb20gXCJob29rcy91c2VMb2NhbFN0b3JlXCI7XHJcbmltcG9ydCB7IE9wdGlvbiB9IGZyb20gXCJjb21wb25lbnRzL011bHRpRHJvcGRvd25cIjtcclxuXHJcbnR5cGUgU2VhcmNoUGFyYW1PYmpUeXBlID0ge1xyXG4gICAgW2tleTogc3RyaW5nXTogc3RyaW5nIHwgbnVsbCxcclxufVxyXG5cclxudHlwZSBQcml2YXRlRmllbGRzID0gJ19zZWFyY2hQYXJhbXMnO1xyXG5cclxuY2xhc3MgU2VhcmNoUGFyYW1zU3RvcmUgaW1wbGVtZW50cyBJTG9jYWxTdG9yZSB7XHJcbiAgICBwcml2YXRlIF9zZWFyY2hQYXJhbXM6IFNlYXJjaFBhcmFtT2JqVHlwZSA9IHt9O1xyXG4gICAgXHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICBtYWtlT2JzZXJ2YWJsZTxTZWFyY2hQYXJhbXNTdG9yZSwgUHJpdmF0ZUZpZWxkcz4odGhpcywge1xyXG4gICAgICAgICAgICBfc2VhcmNoUGFyYW1zOiBvYnNlcnZhYmxlLnJlZixcclxuXHJcbiAgICAgICAgICAgIHNldFNlYXJjaFBhcmFtOiBhY3Rpb24uYm91bmQsXHJcbiAgICAgICAgICAgIGdldFNlYXJjaFBhcmFtczogYWN0aW9uLmJvdW5kLFxyXG4gICAgICAgICAgICBzZXRNdWx0aVBhcmFtOiBhY3Rpb24uYm91bmQsXHJcbiAgICAgICAgICAgIGRlbGV0ZVNlYXJjaFBhcmFtOiBhY3Rpb24uYm91bmQsXHJcblxyXG4gICAgICAgICAgICBjaGFuZ2VTZWFyY2hQYXJhbXNGb3JGaWx0ZXJzOiBhY3Rpb24uYm91bmQsXHJcbiAgICAgICAgICAgIHVwZGF0ZVVybDogYWN0aW9uLmJvdW5kLFxyXG4gICAgICAgICAgICB1cGRhdGVTZWFyY2hQYXJhbXM6IGFjdGlvbi5ib3VuZCxcclxuXHJcbiAgICAgICAgICAgIHNlYXJjaFBhcmFtczogY29tcHV0ZWQsXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0U2VhcmNoT2JqZWN0KCkge1xyXG4gICAgICAgIHJldHVybiBuZXcgVVJMU2VhcmNoUGFyYW1zKGRvY3VtZW50LmxvY2F0aW9uLmhyZWYuc3BsaXQoJz8nKVsxXSB8fCAnJyk7ICAgICAgICBcclxuICAgIH1cclxuXHJcbiAgICB1cGRhdGVVcmwoc2VhcmNoUGFyYW1zOiBVUkxTZWFyY2hQYXJhbXMpIHtcclxuICAgICAgICBjb25zdCBuZXdVcmwgPSBcclxuICAgICAgICAgICAgd2luZG93LmxvY2F0aW9uLnByb3RvY29sICsgJy8vJyArIFxyXG4gICAgICAgICAgICB3aW5kb3cubG9jYXRpb24uaG9zdCArIHdpbmRvdy5sb2NhdGlvbi5wYXRobmFtZSArIFxyXG4gICAgICAgICAgICAnPycgKyBzZWFyY2hQYXJhbXMudG9TdHJpbmcoKTtcclxuICAgICAgICB3aW5kb3cuaGlzdG9yeS5wdXNoU3RhdGUoe3BhdGg6IG5ld1VybH0sICcnLCBuZXdVcmwpO1xyXG4gICAgfVxyXG5cclxuICAgIHVwZGF0ZVNlYXJjaFBhcmFtcygpOiBVUkxTZWFyY2hQYXJhbXMge1xyXG4gICAgICAgIGxldCBzZWFyY2hQYXJhbXMgPSB0aGlzLmdldFNlYXJjaE9iamVjdCgpO1xyXG4gICAgICAgIE9iamVjdC5lbnRyaWVzKHRoaXMuX3NlYXJjaFBhcmFtcykuZm9yRWFjaCgoW2tleSwgdmFsdWVdKSA9PiB7XHJcbiAgICAgICAgICAgIGlmICh2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgc2VhcmNoUGFyYW1zLnNldChrZXksIGVuY29kZVVSSUNvbXBvbmVudCh2YWx1ZSkpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgc2VhcmNoUGFyYW1zLmRlbGV0ZShrZXkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgcmV0dXJuIHNlYXJjaFBhcmFtcztcclxuICAgIH1cclxuXHJcbiAgICBnZXRTZWFyY2hQYXJhbXMoKSB7XHJcbiAgICAgICAgdGhpcy5fc2VhcmNoUGFyYW1zID0ge307XHJcbiAgICAgICAgY29uc3Qgc2VhcmNoUGFyYW1zID0gdGhpcy5nZXRTZWFyY2hPYmplY3QoKTtcclxuICAgICAgICBjb25zdCBwYXJhbUFycmF5ID0gQXJyYXkuZnJvbShzZWFyY2hQYXJhbXMuZW50cmllcygpKTtcclxuICAgICAgICBwYXJhbUFycmF5LmZvckVhY2goKFtrZXksIHZhbHVlXSkgPT4ge1xyXG4gICAgICAgICAgICBPYmplY3QuYXNzaWduKHRoaXMuX3NlYXJjaFBhcmFtcywge1xyXG4gICAgICAgICAgICAgICAgW2tleV06IGRlY29kZVVSSUNvbXBvbmVudCh2YWx1ZSlcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBzZXRTZWFyY2hQYXJhbShrZXk6IHN0cmluZywgdmFsdWU6IHN0cmluZyB8IG51bGwsIHVwZGF0aW5nOiBib29sZWFuID0gdHJ1ZSkge1xyXG4gICAgICAgIGlmICh2YWx1ZSkge1xyXG4gICAgICAgICAgICBPYmplY3QuYXNzaWduKHRoaXMuX3NlYXJjaFBhcmFtcywge1xyXG4gICAgICAgICAgICAgICAgW2tleV06IHZhbHVlLFxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgaWYgKHVwZGF0aW5nKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBzZWFyY2hQYXJhbXMgPSB0aGlzLmdldFNlYXJjaE9iamVjdCgpO1xyXG4gICAgICAgICAgICAgICAgc2VhcmNoUGFyYW1zLnNldChrZXksIGVuY29kZVVSSUNvbXBvbmVudCh2YWx1ZS50b0xvd2VyQ2FzZSgpKSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZVVybChzZWFyY2hQYXJhbXMpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGRlbGV0ZVNlYXJjaFBhcmFtKGtleTogc3RyaW5nLCB1cGRhdGluZzogYm9vbGVhbiA9IHRydWUpIHtcclxuICAgICAgICBpZiAodGhpcy5fc2VhcmNoUGFyYW1zLmhhc093blByb3BlcnR5KGtleSkpIHtcclxuICAgICAgICAgICAgdGhpcy5fc2VhcmNoUGFyYW1zW2tleV0gPSBudWxsO1xyXG4gICAgICAgICAgICBpZiAodXBkYXRpbmcpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHNlYXJjaFBhcmFtcyA9IHRoaXMuZ2V0U2VhcmNoT2JqZWN0KCk7XHJcbiAgICAgICAgICAgICAgICBzZWFyY2hQYXJhbXMuZGVsZXRlKGtleSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZVVybChzZWFyY2hQYXJhbXMpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHNldE11bHRpUGFyYW0oXHJcbiAgICAgICAga2V5OiBzdHJpbmcsIFxyXG4gICAgICAgIHZhbHVlczogc3RyaW5nW10sIFxyXG4gICAgICAgIHByZWZpeDogc3RyaW5nID0gJywnLFxyXG4gICAgICAgIHVwZGF0aW5nOiBib29sZWFuID0gdHJ1ZSxcclxuICAgICkge1xyXG4gICAgICAgIGNvbnN0IHZhbHVlU3RyID0gdmFsdWVzLmpvaW4ocHJlZml4KTtcclxuICAgICAgICBpZiAodmFsdWVTdHIgIT09ICcnKSB7XHJcbiAgICAgICAgICAgIE9iamVjdC5hc3NpZ24odGhpcy5fc2VhcmNoUGFyYW1zLCB7XHJcbiAgICAgICAgICAgICAgICBba2V5XTogdmFsdWVTdHIsXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBpZiAodXBkYXRpbmcpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHNlYXJjaFBhcmFtcyA9IHRoaXMuZ2V0U2VhcmNoT2JqZWN0KCk7XHJcbiAgICAgICAgICAgICAgICBzZWFyY2hQYXJhbXMuc2V0KGtleSwgZW5jb2RlVVJJQ29tcG9uZW50KHZhbHVlU3RyLnRvTG93ZXJDYXNlKCkpKTtcclxuICAgICAgICAgICAgICAgIHRoaXMudXBkYXRlVXJsKHNlYXJjaFBhcmFtcyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgY2hhbmdlU2VhcmNoUGFyYW1zRm9yRmlsdGVycyhcclxuICAgICAgICBzZWFyY2g6IHN0cmluZyxcclxuICAgICAgICBjYXRlZ29yeVRhZz86IHN0cmluZyxcclxuICAgICAgICBjYXRlZ29yeT86IE9wdGlvbltdLFxyXG4gICAgICAgIG90aGVyVGFncz86IFtzdHJpbmcsIHN0cmluZ11bXVxyXG4gICAgKSB7XHJcbiAgICAgICAgY29uc29sZS5sb2cob3RoZXJUYWdzKTtcclxuICAgICAgICBjb25zb2xlLmxvZyhjYXRlZ29yeSk7XHJcbiAgICAgICAgdGhpcy5kZWxldGVTZWFyY2hQYXJhbSgncXVlcnknLCBmYWxzZSk7XHJcbiAgICAgICAgdGhpcy5kZWxldGVTZWFyY2hQYXJhbSgncGFnZScsIGZhbHNlKTtcclxuICAgICAgICBpZiAoc2VhcmNoICE9PSAnJykge1xyXG4gICAgICAgICAgICB0aGlzLnNldFNlYXJjaFBhcmFtKCdxdWVyeScsIHNlYXJjaCwgZmFsc2UpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoY2F0ZWdvcnlUYWcgJiYgY2F0ZWdvcnkpIHtcclxuICAgICAgICAgICAgdGhpcy5kZWxldGVTZWFyY2hQYXJhbShjYXRlZ29yeVRhZywgZmFsc2UpO1xyXG4gICAgICAgICAgICB0aGlzLnNldE11bHRpUGFyYW0oY2F0ZWdvcnlUYWcsIGNhdGVnb3J5Lm1hcCgoY2F0KSA9PiBjYXQudmFsdWUpLCAnLCcsIGZhbHNlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKG90aGVyVGFncykge1xyXG4gICAgICAgICAgICBvdGhlclRhZ3MuZm9yRWFjaCgoW2tleSwgdmFsdWVdKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAoa2V5ICE9PSAnJykge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZGVsZXRlU2VhcmNoUGFyYW0oa2V5LCBmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoa2V5ICE9PSAnJyAmJiB2YWx1ZSAhPT0gJycpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnNldFNlYXJjaFBhcmFtKGtleSwgdmFsdWUsIGZhbHNlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSlcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy51cGRhdGVVcmwodGhpcy51cGRhdGVTZWFyY2hQYXJhbXMoKSk7XHJcbiAgICAgICAgdGhpcy5fc2VhcmNoUGFyYW1zID0geyAuLi50aGlzLl9zZWFyY2hQYXJhbXMgfTtcclxuICAgIH1cclxuXHJcbiAgICBnZXRQYXJhbShrZXk6IHN0cmluZyk6IHN0cmluZyB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3NlYXJjaFBhcmFtc1trZXldIHx8ICcnO1xyXG4gICAgfVxyXG5cclxuICAgIGdldE51bWJlclBhcmFtKGtleTogc3RyaW5nLCBpbml0OiBudW1iZXIgPSAxKTogbnVtYmVyIHtcclxuICAgICAgICBjb25zdCB2YWx1ZSA9IE51bWJlcih0aGlzLl9zZWFyY2hQYXJhbXNba2V5XSk7XHJcbiAgICAgICAgcmV0dXJuICFpc05hTih2YWx1ZSkgPyB2YWx1ZSA6IGluaXQ7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0UGFyYW1QYWlyKGtleTogc3RyaW5nKTogW3N0cmluZywgc3RyaW5nIHwgbnVsbF0ge1xyXG4gICAgICAgIHJldHVybiBba2V5LCB0aGlzLl9zZWFyY2hQYXJhbXNba2V5XSB8fCAnJ107XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0T2Zmc2V0KCkge1xyXG4gICAgICAgIHJldHVybiAoKE51bWJlcih0aGlzLl9zZWFyY2hQYXJhbXNbJ3BhZ2UnXSB8fCAnMScpIC0gMSkgKiA5KS50b1N0cmluZygpO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICBnZXRNdWx0aXBsZVBhcmFtKFxyXG4gICAgICAgIGtleTogc3RyaW5nLCBcclxuICAgICAgICBvcHRpb25zOiBPcHRpb25bXSxcclxuICAgICAgICBwcmVmaXg6IHN0cmluZyA9ICcsJ1xyXG4gICAgKTogT3B0aW9uW10ge1xyXG4gICAgICAgIGNvbnN0IHZhbHVlU3RyID0gdGhpcy5fc2VhcmNoUGFyYW1zW2tleV0gfHwgJyc7XHJcbiAgICAgICAgaWYgKHZhbHVlU3RyID09PSAnJykge1xyXG4gICAgICAgICAgICByZXR1cm4gW107XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IHZhbHVlQXJyYXkgPSB2YWx1ZVN0ci5zcGxpdChwcmVmaXgpO1xyXG4gICAgICAgIHJldHVybiBvcHRpb25zLmZpbHRlcigob3B0KSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IGluZGV4ID0gdmFsdWVBcnJheS5pbmRleE9mKG9wdC52YWx1ZS50b0xvd2VyQ2FzZSgpKTtcclxuICAgICAgICAgICAgcmV0dXJuIGluZGV4ICE9PSAtMTtcclxuICAgICAgICB9KVxyXG4gICAgfVxyXG4gICAgXHJcbiAgICBnZXQgc2VhcmNoUGFyYW1zKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9zZWFyY2hQYXJhbXM7XHJcbiAgICB9XHJcblxyXG4gICAgZGVzdHJveSgpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLl9zZWFyY2hQYXJhbXMgPSB7fTtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgbmV3IFNlYXJjaFBhcmFtc1N0b3JlKCk7IiwiZXhwb3J0IHsgZGVmYXVsdCB9IGZyb20gJy4vU2VhcmNoUGFyYW1zU3RvcmUnOyIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IHsgU3RhdHVzIH0gZnJvbSAndHlwZXMvYXBpVHlwZXMnO1xyXG5pbXBvcnQgRXJyb3JCb3ggZnJvbSAnY29tcG9uZW50cy9FcnJvckJveCc7XHJcbmltcG9ydCBUZXh0IGZyb20gJ2NvbXBvbmVudHMvVGV4dCc7XHJcbmltcG9ydCBMb2FkZXIgZnJvbSAnY29tcG9uZW50cy9Mb2FkZXInO1xyXG5pbXBvcnQgUGFnZUNvbnRyb2xsZXIgZnJvbSAnY29tcG9uZW50cy9QYWdlQ29udHJvbGxlcic7XHJcbmltcG9ydCBzdHlsZXMgZnJvbSAnLi9MaXN0U2hvd2VyLm1vZHVsZS5zY3NzJztcclxuaW1wb3J0IHNlYXJjaFN0b3JlIGZyb20gJ3N0b3JlL1NlYXJjaFBhcmFtc1N0b3JlJztcclxuXHJcbmludGVyZmFjZSBMaXN0U2hvd2VyUHJvcHMge1xyXG4gICAgc3RhdHVzOiBTdGF0dXMsXHJcbiAgICB0b3RhbENvdW50PzogbnVtYmVyLFxyXG4gICAgY2hpbGRyZW46IFJlYWN0LlJlYWN0Tm9kZSxcclxufVxyXG5cclxuY29uc3QgTGlzdFNob3dlcjogUmVhY3QuRkM8TGlzdFNob3dlclByb3BzPiA9ICh7XHJcbiAgICBzdGF0dXMsXHJcbiAgICB0b3RhbENvdW50PTAsXHJcbiAgICBjaGlsZHJlblxyXG59KSA9PiB7XHJcblxyXG4gICAgY29uc3QgcGFnZUNvbnRyb2xsZXJDbGljayA9IChwYWdlOiBudW1iZXIpID0+IHtcclxuICAgICAgICBzZWFyY2hTdG9yZS5zZXRTZWFyY2hQYXJhbSgncGFnZScsIHBhZ2UudG9TdHJpbmcoKSk7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIHJldHVybiAoXHJcbiAgICAgICAgPD5cclxuICAgICAgICAgICAge3N0YXR1cy5zdGF0dXNOYW1lID09PSAnTk9UX1NUQVJURUQnID9cclxuICAgICAgICAgICAgPFRleHQgdGFnPSdkaXYnIHZpZXc9J3AtMjAnIGNvbG9yPSdzZWNvbmRhcnknPlxyXG4gICAgICAgICAgICAgICAgVHJ5IHNlYXJjaGluZyFcclxuICAgICAgICAgICAgPC9UZXh0PlxyXG4gICAgICAgICAgICA6IHN0YXR1cy5zdGF0dXNOYW1lID09PSAnRVJST1InID9cclxuICAgICAgICAgICAgPEVycm9yQm94PlxyXG4gICAgICAgICAgICAgICAge3N0YXR1cy5zdGF0dXNNZXNzYWdlfVxyXG4gICAgICAgICAgICA8L0Vycm9yQm94PlxyXG4gICAgICAgICAgICA6IHN0YXR1cy5zdGF0dXNOYW1lID09PSAnTE9BRElORycgP1xyXG4gICAgICAgICAgICA8TG9hZGVyIC8+XHJcbiAgICAgICAgICAgIDpcclxuICAgICAgICAgICAgPD5cclxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPXtzdHlsZXNbJ2xpc3Qtc2hvd2VyJ119PlxyXG4gICAgICAgICAgICAgICAgICAgIHtjaGlsZHJlbn1cclxuICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAge3RvdGFsQ291bnQgPiAwICYmXHJcbiAgICAgICAgICAgICAgICA8UGFnZUNvbnRyb2xsZXIgXHJcbiAgICAgICAgICAgICAgICAgICAgc2VsZWN0ZWRQYWdlPXtOdW1iZXIoc2VhcmNoU3RvcmUuZ2V0TnVtYmVyUGFyYW0oJ3BhZ2UnKSl9XHJcbiAgICAgICAgICAgICAgICAgICAgdG90YWxSZXN1bHRzPXt0b3RhbENvdW50fVxyXG4gICAgICAgICAgICAgICAgICAgIG9uQ2xpY2s9e3BhZ2VDb250cm9sbGVyQ2xpY2t9XHJcbiAgICAgICAgICAgICAgICAvPlxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICA8Lz5cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIDwvPiAgICBcclxuICAgIClcclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgTGlzdFNob3dlcjsiLCJleHBvcnQgeyBkZWZhdWx0IH0gZnJvbSAnLi9MaXN0U2hvd2VyJzsiLCJleHBvcnQgdHlwZSBDb2xsZWN0aW9uTW9kZWw8SyBleHRlbmRzIHN0cmluZyB8IG51bWJlciwgVD4gPSB7XHJcbiAgICBvcmRlcjogS1tdO1xyXG4gICAgZW50aXRpZXM6IFJlY29yZDxLLCBUPjtcclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IGdldEluaXRpYWxDb2xsZWN0aW9uTW9kZWwgPSA8SyBleHRlbmRzIHN0cmluZyB8IG51bWJlciwgVD4oKTogQ29sbGVjdGlvbk1vZGVsPEssIFQ+ID0+ICh7XHJcbiAgICBvcmRlcjogW10gYXMgS1tdLFxyXG4gICAgZW50aXRpZXM6IHt9IGFzIFJlY29yZDxLLCBUPlxyXG59KTtcclxuXHJcbmV4cG9ydCBjb25zdCBub3JtYWxpemVDb2xsZWN0aW9uID0gPEsgZXh0ZW5kcyBzdHJpbmcgfCBudW1iZXIsIFQ+KFxyXG4gICAgZWxlbWVudHM6IFRbXSxcclxuICAgIGdldEtleUZvckVsZW1lbnQ6IChlbGVtZW50OiBUKSA9PiBLXHJcbik6IENvbGxlY3Rpb25Nb2RlbDxLLCBUPiA9PiB7XHJcbiAgICBjb25zdCBjb2xsZWN0aW9uOiBDb2xsZWN0aW9uTW9kZWw8SywgVD4gPSBnZXRJbml0aWFsQ29sbGVjdGlvbk1vZGVsKCk7XHJcbiAgICBlbGVtZW50cy5mb3JFYWNoKGVsID0+IHtcclxuICAgICAgY29uc3QgaWQgPSBnZXRLZXlGb3JFbGVtZW50KGVsKTtcclxuICAgICAgY29sbGVjdGlvbi5vcmRlci5wdXNoKGlkKTtcclxuICAgICAgY29sbGVjdGlvbi5lbnRpdGllc1tpZF0gPSBlbDtcclxuICAgIH0pO1xyXG4gIFxyXG4gICAgcmV0dXJuIGNvbGxlY3Rpb247XHJcbn07XHJcblxyXG5leHBvcnQgY29uc3QgbGluZWFyaXplQ29sbGVjdGlvbiA9IDxLIGV4dGVuZHMgc3RyaW5nIHwgbnVtYmVyLCBUPlxyXG4oZWxlbWVudHM6IENvbGxlY3Rpb25Nb2RlbDxLLCBUPik6IFRbXSA9PlxyXG4gIGVsZW1lbnRzLm9yZGVyLm1hcCgoZWwpID0+IGVsZW1lbnRzLmVudGl0aWVzW2VsXSk7IiwiaW1wb3J0IHsgXHJcbiAgICBOb3RTdGFydGVkU3RhdHVzLCBMb2FkaW5nU3RhdHVzLFxyXG4gICAgU3VjY2Vzc2Z1bFN0YXR1cywgZXJyb3JTdGF0dXNcclxufSBmcm9tIFwiY29uZmlnL2luaXRWYWx1ZXNcIjtcclxuaW1wb3J0IHsgU3RhdHVzIH0gZnJvbSBcInR5cGVzL2FwaVR5cGVzXCI7XHJcbmltcG9ydCB7IElMb2NhbFN0b3JlIH0gZnJvbSBcImhvb2tzL3VzZUxvY2FsU3RvcmVcIjtcclxuaW1wb3J0IHsgZ2V0SW5pdGlhbENvbGxlY3Rpb25Nb2RlbCwgbGluZWFyaXplQ29sbGVjdGlvbiwgbm9ybWFsaXplQ29sbGVjdGlvbiB9IGZyb20gXCJ1dGlscy9jb2xsZWN0aW9uXCI7XHJcbmltcG9ydCB7IG1ha2VPYnNlcnZhYmxlLCBvYnNlcnZhYmxlLCBjb21wdXRlZCwgYWN0aW9uIH0gZnJvbSBcIm1vYnhcIjtcclxuaW1wb3J0IGF4aW9zIGZyb20gXCJheGlvc1wiO1xyXG5cclxudHlwZSBQcml2YXRlRmllbGRzID0gJ19zdGF0dXMnIHwgJ19yZXN1bHRzJyB8ICdfdG90YWwnO1xyXG5cclxuaW50ZXJmYWNlIExpc3RVbml0IHsgaWQ6IG51bWJlciB9XHJcbnR5cGUgVXJsRnVuY3Rpb25Qcm9wID0gc3RyaW5nIHwgbnVtYmVyIHwgYm9vbGVhbiB8IEFycmF5PFtzdHJpbmcsIHN0cmluZyB8IG51bGxdPjtcclxuZXhwb3J0IGludGVyZmFjZSBVcmxHZW5lcmF0b3JJbnRlcmZhY2Uge1xyXG4gICAgW2tleTogc3RyaW5nXTogVXJsRnVuY3Rpb25Qcm9wLFxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBCYXNlTGlzdFN0b3JlPFxyXG4gICAgUmVzdWx0VW5pdCBleHRlbmRzIExpc3RVbml0LCBcclxuPiBpbXBsZW1lbnRzIElMb2NhbFN0b3JlIHtcclxuICAgIFxyXG4gICAgcHJvdGVjdGVkIF9zdGF0dXM6IFN0YXR1cyA9IE5vdFN0YXJ0ZWRTdGF0dXM7XHJcbiAgICBwcm90ZWN0ZWQgX3Jlc3VsdHMgPSBnZXRJbml0aWFsQ29sbGVjdGlvbk1vZGVsPG51bWJlciwgUmVzdWx0VW5pdD4oKTtcclxuICAgIHByb3RlY3RlZCBfdG90YWw6IG51bWJlciA9IDA7XHJcblxyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgbWFrZU9ic2VydmFibGU8QmFzZUxpc3RTdG9yZTxSZXN1bHRVbml0PiwgUHJpdmF0ZUZpZWxkcz4odGhpcywge1xyXG4gICAgICAgICAgICBfc3RhdHVzOiBvYnNlcnZhYmxlLnJlZixcclxuICAgICAgICAgICAgX3Jlc3VsdHM6IG9ic2VydmFibGUucmVmLFxyXG4gICAgICAgICAgICBfdG90YWw6IG9ic2VydmFibGUsXHJcblxyXG4gICAgICAgICAgICBzZXRTdGF0dXM6IGFjdGlvbi5ib3VuZCxcclxuICAgICAgICAgICAgc2V0UmVzdWx0UmVxdWVzdDogYWN0aW9uLmJvdW5kLFxyXG4gICAgICAgICAgICBsb2FkaW5nTGlzdDogYWN0aW9uLmJvdW5kLFxyXG5cclxuICAgICAgICAgICAgc3RhdHVzOiBjb21wdXRlZCxcclxuICAgICAgICAgICAgcmVzdWx0czogY29tcHV0ZWQsXHJcbiAgICAgICAgICAgIHRvdGFsOiBjb21wdXRlZCxcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBzZXRTdGF0dXMobmV3U3RhdHVzOiBTdGF0dXMpIHtcclxuICAgICAgICB0aGlzLl9zdGF0dXMgPSB7IC4uLm5ld1N0YXR1cyB9O1xyXG4gICAgfVxyXG5cclxuICAgIHNldFJlc3VsdFJlcXVlc3QobmV3UmVzdWx0TGlzdDogUmVzdWx0VW5pdFtdLCBuZXdUb3RhbDogbnVtYmVyKSB7XHJcbiAgICAgICAgdGhpcy5fcmVzdWx0cyA9IG5vcm1hbGl6ZUNvbGxlY3Rpb24obmV3UmVzdWx0TGlzdCwgKGVsZW1lbnQpID0+IGVsZW1lbnQuaWQpO1xyXG4gICAgICAgIHRoaXMuX3RvdGFsID0gbmV3VG90YWw7XHJcbiAgICB9XHJcblxyXG4gICAgbG9hZGluZ0xpc3QoXHJcbiAgICAgICAgdXJsOiBzdHJpbmcsXHJcbiAgICAgICAgcmVzdWx0c05hbWU6IHN0cmluZyA9ICdyZXN1bHRzJyxcclxuICAgICAgICB0b3RhbE5hbWU6IHN0cmluZyA9ICd0b3RhbFJlc3VsdHMnLFxyXG4gICAgKSB7XHJcbiAgICAgICAgdGhpcy5zZXRTdGF0dXMoTG9hZGluZ1N0YXR1cyk7XHJcbiAgICAgICAgYXhpb3MuZ2V0KHVybClcclxuICAgICAgICAudGhlbigocmVzcCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLnNldFN0YXR1cyhTdWNjZXNzZnVsU3RhdHVzKTtcclxuICAgICAgICAgICAgdGhpcy5zZXRSZXN1bHRSZXF1ZXN0KHJlc3AuZGF0YVtyZXN1bHRzTmFtZV0sIHJlc3AuZGF0YVt0b3RhbE5hbWVdKTtcclxuICAgICAgICB9KVxyXG4gICAgICAgIC5jYXRjaCgoZXJyKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuc2V0U3RhdHVzKGVycm9yU3RhdHVzKGVyci5tZXNzYWdlKSk7XHJcbiAgICAgICAgfSlcclxuICAgIH1cclxuXHJcbiAgICBnZXQgc3RhdHVzKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9zdGF0dXM7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IHJlc3VsdHMoKSB7XHJcbiAgICAgICAgcmV0dXJuIGxpbmVhcml6ZUNvbGxlY3Rpb24odGhpcy5fcmVzdWx0cyk7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IHRvdGFsKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl90b3RhbDtcclxuICAgIH1cclxuXHJcbiAgICBkZXN0cm95KCk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuX3Jlc3VsdHMgPSBnZXRJbml0aWFsQ29sbGVjdGlvbk1vZGVsKCk7XHJcbiAgICAgICAgdGhpcy5fdG90YWwgPSAwO1xyXG4gICAgICAgIHRoaXMuX3N0YXR1cyA9IE5vdFN0YXJ0ZWRTdGF0dXM7XHJcbiAgICB9XHJcbn07IiwiZXhwb3J0IHsgZGVmYXVsdCB9IGZyb20gJy4vQmFzZUxpc3RTdG9yZSc7IiwiaW1wb3J0IHsgdXJsUHJlZml4LCBwYWdlRWxlbWVudENvdW50LCBhcGlLZXkgfSBmcm9tIFwiY29uZmlnL2FwaVwiO1xyXG5pbXBvcnQgeyBSZWNpcGVVbml0LCBSZWNpcGVDb2xsZWN0aW9uVW5pdFR5cGUgfSBmcm9tIFwidHlwZXMvYXBpVHlwZXNcIjtcclxuaW1wb3J0IHsgbm9ybWFsaXplQ29sbGVjdGlvbiB9IGZyb20gXCJ1dGlscy9jb2xsZWN0aW9uXCI7XHJcblxyXG5pbXBvcnQgQmFzZUxpc3RTdG9yZSBmcm9tIFwic3RvcmUvQmFzZUxpc3RTdG9yZVwiO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUmVjaXBlTGlzdFN0b3JlIGV4dGVuZHMgQmFzZUxpc3RTdG9yZTxSZWNpcGVDb2xsZWN0aW9uVW5pdFR5cGU+IHtcclxuXHJcbiAgICBzZXRSZXN1bHRSZXF1ZXN0KG5ld1Jlc3VsdExpc3Q6IFJlY2lwZVVuaXRbXSwgbmV3VG90YWw6IG51bWJlcik6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuX3Jlc3VsdHMgPSBub3JtYWxpemVDb2xsZWN0aW9uKG5ld1Jlc3VsdExpc3QubWFwKChyZWNpcGUpID0+IHtcclxuICAgICAgICAgICAgY29uc3QgcmVjaXBlS2NhbCA9IHJlY2lwZS5udXRyaXRpb24ubnV0cmllbnRzXHJcbiAgICAgICAgICAgICAgICAuZmlsdGVyKChvYmopID0+IG9iai5uYW1lID09PSAnQ2Fsb3JpZXMnKVswXTtcclxuICAgICAgICAgICAgY29uc3Qga2NhbFN0ciA9IFtNYXRoLmNlaWwocmVjaXBlS2NhbC5hbW91bnQpLCByZWNpcGVLY2FsLnVuaXRdLmpvaW4oJyAnKTtcclxuICAgICAgICAgICAgY29uc3QgZGVzY3JpYmVTdHIgPSByZWNpcGUubnV0cml0aW9uLmluZ3JlZGllbnRzLm1hcCgoaW5nKSA9PiBpbmcubmFtZSkuam9pbignICsgJyk7XHJcbiAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICBrY2FsOiBrY2FsU3RyLFxyXG4gICAgICAgICAgICAgICAgZGVzY3JpYmU6IGRlc2NyaWJlU3RyLFxyXG4gICAgICAgICAgICAgICAgLi4ucmVjaXBlXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KSwgKGVsZW1lbnQpID0+IGVsZW1lbnQuaWQpO1xyXG4gICAgICAgIHRoaXMuX3RvdGFsID0gbmV3VG90YWw7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0VXJsKFxyXG4gICAgICAgIG9mZnNldDogc3RyaW5nLCBcclxuICAgICAgICAuLi5vdGhlcjogQXJyYXk8W3N0cmluZywgc3RyaW5nIHwgbnVsbF0+XHJcbiAgICApIHtcclxuICAgICAgICBjb25zdCBwYXJhbXMgPSB7XHJcbiAgICAgICAgICAgIGFkZFJlY2lwZU51dHJpdGlvbjogdHJ1ZSxcclxuICAgICAgICAgICAgbnVtYmVyOiBwYWdlRWxlbWVudENvdW50LFxyXG4gICAgICAgICAgICBvZmZzZXQ6IG9mZnNldCxcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgcGF0aFVybCA9ICdjb21wbGV4U2VhcmNoPyc7XHJcbiAgICAgICAgbGV0IHBhdGhQYXJhbXMgPSBPYmplY3QuZW50cmllcyhwYXJhbXMpLm1hcCgocGFyYW0pID0+IHBhcmFtLmpvaW4oJz0nKSk7XHJcbiAgICAgICAgb3RoZXIuZm9yRWFjaCgoZWxlbWVudCkgPT4ge1xyXG4gICAgICAgICAgICBpZiAoZWxlbWVudFsxXSAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKGVsZW1lbnRbMV0gIT09ICcnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcGF0aFBhcmFtcy5wdXNoKGVsZW1lbnQuam9pbignPScpKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHBhdGhQYXJhbXMucHVzaChbJ2FwaUtleScsIGFwaUtleV0uam9pbignPScpKTtcclxuICAgICAgICBjb25zdCB1cmwgPSB1cmxQcmVmaXggKyAncmVjaXBlcy8nICsgcGF0aFVybCArIFsuLi5wYXRoUGFyYW1zIF0uam9pbignJicpO1xyXG4gICAgICAgIHJldHVybiB1cmw7ICAgICAgICBcclxuICAgIH1cclxufSIsImV4cG9ydCB7IGRlZmF1bHQgfSBmcm9tICcuL1JlY2lwZUxpc3RTdG9yZSc7IiwiXG4gICAgICBpbXBvcnQgQVBJIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICBpbXBvcnQgZG9tQVBJIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRGbiBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanNcIjtcbiAgICAgIGltcG9ydCBzZXRBdHRyaWJ1dGVzIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0U3R5bGVFbGVtZW50IGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzXCI7XG4gICAgICBpbXBvcnQgc3R5bGVUYWdUcmFuc2Zvcm1GbiBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzXCI7XG4gICAgICBpbXBvcnQgY29udGVudCwgKiBhcyBuYW1lZEV4cG9ydCBmcm9tIFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cnVsZVNldFsxXS5ydWxlc1swXS51c2VbMV0hLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Bvc3Rjc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9ydWxlU2V0WzFdLnJ1bGVzWzBdLnVzZVsyXSEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanMhLi9JbnB1dC5tb2R1bGUuc2Nzc1wiO1xuICAgICAgXG4gICAgICBcblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybSA9IHN0eWxlVGFnVHJhbnNmb3JtRm47XG5vcHRpb25zLnNldEF0dHJpYnV0ZXMgPSBzZXRBdHRyaWJ1dGVzO1xub3B0aW9ucy5pbnNlcnQgPSBpbnNlcnRGbi5iaW5kKG51bGwsIFwiaGVhZFwiKTtcbm9wdGlvbnMuZG9tQVBJID0gZG9tQVBJO1xub3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7XG5cbnZhciB1cGRhdGUgPSBBUEkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5leHBvcnQgKiBmcm9tIFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cnVsZVNldFsxXS5ydWxlc1swXS51c2VbMV0hLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Bvc3Rjc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9ydWxlU2V0WzFdLnJ1bGVzWzBdLnVzZVsyXSEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanMhLi9JbnB1dC5tb2R1bGUuc2Nzc1wiO1xuICAgICAgIGV4cG9ydCBkZWZhdWx0IGNvbnRlbnQgJiYgY29udGVudC5sb2NhbHMgPyBjb250ZW50LmxvY2FscyA6IHVuZGVmaW5lZDtcbiIsImltcG9ydCBjbGFzc05hbWVzIGZyb20gJ2NsYXNzbmFtZXMnO1xyXG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCB7IG1lbW8gfSBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCBzdHlsZXMgZnJvbSAnLi9JbnB1dC5tb2R1bGUuc2Nzcyc7XHJcblxyXG5leHBvcnQgdHlwZSBJbnB1dFByb3BzID0gT21pdDxcclxuICBSZWFjdC5JbnB1dEhUTUxBdHRyaWJ1dGVzPEhUTUxJbnB1dEVsZW1lbnQ+LFxyXG4gICdvbkNoYW5nZScgfCAndmFsdWUnXHJcbj4gJiB7XHJcbiAgLyoqINCX0L3QsNGH0LXQvdC40LUg0L/QvtC70Y8gKi9cclxuICB2YWx1ZTogc3RyaW5nO1xyXG4gIC8qKiBDYWxsYmFjaywg0LLRi9C30YvQstCw0LXQvNGL0Lkg0L/RgNC4INCy0LLQvtC00LUg0LTQsNC90L3Ri9GFINCyINC/0L7Qu9C1ICovXHJcbiAgb25DaGFuZ2U6ICh2YWx1ZTogc3RyaW5nKSA9PiB2b2lkO1xyXG4gIC8qKiDQodC70L7RgiDQtNC70Y8g0LjQutC+0L3QutC4INGB0L/RgNCw0LLQsCAqL1xyXG4gIGFmdGVyU2xvdD86IFJlYWN0LlJlYWN0Tm9kZTtcclxufTtcclxuXHJcbmNvbnN0IElucHV0ID0gUmVhY3QuZm9yd2FyZFJlZjxIVE1MSW5wdXRFbGVtZW50LCBJbnB1dFByb3BzPihcclxuICAoe1xyXG4gICAgdmFsdWUsXHJcbiAgICBvbkNoYW5nZSxcclxuICAgIGFmdGVyU2xvdCxcclxuICAgIC4uLnByb3BzXHJcbiAgfSkgPT4ge1xyXG5cclxuICAgIGNvbnN0IG9uQ2hhbmdlRnVuY3Rpb24gPSAoZTogUmVhY3QuQ2hhbmdlRXZlbnQ8SFRNTElucHV0RWxlbWVudD4pID0+IHtcclxuICAgICAgb25DaGFuZ2UoZS50YXJnZXQudmFsdWUpO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiAoXHJcbiAgICAgIDxkaXYgXHJcbiAgICAgICAgY2xhc3NOYW1lPXtjbGFzc05hbWVzKHtcclxuICAgICAgICAgIFtwcm9wcy5jbGFzc05hbWUgfHwgJyddOiB0cnVlLFxyXG4gICAgICAgICAgW3N0eWxlc1snaW5wdXRibG9jayddXTogdHJ1ZSxcclxuICAgICAgICAgIFtzdHlsZXNbJ2lucHV0YmxvY2tfZGlzYWJsZWQnXV06IHByb3BzLmRpc2FibGVkLFxyXG4gICAgICAgIH0pfVxyXG4gICAgICA+XHJcbiAgICAgICAgPGlucHV0IFxyXG4gICAgICAgICAgey4uLnByb3BzfVxyXG4gICAgICAgICAgdmFsdWU9e3ZhbHVlfVxyXG4gICAgICAgICAgb25DaGFuZ2U9e29uQ2hhbmdlRnVuY3Rpb259XHJcbiAgICAgICAgICB0eXBlPSd0ZXh0J1xyXG4gICAgICAgICAgY2xhc3NOYW1lPXtzdHlsZXNbJ2lucHV0YmxvY2tfX2VsZW1lbnQnXX1cclxuICAgICAgICAvPlxyXG4gICAgICAgIHthZnRlclNsb3R9XHJcbiAgICAgIDwvZGl2PlxyXG4gICAgKVxyXG4gIH0pO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgbWVtbyhJbnB1dCk7XHJcbiIsImV4cG9ydCB7IGRlZmF1bHQgfSBmcm9tICcuL0lucHV0JztcclxuZXhwb3J0ICogZnJvbSAnLi9JbnB1dCc7XHJcbiIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0J1xyXG5pbXBvcnQgc3R5bGVzIGZyb20gJ3N0eWxlcy9jdXN0b21TdHlsZXMubW9kdWxlLnNjc3MnO1xyXG5pbXBvcnQgSWNvbiwgeyBJY29uUHJvcHMgfSBmcm9tICcuLi9JY29uJztcclxuXHJcbmNvbnN0IEFycm93RG93bkljb246IFJlYWN0LkZDPEljb25Qcm9wcz4gPSAocHJvcHMpID0+IHtcclxuXHJcbiAgICByZXR1cm4gKFxyXG4gICAgICAgIDxJY29uXHJcbiAgICAgICAgICAgIHN0eWxlPXt7XHJcbiAgICAgICAgICAgICAgICBjdXJzb3I6ICdwb2ludGVyJ1xyXG4gICAgICAgICAgICB9fSBcclxuICAgICAgICAgICAgey4uLnByb3BzfVxyXG4gICAgICAgID5cclxuICAgICAgICAgICAgPHBhdGggXHJcbiAgICAgICAgICAgICAgICBjbGFzc05hbWU9e3N0eWxlc1snaWNvbl9maWxsX2NvbG9yXycgKyAocHJvcHMuY29sb3IgfHwgJ2luaGVyaXQnKV19XHJcbiAgICAgICAgICAgICAgICBmaWxsUnVsZT0nZXZlbm9kZCdcclxuICAgICAgICAgICAgICAgIGNsaXBSdWxlPSdldmVub2RkJyBcclxuICAgICAgICAgICAgICAgIGQ9J00yLjMzNTYzIDguNzQ3NDFMMy42NjQzNiA3LjI1MjU5TDEyIDE0LjY2MkwyMC4zMzU2IDcuMjUyNTlMMjEuNjY0NCA4Ljc0NzQxTDEyIDE3LjMzOEwyLjMzNTYzIDguNzQ3NDFaJyBcclxuICAgICAgICAgICAgLz5cclxuICAgICAgICA8L0ljb24+XHJcbiAgICApXHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IEFycm93RG93bkljb247XHJcbiIsImV4cG9ydCB7IGRlZmF1bHQgfSBmcm9tICcuL0Fycm93RG93bkljb24nO1xyXG4iLCJcbiAgICAgIGltcG9ydCBBUEkgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIjtcbiAgICAgIGltcG9ydCBkb21BUEkgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydEZuIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qc1wiO1xuICAgICAgaW1wb3J0IHNldEF0dHJpYnV0ZXMgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRTdHlsZUVsZW1lbnQgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanNcIjtcbiAgICAgIGltcG9ydCBzdHlsZVRhZ1RyYW5zZm9ybUZuIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanNcIjtcbiAgICAgIGltcG9ydCBjb250ZW50LCAqIGFzIG5hbWVkRXhwb3J0IGZyb20gXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9ydWxlU2V0WzFdLnJ1bGVzWzBdLnVzZVsxXSEuLi8uLi8uLi9ub2RlX21vZHVsZXMvcG9zdGNzcy1sb2FkZXIvZGlzdC9janMuanM/P3J1bGVTZXRbMV0ucnVsZXNbMF0udXNlWzJdIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL011bHRpRHJvcGRvd24ubW9kdWxlLnNjc3NcIjtcbiAgICAgIFxuICAgICAgXG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0gPSBzdHlsZVRhZ1RyYW5zZm9ybUZuO1xub3B0aW9ucy5zZXRBdHRyaWJ1dGVzID0gc2V0QXR0cmlidXRlcztcbm9wdGlvbnMuaW5zZXJ0ID0gaW5zZXJ0Rm4uYmluZChudWxsLCBcImhlYWRcIik7XG5vcHRpb25zLmRvbUFQSSA9IGRvbUFQSTtcbm9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50ID0gaW5zZXJ0U3R5bGVFbGVtZW50O1xuXG52YXIgdXBkYXRlID0gQVBJKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0ICogZnJvbSBcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanM/P3J1bGVTZXRbMV0ucnVsZXNbMF0udXNlWzFdIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9wb3N0Y3NzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cnVsZVNldFsxXS5ydWxlc1swXS51c2VbMl0hLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vTXVsdGlEcm9wZG93bi5tb2R1bGUuc2Nzc1wiO1xuICAgICAgIGV4cG9ydCBkZWZhdWx0IGNvbnRlbnQgJiYgY29udGVudC5sb2NhbHMgPyBjb250ZW50LmxvY2FscyA6IHVuZGVmaW5lZDtcbiIsImltcG9ydCBjbGFzc05hbWVzIGZyb20gJ2NsYXNzbmFtZXMnO1xyXG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCB7IHVzZVN0YXRlLCB1c2VSZWYsIHVzZUVmZmVjdCwgdXNlQ2FsbGJhY2ssIG1lbW8gfSBmcm9tICdyZWFjdCc7XHJcblxyXG5pbXBvcnQgSW5wdXQgZnJvbSAnLi4vSW5wdXQnO1xyXG5pbXBvcnQgVGV4dCBmcm9tICcuLi9UZXh0JztcclxuaW1wb3J0IEFycm93RG93bkljb24gZnJvbSAnLi4vaWNvbnMvQXJyb3dEb3duSWNvbic7XHJcbmltcG9ydCBzdHlsZXMgZnJvbSAnLi9NdWx0aURyb3Bkb3duLm1vZHVsZS5zY3NzJztcclxuXHJcbmV4cG9ydCB0eXBlIE9wdGlvbiA9IHtcclxuICAvKiog0JrQu9GO0Ycg0LLQsNGA0LjQsNC90YLQsCwg0LjRgdC/0L7Qu9GM0LfRg9C10YLRgdGPINC00LvRjyDQvtGC0L/RgNCw0LLQutC4INC90LAg0LHQtdC6L9C40YHQv9C+0LvRjNC30L7QstCw0L3QuNGPINCyINC60L7QtNC1ICovXHJcbiAga2V5OiBzdHJpbmc7XHJcbiAgLyoqINCX0L3QsNGH0LXQvdC40LUg0LLQsNGA0LjQsNC90YLQsCwg0L7RgtC+0LHRgNCw0LbQsNC10YLRgdGPINC/0L7Qu9GM0LfQvtCy0LDRgtC10LvRjiAqL1xyXG4gIHZhbHVlOiBzdHJpbmc7XHJcbn07XHJcblxyXG4vKiog0J/RgNC+0L/RgdGLLCDQutC+0YLQvtGA0YvQtSDQv9GA0LjQvdC40LzQsNC10YIg0LrQvtC80L/QvtC90LXQvdGCIERyb3Bkb3duICovXHJcbmV4cG9ydCB0eXBlIE11bHRpRHJvcGRvd25Qcm9wcyA9IHtcclxuICBjbGFzc05hbWU/OiBzdHJpbmc7XHJcbiAgLyoqINCc0LDRgdGB0LjQsiDQstC+0LfQvNC+0LbQvdGL0YUg0LLQsNGA0LjQsNC90YLQvtCyINC00LvRjyDQstGL0LHQvtGA0LAgKi9cclxuICBvcHRpb25zOiBPcHRpb25bXTtcclxuICAvKiog0KLQtdC60YPRidC40LUg0LLRi9Cx0YDQsNC90L3Ri9C1INC30L3QsNGH0LXQvdC40Y8g0L/QvtC70Y8sINC80L7QttC10YIg0LHRi9GC0Ywg0L/Rg9GB0YLRi9C8ICovXHJcbiAgdmFsdWU6IE9wdGlvbltdO1xyXG4gIC8qKiBDYWxsYmFjaywg0LLRi9C30YvQstCw0LXQvNGL0Lkg0L/RgNC4INCy0YvQsdC+0YDQtSDQstCw0YDQuNCw0L3RgtCwICovXHJcbiAgb25DaGFuZ2U6ICh2YWx1ZTogT3B0aW9uW10pID0+IHZvaWQ7XHJcbiAgLyoqINCX0LDQsdC70L7QutC40YDQvtCy0LDQvSDQu9C4INC00YDQvtC/0LTQsNGD0L0gKi9cclxuICBkaXNhYmxlZD86IGJvb2xlYW47XHJcbiAgLyoqINCS0L7Qt9Cy0YDQsNGJ0LDQtdGCINGB0YLRgNC+0LrRgyDQutC+0YLQvtGA0LDRjyDQsdGD0LTQtdGCINCy0YvQstC+0LTQuNGC0YHRjyDQsiDQuNC90L/Rg9GC0LUuINCSINGB0LvRg9GH0LDQtSDQtdGB0LvQuCDQvtC/0YbQuNC4INC90LUg0LLRi9Cx0YDQsNC90YssINGB0YLRgNC+0LrQsCDQtNC+0LvQttC90LAg0L7RgtC+0LHRgNCw0LbQsNGC0YzRgdGPINC60LDQuiBwbGFjZWhvbGRlci4gKi9cclxuICBnZXRUaXRsZTogKHZhbHVlOiBPcHRpb25bXSkgPT4gc3RyaW5nO1xyXG4gIHNlbGVjdE1vZGU/OiAnT05FJyB8ICdNVUxUSSdcclxufTtcclxuXHJcbmNvbnN0IE11bHRpRHJvcGRvd246IFJlYWN0LkZDPE11bHRpRHJvcGRvd25Qcm9wcz4gPSAocHJvcHMpID0+IHtcclxuXHJcbiAgY29uc3QgW29wZW5lZCwgc2V0T3BlbmVkXSA9IHVzZVN0YXRlKGZhbHNlKTtcclxuICBjb25zdCBbdGl0bGUsIHNldFRpdGxlXSA9IHVzZVN0YXRlKChwcm9wcy52YWx1ZSAmJiBwcm9wcy52YWx1ZS5sZW5ndGgpID8gcHJvcHMuZ2V0VGl0bGUocHJvcHMudmFsdWUpIDogJycpO1xyXG4gIGNvbnN0IFtvcHRpb25MaXN0LCBzZXRPcHRpb25MaXN0XSA9IHVzZVN0YXRlKHByb3BzLm9wdGlvbnMpO1xyXG4gIGNvbnN0IHJlZiA9IHVzZVJlZjxIVE1MRGl2RWxlbWVudCB8IG51bGw+KG51bGwpO1xyXG4gIGNvbnN0IHNlbGVjdE1vZGUgPSBwcm9wcy5zZWxlY3RNb2RlID8gcHJvcHMuc2VsZWN0TW9kZSA6ICdNVUxUSSc7XHJcblxyXG4gIGNvbnN0IGhhbmRsZU91dHNpZGVDbGljayA9IChlOiBNb3VzZUV2ZW50IHwgVG91Y2hFdmVudCkgPT4ge1xyXG4gICAgaWYgKHJlZi5jdXJyZW50ICYmICFyZWYuY3VycmVudC5jb250YWlucyhlLnRhcmdldCBhcyBOb2RlKSkge1xyXG4gICAgICBzZXRPcGVuZWQoZmFsc2UpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgdXNlRWZmZWN0KCgpID0+IHtcclxuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlZG93bicsIGhhbmRsZU91dHNpZGVDbGljayk7XHJcbiAgICByZXR1cm4gKCkgPT4gZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2Vkb3duJywgaGFuZGxlT3V0c2lkZUNsaWNrKTtcclxuICB9LCBbXSk7XHJcblxyXG4gIHVzZUVmZmVjdCgoKSA9PiB7XHJcbiAgICBzZXRUaXRsZSgocHJvcHMudmFsdWUgJiYgcHJvcHMudmFsdWUubGVuZ3RoKSA/IHByb3BzLmdldFRpdGxlKHByb3BzLnZhbHVlKSA6ICcnKTtcclxuICB9LCBbcHJvcHMudmFsdWUsIHByb3BzXSk7XHJcblxyXG4gIHVzZUVmZmVjdCgoKSA9PiB7XHJcbiAgICBzZXRPcHRpb25MaXN0KHByb3BzLm9wdGlvbnMpO1xyXG4gIH0sIFtwcm9wcy5vcHRpb25zLCBwcm9wc10pO1xyXG5cclxuICBjb25zdCBnZXRPcHRpb25MaXN0ID0gdXNlQ2FsbGJhY2soKGNsaWNrVmFsdWU6IE9wdGlvbikgPT4ge1xyXG4gICAgaWYgKCFwcm9wcy52YWx1ZS5tYXAoKGVsKSA9PiBlbC5rZXkpLmluY2x1ZGVzKGNsaWNrVmFsdWUua2V5KSkge1xyXG4gICAgICBpZiAoc2VsZWN0TW9kZSA9PT0gJ01VTFRJJykge1xyXG4gICAgICAgIHByb3BzLm9uQ2hhbmdlKFsuLi5wcm9wcy52YWx1ZSwgY2xpY2tWYWx1ZV0pO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHByb3BzLm9uQ2hhbmdlKFtjbGlja1ZhbHVlXSk7XHJcbiAgICAgIH1cclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHByb3BzLm9uQ2hhbmdlKHByb3BzLnZhbHVlLmZpbHRlcihlbCA9PiBlbC5rZXkgIT09IGNsaWNrVmFsdWUua2V5KSk7XHJcbiAgICB9XHJcbiAgfSwgW3Byb3BzXSk7XHJcblxyXG4gIGNvbnN0IGdldEZpbHRlckxpc3QgPSB1c2VDYWxsYmFjaygodGl0bGU6IHN0cmluZykgPT4ge1xyXG4gICAgaWYgKHRpdGxlICE9PSAnJykge1xyXG4gICAgICBzZXRPcHRpb25MaXN0KG9wdGlvbkxpc3QuZmlsdGVyKChvcHRpb24pID0+IG9wdGlvbi52YWx1ZS5zdGFydHNXaXRoKHRpdGxlKSkpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgc2V0T3B0aW9uTGlzdChwcm9wcy5vcHRpb25zKTtcclxuICAgIH1cclxuICB9LCBbb3B0aW9uTGlzdCwgcHJvcHMub3B0aW9uc10pO1xyXG5cclxuICByZXR1cm4oXHJcbiAgICA8ZGl2IFxyXG4gICAgICByZWY9e3JlZn1cclxuICAgICAgY2xhc3NOYW1lPXtjbGFzc05hbWVzKHtcclxuICAgICAgICBbcHJvcHMuY2xhc3NOYW1lIHx8ICcnXTogdHJ1ZSxcclxuICAgICAgICBbc3R5bGVzWydtdWx0aWRyb3Bkb3duJ11dOiB0cnVlXHJcbiAgICAgIH0pfVxyXG4gICAgPlxyXG4gICAgICA8SW5wdXRcclxuICAgICAgICBvbkNsaWNrPXsoKSA9PiB7XHJcbiAgICAgICAgICBpZiAoIXByb3BzLmRpc2FibGVkKSB7XHJcbiAgICAgICAgICAgIHNldE9wZW5lZCh0cnVlKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9fVxyXG4gICAgICAgIHBsYWNlaG9sZGVyPXtwcm9wcy52YWx1ZS5sZW5ndGggPT09IDAgPyBwcm9wcy5nZXRUaXRsZShwcm9wcy52YWx1ZSkgOiAnJ31cclxuICAgICAgICB2YWx1ZT17dGl0bGV9XHJcbiAgICAgICAgb25DaGFuZ2U9eyhjdXJyVmFsdWU6IHN0cmluZykgPT4geyBcclxuICAgICAgICAgIHNldFRpdGxlKGN1cnJWYWx1ZSk7XHJcbiAgICAgICAgICBnZXRGaWx0ZXJMaXN0KGN1cnJWYWx1ZSk7XHJcbiAgICAgICAgfX1cclxuICAgICAgICBhZnRlclNsb3Q9ezxBcnJvd0Rvd25JY29uIGNvbG9yPSdzZWNvbmRhcnknIG9uQ2xpY2s9eygpID0+IHtcclxuICAgICAgICAgIGlmICghcHJvcHMuZGlzYWJsZWQpIHtcclxuICAgICAgICAgICAgc2V0T3BlbmVkKCFvcGVuZWQpO1xyXG4gICAgICAgICAgfSBcclxuICAgICAgICB9fSAvPn1cclxuICAgICAgLz5cclxuICAgICAgeyhvcGVuZWQgJiYgIXByb3BzLmRpc2FibGVkKSAmJlxyXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPXtzdHlsZXNbJ211bHRpZHJvcGRvd25fX29wdGlvbnMnXX0+XHJcbiAgICAgICAgICB7b3B0aW9uTGlzdC5tYXAoKG9wdGlvbikgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCBoYW5kbGVDaGFuZ2UgPSAoKSA9PiB7IGdldE9wdGlvbkxpc3Qob3B0aW9uKSB9XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gKFxyXG4gICAgICAgICAgICAgIDxkaXZcclxuICAgICAgICAgICAgICAgIGtleT17b3B0aW9uLmtleX1cclxuICAgICAgICAgICAgICAgIG9uQ2xpY2s9e2hhbmRsZUNoYW5nZX1cclxuICAgICAgICAgICAgICAgIGNsYXNzTmFtZT17Y2xhc3NOYW1lcyh7XHJcbiAgICAgICAgICAgICAgICAgIFtzdHlsZXNbJ211bHRpZHJvcGRvd25fX29wdGlvbnNfX29wdGlvbiddXTogdHJ1ZSxcclxuICAgICAgICAgICAgICAgICAgW3N0eWxlc1snbXVsdGlkcm9wZG93bl9fb3B0aW9uc19fb3B0aW9uX3NlbGVjdGVkJ11dOiBwcm9wcy52YWx1ZS5tYXAoKGVsKSA9PiBlbC5rZXkpLmluY2x1ZGVzKG9wdGlvbi5rZXkpLFxyXG4gICAgICAgICAgICAgICAgfSl9XHJcbiAgICAgICAgICAgICAgPlxyXG4gICAgICAgICAgICAgICAgPFRleHQgdGFnPSdzcGFuJyB2aWV3PSdwLTE2Jz57b3B0aW9uLnZhbHVlfTwvVGV4dD5cclxuICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgKVxyXG4gICAgICAgICAgfSl9XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICAgIH1cclxuICAgIDwvZGl2PlxyXG4gIClcclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IG1lbW8oTXVsdGlEcm9wZG93bik7XHJcbiIsImV4cG9ydCB7IGRlZmF1bHQgfSBmcm9tICcuL011bHRpRHJvcGRvd24nO1xyXG5leHBvcnQgKiBmcm9tICcuL011bHRpRHJvcGRvd24nO1xyXG4iLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCdcclxuaW1wb3J0IEljb24sIHsgSWNvblByb3BzIH0gZnJvbSAnLi4vSWNvbic7XHJcblxyXG5cclxuY29uc3QgU2VhcmNoSWNvbjogUmVhY3QuRkM8SWNvblByb3BzPiA9IChwcm9wcykgPT4ge1xyXG5cclxuICAgIHJldHVybiAoXHJcbiAgICAgICAgPEljb24gXHJcbiAgICAgICAgICAgIHsuLi5wcm9wc31cclxuICAgICAgICAgICAgdmlld0JveD0nMCAwIDI1IDI0J1xyXG4gICAgICAgID5cclxuICAgICAgICAgICAgPGcgY2xpcFBhdGg9XCJ1cmwoI2NsaXAwXzUwNV82NjIpXCI+XHJcbiAgICAgICAgICAgIDxwYXRoIGQ9XCJNMTYgMTRIMTUuMjFMMTQuOTMgMTMuNzNDMTUuOTEgMTIuNTkgMTYuNSAxMS4xMSAxNi41IDkuNUMxNi41IDUuOTEgMTMuNTkgMyAxMCAzQzYuNDEgMyAzLjUgNS45MSAzLjUgOS41QzMuNSAxMy4wOSA2LjQxIDE2IDEwIDE2QzExLjYxIDE2IDEzLjA5IDE1LjQxIDE0LjIzIDE0LjQzTDE0LjUgMTQuNzFWMTUuNUwxOS41IDIwLjQ5TDIwLjk5IDE5TDE2IDE0Wk0xMCAxNEM3LjUxIDE0IDUuNSAxMS45OSA1LjUgOS41QzUuNSA3LjAxIDcuNTEgNSAxMCA1QzEyLjQ5IDUgMTQuNSA3LjAxIDE0LjUgOS41QzE0LjUgMTEuOTkgMTIuNDkgMTQgMTAgMTRaXCIgZmlsbD1cIndoaXRlXCIvPlxyXG4gICAgICAgICAgICA8L2c+XHJcbiAgICAgICAgICAgIDxkZWZzPlxyXG4gICAgICAgICAgICA8Y2xpcFBhdGggaWQ9XCJjbGlwMF81MDVfNjYyXCI+XHJcbiAgICAgICAgICAgIDxyZWN0IHdpZHRoPVwiMjRcIiBoZWlnaHQ9XCIyNFwiIGZpbGw9XCJ3aGl0ZVwiIHRyYW5zZm9ybT1cInRyYW5zbGF0ZSgwLjUpXCIvPlxyXG4gICAgICAgICAgICA8L2NsaXBQYXRoPlxyXG4gICAgICAgICAgICA8L2RlZnM+XHJcbiAgICAgICAgPC9JY29uPlxyXG4gICAgKVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBTZWFyY2hJY29uO1xyXG4iLCJleHBvcnQgeyBkZWZhdWx0IH0gZnJvbSAnLi9TZWFyY2hJY29uJzsiLCJpbXBvcnQgeyBhY3Rpb24sIGNvbXB1dGVkLCBtYWtlT2JzZXJ2YWJsZSwgb2JzZXJ2YWJsZSB9IGZyb20gXCJtb2J4XCI7XHJcbmltcG9ydCB7IE9wdGlvbiB9IGZyb20gXCJjb21wb25lbnRzL011bHRpRHJvcGRvd25cIjtcclxuaW1wb3J0IHsgSUxvY2FsU3RvcmUgfSBmcm9tIFwiaG9va3MvdXNlTG9jYWxTdG9yZVwiO1xyXG5cclxudHlwZSBQcml2YXRlRmllbGRzID0gXHJcbiAgICAnX3NlYXJjaEZpZWxkJyB8IFxyXG4gICAgJ19jYXRlZ29yeScgfCBcclxuICAgICdfdmlzaWJpbGl0eScgfFxyXG4gICAgJ19pdGVtU2luZ2xlTGlzdCcgfFxyXG4gICAgJ19pdGVtTWluTWF4TGlzdCcgfFxyXG4gICAgJ19pdGVtT3B0aW9uTGlzdCcgfFxyXG4gICAgJ19pdGVtSW5kZXhMaXN0JztcclxuXHJcbmV4cG9ydCB0eXBlIEZpbHRlckl0ZW1UeXBlcyA9IFxyXG4gICAgJ1NUUklORycgfCBcclxuICAgICdOVU1CRVInIHwgXHJcbiAgICAnQk9PTEVBTicgfCBcclxuICAgICdNSU5NQVgnIHxcclxuICAgICdPUFRJT04nO1xyXG5cclxuZXhwb3J0IHR5cGUgRmlsdGVyU3RvcmVDb25maWdUeXBlID0ge1xyXG4gICAgW2tleTogc3RyaW5nXTogRmlsdGVySXRlbVR5cGVzXHJcbn1cclxuXHJcbnR5cGUgRmlsdGVyU2luZ2xlSXRlbVR5cGUgPSBzdHJpbmc7XHJcbnR5cGUgRmlsdGVyTWluTWF4SXRlbVR5cGUgPSBbc3RyaW5nLCBzdHJpbmddO1xyXG50eXBlIEZpbHRlck9wdGlvbkl0ZW1UeXBlID0gT3B0aW9uW107XHJcblxyXG50eXBlIEZpbHRlckl0ZW1Qb2ludExpc3RUeXBlID0ge1xyXG4gICAgW2tleTogc3RyaW5nXToge1xyXG4gICAgICAgIHBvaW50OiBudW1iZXIsXHJcbiAgICAgICAgdHlwZTogRmlsdGVySXRlbVR5cGVzXHJcbiAgICB9LFxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBGaWx0ZXJTdG9yZSBpbXBsZW1lbnRzIElMb2NhbFN0b3JlIHtcclxuICAgIHByaXZhdGUgX3NlYXJjaEZpZWxkID0gJyc7XHJcbiAgICBwcml2YXRlIF9jYXRlZ29yeTogQXJyYXk8T3B0aW9uPiA9IFtdO1xyXG4gICAgcHJpdmF0ZSBfdmlzaWJpbGl0eTogYm9vbGVhbiA9IGZhbHNlO1xyXG5cclxuICAgIHByaXZhdGUgX2l0ZW1JbmRleExpc3Q6IEZpbHRlckl0ZW1Qb2ludExpc3RUeXBlID0ge307XHJcbiAgICBwcml2YXRlIF9pdGVtU2luZ2xlTGlzdDogRmlsdGVyU2luZ2xlSXRlbVR5cGVbXSA9IFtdO1xyXG4gICAgcHJpdmF0ZSBfaXRlbU1pbk1heExpc3Q6IEZpbHRlck1pbk1heEl0ZW1UeXBlW10gPSBbXTtcclxuICAgIHByaXZhdGUgX2l0ZW1PcHRpb25MaXN0OiBGaWx0ZXJPcHRpb25JdGVtVHlwZVtdID0gW107XHJcblxyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgbWFrZU9ic2VydmFibGU8RmlsdGVyU3RvcmUsIFByaXZhdGVGaWVsZHM+KHRoaXMsIHtcclxuICAgICAgICAgICAgX3NlYXJjaEZpZWxkOiBvYnNlcnZhYmxlLFxyXG4gICAgICAgICAgICBfY2F0ZWdvcnk6IG9ic2VydmFibGUucmVmLFxyXG4gICAgICAgICAgICBfdmlzaWJpbGl0eTogb2JzZXJ2YWJsZS5yZWYsXHJcbiAgICAgICAgICAgIF9pdGVtSW5kZXhMaXN0OiBvYnNlcnZhYmxlLnJlZixcclxuICAgICAgICAgICAgX2l0ZW1TaW5nbGVMaXN0OiBvYnNlcnZhYmxlLnJlZixcclxuICAgICAgICAgICAgX2l0ZW1NaW5NYXhMaXN0OiBvYnNlcnZhYmxlLnJlZixcclxuICAgICAgICAgICAgX2l0ZW1PcHRpb25MaXN0OiBvYnNlcnZhYmxlLnJlZixcclxuXHJcbiAgICAgICAgICAgIHNldFNlYXJjaDogYWN0aW9uLmJvdW5kLFxyXG4gICAgICAgICAgICBzZXRDYXRlZ29yeTogYWN0aW9uLmJvdW5kLFxyXG4gICAgICAgICAgICBzZXRWaXNpYmlsaXR5OiBhY3Rpb24uYm91bmQsXHJcblxyXG4gICAgICAgICAgICBzZXRTaW5nbGVJdGVtVmFsdWU6IGFjdGlvbi5ib3VuZCxcclxuICAgICAgICAgICAgc2V0TWluTWF4SXRlbVZhbHVlOiBhY3Rpb24uYm91bmQsXHJcbiAgICAgICAgICAgIHNldE9wdGlvbkl0ZW1WYWx1ZTogYWN0aW9uLmJvdW5kLFxyXG4gICAgICAgICAgICBhZGRNaW5NYXhJdGVtOiBhY3Rpb24uYm91bmQsXHJcbiAgICAgICAgICAgIGNvbmZpZ0ZpbHRlcnM6IGFjdGlvbi5ib3VuZCxcclxuXHJcbiAgICAgICAgICAgIHNlYXJjaEZpZWxkOiBjb21wdXRlZCxcclxuICAgICAgICAgICAgY2F0ZWdvcnk6IGNvbXB1dGVkLFxyXG4gICAgICAgICAgICB2aXNpYmlsaXR5OiBjb21wdXRlZCxcclxuICAgICAgICAgICAgaXNFbXB0eTogY29tcHV0ZWQsXHJcbiAgICAgICAgICAgIG9wdGlvbnM6IGNvbXB1dGVkLFxyXG4gICAgICAgICAgICBtaW5NYXhlczogY29tcHV0ZWQsXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgY29uZmlnRmlsdGVycyhmaWx0ZXJzOiBGaWx0ZXJTdG9yZUNvbmZpZ1R5cGUpIHtcclxuICAgICAgICBPYmplY3QuZW50cmllcyhmaWx0ZXJzKS5mb3JFYWNoKChba2V5LCB2YWx1ZV0pID0+IHtcclxuICAgICAgICAgICAgaWYgKHZhbHVlICE9PSAnT1BUSU9OJyAmJiB2YWx1ZSAhPT0gJ01JTk1BWCcpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2l0ZW1TaW5nbGVMaXN0LnB1c2goJycpO1xyXG4gICAgICAgICAgICAgICAgT2JqZWN0LmFzc2lnbih0aGlzLl9pdGVtSW5kZXhMaXN0LCB7XHJcbiAgICAgICAgICAgICAgICAgICAgW2tleV06IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcG9pbnQ6IHRoaXMuX2l0ZW1TaW5nbGVMaXN0Lmxlbmd0aCAtIDEsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IHZhbHVlXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodmFsdWUgIT09ICdNSU5NQVgnKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9pdGVtT3B0aW9uTGlzdC5wdXNoKFtdKTtcclxuICAgICAgICAgICAgICAgIE9iamVjdC5hc3NpZ24odGhpcy5faXRlbUluZGV4TGlzdCwge1xyXG4gICAgICAgICAgICAgICAgICAgIFtrZXldOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBvaW50OiB0aGlzLl9pdGVtT3B0aW9uTGlzdC5sZW5ndGggLSAxLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiB2YWx1ZVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgY29uc29sZS5sb2codGhpcy5faXRlbU9wdGlvbkxpc3QsIHRoaXMuX2l0ZW1JbmRleExpc3QpO1xyXG4gICAgfVxyXG5cclxuICAgIHNldFNlYXJjaChuZXdWYWx1ZTogc3RyaW5nKSB7XHJcbiAgICAgICAgdGhpcy5fc2VhcmNoRmllbGQgPSBuZXdWYWx1ZTtcclxuICAgIH1cclxuXHJcbiAgICBzZXRDYXRlZ29yeShuZXdWYWx1ZTogQXJyYXk8T3B0aW9uPikge1xyXG4gICAgICAgIHRoaXMuX2NhdGVnb3J5ID0gbmV3VmFsdWU7XHJcbiAgICB9XHJcblxyXG4gICAgc2V0VmlzaWJpbGl0eShuZXdWYWx1ZTogYm9vbGVhbikge1xyXG4gICAgICAgIHRoaXMuX3Zpc2liaWxpdHkgPSBuZXdWYWx1ZTtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgc2VhcmNoRmllbGQoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3NlYXJjaEZpZWxkO1xyXG4gICAgfVxyXG5cclxuICAgIGdldCBjYXRlZ29yeSgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fY2F0ZWdvcnk7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IHZpc2liaWxpdHkoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3Zpc2liaWxpdHk7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IGlzRW1wdHkoKSB7XHJcbiAgICAgICAgcmV0dXJuIE9iamVjdC5rZXlzKHRoaXMuX2l0ZW1JbmRleExpc3QpLmxlbmd0aCA9PT0gMDtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgb3B0aW9ucygpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5faXRlbU9wdGlvbkxpc3Q7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IG1pbk1heGVzKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9pdGVtTWluTWF4TGlzdDtcclxuICAgIH1cclxuXHJcbiAgICBnZXRTaW5nbGVJdGVtVmFsdWUobmFtZTogc3RyaW5nKTogc3RyaW5nIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5faXRlbVNpbmdsZUxpc3RbdGhpcy5faXRlbUluZGV4TGlzdFtuYW1lXS5wb2ludF0gfHwgJyc7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0TWluTWF4SXRlbVZhbHVlKG5hbWU6IHN0cmluZyk6IFtzdHJpbmcsIHN0cmluZ10ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9pdGVtTWluTWF4TGlzdFt0aGlzLl9pdGVtSW5kZXhMaXN0W25hbWVdLnBvaW50XSB8fCBbJycsICcnXTtcclxuICAgIH1cclxuXHJcbiAgICBnZXRPcHRpb25JdGVtVmFsdWUobmFtZTogc3RyaW5nKTogT3B0aW9uW10ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9pdGVtT3B0aW9uTGlzdFt0aGlzLl9pdGVtSW5kZXhMaXN0W25hbWVdLnBvaW50XSB8fCBbXTtcclxuICAgIH1cclxuXHJcbiAgICBpc1NpbmdsZShuYW1lOiBzdHJpbmcpOiBib29sZWFuIHtcclxuICAgICAgICByZXR1cm4gKFxyXG4gICAgICAgICAgICB0aGlzLl9pdGVtSW5kZXhMaXN0W25hbWVdLnR5cGUgIT09ICdPUFRJT04nICYmXHJcbiAgICAgICAgICAgIHRoaXMuX2l0ZW1JbmRleExpc3RbbmFtZV0udHlwZSAhPT0gJ01JTk1BWCdcclxuICAgICAgICApXHJcbiAgICB9XHJcblxyXG4gICAgc2V0U2luZ2xlSXRlbVZhbHVlKG5hbWU6IHN0cmluZywgdmFsdWU6IHN0cmluZykge1xyXG4gICAgICAgIGlmICh0aGlzLl9pdGVtSW5kZXhMaXN0Lmhhc093blByb3BlcnR5KG5hbWUpKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGl0ZW1Qb2ludCA9IHRoaXMuX2l0ZW1JbmRleExpc3RbbmFtZV0ucG9pbnQ7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmlzU2luZ2xlKG5hbWUpKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9pdGVtU2luZ2xlTGlzdFtpdGVtUG9pbnRdID0gdmFsdWU7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9pdGVtU2luZ2xlTGlzdCA9IFsgLi4udGhpcy5faXRlbVNpbmdsZUxpc3QgXTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLl9pdGVtU2luZ2xlTGlzdCA9IFsgLi4udGhpcy5faXRlbVNpbmdsZUxpc3QgXTtcclxuICAgIH1cclxuXHJcbiAgICBzZXRNaW5NYXhJdGVtVmFsdWUobmFtZTogc3RyaW5nLCB2YWx1ZTogc3RyaW5nLCBwb3NpdGlvbjogbnVtYmVyKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuX2l0ZW1JbmRleExpc3QuaGFzT3duUHJvcGVydHkobmFtZSkpIHtcclxuICAgICAgICAgICAgY29uc3QgaXRlbVBvaW50ID0gdGhpcy5faXRlbUluZGV4TGlzdFtuYW1lXS5wb2ludDtcclxuICAgICAgICAgICAgaWYgKHRoaXMuX2l0ZW1JbmRleExpc3RbbmFtZV0udHlwZSA9PT0gJ01JTk1BWCcpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2l0ZW1NaW5NYXhMaXN0W2l0ZW1Qb2ludF1bcG9zaXRpb25dID0gdmFsdWU7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9pdGVtTWluTWF4TGlzdCA9IFsgLi4udGhpcy5faXRlbU1pbk1heExpc3QgXTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLl9pdGVtTWluTWF4TGlzdCA9IFsgLi4udGhpcy5faXRlbU1pbk1heExpc3QgXTtcclxuICAgIH1cclxuXHJcbiAgICBhZGRNaW5NYXhJdGVtKG5hbWU6IHN0cmluZykge1xyXG4gICAgICAgIHRoaXMuX2l0ZW1NaW5NYXhMaXN0LnB1c2goWycnLCAnJ10pO1xyXG4gICAgICAgIE9iamVjdC5hc3NpZ24odGhpcy5faXRlbUluZGV4TGlzdCwge1xyXG4gICAgICAgICAgICBbbmFtZV06IHtcclxuICAgICAgICAgICAgICAgIHBvaW50OiB0aGlzLl9pdGVtTWluTWF4TGlzdC5sZW5ndGggLSAxLFxyXG4gICAgICAgICAgICAgICAgdHlwZTogJ01JTk1BWCdcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRoaXMuX2l0ZW1NaW5NYXhMaXN0ID0gWyAuLi50aGlzLl9pdGVtTWluTWF4TGlzdCBdO1xyXG4gICAgICAgIHRoaXMuX2l0ZW1JbmRleExpc3QgPSB7IC4uLnRoaXMuX2l0ZW1JbmRleExpc3QgfTtcclxuICAgIH1cclxuXHJcbiAgICBzZXRPcHRpb25JdGVtVmFsdWUobmFtZTogc3RyaW5nLCB2YWx1ZTogT3B0aW9uW10pIHtcclxuICAgICAgICBpZiAodGhpcy5faXRlbUluZGV4TGlzdC5oYXNPd25Qcm9wZXJ0eShuYW1lKSkge1xyXG4gICAgICAgICAgICBjb25zdCBpdGVtUG9pbnQgPSB0aGlzLl9pdGVtSW5kZXhMaXN0W25hbWVdLnBvaW50O1xyXG4gICAgICAgICAgICBpZiAodGhpcy5faXRlbUluZGV4TGlzdFtuYW1lXS50eXBlID09PSAnT1BUSU9OJykge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5faXRlbU9wdGlvbkxpc3RbaXRlbVBvaW50XSA9IFsgLi4udmFsdWUgXTtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2l0ZW1PcHRpb25MaXN0ID0gWyAuLi50aGlzLl9pdGVtT3B0aW9uTGlzdCBdO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuX2l0ZW1PcHRpb25MaXN0ID0gWyAuLi50aGlzLl9pdGVtT3B0aW9uTGlzdCBdO1xyXG4gICAgfVxyXG5cclxuICAgIGRlc3Ryb3koKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5fc2VhcmNoRmllbGQgPSAnJztcclxuICAgICAgICB0aGlzLl9jYXRlZ29yeSA9IFtdO1xyXG4gICAgICAgIHRoaXMuX3Zpc2liaWxpdHkgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLl9pdGVtU2luZ2xlTGlzdCA9IFtdO1xyXG4gICAgICAgIHRoaXMuX2l0ZW1NaW5NYXhMaXN0ID0gW107XHJcbiAgICAgICAgdGhpcy5faXRlbU9wdGlvbkxpc3QgPSBbXTtcclxuICAgICAgICB0aGlzLl9pdGVtSW5kZXhMaXN0ID0ge307XHJcbiAgICB9XHJcbn1cclxuIiwiXG4gICAgICBpbXBvcnQgQVBJIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICBpbXBvcnQgZG9tQVBJIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRGbiBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanNcIjtcbiAgICAgIGltcG9ydCBzZXRBdHRyaWJ1dGVzIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0U3R5bGVFbGVtZW50IGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzXCI7XG4gICAgICBpbXBvcnQgc3R5bGVUYWdUcmFuc2Zvcm1GbiBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzXCI7XG4gICAgICBpbXBvcnQgY29udGVudCwgKiBhcyBuYW1lZEV4cG9ydCBmcm9tIFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cnVsZVNldFsxXS5ydWxlc1swXS51c2VbMV0hLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Bvc3Rjc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9ydWxlU2V0WzFdLnJ1bGVzWzBdLnVzZVsyXSEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanMhLi9Db250ZW50RmlsdGVycy5tb2R1bGUuc2Nzc1wiO1xuICAgICAgXG4gICAgICBcblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybSA9IHN0eWxlVGFnVHJhbnNmb3JtRm47XG5vcHRpb25zLnNldEF0dHJpYnV0ZXMgPSBzZXRBdHRyaWJ1dGVzO1xub3B0aW9ucy5pbnNlcnQgPSBpbnNlcnRGbi5iaW5kKG51bGwsIFwiaGVhZFwiKTtcbm9wdGlvbnMuZG9tQVBJID0gZG9tQVBJO1xub3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7XG5cbnZhciB1cGRhdGUgPSBBUEkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5leHBvcnQgKiBmcm9tIFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cnVsZVNldFsxXS5ydWxlc1swXS51c2VbMV0hLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Bvc3Rjc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9ydWxlU2V0WzFdLnJ1bGVzWzBdLnVzZVsyXSEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanMhLi9Db250ZW50RmlsdGVycy5tb2R1bGUuc2Nzc1wiO1xuICAgICAgIGV4cG9ydCBkZWZhdWx0IGNvbnRlbnQgJiYgY29udGVudC5sb2NhbHMgPyBjb250ZW50LmxvY2FscyA6IHVuZGVmaW5lZDtcbiIsIlxuICAgICAgaW1wb3J0IEFQSSBmcm9tIFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiO1xuICAgICAgaW1wb3J0IGRvbUFQSSBmcm9tIFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0Rm4gZnJvbSBcIiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzXCI7XG4gICAgICBpbXBvcnQgc2V0QXR0cmlidXRlcyBmcm9tIFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydFN0eWxlRWxlbWVudCBmcm9tIFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qc1wiO1xuICAgICAgaW1wb3J0IHN0eWxlVGFnVHJhbnNmb3JtRm4gZnJvbSBcIiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qc1wiO1xuICAgICAgaW1wb3J0IGNvbnRlbnQsICogYXMgbmFtZWRFeHBvcnQgZnJvbSBcIiEhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanM/P3J1bGVTZXRbMV0ucnVsZXNbMF0udXNlWzFdIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9wb3N0Y3NzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cnVsZVNldFsxXS5ydWxlc1swXS51c2VbMl0hLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vRmlsdGVyLm1vZHVsZS5zY3NzXCI7XG4gICAgICBcbiAgICAgIFxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtID0gc3R5bGVUYWdUcmFuc2Zvcm1Gbjtcbm9wdGlvbnMuc2V0QXR0cmlidXRlcyA9IHNldEF0dHJpYnV0ZXM7XG5vcHRpb25zLmluc2VydCA9IGluc2VydEZuLmJpbmQobnVsbCwgXCJoZWFkXCIpO1xub3B0aW9ucy5kb21BUEkgPSBkb21BUEk7XG5vcHRpb25zLmluc2VydFN0eWxlRWxlbWVudCA9IGluc2VydFN0eWxlRWxlbWVudDtcblxudmFyIHVwZGF0ZSA9IEFQSShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbmV4cG9ydCAqIGZyb20gXCIhIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9ydWxlU2V0WzFdLnJ1bGVzWzBdLnVzZVsxXSEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvcG9zdGNzcy1sb2FkZXIvZGlzdC9janMuanM/P3J1bGVTZXRbMV0ucnVsZXNbMF0udXNlWzJdIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL0ZpbHRlci5tb2R1bGUuc2Nzc1wiO1xuICAgICAgIGV4cG9ydCBkZWZhdWx0IGNvbnRlbnQgJiYgY29udGVudC5sb2NhbHMgPyBjb250ZW50LmxvY2FscyA6IHVuZGVmaW5lZDtcbiIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gXCJyZWFjdFwiO1xyXG5pbXBvcnQgc3R5bGVzIGZyb20gJy4vRmlsdGVyLm1vZHVsZS5zY3NzJztcclxuXHJcbmltcG9ydCBUZXh0IGZyb20gXCJjb21wb25lbnRzL1RleHRcIjtcclxuXHJcbmludGVyZmFjZSBGaWx0ZXJQcm9wcyB7XHJcbiAgICBuYW1lOiBzdHJpbmcsXHJcbiAgICBjaGlsZHJlbjogUmVhY3QuUmVhY3ROb2RlLFxyXG59XHJcblxyXG5jb25zdCBGaWx0ZXI6IFJlYWN0LkZDPEZpbHRlclByb3BzPiA9IChwcm9wcykgPT4ge1xyXG5cclxuICAgIHJldHVybiAoXHJcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9e3N0eWxlc1snZmlsdGVyJ119PlxyXG4gICAgICAgICAgICA8VGV4dCB2aWV3PSdwLTE2JyB3ZWlnaHQ9J2JvbGQnPlxyXG4gICAgICAgICAgICAgICAge3Byb3BzLm5hbWV9XHJcbiAgICAgICAgICAgIDwvVGV4dD5cclxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9e3N0eWxlc1snZmlsdGVyX19mb3JtJ119PlxyXG4gICAgICAgICAgICAgICAge3Byb3BzLmNoaWxkcmVufVxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICA8L2Rpdj5cclxuICAgIClcclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgRmlsdGVyOyIsImV4cG9ydCB7IGRlZmF1bHQgfSBmcm9tICcuL0ZpbHRlcic7IiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSBcInJlYWN0XCI7XHJcbmltcG9ydCB7IE11bHRpU3RyaW5nRmlsdGVyVHlwZSB9IGZyb20gXCJ0eXBlcy9maWx0ZXJUeXBlc1wiO1xyXG5pbXBvcnQgRmlsdGVyIGZyb20gXCIuLi9GaWx0ZXJcIjtcclxuXHJcbmltcG9ydCBNdWx0aURyb3Bkb3duLCB7IE11bHRpRHJvcGRvd25Qcm9wcyB9IGZyb20gXCJjb21wb25lbnRzL011bHRpRHJvcGRvd25cIjtcclxuXHJcbmNvbnN0IE11bHRpU3RyaW5nRmlsdGVyOiBSZWFjdC5GQzxNdWx0aVN0cmluZ0ZpbHRlclR5cGUgJiBNdWx0aURyb3Bkb3duUHJvcHM+ID0gKHByb3BzKSA9PiB7XHJcblxyXG4gICAgY29uc3QgeyBcclxuICAgICAgICBmaWx0ZXJOYW1lLFxyXG4gICAgICAgIC4uLm11bHRpUHJvcHNcclxuICAgIH0gPSBwcm9wcztcclxuXHJcbiAgICByZXR1cm4gKFxyXG4gICAgICAgIDxGaWx0ZXIgbmFtZT17ZmlsdGVyTmFtZX0+XHJcbiAgICAgICAgICAgIDxNdWx0aURyb3Bkb3duIHsuLi5tdWx0aVByb3BzfSAvPlxyXG4gICAgICAgIDwvRmlsdGVyPlxyXG4gICAgKVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBNdWx0aVN0cmluZ0ZpbHRlcjsiLCJleHBvcnQgeyBkZWZhdWx0IH0gZnJvbSAnLi9NdWx0aVN0cmluZ0ZpbHRlcic7IiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSBcInJlYWN0XCI7XHJcbmltcG9ydCBGaWx0ZXIgZnJvbSBcIi4uL0ZpbHRlclwiO1xyXG5pbXBvcnQgeyBTdHJpbmdGaWx0ZXJUeXBlIH0gZnJvbSBcInR5cGVzL2ZpbHRlclR5cGVzXCI7XHJcblxyXG5pbXBvcnQgSW5wdXQsIHsgSW5wdXRQcm9wcyB9IGZyb20gXCJjb21wb25lbnRzL0lucHV0XCI7XHJcbmltcG9ydCBUZXh0IGZyb20gXCJjb21wb25lbnRzL1RleHRcIjtcclxuXHJcbmNvbnN0IFN0cmluZ0ZpbHRlcjogUmVhY3QuRkM8U3RyaW5nRmlsdGVyVHlwZSAmIElucHV0UHJvcHM+ID0gKHByb3BzKSA9PiB7XHJcblxyXG4gICAgY29uc3QgeyBcclxuICAgICAgICBmaWx0ZXJOYW1lLCBcclxuICAgICAgICBmaWx0ZXJTZXR0aW5ncyxcclxuICAgICAgICAuLi5pbnB1dFByb3BzXHJcbiAgICB9ID0gcHJvcHM7XHJcblxyXG4gICAgcmV0dXJuIChcclxuICAgICAgICA8RmlsdGVyIG5hbWU9e2ZpbHRlck5hbWV9PlxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImZpbHRlci1zdHJpbmdcIj5cclxuICAgICAgICAgICAgICAgIDxJbnB1dCB7Li4uaW5wdXRQcm9wc30gLz5cclxuICAgICAgICAgICAgICAgIDxUZXh0IGNvbG9yPSdzZWNvbmRhcnknPlxyXG4gICAgICAgICAgICAgICAgICAgIHtmaWx0ZXJTZXR0aW5ncy5oZWxwfVxyXG4gICAgICAgICAgICAgICAgPC9UZXh0PlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICA8L0ZpbHRlcj5cclxuICAgIClcclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgU3RyaW5nRmlsdGVyOyIsImV4cG9ydCB7IGRlZmF1bHQgfSBmcm9tICcuL1N0cmluZ0ZpbHRlcic7IiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSBcInJlYWN0XCI7XHJcbmltcG9ydCBGaWx0ZXIgZnJvbSBcIi4uL0ZpbHRlclwiO1xyXG5pbXBvcnQgeyBOdW1iZXJGaWx0ZXJUeXBlIH0gZnJvbSBcInR5cGVzL2ZpbHRlclR5cGVzXCI7XHJcblxyXG5pbXBvcnQgSW5wdXQsIHsgSW5wdXRQcm9wcyB9IGZyb20gXCJjb21wb25lbnRzL0lucHV0XCI7XHJcbmltcG9ydCBUZXh0IGZyb20gXCJjb21wb25lbnRzL1RleHRcIjtcclxuXHJcbmNvbnN0IE51bWJlckZpbHRlcjogUmVhY3QuRkM8TnVtYmVyRmlsdGVyVHlwZSAmIElucHV0UHJvcHM+ID0gKHByb3BzKSA9PiB7XHJcblxyXG4gICAgY29uc3QgeyBcclxuICAgICAgICBmaWx0ZXJOYW1lLCBcclxuICAgICAgICBmaWx0ZXJTZXR0aW5ncywgXHJcbiAgICAgICAgLi4uaW5wdXRQcm9wcyBcclxuICAgIH0gPSBwcm9wcztcclxuXHJcbiAgICByZXR1cm4gKFxyXG4gICAgICAgIDxGaWx0ZXIgbmFtZT17ZmlsdGVyTmFtZX0+XHJcbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZmlsdGVyLW51bWJlclwiPlxyXG4gICAgICAgICAgICAgICAgPElucHV0IHsuLi5pbnB1dFByb3BzfSB0eXBlPSdudW1iZXInIC8+XHJcbiAgICAgICAgICAgICAgICA8VGV4dCBjb2xvcj0nc2Vjb25kYXJ5Jz5cclxuICAgICAgICAgICAgICAgICAgICB7ZmlsdGVyU2V0dGluZ3MudW5pdH1cclxuICAgICAgICAgICAgICAgIDwvVGV4dD5cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgPC9GaWx0ZXI+XHJcbiAgICApXHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IE51bWJlckZpbHRlcjsiLCJleHBvcnQgeyBkZWZhdWx0IH0gZnJvbSAnLi9OdW1iZXJGaWx0ZXInOyIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0J1xyXG5pbXBvcnQgc3R5bGVzIGZyb20gJ3N0eWxlcy9jdXN0b21TdHlsZXMubW9kdWxlLnNjc3MnO1xyXG5pbXBvcnQgSWNvbiwgeyBJY29uUHJvcHMgfSBmcm9tICcuLi9JY29uJztcclxuXHJcbmNvbnN0IENoZWNrSWNvbjogUmVhY3QuRkM8SWNvblByb3BzPiA9IChwcm9wcykgPT4ge1xyXG5cclxuICAgIHJldHVybiAoXHJcbiAgICAgICAgPEljb24gXHJcbiAgICAgICAgICAgIHsuLi5wcm9wc31cclxuICAgICAgICA+XHJcbiAgICAgICAgICAgIDxwYXRoIFxyXG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lPXtzdHlsZXNbJ2ljb25fc3Ryb2tlX2NvbG9yXycgKyAocHJvcHMuY29sb3IgfHwgJ2luaGVyaXQnKV19XHJcbiAgICAgICAgICAgICAgICBkPSdNNCAxMS42MTI5TDkuODc3NTUgMThMMjAgNycgXHJcbiAgICAgICAgICAgICAgICBzdHJva2VXaWR0aD0nMidcclxuICAgICAgICAgICAgLz5cclxuICAgICAgICA8L0ljb24+XHJcbiAgICApXHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IENoZWNrSWNvbjtcclxuIiwiZXhwb3J0IHsgZGVmYXVsdCB9IGZyb20gJy4vQ2hlY2tJY29uJztcclxuIiwiXG4gICAgICBpbXBvcnQgQVBJIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICBpbXBvcnQgZG9tQVBJIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRGbiBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanNcIjtcbiAgICAgIGltcG9ydCBzZXRBdHRyaWJ1dGVzIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0U3R5bGVFbGVtZW50IGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzXCI7XG4gICAgICBpbXBvcnQgc3R5bGVUYWdUcmFuc2Zvcm1GbiBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzXCI7XG4gICAgICBpbXBvcnQgY29udGVudCwgKiBhcyBuYW1lZEV4cG9ydCBmcm9tIFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cnVsZVNldFsxXS5ydWxlc1swXS51c2VbMV0hLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Bvc3Rjc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9ydWxlU2V0WzFdLnJ1bGVzWzBdLnVzZVsyXSEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanMhLi9DaGVja0JveC5tb2R1bGUuc2Nzc1wiO1xuICAgICAgXG4gICAgICBcblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybSA9IHN0eWxlVGFnVHJhbnNmb3JtRm47XG5vcHRpb25zLnNldEF0dHJpYnV0ZXMgPSBzZXRBdHRyaWJ1dGVzO1xub3B0aW9ucy5pbnNlcnQgPSBpbnNlcnRGbi5iaW5kKG51bGwsIFwiaGVhZFwiKTtcbm9wdGlvbnMuZG9tQVBJID0gZG9tQVBJO1xub3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7XG5cbnZhciB1cGRhdGUgPSBBUEkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5leHBvcnQgKiBmcm9tIFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cnVsZVNldFsxXS5ydWxlc1swXS51c2VbMV0hLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Bvc3Rjc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9ydWxlU2V0WzFdLnJ1bGVzWzBdLnVzZVsyXSEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanMhLi9DaGVja0JveC5tb2R1bGUuc2Nzc1wiO1xuICAgICAgIGV4cG9ydCBkZWZhdWx0IGNvbnRlbnQgJiYgY29udGVudC5sb2NhbHMgPyBjb250ZW50LmxvY2FscyA6IHVuZGVmaW5lZDtcbiIsImltcG9ydCBjbGFzc05hbWVzIGZyb20gXCJjbGFzc25hbWVzXCI7XHJcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gXCJyZWFjdFwiO1xyXG5pbXBvcnQgeyBtZW1vIH0gZnJvbSBcInJlYWN0XCI7XHJcbmltcG9ydCBDaGVja0ljb24gZnJvbSAnLi4vaWNvbnMvQ2hlY2tJY29uJztcclxuaW1wb3J0IHN0eWxlcyBmcm9tICcuL0NoZWNrQm94Lm1vZHVsZS5zY3NzJztcclxuXHJcblxyXG5leHBvcnQgdHlwZSBDaGVja0JveFByb3BzID0gT21pdDxcclxuICBSZWFjdC5JbnB1dEhUTUxBdHRyaWJ1dGVzPEhUTUxJbnB1dEVsZW1lbnQ+LFxyXG4gICdvbkNoYW5nZSdcclxuPiAmIHtcclxuICAvKiog0JLRi9C30YvQstCw0LXRgtGB0Y8g0L/RgNC4INC60LvQuNC60LUg0L3QsCDRh9C10LrQsdC+0LrRgSAqL1xyXG4gIG9uQ2hhbmdlOiAoY2hlY2tlZDogYm9vbGVhbikgPT4gdm9pZDtcclxufTtcclxuXHJcbmNvbnN0IENoZWNrQm94OiBSZWFjdC5GQzxDaGVja0JveFByb3BzPiA9IChwcm9wcykgPT4ge1xyXG5cclxuICBjb25zdCBvbkNoYW5nZUNoZWNrYm94ID0gKGU6IFJlYWN0LkNoYW5nZUV2ZW50PEhUTUxJbnB1dEVsZW1lbnQ+KSA9PiB7XHJcbiAgICBwcm9wcy5vbkNoYW5nZShlLnRhcmdldC5jaGVja2VkKTtcclxuICB9XHJcblxyXG4gIGNvbnN0IGlkTmFtZSA9ICdjdXN0b21jaGVja2JveCc7XHJcblxyXG4gIHJldHVybiAoXHJcbiAgICA8ZGl2IGNsYXNzTmFtZT17c3R5bGVzWydjZGl2J119PlxyXG4gICAgICA8aW5wdXQgXHJcbiAgICAgICAgey4uLnByb3BzfVxyXG4gICAgICAgIGNoZWNrZWQ9e3Byb3BzLmNoZWNrZWR9XHJcbiAgICAgICAgb25DaGFuZ2U9e29uQ2hhbmdlQ2hlY2tib3h9XHJcbiAgICAgICAgY2xhc3NOYW1lPXtzdHlsZXNbJ2NkaXZfX2NoZWNrYm94J119XHJcbiAgICAgICAgdHlwZT0nY2hlY2tib3gnIFxyXG4gICAgICAgIGlkPXtpZE5hbWV9XHJcbiAgICAgIC8+XHJcbiAgICAgIDxsYWJlbCBcclxuICAgICAgICBodG1sRm9yPXtpZE5hbWV9IFxyXG4gICAgICAgIGNsYXNzTmFtZT17Y2xhc3NOYW1lcyh7XHJcbiAgICAgICAgICBbcHJvcHMuY2xhc3NOYW1lIHx8ICcnXTogdHJ1ZSxcclxuICAgICAgICAgIFtzdHlsZXNbJ2NkaXZfX2xhYmVsJ11dOiB0cnVlLFxyXG4gICAgICAgICAgW3N0eWxlc1snY2Rpdl9fbGFiZWxfZGlzYWJsZWQnXV06IHByb3BzLmRpc2FibGVkLFxyXG4gICAgICAgIH0pfVxyXG4gICAgICA+XHJcbiAgICAgICAge3Byb3BzLmNoZWNrZWQgJiYgXHJcbiAgICAgICAgICA8Q2hlY2tJY29uIGNvbG9yPXtwcm9wcy5kaXNhYmxlZCA/ICdzZWNvbmRhcnknIDogJ2FjY2VudCd9IC8+XHJcbiAgICAgICAgfVxyXG4gICAgICA8L2xhYmVsPlxyXG4gICAgPC9kaXY+XHJcbiAgKVxyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgbWVtbyhDaGVja0JveCk7XHJcbiIsImV4cG9ydCB7IGRlZmF1bHQgfSBmcm9tICcuL0NoZWNrQm94JztcclxuZXhwb3J0ICogZnJvbSAnLi9DaGVja0JveCc7XHJcbiIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gXCJyZWFjdFwiO1xyXG5pbXBvcnQgRmlsdGVyIGZyb20gXCIuLi9GaWx0ZXJcIjtcclxuaW1wb3J0IHsgQm9vbGVhbkZpbHRlclR5cGUgfSBmcm9tIFwidHlwZXMvZmlsdGVyVHlwZXNcIjtcclxuXHJcbmltcG9ydCBDaGVja0JveCwgeyBDaGVja0JveFByb3BzIH0gZnJvbSBcImNvbXBvbmVudHMvQ2hlY2tCb3hcIjtcclxuXHJcbmNvbnN0IEJvb2xlYW5GaWx0ZXI6IFJlYWN0LkZDPEJvb2xlYW5GaWx0ZXJUeXBlICYgQ2hlY2tCb3hQcm9wcz4gPSAocHJvcHMpID0+IHtcclxuXHJcbiAgICBjb25zdCB7IGZpbHRlck5hbWUsIC4uLmNoZWNrYm94UHJvcHMgfSA9IHByb3BzO1xyXG5cclxuICAgIHJldHVybiAoXHJcbiAgICAgICAgPEZpbHRlciBuYW1lPXtmaWx0ZXJOYW1lfT5cclxuICAgICAgICAgICAgPENoZWNrQm94IHsuLi5jaGVja2JveFByb3BzfSAvPlxyXG4gICAgICAgIDwvRmlsdGVyPlxyXG4gICAgKVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBCb29sZWFuRmlsdGVyOyIsImV4cG9ydCB7IGRlZmF1bHQgfSBmcm9tICcuL0Jvb2xlYW5GaWx0ZXInOyIsImltcG9ydCB7IG9ic2VydmVyIH0gZnJvbSBcIm1vYngtcmVhY3QtbGl0ZVwiO1xyXG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tIFwicmVhY3RcIjtcclxuaW1wb3J0IHsgdXNlRWZmZWN0IH0gZnJvbSBcInJlYWN0XCI7XHJcbmltcG9ydCBCdXR0b24gZnJvbSBcImNvbXBvbmVudHMvQnV0dG9uXCI7XHJcbmltcG9ydCBJbnB1dCBmcm9tIFwiY29tcG9uZW50cy9JbnB1dFwiO1xyXG5pbXBvcnQgVGV4dCBmcm9tIFwiY29tcG9uZW50cy9UZXh0XCI7XHJcbmltcG9ydCBNdWx0aURyb3Bkb3duLCB7IE9wdGlvbiB9IGZyb20gXCJjb21wb25lbnRzL011bHRpRHJvcGRvd25cIjtcclxuaW1wb3J0IFNlYXJjaEljb24gZnJvbSBcImNvbXBvbmVudHMvaWNvbnMvU2VhcmNoSWNvblwiO1xyXG5pbXBvcnQgeyB1c2VMb2NhbFN0b3JlIH0gZnJvbSBcImhvb2tzL3VzZUxvY2FsU3RvcmVcIjtcclxuaW1wb3J0IEZpbHRlclN0b3JlIGZyb20gXCJzdG9yZS9GaWx0ZXJTdG9yZVwiO1xyXG5pbXBvcnQgc3R5bGVzIGZyb20gJy4vQ29udGVudEZpbHRlcnMubW9kdWxlLnNjc3MnO1xyXG5pbXBvcnQgc2VhcmNoU3RvcmUgZnJvbSBcInN0b3JlL1NlYXJjaFBhcmFtc1N0b3JlXCI7XHJcbmltcG9ydCB7IEZpbHRlckl0ZW1UeXBlcyB9IGZyb20gXCJzdG9yZS9GaWx0ZXJTdG9yZS9GaWx0ZXJTdG9yZVwiO1xyXG5pbXBvcnQgTXVsdGlTdHJpbmdGaWx0ZXIgZnJvbSBcImNvbXBvbmVudHMvZmlsdGVycy9NdWx0aVN0cmluZ0ZpbHRlclwiO1xyXG5pbXBvcnQgU3RyaW5nRmlsdGVyIGZyb20gXCJjb21wb25lbnRzL2ZpbHRlcnMvU3RyaW5nRmlsdGVyXCI7XHJcbmltcG9ydCBOdW1iZXJGaWx0ZXIgZnJvbSBcImNvbXBvbmVudHMvZmlsdGVycy9OdW1iZXJGaWx0ZXJcIjtcclxuaW1wb3J0IEJvb2xlYW5GaWx0ZXIgZnJvbSBcImNvbXBvbmVudHMvZmlsdGVycy9Cb29sZWFuRmlsdGVyXCI7XHJcblxyXG5pbnRlcmZhY2UgQ29uZmlnVHlwZSB7XHJcbiAgICB0eXBlOiBGaWx0ZXJJdGVtVHlwZXNcclxufVxyXG5cclxuaW50ZXJmYWNlIENvbmZpZ1NpbmdsZVR5cGUgZXh0ZW5kcyBDb25maWdUeXBlIHtcclxuICAgIHR5cGU6ICdTVFJJTkcnIHwgJ0JPT0xFQU4nIHwgJ05VTUJFUicsXHJcbiAgICBwbGFjZWhvbGRlcjogc3RyaW5nLFxyXG59XHJcblxyXG5pbnRlcmZhY2UgQ29uZmlnTWluTWF4VHlwZSBleHRlbmRzIENvbmZpZ1R5cGUge1xyXG4gICAgdHlwZTogJ01JTk1BWCcsXHJcbiAgICBtaW5NYXhWYWx1ZXM6IE9wdGlvbltdLFxyXG59XHJcblxyXG5pbnRlcmZhY2UgQ29uZmlnT3B0aW9uVHlwZSBleHRlbmRzIENvbmZpZ1R5cGUge1xyXG4gICAgdHlwZTogJ09QVElPTicsXHJcbiAgICBwbGFjZWhvbGRlcjogc3RyaW5nLFxyXG4gICAgb3B0aW9uczogT3B0aW9uW10sXHJcbiAgICBzZWxlY3RNb2RlPzogJ09ORScgfCAnTVVMVEknLFxyXG59XHJcblxyXG5leHBvcnQgdHlwZSBPdGhlclR5cGUgPSB7XHJcbiAgICBba2V5OiBzdHJpbmddOiBDb25maWdTaW5nbGVUeXBlIHwgQ29uZmlnT3B0aW9uVHlwZSB8IENvbmZpZ01pbk1heFR5cGVcclxufVxyXG5cclxuaW50ZXJmYWNlIENvbnRlbnRGaWx0ZXJzUHJvcHMge1xyXG4gICAgaW5wdXRQbGFjZWhvbGRlcj86IHN0cmluZyxcclxuICAgIGNhdGVnb3J5VGFnPzogc3RyaW5nLFxyXG4gICAgY2F0ZWdvcnlPcHRpb25zPzogT3B0aW9uW10sXHJcbiAgICBjYXRlZ29yeVBsYWNlaG9sZGVyPzogc3RyaW5nLFxyXG4gICAgb3RoZXJGaWx0ZXJzPzogT3RoZXJUeXBlLFxyXG59XHJcblxyXG5jb25zdCBDb250ZW50RmlsdGVyczogUmVhY3QuRkM8Q29udGVudEZpbHRlcnNQcm9wcz4gPSAocHJvcHMpID0+IHtcclxuXHJcbiAgICBjb25zdCBmaWx0ZXIgPSB1c2VMb2NhbFN0b3JlKCgpID0+IG5ldyBGaWx0ZXJTdG9yZSgpKTtcclxuXHJcbiAgICBjb25zdCBnZXRGaWx0ZXJzRm9yU3RvcmUgPSAoKSA9PiB7XHJcbiAgICAgICAgaWYgKHByb3BzLm90aGVyRmlsdGVycykge1xyXG4gICAgICAgICAgICBsZXQgZmlsdGVyT2JqID0ge307XHJcbiAgICAgICAgICAgIE9iamVjdC5lbnRyaWVzKHByb3BzLm90aGVyRmlsdGVycykuZm9yRWFjaCgoW2tleSwgdmFsdWVdKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBPYmplY3QuYXNzaWduKGZpbHRlck9iaiwge1xyXG4gICAgICAgICAgICAgICAgICAgIFtrZXldOiB2YWx1ZS50eXBlLFxyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIHJldHVybiBmaWx0ZXJPYmo7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB7fTtcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBnZW5lcmF0ZU90aGVyRmlsdGVycyA9ICgpOiBbc3RyaW5nLCBzdHJpbmddW10gPT4ge1xyXG4gICAgICAgIGlmIChwcm9wcy5vdGhlckZpbHRlcnMpIHtcclxuICAgICAgICAgICAgcmV0dXJuIE9iamVjdC5lbnRyaWVzKHByb3BzLm90aGVyRmlsdGVycykubWFwKChba2V5LCBmaWx0XSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgaWYgKGZpbHQudHlwZSA9PT0gJ09QVElPTicpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCB2YWx1ZXMgPSBmaWx0ZXIuZ2V0T3B0aW9uSXRlbVZhbHVlKGtleSk7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdmFsdWVTdHIgPSBlbmNvZGVVUklDb21wb25lbnQodmFsdWVzLm1hcCgob3B0KSA9PiBvcHQudmFsdWUpLmpvaW4oJywnKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFtrZXksIHZhbHVlU3RyXSBhcyBbc3RyaW5nLCBzdHJpbmddO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKGZpbHQudHlwZSAhPT0gJ01JTk1BWCcpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCB2YWx1ZSA9IGZpbHRlci5nZXRTaW5nbGVJdGVtVmFsdWUoa2V5KTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gW2tleSwgdmFsdWVdO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFsnJywgJyddO1xyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gW107XHJcbiAgICB9IFxyXG5cclxuICAgIHVzZUVmZmVjdCgoKSA9PiB7XHJcbiAgICAgICAgc2VhcmNoU3RvcmUuZ2V0U2VhcmNoUGFyYW1zKCk7XHJcbiAgICAgICAgaWYgKHByb3BzLm90aGVyRmlsdGVycykge1xyXG4gICAgICAgICAgICBmaWx0ZXIuY29uZmlnRmlsdGVycyhnZXRGaWx0ZXJzRm9yU3RvcmUoKSk7XHJcbiAgICAgICAgfVxyXG4gICAgfSwgW10pO1xyXG5cclxuICAgIHVzZUVmZmVjdCgoKSA9PiB7XHJcbiAgICAgICAgZmlsdGVyLnNldFNlYXJjaChzZWFyY2hTdG9yZS5nZXRQYXJhbSgncXVlcnknKSk7XHJcbiAgICAgICAgaWYgKHByb3BzLmNhdGVnb3J5VGFnICYmIHByb3BzLmNhdGVnb3J5T3B0aW9ucykge1xyXG4gICAgICAgICAgICBmaWx0ZXIuc2V0Q2F0ZWdvcnkoc2VhcmNoU3RvcmUuZ2V0TXVsdGlwbGVQYXJhbShcclxuICAgICAgICAgICAgICAgIHByb3BzLmNhdGVnb3J5VGFnLCBcclxuICAgICAgICAgICAgICAgIHByb3BzLmNhdGVnb3J5T3B0aW9uc1xyXG4gICAgICAgICAgICApKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHByb3BzLm90aGVyRmlsdGVycykge1xyXG4gICAgICAgICAgICBPYmplY3QuZW50cmllcyhwcm9wcy5vdGhlckZpbHRlcnMpLm1hcCgoW2tleSwgdmFsdWVdKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAodmFsdWUudHlwZSA9PT0gJ09QVElPTicpIHtcclxuICAgICAgICAgICAgICAgICAgICBmaWx0ZXIuc2V0T3B0aW9uSXRlbVZhbHVlKGtleSwgc2VhcmNoU3RvcmUuZ2V0TXVsdGlwbGVQYXJhbShcclxuICAgICAgICAgICAgICAgICAgICAgICAga2V5LCB2YWx1ZS5vcHRpb25zXHJcbiAgICAgICAgICAgICAgICAgICAgKSk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHZhbHVlLnR5cGUgIT09ICdNSU5NQVgnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZmlsdGVyLnNldFNpbmdsZUl0ZW1WYWx1ZShrZXksIHNlYXJjaFN0b3JlLmdldFBhcmFtKGtleSkpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICB9LCBbc2VhcmNoU3RvcmUuc2VhcmNoUGFyYW1zLCBmaWx0ZXJdKTtcclxuXHJcbiAgICBjb25zdCBjaGFuZ2VTZWFyY2hQYXJhbXMgPSAoKSA9PiB7XHJcbiAgICAgICAgc2VhcmNoU3RvcmUuY2hhbmdlU2VhcmNoUGFyYW1zRm9yRmlsdGVycyhcclxuICAgICAgICAgICAgZmlsdGVyLnNlYXJjaEZpZWxkLFxyXG4gICAgICAgICAgICBwcm9wcy5jYXRlZ29yeVRhZywgZmlsdGVyLmNhdGVnb3J5LFxyXG4gICAgICAgICAgICBnZW5lcmF0ZU90aGVyRmlsdGVycygpXHJcbiAgICAgICAgKVxyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IG9uQ2hhbmdlSW5wdXRIYW5kbGUgPSAodmFsdWU6IHN0cmluZykgPT4ge1xyXG4gICAgICAgIGZpbHRlci5zZXRTZWFyY2godmFsdWUpO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IG9uQ2hhbmdlQ2F0ZWdvcnkgPSAodmFsdWU6IE9wdGlvbltdKSA9PiB7IFxyXG4gICAgICAgIGZpbHRlci5zZXRDYXRlZ29yeSh2YWx1ZSk7XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgZ2V0VGl0bGVXaXRoSW5pdCA9ICh2YWx1ZTogT3B0aW9uW10sIGluaXRWYWx1ZTogc3RyaW5nKSA9PiB7XHJcbiAgICAgICAgaWYgKHZhbHVlLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgcmV0dXJuIHZhbHVlLm1hcCgoZWxlbSkgPT4gZWxlbS52YWx1ZSkuam9pbignLCAnKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGluaXRWYWx1ZTtcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBnZXRUaXRsZUNhdGVnb3J5ID0gKHZhbHVlOiBPcHRpb25bXSkgPT4geyBcclxuICAgICAgICBpZiAocHJvcHMuY2F0ZWdvcnlQbGFjZWhvbGRlcikge1xyXG4gICAgICAgICAgICByZXR1cm4gZ2V0VGl0bGVXaXRoSW5pdCh2YWx1ZSwgcHJvcHMuY2F0ZWdvcnlQbGFjZWhvbGRlcik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiAnJztcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBzaG93TW9yZUZpbHRlcnMgPSAoKSA9PiB7XHJcbiAgICAgICAgZmlsdGVyLnNldFZpc2liaWxpdHkodHJ1ZSk7XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgaGlkZU1vcmVGaWx0ZXJzID0gKCkgPT4ge1xyXG4gICAgICAgIGZpbHRlci5zZXRWaXNpYmlsaXR5KGZhbHNlKTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gKFxyXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPXtzdHlsZXNbXCJjb250ZW50LWZpbHRlcnNcIl19PlxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT17c3R5bGVzW1wiY29udGVudC1maWx0ZXJzX19zZWFyY2hcIl19PlxyXG4gICAgICAgICAgICAgICAgPElucHV0IFxyXG4gICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT17c3R5bGVzW1wiY29udGVudC1maWx0ZXJzX19zZWFyY2hfX2lucHV0XCJdfVxyXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlPXtmaWx0ZXIuc2VhcmNoRmllbGR9XHJcbiAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U9e29uQ2hhbmdlSW5wdXRIYW5kbGV9XHJcbiAgICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9e3Byb3BzLmlucHV0UGxhY2Vob2xkZXIgfHwgJ0VudGVyIGRpc2hlcyd9XHJcbiAgICAgICAgICAgICAgICAvPlxyXG4gICAgICAgICAgICAgICAgPEJ1dHRvbiBvbkNsaWNrPXtjaGFuZ2VTZWFyY2hQYXJhbXN9PlxyXG4gICAgICAgICAgICAgICAgICAgIDxTZWFyY2hJY29uIHdpZHRoPScyNScgaGVpZ2h0PScyNCcgLz5cclxuICAgICAgICAgICAgICAgIDwvQnV0dG9uPlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9e3N0eWxlc1tcImNvbnRlbnQtZmlsdGVyc19fY2F0ZWdvcnlcIl19PlxyXG4gICAgICAgICAgICAgICAge3Byb3BzLm90aGVyRmlsdGVycyA/XHJcbiAgICAgICAgICAgICAgICA8VGV4dCBcclxuICAgICAgICAgICAgICAgICAgICBjb2xvcj1cImFjY2VudFwiIFxyXG4gICAgICAgICAgICAgICAgICAgIHZpZXc9J3AtMTYnXHJcbiAgICAgICAgICAgICAgICAgICAgdGFnPSdkaXYnXHJcbiAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPXtzdHlsZXNbXCJjb250ZW50LWZpbHRlcnNfX2NhdGVnb3J5X19zaG93ZXJcIl19XHJcbiAgICAgICAgICAgICAgICAgICAgb25DTGljaz17c2hvd01vcmVGaWx0ZXJzfVxyXG4gICAgICAgICAgICAgICAgPlxyXG4gICAgICAgICAgICAgICAgICAgIDx1PlNob3cgbW9yZSBmaWx0ZXJzPC91PlxyXG4gICAgICAgICAgICAgICAgPC9UZXh0PlxyXG4gICAgICAgICAgICAgICAgOiA8c3Bhbj48L3NwYW4+XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB7cHJvcHMuY2F0ZWdvcnlPcHRpb25zICYmIHByb3BzLmNhdGVnb3J5UGxhY2Vob2xkZXIgJiYgcHJvcHMuY2F0ZWdvcnlUYWcgJiZcclxuICAgICAgICAgICAgICAgIDxNdWx0aURyb3Bkb3duIFxyXG4gICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT17c3R5bGVzW1wiY29udGVudC1maWx0ZXJzX19jYXRlZ29yeV9fYmxvY2tcIl19XHJcbiAgICAgICAgICAgICAgICAgICAgb3B0aW9ucz17cHJvcHMuY2F0ZWdvcnlPcHRpb25zfVxyXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlPXtmaWx0ZXIuY2F0ZWdvcnl9XHJcbiAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U9e29uQ2hhbmdlQ2F0ZWdvcnl9XHJcbiAgICAgICAgICAgICAgICAgICAgZ2V0VGl0bGU9e2dldFRpdGxlQ2F0ZWdvcnl9XHJcbiAgICAgICAgICAgICAgICAvPlxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAge3Byb3BzLm90aGVyRmlsdGVycyAmJiBmaWx0ZXIudmlzaWJpbGl0eSAmJiAhZmlsdGVyLmlzRW1wdHkgJiZcclxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9e3N0eWxlc1tcImNvbnRlbnQtZmlsdGVyc19fb3RoZXJcIl19PlxyXG4gICAgICAgICAgICAgICAgPFRleHRcclxuICAgICAgICAgICAgICAgICAgICB0YWc9J2RpdidcclxuICAgICAgICAgICAgICAgICAgICB2aWV3PSdwLTIwJ1xyXG4gICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT17c3R5bGVzW1wiY29udGVudC1maWx0ZXJzX19vdGhlcl9faGVhZGVyXCJdfVxyXG4gICAgICAgICAgICAgICAgPlxyXG4gICAgICAgICAgICAgICAgICAgIE90aGVyIEZpbHRlcnNcclxuICAgICAgICAgICAgICAgIDwvVGV4dD5cclxuICAgICAgICAgICAgICAgIDxkaXZcclxuICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9e3N0eWxlc1tcImNvbnRlbnQtZmlsdGVyc19fb3RoZXJfX211bHRpXCJdfVxyXG4gICAgICAgICAgICAgICAgPlxyXG4gICAgICAgICAgICAgICAgICAgIHtPYmplY3QuZW50cmllcyhwcm9wcy5vdGhlckZpbHRlcnMpLmZpbHRlcigoW2tleSwgdmFsXSkgPT4gdmFsLnR5cGUgPT09ICdPUFRJT04nKS5tYXAoKFtrZXksIHZhbHVlXSkgPT4ge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHZhbHVlLnR5cGUgPT09ICdPUFRJT04nKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8TXVsdGlTdHJpbmdGaWx0ZXJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBrZXk9e2tleX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWx0ZXJOYW1lPXtrZXl9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3B0aW9ucz17dmFsdWUub3B0aW9uc31cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT17ZmlsdGVyLmdldE9wdGlvbkl0ZW1WYWx1ZShrZXkpfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXsobmV3VmFsOiBPcHRpb25bXSkgPT4geyBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsdGVyLnNldE9wdGlvbkl0ZW1WYWx1ZShrZXksIG5ld1ZhbCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBnZXRUaXRsZT17KG5ld1ZhbDogT3B0aW9uW10pID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGdldFRpdGxlV2l0aEluaXQobmV3VmFsLCB2YWx1ZS5wbGFjZWhvbGRlcik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxlY3RNb2RlPXt2YWx1ZS5zZWxlY3RNb2RlfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLz4gICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgIDxkaXZcclxuICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9e3N0eWxlc1tcImNvbnRlbnQtZmlsdGVyc19fb3RoZXJfX3N0cmluZ1wiXX1cclxuICAgICAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICAgICAgICB7T2JqZWN0LmVudHJpZXMocHJvcHMub3RoZXJGaWx0ZXJzKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAuZmlsdGVyKChba2V5LCB2YWxdKSA9PiB2YWwudHlwZSA9PT0gJ1NUUklORycpLm1hcCgoW2tleSwgdmFsdWVdKSA9PiB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodmFsdWUudHlwZSA9PT0gJ1NUUklORycpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPFN0cmluZ0ZpbHRlciBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAga2V5PXtrZXl9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbHRlck5hbWU9e2tleX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsdGVyU2V0dGluZ3M9e3sgaGVscDogJycgfX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9e3ZhbHVlLnBsYWNlaG9sZGVyfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT17ZmlsdGVyLmdldFNpbmdsZUl0ZW1WYWx1ZShrZXkpfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZT17KHZhbHVlKSA9PiB7IGZpbHRlci5zZXRTaW5nbGVJdGVtVmFsdWUoa2V5LCB2YWx1ZSkgfX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgIDxkaXZcclxuICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9e3N0eWxlc1tcImNvbnRlbnQtZmlsdGVyc19fb3RoZXJfX251bWJlclwiXX1cclxuICAgICAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICAgICAgICB7T2JqZWN0LmVudHJpZXMocHJvcHMub3RoZXJGaWx0ZXJzKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAuZmlsdGVyKChba2V5LCB2YWxdKSA9PiB2YWwudHlwZSA9PT0gJ05VTUJFUicpLm1hcCgoW2tleSwgdmFsdWVdKSA9PiB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodmFsdWUudHlwZSA9PT0gJ05VTUJFUicpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPE51bWJlckZpbHRlclxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBrZXk9e2tleX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsdGVyTmFtZT17a2V5fVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWx0ZXJTZXR0aW5ncz17eyB1bml0OiAnJyB9fVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcj17dmFsdWUucGxhY2Vob2xkZXJ9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPXtmaWx0ZXIuZ2V0U2luZ2xlSXRlbVZhbHVlKGtleSl9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXsodmFsdWUpID0+IHsgZmlsdGVyLnNldFNpbmdsZUl0ZW1WYWx1ZShrZXksIHZhbHVlKSB9fVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICApXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgPGRpdlxyXG4gICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT17c3R5bGVzW1wiY29udGVudC1maWx0ZXJzX19vdGhlcl9fYm9vbGVhblwiXX1cclxuICAgICAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICAgICAgICB7T2JqZWN0LmVudHJpZXMocHJvcHMub3RoZXJGaWx0ZXJzKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAuZmlsdGVyKChba2V5LCB2YWxdKSA9PiB2YWwudHlwZSA9PT0gJ0JPT0xFQU4nKS5tYXAoKFtrZXksIHZhbHVlXSkgPT4ge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHZhbHVlLnR5cGUgPT09ICdCT09MRUFOJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Qm9vbGVhbkZpbHRlclxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBrZXk9e2tleX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsdGVyTmFtZT17a2V5fVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGVja2VkPXtmaWx0ZXIuZ2V0U2luZ2xlSXRlbVZhbHVlKGtleSkgPT09ICd0cnVlJ30gXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXsoY2hlY2tlZCkgPT4geyBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGZpbHRlci5nZXRTaW5nbGVJdGVtVmFsdWUoa2V5KSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWx0ZXIuc2V0U2luZ2xlSXRlbVZhbHVlKGtleSwgKGNoZWNrZWQpLnRvU3RyaW5nKCkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9fVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICApXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9e3N0eWxlc1tcImNvbnRlbnQtZmlsdGVyc19fb3RoZXJfX2hpZGVcIl19PlxyXG4gICAgICAgICAgICAgICAgICAgIDxCdXR0b24gb25DbGljaz17KCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBoaWRlTW9yZUZpbHRlcnMoKTtcclxuICAgICAgICAgICAgICAgICAgICB9fT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaGlkZSBmaWx0ZXJzXHJcbiAgICAgICAgICAgICAgICAgICAgPC9CdXR0b24+XHJcbiAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICA8L2Rpdj5cclxuICAgIClcclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgb2JzZXJ2ZXIoQ29udGVudEZpbHRlcnMpOyIsImV4cG9ydCB7IGRlZmF1bHQgfSBmcm9tICcuL0NvbnRlbnRGaWx0ZXJzJzsiLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCB7IG1lbW8gfSBmcm9tICdyZWFjdCc7XHJcblxyXG5pbXBvcnQgVGV4dCBmcm9tICdjb21wb25lbnRzL1RleHQnO1xyXG5cclxuaW1wb3J0IGN1c3RvbVN0eWxlcyBmcm9tICdzdHlsZXMvY3VzdG9tU3R5bGVzLm1vZHVsZS5zY3NzJztcclxuXHJcbmNvbnN0IENvbnRlbnRIZWFkZXI6IFJlYWN0LkZDID0gKCkgPT4ge1xyXG5cclxuICAgIHJldHVybiAoXHJcbiAgICAgICAgPFRleHQgY2xhc3NOYW1lPXtjdXN0b21TdHlsZXNbJ3RleHQtYWxpZ24tY2VudGVyJ119IHZpZXc9J3AtMjAnIHRhZz0nZGl2Jz5cclxuICAgICAgICAgICAgRmluZCB0aGUgcGVyZmVjdCBmb29kIGFuZHsnICd9IFxyXG4gICAgICAgICAgICA8dT5kcmluayBpZGVhczwvdT57JyAnfVxyXG4gICAgICAgICAgICBmb3IgZXZlcnkgb2NjYXNpb24sIGZyb217JyAnfVxyXG4gICAgICAgICAgICA8dT53ZWVrbmlnaHQgZGlubmVyczwvdT4gdG97JyAnfVxyXG4gICAgICAgICAgICA8dT5ob2xpZGF5IGZlYXN0czwvdT4uXHJcbiAgICAgICAgPC9UZXh0PlxyXG4gICAgKVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBtZW1vKENvbnRlbnRIZWFkZXIpOyIsImV4cG9ydCB7IGRlZmF1bHQgfSBmcm9tICcuL0NvbnRlbnRIZWFkZXInOyIsIlxuICAgICAgaW1wb3J0IEFQSSBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiO1xuICAgICAgaW1wb3J0IGRvbUFQSSBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0Rm4gZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzXCI7XG4gICAgICBpbXBvcnQgc2V0QXR0cmlidXRlcyBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydFN0eWxlRWxlbWVudCBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qc1wiO1xuICAgICAgaW1wb3J0IHN0eWxlVGFnVHJhbnNmb3JtRm4gZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qc1wiO1xuICAgICAgaW1wb3J0IGNvbnRlbnQsICogYXMgbmFtZWRFeHBvcnQgZnJvbSBcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanM/P3J1bGVTZXRbMV0ucnVsZXNbMF0udXNlWzFdIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9wb3N0Y3NzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cnVsZVNldFsxXS5ydWxlc1swXS51c2VbMl0hLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vQ2FyZC5tb2R1bGUuc2Nzc1wiO1xuICAgICAgXG4gICAgICBcblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybSA9IHN0eWxlVGFnVHJhbnNmb3JtRm47XG5vcHRpb25zLnNldEF0dHJpYnV0ZXMgPSBzZXRBdHRyaWJ1dGVzO1xub3B0aW9ucy5pbnNlcnQgPSBpbnNlcnRGbi5iaW5kKG51bGwsIFwiaGVhZFwiKTtcbm9wdGlvbnMuZG9tQVBJID0gZG9tQVBJO1xub3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7XG5cbnZhciB1cGRhdGUgPSBBUEkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5leHBvcnQgKiBmcm9tIFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cnVsZVNldFsxXS5ydWxlc1swXS51c2VbMV0hLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Bvc3Rjc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9ydWxlU2V0WzFdLnJ1bGVzWzBdLnVzZVsyXSEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanMhLi9DYXJkLm1vZHVsZS5zY3NzXCI7XG4gICAgICAgZXhwb3J0IGRlZmF1bHQgY29udGVudCAmJiBjb250ZW50LmxvY2FscyA/IGNvbnRlbnQubG9jYWxzIDogdW5kZWZpbmVkO1xuIiwiaW1wb3J0IGNsYXNzTmFtZXMgZnJvbSBcImNsYXNzbmFtZXNcIjtcclxuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSBcInJlYWN0XCI7XHJcbmltcG9ydCB7IG1lbW8gfSBmcm9tIFwicmVhY3RcIjtcclxuaW1wb3J0IFRleHQgZnJvbSAnLi4vVGV4dCc7XHJcbmltcG9ydCBzdHlsZXMgZnJvbSAnLi9DYXJkLm1vZHVsZS5zY3NzJztcclxuXHJcbmV4cG9ydCB0eXBlIENhcmRQcm9wcyA9IHtcclxuICAgIC8qKiDQlNC+0L/QvtC70L3QuNGC0LXQu9GM0L3Ri9C5IGNsYXNzbmFtZSAqL1xyXG4gICAgY2xhc3NOYW1lPzogc3RyaW5nLFxyXG4gICAgLyoqIFVSTCDQuNC30L7QsdGA0LDQttC10L3QuNGPICovXHJcbiAgICBpbWFnZTogc3RyaW5nO1xyXG4gICAgLyoqINCh0LvQvtGCINC90LDQtCDQt9Cw0LPQvtC70L7QstC60L7QvCAqL1xyXG4gICAgY2FwdGlvblNsb3Q/OiBSZWFjdC5SZWFjdE5vZGU7XHJcbiAgICAvKiog0JfQsNCz0L7Qu9C+0LLQvtC6INC60LDRgNGC0L7Rh9C60LggKi9cclxuICAgIHRpdGxlOiBSZWFjdC5SZWFjdE5vZGU7XHJcbiAgICAvKiog0J7Qv9C40YHQsNC90LjQtSDQutCw0YDRgtC+0YfQutC4ICovXHJcbiAgICBzdWJ0aXRsZTogUmVhY3QuUmVhY3ROb2RlO1xyXG4gICAgLyoqINCh0L7QtNC10YDQttC40LzQvtC1INC60LDRgNGC0L7Rh9C60LggKNGE0YPRgtC10YAv0LHQvtC60L7QstCw0Y8g0YfQsNGB0YLRjCksINC80L7QttC10YIg0LHRi9GC0Ywg0L/Rg9GB0YLRi9C8ICovXHJcbiAgICBjb250ZW50U2xvdD86IFJlYWN0LlJlYWN0Tm9kZTtcclxuICAgIC8qKiDQmtC70LjQuiDQvdCwINC60LDRgNGC0L7Rh9C60YMgKi9cclxuICAgIG9uQ2xpY2s/OiBSZWFjdC5Nb3VzZUV2ZW50SGFuZGxlcjtcclxuICAgIC8qKiDQodC70L7RgiDQtNC70Y8g0LTQtdC50YHRgtCy0LjRjyAqL1xyXG4gICAgYWN0aW9uU2xvdD86IFJlYWN0LlJlYWN0Tm9kZTtcclxufTtcclxuXHJcbmNvbnN0IENhcmQ6IFJlYWN0LkZDPENhcmRQcm9wcz4gPSAocHJvcHMpID0+IHtcclxuXHJcbiAgICByZXR1cm4gKFxyXG4gICAgICAgIDxkaXYgXHJcbiAgICAgICAgICAgIGNsYXNzTmFtZT17Y2xhc3NOYW1lcyh7XHJcbiAgICAgICAgICAgICAgICBbcHJvcHMuY2xhc3NOYW1lIHx8ICcnXTogdHJ1ZSxcclxuICAgICAgICAgICAgICAgIFtzdHlsZXMuY2FyZF06IHRydWUsIFxyXG4gICAgICAgICAgICB9KX1cclxuICAgICAgICAgICAgb25DbGljaz17cHJvcHMub25DbGlja31cclxuICAgICAgICA+XHJcbiAgICAgICAgICAgIDxpbWcgY2xhc3NOYW1lPXtzdHlsZXNbJ2NhcmRfX2ltZyddfSBhbHQ9J9GC0L7QstCw0YAnIHNyYz17cHJvcHMuaW1hZ2V9IC8+XHJcbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPXtzdHlsZXNbJ2NhcmRfX2luZm8nXX0+XHJcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT17c3R5bGVzWydjYXJkX19pbmZvX190ZXh0J119PlxyXG4gICAgICAgICAgICAgICAgICAgIHtwcm9wcy5jYXB0aW9uU2xvdCAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8VGV4dCB0YWc9J3AnIHZpZXc9J3AtMTQnIHdlaWdodD0nbWVkaXVtJyBjb2xvcj0nc2Vjb25kYXJ5Jz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtwcm9wcy5jYXB0aW9uU2xvdH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9UZXh0PlxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICA8VGV4dCBcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPXtzdHlsZXNbJ2NhcmRfX2luZm9fX3RleHRfX3RpdGxlJ119XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRhZz0ncCcgdmlldz0ncC0yMCcgd2VpZ2h0PSdtZWRpdW0nXHJcbiAgICAgICAgICAgICAgICAgICAgPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB7cHJvcHMudGl0bGV9XHJcbiAgICAgICAgICAgICAgICAgICAgPC9UZXh0PlxyXG4gICAgICAgICAgICAgICAgICAgIDxUZXh0IFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9e3N0eWxlc1snY2FyZF9faW5mb19fdGV4dF9fc3VidGl0bGUnXX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgdGFnPSdwJyB2aWV3PSdwLTE2JyBjb2xvcj0nc2Vjb25kYXJ5J1xyXG4gICAgICAgICAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICAgICAgICAgICAge3Byb3BzLnN1YnRpdGxlfVxyXG4gICAgICAgICAgICAgICAgICAgIDwvVGV4dD5cclxuICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9e3N0eWxlc1snY2FyZF9faW5mb19fc2xvdCddfT5cclxuICAgICAgICAgICAgICAgICAgICB7cHJvcHMuY29udGVudFNsb3QgJiZcclxuICAgICAgICAgICAgICAgICAgICAgICAgPFRleHQgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9e3N0eWxlc1snY2FyZF9faW5mb19fc2xvdF9fY29udGVudCddfSBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhZz0nZGl2JyB2aWV3PSdwLTE4JyB3ZWlnaHQ9J2JvbGQnXHJcbiAgICAgICAgICAgICAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtwcm9wcy5jb250ZW50U2xvdH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9UZXh0PlxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB7cHJvcHMuYWN0aW9uU2xvdH1cclxuICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICA8L2Rpdj5cclxuICAgIClcclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IG1lbW8oQ2FyZCk7XHJcbiIsImV4cG9ydCB7IGRlZmF1bHQgfSBmcm9tICcuL0NhcmQnO1xyXG5leHBvcnQgKiBmcm9tICcuL0NhcmQnO1xyXG4iLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCdcclxuaW1wb3J0IEljb24sIHsgSWNvblByb3BzIH0gZnJvbSAnLi4vSWNvbic7XHJcblxyXG5cclxuY29uc3QgVGltZUljb246IFJlYWN0LkZDPEljb25Qcm9wcz4gPSAocHJvcHMpID0+IHtcclxuXHJcbiAgICByZXR1cm4gKFxyXG4gICAgICAgIDxJY29uIFxyXG4gICAgICAgICAgICB7Li4ucHJvcHN9XHJcbiAgICAgICAgICAgIHZpZXdCb3g9JzAgMCAxNCAxNCdcclxuICAgICAgICAgICAgd2lkdGg9JzE0J1xyXG4gICAgICAgICAgICBoZWlnaHQ9JzE0J1xyXG4gICAgICAgID5cclxuICAgICAgICAgICAgPHBhdGggXHJcbiAgICAgICAgICAgICAgICBkPVwiTTExLjE4MTggMUwxMyAyLjgxODE4TTEwLjgxODIgMTAuODE4MkwxMi4yNzI3IDEzTTIuODE4MTggMUwxIDIuODE4MThNMy4xODE4MiAxMC44MTgyTDEuNzI3MjcgMTNNNi44MTgxOCAzLjkwOTA5VjcuMTgxODJIOC42MzYzNk0xMi4yNzI3IDdDMTIuMjcyNyA5LjkxMjA3IDkuOTEyMDcgMTIuMjcyNyA3IDEyLjI3MjdDNC4wODc5NSAxMi4yNzI3IDEuNzI3MjcgOS45MTIwNyAxLjcyNzI3IDdDMS43MjcyNyA0LjA4Nzk2IDQuMDg3OTUgMS43MjcyNyA3IDEuNzI3MjdDOS45MTIwNyAxLjcyNzI3IDEyLjI3MjcgNC4wODc5NiAxMi4yNzI3IDdaXCIgXHJcbiAgICAgICAgICAgICAgICBzdHJva2U9XCIjQjU0NjBGXCIgXHJcbiAgICAgICAgICAgICAgICBzdHJva2VXaWR0aD1cIjEuNVwiIFxyXG4gICAgICAgICAgICAgICAgc3Ryb2tlTGluZWNhcD1cInJvdW5kXCIgXHJcbiAgICAgICAgICAgICAgICBzdHJva2VMaW5lam9pbj1cInJvdW5kXCIvPlxyXG4gICAgICAgIDwvSWNvbj5cclxuICAgIClcclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgVGltZUljb247XHJcbiIsImV4cG9ydCB7IGRlZmF1bHQgfSBmcm9tICcuL1RpbWVJY29uJzsiLCJcbiAgICAgIGltcG9ydCBBUEkgZnJvbSBcIiEuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIjtcbiAgICAgIGltcG9ydCBkb21BUEkgZnJvbSBcIiEuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydEZuIGZyb20gXCIhLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qc1wiO1xuICAgICAgaW1wb3J0IHNldEF0dHJpYnV0ZXMgZnJvbSBcIiEuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRTdHlsZUVsZW1lbnQgZnJvbSBcIiEuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanNcIjtcbiAgICAgIGltcG9ydCBzdHlsZVRhZ1RyYW5zZm9ybUZuIGZyb20gXCIhLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanNcIjtcbiAgICAgIGltcG9ydCBjb250ZW50LCAqIGFzIG5hbWVkRXhwb3J0IGZyb20gXCIhIS4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9ydWxlU2V0WzFdLnJ1bGVzWzBdLnVzZVsxXSEuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvcG9zdGNzcy1sb2FkZXIvZGlzdC9janMuanM/P3J1bGVTZXRbMV0ucnVsZXNbMF0udXNlWzJdIS4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL1JlY2lwZUNhcmRDYXB0aW9uLm1vZHVsZS5zY3NzXCI7XG4gICAgICBcbiAgICAgIFxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtID0gc3R5bGVUYWdUcmFuc2Zvcm1Gbjtcbm9wdGlvbnMuc2V0QXR0cmlidXRlcyA9IHNldEF0dHJpYnV0ZXM7XG5vcHRpb25zLmluc2VydCA9IGluc2VydEZuLmJpbmQobnVsbCwgXCJoZWFkXCIpO1xub3B0aW9ucy5kb21BUEkgPSBkb21BUEk7XG5vcHRpb25zLmluc2VydFN0eWxlRWxlbWVudCA9IGluc2VydFN0eWxlRWxlbWVudDtcblxudmFyIHVwZGF0ZSA9IEFQSShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbmV4cG9ydCAqIGZyb20gXCIhIS4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9ydWxlU2V0WzFdLnJ1bGVzWzBdLnVzZVsxXSEuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvcG9zdGNzcy1sb2FkZXIvZGlzdC9janMuanM/P3J1bGVTZXRbMV0ucnVsZXNbMF0udXNlWzJdIS4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL1JlY2lwZUNhcmRDYXB0aW9uLm1vZHVsZS5zY3NzXCI7XG4gICAgICAgZXhwb3J0IGRlZmF1bHQgY29udGVudCAmJiBjb250ZW50LmxvY2FscyA/IGNvbnRlbnQubG9jYWxzIDogdW5kZWZpbmVkO1xuIiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSBcInJlYWN0XCI7XHJcbmltcG9ydCBUaW1lSWNvbiBmcm9tIFwiY29tcG9uZW50cy9pY29ucy9UaW1lSWNvblwiO1xyXG5pbXBvcnQgc3R5bGVzIGZyb20gJy4vUmVjaXBlQ2FyZENhcHRpb24ubW9kdWxlLnNjc3MnO1xyXG5cclxuaW50ZXJmYWNlIFJlY2lwZUNhcmRDYXB0aW9uUHJvcHMge1xyXG4gICAgcmVhZHlJbk1pbnV0ZXM6IG51bWJlclxyXG59XHJcblxyXG5jb25zdCBSZWNpcGVDYXJkQ2FwdGlvbjogUmVhY3QuRkM8UmVjaXBlQ2FyZENhcHRpb25Qcm9wcz4gPSAoe1xyXG4gICAgcmVhZHlJbk1pbnV0ZXNcclxufSkgPT4ge1xyXG5cclxuICAgIHJldHVybiAoXHJcbiAgICAgICAgPHNwYW4gY2xhc3NOYW1lPXtzdHlsZXNbXCJyZWNpcGUtY2FyZC1jYXB0aW9uXCJdfT5cclxuICAgICAgICAgICAgPFRpbWVJY29uIC8+XHJcbiAgICAgICAgICAgIDxzcGFuPntyZWFkeUluTWludXRlc30gbWludXRlczwvc3Bhbj5cclxuICAgICAgICA8L3NwYW4+XHJcbiAgICApXHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IFJlY2lwZUNhcmRDYXB0aW9uOyIsImV4cG9ydCB7IGRlZmF1bHQgfSBmcm9tIFwiLi9SZWNpcGVDYXJkQ2FwdGlvblwiOyIsImltcG9ydCB7IElMb2NhbFN0b3JlIH0gZnJvbSBcImhvb2tzL3VzZUxvY2FsU3RvcmVcIjtcclxuaW1wb3J0IHsgYWN0aW9uLCBjb21wdXRlZCwgbWFrZU9ic2VydmFibGUsIG9ic2VydmFibGUgfSBmcm9tIFwibW9ieFwiO1xyXG5pbXBvcnQgeyBSZWNpcGVDb2xsZWN0aW9uVW5pdFR5cGUgfSBmcm9tIFwidHlwZXMvYXBpVHlwZXNcIjtcclxuXHJcbmV4cG9ydCB0eXBlIENhcmRSZWNpcGVUeXBlID0ge1xyXG4gICAgaWQ6IG51bWJlcixcclxuICAgIHJlYWR5SW5NaW51dGVzOiBudW1iZXIsXHJcbiAgICB0aXRsZTogc3RyaW5nLFxyXG4gICAgZGVzY3JpYmU6IHN0cmluZyxcclxuICAgIGtjYWw6IHN0cmluZyxcclxuICAgIGltYWdlOiBzdHJpbmcsXHJcbn1cclxuXHJcbnR5cGUgUHJpdmF0ZUZpZWxkcyA9ICdfc2F2ZWRDYXJkUmVjaXBlcycgfCAnX2Z1bGxQcmVmaXgnO1xyXG5cclxuZXhwb3J0IGNsYXNzIExvY2FsU3RvcmFnZSBpbXBsZW1lbnRzIElMb2NhbFN0b3JlIHtcclxuXHJcbiAgICBwcml2YXRlIF9wcmVmaXggPSAncmVjaXBlJztcclxuICAgIHByaXZhdGUgX2Z1bGxQcmVmaXggPSAncmVjaXBlcyc7XHJcbiAgICBwcml2YXRlIF9zYXZlZENhcmRSZWNpcGVzOiBDYXJkUmVjaXBlVHlwZVtdID0gW107XHJcblxyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgbWFrZU9ic2VydmFibGU8TG9jYWxTdG9yYWdlLCBQcml2YXRlRmllbGRzPih0aGlzLCB7XHJcbiAgICAgICAgICAgIF9zYXZlZENhcmRSZWNpcGVzOiBvYnNlcnZhYmxlLnJlZixcclxuICAgICAgICAgICAgX2Z1bGxQcmVmaXg6IG9ic2VydmFibGUsXHJcbiAgICAgICAgICAgIGRlbGV0ZVJlY2lwZTogYWN0aW9uLmJvdW5kLFxyXG4gICAgICAgICAgICBhZGRTYXZlZFJlY2lwZTogYWN0aW9uLmJvdW5kLFxyXG4gICAgICAgICAgICBjaGVja1JlY2lwZUluU2F2ZWQ6IGFjdGlvbi5ib3VuZCxcclxuICAgICAgICAgICAgbG9hZGluZ1NhdmVkOiBhY3Rpb24uYm91bmQsXHJcbiAgICAgICAgICAgIGNhcmRzOiBjb21wdXRlZFxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIGdldEl0ZW1OYW1lKGlkOiBudW1iZXIgfCBzdHJpbmcsIC4uLmFyZ3M6IEFycmF5PHN0cmluZyB8IG51bWJlcj4pIHtcclxuICAgICAgICByZXR1cm4gWyB0aGlzLl9wcmVmaXgsIGlkLCAuLi5hcmdzIF0uam9pbignLScpO1xyXG4gICAgfVxyXG5cclxuICAgIGFkZFJlY2lwZVZhbHVlcyhyZWNpcGU6IFJlY2lwZUNvbGxlY3Rpb25Vbml0VHlwZSkge1xyXG4gICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKHRoaXMuZ2V0SXRlbU5hbWUocmVjaXBlLmlkLCAncmVhZHlJbk1pbnV0ZXMnKSwgcmVjaXBlLnJlYWR5SW5NaW51dGVzLnRvU3RyaW5nKCkpO1xyXG4gICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKHRoaXMuZ2V0SXRlbU5hbWUocmVjaXBlLmlkLCAndGl0bGUnKSwgcmVjaXBlLnRpdGxlKTtcclxuICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSh0aGlzLmdldEl0ZW1OYW1lKHJlY2lwZS5pZCwgJ2Rlc2NyaWJlJyksIHJlY2lwZS5kZXNjcmliZSk7XHJcbiAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0odGhpcy5nZXRJdGVtTmFtZShyZWNpcGUuaWQsICdrY2FsJyksIHJlY2lwZS5rY2FsKTtcclxuICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSh0aGlzLmdldEl0ZW1OYW1lKHJlY2lwZS5pZCwgJ2ltYWdlJyksIHJlY2lwZS5pbWFnZSk7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0U2F2ZWRSZWNpcGUoaWQ6IHN0cmluZyk6IENhcmRSZWNpcGVUeXBlIHtcclxuICAgICAgICBsZXQgY2FyZFJlY2lwZTogQ2FyZFJlY2lwZVR5cGUgPSB7fSBhcyBDYXJkUmVjaXBlVHlwZTtcclxuICAgICAgICBjYXJkUmVjaXBlLmlkID0gTnVtYmVyKGlkKTtcclxuICAgICAgICBjYXJkUmVjaXBlLnJlYWR5SW5NaW51dGVzID0gTnVtYmVyKGxvY2FsU3RvcmFnZS5nZXRJdGVtKHRoaXMuZ2V0SXRlbU5hbWUoaWQsICdyZWFkeUluTWludXRlcycpKSB8fCAnMCcpO1xyXG4gICAgICAgIGNhcmRSZWNpcGUudGl0bGUgPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbSh0aGlzLmdldEl0ZW1OYW1lKGlkLCAndGl0bGUnKSkgfHwgJyc7XHJcbiAgICAgICAgY2FyZFJlY2lwZS5kZXNjcmliZSA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKHRoaXMuZ2V0SXRlbU5hbWUoaWQsICdkZXNjcmliZScpKSB8fCAnJztcclxuICAgICAgICBjYXJkUmVjaXBlLmtjYWwgPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbSh0aGlzLmdldEl0ZW1OYW1lKGlkLCAna2NhbCcpKSB8fCAnJztcclxuICAgICAgICBjYXJkUmVjaXBlLmltYWdlID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0odGhpcy5nZXRJdGVtTmFtZShpZCwgJ2ltYWdlJykpIHx8ICcnO1xyXG4gICAgICAgIHJldHVybiBjYXJkUmVjaXBlO1xyXG4gICAgfVxyXG5cclxuICAgIGdldEFsbFJlY2lwZXMoKTogQ2FyZFJlY2lwZVR5cGVbXSB7XHJcbiAgICAgICAgY29uc3QgcmVjaXBlTGlzdCA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKHRoaXMuX2Z1bGxQcmVmaXgpIHx8ICcnO1xyXG4gICAgICAgIGlmIChyZWNpcGVMaXN0ICE9PSAnJykge1xyXG4gICAgICAgICAgICBjb25zdCBpZExpc3QgPSByZWNpcGVMaXN0LnNwbGl0KCcsJyk7XHJcbiAgICAgICAgICAgIHJldHVybiBpZExpc3QubWFwKChzdHJJZCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0U2F2ZWRSZWNpcGUoc3RySWQpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIFtdO1xyXG4gICAgfVxyXG5cclxuICAgIGNoZWNrUmVjaXBlSW5TYXZlZChpZDogbnVtYmVyKSB7XHJcbiAgICAgICAgY29uc3QgaW5kZXggPSB0aGlzLl9zYXZlZENhcmRSZWNpcGVzLm1hcCgoY2FyZCkgPT4gY2FyZC5pZCkuaW5kZXhPZihpZCk7XHJcbiAgICAgICAgcmV0dXJuIGluZGV4ICE9PSAtMTtcclxuICAgIH1cclxuXHJcbiAgICBkZWxldGVSZWNpcGUoaWQ6IG51bWJlcikge1xyXG4gICAgICAgIGNvbnN0IHJlY2lwZUxpc3QgPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbSh0aGlzLl9mdWxsUHJlZml4KSB8fCAnJztcclxuICAgICAgICBjb25zdCBpZExpc3QgPSByZWNpcGVMaXN0LnNwbGl0KCcsJyk7XHJcbiAgICAgICAgY29uc3QgaW5kZXggPSBpZExpc3QuaW5kZXhPZihpZC50b1N0cmluZygpKTtcclxuICAgICAgICBpZiAoaW5kZXggIT09IC0xKSB7XHJcbiAgICAgICAgICAgIGlkTGlzdC5zcGxpY2UoaW5kZXgsIDEpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSh0aGlzLl9mdWxsUHJlZml4LCBbLi4uaWRMaXN0XS5qb2luKCcsJykpO1xyXG4gICAgICAgIHRoaXMubG9hZGluZ1NhdmVkKCk7XHJcbiAgICB9XHJcblxyXG4gICAgYWRkU2F2ZWRSZWNpcGUocmVjaXBlOiBSZWNpcGVDb2xsZWN0aW9uVW5pdFR5cGUpIHtcclxuICAgICAgICBjb25zdCByZWNpcGVMaXN0ID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0odGhpcy5fZnVsbFByZWZpeCk7XHJcbiAgICAgICAgaWYgKCFyZWNpcGVMaXN0KSB7XHJcbiAgICAgICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKHRoaXMuX2Z1bGxQcmVmaXgsIHJlY2lwZS5pZC50b1N0cmluZygpKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSh0aGlzLl9mdWxsUHJlZml4LCBbcmVjaXBlTGlzdCwgcmVjaXBlLmlkLnRvU3RyaW5nKCldLmpvaW4oJywnKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuYWRkUmVjaXBlVmFsdWVzKHJlY2lwZSk7XHJcbiAgICAgICAgdGhpcy5sb2FkaW5nU2F2ZWQoKTtcclxuICAgIH1cclxuXHJcbiAgICBsb2FkaW5nU2F2ZWQoKSB7XHJcbiAgICAgICAgdGhpcy5fc2F2ZWRDYXJkUmVjaXBlcyA9IHRoaXMuZ2V0QWxsUmVjaXBlcygpO1xyXG4gICAgfVxyXG5cclxuICAgIGdldCBjYXJkcygpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fc2F2ZWRDYXJkUmVjaXBlcztcclxuICAgIH1cclxuXHJcbiAgICBkZXN0cm95KCkge1xyXG4gICAgICAgIHRoaXMuX3NhdmVkQ2FyZFJlY2lwZXMgPSBbXTtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgbmV3IExvY2FsU3RvcmFnZSgpOyIsImV4cG9ydCB7IGRlZmF1bHQgfSBmcm9tICcuL0xvY2FsU3RvcmFnZSc7IiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSBcInJlYWN0XCI7XHJcbmltcG9ydCB7IHVzZVN0YXRlLCB1c2VFZmZlY3QgfSBmcm9tIFwicmVhY3RcIjtcclxuaW1wb3J0IENhcmQgZnJvbSBcImNvbXBvbmVudHMvQ2FyZFwiO1xyXG5pbXBvcnQgeyBDYXJkUmVjaXBlVHlwZSB9IGZyb20gXCJzdG9yZS9Mb2NhbFN0b3JhZ2UvTG9jYWxTdG9yYWdlXCI7XHJcbmltcG9ydCB7IFJlY2lwZUNvbGxlY3Rpb25Vbml0VHlwZSB9IGZyb20gXCJ0eXBlcy9hcGlUeXBlc1wiO1xyXG5pbXBvcnQgeyB1c2VOYXZpZ2F0ZSB9IGZyb20gXCJyZWFjdC1yb3V0ZXItZG9tXCI7XHJcbmltcG9ydCBCdXR0b24gZnJvbSBcImNvbXBvbmVudHMvQnV0dG9uXCI7XHJcbmltcG9ydCBSZWNpcGVDYXJkQ2FwdGlvbiBmcm9tIFwiLi9jb21wb25lbnRzL1JlY2lwZUNhcmRDYXB0aW9uXCI7XHJcbmltcG9ydCBsb2NhbFN0b3JhZ2UgZnJvbSBcInN0b3JlL0xvY2FsU3RvcmFnZVwiO1xyXG5pbXBvcnQgeyBvYnNlcnZlciB9IGZyb20gXCJtb2J4LXJlYWN0LWxpdGVcIjtcclxuXHJcbmludGVyZmFjZSBSZWNpcGVDYXJkUHJvcHMge1xyXG4gICAgbW9kZT86ICdSRUNJUEVTJyB8ICdTQVZFRCcsXHJcbiAgICByZWNpcGU6IENhcmRSZWNpcGVUeXBlIHwgUmVjaXBlQ29sbGVjdGlvblVuaXRUeXBlXHJcbn1cclxuXHJcbmNvbnN0IFJlY2lwZUNhcmQ6IFJlYWN0LkZDPFJlY2lwZUNhcmRQcm9wcz4gPSAoe1xyXG4gICAgbW9kZSA9ICdSRUNJUEVTJyxcclxuICAgIHJlY2lwZVxyXG59KSA9PiB7XHJcblxyXG4gICAgY29uc3QgbmF2aWdhdGUgPSB1c2VOYXZpZ2F0ZSgpO1xyXG4gICAgY29uc3QgeyBhZGRTYXZlZFJlY2lwZSwgY2hlY2tSZWNpcGVJblNhdmVkLCBkZWxldGVSZWNpcGUsIGNhcmRzIH0gPSBsb2NhbFN0b3JhZ2U7XHJcbiAgICBjb25zdCBbaXNTYXZlZCwgc2V0SXNTYXZlZF0gPSB1c2VTdGF0ZShjaGVja1JlY2lwZUluU2F2ZWQocmVjaXBlLmlkKSk7XHJcblxyXG4gICAgdXNlRWZmZWN0KCgpID0+IHtcclxuICAgICAgICBzZXRJc1NhdmVkKGNoZWNrUmVjaXBlSW5TYXZlZChyZWNpcGUuaWQpKTtcclxuICAgIH0sIFtjYXJkc10pO1xyXG5cclxuICAgIGNvbnN0IG5hdmlnYXRlVG9SZWNpcGVQYWdlID0gKGlkOiBudW1iZXIpID0+IHtcclxuICAgICAgICBuYXZpZ2F0ZSgnL3JlY2lwZS8nICsgaWQpO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IGdldEJ1dHRvbldpdGhDYWxsQmFjayA9ICh0ZXh0OiBzdHJpbmcsIGNhbGxiYWNrOiAoKSA9PiB2b2lkKSA9PiB7XHJcbiAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgICAgPEJ1dHRvbiBvbkNsaWNrPXsoZSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcclxuICAgICAgICAgICAgICAgIGNhbGxiYWNrKCk7XHJcbiAgICAgICAgICAgIH19PlxyXG4gICAgICAgICAgICAgICAge3RleHR9XHJcbiAgICAgICAgICAgIDwvQnV0dG9uPlxyXG4gICAgICAgIClcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBnZXRCdXR0b25JblJlY2lwZUxpc3QgPSAocmVjaXBlOiBDYXJkUmVjaXBlVHlwZSB8IFJlY2lwZUNvbGxlY3Rpb25Vbml0VHlwZSkgPT4ge1xyXG4gICAgICAgIGlmICghaXNTYXZlZCkge1xyXG4gICAgICAgICAgICByZXR1cm4gZ2V0QnV0dG9uV2l0aENhbGxCYWNrKCdTYXZlJywgKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgYWRkU2F2ZWRSZWNpcGUocmVjaXBlIGFzIFJlY2lwZUNvbGxlY3Rpb25Vbml0VHlwZSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIGdldEJ1dHRvbldpdGhDYWxsQmFjaygnSW4gc2F2ZXMnLCAoKSA9PiB7XHJcbiAgICAgICAgICAgIG5hdmlnYXRlKCcvc2F2ZWQnKTtcclxuICAgICAgICB9KVxyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IGdldEFjdGlvblNsb3RCeU1vZGUgPSAocmVjaXBlOiBDYXJkUmVjaXBlVHlwZSB8IFJlY2lwZUNvbGxlY3Rpb25Vbml0VHlwZSkgPT4ge1xyXG4gICAgICAgIHN3aXRjaChtb2RlKSB7XHJcbiAgICAgICAgICAgIGNhc2UgJ1JFQ0lQRVMnOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGdldEJ1dHRvbkluUmVjaXBlTGlzdChyZWNpcGUpO1xyXG4gICAgICAgICAgICBjYXNlICdTQVZFRCc6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZ2V0QnV0dG9uV2l0aENhbGxCYWNrKCdEZWxldGUnLCAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgZGVsZXRlUmVjaXBlKHJlY2lwZS5pZCk7XHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gKFxyXG4gICAgICAgIDxDYXJkXHJcbiAgICAgICAgICAgIGltYWdlPXtyZWNpcGUuaW1hZ2V9XHJcbiAgICAgICAgICAgIHRpdGxlPXtyZWNpcGUudGl0bGV9XHJcbiAgICAgICAgICAgIHN1YnRpdGxlPXtyZWNpcGUuZGVzY3JpYmV9XHJcbiAgICAgICAgICAgIGNvbnRlbnRTbG90PXtyZWNpcGUua2NhbH1cclxuICAgICAgICAgICAgb25DbGljaz17KCkgPT4geyBuYXZpZ2F0ZVRvUmVjaXBlUGFnZShyZWNpcGUuaWQpIH19XHJcbiAgICAgICAgICAgIGNhcHRpb25TbG90PXtcclxuICAgICAgICAgICAgICAgIDxSZWNpcGVDYXJkQ2FwdGlvbiBcclxuICAgICAgICAgICAgICAgICAgICByZWFkeUluTWludXRlcz17cmVjaXBlLnJlYWR5SW5NaW51dGVzfSBcclxuICAgICAgICAgICAgICAgIC8+XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgYWN0aW9uU2xvdD17Z2V0QWN0aW9uU2xvdEJ5TW9kZShyZWNpcGUpfVxyXG4gICAgICAgIC8+XHJcbiAgICApXHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IG9ic2VydmVyKFJlY2lwZUNhcmQpOyIsImV4cG9ydCB7IGRlZmF1bHQgfSBmcm9tICcuL1JlY2lwZUNhcmQnOyIsIlxuICAgICAgaW1wb3J0IEFQSSBmcm9tIFwiIS4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiO1xuICAgICAgaW1wb3J0IGRvbUFQSSBmcm9tIFwiIS4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0Rm4gZnJvbSBcIiEuLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzXCI7XG4gICAgICBpbXBvcnQgc2V0QXR0cmlidXRlcyBmcm9tIFwiIS4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydFN0eWxlRWxlbWVudCBmcm9tIFwiIS4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qc1wiO1xuICAgICAgaW1wb3J0IHN0eWxlVGFnVHJhbnNmb3JtRm4gZnJvbSBcIiEuLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qc1wiO1xuICAgICAgaW1wb3J0IGNvbnRlbnQsICogYXMgbmFtZWRFeHBvcnQgZnJvbSBcIiEhLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanM/P3J1bGVTZXRbMV0ucnVsZXNbMF0udXNlWzFdIS4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9wb3N0Y3NzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cnVsZVNldFsxXS5ydWxlc1swXS51c2VbMl0hLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vQ29udGVudC5tb2R1bGUuc2Nzc1wiO1xuICAgICAgXG4gICAgICBcblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybSA9IHN0eWxlVGFnVHJhbnNmb3JtRm47XG5vcHRpb25zLnNldEF0dHJpYnV0ZXMgPSBzZXRBdHRyaWJ1dGVzO1xub3B0aW9ucy5pbnNlcnQgPSBpbnNlcnRGbi5iaW5kKG51bGwsIFwiaGVhZFwiKTtcbm9wdGlvbnMuZG9tQVBJID0gZG9tQVBJO1xub3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7XG5cbnZhciB1cGRhdGUgPSBBUEkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5leHBvcnQgKiBmcm9tIFwiISEuLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cnVsZVNldFsxXS5ydWxlc1swXS51c2VbMV0hLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Bvc3Rjc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9ydWxlU2V0WzFdLnJ1bGVzWzBdLnVzZVsyXSEuLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanMhLi9Db250ZW50Lm1vZHVsZS5zY3NzXCI7XG4gICAgICAgZXhwb3J0IGRlZmF1bHQgY29udGVudCAmJiBjb250ZW50LmxvY2FscyA/IGNvbnRlbnQubG9jYWxzIDogdW5kZWZpbmVkO1xuIiwiaW1wb3J0IHsgb2JzZXJ2ZXIgfSBmcm9tIFwibW9ieC1yZWFjdC1saXRlXCI7XHJcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gXCJyZWFjdFwiO1xyXG5pbXBvcnQgeyB1c2VFZmZlY3QgfSBmcm9tIFwicmVhY3RcIjtcclxuXHJcbmltcG9ydCBMaXN0U2hvd2VyIGZyb20gXCJjb21wb25lbnRzL0xpc3RTaG93ZXJcIjtcclxuXHJcbmltcG9ydCB7IHVzZUxvY2FsU3RvcmUgfSBmcm9tIFwiaG9va3MvdXNlTG9jYWxTdG9yZVwiO1xyXG5pbXBvcnQgUmVjaXBlTGlzdFN0b3JlIGZyb20gXCJzdG9yZS9SZWNpcGVMaXN0U3RvcmVcIjtcclxuXHJcbmltcG9ydCBDb250ZW50RmlsdGVycyBmcm9tIFwiY29tcG9uZW50cy9Db250ZW50RmlsdGVyc1wiO1xyXG5pbXBvcnQgQ29udGVudEhlYWRlciBmcm9tIFwiLi9Db250ZW50SGVhZGVyXCI7XHJcbmltcG9ydCBSZWNpcGVDYXJkIGZyb20gXCJjb21wb25lbnRzL1JlY2lwZUNhcmRcIjtcclxuaW1wb3J0IHNlYXJjaFN0b3JlIGZyb20gXCJzdG9yZS9TZWFyY2hQYXJhbXNTdG9yZVwiO1xyXG5cclxuaW1wb3J0IHsgbWVhbFR5cGVzT3B0aW9ucywgcmVjaXBlc0ZpbHRlcnMgfSBmcm9tIFwiY29uZmlnL2FwaVwiO1xyXG5cclxuaW1wb3J0IHN0eWxlcyBmcm9tICcuL0NvbnRlbnQubW9kdWxlLnNjc3MnO1xyXG5pbXBvcnQgeyBPdGhlclR5cGUgfSBmcm9tIFwiY29tcG9uZW50cy9Db250ZW50RmlsdGVycy9Db250ZW50RmlsdGVyc1wiO1xyXG5cclxuY29uc3QgQ29udGVudDogUmVhY3QuRkMgPSAoKSA9PiB7XHJcblxyXG4gICAgY29uc3QgcmVjaXBlc1N0b3JlID0gdXNlTG9jYWxTdG9yZSgoKSA9PiBuZXcgUmVjaXBlTGlzdFN0b3JlKCkpO1xyXG5cclxuICAgIHVzZUVmZmVjdCgoKSA9PiB7XHJcbiAgICAgICAgcmVjaXBlc1N0b3JlLmxvYWRpbmdMaXN0KHJlY2lwZXNTdG9yZS5nZXRVcmwoXHJcbiAgICAgICAgICAgIHNlYXJjaFN0b3JlLmdldE9mZnNldCgpLFxyXG4gICAgICAgICAgICBzZWFyY2hTdG9yZS5nZXRQYXJhbVBhaXIoJ3F1ZXJ5JyksXHJcbiAgICAgICAgICAgIHNlYXJjaFN0b3JlLmdldFBhcmFtUGFpcigndHlwZScpLFxyXG4gICAgICAgICAgICAuLi5PYmplY3Qua2V5cyhyZWNpcGVzRmlsdGVycykubWFwKChrZXkpID0+IHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBzZWFyY2hTdG9yZS5nZXRQYXJhbVBhaXIoa2V5KTtcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICApKTtcclxuICAgIH0sIFtzZWFyY2hTdG9yZS5zZWFyY2hQYXJhbXMsIHJlY2lwZXNTdG9yZV0pO1xyXG5cclxuICAgIHJldHVybiAoXHJcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9e3N0eWxlc1tcImNvbnRlbnRcIl19PlxyXG4gICAgICAgICAgICA8Q29udGVudEhlYWRlciAvPlxyXG4gICAgICAgICAgICA8Q29udGVudEZpbHRlcnMgXHJcbiAgICAgICAgICAgICAgICBjYXRlZ29yeVRhZz1cInR5cGVcIlxyXG4gICAgICAgICAgICAgICAgY2F0ZWdvcnlPcHRpb25zPXttZWFsVHlwZXNPcHRpb25zfVxyXG4gICAgICAgICAgICAgICAgY2F0ZWdvcnlQbGFjZWhvbGRlcj1cIkNhdGVnb3JpZXNcIlxyXG4gICAgICAgICAgICAgICAgb3RoZXJGaWx0ZXJzPXtyZWNpcGVzRmlsdGVycyBhcyBPdGhlclR5cGV9XHJcbiAgICAgICAgICAgIC8+XHJcbiAgICAgICAgICAgIDxMaXN0U2hvd2VyIFxyXG4gICAgICAgICAgICAgICAgc3RhdHVzPXtyZWNpcGVzU3RvcmUuc3RhdHVzfVxyXG4gICAgICAgICAgICAgICAgdG90YWxDb3VudD17cmVjaXBlc1N0b3JlLnRvdGFsfVxyXG4gICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgICB7cmVjaXBlc1N0b3JlLnJlc3VsdHMubWFwKChyZWNpcGUpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gKCBcclxuICAgICAgICAgICAgICAgICAgICAgICAgPFJlY2lwZUNhcmQgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBrZXk9e3JlY2lwZS5pZH0gXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWNpcGU9e3JlY2lwZX0gXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8+IFxyXG4gICAgICAgICAgICAgICAgICAgIClcclxuICAgICAgICAgICAgICAgIH0pfVxyXG4gICAgICAgICAgICA8L0xpc3RTaG93ZXI+XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICApXHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IG9ic2VydmVyKENvbnRlbnQpOyIsImV4cG9ydCB7IGRlZmF1bHQgfSBmcm9tICcuL0NvbnRlbnQnOyIsIlxuICAgICAgaW1wb3J0IEFQSSBmcm9tIFwiIS4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiO1xuICAgICAgaW1wb3J0IGRvbUFQSSBmcm9tIFwiIS4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0Rm4gZnJvbSBcIiEuLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzXCI7XG4gICAgICBpbXBvcnQgc2V0QXR0cmlidXRlcyBmcm9tIFwiIS4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydFN0eWxlRWxlbWVudCBmcm9tIFwiIS4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qc1wiO1xuICAgICAgaW1wb3J0IHN0eWxlVGFnVHJhbnNmb3JtRm4gZnJvbSBcIiEuLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qc1wiO1xuICAgICAgaW1wb3J0IGNvbnRlbnQsICogYXMgbmFtZWRFeHBvcnQgZnJvbSBcIiEhLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanM/P3J1bGVTZXRbMV0ucnVsZXNbMF0udXNlWzFdIS4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9wb3N0Y3NzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cnVsZVNldFsxXS5ydWxlc1swXS51c2VbMl0hLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vUHJldmlldy5tb2R1bGUuc2Nzc1wiO1xuICAgICAgXG4gICAgICBcblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybSA9IHN0eWxlVGFnVHJhbnNmb3JtRm47XG5vcHRpb25zLnNldEF0dHJpYnV0ZXMgPSBzZXRBdHRyaWJ1dGVzO1xub3B0aW9ucy5pbnNlcnQgPSBpbnNlcnRGbi5iaW5kKG51bGwsIFwiaGVhZFwiKTtcbm9wdGlvbnMuZG9tQVBJID0gZG9tQVBJO1xub3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7XG5cbnZhciB1cGRhdGUgPSBBUEkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5leHBvcnQgKiBmcm9tIFwiISEuLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cnVsZVNldFsxXS5ydWxlc1swXS51c2VbMV0hLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Bvc3Rjc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9ydWxlU2V0WzFdLnJ1bGVzWzBdLnVzZVsyXSEuLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanMhLi9QcmV2aWV3Lm1vZHVsZS5zY3NzXCI7XG4gICAgICAgZXhwb3J0IGRlZmF1bHQgY29udGVudCAmJiBjb250ZW50LmxvY2FscyA/IGNvbnRlbnQubG9jYWxzIDogdW5kZWZpbmVkO1xuIiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSBcInJlYWN0XCI7XHJcbmltcG9ydCB7IG1lbW8gfSBmcm9tIFwicmVhY3RcIjtcclxuaW1wb3J0IGltZyBmcm9tICdhc3NldHMvUHJldmlld0ltYWdlLnN2Zyc7XHJcbmltcG9ydCBzdHlsZXMgZnJvbSAnLi9QcmV2aWV3Lm1vZHVsZS5zY3NzJztcclxuXHJcbmNvbnN0IFByZXZpZXc6IFJlYWN0LkZDID0gKCkgPT4ge1xyXG5cclxuICAgIHJldHVybiAoXHJcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9e3N0eWxlcy5wcmV2aWV3fT5cclxuICAgICAgICAgICAgPGltZyBzcmM9e2ltZ30gYWx0PSdwcmV2aWV3JyAvPlxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgKVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBtZW1vKFByZXZpZXcpOyIsImV4cG9ydCB7IGRlZmF1bHQgfSBmcm9tICcuL1ByZXZpZXcnOyIsIlxuICAgICAgaW1wb3J0IEFQSSBmcm9tIFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiO1xuICAgICAgaW1wb3J0IGRvbUFQSSBmcm9tIFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0Rm4gZnJvbSBcIiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzXCI7XG4gICAgICBpbXBvcnQgc2V0QXR0cmlidXRlcyBmcm9tIFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydFN0eWxlRWxlbWVudCBmcm9tIFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qc1wiO1xuICAgICAgaW1wb3J0IHN0eWxlVGFnVHJhbnNmb3JtRm4gZnJvbSBcIiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qc1wiO1xuICAgICAgaW1wb3J0IGNvbnRlbnQsICogYXMgbmFtZWRFeHBvcnQgZnJvbSBcIiEhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanM/P3J1bGVTZXRbMV0ucnVsZXNbMF0udXNlWzFdIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9wb3N0Y3NzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cnVsZVNldFsxXS5ydWxlc1swXS51c2VbMl0hLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vUmVjaXBlcy5tb2R1bGUuc2Nzc1wiO1xuICAgICAgXG4gICAgICBcblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybSA9IHN0eWxlVGFnVHJhbnNmb3JtRm47XG5vcHRpb25zLnNldEF0dHJpYnV0ZXMgPSBzZXRBdHRyaWJ1dGVzO1xub3B0aW9ucy5pbnNlcnQgPSBpbnNlcnRGbi5iaW5kKG51bGwsIFwiaGVhZFwiKTtcbm9wdGlvbnMuZG9tQVBJID0gZG9tQVBJO1xub3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7XG5cbnZhciB1cGRhdGUgPSBBUEkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5leHBvcnQgKiBmcm9tIFwiISEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cnVsZVNldFsxXS5ydWxlc1swXS51c2VbMV0hLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Bvc3Rjc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9ydWxlU2V0WzFdLnJ1bGVzWzBdLnVzZVsyXSEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanMhLi9SZWNpcGVzLm1vZHVsZS5zY3NzXCI7XG4gICAgICAgZXhwb3J0IGRlZmF1bHQgY29udGVudCAmJiBjb250ZW50LmxvY2FscyA/IGNvbnRlbnQubG9jYWxzIDogdW5kZWZpbmVkO1xuIiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSBcInJlYWN0XCI7XHJcblxyXG5pbXBvcnQgQ29udGVudCBmcm9tIFwiLi9jb21wb25lbnRzL0NvbnRlbnRcIjtcclxuaW1wb3J0IFByZXZpZXcgZnJvbSBcIi4vY29tcG9uZW50cy9QcmV2aWV3XCI7XHJcbmltcG9ydCBzdHlsZXMgZnJvbSAnLi9SZWNpcGVzLm1vZHVsZS5zY3NzJztcclxuXHJcbmNvbnN0IFJlY2lwZXM6IFJlYWN0LkZDID0gKCkgPT4ge1xyXG5cclxuICAgIHJldHVybiAoXHJcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9e3N0eWxlcy5yZWNpcGVzfT5cclxuICAgICAgICAgICAgPFByZXZpZXcgLz5cclxuICAgICAgICAgICAgPENvbnRlbnQgLz5cclxuICAgICAgICA8L2Rpdj5cclxuICAgIClcclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgUmVjaXBlczsiLCJleHBvcnQgeyBkZWZhdWx0IH0gZnJvbSAnLi9SZWNpcGVzJzsiLCJcbiAgICAgIGltcG9ydCBBUEkgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIjtcbiAgICAgIGltcG9ydCBkb21BUEkgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydEZuIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qc1wiO1xuICAgICAgaW1wb3J0IHNldEF0dHJpYnV0ZXMgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRTdHlsZUVsZW1lbnQgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanNcIjtcbiAgICAgIGltcG9ydCBzdHlsZVRhZ1RyYW5zZm9ybUZuIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanNcIjtcbiAgICAgIGltcG9ydCBjb250ZW50LCAqIGFzIG5hbWVkRXhwb3J0IGZyb20gXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9ydWxlU2V0WzFdLnJ1bGVzWzBdLnVzZVsxXSEuLi8uLi8uLi9ub2RlX21vZHVsZXMvcG9zdGNzcy1sb2FkZXIvZGlzdC9janMuanM/P3J1bGVTZXRbMV0ucnVsZXNbMF0udXNlWzJdIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL1BhZ2VUZW1wbGF0ZS5tb2R1bGUuc2Nzc1wiO1xuICAgICAgXG4gICAgICBcblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybSA9IHN0eWxlVGFnVHJhbnNmb3JtRm47XG5vcHRpb25zLnNldEF0dHJpYnV0ZXMgPSBzZXRBdHRyaWJ1dGVzO1xub3B0aW9ucy5pbnNlcnQgPSBpbnNlcnRGbi5iaW5kKG51bGwsIFwiaGVhZFwiKTtcbm9wdGlvbnMuZG9tQVBJID0gZG9tQVBJO1xub3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7XG5cbnZhciB1cGRhdGUgPSBBUEkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5leHBvcnQgKiBmcm9tIFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cnVsZVNldFsxXS5ydWxlc1swXS51c2VbMV0hLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Bvc3Rjc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9ydWxlU2V0WzFdLnJ1bGVzWzBdLnVzZVsyXSEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanMhLi9QYWdlVGVtcGxhdGUubW9kdWxlLnNjc3NcIjtcbiAgICAgICBleHBvcnQgZGVmYXVsdCBjb250ZW50ICYmIGNvbnRlbnQubG9jYWxzID8gY29udGVudC5sb2NhbHMgOiB1bmRlZmluZWQ7XG4iLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCBzdHlsZXMgZnJvbSAnLi9QYWdlVGVtcGxhdGUubW9kdWxlLnNjc3MnO1xyXG5cclxuaW1wb3J0IFRleHQgZnJvbSAnY29tcG9uZW50cy9UZXh0JztcclxuXHJcbmludGVyZmFjZSBQYWdlVGVtcGxhdGVQcm9wcyB7XHJcbiAgICBoZWFkZXJOYW1lOiBzdHJpbmcsXHJcbiAgICBjaGlsZHJlbjogUmVhY3QuUmVhY3ROb2RlLFxyXG59XHJcblxyXG5jb25zdCBQYWdlVGVtcGxhdGU6IFJlYWN0LkZDPFBhZ2VUZW1wbGF0ZVByb3BzPiA9IChwcm9wcykgPT4ge1xyXG5cclxuICAgIHJldHVybiAoXHJcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9e3N0eWxlc1sncGFnZS10ZW1wbGF0ZSddfT5cclxuICAgICAgICAgICAgPFRleHQgXHJcbiAgICAgICAgICAgICAgICB2aWV3PSd0aXRsZSdcclxuICAgICAgICAgICAgICAgIGNsYXNzTmFtZT17c3R5bGVzWydwYWdlLXRlbXBsYXRlX19uYW1lJ119XHJcbiAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICAgIHtwcm9wcy5oZWFkZXJOYW1lfVxyXG4gICAgICAgICAgICA8L1RleHQ+XHJcbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPXtzdHlsZXNbJ3BhZ2UtdGVtcGxhdGVfX2NvbnRlbnQnXX0+XHJcbiAgICAgICAgICAgICAgICB7cHJvcHMuY2hpbGRyZW59XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgKVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBQYWdlVGVtcGxhdGU7IiwiZXhwb3J0IHsgZGVmYXVsdCB9IGZyb20gJy4vUGFnZVRlbXBsYXRlJzsiLCJpbXBvcnQgeyBcclxuICAgIHVybFByZWZpeCwgXHJcbiAgICBpbWFnZVByZWZpeCxcclxuICAgIHBhZ2VFbGVtZW50Q291bnQsIFxyXG4gICAgYXBpS2V5IFxyXG59IGZyb20gXCJjb25maWcvYXBpXCI7XHJcbmltcG9ydCB7IEluZ3JlZGllbnRVbml0IH0gZnJvbSBcInR5cGVzL2FwaVR5cGVzXCI7XHJcbmltcG9ydCBCYXNlTGlzdFN0b3JlIGZyb20gXCJzdG9yZS9CYXNlTGlzdFN0b3JlXCI7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBJbmdyZWRpZW50TGlzdFN0b3JlIGV4dGVuZHMgQmFzZUxpc3RTdG9yZTxJbmdyZWRpZW50VW5pdD4ge1xyXG5cclxuICAgIGdldFVybChcclxuICAgICAgICBvZmZzZXQ6IHN0cmluZyxcclxuICAgICAgICBxdWVyeTogc3RyaW5nLFxyXG4gICAgICAgIC4uLm90aGVyOiBBcnJheTxbc3RyaW5nLCBzdHJpbmcgfCBudWxsXT5cclxuICAgICk6IHN0cmluZyB7XHJcbiAgICAgICAgY29uc3QgcGFyYW1zID0ge1xyXG4gICAgICAgICAgICBudW1iZXI6IHBhZ2VFbGVtZW50Q291bnQsXHJcbiAgICAgICAgICAgIG9mZnNldDogb2Zmc2V0LFxyXG4gICAgICAgICAgICBxdWVyeTogcXVlcnksXHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IHBhdGhVcmwgPSAnc2VhcmNoPyc7XHJcbiAgICAgICAgbGV0IHBhdGhQYXJhbXMgPSBPYmplY3QuZW50cmllcyhwYXJhbXMpLm1hcCgocGFyYW0pID0+IHBhcmFtLmpvaW4oJz0nKSk7XHJcbiAgICAgICAgb3RoZXIuZm9yRWFjaCgoZWxlbWVudCkgPT4ge1xyXG4gICAgICAgICAgICBpZiAoZWxlbWVudFsxXSAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgcGF0aFBhcmFtcy5wdXNoKGVsZW1lbnQuam9pbignPScpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHBhdGhQYXJhbXMucHVzaChbJ2FwaUtleScsIGFwaUtleV0uam9pbignPScpKTtcclxuICAgICAgICBjb25zdCB1cmwgPSB1cmxQcmVmaXggKyAnZm9vZC9pbmdyZWRpZW50cy8nICsgcGF0aFVybCArIFsuLi5wYXRoUGFyYW1zIF0uam9pbignJicpO1xyXG4gICAgICAgIHJldHVybiB1cmw7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0SW1hZ2VVcmwodXJsOiBzdHJpbmcsIHNpemU6IDEwMCB8IDI1MCB8IDUwMCA9IDUwMCkge1xyXG4gICAgICAgIHJldHVybiBgJHtpbWFnZVByZWZpeH1pbmdyZWRpZW50c18ke3NpemV9eCR7c2l6ZX0vJHt1cmx9YDtcclxuICAgIH1cclxufTsiLCJleHBvcnQgeyBkZWZhdWx0IH0gZnJvbSAnLi9JbmdyZWRpZW50TGlzdFN0b3JlJzsiLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tIFwicmVhY3RcIjtcclxuaW1wb3J0IHsgdXNlRWZmZWN0IH0gZnJvbSBcInJlYWN0XCI7XHJcbmltcG9ydCBQYWdlVGVtcGxhdGUgZnJvbSBcImNvbXBvbmVudHMvUGFnZVRlbXBsYXRlXCI7XHJcbmltcG9ydCB7IHVzZUxvY2FsU3RvcmUgfSBmcm9tIFwiaG9va3MvdXNlTG9jYWxTdG9yZVwiO1xyXG5pbXBvcnQgQ2FyZCBmcm9tIFwiY29tcG9uZW50cy9DYXJkXCI7XHJcbmltcG9ydCB7IG9ic2VydmVyIH0gZnJvbSBcIm1vYngtcmVhY3QtbGl0ZVwiO1xyXG5pbXBvcnQgSW5ncmVkaWVudExpc3RTdG9yZSBmcm9tIFwic3RvcmUvSW5ncmVkaWVudExpc3RTdG9yZVwiO1xyXG5pbXBvcnQgTGlzdFNob3dlciBmcm9tIFwiY29tcG9uZW50cy9MaXN0U2hvd2VyXCI7XHJcbmltcG9ydCBDb250ZW50RmlsdGVycyBmcm9tIFwiY29tcG9uZW50cy9Db250ZW50RmlsdGVyc1wiO1xyXG5pbXBvcnQgeyBpbnRvbGVyYW5jZVR5cGVzT3B0aW9ucyB9IGZyb20gXCJjb25maWcvYXBpXCI7XHJcbmltcG9ydCBzZWFyY2hTdG9yZSBmcm9tIFwic3RvcmUvU2VhcmNoUGFyYW1zU3RvcmVcIjtcclxuaW1wb3J0IHsgaW5ncmVkaWVudEZpbHRlcnMgfSBmcm9tIFwiY29uZmlnL2FwaVwiO1xyXG5pbXBvcnQgeyBPdGhlclR5cGUgfSBmcm9tIFwiY29tcG9uZW50cy9Db250ZW50RmlsdGVycy9Db250ZW50RmlsdGVyc1wiO1xyXG5cclxuY29uc3QgSW5ncmVkaWVudHM6IFJlYWN0LkZDID0gKCkgPT4ge1xyXG5cclxuICAgIGNvbnN0IGluZ3JlZGllbnRTdG9yZSA9IHVzZUxvY2FsU3RvcmUoKCkgPT4gbmV3IEluZ3JlZGllbnRMaXN0U3RvcmUoKSk7XHJcblxyXG4gICAgdXNlRWZmZWN0KCgpID0+IHtcclxuICAgICAgICBjb25zdCBxdWVyeVN0ciA9IHNlYXJjaFN0b3JlLmdldFBhcmFtKCdxdWVyeScpO1xyXG4gICAgICAgIGlmIChxdWVyeVN0ciAhPT0gJycpIHtcclxuICAgICAgICAgICAgaW5ncmVkaWVudFN0b3JlLmxvYWRpbmdMaXN0KGluZ3JlZGllbnRTdG9yZS5nZXRVcmwoXHJcbiAgICAgICAgICAgICAgICBzZWFyY2hTdG9yZS5nZXRPZmZzZXQoKSxcclxuICAgICAgICAgICAgICAgIHNlYXJjaFN0b3JlLmdldFBhcmFtKCdxdWVyeScpLFxyXG4gICAgICAgICAgICAgICAgc2VhcmNoU3RvcmUuZ2V0UGFyYW1QYWlyKCdpbnRvbGVyYW5jZXMnKSxcclxuICAgICAgICAgICAgKSk7XHJcbiAgICAgICAgfVxyXG4gICAgfSwgW3NlYXJjaFN0b3JlLnNlYXJjaFBhcmFtcywgaW5ncmVkaWVudFN0b3JlXSk7XHJcblxyXG4gICAgcmV0dXJuIChcclxuICAgICAgICA8UGFnZVRlbXBsYXRlIGhlYWRlck5hbWU9XCJJbmdyZWRpZW50c1wiPlxyXG4gICAgICAgICAgICA8Q29udGVudEZpbHRlcnMgXHJcbiAgICAgICAgICAgICAgICBpbnB1dFBsYWNlaG9sZGVyPVwiRW50ZXIgaW5ncmVkaWVudHNcIlxyXG4gICAgICAgICAgICAgICAgY2F0ZWdvcnlUYWc9XCJpbnRvbGVyYW5jZXNcIlxyXG4gICAgICAgICAgICAgICAgY2F0ZWdvcnlQbGFjZWhvbGRlcj1cIkludG9sZXJhbmNlc1wiXHJcbiAgICAgICAgICAgICAgICBjYXRlZ29yeU9wdGlvbnM9e2ludG9sZXJhbmNlVHlwZXNPcHRpb25zfVxyXG4gICAgICAgICAgICAgICAgb3RoZXJGaWx0ZXJzPXtpbmdyZWRpZW50RmlsdGVycyBhcyBPdGhlclR5cGV9XHJcbiAgICAgICAgICAgIC8+XHJcbiAgICAgICAgICAgIDxMaXN0U2hvd2VyIFxyXG4gICAgICAgICAgICAgICAgc3RhdHVzPXtpbmdyZWRpZW50U3RvcmUuc3RhdHVzfVxyXG4gICAgICAgICAgICAgICAgdG90YWxDb3VudD17aW5ncmVkaWVudFN0b3JlLnRvdGFsfVxyXG4gICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgICB7aW5ncmVkaWVudFN0b3JlLnJlc3VsdHMubWFwKChpbmdyZWRpZW50KSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgICAgICAgICAgICAgICAgPENhcmQgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBrZXk9e2luZ3JlZGllbnQuaWR9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbWFnZT17aW5ncmVkaWVudFN0b3JlLmdldEltYWdlVXJsKGluZ3JlZGllbnQuaW1hZ2UpfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU9e2luZ3JlZGllbnQubmFtZX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1YnRpdGxlPXsnJ31cclxuICAgICAgICAgICAgICAgICAgICAgICAgLz5cclxuICAgICAgICAgICAgICAgICAgICApXHJcbiAgICAgICAgICAgICAgICB9KX1cclxuICAgICAgICAgICAgPC9MaXN0U2hvd2VyPlxyXG4gICAgICAgIDwvUGFnZVRlbXBsYXRlPlxyXG4gICAgKVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBvYnNlcnZlcihJbmdyZWRpZW50cyk7IiwiZXhwb3J0IHsgZGVmYXVsdCB9IGZyb20gXCIuL0luZ3JlZGllbnRzXCI7IiwiaW1wb3J0IHsgXHJcbiAgICB1cmxQcmVmaXgsIFxyXG4gICAgcGFnZUVsZW1lbnRDb3VudCwgXHJcbiAgICBhcGlLZXkgXHJcbn0gZnJvbSBcImNvbmZpZy9hcGlcIjtcclxuaW1wb3J0IHsgUHJvZHVjdFVuaXQgfSBmcm9tIFwidHlwZXMvYXBpVHlwZXNcIjtcclxuaW1wb3J0IEJhc2VMaXN0U3RvcmUgZnJvbSBcInN0b3JlL0Jhc2VMaXN0U3RvcmVcIjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFByb2R1Y3RMaXN0U3RvcmUgZXh0ZW5kcyBCYXNlTGlzdFN0b3JlPFByb2R1Y3RVbml0PiB7XHJcblxyXG4gICAgZ2V0VXJsKFxyXG4gICAgICAgIG9mZnNldDogc3RyaW5nLFxyXG4gICAgICAgIHF1ZXJ5OiBzdHJpbmcsXHJcbiAgICAgICAgLi4ub3RoZXI6IEFycmF5PFtzdHJpbmcsIHN0cmluZyB8IG51bGxdPlxyXG4gICAgKTogc3RyaW5nIHtcclxuICAgICAgICBjb25zdCBwYXJhbXMgPSB7XHJcbiAgICAgICAgICAgIG51bWJlcjogcGFnZUVsZW1lbnRDb3VudCxcclxuICAgICAgICAgICAgb2Zmc2V0OiBvZmZzZXQsXHJcbiAgICAgICAgICAgIHF1ZXJ5OiBxdWVyeSxcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgcGF0aFVybCA9ICdzZWFyY2g/JztcclxuICAgICAgICBsZXQgcGF0aFBhcmFtcyA9IE9iamVjdC5lbnRyaWVzKHBhcmFtcykubWFwKChwYXJhbSkgPT4gcGFyYW0uam9pbignPScpKTtcclxuICAgICAgICBvdGhlci5mb3JFYWNoKChlbGVtZW50KSA9PiB7XHJcbiAgICAgICAgICAgIGlmIChlbGVtZW50WzFdICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICBwYXRoUGFyYW1zLnB1c2goZWxlbWVudC5qb2luKCc9JykpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgcGF0aFBhcmFtcy5wdXNoKFsnYXBpS2V5JywgYXBpS2V5XS5qb2luKCc9JykpO1xyXG4gICAgICAgIGNvbnN0IHVybCA9IHVybFByZWZpeCArICdmb29kL3Byb2R1Y3RzLycgKyBwYXRoVXJsICsgWy4uLnBhdGhQYXJhbXMgXS5qb2luKCcmJyk7XHJcbiAgICAgICAgcmV0dXJuIHVybDtcclxuICAgIH1cclxufTsiLCJleHBvcnQgeyBkZWZhdWx0IH0gZnJvbSAnLi9Qcm9kdWN0TGlzdFN0b3JlJzsiLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tIFwicmVhY3RcIjtcclxuaW1wb3J0IHsgdXNlRWZmZWN0IH0gZnJvbSBcInJlYWN0XCI7XHJcbmltcG9ydCBQYWdlVGVtcGxhdGUgZnJvbSBcImNvbXBvbmVudHMvUGFnZVRlbXBsYXRlXCI7XHJcbmltcG9ydCB7IHVzZUxvY2FsU3RvcmUgfSBmcm9tIFwiaG9va3MvdXNlTG9jYWxTdG9yZVwiO1xyXG5pbXBvcnQgQ2FyZCBmcm9tIFwiY29tcG9uZW50cy9DYXJkXCI7XHJcbmltcG9ydCB7IG9ic2VydmVyIH0gZnJvbSBcIm1vYngtcmVhY3QtbGl0ZVwiO1xyXG5pbXBvcnQgUHJvZHVjdExpc3RTdG9yZSBmcm9tIFwic3RvcmUvUHJvZHVjdExpc3RTdG9yZVwiO1xyXG5pbXBvcnQgTGlzdFNob3dlciBmcm9tIFwiY29tcG9uZW50cy9MaXN0U2hvd2VyXCI7XHJcbmltcG9ydCBzZWFyY2hTdG9yZSBmcm9tIFwic3RvcmUvU2VhcmNoUGFyYW1zU3RvcmVcIjtcclxuaW1wb3J0IENvbnRlbnRGaWx0ZXJzIGZyb20gXCJjb21wb25lbnRzL0NvbnRlbnRGaWx0ZXJzXCI7XHJcblxyXG5jb25zdCBQcm9kdWN0czogUmVhY3QuRkMgPSAoKSA9PiB7XHJcblxyXG4gICAgY29uc3QgcHJvZHVjdFN0b3JlID0gdXNlTG9jYWxTdG9yZSgoKSA9PiBuZXcgUHJvZHVjdExpc3RTdG9yZSgpKTtcclxuXHJcbiAgICB1c2VFZmZlY3QoKCkgPT4ge1xyXG4gICAgICAgIGNvbnN0IHF1ZXJ5U3RyID0gc2VhcmNoU3RvcmUuZ2V0UGFyYW0oJ3F1ZXJ5Jyk7XHJcbiAgICAgICAgaWYgKHF1ZXJ5U3RyICE9PSAnJykge1xyXG4gICAgICAgICAgICBwcm9kdWN0U3RvcmUubG9hZGluZ0xpc3QocHJvZHVjdFN0b3JlLmdldFVybChcclxuICAgICAgICAgICAgICAgIHNlYXJjaFN0b3JlLmdldE9mZnNldCgpLCBcclxuICAgICAgICAgICAgICAgIHNlYXJjaFN0b3JlLmdldFBhcmFtKCdxdWVyeScpLFxyXG4gICAgICAgICAgICApLCAncHJvZHVjdHMnLCAndG90YWxQcm9kdWN0cycpO1xyXG4gICAgICAgIH1cclxuICAgIH0sIFtzZWFyY2hTdG9yZS5zZWFyY2hQYXJhbXMsIHByb2R1Y3RTdG9yZV0pO1xyXG5cclxuICAgIHJldHVybiAoXHJcbiAgICAgICAgPFBhZ2VUZW1wbGF0ZSBoZWFkZXJOYW1lPVwiUHJvZHVjdHNcIj5cclxuICAgICAgICAgICAgPENvbnRlbnRGaWx0ZXJzIFxyXG4gICAgICAgICAgICAgICAgaW5wdXRQbGFjZWhvbGRlcj1cIkVudGVyIHByb2R1Y3RzXCJcclxuICAgICAgICAgICAgLz5cclxuICAgICAgICAgICAgPExpc3RTaG93ZXIgXHJcbiAgICAgICAgICAgICAgICBzdGF0dXM9e3Byb2R1Y3RTdG9yZS5zdGF0dXN9XHJcbiAgICAgICAgICAgICAgICB0b3RhbENvdW50PXtwcm9kdWN0U3RvcmUudG90YWx9XHJcbiAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICAgIHtwcm9kdWN0U3RvcmUucmVzdWx0cy5tYXAoKHByb2R1Y3QpID0+IHtcclxuICAgICAgICAgICAgICAgIHJldHVybiAoXHJcbiAgICAgICAgICAgICAgICAgICAgPENhcmQgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGtleT17cHJvZHVjdC5pZH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgaW1hZ2U9e3Byb2R1Y3QuaW1hZ2V9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlPXtwcm9kdWN0LnRpdGxlfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzdWJ0aXRsZT17Jyd9XHJcbiAgICAgICAgICAgICAgICAgICAgLz5cclxuICAgICAgICAgICAgICAgIClcclxuICAgICAgICAgICAgICAgIH0pfVxyXG4gICAgICAgICAgICA8L0xpc3RTaG93ZXI+XHJcbiAgICAgICAgPC9QYWdlVGVtcGxhdGU+XHJcbiAgICApXHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IG9ic2VydmVyKFByb2R1Y3RzKTsiLCJleHBvcnQgeyBkZWZhdWx0IH0gZnJvbSAnLi9Qcm9kdWN0cyc7IiwiaW1wb3J0IHsgXHJcbiAgICB1cmxQcmVmaXgsIFxyXG4gICAgcGFnZUVsZW1lbnRDb3VudCwgXHJcbiAgICBhcGlLZXkgXHJcbn0gZnJvbSBcImNvbmZpZy9hcGlcIjtcclxuaW1wb3J0IHsgTWVudUl0ZW1Vbml0IH0gZnJvbSBcInR5cGVzL2FwaVR5cGVzXCI7XHJcbmltcG9ydCBCYXNlTGlzdFN0b3JlIGZyb20gXCJzdG9yZS9CYXNlTGlzdFN0b3JlXCI7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBNZW51SXRlbUxpc3RTdG9yZSBleHRlbmRzIEJhc2VMaXN0U3RvcmU8TWVudUl0ZW1Vbml0PiB7XHJcblxyXG4gICAgZ2V0VXJsKFxyXG4gICAgICAgIG9mZnNldDogc3RyaW5nLFxyXG4gICAgICAgIHF1ZXJ5OiBzdHJpbmcsXHJcbiAgICAgICAgLi4ub3RoZXI6IEFycmF5PFtzdHJpbmcsIHN0cmluZyB8IG51bGxdPlxyXG4gICAgKTogc3RyaW5nIHtcclxuICAgICAgICBjb25zdCBwYXJhbXMgPSB7XHJcbiAgICAgICAgICAgIG51bWJlcjogcGFnZUVsZW1lbnRDb3VudCxcclxuICAgICAgICAgICAgb2Zmc2V0OiBvZmZzZXQsXHJcbiAgICAgICAgICAgIHF1ZXJ5OiBxdWVyeSxcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgcGF0aFVybCA9ICdzZWFyY2g/JztcclxuICAgICAgICBsZXQgcGF0aFBhcmFtcyA9IE9iamVjdC5lbnRyaWVzKHBhcmFtcykubWFwKChwYXJhbSkgPT4gcGFyYW0uam9pbignPScpKTtcclxuICAgICAgICBvdGhlci5mb3JFYWNoKChlbGVtZW50KSA9PiB7XHJcbiAgICAgICAgICAgIGlmIChlbGVtZW50WzFdICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICBwYXRoUGFyYW1zLnB1c2goZWxlbWVudC5qb2luKCc9JykpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgcGF0aFBhcmFtcy5wdXNoKFsnYXBpS2V5JywgYXBpS2V5XS5qb2luKCc9JykpO1xyXG4gICAgICAgIGNvbnN0IHVybCA9IHVybFByZWZpeCArICdmb29kL21lbnVJdGVtcy8nICsgcGF0aFVybCArIFsuLi5wYXRoUGFyYW1zIF0uam9pbignJicpO1xyXG4gICAgICAgIHJldHVybiB1cmw7XHJcbiAgICB9XHJcbn07IiwiZXhwb3J0IHsgZGVmYXVsdCB9IGZyb20gJy4vTWVudUl0ZW1MaXN0U3RvcmUnOyIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gXCJyZWFjdFwiO1xyXG5pbXBvcnQgeyB1c2VFZmZlY3QgfSBmcm9tIFwicmVhY3RcIjtcclxuaW1wb3J0IFBhZ2VUZW1wbGF0ZSBmcm9tIFwiY29tcG9uZW50cy9QYWdlVGVtcGxhdGVcIjtcclxuaW1wb3J0IHsgdXNlTG9jYWxTdG9yZSB9IGZyb20gXCJob29rcy91c2VMb2NhbFN0b3JlXCI7XHJcbmltcG9ydCBDYXJkIGZyb20gXCJjb21wb25lbnRzL0NhcmRcIjtcclxuaW1wb3J0IHsgb2JzZXJ2ZXIgfSBmcm9tIFwibW9ieC1yZWFjdC1saXRlXCI7XHJcbmltcG9ydCBNZW51SXRlbUxpc3RTdG9yZSBmcm9tIFwic3RvcmUvTWVudUl0ZW1MaXN0U3RvcmVcIjtcclxuaW1wb3J0IExpc3RTaG93ZXIgZnJvbSBcImNvbXBvbmVudHMvTGlzdFNob3dlclwiO1xyXG5pbXBvcnQgc2VhcmNoU3RvcmUgZnJvbSBcInN0b3JlL1NlYXJjaFBhcmFtc1N0b3JlXCI7XHJcbmltcG9ydCBDb250ZW50RmlsdGVycyBmcm9tIFwiY29tcG9uZW50cy9Db250ZW50RmlsdGVyc1wiO1xyXG5cclxuY29uc3QgTWVudUl0ZW1zOiBSZWFjdC5GQyA9ICgpID0+IHtcclxuXHJcbiAgICBjb25zdCBtZW51SXRlbXNTdG9yZSA9IHVzZUxvY2FsU3RvcmUoKCkgPT4gbmV3IE1lbnVJdGVtTGlzdFN0b3JlKCkpO1xyXG5cclxuICAgIHVzZUVmZmVjdCgoKSA9PiB7XHJcbiAgICAgICAgY29uc3QgcXVlcnlTdHIgPSBzZWFyY2hTdG9yZS5nZXRQYXJhbSgncXVlcnknKTtcclxuICAgICAgICBpZiAocXVlcnlTdHIgIT09ICcnKSB7XHJcbiAgICAgICAgICAgIG1lbnVJdGVtc1N0b3JlLmxvYWRpbmdMaXN0KG1lbnVJdGVtc1N0b3JlLmdldFVybChcclxuICAgICAgICAgICAgICAgIHNlYXJjaFN0b3JlLmdldE9mZnNldCgpLFxyXG4gICAgICAgICAgICAgICAgc2VhcmNoU3RvcmUuZ2V0UGFyYW0oJ3F1ZXJ5JyksXHJcbiAgICAgICAgICAgICksICdtZW51SXRlbXMnLCAndG90YWxNZW51SXRlbXMnKTtcclxuICAgICAgICB9XHJcbiAgICB9LCBbc2VhcmNoU3RvcmUuc2VhcmNoUGFyYW1zLCBtZW51SXRlbXNTdG9yZV0pO1xyXG5cclxuICAgIHJldHVybiAoXHJcbiAgICAgICAgPFBhZ2VUZW1wbGF0ZSBoZWFkZXJOYW1lPVwiTWVudSBJdGVtc1wiPlxyXG4gICAgICAgICAgICA8Q29udGVudEZpbHRlcnMgXHJcbiAgICAgICAgICAgICAgICBpbnB1dFBsYWNlaG9sZGVyPVwiRW50ZXIgbWVudSBpdGVtc1wiXHJcbiAgICAgICAgICAgIC8+XHJcbiAgICAgICAgICAgIDxMaXN0U2hvd2VyIFxyXG4gICAgICAgICAgICAgICAgc3RhdHVzPXttZW51SXRlbXNTdG9yZS5zdGF0dXN9XHJcbiAgICAgICAgICAgICAgICB0b3RhbENvdW50PXttZW51SXRlbXNTdG9yZS50b3RhbH1cclxuICAgICAgICAgICAgPlxyXG4gICAgICAgICAgICAgICAge21lbnVJdGVtc1N0b3JlLnJlc3VsdHMubWFwKChtZW51SXRlbSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxDYXJkIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAga2V5PXttZW51SXRlbS5pZH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGltYWdlPXttZW51SXRlbS5pbWFnZX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlPXtbbWVudUl0ZW0udGl0bGUsIG1lbnVJdGVtLnJlc3RhdXJhbnRDaGFpbl0uam9pbignIC0gJyl9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdWJ0aXRsZT17YCR7bWVudUl0ZW0uc2VydmluZ3MubnVtYmVyfXgke21lbnVJdGVtLnNlcnZpbmdzLnNpemV9ICR7bWVudUl0ZW0uc2VydmluZ3MudW5pdH1gfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvPlxyXG4gICAgICAgICAgICAgICAgICAgIClcclxuICAgICAgICAgICAgICAgIH0pfVxyXG4gICAgICAgICAgICA8L0xpc3RTaG93ZXI+XHJcbiAgICAgICAgPC9QYWdlVGVtcGxhdGU+XHJcbiAgICApXHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IG9ic2VydmVyKE1lbnVJdGVtcyk7IiwiZXhwb3J0IHsgZGVmYXVsdCB9IGZyb20gJy4vTWVudUl0ZW1zJzsiLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tIFwicmVhY3RcIjtcclxuaW1wb3J0IFBhZ2VUZW1wbGF0ZSBmcm9tIFwiY29tcG9uZW50cy9QYWdlVGVtcGxhdGVcIjtcclxuaW1wb3J0IGxvY2FsU3RvcmFnZSBmcm9tIFwic3RvcmUvTG9jYWxTdG9yYWdlXCI7XHJcbmltcG9ydCB7IFN1Y2Nlc3NmdWxTdGF0dXMgfSBmcm9tIFwiY29uZmlnL2luaXRWYWx1ZXNcIjtcclxuaW1wb3J0IExpc3RTaG93ZXIgZnJvbSBcImNvbXBvbmVudHMvTGlzdFNob3dlclwiO1xyXG5pbXBvcnQgeyBvYnNlcnZlciB9IGZyb20gXCJtb2J4LXJlYWN0LWxpdGVcIjtcclxuaW1wb3J0IFJlY2lwZUNhcmQgZnJvbSBcImNvbXBvbmVudHMvUmVjaXBlQ2FyZFwiO1xyXG5cclxuY29uc3QgU2F2ZWQ6IFJlYWN0LkZDID0gKCkgPT4ge1xyXG5cclxuICAgIGNvbnN0IHsgY2FyZHMgfSA9IGxvY2FsU3RvcmFnZTtcclxuXHJcbiAgICByZXR1cm4gKFxyXG4gICAgICAgIDxQYWdlVGVtcGxhdGUgaGVhZGVyTmFtZT1cIlNhdmVkXCI+XHJcbiAgICAgICAgICAgIDxMaXN0U2hvd2VyXHJcbiAgICAgICAgICAgICAgICBzdGF0dXM9e1N1Y2Nlc3NmdWxTdGF0dXN9XHJcbiAgICAgICAgICAgID4gICBcclxuICAgICAgICAgICAgICAgIHtjYXJkcy5tYXAoKHJlY2lwZSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxSZWNpcGVDYXJkXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBrZXk9e3JlY2lwZS5pZH0gXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb2RlPSdTQVZFRCdcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlY2lwZT17cmVjaXBlfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvPlxyXG4gICAgICAgICAgICAgICAgICAgIClcclxuICAgICAgICAgICAgICAgIH0pfVxyXG4gICAgICAgICAgICA8L0xpc3RTaG93ZXI+XHJcbiAgICAgICAgPC9QYWdlVGVtcGxhdGU+XHJcbiAgICApXHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IG9ic2VydmVyKFNhdmVkKTsiLCJleHBvcnQgeyBkZWZhdWx0IH0gZnJvbSAnLi9TYXZlZCc7IiwiXG4gICAgICBpbXBvcnQgQVBJIGZyb20gXCIhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICBpbXBvcnQgZG9tQVBJIGZyb20gXCIhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRGbiBmcm9tIFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanNcIjtcbiAgICAgIGltcG9ydCBzZXRBdHRyaWJ1dGVzIGZyb20gXCIhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0U3R5bGVFbGVtZW50IGZyb20gXCIhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzXCI7XG4gICAgICBpbXBvcnQgc3R5bGVUYWdUcmFuc2Zvcm1GbiBmcm9tIFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzXCI7XG4gICAgICBpbXBvcnQgY29udGVudCwgKiBhcyBuYW1lZEV4cG9ydCBmcm9tIFwiISEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cnVsZVNldFsxXS5ydWxlc1swXS51c2VbMV0hLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Bvc3Rjc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9ydWxlU2V0WzFdLnJ1bGVzWzBdLnVzZVsyXSEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanMhLi9Mb2dpbi5tb2R1bGUuc2Nzc1wiO1xuICAgICAgXG4gICAgICBcblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybSA9IHN0eWxlVGFnVHJhbnNmb3JtRm47XG5vcHRpb25zLnNldEF0dHJpYnV0ZXMgPSBzZXRBdHRyaWJ1dGVzO1xub3B0aW9ucy5pbnNlcnQgPSBpbnNlcnRGbi5iaW5kKG51bGwsIFwiaGVhZFwiKTtcbm9wdGlvbnMuZG9tQVBJID0gZG9tQVBJO1xub3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7XG5cbnZhciB1cGRhdGUgPSBBUEkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5leHBvcnQgKiBmcm9tIFwiISEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cnVsZVNldFsxXS5ydWxlc1swXS51c2VbMV0hLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Bvc3Rjc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9ydWxlU2V0WzFdLnJ1bGVzWzBdLnVzZVsyXSEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanMhLi9Mb2dpbi5tb2R1bGUuc2Nzc1wiO1xuICAgICAgIGV4cG9ydCBkZWZhdWx0IGNvbnRlbnQgJiYgY29udGVudC5sb2NhbHMgPyBjb250ZW50LmxvY2FscyA6IHVuZGVmaW5lZDtcbiIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gXCJyZWFjdFwiO1xyXG5pbXBvcnQgeyB1c2VTdGF0ZSwgdXNlRWZmZWN0IH0gZnJvbSBcInJlYWN0XCI7XHJcblxyXG5pbXBvcnQgSW5wdXQgZnJvbSBcImNvbXBvbmVudHMvSW5wdXRcIjtcclxuaW1wb3J0IFRleHQgZnJvbSBcImNvbXBvbmVudHMvVGV4dFwiO1xyXG5pbXBvcnQgQnV0dG9uIGZyb20gXCJjb21wb25lbnRzL0J1dHRvblwiO1xyXG5cclxuaW1wb3J0IHVzZXJTdG9yZSBmcm9tIFwic3RvcmUvVXNlclN0b3JlXCI7XHJcbmltcG9ydCB7IExvZ2luUmVxdWVzdFR5cGUgfSBmcm9tIFwic3RvcmUvVXNlclN0b3JlL1VzZXJTdG9yZVwiO1xyXG5pbXBvcnQgeyB1c2VOYXZpZ2F0ZSB9IGZyb20gXCJyZWFjdC1yb3V0ZXItZG9tXCI7XHJcbmltcG9ydCB7IG9ic2VydmVyIH0gZnJvbSBcIm1vYngtcmVhY3QtbGl0ZVwiO1xyXG5cclxuaW1wb3J0IHN0eWxlcyBmcm9tICcuL0xvZ2luLm1vZHVsZS5zY3NzJztcclxuXHJcbmNvbnN0IGluaXRSZXF1ZXN0VmFsdWU6IExvZ2luUmVxdWVzdFR5cGUgPSB7XHJcbiAgICB1c2VybmFtZTogJycsXHJcbiAgICBmaXJzdE5hbWU6ICcnLFxyXG4gICAgbGFzdE5hbWU6ICcnLFxyXG4gICAgZW1haWw6ICcnLFxyXG59XHJcblxyXG5jb25zdCBMb2dpbjogUmVhY3QuRkMgPSAoKSA9PiB7XHJcblxyXG4gICAgY29uc3QgWyB1c2VyLCBzZXRVc2VyIF0gPSB1c2VTdGF0ZShpbml0UmVxdWVzdFZhbHVlKTtcclxuICAgIGNvbnN0IG5hdmlnYXRlID0gdXNlTmF2aWdhdGUoKTtcclxuXHJcbiAgICB1c2VFZmZlY3QoKCkgPT4ge1xyXG4gICAgICAgIGlmICh1c2VyU3RvcmUudXNlclN0YXR1cyA9PT0gJ2F1dGgnKSB7XHJcbiAgICAgICAgICAgIG5hdmlnYXRlKCcvdXNlcicpO1xyXG4gICAgICAgIH1cclxuICAgIH0sIFt1c2VyU3RvcmUudXNlclN0YXR1c10pO1xyXG5cclxuICAgIHJldHVybiAoXHJcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9e3N0eWxlc1tcImxvZ2luLXBhZ2VcIl19PlxyXG4gICAgICAgICAgICA8VGV4dCB2aWV3PSd0aXRsZScgdGFnPSdkaXYnPkxvZ2luPC9UZXh0PlxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT17c3R5bGVzW1wibG9naW4tcGFnZV9fZm9ybVwiXX0+XHJcbiAgICAgICAgICAgICAgICB7T2JqZWN0LmVudHJpZXModXNlcikubWFwKChba2V5LCB2YWx1ZV0pID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8SW5wdXQgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBrZXk9e2tleX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPXt2YWx1ZX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyPXtrZXl9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZT17KG5ld1ZhbHVlKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdXNlcltrZXkgYXMga2V5b2YgTG9naW5SZXF1ZXN0VHlwZV0gPSBuZXdWYWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXRVc2VyKHsgLi4udXNlciB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH19XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8+XHJcbiAgICAgICAgICAgICAgICAgICAgKVxyXG4gICAgICAgICAgICAgICAgfSl9XHJcbiAgICAgICAgICAgICAgICA8QnV0dG9uIG9uQ2xpY2s9eygpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICB1c2VyU3RvcmUubG9naW4odXNlcik7XHJcbiAgICAgICAgICAgICAgICB9fT5cclxuICAgICAgICAgICAgICAgICAgICBsb2dpblxyXG4gICAgICAgICAgICAgICAgPC9CdXR0b24+XHJcbiAgICAgICAgICAgICAgICB7dXNlclN0b3JlLnN0YXR1cy5zdGF0dXNOYW1lID09PSAnRVJST1InICYmXHJcbiAgICAgICAgICAgICAgICA8VGV4dCBjb2xvcj0nYWNjZW50JyB2aWV3PSdwLTE2JyB0YWc9J2Rpdic+XHJcbiAgICAgICAgICAgICAgICAgICAge3VzZXJTdG9yZS5zdGF0dXMuc3RhdHVzTWVzc2FnZX1cclxuICAgICAgICAgICAgICAgIDwvVGV4dD5cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICApXHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IG9ic2VydmVyKExvZ2luKTsiLCJleHBvcnQgeyBkZWZhdWx0IH0gZnJvbSAnLi9Mb2dpbic7IiwiXG4gICAgICBpbXBvcnQgQVBJIGZyb20gXCIhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICBpbXBvcnQgZG9tQVBJIGZyb20gXCIhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRGbiBmcm9tIFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanNcIjtcbiAgICAgIGltcG9ydCBzZXRBdHRyaWJ1dGVzIGZyb20gXCIhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0U3R5bGVFbGVtZW50IGZyb20gXCIhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzXCI7XG4gICAgICBpbXBvcnQgc3R5bGVUYWdUcmFuc2Zvcm1GbiBmcm9tIFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzXCI7XG4gICAgICBpbXBvcnQgY29udGVudCwgKiBhcyBuYW1lZEV4cG9ydCBmcm9tIFwiISEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cnVsZVNldFsxXS5ydWxlc1swXS51c2VbMV0hLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Bvc3Rjc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9ydWxlU2V0WzFdLnJ1bGVzWzBdLnVzZVsyXSEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanMhLi9Vc2VyLm1vZHVsZS5zY3NzXCI7XG4gICAgICBcbiAgICAgIFxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtID0gc3R5bGVUYWdUcmFuc2Zvcm1Gbjtcbm9wdGlvbnMuc2V0QXR0cmlidXRlcyA9IHNldEF0dHJpYnV0ZXM7XG5vcHRpb25zLmluc2VydCA9IGluc2VydEZuLmJpbmQobnVsbCwgXCJoZWFkXCIpO1xub3B0aW9ucy5kb21BUEkgPSBkb21BUEk7XG5vcHRpb25zLmluc2VydFN0eWxlRWxlbWVudCA9IGluc2VydFN0eWxlRWxlbWVudDtcblxudmFyIHVwZGF0ZSA9IEFQSShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbmV4cG9ydCAqIGZyb20gXCIhIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9ydWxlU2V0WzFdLnJ1bGVzWzBdLnVzZVsxXSEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvcG9zdGNzcy1sb2FkZXIvZGlzdC9janMuanM/P3J1bGVTZXRbMV0ucnVsZXNbMF0udXNlWzJdIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL1VzZXIubW9kdWxlLnNjc3NcIjtcbiAgICAgICBleHBvcnQgZGVmYXVsdCBjb250ZW50ICYmIGNvbnRlbnQubG9jYWxzID8gY29udGVudC5sb2NhbHMgOiB1bmRlZmluZWQ7XG4iLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tIFwicmVhY3RcIjtcclxuaW1wb3J0IHsgdXNlRWZmZWN0IH0gZnJvbSBcInJlYWN0XCI7XHJcbmltcG9ydCB1c2VyU3RvcmUgZnJvbSBcInN0b3JlL1VzZXJTdG9yZVwiO1xyXG5pbXBvcnQgeyB1c2VOYXZpZ2F0ZSB9IGZyb20gXCJyZWFjdC1yb3V0ZXItZG9tXCI7XHJcbmltcG9ydCB7IG9ic2VydmVyIH0gZnJvbSBcIm1vYngtcmVhY3QtbGl0ZVwiO1xyXG5pbXBvcnQgc3R5bGVzIGZyb20gJy4vVXNlci5tb2R1bGUuc2Nzcyc7XHJcblxyXG5pbXBvcnQgVGV4dCBmcm9tIFwiY29tcG9uZW50cy9UZXh0XCI7XHJcbmltcG9ydCBCdXR0b24gZnJvbSBcImNvbXBvbmVudHMvQnV0dG9uXCI7XHJcblxyXG5jb25zdCBVc2VyOiBSZWFjdC5GQyA9ICgpID0+IHtcclxuXHJcbiAgICBjb25zdCB7IHVzZXIsIHVzZXJTdGF0dXMsIGxvZ291dCB9ID0gdXNlclN0b3JlO1xyXG4gICAgY29uc3QgbmF2aWdhdGUgPSB1c2VOYXZpZ2F0ZSgpO1xyXG5cclxuICAgIHVzZUVmZmVjdCgoKSA9PiB7XHJcbiAgICAgICAgaWYgKHVzZXJTdGF0dXMgPT09ICdub25lJykge1xyXG4gICAgICAgICAgICBuYXZpZ2F0ZSgnL2xvZ2luJyk7XHJcbiAgICAgICAgfVxyXG4gICAgfSwgW3VzZXJTdGF0dXNdKTtcclxuXHJcbiAgICByZXR1cm4gKFxyXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPXtzdHlsZXNbXCJ1c2VyLXBhZ2VcIl19PlxyXG4gICAgICAgICAgICA8VGV4dCB2aWV3PSd0aXRsZSc+VXNlciBQYWdlPC9UZXh0PlxyXG4gICAgICAgICAgICA8ZGl2XHJcbiAgICAgICAgICAgICAgICBjbGFzc05hbWU9e3N0eWxlc1tcInVzZXItcGFnZV9faW5mb1wiXX0gXHJcbiAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICAgIHtPYmplY3QuZW50cmllcyh1c2VyKS5tYXAoKFtrZXksIHZhbHVlXSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9e3N0eWxlc1tcInVzZXItcGFnZV9faW5mb19fdW5pdFwiXX0gXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBrZXk9e2tleX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPFRleHQgd2VpZ2h0PVwiYm9sZFwiIHZpZXc9J3AtMTYnPntrZXl9OjwvVGV4dD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxUZXh0IHZpZXc9J3AtMTYnPnt2YWx1ZX08L1RleHQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgIClcclxuICAgICAgICAgICAgICAgIH0pfVxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgPEJ1dHRvblxyXG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lPXtzdHlsZXNbXCJ1c2VyLXBhZ2VfX2xvZ291dFwiXX0gXHJcbiAgICAgICAgICAgICAgICBvbkNsaWNrPXsoKSA9PiB7IGxvZ291dCgpIH19XHJcbiAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICAgIExvZ291dFxyXG4gICAgICAgICAgICA8L0J1dHRvbj5cclxuICAgICAgICA8L2Rpdj5cclxuICAgIClcclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgb2JzZXJ2ZXIoVXNlcik7IiwiZXhwb3J0IHsgZGVmYXVsdCB9IGZyb20gJy4vVXNlcic7IiwiaW1wb3J0IHsgSUxvY2FsU3RvcmUgfSBmcm9tIFwiaG9va3MvdXNlTG9jYWxTdG9yZVwiO1xyXG5pbXBvcnQgeyBTdGF0dXMgfSBmcm9tIFwidHlwZXMvYXBpVHlwZXNcIjtcclxuaW1wb3J0IHsgdXJsUHJlZml4LCBhcGlLZXkgfSBmcm9tIFwiY29uZmlnL2FwaVwiO1xyXG5pbXBvcnQgeyBNZWFsUGxhbldlZWtUeXBlLCBNZWFsUGxhbkRheVR5cGUgfSBmcm9tIFwidHlwZXMvYXBpVHlwZXNcIjtcclxuaW1wb3J0IGF4aW9zIGZyb20gXCJheGlvc1wiO1xyXG5pbXBvcnQgeyBMb2FkaW5nU3RhdHVzLCBOb3RTdGFydGVkU3RhdHVzLCBTdWNjZXNzZnVsU3RhdHVzLCBlcnJvclN0YXR1cyB9IGZyb20gXCJjb25maWcvaW5pdFZhbHVlc1wiO1xyXG5pbXBvcnQgeyBhY3Rpb24sIGNvbXB1dGVkLCBtYWtlT2JzZXJ2YWJsZSwgb2JzZXJ2YWJsZSB9IGZyb20gXCJtb2J4XCI7XHJcblxyXG50eXBlIFByaXZhdGVGaWVsZHMgPSAnX3N0YXR1cycgfCAnX3BsYW4nO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTWVhbFBsYW5uaW5nU3RvcmUgaW1wbGVtZW50cyBJTG9jYWxTdG9yZSB7XHJcblxyXG4gICAgcHJpdmF0ZSBfc3RhdHVzOiBTdGF0dXMgPSBOb3RTdGFydGVkU3RhdHVzO1xyXG4gICAgcHJpdmF0ZSBfcGxhbjogTWVhbFBsYW5XZWVrVHlwZSA9IHt9IGFzIE1lYWxQbGFuV2Vla1R5cGU7XHJcblxyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgbWFrZU9ic2VydmFibGU8TWVhbFBsYW5uaW5nU3RvcmUsIFByaXZhdGVGaWVsZHM+KHRoaXMsIHtcclxuICAgICAgICAgICAgX3N0YXR1czogb2JzZXJ2YWJsZS5yZWYsXHJcbiAgICAgICAgICAgIF9wbGFuOiBvYnNlcnZhYmxlLnJlZixcclxuICAgICAgICAgICAgc2V0U3RhdHVzOiBhY3Rpb24uYm91bmQsXHJcbiAgICAgICAgICAgIHNldFBsYW46IGFjdGlvbi5ib3VuZCxcclxuICAgICAgICAgICAgbG9hZGluZ1BsYW46IGFjdGlvbi5ib3VuZCxcclxuICAgICAgICAgICAgZ2VuZXJhdGVQbGFuOiBhY3Rpb24uYm91bmQsXHJcbiAgICAgICAgICAgIGFkZEluUGxhbjogYWN0aW9uLmJvdW5kLFxyXG4gICAgICAgICAgICBkZWxldGVGcm9tUGxhbjogYWN0aW9uLmJvdW5kLFxyXG4gICAgICAgICAgICBjbGVhclBsYW46IGFjdGlvbi5ib3VuZCxcclxuICAgICAgICAgICAgc3RhdHVzOiBjb21wdXRlZCxcclxuICAgICAgICAgICAgcGxhbjogY29tcHV0ZWQsXHJcbiAgICAgICAgICAgIHdlZWtTdGFydDogY29tcHV0ZWQsICAgIFxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIHNldFN0YXR1cyhuZXdTdGF0dXM6IFN0YXR1cykge1xyXG4gICAgICAgIHRoaXMuX3N0YXR1cyA9IHsgLi4ubmV3U3RhdHVzIH07XHJcbiAgICB9XHJcblxyXG4gICAgc2V0UGxhbih3ZWVrUGxhbjogTWVhbFBsYW5XZWVrVHlwZSkge1xyXG4gICAgICAgIHRoaXMuX3BsYW4gPSB7IC4uLndlZWtQbGFuIH07XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0RGF0ZUZvcm0oZGF0ZU9iajogRGF0ZSkge1xyXG4gICAgICAgIGNvbnN0IGRhdGUgPSBkYXRlT2JqLnRvTG9jYWxlRGF0ZVN0cmluZygnZnItQ0EnLCB7IFxyXG4gICAgICAgICAgICB5ZWFyOiAnbnVtZXJpYycsIFxyXG4gICAgICAgICAgICBtb250aDogJzItZGlnaXQnLCBcclxuICAgICAgICAgICAgZGF5OiAnMi1kaWdpdCcgfSk7XHJcbiAgICAgICAgcmV0dXJuIGRhdGU7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0U3RhcnRPZldlZWsoZGF0ZU9iajogRGF0ZSkge1xyXG4gICAgICAgIGxldCBkYXRlID0gbmV3IERhdGUoZGF0ZU9iaik7XHJcbiAgICAgICAgbGV0IGRheSA9IGRhdGUuZ2V0RGF5KCk7XHJcbiAgICAgICAgY29uc29sZS5sb2coZGF5KTtcclxuICAgICAgICBjb25zdCBkaWZmID0gZGF0ZS5nZXREYXRlKCkgLSBkYXkgKyAoZGF5ID09PSAwID8gLTYgOiAxKTtcclxuICAgICAgICByZXR1cm4gdGhpcy5nZXREYXRlRm9ybShuZXcgRGF0ZShkYXRlLnNldERhdGUoZGlmZikpKTtcclxuICAgIH1cclxuXHJcbiAgICBsb2FkaW5nUGxhbihcclxuICAgICAgICB1c2VybmFtZTogc3RyaW5nLFxyXG4gICAgICAgIGhhc2g6IHN0cmluZyxcclxuICAgICkge1xyXG4gICAgICAgIGNvbnN0IGRhdGUgPSB0aGlzLmdldFN0YXJ0T2ZXZWVrKG5ldyBEYXRlKCkpO1xyXG4gICAgICAgIGNvbnN0IHVybCA9IFxyXG4gICAgICAgICAgICB1cmxQcmVmaXggKyBcclxuICAgICAgICAgICAgJ21lYWxwbGFubmVyLycgKyBcclxuICAgICAgICAgICAgdXNlcm5hbWUgKyBcclxuICAgICAgICAgICAgJy93ZWVrLycgKyBkYXRlICsgXHJcbiAgICAgICAgICAgICc/aGFzaD0nICsgaGFzaCArXHJcbiAgICAgICAgICAgICcmYXBpS2V5PScgKyBhcGlLZXk7IFxyXG4gICAgICAgIHRoaXMuc2V0U3RhdHVzKExvYWRpbmdTdGF0dXMpO1xyXG4gICAgICAgIGF4aW9zLmdldCh1cmwpXHJcbiAgICAgICAgLnRoZW4oKHJlc3ApID0+IHtcclxuICAgICAgICAgICAgY29uc29sZS5sb2cocmVzcC5kYXRhKTtcclxuICAgICAgICAgICAgdGhpcy5zZXRQbGFuKHJlc3AuZGF0YSk7XHJcbiAgICAgICAgICAgIHRoaXMuc2V0U3RhdHVzKFN1Y2Nlc3NmdWxTdGF0dXMpO1xyXG4gICAgICAgIH0pXHJcbiAgICAgICAgLmNhdGNoKChlcnIpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5zZXRTdGF0dXMoZXJyb3JTdGF0dXMoZXJyLm1lc3NhZ2UpKTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBnZW5lcmF0ZVBsYW4oXHJcbiAgICAgICAgaWQ6IG51bWJlciwgXHJcbiAgICAgICAgdXNlcm5hbWU6IHN0cmluZyxcclxuICAgICAgICBoYXNoOiBzdHJpbmdcclxuICAgICkge1xyXG4gICAgICAgIGNvbnN0IG5vd1ByZXYgPSB0aGlzLmdldFN0YXJ0T2ZXZWVrKG5ldyBEYXRlKCkpO1xyXG4gICAgICAgIGNvbnNvbGUubG9nKG5vd1ByZXYpO1xyXG4gICAgICAgIGNvbnN0IG5vdyA9IG5ldyBEYXRlKG5vd1ByZXYpLmdldFRpbWUoKSAvIDEwMDA7XHJcbiAgICAgICAgY29uc3QgdXJsID0gXHJcbiAgICAgICAgICAgIHVybFByZWZpeCArICdtZWFscGxhbm5lci8nICsgXHJcbiAgICAgICAgICAgIHVzZXJuYW1lICsgJy9pdGVtcz9hcGlLZXk9JyArIGFwaUtleSArXHJcbiAgICAgICAgICAgICcmaGFzaD0nICsgaGFzaDtcclxuICAgICAgICBheGlvcy5wb3N0KHVybCwge1xyXG4gICAgICAgICAgICBtZWFsUGxhblRlbXBsYXRlSWQ6IGlkLFxyXG4gICAgICAgICAgICBzdGFydERhdGU6IG5vd1xyXG4gICAgICAgIH0pXHJcbiAgICAgICAgLnRoZW4oKHJlc3ApID0+IHtcclxuICAgICAgICAgICAgY29uc29sZS5sb2cocmVzcC5kYXRhKTtcclxuICAgICAgICAgICAgdGhpcy5sb2FkaW5nUGxhbih1c2VybmFtZSwgaGFzaCk7XHJcbiAgICAgICAgfSlcclxuICAgICAgICAuY2F0Y2goKGVycikgPT4ge1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhlcnIpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIGFkZEluUGxhbigpIHtcclxuXHJcbiAgICB9XHJcblxyXG4gICAgZGVsZXRlRnJvbVBsYW4oKSB7XHJcblxyXG4gICAgfVxyXG5cclxuICAgIGNsZWFyUGxhbigpIHtcclxuXHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IHN0YXR1cygpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fc3RhdHVzO1xyXG4gICAgfVxyXG5cclxuICAgIGdldCBwbGFuKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9wbGFuO1xyXG4gICAgfVxyXG5cclxuICAgIGdldCB3ZWVrU3RhcnQoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0U3RhcnRPZldlZWsobmV3IERhdGUoKSk7XHJcbiAgICB9XHJcblxyXG4gICAgZGVzdHJveSgpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLl9wbGFuID0ge30gYXMgTWVhbFBsYW5XZWVrVHlwZTtcclxuICAgICAgICB0aGlzLl9zdGF0dXMgPSBOb3RTdGFydGVkU3RhdHVzO1xyXG4gICAgfVxyXG59OyIsImV4cG9ydCB7IGRlZmF1bHQgfSBmcm9tICcuL01lYWxQbGFubmluZ1N0b3JlJzsiLCJcbiAgICAgIGltcG9ydCBBUEkgZnJvbSBcIiEuLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIjtcbiAgICAgIGltcG9ydCBkb21BUEkgZnJvbSBcIiEuLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydEZuIGZyb20gXCIhLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qc1wiO1xuICAgICAgaW1wb3J0IHNldEF0dHJpYnV0ZXMgZnJvbSBcIiEuLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRTdHlsZUVsZW1lbnQgZnJvbSBcIiEuLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanNcIjtcbiAgICAgIGltcG9ydCBzdHlsZVRhZ1RyYW5zZm9ybUZuIGZyb20gXCIhLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanNcIjtcbiAgICAgIGltcG9ydCBjb250ZW50LCAqIGFzIG5hbWVkRXhwb3J0IGZyb20gXCIhIS4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9ydWxlU2V0WzFdLnJ1bGVzWzBdLnVzZVsxXSEuLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvcG9zdGNzcy1sb2FkZXIvZGlzdC9janMuanM/P3J1bGVTZXRbMV0ucnVsZXNbMF0udXNlWzJdIS4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL1Nsb3RJbmZvLm1vZHVsZS5zY3NzXCI7XG4gICAgICBcbiAgICAgIFxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtID0gc3R5bGVUYWdUcmFuc2Zvcm1Gbjtcbm9wdGlvbnMuc2V0QXR0cmlidXRlcyA9IHNldEF0dHJpYnV0ZXM7XG5vcHRpb25zLmluc2VydCA9IGluc2VydEZuLmJpbmQobnVsbCwgXCJoZWFkXCIpO1xub3B0aW9ucy5kb21BUEkgPSBkb21BUEk7XG5vcHRpb25zLmluc2VydFN0eWxlRWxlbWVudCA9IGluc2VydFN0eWxlRWxlbWVudDtcblxudmFyIHVwZGF0ZSA9IEFQSShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbmV4cG9ydCAqIGZyb20gXCIhIS4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9ydWxlU2V0WzFdLnJ1bGVzWzBdLnVzZVsxXSEuLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvcG9zdGNzcy1sb2FkZXIvZGlzdC9janMuanM/P3J1bGVTZXRbMV0ucnVsZXNbMF0udXNlWzJdIS4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL1Nsb3RJbmZvLm1vZHVsZS5zY3NzXCI7XG4gICAgICAgZXhwb3J0IGRlZmF1bHQgY29udGVudCAmJiBjb250ZW50LmxvY2FscyA/IGNvbnRlbnQubG9jYWxzIDogdW5kZWZpbmVkO1xuIiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSBcInJlYWN0XCI7XHJcbmltcG9ydCB7IE1lYWxQbGFuQ29tbW9uSXRlbVR5cGUsIEluZ09uZVR5cGUsIEluZ1R3b1R5cGUgfSBmcm9tIFwidHlwZXMvYXBpVHlwZXNcIjtcclxuaW1wb3J0IFRleHQgZnJvbSBcImNvbXBvbmVudHMvVGV4dFwiO1xyXG5pbXBvcnQgeyBpbWFnZVByZWZpeCB9IGZyb20gXCJjb25maWcvYXBpXCI7XHJcbmltcG9ydCB7IG1lbW8gfSBmcm9tIFwicmVhY3RcIjtcclxuaW1wb3J0IHN0eWxlcyBmcm9tIFwiLi9TbG90SW5mby5tb2R1bGUuc2Nzc1wiO1xyXG5cclxuaW50ZXJmYWNlIFNsb3RJbmZvUHJvcHMge1xyXG4gICAgc2xvdHM6IE1lYWxQbGFuQ29tbW9uSXRlbVR5cGVbXVxyXG59XHJcblxyXG5jb25zdCBTbG90SW5mbzogUmVhY3QuRkM8U2xvdEluZm9Qcm9wcz4gPSAocHJvcHMpID0+IHtcclxuXHJcbiAgICBjb25zdCBlbGVtZW50cyA9IHByb3BzLnNsb3RzLnNvcnQoKGEsIGIpID0+IHtcclxuICAgICAgICByZXR1cm4gKGEucG9zaXRpb24gPCBiLnBvc2l0aW9uKSA/IC0xIDogMDtcclxuICAgIH0pO1xyXG4gICAgY29uc29sZS5sb2coZWxlbWVudHMpO1xyXG5cclxuICAgIGNvbnN0IGdldEl0ZW1FbGVtZW50QnlUeXBlID0gKGl0ZW06IE1lYWxQbGFuQ29tbW9uSXRlbVR5cGUpID0+IHtcclxuICAgICAgICBpZiAoaXRlbS50eXBlICE9PSAnSU5HUkVESUVOVFMnKSB7XHJcbiAgICAgICAgICAgIGxldCBpbWdVcmwgPSBpbWFnZVByZWZpeDtcclxuICAgICAgICAgICAgc3dpdGNoKGl0ZW0udHlwZSkge1xyXG4gICAgICAgICAgICAgICAgY2FzZSAnUFJPRFVDVCc6XHJcbiAgICAgICAgICAgICAgICAgICAgaW1nVXJsICs9ICdwcm9kdWN0cy8nICsgaXRlbS52YWx1ZS5pZCArICctOTB4OTAuJyArIGl0ZW0udmFsdWUuaW1hZ2VUeXBlO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAnTUVOVV9JVEVNJzpcclxuICAgICAgICAgICAgICAgICAgICBpbWdVcmwgKz0gJ21lbnUtaXRlbXMvJyArIGl0ZW0udmFsdWUuaWQgKyAnLTkweDkwLicgKyBpdGVtLnZhbHVlLmltYWdlVHlwZTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgJ1JFQ0lQRSc6XHJcbiAgICAgICAgICAgICAgICAgICAgaW1nVXJsICs9ICdyZWNpcGVzLycgKyBpdGVtLnZhbHVlLmlkICsgJy0yNDB4MTUwLicgKyBpdGVtLnZhbHVlLmltYWdlVHlwZTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgJ0NVU1RPTV9GT09EJzpcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgICAgICAgIDw+XHJcbiAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9e2ltZ1VybH0gYWx0PXtpdGVtLnZhbHVlLnRpdGxlfSAvPlxyXG4gICAgICAgICAgICAgICAgICAgIDxUZXh0PntpdGVtLnZhbHVlLnRpdGxlfTwvVGV4dD5cclxuICAgICAgICAgICAgICAgIDwvPlxyXG4gICAgICAgICAgICApXHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgaWYgKCdpbmdyZWRpZW50cycgaW4gaXRlbS52YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgICAgICAgICAgICA8PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB7aXRlbS52YWx1ZS5pbmdyZWRpZW50cy5tYXAoKGluZywgaW5kZXgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9e3N0eWxlc1tcInNsb3QtaW5mb19faXRlbV9faW5nclwiXX0ga2V5PXtpbmRleH0+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPXtpbmcuaW1hZ2V9IGFsdD17aW5nLm5hbWV9IC8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxUZXh0PntpbmcuYW1vdW50fXsnICd9e2luZy5uYW1lfXsnICd9e2luZy51bml0fTwvVGV4dD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIClcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSl9XHJcbiAgICAgICAgICAgICAgICAgICAgPC8+XHJcbiAgICAgICAgICAgICAgICApXHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoJ3RpdGxlJyBpbiBpdGVtLnZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gKFxyXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPXtzdHlsZXNbXCJzbG90LWluZm9fX2l0ZW1fX2luZ3JcIl19IGtleT17aXRlbS52YWx1ZS50aXRsZX0+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxUZXh0PntpdGVtLnZhbHVlLnRpdGxlfTwvVGV4dD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPFRleHQ+e2l0ZW0udmFsdWUuc2VydmluZ3N9IG1pbnV0ZXM8L1RleHQ+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICApXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIChcclxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT17c3R5bGVzW1wic2xvdC1pbmZvXCJdfT5cclxuICAgICAgICAgICAge2VsZW1lbnRzLm1hcCgoc2xvdCwgaW5kZXgpID0+IHtcclxuICAgICAgICAgICAgICAgIHJldHVybiAoXHJcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9e3N0eWxlc1tcInNsb3QtaW5mb19faXRlbVwiXX0ga2V5PXtzbG90LnR5cGUgKyBpbmRleH0+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHtnZXRJdGVtRWxlbWVudEJ5VHlwZShzbG90KX1cclxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgIClcclxuICAgICAgICAgICAgfSl9XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICApXHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IG1lbW8oU2xvdEluZm8pOyIsImV4cG9ydCB7IGRlZmF1bHQgfSBmcm9tICcuL1Nsb3RJbmZvJzsiLCJcbiAgICAgIGltcG9ydCBBUEkgZnJvbSBcIiEuLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIjtcbiAgICAgIGltcG9ydCBkb21BUEkgZnJvbSBcIiEuLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydEZuIGZyb20gXCIhLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qc1wiO1xuICAgICAgaW1wb3J0IHNldEF0dHJpYnV0ZXMgZnJvbSBcIiEuLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRTdHlsZUVsZW1lbnQgZnJvbSBcIiEuLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanNcIjtcbiAgICAgIGltcG9ydCBzdHlsZVRhZ1RyYW5zZm9ybUZuIGZyb20gXCIhLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanNcIjtcbiAgICAgIGltcG9ydCBjb250ZW50LCAqIGFzIG5hbWVkRXhwb3J0IGZyb20gXCIhIS4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9ydWxlU2V0WzFdLnJ1bGVzWzBdLnVzZVsxXSEuLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvcG9zdGNzcy1sb2FkZXIvZGlzdC9janMuanM/P3J1bGVTZXRbMV0ucnVsZXNbMF0udXNlWzJdIS4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL0RheUluZm8ubW9kdWxlLnNjc3NcIjtcbiAgICAgIFxuICAgICAgXG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0gPSBzdHlsZVRhZ1RyYW5zZm9ybUZuO1xub3B0aW9ucy5zZXRBdHRyaWJ1dGVzID0gc2V0QXR0cmlidXRlcztcbm9wdGlvbnMuaW5zZXJ0ID0gaW5zZXJ0Rm4uYmluZChudWxsLCBcImhlYWRcIik7XG5vcHRpb25zLmRvbUFQSSA9IGRvbUFQSTtcbm9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50ID0gaW5zZXJ0U3R5bGVFbGVtZW50O1xuXG52YXIgdXBkYXRlID0gQVBJKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0ICogZnJvbSBcIiEhLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanM/P3J1bGVTZXRbMV0ucnVsZXNbMF0udXNlWzFdIS4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9wb3N0Y3NzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cnVsZVNldFsxXS5ydWxlc1swXS51c2VbMl0hLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vRGF5SW5mby5tb2R1bGUuc2Nzc1wiO1xuICAgICAgIGV4cG9ydCBkZWZhdWx0IGNvbnRlbnQgJiYgY29udGVudC5sb2NhbHMgPyBjb250ZW50LmxvY2FscyA6IHVuZGVmaW5lZDtcbiIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gXCJyZWFjdFwiO1xyXG5pbXBvcnQgeyBNZWFsUGxhbkRheVR5cGUgfSBmcm9tIFwidHlwZXMvYXBpVHlwZXNcIjtcclxuaW1wb3J0IFNsb3RJbmZvIGZyb20gXCIuLi9TbG90SW5mb1wiO1xyXG5pbXBvcnQgVGV4dCBmcm9tIFwiY29tcG9uZW50cy9UZXh0XCI7XHJcbmltcG9ydCB7IG1lbW8gfSBmcm9tIFwicmVhY3RcIjtcclxuaW1wb3J0IHN0eWxlcyBmcm9tIFwiLi9EYXlJbmZvLm1vZHVsZS5zY3NzXCI7XHJcblxyXG50eXBlIERheUluZm9PdGhlclR5cGUgPSB7XHJcbiAgICBkYXlOYW1lOiBzdHJpbmcsXHJcbn1cclxuXHJcbmNvbnN0IERheUluZm86IFJlYWN0LkZDPE1lYWxQbGFuRGF5VHlwZSAmIERheUluZm9PdGhlclR5cGU+ID0gKHByb3BzKSA9PiB7XHJcblxyXG4gICAgY29uc3QgYnJlYWtmYXN0SXRlbXMgPSBwcm9wcy5pdGVtcy5maWx0ZXIoKGl0ZW0pID0+IGl0ZW0uc2xvdCA9PT0gMSk7XHJcbiAgICBjb25zdCBsdW5jaEl0ZW1zID0gcHJvcHMuaXRlbXMuZmlsdGVyKChpdGVtKSA9PiBpdGVtLnNsb3QgPT09IDIpO1xyXG4gICAgY29uc3QgZGlubmVySXRlbXMgPSBwcm9wcy5pdGVtcy5maWx0ZXIoKGl0ZW0pID0+IGl0ZW0uc2xvdCA9PT0gMyk7XHJcblxyXG4gICAgY29uc3QgZ2V0TnV0cml0aW9uQnlOYW1lID0gKG5hbWU6IHN0cmluZykgPT4ge1xyXG4gICAgICAgIGNvbnN0IG51dCA9IHByb3BzLm51dHJpdGlvblN1bW1hcnkubnV0cmllbnRzLmZpbmQoKG51dHIpID0+IG51dHIubmFtZSA9PT0gbmFtZSk7XHJcbiAgICAgICAgaWYgKCFudXQpIHtcclxuICAgICAgICAgICAgcmV0dXJuICcnO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gbnV0Lm5hbWUgKyAnOiAnICsgbnV0LmFtb3VudCArICcgJyArIG51dC51bml0O1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiAoXHJcbiAgICAgICAgPD5cclxuICAgICAgICAgICAgPFRleHQgXHJcbiAgICAgICAgICAgICAgICBjbGFzc05hbWU9e3N0eWxlc1tcImRheS1pbmZvX19uYW1lXCJdfVxyXG4gICAgICAgICAgICAgICAgdGFnPSdkaXYnIHZpZXc9J3AtMTYnIHdlaWdodD0nYm9sZCdcclxuICAgICAgICAgICAgPlxyXG4gICAgICAgICAgICAgICAge3Byb3BzLmRheU5hbWV9XHJcbiAgICAgICAgICAgIDwvVGV4dD5cclxuICAgICAgICAgICAgPFNsb3RJbmZvIHNsb3RzPXticmVha2Zhc3RJdGVtc30gLz5cclxuICAgICAgICAgICAgPFNsb3RJbmZvIHNsb3RzPXtsdW5jaEl0ZW1zfSAvPlxyXG4gICAgICAgICAgICA8U2xvdEluZm8gc2xvdHM9e2Rpbm5lckl0ZW1zfSAvPlxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT17c3R5bGVzW1wiZGF5LWluZm9fX3N1bW1hcnlcIl19PlxyXG4gICAgICAgICAgICAgICAgPFRleHQ+e2dldE51dHJpdGlvbkJ5TmFtZSgnQ2Fsb3JpZXMnKX08L1RleHQ+XHJcbiAgICAgICAgICAgICAgICA8VGV4dD57Z2V0TnV0cml0aW9uQnlOYW1lKCdGYXQnKX08L1RleHQ+XHJcbiAgICAgICAgICAgICAgICA8VGV4dD57Z2V0TnV0cml0aW9uQnlOYW1lKCdQcm90ZWluJyl9PC9UZXh0PlxyXG4gICAgICAgICAgICAgICAgPFRleHQ+e2dldE51dHJpdGlvbkJ5TmFtZSgnQ2FyYnMnKX08L1RleHQ+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgIDwvPlxyXG4gICAgKVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBtZW1vKERheUluZm8pOyIsImV4cG9ydCB7IGRlZmF1bHQgfSBmcm9tICcuL0RheUluZm8nOyIsIlxuICAgICAgaW1wb3J0IEFQSSBmcm9tIFwiIS4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiO1xuICAgICAgaW1wb3J0IGRvbUFQSSBmcm9tIFwiIS4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0Rm4gZnJvbSBcIiEuLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzXCI7XG4gICAgICBpbXBvcnQgc2V0QXR0cmlidXRlcyBmcm9tIFwiIS4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydFN0eWxlRWxlbWVudCBmcm9tIFwiIS4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qc1wiO1xuICAgICAgaW1wb3J0IHN0eWxlVGFnVHJhbnNmb3JtRm4gZnJvbSBcIiEuLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qc1wiO1xuICAgICAgaW1wb3J0IGNvbnRlbnQsICogYXMgbmFtZWRFeHBvcnQgZnJvbSBcIiEhLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanM/P3J1bGVTZXRbMV0ucnVsZXNbMF0udXNlWzFdIS4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9wb3N0Y3NzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cnVsZVNldFsxXS5ydWxlc1swXS51c2VbMl0hLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vV2Vla0luZm8ubW9kdWxlLnNjc3NcIjtcbiAgICAgIFxuICAgICAgXG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0gPSBzdHlsZVRhZ1RyYW5zZm9ybUZuO1xub3B0aW9ucy5zZXRBdHRyaWJ1dGVzID0gc2V0QXR0cmlidXRlcztcbm9wdGlvbnMuaW5zZXJ0ID0gaW5zZXJ0Rm4uYmluZChudWxsLCBcImhlYWRcIik7XG5vcHRpb25zLmRvbUFQSSA9IGRvbUFQSTtcbm9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50ID0gaW5zZXJ0U3R5bGVFbGVtZW50O1xuXG52YXIgdXBkYXRlID0gQVBJKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0ICogZnJvbSBcIiEhLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanM/P3J1bGVTZXRbMV0ucnVsZXNbMF0udXNlWzFdIS4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9wb3N0Y3NzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cnVsZVNldFsxXS5ydWxlc1swXS51c2VbMl0hLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vV2Vla0luZm8ubW9kdWxlLnNjc3NcIjtcbiAgICAgICBleHBvcnQgZGVmYXVsdCBjb250ZW50ICYmIGNvbnRlbnQubG9jYWxzID8gY29udGVudC5sb2NhbHMgOiB1bmRlZmluZWQ7XG4iLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tIFwicmVhY3RcIjtcclxuaW1wb3J0IHsgTWVhbFBsYW5XZWVrVHlwZSB9IGZyb20gXCJ0eXBlcy9hcGlUeXBlc1wiO1xyXG5pbXBvcnQgVGV4dCBmcm9tIFwiY29tcG9uZW50cy9UZXh0XCI7XHJcbmltcG9ydCBEYXlJbmZvIGZyb20gXCIuLi9EYXlJbmZvXCI7XHJcbmltcG9ydCB7IG1lbW8gfSBmcm9tIFwicmVhY3RcIjtcclxuaW1wb3J0IHN0eWxlcyBmcm9tICcuL1dlZWtJbmZvLm1vZHVsZS5zY3NzJztcclxuXHJcbmludGVyZmFjZSBXZWVrSW5mb1Byb3BzIHtcclxuICAgIHBsYW46IE1lYWxQbGFuV2Vla1R5cGUsXHJcbiAgICB3ZWVrU3RhcnQ/OiBzdHJpbmcsXHJcbn1cclxuXHJcbmNvbnN0IHdlZWtEYXlzID0gW1xyXG4gICAgJ01vbmRheScsIFxyXG4gICAgJ1R1ZXNkYXknLFxyXG4gICAgJ1dlZG5lc2RheScsXHJcbiAgICAnVGh1cnNkYXknLFxyXG4gICAgJ0ZyaWRheScsXHJcbiAgICAnU2F0dXJkYXknLFxyXG4gICAgJ1N1bmRheSdcclxuXTtcclxuXHJcbmNvbnN0IFdlZWtJbmZvOiBSZWFjdC5GQzxXZWVrSW5mb1Byb3BzPiA9IChwcm9wcykgPT4ge1xyXG5cclxuICAgIGNvbnN0IGVtcHR5RGF5cyA9IEFycmF5KDcgLSBwcm9wcy5wbGFuLmRheXMubGVuZ3RoKS5maWxsKDApO1xyXG5cclxuICAgIHJldHVybiAoXHJcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9e3N0eWxlc1tcIndlZWstaW5mb1wiXX0+XHJcbiAgICAgICAgICAgIDxUZXh0IFxyXG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lPXtzdHlsZXNbXCJ3ZWVrLWluZm9fX2hlYWRlclwiXX1cclxuICAgICAgICAgICAgICAgIHRhZz0nZGl2JyB2aWV3PSdwLTE4JyB3ZWlnaHQ9XCJib2xkXCJcclxuICAgICAgICAgICAgPlxyXG4gICAgICAgICAgICAgICAgQ3VycmVudCB3ZWVrXHJcbiAgICAgICAgICAgIDwvVGV4dD5cclxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9e3N0eWxlc1tcIndlZWstaW5mb19fZGF5c1wiXX0+XHJcbiAgICAgICAgICAgICAgICB7cHJvcHMucGxhbi5kYXlzLm1hcCgoZGF5LCBpbmRleCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxEYXlJbmZvIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF5TmFtZT17d2Vla0RheXNbaW5kZXhdfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgey4uLmRheX0gXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8+XHJcbiAgICAgICAgICAgICAgICAgICAgKVxyXG4gICAgICAgICAgICAgICAgfSl9XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgIDwvZGl2PiAgICBcclxuICAgIClcclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgbWVtbyhXZWVrSW5mbyk7IiwiZXhwb3J0IHsgZGVmYXVsdCB9IGZyb20gJy4vV2Vla0luZm8nOyIsIlxuICAgICAgaW1wb3J0IEFQSSBmcm9tIFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiO1xuICAgICAgaW1wb3J0IGRvbUFQSSBmcm9tIFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0Rm4gZnJvbSBcIiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzXCI7XG4gICAgICBpbXBvcnQgc2V0QXR0cmlidXRlcyBmcm9tIFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydFN0eWxlRWxlbWVudCBmcm9tIFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qc1wiO1xuICAgICAgaW1wb3J0IHN0eWxlVGFnVHJhbnNmb3JtRm4gZnJvbSBcIiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qc1wiO1xuICAgICAgaW1wb3J0IGNvbnRlbnQsICogYXMgbmFtZWRFeHBvcnQgZnJvbSBcIiEhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanM/P3J1bGVTZXRbMV0ucnVsZXNbMF0udXNlWzFdIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9wb3N0Y3NzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cnVsZVNldFsxXS5ydWxlc1swXS51c2VbMl0hLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vTWVhbFBsYW5uaW5nLm1vZHVsZS5zY3NzXCI7XG4gICAgICBcbiAgICAgIFxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtID0gc3R5bGVUYWdUcmFuc2Zvcm1Gbjtcbm9wdGlvbnMuc2V0QXR0cmlidXRlcyA9IHNldEF0dHJpYnV0ZXM7XG5vcHRpb25zLmluc2VydCA9IGluc2VydEZuLmJpbmQobnVsbCwgXCJoZWFkXCIpO1xub3B0aW9ucy5kb21BUEkgPSBkb21BUEk7XG5vcHRpb25zLmluc2VydFN0eWxlRWxlbWVudCA9IGluc2VydFN0eWxlRWxlbWVudDtcblxudmFyIHVwZGF0ZSA9IEFQSShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbmV4cG9ydCAqIGZyb20gXCIhIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9ydWxlU2V0WzFdLnJ1bGVzWzBdLnVzZVsxXSEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvcG9zdGNzcy1sb2FkZXIvZGlzdC9janMuanM/P3J1bGVTZXRbMV0ucnVsZXNbMF0udXNlWzJdIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL01lYWxQbGFubmluZy5tb2R1bGUuc2Nzc1wiO1xuICAgICAgIGV4cG9ydCBkZWZhdWx0IGNvbnRlbnQgJiYgY29udGVudC5sb2NhbHMgPyBjb250ZW50LmxvY2FscyA6IHVuZGVmaW5lZDtcbiIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gXCJyZWFjdFwiO1xyXG5pbXBvcnQgeyB1c2VFZmZlY3QsIHVzZVN0YXRlIH0gZnJvbSBcInJlYWN0XCI7XHJcbmltcG9ydCB7IHVzZUxvY2FsU3RvcmUgfSBmcm9tIFwiaG9va3MvdXNlTG9jYWxTdG9yZVwiO1xyXG5pbXBvcnQgeyB1c2VOYXZpZ2F0ZSB9IGZyb20gXCJyZWFjdC1yb3V0ZXItZG9tXCI7XHJcbmltcG9ydCB1c2VyU3RvcmUgZnJvbSBcInN0b3JlL1VzZXJTdG9yZVwiO1xyXG5pbXBvcnQgTWVhbFBsYW5uaW5nU3RvcmUgZnJvbSBcInN0b3JlL01lYWxQbGFubmluZ1N0b3JlXCI7XHJcbmltcG9ydCBUZXh0IGZyb20gXCJjb21wb25lbnRzL1RleHRcIjtcclxuaW1wb3J0IEVycm9yQm94IGZyb20gXCJjb21wb25lbnRzL0Vycm9yQm94XCI7XHJcbmltcG9ydCBCdXR0b24gZnJvbSBcImNvbXBvbmVudHMvQnV0dG9uXCI7XHJcbmltcG9ydCB7IG9ic2VydmVyIH0gZnJvbSBcIm1vYngtcmVhY3QtbGl0ZVwiO1xyXG5pbXBvcnQgV2Vla0luZm8gZnJvbSBcIi4vY29tcG9uZW50cy9XZWVrSW5mb1wiO1xyXG5pbXBvcnQgc3R5bGVzIGZyb20gXCIuL01lYWxQbGFubmluZy5tb2R1bGUuc2Nzc1wiO1xyXG5pbXBvcnQgTXVsdGlEcm9wZG93biwgeyBPcHRpb24gfSBmcm9tIFwiY29tcG9uZW50cy9NdWx0aURyb3Bkb3duXCI7XHJcbmltcG9ydCB7IHB1YmxpY1RlbXBsYXRlcyB9IGZyb20gXCJjb25maWcvYXBpXCI7XHJcblxyXG5jb25zdCBNZWFsUGxhbm5pbmc6IFJlYWN0LkZDID0gKCkgPT4ge1xyXG5cclxuICAgIGNvbnN0IHsgcGxhbiwgc3RhdHVzLCBsb2FkaW5nUGxhbiwgZ2VuZXJhdGVQbGFuIH0gPSB1c2VMb2NhbFN0b3JlKCgpID0+IG5ldyBNZWFsUGxhbm5pbmdTdG9yZSgpKTtcclxuICAgIGNvbnN0IFsgdGVtcGxhdGVzLCBzZXRUZW1wbGF0ZXMgXSA9IHVzZVN0YXRlPE9wdGlvbltdPihbXSk7XHJcbiAgICBjb25zdCB7IHVzZXIsIHVzZXJTdGF0dXMgfSA9IHVzZXJTdG9yZTtcclxuICAgIGNvbnN0IG5hdmlnYXRlID0gdXNlTmF2aWdhdGUoKTtcclxuXHJcbiAgICB1c2VFZmZlY3QoKCkgPT4ge1xyXG4gICAgICAgIGlmICh1c2VyU3RhdHVzICE9PSAnbm9uZScpIHtcclxuICAgICAgICAgICAgbG9hZGluZ1BsYW4odXNlci51c2VybmFtZSwgdXNlci5oYXNoKTtcclxuICAgICAgICB9XHJcbiAgICB9LCBbdXNlclN0YXR1c10pO1xyXG5cclxuICAgIHVzZUVmZmVjdCgoKSA9PiB7XHJcbiAgICAgICAgY29uc29sZS5sb2cocGxhbik7XHJcbiAgICB9LCBbcGxhbl0pXHJcblxyXG4gICAgcmV0dXJuIChcclxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT17c3R5bGVzW1wibWVhbHBsYW5uaW5nLXBhZ2VcIl19PlxyXG4gICAgICAgICAgICA8VGV4dFxyXG4gICAgICAgICAgICAgICAgdGFnPSdkaXYnXHJcbiAgICAgICAgICAgICAgICB2aWV3PSd0aXRsZSdcclxuICAgICAgICAgICAgPlxyXG4gICAgICAgICAgICAgICAgTWVhbCBwbGFuc1xyXG4gICAgICAgICAgICA8L1RleHQ+XHJcbiAgICAgICAgICAgIHt1c2VyU3RhdHVzID09PSAnbm9uZScgP1xyXG4gICAgICAgICAgICA8QnV0dG9uIG9uQ2xpY2s9eygpID0+IHsgbmF2aWdhdGUoJy9sb2dpbicpIH19PlxyXG4gICAgICAgICAgICAgICAgTG9naW5cclxuICAgICAgICAgICAgPC9CdXR0b24+XHJcbiAgICAgICAgICAgIDpcclxuICAgICAgICAgICAgPD5cclxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPXtzdHlsZXNbXCJtZWFscGxhbm5pbmctcGFnZV9fZm9ybVwiXX0+XHJcbiAgICAgICAgICAgICAgICAgICAgPE11bHRpRHJvcGRvd24gXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPXt0ZW1wbGF0ZXN9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbnM9e3B1YmxpY1RlbXBsYXRlcyBhcyBPcHRpb25bXX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U9eyh2YWx1ZSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0VGVtcGxhdGVzKHZhbHVlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgZ2V0VGl0bGU9eyh2YWx1ZSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHZhbHVlLmxlbmd0aCA9PT0gMSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZVswXS52YWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnVGVtcGxhdGUnO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9fVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxlY3RNb2RlPSdPTkUnXHJcbiAgICAgICAgICAgICAgICAgICAgLz5cclxuICAgICAgICAgICAgICAgICAgICA8QnV0dG9uIG9uQ2xpY2s9eygpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZ2VuZXJhdGVQbGFuKE51bWJlcih0ZW1wbGF0ZXMubGVuZ3RoID09PSAxID8gdGVtcGxhdGVzWzBdLmtleSA6ICczNycpLCB1c2VyLnVzZXJuYW1lLCB1c2VyLmhhc2gpO1xyXG4gICAgICAgICAgICAgICAgICAgIH19PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBHZW5lcmF0ZSBNZWFsIFBsYW5cclxuICAgICAgICAgICAgICAgICAgICA8L0J1dHRvbj5cclxuICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAge3N0YXR1cy5zdGF0dXNOYW1lID09PSAnTE9BRElORycgP1xyXG4gICAgICAgICAgICAgICAgPFRleHQ+Li4uTG9hZGluZzwvVGV4dD4gXHJcbiAgICAgICAgICAgICAgICA6XHJcbiAgICAgICAgICAgICAgICBzdGF0dXMuc3RhdHVzTmFtZSA9PT0gJ0VSUk9SJyA/XHJcbiAgICAgICAgICAgICAgICA8RXJyb3JCb3g+e3N0YXR1cy5zdGF0dXNNZXNzYWdlfTwvRXJyb3JCb3g+IFxyXG4gICAgICAgICAgICAgICAgOlxyXG4gICAgICAgICAgICAgICAgPD5cclxuICAgICAgICAgICAgICAgIHtwbGFuLmRheXMgJiZcclxuICAgICAgICAgICAgICAgIDxXZWVrSW5mbyBwbGFuPXtwbGFufSAvPlxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICA8Lz5cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICA8Lz5cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgKVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBvYnNlcnZlcihNZWFsUGxhbm5pbmcpOyIsImV4cG9ydCB7IGRlZmF1bHQgfSBmcm9tICcuL01lYWxQbGFubmluZyc7IiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgeyB1c2VFZmZlY3QgfSBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCAnc3R5bGVzL3N0eWxlcy5zY3NzJztcclxuXHJcbmltcG9ydCB7IEJyb3dzZXJSb3V0ZXIsIEhhc2hSb3V0ZXIsIE5hdmlnYXRlLCBSb3V0ZSwgUm91dGVzIH0gZnJvbSAncmVhY3Qtcm91dGVyLWRvbSc7XHJcbmltcG9ydCBNYWluIGZyb20gJ2NvbXBvbmVudHMvTWFpbic7XHJcbmltcG9ydCBSZWNpcGUgZnJvbSAnLi9wYWdlcy9SZWNpcGUnO1xyXG5pbXBvcnQgUmVjaXBlcyBmcm9tICcuL3BhZ2VzL1JlY2lwZXMnO1xyXG5pbXBvcnQgSW5ncmVkaWVudHMgZnJvbSAnLi9wYWdlcy9JbmdyZWRpZW50cyc7XHJcbmltcG9ydCBQcm9kdWN0cyBmcm9tICcuL3BhZ2VzL1Byb2R1Y3RzJztcclxuaW1wb3J0IE1lbnVJdGVtcyBmcm9tICcuL3BhZ2VzL01lbnVJdGVtcyc7XHJcbmltcG9ydCBTYXZlZCBmcm9tICcuL3BhZ2VzL1NhdmVkJztcclxuaW1wb3J0IExvZ2luIGZyb20gJy4vcGFnZXMvTG9naW4nO1xyXG5pbXBvcnQgVXNlciBmcm9tICcuL3BhZ2VzL1VzZXInO1xyXG5pbXBvcnQgTWVhbFBsYW5uaW5nIGZyb20gJy4vcGFnZXMvTWVhbFBsYW5uaW5nJztcclxuXHJcbmltcG9ydCBsb2NhbFN0b3JhZ2UgZnJvbSAnc3RvcmUvTG9jYWxTdG9yYWdlJztcclxuaW1wb3J0IHVzZXJTdG9yZSBmcm9tICdzdG9yZS9Vc2VyU3RvcmUnO1xyXG5pbXBvcnQgc2VhcmNoUGFyYW1zU3RvcmUgZnJvbSAnc3RvcmUvU2VhcmNoUGFyYW1zU3RvcmUnO1xyXG5pbXBvcnQgeyBvYnNlcnZlciB9IGZyb20gJ21vYngtcmVhY3QtbGl0ZSc7XHJcblxyXG5jb25zdCBBcHA6IFJlYWN0LkZDID0gKCkgPT4ge1xyXG5cclxuICB1c2VFZmZlY3QoKCkgPT4ge1xyXG4gICAgdXNlclN0b3JlLmdldENvb2tpZXMoKTtcclxuICAgIHNlYXJjaFBhcmFtc1N0b3JlLmdldFNlYXJjaFBhcmFtcygpO1xyXG5cclxuICAgIHJldHVybiAoKSA9PiB7XHJcbiAgICAgIGxvY2FsU3RvcmFnZS5kZXN0cm95KCk7XHJcbiAgICAgIHVzZXJTdG9yZS5kZXN0cm95KCk7XHJcbiAgICAgIHNlYXJjaFBhcmFtc1N0b3JlLmRlc3Ryb3koKTtcclxuICAgIH07XHJcbiAgfSwgW10pO1xyXG5cclxuICByZXR1cm4gKFxyXG4gICAgPEhhc2hSb3V0ZXIgYmFzZW5hbWU9Jyc+XHJcbiAgICAgIDxSb3V0ZXM+XHJcbiAgICAgICAgPFJvdXRlIHBhdGg9Jy8nIGVsZW1lbnQ9ezxNYWluIC8+fT5cclxuICAgICAgICAgIDxSb3V0ZSBwYXRoPScvcmVjaXBlcycgZWxlbWVudD17PFJlY2lwZXMgLz59IC8+XHJcbiAgICAgICAgICA8Um91dGUgcGF0aD0nLycgZWxlbWVudD17PFJlY2lwZXMgLz59IC8+XHJcbiAgICAgICAgICA8Um91dGUgcGF0aD0nL3JlY2lwZS86aWQnIGVsZW1lbnQ9ezxSZWNpcGUgLz59IC8+XHJcbiAgICAgICAgICA8Um91dGUgcGF0aD0nL2luZ3JlZGllbnRzJyBlbGVtZW50PXs8SW5ncmVkaWVudHMgLz59IC8+XHJcbiAgICAgICAgICA8Um91dGUgcGF0aD0nL3Byb2R1Y3RzJyBlbGVtZW50PXs8UHJvZHVjdHMgLz59IC8+XHJcbiAgICAgICAgICA8Um91dGUgcGF0aD0nL21lbnVJdGVtcycgZWxlbWVudD17PE1lbnVJdGVtcyAvPn0gLz5cclxuICAgICAgICAgIDxSb3V0ZSBwYXRoPScvc2F2ZWQnIGVsZW1lbnQ9ezxTYXZlZCAvPn0gLz5cclxuICAgICAgICAgIDxSb3V0ZSBwYXRoPScvbG9naW4nIGVsZW1lbnQ9ezxMb2dpbiAvPn0gLz5cclxuICAgICAgICAgIDxSb3V0ZSBwYXRoPScvdXNlcicgZWxlbWVudD17PFVzZXIgLz59IC8+XHJcbiAgICAgICAgICA8Um91dGUgcGF0aD0nL3BsYW5uaW5nJyBlbGVtZW50PXs8TWVhbFBsYW5uaW5nIC8+fSAvPlxyXG5cclxuICAgICAgICAgIDxSb3V0ZSBwYXRoPScqJyBlbGVtZW50PXs8TmF2aWdhdGUgdG89Jy9yZWNpcGVzJyByZXBsYWNlIC8+fSAvPlxyXG4gICAgICAgIDwvUm91dGU+XHJcbiAgICAgIDwvUm91dGVzPlxyXG4gICAgPC9IYXNoUm91dGVyPlxyXG4gIClcclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgb2JzZXJ2ZXIoQXBwKTtcclxuIiwiZXhwb3J0IHsgZGVmYXVsdCB9IGZyb20gJy4vQXBwJzsiLCJpbXBvcnQgeyBjb25maWd1cmUgfSBmcm9tIFwibW9ieFwiO1xyXG5cclxuY29uZmlndXJlKHtcclxuICB1c2VQcm94aWVzOiBcImlmYXZhaWxhYmxlXCIsXHJcbiAgY29tcHV0ZWRSZXF1aXJlc1JlYWN0aW9uOiB0cnVlLFxyXG4gIHJlYWN0aW9uUmVxdWlyZXNPYnNlcnZhYmxlOiB0cnVlLFxyXG4gIG9ic2VydmFibGVSZXF1aXJlc1JlYWN0aW9uOiB0cnVlLFxyXG59KTsiLCJcbiAgICAgIGltcG9ydCBBUEkgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIjtcbiAgICAgIGltcG9ydCBkb21BUEkgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydEZuIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qc1wiO1xuICAgICAgaW1wb3J0IHNldEF0dHJpYnV0ZXMgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRTdHlsZUVsZW1lbnQgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanNcIjtcbiAgICAgIGltcG9ydCBzdHlsZVRhZ1RyYW5zZm9ybUZuIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanNcIjtcbiAgICAgIGltcG9ydCBjb250ZW50LCAqIGFzIG5hbWVkRXhwb3J0IGZyb20gXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9wb3N0Y3NzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cnVsZVNldFsxXS5ydWxlc1sxXS51c2VbMl0hLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vZm9udHMuY3NzXCI7XG4gICAgICBcbiAgICAgIFxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtID0gc3R5bGVUYWdUcmFuc2Zvcm1Gbjtcbm9wdGlvbnMuc2V0QXR0cmlidXRlcyA9IHNldEF0dHJpYnV0ZXM7XG5vcHRpb25zLmluc2VydCA9IGluc2VydEZuLmJpbmQobnVsbCwgXCJoZWFkXCIpO1xub3B0aW9ucy5kb21BUEkgPSBkb21BUEk7XG5vcHRpb25zLmluc2VydFN0eWxlRWxlbWVudCA9IGluc2VydFN0eWxlRWxlbWVudDtcblxudmFyIHVwZGF0ZSA9IEFQSShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbmV4cG9ydCAqIGZyb20gXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9wb3N0Y3NzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cnVsZVNldFsxXS5ydWxlc1sxXS51c2VbMl0hLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vZm9udHMuY3NzXCI7XG4gICAgICAgZXhwb3J0IGRlZmF1bHQgY29udGVudCAmJiBjb250ZW50LmxvY2FscyA/IGNvbnRlbnQubG9jYWxzIDogdW5kZWZpbmVkO1xuIiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgeyBjcmVhdGVSb290IH0gZnJvbSAncmVhY3QtZG9tL2NsaWVudCc7XHJcbmltcG9ydCBBcHAgZnJvbSAnLi9BcHAnO1xyXG5pbXBvcnQgJ2NvbmZpZy9jb25maWd1cmVNb2JYJztcclxuaW1wb3J0ICdzdHlsZXMvc3R5bGVzLnNjc3MnO1xyXG5pbXBvcnQgJy4vc3R5bGVzL1JvYm90by9mb250cy5jc3MnO1xyXG5cclxuY3JlYXRlUm9vdChkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncm9vdCcpISkucmVuZGVyKFxyXG4gIDxSZWFjdC5TdHJpY3RNb2RlPlxyXG4gICAgPEFwcCAvPlxyXG4gIDwvUmVhY3QuU3RyaWN0TW9kZT4sXHJcbilcclxuXHJcbmlmIChtb2R1bGUuaG90KSB7XHJcbiAgbW9kdWxlLmhvdC5hY2NlcHQoKTtcclxufVxyXG4iXSwibmFtZXMiOlsiQWN0aW9uIiwiUG9wU3RhdGVFdmVudFR5cGUiLCJjcmVhdGVNZW1vcnlIaXN0b3J5Iiwib3B0aW9ucyIsImluaXRpYWxFbnRyaWVzIiwiaW5pdGlhbEluZGV4IiwidjVDb21wYXQiLCJlbnRyaWVzIiwibWFwIiwiZW50cnkiLCJpbmRleCIsImNyZWF0ZU1lbW9yeUxvY2F0aW9uIiwic3RhdGUiLCJ1bmRlZmluZWQiLCJjbGFtcEluZGV4IiwibGVuZ3RoIiwiYWN0aW9uIiwiUG9wIiwibGlzdGVuZXIiLCJuIiwiTWF0aCIsIm1pbiIsIm1heCIsImdldEN1cnJlbnRMb2NhdGlvbiIsInRvIiwia2V5IiwibG9jYXRpb24iLCJjcmVhdGVMb2NhdGlvbiIsInBhdGhuYW1lIiwid2FybmluZyIsImNoYXJBdCIsIkpTT04iLCJzdHJpbmdpZnkiLCJjcmVhdGVIcmVmIiwiY3JlYXRlUGF0aCIsImhpc3RvcnkiLCJjcmVhdGVVUkwiLCJVUkwiLCJlbmNvZGVMb2NhdGlvbiIsInBhdGgiLCJwYXJzZVBhdGgiLCJzZWFyY2giLCJoYXNoIiwicHVzaCIsIlB1c2giLCJuZXh0TG9jYXRpb24iLCJzcGxpY2UiLCJkZWx0YSIsInJlcGxhY2UiLCJSZXBsYWNlIiwiZ28iLCJuZXh0SW5kZXgiLCJsaXN0ZW4iLCJmbiIsImNyZWF0ZUJyb3dzZXJIaXN0b3J5IiwiY3JlYXRlQnJvd3NlckxvY2F0aW9uIiwid2luZG93IiwiZ2xvYmFsSGlzdG9yeSIsInVzciIsImNyZWF0ZUJyb3dzZXJIcmVmIiwiZ2V0VXJsQmFzZWRIaXN0b3J5IiwiY3JlYXRlSGFzaEhpc3RvcnkiLCJjcmVhdGVIYXNoTG9jYXRpb24iLCJzdWJzdHIiLCJzdGFydHNXaXRoIiwiY3JlYXRlSGFzaEhyZWYiLCJiYXNlIiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwiaHJlZiIsImdldEF0dHJpYnV0ZSIsInVybCIsImhhc2hJbmRleCIsImluZGV4T2YiLCJzbGljZSIsInZhbGlkYXRlSGFzaExvY2F0aW9uIiwiaW52YXJpYW50IiwidmFsdWUiLCJtZXNzYWdlIiwiRXJyb3IiLCJjb25kIiwiY29uc29sZSIsIndhcm4iLCJlIiwiY3JlYXRlS2V5IiwicmFuZG9tIiwidG9TdHJpbmciLCJnZXRIaXN0b3J5U3RhdGUiLCJpZHgiLCJjdXJyZW50IiwiX2V4dGVuZHMiLCJfcmVmIiwicGFyc2VkUGF0aCIsInNlYXJjaEluZGV4IiwiZ2V0TG9jYXRpb24iLCJ2YWxpZGF0ZUxvY2F0aW9uIiwiZGVmYXVsdFZpZXciLCJnZXRJbmRleCIsInJlcGxhY2VTdGF0ZSIsImhhbmRsZVBvcCIsImhpc3RvcnlTdGF0ZSIsInB1c2hTdGF0ZSIsImVycm9yIiwiRE9NRXhjZXB0aW9uIiwibmFtZSIsImFzc2lnbiIsIm9yaWdpbiIsImFkZEV2ZW50TGlzdGVuZXIiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiUmVzdWx0VHlwZSIsImltbXV0YWJsZVJvdXRlS2V5cyIsIlNldCIsImlzSW5kZXhSb3V0ZSIsInJvdXRlIiwiY29udmVydFJvdXRlc1RvRGF0YVJvdXRlcyIsInJvdXRlcyIsIm1hcFJvdXRlUHJvcGVydGllcyIsInBhcmVudFBhdGgiLCJtYW5pZmVzdCIsInRyZWVQYXRoIiwiaWQiLCJqb2luIiwiY2hpbGRyZW4iLCJpbmRleFJvdXRlIiwicGF0aE9yTGF5b3V0Um91dGUiLCJtYXRjaFJvdXRlcyIsImxvY2F0aW9uQXJnIiwiYmFzZW5hbWUiLCJzdHJpcEJhc2VuYW1lIiwiYnJhbmNoZXMiLCJmbGF0dGVuUm91dGVzIiwicmFua1JvdXRlQnJhbmNoZXMiLCJtYXRjaGVzIiwiaSIsImRlY29kZWQiLCJkZWNvZGVQYXRoIiwibWF0Y2hSb3V0ZUJyYW5jaCIsImNvbnZlcnRSb3V0ZU1hdGNoVG9VaU1hdGNoIiwibWF0Y2giLCJsb2FkZXJEYXRhIiwicGFyYW1zIiwiZGF0YSIsImhhbmRsZSIsInBhcmVudHNNZXRhIiwiZmxhdHRlblJvdXRlIiwicmVsYXRpdmVQYXRoIiwibWV0YSIsImNhc2VTZW5zaXRpdmUiLCJjaGlsZHJlbkluZGV4Iiwiam9pblBhdGhzIiwicm91dGVzTWV0YSIsImNvbmNhdCIsInNjb3JlIiwiY29tcHV0ZVNjb3JlIiwiZm9yRWFjaCIsIl9yb3V0ZSRwYXRoIiwiaW5jbHVkZXMiLCJleHBsb2RlZCIsImV4cGxvZGVPcHRpb25hbFNlZ21lbnRzIiwic2VnbWVudHMiLCJzcGxpdCIsImZpcnN0IiwicmVzdCIsImlzT3B0aW9uYWwiLCJlbmRzV2l0aCIsInJlcXVpcmVkIiwicmVzdEV4cGxvZGVkIiwicmVzdWx0Iiwic3VicGF0aCIsInNvcnQiLCJhIiwiYiIsImNvbXBhcmVJbmRleGVzIiwicGFyYW1SZSIsImR5bmFtaWNTZWdtZW50VmFsdWUiLCJpbmRleFJvdXRlVmFsdWUiLCJlbXB0eVNlZ21lbnRWYWx1ZSIsInN0YXRpY1NlZ21lbnRWYWx1ZSIsInNwbGF0UGVuYWx0eSIsImlzU3BsYXQiLCJzIiwiaW5pdGlhbFNjb3JlIiwic29tZSIsImZpbHRlciIsInJlZHVjZSIsInNlZ21lbnQiLCJ0ZXN0Iiwic2libGluZ3MiLCJldmVyeSIsImJyYW5jaCIsIm1hdGNoZWRQYXJhbXMiLCJtYXRjaGVkUGF0aG5hbWUiLCJlbmQiLCJyZW1haW5pbmdQYXRobmFtZSIsIm1hdGNoUGF0aCIsIk9iamVjdCIsInBhdGhuYW1lQmFzZSIsIm5vcm1hbGl6ZVBhdGhuYW1lIiwiZ2VuZXJhdGVQYXRoIiwib3JpZ2luYWxQYXRoIiwicHJlZml4IiwicCIsIlN0cmluZyIsImFycmF5IiwiaXNMYXN0U2VnbWVudCIsInN0YXIiLCJrZXlNYXRjaCIsIm9wdGlvbmFsIiwicGFyYW0iLCJwYXR0ZXJuIiwibWF0Y2hlciIsImNvbXBpbGVkUGFyYW1zIiwiY29tcGlsZVBhdGgiLCJjYXB0dXJlR3JvdXBzIiwibWVtbyIsInBhcmFtTmFtZSIsInNwbGF0VmFsdWUiLCJyZWdleHBTb3VyY2UiLCJfIiwiUmVnRXhwIiwidiIsImRlY29kZVVSSUNvbXBvbmVudCIsInRvTG93ZXJDYXNlIiwic3RhcnRJbmRleCIsIm5leHRDaGFyIiwicmVzb2x2ZVBhdGgiLCJmcm9tUGF0aG5hbWUiLCJ0b1BhdGhuYW1lIiwicmVzb2x2ZVBhdGhuYW1lIiwibm9ybWFsaXplU2VhcmNoIiwibm9ybWFsaXplSGFzaCIsInJlbGF0aXZlU2VnbWVudHMiLCJwb3AiLCJnZXRJbnZhbGlkUGF0aEVycm9yIiwiY2hhciIsImZpZWxkIiwiZGVzdCIsImdldFBhdGhDb250cmlidXRpbmdNYXRjaGVzIiwiZ2V0UmVzb2x2ZVRvTWF0Y2hlcyIsInY3X3JlbGF0aXZlU3BsYXRQYXRoIiwicGF0aE1hdGNoZXMiLCJyZXNvbHZlVG8iLCJ0b0FyZyIsInJvdXRlUGF0aG5hbWVzIiwibG9jYXRpb25QYXRobmFtZSIsImlzUGF0aFJlbGF0aXZlIiwiaXNFbXB0eVBhdGgiLCJmcm9tIiwicm91dGVQYXRobmFtZUluZGV4IiwidG9TZWdtZW50cyIsInNoaWZ0IiwiaGFzRXhwbGljaXRUcmFpbGluZ1NsYXNoIiwiaGFzQ3VycmVudFRyYWlsaW5nU2xhc2giLCJnZXRUb1BhdGhuYW1lIiwicGF0aHMiLCJqc29uIiwiaW5pdCIsInJlc3BvbnNlSW5pdCIsInN0YXR1cyIsImhlYWRlcnMiLCJIZWFkZXJzIiwiaGFzIiwic2V0IiwiUmVzcG9uc2UiLCJBYm9ydGVkRGVmZXJyZWRFcnJvciIsIkRlZmVycmVkRGF0YSIsImNvbnN0cnVjdG9yIiwicGVuZGluZ0tleXNTZXQiLCJzdWJzY3JpYmVycyIsImRlZmVycmVkS2V5cyIsIkFycmF5IiwiaXNBcnJheSIsInJlamVjdCIsImFib3J0UHJvbWlzZSIsIlByb21pc2UiLCJyIiwiY29udHJvbGxlciIsIkFib3J0Q29udHJvbGxlciIsIm9uQWJvcnQiLCJ1bmxpc3RlbkFib3J0U2lnbmFsIiwic2lnbmFsIiwiYWNjIiwiX3JlZjIiLCJ0cmFja1Byb21pc2UiLCJkb25lIiwiYWRkIiwicHJvbWlzZSIsInJhY2UiLCJ0aGVuIiwib25TZXR0bGUiLCJjYXRjaCIsImRlZmluZVByb3BlcnR5IiwiZ2V0IiwiYWJvcnRlZCIsImRlbGV0ZSIsInVuZGVmaW5lZEVycm9yIiwiZW1pdCIsInNldHRsZWRLZXkiLCJzdWJzY3JpYmVyIiwic3Vic2NyaWJlIiwiY2FuY2VsIiwiYWJvcnQiLCJrIiwicmVzb2x2ZURhdGEiLCJyZXNvbHZlIiwic2l6ZSIsInVud3JhcHBlZERhdGEiLCJfcmVmMyIsInVud3JhcFRyYWNrZWRQcm9taXNlIiwicGVuZGluZ0tleXMiLCJpc1RyYWNrZWRQcm9taXNlIiwiX3RyYWNrZWQiLCJfZXJyb3IiLCJfZGF0YSIsImRlZmVyIiwicmVkaXJlY3QiLCJyZWRpcmVjdERvY3VtZW50IiwicmVzcG9uc2UiLCJFcnJvclJlc3BvbnNlSW1wbCIsInN0YXR1c1RleHQiLCJpbnRlcm5hbCIsImlzUm91dGVFcnJvclJlc3BvbnNlIiwidmFsaWRNdXRhdGlvbk1ldGhvZHNBcnIiLCJ2YWxpZE11dGF0aW9uTWV0aG9kcyIsInZhbGlkUmVxdWVzdE1ldGhvZHNBcnIiLCJ2YWxpZFJlcXVlc3RNZXRob2RzIiwicmVkaXJlY3RTdGF0dXNDb2RlcyIsInJlZGlyZWN0UHJlc2VydmVNZXRob2RTdGF0dXNDb2RlcyIsIklETEVfTkFWSUdBVElPTiIsImZvcm1NZXRob2QiLCJmb3JtQWN0aW9uIiwiZm9ybUVuY1R5cGUiLCJmb3JtRGF0YSIsInRleHQiLCJJRExFX0ZFVENIRVIiLCJJRExFX0JMT0NLRVIiLCJwcm9jZWVkIiwicmVzZXQiLCJBQlNPTFVURV9VUkxfUkVHRVgiLCJkZWZhdWx0TWFwUm91dGVQcm9wZXJ0aWVzIiwiaGFzRXJyb3JCb3VuZGFyeSIsIkJvb2xlYW4iLCJUUkFOU0lUSU9OU19TVE9SQUdFX0tFWSIsImNyZWF0ZVJvdXRlciIsInJvdXRlcldpbmRvdyIsImlzQnJvd3NlciIsImNyZWF0ZUVsZW1lbnQiLCJpc1NlcnZlciIsImRldGVjdEVycm9yQm91bmRhcnkiLCJkYXRhUm91dGVzIiwiaW5GbGlnaHREYXRhUm91dGVzIiwiZnV0dXJlIiwidjdfZmV0Y2hlclBlcnNpc3QiLCJ2N19ub3JtYWxpemVGb3JtTWV0aG9kIiwidjdfcGFydGlhbEh5ZHJhdGlvbiIsInY3X3ByZXBlbmRCYXNlbmFtZSIsInVubGlzdGVuSGlzdG9yeSIsInNhdmVkU2Nyb2xsUG9zaXRpb25zIiwiZ2V0U2Nyb2xsUmVzdG9yYXRpb25LZXkiLCJnZXRTY3JvbGxQb3NpdGlvbiIsImluaXRpYWxTY3JvbGxSZXN0b3JlZCIsImh5ZHJhdGlvbkRhdGEiLCJpbml0aWFsTWF0Y2hlcyIsImluaXRpYWxFcnJvcnMiLCJnZXRJbnRlcm5hbFJvdXRlckVycm9yIiwiZ2V0U2hvcnRDaXJjdWl0TWF0Y2hlcyIsImluaXRpYWxpemVkIiwiaGFzTGF6eVJvdXRlcyIsIm0iLCJsYXp5IiwiaGFzTG9hZGVycyIsImxvYWRlciIsImVycm9ycyIsImlzUm91dGVJbml0aWFsaXplZCIsImh5ZHJhdGUiLCJmaW5kSW5kZXgiLCJyb3V0ZXIiLCJoaXN0b3J5QWN0aW9uIiwibmF2aWdhdGlvbiIsInJlc3RvcmVTY3JvbGxQb3NpdGlvbiIsInByZXZlbnRTY3JvbGxSZXNldCIsInJldmFsaWRhdGlvbiIsImFjdGlvbkRhdGEiLCJmZXRjaGVycyIsIk1hcCIsImJsb2NrZXJzIiwicGVuZGluZ0FjdGlvbiIsInBlbmRpbmdQcmV2ZW50U2Nyb2xsUmVzZXQiLCJwZW5kaW5nTmF2aWdhdGlvbkNvbnRyb2xsZXIiLCJwZW5kaW5nVmlld1RyYW5zaXRpb25FbmFibGVkIiwiYXBwbGllZFZpZXdUcmFuc2l0aW9ucyIsInJlbW92ZVBhZ2VIaWRlRXZlbnRMaXN0ZW5lciIsImlzVW5pbnRlcnJ1cHRlZFJldmFsaWRhdGlvbiIsImlzUmV2YWxpZGF0aW9uUmVxdWlyZWQiLCJjYW5jZWxsZWREZWZlcnJlZFJvdXRlcyIsImNhbmNlbGxlZEZldGNoZXJMb2FkcyIsImZldGNoQ29udHJvbGxlcnMiLCJpbmNyZW1lbnRpbmdMb2FkSWQiLCJwZW5kaW5nTmF2aWdhdGlvbkxvYWRJZCIsImZldGNoUmVsb2FkSWRzIiwiZmV0Y2hSZWRpcmVjdElkcyIsImZldGNoTG9hZE1hdGNoZXMiLCJhY3RpdmVGZXRjaGVycyIsImRlbGV0ZWRGZXRjaGVycyIsImFjdGl2ZURlZmVycmVkcyIsImJsb2NrZXJGdW5jdGlvbnMiLCJpZ25vcmVOZXh0SGlzdG9yeVVwZGF0ZSIsImluaXRpYWxpemUiLCJibG9ja2VyS2V5Iiwic2hvdWxkQmxvY2tOYXZpZ2F0aW9uIiwiY3VycmVudExvY2F0aW9uIiwidXBkYXRlQmxvY2tlciIsInVwZGF0ZVN0YXRlIiwic3RhcnROYXZpZ2F0aW9uIiwicmVzdG9yZUFwcGxpZWRUcmFuc2l0aW9ucyIsIl9zYXZlQXBwbGllZFRyYW5zaXRpb25zIiwicGVyc2lzdEFwcGxpZWRUcmFuc2l0aW9ucyIsImluaXRpYWxIeWRyYXRpb24iLCJkaXNwb3NlIiwiY2xlYXIiLCJkZWxldGVGZXRjaGVyIiwiZGVsZXRlQmxvY2tlciIsIm5ld1N0YXRlIiwib3B0cyIsImNvbXBsZXRlZEZldGNoZXJzIiwiZGVsZXRlZEZldGNoZXJzS2V5cyIsImZldGNoZXIiLCJ1bnN0YWJsZV92aWV3VHJhbnNpdGlvbk9wdHMiLCJ2aWV3VHJhbnNpdGlvbk9wdHMiLCJ1bnN0YWJsZV9mbHVzaFN5bmMiLCJmbHVzaFN5bmMiLCJjb21wbGV0ZU5hdmlnYXRpb24iLCJfdGVtcCIsIl9sb2NhdGlvbiRzdGF0ZSIsIl9sb2NhdGlvbiRzdGF0ZTIiLCJpc0FjdGlvblJlbG9hZCIsImlzTXV0YXRpb25NZXRob2QiLCJfaXNSZWRpcmVjdCIsImtleXMiLCJtZXJnZUxvYWRlckRhdGEiLCJwcmlvclBhdGhzIiwidG9QYXRocyIsImdldFNhdmVkU2Nyb2xsUG9zaXRpb24iLCJuYXZpZ2F0ZSIsIm5vcm1hbGl6ZWRQYXRoIiwibm9ybWFsaXplVG8iLCJmcm9tUm91dGVJZCIsInJlbGF0aXZlIiwic3VibWlzc2lvbiIsIm5vcm1hbGl6ZU5hdmlnYXRlT3B0aW9ucyIsInVzZXJSZXBsYWNlIiwicGVuZGluZ0Vycm9yIiwiZW5hYmxlVmlld1RyYW5zaXRpb24iLCJ1bnN0YWJsZV92aWV3VHJhbnNpdGlvbiIsInJldmFsaWRhdGUiLCJpbnRlcnJ1cHRBY3RpdmVMb2FkcyIsInN0YXJ0VW5pbnRlcnJ1cHRlZFJldmFsaWRhdGlvbiIsIm92ZXJyaWRlTmF2aWdhdGlvbiIsInNhdmVTY3JvbGxQb3NpdGlvbiIsInJvdXRlc1RvVXNlIiwibG9hZGluZ05hdmlnYXRpb24iLCJub3RGb3VuZE1hdGNoZXMiLCJjYW5jZWxBY3RpdmVEZWZlcnJlZHMiLCJpc0hhc2hDaGFuZ2VPbmx5IiwicmVxdWVzdCIsImNyZWF0ZUNsaWVudFNpZGVSZXF1ZXN0IiwicGVuZGluZ0FjdGlvbkRhdGEiLCJmaW5kTmVhcmVzdEJvdW5kYXJ5IiwiYWN0aW9uT3V0cHV0IiwiaGFuZGxlQWN0aW9uIiwic2hvcnRDaXJjdWl0ZWQiLCJwZW5kaW5nQWN0aW9uRXJyb3IiLCJnZXRMb2FkaW5nTmF2aWdhdGlvbiIsIlJlcXVlc3QiLCJoYW5kbGVMb2FkZXJzIiwiZmV0Y2hlclN1Ym1pc3Npb24iLCJnZXRTdWJtaXR0aW5nTmF2aWdhdGlvbiIsImFjdGlvbk1hdGNoIiwiZ2V0VGFyZ2V0TWF0Y2giLCJ0eXBlIiwibWV0aG9kIiwicm91dGVJZCIsImNhbGxMb2FkZXJPckFjdGlvbiIsImlzUmVkaXJlY3RSZXN1bHQiLCJzdGFydFJlZGlyZWN0TmF2aWdhdGlvbiIsImlzRXJyb3JSZXN1bHQiLCJib3VuZGFyeU1hdGNoIiwiaXNEZWZlcnJlZFJlc3VsdCIsImFjdGl2ZVN1Ym1pc3Npb24iLCJnZXRTdWJtaXNzaW9uRnJvbU5hdmlnYXRpb24iLCJtYXRjaGVzVG9Mb2FkIiwicmV2YWxpZGF0aW5nRmV0Y2hlcnMiLCJnZXRNYXRjaGVzVG9Mb2FkIiwidXBkYXRlZEZldGNoZXJzIiwibWFya0ZldGNoUmVkaXJlY3RzRG9uZSIsInJmIiwicmV2YWxpZGF0aW5nRmV0Y2hlciIsImdldExvYWRpbmdGZXRjaGVyIiwiYWJvcnRGZXRjaGVyIiwiYWJvcnRQZW5kaW5nRmV0Y2hSZXZhbGlkYXRpb25zIiwiZiIsInJlc3VsdHMiLCJsb2FkZXJSZXN1bHRzIiwiZmV0Y2hlclJlc3VsdHMiLCJjYWxsTG9hZGVyc0FuZE1heWJlUmVzb2x2ZURhdGEiLCJmaW5kUmVkaXJlY3QiLCJmZXRjaGVyS2V5IiwicHJvY2Vzc0xvYWRlckRhdGEiLCJkZWZlcnJlZERhdGEiLCJkaWRBYm9ydEZldGNoTG9hZHMiLCJhYm9ydFN0YWxlRmV0Y2hMb2FkcyIsInNob3VsZFVwZGF0ZUZldGNoZXJzIiwiZmV0Y2giLCJzZXRGZXRjaGVyRXJyb3IiLCJoYW5kbGVGZXRjaGVyQWN0aW9uIiwiaGFuZGxlRmV0Y2hlckxvYWRlciIsInJlcXVlc3RNYXRjaGVzIiwiZXhpc3RpbmdGZXRjaGVyIiwidXBkYXRlRmV0Y2hlclN0YXRlIiwiZ2V0U3VibWl0dGluZ0ZldGNoZXIiLCJhYm9ydENvbnRyb2xsZXIiLCJmZXRjaFJlcXVlc3QiLCJvcmlnaW5hdGluZ0xvYWRJZCIsImFjdGlvblJlc3VsdCIsImdldERvbmVGZXRjaGVyIiwicmV2YWxpZGF0aW9uUmVxdWVzdCIsImxvYWRJZCIsImxvYWRGZXRjaGVyIiwic3RhbGVLZXkiLCJkb25lRmV0Y2hlciIsInJlc29sdmVEZWZlcnJlZERhdGEiLCJfdGVtcDIiLCJyZWRpcmVjdExvY2F0aW9uIiwiaXNEb2N1bWVudFJlbG9hZCIsInJlbG9hZERvY3VtZW50IiwicmVkaXJlY3RIaXN0b3J5QWN0aW9uIiwiY3VycmVudE1hdGNoZXMiLCJmZXRjaGVyc1RvTG9hZCIsImFsbCIsInJlc29sdmVEZWZlcnJlZFJlc3VsdHMiLCJnZXRGZXRjaGVyIiwiZGVsZXRlRmV0Y2hlckFuZFVwZGF0ZVN0YXRlIiwiY291bnQiLCJtYXJrRmV0Y2hlcnNEb25lIiwiZG9uZUtleXMiLCJsYW5kZWRJZCIsInllZXRlZEtleXMiLCJnZXRCbG9ja2VyIiwiYmxvY2tlciIsIm5ld0Jsb2NrZXIiLCJfcmVmNCIsImJsb2NrZXJGdW5jdGlvbiIsInByZWRpY2F0ZSIsImNhbmNlbGxlZFJvdXRlSWRzIiwiZGZkIiwiZW5hYmxlU2Nyb2xsUmVzdG9yYXRpb24iLCJwb3NpdGlvbnMiLCJnZXRQb3NpdGlvbiIsImdldEtleSIsInkiLCJnZXRTY3JvbGxLZXkiLCJfaW50ZXJuYWxTZXRSb3V0ZXMiLCJuZXdSb3V0ZXMiLCJfaW50ZXJuYWxGZXRjaENvbnRyb2xsZXJzIiwiX2ludGVybmFsQWN0aXZlRGVmZXJyZWRzIiwiVU5TQUZFX0RFRkVSUkVEX1NZTUJPTCIsIlN5bWJvbCIsImNyZWF0ZVN0YXRpY0hhbmRsZXIiLCJ2N190aHJvd0Fib3J0UmVhc29uIiwicXVlcnkiLCJfdGVtcDMiLCJyZXF1ZXN0Q29udGV4dCIsImlzVmFsaWRNZXRob2QiLCJtZXRob2ROb3RBbGxvd2VkTWF0Y2hlcyIsInN0YXR1c0NvZGUiLCJsb2FkZXJIZWFkZXJzIiwiYWN0aW9uSGVhZGVycyIsInF1ZXJ5SW1wbCIsImlzUmVzcG9uc2UiLCJxdWVyeVJvdXRlIiwiX3RlbXA0IiwiZmluZCIsInZhbHVlcyIsIl9yZXN1bHQkYWN0aXZlRGVmZXJyZSIsInJvdXRlTWF0Y2giLCJzdWJtaXQiLCJsb2FkUm91dGVEYXRhIiwiaXNRdWVyeVJvdXRlUmVzcG9uc2UiLCJpc1JlZGlyZWN0UmVzcG9uc2UiLCJpc1JvdXRlUmVxdWVzdCIsImlzU3RhdGljUmVxdWVzdCIsInRocm93U3RhdGljSGFuZGxlckFib3J0ZWRFcnJvciIsIkxvY2F0aW9uIiwiY29udGV4dCIsImxvYWRlclJlcXVlc3QiLCJnZXRMb2FkZXJNYXRjaGVzVW50aWxCb3VuZGFyeSIsInByb2Nlc3NSb3V0ZUxvYWRlckRhdGEiLCJleGVjdXRlZExvYWRlcnMiLCJmcm9tRW50cmllcyIsImdldFN0YXRpY0NvbnRleHRGcm9tRXJyb3IiLCJuZXdDb250ZXh0IiwiX2RlZXBlc3RSZW5kZXJlZEJvdW5kYXJ5SWQiLCJyZWFzb24iLCJpc1N1Ym1pc3Npb25OYXZpZ2F0aW9uIiwiYm9keSIsInByZXBlbmRCYXNlbmFtZSIsImNvbnRleHR1YWxNYXRjaGVzIiwiYWN0aXZlUm91dGVNYXRjaCIsImhhc05ha2VkSW5kZXhRdWVyeSIsIm5vcm1hbGl6ZUZvcm1NZXRob2QiLCJpc0ZldGNoZXIiLCJnZXRJbnZhbGlkQm9keUVycm9yIiwicmF3Rm9ybU1ldGhvZCIsInRvVXBwZXJDYXNlIiwic3RyaXBIYXNoRnJvbVBhdGgiLCJGb3JtRGF0YSIsIlVSTFNlYXJjaFBhcmFtcyIsIl9yZWY1IiwicGFyc2UiLCJzZWFyY2hQYXJhbXMiLCJjb252ZXJ0Rm9ybURhdGFUb1NlYXJjaFBhcmFtcyIsImNvbnZlcnRTZWFyY2hQYXJhbXNUb0Zvcm1EYXRhIiwiYXBwZW5kIiwiYm91bmRhcnlJZCIsImJvdW5kYXJ5TWF0Y2hlcyIsImlzSW5pdGlhbExvYWQiLCJjdXJyZW50VXJsIiwibmV4dFVybCIsIm5hdmlnYXRpb25NYXRjaGVzIiwiaXNOZXdMb2FkZXIiLCJjdXJyZW50Um91dGVNYXRjaCIsIm5leHRSb3V0ZU1hdGNoIiwic2hvdWxkUmV2YWxpZGF0ZUxvYWRlciIsImN1cnJlbnRQYXJhbXMiLCJuZXh0UGFyYW1zIiwiZGVmYXVsdFNob3VsZFJldmFsaWRhdGUiLCJpc05ld1JvdXRlSW5zdGFuY2UiLCJmZXRjaGVyTWF0Y2hlcyIsImZldGNoZXJNYXRjaCIsInNob3VsZFJldmFsaWRhdGUiLCJjdXJyZW50TG9hZGVyRGF0YSIsImN1cnJlbnRNYXRjaCIsImlzTmV3IiwiaXNNaXNzaW5nRGF0YSIsImN1cnJlbnRQYXRoIiwibG9hZGVyTWF0Y2giLCJhcmciLCJyb3V0ZUNob2ljZSIsImxvYWRMYXp5Um91dGVNb2R1bGUiLCJsYXp5Um91dGUiLCJyb3V0ZVRvVXBkYXRlIiwicm91dGVVcGRhdGVzIiwibGF6eVJvdXRlUHJvcGVydHkiLCJzdGF0aWNSb3V0ZVZhbHVlIiwiaXNQcm9wZXJ0eVN0YXRpY2FsbHlEZWZpbmVkIiwicmVzdWx0VHlwZSIsIm9uUmVqZWN0IiwicnVuSGFuZGxlciIsImhhbmRsZXIiLCJoYW5kbGVyRXJyb3IiLCJwcm90b2NvbCIsImlzU2FtZUJhc2VuYW1lIiwicXVlcnlSb3V0ZVJlc3BvbnNlIiwiY29udGVudFR5cGUiLCJpc0RlZmVycmVkRGF0YSIsIl9yZXN1bHQkaW5pdCIsIl9yZXN1bHQkaW5pdDIiLCJkZWZlcnJlZCIsImZvdW5kRXJyb3IiLCJuZXdMb2FkZXJEYXRhIiwibWVyZ2VkTG9hZGVyRGF0YSIsImhhc093blByb3BlcnR5IiwiZWxpZ2libGVNYXRjaGVzIiwicmV2ZXJzZSIsIl90ZW1wNSIsImVycm9yTWVzc2FnZSIsIm9iaiIsInNpZ25hbHMiLCJpc1JldmFsaWRhdGluZ0xvYWRlciIsInVud3JhcCIsImdldEFsbCIsIl93aW5kb3ciLCJ0cmFuc2l0aW9ucyIsInNlc3Npb25Qb3NpdGlvbnMiLCJzZXNzaW9uU3RvcmFnZSIsImdldEl0ZW0iLCJzZXRJdGVtIiwiRGF0YVJvdXRlckNvbnRleHQiLCJSZWFjdCIsImNyZWF0ZUNvbnRleHQiLCJwcm9jZXNzIiwiZW52IiwiTk9ERV9FTlYiLCJkaXNwbGF5TmFtZSIsIkRhdGFSb3V0ZXJTdGF0ZUNvbnRleHQiLCJBd2FpdENvbnRleHQiLCJOYXZpZ2F0aW9uQ29udGV4dCIsIkxvY2F0aW9uQ29udGV4dCIsIlJvdXRlQ29udGV4dCIsIm91dGxldCIsImlzRGF0YVJvdXRlIiwiUm91dGVFcnJvckNvbnRleHQiLCJ1c2VIcmVmIiwidXNlSW5Sb3V0ZXJDb250ZXh0IiwiVU5TQUZFX2ludmFyaWFudCIsIm5hdmlnYXRvciIsInVzZUNvbnRleHQiLCJ1c2VSZXNvbHZlZFBhdGgiLCJqb2luZWRQYXRobmFtZSIsInVzZUxvY2F0aW9uIiwidXNlTmF2aWdhdGlvblR5cGUiLCJuYXZpZ2F0aW9uVHlwZSIsInVzZU1hdGNoIiwidXNlTWVtbyIsIm5hdmlnYXRlRWZmZWN0V2FybmluZyIsInVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QiLCJjYiIsImlzU3RhdGljIiwic3RhdGljIiwidXNlTGF5b3V0RWZmZWN0IiwidXNlTmF2aWdhdGUiLCJ1c2VOYXZpZ2F0ZVN0YWJsZSIsInVzZU5hdmlnYXRlVW5zdGFibGUiLCJkYXRhUm91dGVyQ29udGV4dCIsInJvdXRlUGF0aG5hbWVzSnNvbiIsIlVOU0FGRV9nZXRSZXNvbHZlVG9NYXRjaGVzIiwiYWN0aXZlUmVmIiwidXNlUmVmIiwidXNlQ2FsbGJhY2siLCJVTlNBRkVfd2FybmluZyIsIk91dGxldENvbnRleHQiLCJ1c2VPdXRsZXRDb250ZXh0IiwidXNlT3V0bGV0IiwiUHJvdmlkZXIiLCJ1c2VQYXJhbXMiLCJ1c2VSb3V0ZXMiLCJ1c2VSb3V0ZXNJbXBsIiwiZGF0YVJvdXRlclN0YXRlIiwicGFyZW50TWF0Y2hlcyIsInBhcmVudFBhcmFtcyIsInBhcmVudFBhdGhuYW1lIiwicGFyZW50UGF0aG5hbWVCYXNlIiwicGFyZW50Um91dGUiLCJ3YXJuaW5nT25jZSIsImxvY2F0aW9uRnJvbUNvbnRleHQiLCJfcGFyc2VkTG9jYXRpb25BcmckcGEiLCJwYXJzZWRMb2NhdGlvbkFyZyIsInBhcmVudFNlZ21lbnRzIiwiZWxlbWVudCIsIkNvbXBvbmVudCIsInJlbmRlcmVkTWF0Y2hlcyIsIl9yZW5kZXJNYXRjaGVzIiwiRGVmYXVsdEVycm9yQ29tcG9uZW50IiwidXNlUm91dGVFcnJvciIsInN0YWNrIiwibGlnaHRncmV5IiwicHJlU3R5bGVzIiwicGFkZGluZyIsImJhY2tncm91bmRDb2xvciIsImNvZGVTdHlsZXMiLCJkZXZJbmZvIiwiRnJhZ21lbnQiLCJzdHlsZSIsImZvbnRTdHlsZSIsImRlZmF1bHRFcnJvckVsZW1lbnQiLCJSZW5kZXJFcnJvckJvdW5kYXJ5IiwicHJvcHMiLCJnZXREZXJpdmVkU3RhdGVGcm9tRXJyb3IiLCJnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMiLCJjb21wb25lbnREaWRDYXRjaCIsImVycm9ySW5mbyIsInJlbmRlciIsInJvdXRlQ29udGV4dCIsImNvbXBvbmVudCIsIlJlbmRlcmVkUm91dGUiLCJzdGF0aWNDb250ZXh0IiwiZXJyb3JFbGVtZW50IiwiRXJyb3JCb3VuZGFyeSIsIl9kYXRhUm91dGVyU3RhdGUyIiwiX2RhdGFSb3V0ZXJTdGF0ZSIsImVycm9ySW5kZXgiLCJyZW5kZXJGYWxsYmFjayIsImZhbGxiYWNrSW5kZXgiLCJIeWRyYXRlRmFsbGJhY2siLCJoeWRyYXRlRmFsbGJhY2tFbGVtZW50IiwibmVlZHNUb1J1bkxvYWRlciIsInJlZHVjZVJpZ2h0Iiwic2hvdWxkUmVuZGVySHlkcmF0ZUZhbGxiYWNrIiwiZ2V0Q2hpbGRyZW4iLCJEYXRhUm91dGVySG9vayIsIkRhdGFSb3V0ZXJTdGF0ZUhvb2siLCJnZXREYXRhUm91dGVyQ29uc29sZUVycm9yIiwiaG9va05hbWUiLCJ1c2VEYXRhUm91dGVyQ29udGV4dCIsImN0eCIsInVzZURhdGFSb3V0ZXJTdGF0ZSIsInVzZVJvdXRlQ29udGV4dCIsInVzZUN1cnJlbnRSb3V0ZUlkIiwidGhpc1JvdXRlIiwidXNlUm91dGVJZCIsIlVzZVJvdXRlSWQiLCJ1c2VOYXZpZ2F0aW9uIiwiVXNlTmF2aWdhdGlvbiIsInVzZVJldmFsaWRhdG9yIiwiVXNlUmV2YWxpZGF0b3IiLCJ1c2VNYXRjaGVzIiwiVXNlTWF0Y2hlcyIsIlVOU0FGRV9jb252ZXJ0Um91dGVNYXRjaFRvVWlNYXRjaCIsInVzZUxvYWRlckRhdGEiLCJVc2VMb2FkZXJEYXRhIiwidXNlUm91dGVMb2FkZXJEYXRhIiwiVXNlUm91dGVMb2FkZXJEYXRhIiwidXNlQWN0aW9uRGF0YSIsIlVzZUFjdGlvbkRhdGEiLCJfc3RhdGUkZXJyb3JzIiwiVXNlUm91dGVFcnJvciIsInVzZUFzeW5jVmFsdWUiLCJ1c2VBc3luY0Vycm9yIiwiYmxvY2tlcklkIiwidXNlQmxvY2tlciIsInNob3VsZEJsb2NrIiwiVXNlQmxvY2tlciIsInNldEJsb2NrZXJLZXkiLCJ1c2VTdGF0ZSIsInVzZUVmZmVjdCIsIlVzZU5hdmlnYXRlU3RhYmxlIiwiYWxyZWFkeVdhcm5lZCIsIlNUQVJUX1RSQU5TSVRJT04iLCJzdGFydFRyYW5zaXRpb25JbXBsIiwiUm91dGVyUHJvdmlkZXIiLCJmYWxsYmFja0VsZW1lbnQiLCJzZXRTdGF0ZUltcGwiLCJ2N19zdGFydFRyYW5zaXRpb24iLCJzZXRTdGF0ZSIsIlJvdXRlciIsIkRhdGFSb3V0ZXMiLCJNZW1vcnlSb3V0ZXIiLCJoaXN0b3J5UmVmIiwiTmF2aWdhdGUiLCJqc29uUGF0aCIsIk91dGxldCIsIlJvdXRlIiwiX3Byb3BzIiwiYmFzZW5hbWVQcm9wIiwibG9jYXRpb25Qcm9wIiwic3RhdGljUHJvcCIsIm5hdmlnYXRpb25Db250ZXh0IiwibG9jYXRpb25Db250ZXh0IiwidHJhaWxpbmdQYXRobmFtZSIsIlJvdXRlcyIsIl9yZWY2IiwiY3JlYXRlUm91dGVzRnJvbUNoaWxkcmVuIiwiQXdhaXQiLCJfcmVmNyIsIkF3YWl0RXJyb3JCb3VuZGFyeSIsIlJlc29sdmVBd2FpdCIsIkF3YWl0UmVuZGVyU3RhdHVzIiwibmV2ZXJTZXR0bGVkUHJvbWlzZSIsInBlbmRpbmciLCJzdWNjZXNzIiwicmVuZGVyRXJyb3IiLCJfcmVmOCIsInRvUmVuZGVyIiwiQ2hpbGRyZW4iLCJpc1ZhbGlkRWxlbWVudCIsImFwcGx5IiwicmVuZGVyTWF0Y2hlcyIsInVwZGF0ZXMiLCJjcmVhdGVNZW1vcnlSb3V0ZXIiLCJkZWZhdWx0TWV0aG9kIiwiZGVmYXVsdEVuY1R5cGUiLCJpc0h0bWxFbGVtZW50Iiwib2JqZWN0IiwidGFnTmFtZSIsImlzQnV0dG9uRWxlbWVudCIsImlzRm9ybUVsZW1lbnQiLCJpc0lucHV0RWxlbWVudCIsImlzTW9kaWZpZWRFdmVudCIsImV2ZW50IiwibWV0YUtleSIsImFsdEtleSIsImN0cmxLZXkiLCJzaGlmdEtleSIsInNob3VsZFByb2Nlc3NMaW5rQ2xpY2siLCJ0YXJnZXQiLCJidXR0b24iLCJjcmVhdGVTZWFyY2hQYXJhbXMiLCJnZXRTZWFyY2hQYXJhbXNGb3JMb2NhdGlvbiIsImxvY2F0aW9uU2VhcmNoIiwiZGVmYXVsdFNlYXJjaFBhcmFtcyIsIl9mb3JtRGF0YVN1cHBvcnRzU3VibWl0dGVyIiwiaXNGb3JtRGF0YVN1Ym1pdHRlclN1cHBvcnRlZCIsInN1cHBvcnRlZEZvcm1FbmNUeXBlcyIsImdldEZvcm1FbmNUeXBlIiwiZW5jVHlwZSIsImdldEZvcm1TdWJtaXNzaW9uSW5mbyIsImF0dHIiLCJmb3JtIiwiUkVBQ1RfUk9VVEVSX1ZFUlNJT04iLCJfX3JlYWN0Um91dGVyVmVyc2lvbiIsImNyZWF0ZUJyb3dzZXJSb3V0ZXIiLCJwYXJzZUh5ZHJhdGlvbkRhdGEiLCJVTlNBRkVfbWFwUm91dGVQcm9wZXJ0aWVzIiwiY3JlYXRlSGFzaFJvdXRlciIsIl9fc3RhdGljUm91dGVySHlkcmF0aW9uRGF0YSIsImRlc2VyaWFsaXplRXJyb3JzIiwic2VyaWFsaXplZCIsInZhbCIsIl9fdHlwZSIsIlVOU0FGRV9FcnJvclJlc3BvbnNlSW1wbCIsIl9fc3ViVHlwZSIsIkVycm9yQ29uc3RydWN0b3IiLCJWaWV3VHJhbnNpdGlvbkNvbnRleHQiLCJpc1RyYW5zaXRpb25pbmciLCJGZXRjaGVyc0NvbnRleHQiLCJGTFVTSF9TWU5DIiwiZmx1c2hTeW5jSW1wbCIsIlJlYWN0RE9NIiwiVVNFX0lEIiwidXNlSWRJbXBsIiwic3RhcnRUcmFuc2l0aW9uU2FmZSIsImZsdXNoU3luY1NhZmUiLCJEZWZlcnJlZCIsInBlbmRpbmdTdGF0ZSIsInNldFBlbmRpbmdTdGF0ZSIsInZ0Q29udGV4dCIsInNldFZ0Q29udGV4dCIsInJlbmRlckRmZCIsInNldFJlbmRlckRmZCIsInRyYW5zaXRpb24iLCJzZXRUcmFuc2l0aW9uIiwiaW50ZXJydXB0aW9uIiwic2V0SW50ZXJydXB0aW9uIiwiZmV0Y2hlckRhdGEiLCJvcHRJblN0YXJ0VHJhbnNpdGlvbiIsImlzVmlld1RyYW5zaXRpb25VbmF2YWlsYWJsZSIsInN0YXJ0Vmlld1RyYW5zaXRpb24iLCJza2lwVHJhbnNpdGlvbiIsInQiLCJmaW5pc2hlZCIsImZpbmFsbHkiLCJyZW5kZXJQcm9taXNlIiwiVU5TQUZFX0RhdGFSb3V0ZXJDb250ZXh0IiwiVU5TQUZFX0RhdGFSb3V0ZXJTdGF0ZUNvbnRleHQiLCJVTlNBRkVfdXNlUm91dGVzSW1wbCIsIkJyb3dzZXJSb3V0ZXIiLCJIYXNoUm91dGVyIiwiSGlzdG9yeVJvdXRlciIsIkxpbmsiLCJmb3J3YXJkUmVmIiwiTGlua1dpdGhSZWYiLCJyZWYiLCJvbkNsaWNrIiwiX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UiLCJfZXhjbHVkZWQiLCJVTlNBRkVfTmF2aWdhdGlvbkNvbnRleHQiLCJhYnNvbHV0ZUhyZWYiLCJpc0V4dGVybmFsIiwidGFyZ2V0VXJsIiwiaW50ZXJuYWxPbkNsaWNrIiwidXNlTGlua0NsaWNrSGFuZGxlciIsImhhbmRsZUNsaWNrIiwiZGVmYXVsdFByZXZlbnRlZCIsIk5hdkxpbmsiLCJOYXZMaW5rV2l0aFJlZiIsImFyaWFDdXJyZW50UHJvcCIsImNsYXNzTmFtZSIsImNsYXNzTmFtZVByb3AiLCJzdHlsZVByb3AiLCJfZXhjbHVkZWQyIiwicm91dGVyU3RhdGUiLCJ1c2VWaWV3VHJhbnNpdGlvblN0YXRlIiwibmV4dExvY2F0aW9uUGF0aG5hbWUiLCJlbmRTbGFzaFBvc2l0aW9uIiwiaXNBY3RpdmUiLCJpc1BlbmRpbmciLCJyZW5kZXJQcm9wcyIsImFyaWFDdXJyZW50IiwiRm9ybSIsIl9yZWY5IiwiZm9yd2FyZGVkUmVmIiwib25TdWJtaXQiLCJfZXhjbHVkZWQzIiwidXNlU3VibWl0IiwidXNlRm9ybUFjdGlvbiIsInN1Ym1pdEhhbmRsZXIiLCJwcmV2ZW50RGVmYXVsdCIsInN1Ym1pdHRlciIsIm5hdGl2ZUV2ZW50Iiwic3VibWl0TWV0aG9kIiwiY3VycmVudFRhcmdldCIsIlNjcm9sbFJlc3RvcmF0aW9uIiwiX3JlZjEwIiwic3RvcmFnZUtleSIsInVzZVNjcm9sbFJlc3RvcmF0aW9uIiwicmVwbGFjZVByb3AiLCJ1c2VTZWFyY2hQYXJhbXMiLCJkZWZhdWx0SW5pdCIsImRlZmF1bHRTZWFyY2hQYXJhbXNSZWYiLCJoYXNTZXRTZWFyY2hQYXJhbXNSZWYiLCJzZXRTZWFyY2hQYXJhbXMiLCJuZXh0SW5pdCIsIm5hdmlnYXRlT3B0aW9ucyIsIm5ld1NlYXJjaFBhcmFtcyIsInZhbGlkYXRlQ2xpZW50U2lkZVN1Ym1pc3Npb24iLCJmZXRjaGVySWQiLCJnZXRVbmlxdWVGZXRjaGVySWQiLCJVc2VTdWJtaXQiLCJjdXJyZW50Um91dGVJZCIsIlVOU0FGRV91c2VSb3V0ZUlkIiwiVU5TQUZFX1JvdXRlQ29udGV4dCIsInVzZUZldGNoZXIiLCJfcm91dGUkbWF0Y2hlcyIsIlVzZUZldGNoZXIiLCJkZWZhdWx0S2V5Iiwic2V0RmV0Y2hlcktleSIsImxvYWQiLCJzdWJtaXRJbXBsIiwiRmV0Y2hlckZvcm0iLCJmZXRjaGVyV2l0aENvbXBvbmVudHMiLCJ1c2VGZXRjaGVycyIsIlVzZUZldGNoZXJzIiwiX3JlZjExIiwiU0NST0xMX1JFU1RPUkFUSU9OX1NUT1JBR0VfS0VZIiwiVXNlU2Nyb2xsUmVzdG9yYXRpb24iLCJzY3JvbGxSZXN0b3JhdGlvbiIsInVzZVBhZ2VIaWRlIiwic2Nyb2xsWSIsImdldEtleVdpdGhvdXRCYXNlbmFtZSIsImRpc2FibGVTY3JvbGxSZXN0b3JhdGlvbiIsInNjcm9sbFRvIiwiZWwiLCJnZXRFbGVtZW50QnlJZCIsInNjcm9sbEludG9WaWV3IiwidXNlQmVmb3JlVW5sb2FkIiwiY2FsbGJhY2siLCJjYXB0dXJlIiwidXNlUHJvbXB0IiwiX3JlZjEyIiwid2hlbiIsImNvbmZpcm0iLCJzZXRUaW1lb3V0IiwibmV4dFBhdGgiLCJjbGFzc05hbWVzIiwic3R5bGVzIiwiVGV4dCIsIlRhZyIsInRhZyIsIm1heExpbmVzIiwidmlldyIsImNvbG9yIiwid2VpZ2h0Iiwib25DTGljayIsImRlZmF1bHQiLCJiaW5kIiwiYXJndW1lbnRzIiwic291cmNlIiwicHJvdG90eXBlIiwiY2FsbCIsIkljb24iLCJpY29uV2lkdGgiLCJ3aWR0aCIsImljb25IZWlnaHQiLCJoZWlnaHQiLCJmaWxsIiwidmlld0JveCIsIkxvZ29JY29uIiwiY2xpcFBhdGgiLCJkIiwieDEiLCJ5MSIsIngyIiwieTIiLCJncmFkaWVudFVuaXRzIiwic3RvcENvbG9yIiwib2Zmc2V0IiwiTG9nb0Jsb2NrIiwibmljZUVycm9ycyIsImFubm90YXRpb25UeXBlIiwib3RoZXIiLCJkYXRhU3RydWN0dXJlIiwidGhpbmciLCJwcm9wZXJ0eSIsImRlcml2YXRpb24iLCJkaWUiLCJhcmdzIiwiX2xlbiIsIl9rZXkiLCJtb2NrR2xvYmFsIiwiZ2V0R2xvYmFsIiwiZ2xvYmFsVGhpcyIsImdsb2JhbCIsInNlbGYiLCJnZXREZXNjcmlwdG9yIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwib2JqZWN0UHJvdG90eXBlIiwiRU1QVFlfQVJSQVkiLCJmcmVlemUiLCJFTVBUWV9PQkpFQ1QiLCJoYXNQcm94eSIsIlByb3h5IiwicGxhaW5PYmplY3RTdHJpbmciLCJhc3NlcnRQcm94aWVzIiwid2FybkFib3V0UHJveHlSZXF1aXJlbWVudCIsIm1zZyIsImdsb2JhbFN0YXRlIiwidmVyaWZ5UHJveGllcyIsImdldE5leHRJZCIsIm1vYnhHdWlkIiwib25jZSIsImZ1bmMiLCJpbnZva2VkIiwibm9vcCIsImlzRnVuY3Rpb24iLCJpc1N0cmluZ2lzaCIsImlzT2JqZWN0IiwiaXNQbGFpbk9iamVjdCIsInByb3RvIiwiZ2V0UHJvdG90eXBlT2YiLCJwcm90b0NvbnN0cnVjdG9yIiwiaXNHZW5lcmF0b3IiLCJhZGRIaWRkZW5Qcm9wIiwicHJvcE5hbWUiLCJlbnVtZXJhYmxlIiwid3JpdGFibGUiLCJjb25maWd1cmFibGUiLCJhZGRIaWRkZW5GaW5hbFByb3AiLCJjcmVhdGVJbnN0YW5jZW9mUHJlZGljYXRlIiwidGhlQ2xhc3MiLCJ4IiwiaXNFUzZNYXAiLCJpc0VTNlNldCIsImhhc0dldE93blByb3BlcnR5U3ltYm9scyIsImdldE93blByb3BlcnR5U3ltYm9scyIsImdldFBsYWluT2JqZWN0S2V5cyIsInN5bWJvbHMiLCJwcm9wZXJ0eUlzRW51bWVyYWJsZSIsIm93bktleXMiLCJSZWZsZWN0IiwiZ2V0T3duUHJvcGVydHlOYW1lcyIsInN0cmluZ2lmeUtleSIsInRvUHJpbWl0aXZlIiwiaGFzUHJvcCIsInByb3AiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzIiwicmVzIiwic3RvcmVkQW5ub3RhdGlvbnNTeW1ib2wiLCJjcmVhdGVEZWNvcmF0b3JBbm5vdGF0aW9uIiwiYW5ub3RhdGlvbiIsImRlY29yYXRvciIsImlzMjAyMjNEZWNvcmF0b3IiLCJkZWNvcmF0ZV8yMDIyM18iLCJzdG9yZUFubm90YXRpb24iLCJpc092ZXJyaWRlIiwiZmllbGROYW1lIiwiYXNzZXJ0Tm90RGVjb3JhdGVkIiwiY3VycmVudEFubm90YXRpb25UeXBlIiwiYW5ub3RhdGlvblR5cGVfIiwicmVxdWVzdGVkQW5ub3RhdGlvblR5cGUiLCJjb2xsZWN0U3RvcmVkQW5ub3RhdGlvbnMiLCJhc3NlcnQyMDIyM0RlY29yYXRvclR5cGUiLCJ0eXBlcyIsImtpbmQiLCIkbW9ieCIsIkF0b20iLCJuYW1lXyIsImlzUGVuZGluZ1Vub2JzZXJ2YXRpb25fIiwiaXNCZWluZ09ic2VydmVkXyIsIm9ic2VydmVyc18iLCJkaWZmVmFsdWVfIiwibGFzdEFjY2Vzc2VkQnlfIiwibG93ZXN0T2JzZXJ2ZXJTdGF0ZV8iLCJJRGVyaXZhdGlvblN0YXRlXyIsIk5PVF9UUkFDS0lOR18iLCJvbkJPTCIsIm9uQlVPTCIsIl9wcm90byIsIm9uQk8iLCJvbkJVTyIsInJlcG9ydE9ic2VydmVkIiwicmVwb3J0T2JzZXJ2ZWQkMSIsInJlcG9ydENoYW5nZWQiLCJzdGFydEJhdGNoIiwicHJvcGFnYXRlQ2hhbmdlZCIsImVuZEJhdGNoIiwiaXNBdG9tIiwiY3JlYXRlQXRvbSIsIm9uQmVjb21lT2JzZXJ2ZWRIYW5kbGVyIiwib25CZWNvbWVVbm9ic2VydmVkSGFuZGxlciIsImF0b20iLCJvbkJlY29tZU9ic2VydmVkIiwib25CZWNvbWVVbm9ic2VydmVkIiwiaWRlbnRpdHlDb21wYXJlciIsInN0cnVjdHVyYWxDb21wYXJlciIsImRlZXBFcXVhbCIsInNoYWxsb3dDb21wYXJlciIsImRlZmF1bHRDb21wYXJlciIsImlzIiwiY29tcGFyZXIiLCJpZGVudGl0eSIsInN0cnVjdHVyYWwiLCJzaGFsbG93IiwiZGVlcEVuaGFuY2VyIiwiaXNPYnNlcnZhYmxlIiwib2JzZXJ2YWJsZSIsImlzQWN0aW9uIiwiaXNGbG93IiwiZmxvdyIsImF1dG9BY3Rpb24iLCJzaGFsbG93RW5oYW5jZXIiLCJpc09ic2VydmFibGVPYmplY3QiLCJpc09ic2VydmFibGVBcnJheSIsImlzT2JzZXJ2YWJsZU1hcCIsImlzT2JzZXJ2YWJsZVNldCIsImRlZXAiLCJyZWZlcmVuY2VFbmhhbmNlciIsIm5ld1ZhbHVlIiwicmVmU3RydWN0RW5oYW5jZXIiLCJvbGRWYWx1ZSIsIk9WRVJSSURFIiwib3ZlcnJpZGUiLCJtYWtlXyIsImV4dGVuZF8iLCJhZG0iLCJpc1BsYWluT2JqZWN0XyIsImFwcGxpZWRBbm5vdGF0aW9uc18iLCJkZXNjcmlwdG9yIiwicHJveHlUcmFwIiwiZGVzYyIsImNyZWF0ZUFjdGlvbkFubm90YXRpb24iLCJvcHRpb25zXyIsIm1ha2VfJDEiLCJleHRlbmRfJDEiLCJkZWNvcmF0ZV8yMDIyM18kMSIsIl90aGlzJG9wdGlvbnNfIiwiYm91bmQiLCJ0YXJnZXRfIiwiYWN0aW9uRGVzY3JpcHRvciIsImNyZWF0ZUFjdGlvbkRlc2NyaXB0b3IiLCJkZWZpbmVQcm9wZXJ0eV8iLCJtdGhkIiwiYWRkSW5pdGlhbGl6ZXIiLCJhbm4iLCJfY3JlYXRlQWN0aW9uIiwiX2FubiRvcHRpb25zXyRuYW1lIiwiX2FubiRvcHRpb25zXyIsIl9hbm4kb3B0aW9uc18kYXV0b0FjdCIsIl9hbm4kb3B0aW9uc18yIiwiY3JlYXRlQWN0aW9uIiwiX3RoaXMkb3B0aW9uc18yIiwiaXNNb2J4QWN0aW9uIiwiYXNzZXJ0QWN0aW9uRGVzY3JpcHRvciIsInNhZmVEZXNjcmlwdG9ycyIsIl9hbm5vdGF0aW9uJG9wdGlvbnNfIiwiX2FkbSRwcm94eV8iLCJwcm94eV8iLCJfYW5ub3RhdGlvbiRvcHRpb25zXyQiLCJfYW5ub3RhdGlvbiRvcHRpb25zXzIiLCJfYW5ub3RhdGlvbiRvcHRpb25zXyQyIiwiX2Fubm90YXRpb24kb3B0aW9uc18zIiwiX2Fubm90YXRpb24kb3B0aW9uc180IiwiX2FkbSRwcm94eV8yIiwiY3JlYXRlRmxvd0Fubm90YXRpb24iLCJtYWtlXyQyIiwiZXh0ZW5kXyQyIiwiZGVjb3JhdGVfMjAyMjNfJDIiLCJmbG93RGVzY3JpcHRvciIsImNyZWF0ZUZsb3dEZXNjcmlwdG9yIiwiX3RoaXMkb3B0aW9uc18zIiwiaXNNb2JYRmxvdyIsImFzc2VydEZsb3dEZXNjcmlwdG9yIiwiY3JlYXRlQ29tcHV0ZWRBbm5vdGF0aW9uIiwibWFrZV8kMyIsImV4dGVuZF8kMyIsImRlY29yYXRlXzIwMjIzXyQzIiwiYXNzZXJ0Q29tcHV0ZWREZXNjcmlwdG9yIiwiZGVmaW5lQ29tcHV0ZWRQcm9wZXJ0eV8iLCJhc09ic2VydmFibGVPYmplY3QiLCJ2YWx1ZXNfIiwiQ29tcHV0ZWRWYWx1ZSIsImdldE9ic2VydmFibGVQcm9wVmFsdWVfIiwiY3JlYXRlT2JzZXJ2YWJsZUFubm90YXRpb24iLCJtYWtlXyQ0IiwiZXh0ZW5kXyQ0IiwiZGVjb3JhdGVfMjAyMjNfJDQiLCJhc3NlcnRPYnNlcnZhYmxlRGVzY3JpcHRvciIsImRlZmluZU9ic2VydmFibGVQcm9wZXJ0eV8iLCJfdGhpcyRvcHRpb25zXyRlbmhhbmMiLCJlbmhhbmNlciIsImluaXRpYWxpemVkT2JqZWN0cyIsIldlYWtTZXQiLCJpbml0aWFsaXplT2JzZXJ2YWJsZSIsIk9ic2VydmFibGVWYWx1ZSIsIl9hbm4kb3B0aW9uc18kZW5oYW5jZSIsInNldE9ic2VydmFibGVQcm9wVmFsdWVfIiwiQVVUTyIsImF1dG9Bbm5vdGF0aW9uIiwiY3JlYXRlQXV0b0Fubm90YXRpb24iLCJtYWtlXyQ1IiwiZXh0ZW5kXyQ1IiwiZGVjb3JhdGVfMjAyMjNfJDUiLCJjb21wdXRlZCIsImZsb3dBbm5vdGF0aW9uIiwiYXV0b0JpbmQiLCJhY3Rpb25Bbm5vdGF0aW9uIiwib2JzZXJ2YWJsZUFubm90YXRpb24iLCJfdGhpcyRvcHRpb25zXzQiLCJfdGhpcyRvcHRpb25zXzUiLCJfdGhpcyRvcHRpb25zXzYiLCJPQlNFUlZBQkxFIiwiT0JTRVJWQUJMRV9SRUYiLCJPQlNFUlZBQkxFX1NIQUxMT1ciLCJPQlNFUlZBQkxFX1NUUlVDVCIsImRlZmF1bHRDcmVhdGVPYnNlcnZhYmxlT3B0aW9ucyIsImRlZmF1bHREZWNvcmF0b3IiLCJwcm94eSIsImFzQ3JlYXRlT2JzZXJ2YWJsZU9wdGlvbnMiLCJvYnNlcnZhYmxlUmVmQW5ub3RhdGlvbiIsIm9ic2VydmFibGVTaGFsbG93QW5ub3RhdGlvbiIsIm9ic2VydmFibGVTdHJ1Y3RBbm5vdGF0aW9uIiwib2JzZXJ2YWJsZURlY29yYXRvckFubm90YXRpb24iLCJnZXRFbmhhbmNlckZyb21PcHRpb25zIiwiZ2V0RW5oYW5jZXJGcm9tQW5ub3RhdGlvbiIsImdldEFubm90YXRpb25Gcm9tT3B0aW9ucyIsIl9vcHRpb25zJGRlZmF1bHREZWNvciIsImNyZWF0ZU9ic2VydmFibGUiLCJhcmcyIiwiYXJnMyIsImJveCIsIm9ic2VydmFibGVGYWN0b3JpZXMiLCJvIiwiZXF1YWxzIiwiaW5pdGlhbFZhbHVlcyIsInVzZVByb3hpZXMiLCJjcmVhdGVMZWdhY3lBcnJheSIsImNyZWF0ZU9ic2VydmFibGVBcnJheSIsIk9ic2VydmFibGVNYXAiLCJPYnNlcnZhYmxlU2V0IiwiZGVjb3JhdG9ycyIsImluaXRPYnNlcnZhYmxlIiwiZXh0ZW5kT2JzZXJ2YWJsZSIsImFzRHluYW1pY09ic2VydmFibGVPYmplY3QiLCJzdHJ1Y3QiLCJDT01QVVRFRCIsIkNPTVBVVEVEX1NUUlVDVCIsImNvbXB1dGVkQW5ub3RhdGlvbiIsImNvbXB1dGVkU3RydWN0QW5ub3RhdGlvbiIsImFyZzEiLCJjdXJyZW50QWN0aW9uSWQiLCJuZXh0QWN0aW9uSWQiLCJpc0Z1bmN0aW9uTmFtZUNvbmZpZ3VyYWJsZSIsIl9nZXREZXNjcmlwdG9yJGNvbmZpZyIsIl9nZXREZXNjcmlwdG9yIiwidG1wTmFtZURlc2NyaXB0b3IiLCJhY3Rpb25OYW1lIiwiZXhlY3V0ZUFjdGlvbiIsImNhblJ1bkFzRGVyaXZhdGlvbiIsInNjb3BlIiwicnVuSW5mbyIsIl9zdGFydEFjdGlvbiIsImVyciIsImVycm9yXyIsIl9lbmRBY3Rpb24iLCJub3RpZnlTcHlfIiwiaXNTcHlFbmFibGVkIiwic3RhcnRUaW1lXyIsIkRhdGUiLCJub3ciLCJmbGF0dGVuZWRBcmdzIiwic3B5UmVwb3J0U3RhcnQiLCJBQ1RJT04iLCJwcmV2RGVyaXZhdGlvbl8iLCJ0cmFja2luZ0Rlcml2YXRpb24iLCJydW5Bc0FjdGlvbiIsInByZXZBbGxvd1N0YXRlQ2hhbmdlc18iLCJhbGxvd1N0YXRlQ2hhbmdlcyIsInVudHJhY2tlZFN0YXJ0IiwiYWxsb3dTdGF0ZUNoYW5nZXNTdGFydCIsInByZXZBbGxvd1N0YXRlUmVhZHNfIiwiYWxsb3dTdGF0ZVJlYWRzU3RhcnQiLCJydW5Bc0FjdGlvbl8iLCJhY3Rpb25JZF8iLCJwYXJlbnRBY3Rpb25JZF8iLCJzdXBwcmVzc1JlYWN0aW9uRXJyb3JzIiwiYWxsb3dTdGF0ZUNoYW5nZXNFbmQiLCJhbGxvd1N0YXRlUmVhZHNFbmQiLCJ1bnRyYWNrZWRFbmQiLCJzcHlSZXBvcnRFbmQiLCJ0aW1lIiwicHJldiIsIkNSRUFURSIsIl9TeW1ib2wkdG9QcmltaXRpdmUiLCJfQXRvbSIsIl9pbmhlcml0c0xvb3NlIiwibm90aWZ5U3B5IiwiX3RoaXMiLCJoYXNVbnJlcG9ydGVkQ2hhbmdlXyIsImludGVyY2VwdG9yc18iLCJjaGFuZ2VMaXN0ZW5lcnNfIiwidmFsdWVfIiwiZGVoYW5jZXIiLCJzcHlSZXBvcnQiLCJfYXNzZXJ0VGhpc0luaXRpYWxpemVkIiwib2JzZXJ2YWJsZUtpbmQiLCJkZWJ1Z09iamVjdE5hbWUiLCJkZWhhbmNlVmFsdWUiLCJwcmVwYXJlTmV3VmFsdWVfIiwiVU5DSEFOR0VEIiwiVVBEQVRFIiwic2V0TmV3VmFsdWVfIiwiY2hlY2tJZlN0YXRlTW9kaWZpY2F0aW9uc0FyZUFsbG93ZWQiLCJoYXNJbnRlcmNlcHRvcnMiLCJjaGFuZ2UiLCJpbnRlcmNlcHRDaGFuZ2UiLCJoYXNMaXN0ZW5lcnMiLCJub3RpZnlMaXN0ZW5lcnMiLCJpbnRlcmNlcHRfIiwicmVnaXN0ZXJJbnRlcmNlcHRvciIsIm9ic2VydmVfIiwiZmlyZUltbWVkaWF0ZWx5IiwicmVnaXN0ZXJMaXN0ZW5lciIsInJhdyIsInRvSlNPTiIsInZhbHVlT2YiLCJpc09ic2VydmFibGVWYWx1ZSIsIl9TeW1ib2wkdG9QcmltaXRpdmUkMSIsImRlcGVuZGVuY2llc1N0YXRlXyIsIm9ic2VydmluZ18iLCJuZXdPYnNlcnZpbmdfIiwicnVuSWRfIiwiVVBfVE9fREFURV8iLCJ1bmJvdW5kRGVwc0NvdW50XyIsIkNhdWdodEV4Y2VwdGlvbiIsInRyaWdnZXJlZEJ5XyIsImlzQ29tcHV0aW5nXyIsImlzUnVubmluZ1NldHRlcl8iLCJzZXR0ZXJfIiwiaXNUcmFjaW5nXyIsIlRyYWNlTW9kZSIsIk5PTkUiLCJzY29wZV8iLCJlcXVhbHNfIiwicmVxdWlyZXNSZWFjdGlvbl8iLCJrZWVwQWxpdmVfIiwiY29tcGFyZVN0cnVjdHVyYWwiLCJyZXF1aXJlc1JlYWN0aW9uIiwia2VlcEFsaXZlIiwib25CZWNvbWVTdGFsZV8iLCJwcm9wYWdhdGVNYXliZUNoYW5nZWQiLCJpbkJhdGNoIiwic2hvdWxkQ29tcHV0ZSIsIndhcm5BYm91dFVudHJhY2tlZFJlYWRfIiwiY29tcHV0ZVZhbHVlXyIsInByZXZUcmFja2luZ0NvbnRleHQiLCJ0cmFja2luZ0NvbnRleHQiLCJ0cmFja0FuZENvbXB1dGUiLCJwcm9wYWdhdGVDaGFuZ2VDb25maXJtZWQiLCJpc0NhdWdodEV4Y2VwdGlvbiIsImNhdXNlIiwid2FzU3VzcGVuZGVkIiwiY2hhbmdlZCIsInRyYWNrIiwidHJhY2tEZXJpdmVkRnVuY3Rpb24iLCJkaXNhYmxlRXJyb3JCb3VuZGFyaWVzIiwic3VzcGVuZF8iLCJjbGVhck9ic2VydmluZyIsImxvZyIsImZpcnN0VGltZSIsInByZXZWYWx1ZSIsImF1dG9ydW4iLCJwcmV2VSIsImNvbXB1dGVkUmVxdWlyZXNSZWFjdGlvbiIsImlzQ29tcHV0ZWRWYWx1ZSIsIlNUQUxFXyIsIlBPU1NJQkxZX1NUQUxFXyIsInByZXZBbGxvd1N0YXRlUmVhZHMiLCJwcmV2VW50cmFja2VkIiwib2JzIiwibCIsImNoYW5nZURlcGVuZGVuY2llc1N0YXRlVG8wIiwiaXNDb21wdXRpbmdEZXJpdmF0aW9uIiwiaGFzT2JzZXJ2ZXJzIiwiZW5mb3JjZUFjdGlvbnMiLCJjaGVja0lmU3RhdGVSZWFkc0FyZUFsbG93ZWQiLCJhbGxvd1N0YXRlUmVhZHMiLCJvYnNlcnZhYmxlUmVxdWlyZXNSZWFjdGlvbiIsInJ1bklkIiwicHJldlRyYWNraW5nIiwiYmluZERlcGVuZGVuY2llcyIsIndhcm5BYm91dERlcml2YXRpb25XaXRob3V0RGVwZW5kZW5jaWVzIiwicmVxdWlyZXNPYnNlcnZhYmxlXyIsInJlYWN0aW9uUmVxdWlyZXNPYnNlcnZhYmxlIiwicHJldk9ic2VydmluZyIsIm9ic2VydmluZyIsImxvd2VzdE5ld09ic2VydmluZ0Rlcml2YXRpb25TdGF0ZSIsImkwIiwiZGVwIiwiX2RlcCIsInJlbW92ZU9ic2VydmVyIiwiX2RlcDIiLCJhZGRPYnNlcnZlciIsInVudHJhY2tlZCIsInBlcnNpc3RlbnRLZXlzIiwiTW9iWEdsb2JhbHMiLCJ2ZXJzaW9uIiwicGVuZGluZ1Vub2JzZXJ2YXRpb25zIiwicGVuZGluZ1JlYWN0aW9ucyIsImlzUnVubmluZ1JlYWN0aW9ucyIsInNweUxpc3RlbmVycyIsImdsb2JhbFJlYWN0aW9uRXJyb3JIYW5kbGVycyIsImNhbk1lcmdlR2xvYmFsU3RhdGUiLCJpc29sYXRlQ2FsbGVkIiwiX19tb2J4SW5zdGFuY2VDb3VudCIsIl9fbW9ieEdsb2JhbHMiLCJpc29sYXRlR2xvYmFsU3RhdGUiLCJnZXRHbG9iYWxTdGF0ZSIsInJlc2V0R2xvYmFsU3RhdGUiLCJkZWZhdWx0R2xvYmFscyIsImdldE9ic2VydmVycyIsIm5vZGUiLCJxdWV1ZUZvclVub2JzZXJ2YXRpb24iLCJydW5SZWFjdGlvbnMiLCJsaXN0IiwibG9nVHJhY2VJbmZvIiwiQlJFQUsiLCJsaW5lcyIsInByaW50RGVwVHJlZSIsImdldERlcGVuZGVuY3lUcmVlIiwiRnVuY3Rpb24iLCJ0cmVlIiwiZGVwdGgiLCJyZXBlYXQiLCJkZXBlbmRlbmNpZXMiLCJjaGlsZCIsIlJlYWN0aW9uIiwib25JbnZhbGlkYXRlXyIsImVycm9ySGFuZGxlcl8iLCJpc0Rpc3Bvc2VkXyIsImlzU2NoZWR1bGVkXyIsImlzVHJhY2tQZW5kaW5nXyIsImlzUnVubmluZ18iLCJzY2hlZHVsZV8iLCJpc1NjaGVkdWxlZCIsInJ1blJlYWN0aW9uXyIsInJlcG9ydEV4Y2VwdGlvbkluRGVyaXZhdGlvbl8iLCJub3RpZnkiLCJzdGFydFRpbWUiLCJwcmV2UmVhY3Rpb24iLCJnZXREaXNwb3Nlcl8iLCJhYm9ydFNpZ25hbCIsIl90aGlzMiIsInRyYWNlIiwidHJhY2UkMSIsImVudGVyQnJlYWtQb2ludCIsIm9uUmVhY3Rpb25FcnJvciIsIk1BWF9SRUFDVElPTl9JVEVSQVRJT05TIiwicmVhY3Rpb25TY2hlZHVsZXIiLCJydW5SZWFjdGlvbnNIZWxwZXIiLCJhbGxSZWFjdGlvbnMiLCJpdGVyYXRpb25zIiwicmVtYWluaW5nUmVhY3Rpb25zIiwiaXNSZWFjdGlvbiIsInNldFJlYWN0aW9uU2NoZWR1bGVyIiwiYmFzZVNjaGVkdWxlciIsImxpc3RlbmVycyIsIkVORF9FVkVOVCIsInNweSIsIkFDVElPTl9CT1VORCIsIkFVVE9BQ1RJT04iLCJBVVRPQUNUSU9OX0JPVU5EIiwiREVGQVVMVF9BQ1RJT05fTkFNRSIsImFjdGlvbkJvdW5kQW5ub3RhdGlvbiIsImF1dG9BY3Rpb25Bbm5vdGF0aW9uIiwiYXV0b0FjdGlvbkJvdW5kQW5ub3RhdGlvbiIsImNyZWF0ZUFjdGlvbkZhY3RvcnkiLCJydW5JbkFjdGlvbiIsIl9vcHRzJG5hbWUiLCJfb3B0cyIsInJ1blN5bmMiLCJzY2hlZHVsZXIiLCJkZWxheSIsInJlYWN0aW9uIiwicmVhY3Rpb25SdW5uZXIiLCJvbkVycm9yIiwicmVxdWlyZXNPYnNlcnZhYmxlIiwiY3JlYXRlU2NoZWR1bGVyRnJvbU9wdGlvbnMiLCJfb3B0czIiLCJfb3B0czIkc2lnbmFsIiwiX29wdHMzIiwicnVuIiwiZXhwcmVzc2lvbiIsImVmZmVjdCIsIl9vcHRzJG5hbWUyIiwiZWZmZWN0QWN0aW9uIiwid3JhcEVycm9ySGFuZGxlciIsIm5leHRWYWx1ZSIsIl9vcHRzNCIsIl9vcHRzNCRzaWduYWwiLCJfb3B0czUiLCJlcnJvckhhbmRsZXIiLCJiYXNlRm4iLCJPTl9CRUNPTUVfT0JTRVJWRUQiLCJPTl9CRUNPTUVfVU5PQlNFUlZFRCIsImludGVyY2VwdEhvb2siLCJob29rIiwiZ2V0QXRvbSIsImxpc3RlbmVyc0tleSIsImhvb2tMaXN0ZW5lcnMiLCJORVZFUiIsIkFMV0FZUyIsIk9CU0VSVkVEIiwiY29uZmlndXJlIiwiZWEiLCJwcm9wZXJ0aWVzIiwiYW5ub3RhdGlvbnMiLCJkZXNjcmlwdG9ycyIsIm5vZGVUb0RlcGVuZGVuY3lUcmVlIiwidW5pcXVlIiwiZ2V0T2JzZXJ2ZXJUcmVlIiwibm9kZVRvT2JzZXJ2ZXJUcmVlIiwib2JzZXJ2ZXJzIiwiZ2VuZXJhdG9ySWQiLCJGbG93Q2FuY2VsbGF0aW9uRXJyb3IiLCJjcmVhdGUiLCJpc0Zsb3dDYW5jZWxsYXRpb25FcnJvciIsImZsb3dCb3VuZEFubm90YXRpb24iLCJnZW5lcmF0b3IiLCJnZW4iLCJyZWplY3RvciIsInBlbmRpbmdQcm9taXNlIiwic3RlcElkIiwib25GdWxmaWxsZWQiLCJyZXQiLCJuZXh0Iiwib25SZWplY3RlZCIsImNhbmNlbFByb21pc2UiLCJfcmVzIiwieWllbGRlZFByb21pc2UiLCJmbG93UmVzdWx0IiwiaW50ZXJjZXB0UmVhZHMiLCJwcm9wT3JIYW5kbGVyIiwiZ2V0QWRtaW5pc3RyYXRpb24iLCJpbnRlcmNlcHQiLCJpbnRlcmNlcHRQcm9wZXJ0eSIsImludGVyY2VwdEludGVyY2VwdGFibGUiLCJfaXNDb21wdXRlZCIsImlzQ29tcHV0ZWQiLCJpc0NvbXB1dGVkUHJvcCIsIl9pc09ic2VydmFibGUiLCJpc09ic2VydmFibGVQcm9wIiwia2V5c18iLCJfdmFsdWVzIiwic2V0XyIsInBhcnNlSW50IiwicmVtb3ZlIiwiZGVsZXRlXyIsImhhc18iLCJnZXRfIiwiYXBpRGVmaW5lUHJvcGVydHkiLCJhcGlPd25LZXlzIiwib3duS2V5c18iLCJvYnNlcnZlIiwicHJvcE9yQ2IiLCJjYk9yRmlyZSIsIm9ic2VydmVPYnNlcnZhYmxlUHJvcGVydHkiLCJvYnNlcnZlT2JzZXJ2YWJsZSIsImNhY2hlIiwidG9KU0hlbHBlciIsIl9fYWxyZWFkeVNlZW4iLCJfcmVzMiIsIl9yZXMzIiwidG9KUyIsImdldEF0b21Gcm9tQXJncyIsIkxPRyIsInRyYW5zYWN0aW9uIiwidGhpc0FyZyIsIndoZW5Qcm9taXNlIiwiX3doZW4iLCJ0aW1lb3V0SGFuZGxlIiwidGltZW91dCIsImRpc3Bvc2VyIiwiY2xlYXJUaW1lb3V0IiwiX29wdHMkc2lnbmFsIiwiX29wdHMkc2lnbmFsMiIsIl9vcHRzJHNpZ25hbDMiLCJnZXRBZG0iLCJvYmplY3RQcm94eVRyYXBzIiwiX2dldEFkbSRzZXRfIiwiZGVsZXRlUHJvcGVydHkiLCJfZ2V0QWRtJGRlbGV0ZV8iLCJfZ2V0QWRtJGRlZmluZVByb3BlcnQiLCJwcmV2ZW50RXh0ZW5zaW9ucyIsIl90YXJnZXQkJG1vYngkcHJveHlfIiwiX3RhcmdldCQkbW9ieCIsImludGVyY2VwdGFibGUiLCJpbnRlcmNlcHRvcnMiLCJsaXN0ZW5hYmxlIiwibWFrZU9ic2VydmFibGUiLCJfYW5ub3RhdGlvbnMiLCJrZXlzU3ltYm9sIiwibWFrZUF1dG9PYnNlcnZhYmxlIiwib3ZlcnJpZGVzIiwiU1BMSUNFIiwiTUFYX1NQTElDRV9TSVpFIiwiYXJyYXlUcmFwcyIsImdldEFycmF5TGVuZ3RoXyIsImlzTmFOIiwiYXJyYXlFeHRlbnNpb25zIiwic2V0QXJyYXlMZW5ndGhfIiwiT2JzZXJ2YWJsZUFycmF5QWRtaW5pc3RyYXRpb24iLCJvd25lZF8iLCJsZWdhY3lNb2RlXyIsImF0b21fIiwiZW5oYW5jZXJfIiwibGFzdEtub3duTGVuZ3RoXyIsIm5ld1YiLCJvbGRWIiwiZGVoYW5jZVZhbHVlXyIsImRlaGFuY2VWYWx1ZXNfIiwiYWRkZWQiLCJhZGRlZENvdW50IiwicmVtb3ZlZCIsInJlbW92ZWRDb3VudCIsIm5ld0xlbmd0aCIsImN1cnJlbnRMZW5ndGgiLCJuZXdJdGVtcyIsInNwbGljZVdpdGhBcnJheV8iLCJ1cGRhdGVBcnJheUxlbmd0aF8iLCJvbGRMZW5ndGgiLCJyZXNlcnZlQXJyYXlCdWZmZXIiLCJkZWxldGVDb3VudCIsImxlbmd0aERlbHRhIiwic3BsaWNlSXRlbXNJbnRvVmFsdWVzXyIsIm5vdGlmeUFycmF5U3BsaWNlXyIsIl90aGlzJHZhbHVlc18iLCJvbGRJdGVtcyIsIl9pIiwibm90aWZ5QXJyYXlDaGlsZFVwZGF0ZV8iLCJvd25lZCIsInNwbGljZVdpdGhBcnJheSIsIl9sZW4yIiwiaXRlbXMiLCJfa2V5MiIsInVuc2hpZnQiLCJfbGVuMyIsIl9rZXkzIiwiY29weSIsImFkZEFycmF5RXh0ZW5zaW9uIiwic2ltcGxlRnVuYyIsIm1hcExpa2VGdW5jIiwicmVkdWNlTGlrZUZ1bmMiLCJmdW5jTmFtZSIsImZ1bmNGYWN0b3J5IiwiZGVoYW5jZWRWYWx1ZXMiLCJhY2N1bXVsYXRvciIsImN1cnJlbnRWYWx1ZSIsIl90aGlzMyIsImlzT2JzZXJ2YWJsZUFycmF5QWRtaW5pc3RyYXRpb24iLCJPYnNlcnZhYmxlTWFwTWFya2VyIiwiQUREIiwiREVMRVRFIiwiX1N5bWJvbCRpdGVyYXRvciIsIml0ZXJhdG9yIiwiX1N5bWJvbCR0b1N0cmluZ1RhZyIsInRvU3RyaW5nVGFnIiwiaW5pdGlhbERhdGEiLCJkYXRhXyIsImhhc01hcF8iLCJrZXlzQXRvbV8iLCJtZXJnZSIsIm5ld0VudHJ5IiwiaGFzS2V5IiwidXBkYXRlVmFsdWVfIiwiYWRkVmFsdWVfIiwiX2RlbGV0ZSIsIl9jaGFuZ2UiLCJfdGhpczMkaGFzTWFwXyRnZXQiLCJfdGhpczQiLCJfdGhpczQkaGFzTWFwXyRnZXQiLCJtYWtlSXRlcmFibGUiLCJfa2V5cyRuZXh0IiwiX2tleXMkbmV4dDIiLCJfaXRlcmF0b3IiLCJfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlckxvb3NlIiwiX3N0ZXAiLCJfc3RlcCR2YWx1ZSIsIl90aGlzNSIsIl9pdGVyYXRvcjIiLCJfdGhpczYiLCJfc3RlcDIiLCJyZXBsYWNlbWVudE1hcCIsImNvbnZlcnRUb01hcCIsIm9yZGVyZWREYXRhIiwia2V5c1JlcG9ydENoYW5nZWRDYWxsZWQiLCJfaXRlcmF0b3IzIiwiX3RoaXM3IiwiX3N0ZXAzIiwiZGVsZXRlZCIsIl9pdGVyYXRvcjQiLCJfc3RlcDQiLCJfc3RlcDQkdmFsdWUiLCJfdmFsdWUiLCJrZXlFeGlzdGVkIiwiX3ZhbHVlMiIsIml0ZXIxIiwiaXRlcjIiLCJuZXh0MSIsIm5leHQyIiwiX2NyZWF0ZUNsYXNzIiwiT2JzZXJ2YWJsZVNldE1hcmtlciIsIl9TeW1ib2wkaXRlcmF0b3IkMSIsIl9TeW1ib2wkdG9TdHJpbmdUYWckMSIsImNhbGxiYWNrRm4iLCJfY2hhbmdlMiIsIm9ic2VydmFibGVWYWx1ZXMiLCJkZXNjcmlwdG9yQ2FjaGUiLCJSRU1PVkUiLCJPYnNlcnZhYmxlT2JqZWN0QWRtaW5pc3RyYXRpb24iLCJkZWZhdWx0QW5ub3RhdGlvbl8iLCJwZW5kaW5nS2V5c18iLCJpc0Fubm90YXRpb24iLCJhc3NlcnRBbm5vdGFibGUiLCJfdGhpcyR0YXJnZXRfJHN0b3JlZEEiLCJvdXRjb21lIiwicmVjb3JkQW5ub3RhdGlvbkFwcGxpZWQiLCJkZWxldGVPdXRjb21lIiwibm90aWZ5UHJvcGVydHlBZGRpdGlvbl8iLCJjYWNoZWREZXNjcmlwdG9yIiwiZ2V0Q2FjaGVkT2JzZXJ2YWJsZVByb3BEZXNjcmlwdG9yIiwiX3RoaXMkcGVuZGluZ0tleXNfIiwiX3RoaXMkcGVuZGluZ0tleXNfJGdlIiwiX3RoaXMkcGVuZGluZ0tleXNfMiIsIl90aGlzJHBlbmRpbmdLZXlzXzIkZyIsImdldERlYnVnTmFtZSIsImlzRXh0ZW5zaWJsZSIsIl9vcHRpb25zJG5hbWUiLCJpc09ic2VydmFibGVPYmplY3RBZG1pbmlzdHJhdGlvbiIsIl9hZG0kdGFyZ2V0XyRzdG9yZWRBbiIsIkVOVFJZXzAiLCJjcmVhdGVBcnJheUVudHJ5RGVzY3JpcHRvciIsInNhZmFyaVByb3RvdHlwZVNldHRlckluaGVyaXRhbmNlQnVnIiwiT0JTRVJWQUJMRV9BUlJBWV9CVUZGRVJfU0laRSIsIlN0dWJBcnJheSIsImluaGVyaXQiLCJjdG9yIiwic2V0UHJvdG90eXBlT2YiLCJfX3Byb3RvX18iLCJMZWdhY3lPYnNlcnZhYmxlQXJyYXkiLCJfU3R1YkFycmF5IiwiYXJyYXlzIiwiY3JlYXRlQXJyYXlCdWZmZXJJdGVtIiwiX29ic2VydmFibGUiLCJuYW1lZCIsImVxIiwiYVN0YWNrIiwiYlN0YWNrIiwiYXJlQXJyYXlzIiwiYUN0b3IiLCJiQ3RvciIsImdldFNlbGYiLCJnIiwiX19NT0JYX0RFVlRPT0xTX0dMT0JBTF9IT09LX18iLCJpbmplY3RNb2J4IiwiZXh0cmFzIiwid3JhcCIsImtpbmRPZiIsInN0ciIsImtpbmRPZlRlc3QiLCJ0eXBlT2ZUZXN0IiwiaXNVbmRlZmluZWQiLCJpc0J1ZmZlciIsImlzQXJyYXlCdWZmZXIiLCJpc0FycmF5QnVmZmVyVmlldyIsIkFycmF5QnVmZmVyIiwiaXNWaWV3IiwiYnVmZmVyIiwiaXNTdHJpbmciLCJpc051bWJlciIsImlzQm9vbGVhbiIsImlzRGF0ZSIsImlzRmlsZSIsImlzQmxvYiIsImlzRmlsZUxpc3QiLCJpc1N0cmVhbSIsInBpcGUiLCJpc0Zvcm1EYXRhIiwiaXNVUkxTZWFyY2hQYXJhbXMiLCJ0cmltIiwiYWxsT3duS2V5cyIsImxlbiIsImZpbmRLZXkiLCJfZ2xvYmFsIiwiaXNDb250ZXh0RGVmaW5lZCIsImNhc2VsZXNzIiwiYXNzaWduVmFsdWUiLCJ0YXJnZXRLZXkiLCJleHRlbmQiLCJzdHJpcEJPTSIsImNvbnRlbnQiLCJjaGFyQ29kZUF0IiwiaW5oZXJpdHMiLCJzdXBlckNvbnN0cnVjdG9yIiwidG9GbGF0T2JqZWN0Iiwic291cmNlT2JqIiwiZGVzdE9iaiIsInByb3BGaWx0ZXIiLCJtZXJnZWQiLCJzZWFyY2hTdHJpbmciLCJwb3NpdGlvbiIsImxhc3RJbmRleCIsInRvQXJyYXkiLCJhcnIiLCJpc1R5cGVkQXJyYXkiLCJUeXBlZEFycmF5IiwiVWludDhBcnJheSIsImZvckVhY2hFbnRyeSIsInBhaXIiLCJtYXRjaEFsbCIsInJlZ0V4cCIsImV4ZWMiLCJpc0hUTUxGb3JtIiwidG9DYW1lbENhc2UiLCJyZXBsYWNlciIsInAxIiwicDIiLCJpc1JlZ0V4cCIsInJlZHVjZURlc2NyaXB0b3JzIiwicmVkdWNlciIsInJlZHVjZWREZXNjcmlwdG9ycyIsImRlZmluZVByb3BlcnRpZXMiLCJmcmVlemVNZXRob2RzIiwidG9PYmplY3RTZXQiLCJhcnJheU9yU3RyaW5nIiwiZGVsaW1pdGVyIiwiZGVmaW5lIiwidG9GaW5pdGVOdW1iZXIiLCJkZWZhdWx0VmFsdWUiLCJOdW1iZXIiLCJpc0Zpbml0ZSIsIkFMUEhBIiwiRElHSVQiLCJBTFBIQUJFVCIsIkFMUEhBX0RJR0lUIiwiZ2VuZXJhdGVTdHJpbmciLCJhbHBoYWJldCIsImlzU3BlY0NvbXBsaWFudEZvcm0iLCJ0b0pTT05PYmplY3QiLCJ2aXNpdCIsInJlZHVjZWRWYWx1ZSIsImlzQXN5bmNGbiIsImlzVGhlbmFibGUiLCJoYXNPd25Qcm9wIiwidXRpbHMiLCJBeGlvc0Vycm9yIiwiY29kZSIsImNvbmZpZyIsImNhcHR1cmVTdGFja1RyYWNlIiwiZGVzY3JpcHRpb24iLCJudW1iZXIiLCJmaWxlTmFtZSIsImxpbmVOdW1iZXIiLCJjb2x1bW5OdW1iZXIiLCJjdXN0b21Qcm9wcyIsImF4aW9zRXJyb3IiLCJQbGF0Zm9ybUZvcm1EYXRhIiwiaXNWaXNpdGFibGUiLCJyZW1vdmVCcmFja2V0cyIsInJlbmRlcktleSIsImRvdHMiLCJlYWNoIiwidG9rZW4iLCJpc0ZsYXRBcnJheSIsInByZWRpY2F0ZXMiLCJ0b0Zvcm1EYXRhIiwiVHlwZUVycm9yIiwibWV0YVRva2VucyIsImluZGV4ZXMiLCJkZWZpbmVkIiwib3B0aW9uIiwidmlzaXRvciIsImRlZmF1bHRWaXNpdG9yIiwiX0Jsb2IiLCJCbG9iIiwidXNlQmxvYiIsImNvbnZlcnRWYWx1ZSIsInRvSVNPU3RyaW5nIiwiQnVmZmVyIiwiZXhwb3NlZEhlbHBlcnMiLCJidWlsZCIsImVuY29kZSIsImNoYXJNYXAiLCJlbmNvZGVVUklDb21wb25lbnQiLCJBeGlvc1VSTFNlYXJjaFBhcmFtcyIsIl9wYWlycyIsImVuY29kZXIiLCJfZW5jb2RlIiwiYnVpbGRVUkwiLCJzZXJpYWxpemVGbiIsInNlcmlhbGl6ZSIsInNlcmlhbGl6ZWRQYXJhbXMiLCJoYXNobWFya0luZGV4IiwiSW50ZXJjZXB0b3JNYW5hZ2VyIiwiaGFuZGxlcnMiLCJ1c2UiLCJmdWxmaWxsZWQiLCJyZWplY3RlZCIsInN5bmNocm9ub3VzIiwicnVuV2hlbiIsImVqZWN0IiwiZm9yRWFjaEhhbmRsZXIiLCJoIiwic2lsZW50SlNPTlBhcnNpbmciLCJmb3JjZWRKU09OUGFyc2luZyIsImNsYXJpZnlUaW1lb3V0RXJyb3IiLCJjbGFzc2VzIiwicHJvdG9jb2xzIiwiaGFzQnJvd3NlckVudiIsImhhc1N0YW5kYXJkQnJvd3NlckVudiIsInByb2R1Y3QiLCJoYXNTdGFuZGFyZEJyb3dzZXJXZWJXb3JrZXJFbnYiLCJXb3JrZXJHbG9iYWxTY29wZSIsImltcG9ydFNjcmlwdHMiLCJwbGF0Zm9ybSIsInRvVVJMRW5jb2RlZEZvcm0iLCJoZWxwZXJzIiwiaXNOb2RlIiwicGFyc2VQcm9wUGF0aCIsImFycmF5VG9PYmplY3QiLCJmb3JtRGF0YVRvSlNPTiIsImJ1aWxkUGF0aCIsImlzTnVtZXJpY0tleSIsImlzTGFzdCIsInRyYW5zaXRpb25hbERlZmF1bHRzIiwic3RyaW5naWZ5U2FmZWx5IiwicmF3VmFsdWUiLCJwYXJzZXIiLCJkZWZhdWx0cyIsInRyYW5zaXRpb25hbCIsImFkYXB0ZXIiLCJ0cmFuc2Zvcm1SZXF1ZXN0IiwiZ2V0Q29udGVudFR5cGUiLCJoYXNKU09OQ29udGVudFR5cGUiLCJpc09iamVjdFBheWxvYWQiLCJzZXRDb250ZW50VHlwZSIsImZvcm1TZXJpYWxpemVyIiwiX0Zvcm1EYXRhIiwidHJhbnNmb3JtUmVzcG9uc2UiLCJKU09OUmVxdWVzdGVkIiwicmVzcG9uc2VUeXBlIiwic3RyaWN0SlNPTlBhcnNpbmciLCJFUlJfQkFEX1JFU1BPTlNFIiwieHNyZkNvb2tpZU5hbWUiLCJ4c3JmSGVhZGVyTmFtZSIsIm1heENvbnRlbnRMZW5ndGgiLCJtYXhCb2R5TGVuZ3RoIiwidmFsaWRhdGVTdGF0dXMiLCJjb21tb24iLCJpZ25vcmVEdXBsaWNhdGVPZiIsInJhd0hlYWRlcnMiLCJwYXJzZWQiLCJsaW5lIiwic3Vic3RyaW5nIiwicGFyc2VIZWFkZXJzIiwiJGludGVybmFscyIsIm5vcm1hbGl6ZUhlYWRlciIsImhlYWRlciIsIm5vcm1hbGl6ZVZhbHVlIiwicGFyc2VUb2tlbnMiLCJ0b2tlbnMiLCJ0b2tlbnNSRSIsImlzVmFsaWRIZWFkZXJOYW1lIiwibWF0Y2hIZWFkZXJWYWx1ZSIsImlzSGVhZGVyTmFtZUZpbHRlciIsImZvcm1hdEhlYWRlciIsInciLCJidWlsZEFjY2Vzc29ycyIsImFjY2Vzc29yTmFtZSIsIm1ldGhvZE5hbWUiLCJBeGlvc0hlYWRlcnMiLCJ2YWx1ZU9yUmV3cml0ZSIsInJld3JpdGUiLCJzZXRIZWFkZXIiLCJfaGVhZGVyIiwiX3Jld3JpdGUiLCJsSGVhZGVyIiwic2V0SGVhZGVycyIsImRlbGV0ZUhlYWRlciIsIm5vcm1hbGl6ZSIsImZvcm1hdCIsIm5vcm1hbGl6ZWQiLCJ0YXJnZXRzIiwiYXNTdHJpbmdzIiwiYWNjZXNzb3IiLCJpbnRlcm5hbHMiLCJhY2Nlc3NvcnMiLCJkZWZpbmVBY2Nlc3NvciIsIm1hcHBlZCIsImhlYWRlclZhbHVlIiwidHJhbnNmb3JtRGF0YSIsImZucyIsInRyYW5zZm9ybSIsImlzQ2FuY2VsIiwiX19DQU5DRUxfXyIsIkNhbmNlbGVkRXJyb3IiLCJFUlJfQ0FOQ0VMRUQiLCJzZXR0bGUiLCJFUlJfQkFEX1JFUVVFU1QiLCJmbG9vciIsIndyaXRlIiwiZXhwaXJlcyIsImRvbWFpbiIsInNlY3VyZSIsImNvb2tpZSIsInRvR01UU3RyaW5nIiwicmVhZCIsImlzQWJzb2x1dGVVUkwiLCJjb21iaW5lVVJMcyIsImJhc2VVUkwiLCJyZWxhdGl2ZVVSTCIsImJ1aWxkRnVsbFBhdGgiLCJyZXF1ZXN0ZWRVUkwiLCJzdGFuZGFyZEJyb3dzZXJFbnYiLCJtc2llIiwidXNlckFnZW50IiwidXJsUGFyc2luZ05vZGUiLCJvcmlnaW5VUkwiLCJyZXNvbHZlVVJMIiwic2V0QXR0cmlidXRlIiwiaG9zdCIsImhvc3RuYW1lIiwicG9ydCIsImlzVVJMU2FtZU9yaWdpbiIsInJlcXVlc3RVUkwiLCJub25TdGFuZGFyZEJyb3dzZXJFbnYiLCJwYXJzZVByb3RvY29sIiwic3BlZWRvbWV0ZXIiLCJzYW1wbGVzQ291bnQiLCJieXRlcyIsInRpbWVzdGFtcHMiLCJoZWFkIiwidGFpbCIsImZpcnN0U2FtcGxlVFMiLCJjaHVua0xlbmd0aCIsInN0YXJ0ZWRBdCIsImJ5dGVzQ291bnQiLCJwYXNzZWQiLCJyb3VuZCIsImNvb2tpZXMiLCJwcm9ncmVzc0V2ZW50UmVkdWNlciIsImlzRG93bmxvYWRTdHJlYW0iLCJieXRlc05vdGlmaWVkIiwiX3NwZWVkb21ldGVyIiwibG9hZGVkIiwidG90YWwiLCJsZW5ndGhDb21wdXRhYmxlIiwicHJvZ3Jlc3NCeXRlcyIsInJhdGUiLCJpblJhbmdlIiwicHJvZ3Jlc3MiLCJlc3RpbWF0ZWQiLCJpc1hIUkFkYXB0ZXJTdXBwb3J0ZWQiLCJYTUxIdHRwUmVxdWVzdCIsImRpc3BhdGNoWGhyUmVxdWVzdCIsInJlcXVlc3REYXRhIiwicmVxdWVzdEhlYWRlcnMiLCJ3aXRoWFNSRlRva2VuIiwib25DYW5jZWxlZCIsImNhbmNlbFRva2VuIiwidW5zdWJzY3JpYmUiLCJhdXRoIiwidXNlcm5hbWUiLCJwYXNzd29yZCIsInVuZXNjYXBlIiwiYnRvYSIsImZ1bGxQYXRoIiwib3BlbiIsInBhcmFtc1NlcmlhbGl6ZXIiLCJvbmxvYWRlbmQiLCJyZXNwb25zZUhlYWRlcnMiLCJnZXRBbGxSZXNwb25zZUhlYWRlcnMiLCJyZXNwb25zZURhdGEiLCJyZXNwb25zZVRleHQiLCJfcmVzb2x2ZSIsIl9yZWplY3QiLCJvbnJlYWR5c3RhdGVjaGFuZ2UiLCJoYW5kbGVMb2FkIiwicmVhZHlTdGF0ZSIsInJlc3BvbnNlVVJMIiwib25hYm9ydCIsImhhbmRsZUFib3J0IiwiRUNPTk5BQk9SVEVEIiwib25lcnJvciIsImhhbmRsZUVycm9yIiwiRVJSX05FVFdPUksiLCJvbnRpbWVvdXQiLCJoYW5kbGVUaW1lb3V0IiwidGltZW91dEVycm9yTWVzc2FnZSIsIkVUSU1FRE9VVCIsInhzcmZWYWx1ZSIsInNldFJlcXVlc3RIZWFkZXIiLCJ3aXRoQ3JlZGVudGlhbHMiLCJvbkRvd25sb2FkUHJvZ3Jlc3MiLCJvblVwbG9hZFByb2dyZXNzIiwidXBsb2FkIiwic2VuZCIsImh0dHBBZGFwdGVyIiwieGhyQWRhcHRlciIsImtub3duQWRhcHRlcnMiLCJodHRwIiwieGhyIiwicmVuZGVyUmVhc29uIiwiaXNSZXNvbHZlZEhhbmRsZSIsImdldEFkYXB0ZXIiLCJhZGFwdGVycyIsIm5hbWVPckFkYXB0ZXIiLCJyZWplY3RlZFJlYXNvbnMiLCJyZWFzb25zIiwidGhyb3dJZkNhbmNlbGxhdGlvblJlcXVlc3RlZCIsInRocm93SWZSZXF1ZXN0ZWQiLCJkaXNwYXRjaFJlcXVlc3QiLCJvbkFkYXB0ZXJSZXNvbHV0aW9uIiwib25BZGFwdGVyUmVqZWN0aW9uIiwiaGVhZGVyc1RvT2JqZWN0IiwibWVyZ2VDb25maWciLCJjb25maWcxIiwiY29uZmlnMiIsImdldE1lcmdlZFZhbHVlIiwibWVyZ2VEZWVwUHJvcGVydGllcyIsInZhbHVlRnJvbUNvbmZpZzIiLCJkZWZhdWx0VG9Db25maWcyIiwibWVyZ2VEaXJlY3RLZXlzIiwibWVyZ2VNYXAiLCJ0aW1lb3V0TWVzc2FnZSIsImRlY29tcHJlc3MiLCJiZWZvcmVSZWRpcmVjdCIsInRyYW5zcG9ydCIsImh0dHBBZ2VudCIsImh0dHBzQWdlbnQiLCJzb2NrZXRQYXRoIiwicmVzcG9uc2VFbmNvZGluZyIsImNvbXB1dGVDb25maWdWYWx1ZSIsImNvbmZpZ1ZhbHVlIiwiVkVSU0lPTiIsInZhbGlkYXRvcnMiLCJ2YWxpZGF0b3IiLCJkZXByZWNhdGVkV2FybmluZ3MiLCJmb3JtYXRNZXNzYWdlIiwib3B0IiwiRVJSX0RFUFJFQ0FURUQiLCJhc3NlcnRPcHRpb25zIiwic2NoZW1hIiwiYWxsb3dVbmtub3duIiwiRVJSX0JBRF9PUFRJT05fVkFMVUUiLCJFUlJfQkFEX09QVElPTiIsIkF4aW9zIiwiaW5zdGFuY2VDb25maWciLCJjb25maWdPclVybCIsIl9yZXF1ZXN0IiwiZHVtbXkiLCJib29sZWFuIiwiZnVuY3Rpb24iLCJjb250ZXh0SGVhZGVycyIsInJlcXVlc3RJbnRlcmNlcHRvckNoYWluIiwic3luY2hyb25vdXNSZXF1ZXN0SW50ZXJjZXB0b3JzIiwidW5zaGlmdFJlcXVlc3RJbnRlcmNlcHRvcnMiLCJpbnRlcmNlcHRvciIsInJlc3BvbnNlSW50ZXJjZXB0b3JDaGFpbiIsInB1c2hSZXNwb25zZUludGVyY2VwdG9ycyIsImNoYWluIiwibmV3Q29uZmlnIiwiZ2V0VXJpIiwiZm9yRWFjaE1ldGhvZE5vRGF0YSIsImZvckVhY2hNZXRob2RXaXRoRGF0YSIsImdlbmVyYXRlSFRUUE1ldGhvZCIsImlzRm9ybSIsImh0dHBNZXRob2QiLCJDYW5jZWxUb2tlbiIsImV4ZWN1dG9yIiwicmVzb2x2ZVByb21pc2UiLCJwcm9taXNlRXhlY3V0b3IiLCJfbGlzdGVuZXJzIiwib25mdWxmaWxsZWQiLCJjIiwic3ByZWFkIiwiaXNBeGlvc0Vycm9yIiwicGF5bG9hZCIsIkh0dHBTdGF0dXNDb2RlIiwiQ29udGludWUiLCJTd2l0Y2hpbmdQcm90b2NvbHMiLCJQcm9jZXNzaW5nIiwiRWFybHlIaW50cyIsIk9rIiwiQ3JlYXRlZCIsIkFjY2VwdGVkIiwiTm9uQXV0aG9yaXRhdGl2ZUluZm9ybWF0aW9uIiwiTm9Db250ZW50IiwiUmVzZXRDb250ZW50IiwiUGFydGlhbENvbnRlbnQiLCJNdWx0aVN0YXR1cyIsIkFscmVhZHlSZXBvcnRlZCIsIkltVXNlZCIsIk11bHRpcGxlQ2hvaWNlcyIsIk1vdmVkUGVybWFuZW50bHkiLCJGb3VuZCIsIlNlZU90aGVyIiwiTm90TW9kaWZpZWQiLCJVc2VQcm94eSIsIlVudXNlZCIsIlRlbXBvcmFyeVJlZGlyZWN0IiwiUGVybWFuZW50UmVkaXJlY3QiLCJCYWRSZXF1ZXN0IiwiVW5hdXRob3JpemVkIiwiUGF5bWVudFJlcXVpcmVkIiwiRm9yYmlkZGVuIiwiTm90Rm91bmQiLCJNZXRob2ROb3RBbGxvd2VkIiwiTm90QWNjZXB0YWJsZSIsIlByb3h5QXV0aGVudGljYXRpb25SZXF1aXJlZCIsIlJlcXVlc3RUaW1lb3V0IiwiQ29uZmxpY3QiLCJHb25lIiwiTGVuZ3RoUmVxdWlyZWQiLCJQcmVjb25kaXRpb25GYWlsZWQiLCJQYXlsb2FkVG9vTGFyZ2UiLCJVcmlUb29Mb25nIiwiVW5zdXBwb3J0ZWRNZWRpYVR5cGUiLCJSYW5nZU5vdFNhdGlzZmlhYmxlIiwiRXhwZWN0YXRpb25GYWlsZWQiLCJJbUFUZWFwb3QiLCJNaXNkaXJlY3RlZFJlcXVlc3QiLCJVbnByb2Nlc3NhYmxlRW50aXR5IiwiTG9ja2VkIiwiRmFpbGVkRGVwZW5kZW5jeSIsIlRvb0Vhcmx5IiwiVXBncmFkZVJlcXVpcmVkIiwiUHJlY29uZGl0aW9uUmVxdWlyZWQiLCJUb29NYW55UmVxdWVzdHMiLCJSZXF1ZXN0SGVhZGVyRmllbGRzVG9vTGFyZ2UiLCJVbmF2YWlsYWJsZUZvckxlZ2FsUmVhc29ucyIsIkludGVybmFsU2VydmVyRXJyb3IiLCJOb3RJbXBsZW1lbnRlZCIsIkJhZEdhdGV3YXkiLCJTZXJ2aWNlVW5hdmFpbGFibGUiLCJHYXRld2F5VGltZW91dCIsIkh0dHBWZXJzaW9uTm90U3VwcG9ydGVkIiwiVmFyaWFudEFsc29OZWdvdGlhdGVzIiwiSW5zdWZmaWNpZW50U3RvcmFnZSIsIkxvb3BEZXRlY3RlZCIsIk5vdEV4dGVuZGVkIiwiTmV0d29ya0F1dGhlbnRpY2F0aW9uUmVxdWlyZWQiLCJjcmVhdGVJbnN0YW5jZSIsImRlZmF1bHRDb25maWciLCJpbnN0YW5jZSIsImF4aW9zIiwiQ2FuY2VsIiwicHJvbWlzZXMiLCJmb3JtVG9KU09OIiwiUmVjaXBlSW5pdCIsInRpdGxlIiwiaW1hZ2UiLCJwcmVwYXJhdGlvbk1pbnV0ZXMiLCJjb29raW5nTWludXRlcyIsInJlYWR5SW5NaW51dGVzIiwic2VydmluZ3MiLCJzdW1tYXJ5IiwiYWdncmVnYXRlTGlrZXMiLCJleHRlbmRlZEluZ3JlZGllbnRzIiwiYW5hbHl6ZWRJbnN0cnVjdGlvbnMiLCJzdGVwcyIsIk5vdFN0YXJ0ZWRTdGF0dXMiLCJzdGF0dXNOYW1lIiwic3RhdHVzTWVzc2FnZSIsIkxvYWRpbmdTdGF0dXMiLCJTdWNjZXNzZnVsU3RhdHVzIiwiZXJyb3JTdGF0dXMiLCJlcnJvck1lcyIsImFwaUtleSIsInBhZ2VFbGVtZW50Q291bnQiLCJ1cmxQcmVmaXgiLCJpbWFnZVByZWZpeCIsIm1lYWxUeXBlcyIsImN1aXNpbmVMaXN0IiwiZGlldExpc3QiLCJpbnRvbGVyYW5jZUxpc3QiLCJzb3J0TGlzdCIsInNvcnREaXJlY3Rpb25MaXN0Iiwic3RyaW5nRmlsdGVycyIsImJvb2xlYW5GaWx0ZXJzIiwibWluTWF4RmlsdGVycyIsIm51bWJlckZpbHRlcnMiLCJtZWFsVHlwZXNPcHRpb25zIiwiY3Vpc2luZVR5cGVzT3B0aW9ucyIsImRpZXRUeXBlc09wdGlvbnMiLCJpbnRvbGVyYW5jZVR5cGVzT3B0aW9ucyIsIm1pbk1heFR5cGVzT3B0aW9ucyIsInNvcnRUeXBlc09wdGlvbnMiLCJzb3J0ZGlyZWN0VHlwZXNPcHRpb25zIiwicHVibGljVGVtcGxhdGVzIiwiaW5ncmVkaWVudEZpbHRlcnMiLCJwbGFjZWhvbGRlciIsInNlbGVjdE1vZGUiLCJzb3J0RGlyZWN0aW9uIiwibGFuZ3VhZ2UiLCJyZWNpcGVzRmlsdGVycyIsImN1aXNpbmUiLCJleGNsdWRlQ3Vpc2luZSIsImRpZXQiLCJpbnRvbGVyYW5jZXMiLCJlcXVpcG1lbnQiLCJpbmNsdWRlSW5ncmVkaWVudHMiLCJleGNsdWRlSW5ncmVkaWVudHMiLCJhdXRob3IiLCJ0YWdzIiwidGl0bHRlTWF0Y2giLCJtYXhSZWFkeVRpbWUiLCJpZ25vcmVQYW50cnkiLCJtaW5NYXhWYWx1ZXMiLCJpbml0VXNlciIsImZpcnN0TmFtZSIsImxhc3ROYW1lIiwiZW1haWwiLCJzcG9vbmFjdWxhclBhc3N3b3JkIiwiVXNlclN0b3JlIiwiX3VzZXIiLCJfdXNlclN0YXR1cyIsIl9zdGF0dXMiLCJzZXRTdGF0dXMiLCJzZXRVc2VyRGF0YSIsImRlbGV0ZVVzZXJEYXRhIiwibG9naW4iLCJnZXRDb29raWVzIiwibG9nb3V0IiwidXNlciIsInVzZXJTdGF0dXMiLCJzZXRDb29raWUiLCJtb250aHMiLCJjb29raWVLZXkiLCJjb29raWVWYWx1ZSIsImNvb2tpZURhdGEiLCJkYXRlIiwic2V0TW9udGgiLCJnZXRNb250aCIsImNvb2tpZUV4cGlyZXMiLCJ0b1VUQ1N0cmluZyIsImRlbGV0ZUNvb2tpZSIsInBhcnNlQ29va2llIiwiY29va2llT2JqIiwiY29va2llUGFpciIsInBhaXJVbml0IiwiZ2V0Q29va2llUHJvcGVydHkiLCJuZXdTdGF0dXMiLCJwb3N0IiwicmVzcCIsInVzZXJSZXNwIiwidXNlclJlc3BvbnNlIiwiZGVzdHJveSIsImF1dGhSZXF1aXJlZCIsInVzZXJTdG9yZSIsIk1lbnUiLCJzZWxlY3RlZFVybCIsInNldFVybCIsImdvVG9QYXRoIiwiSGVhcnRJY29uIiwiZmlsbFJ1bGUiLCJjbGlwUnVsZSIsInN0cm9rZSIsInN0cm9rZVdpZHRoIiwic3Ryb2tlTGluZWNhcCIsInN0cm9rZUxpbmVqb2luIiwiVXNlckljb24iLCJSaWdodEJsb2NrIiwiZ29Ub1NhdmVkIiwiZ29Ub1Byb2ZpbGUiLCJIZWFkZXIiLCJNYWluIiwibWFpbiIsInVuc3RhYmxlX2JhdGNoZWRVcGRhdGVzIiwiZGVmYXVsdE5vb3BCYXRjaCIsIm9ic2VydmVyQmF0Y2hpbmciLCJpc09ic2VydmVyQmF0Y2hlZCIsInByaW50RGVidWdWYWx1ZSIsImdsb2JhbElzVXNpbmdTdGF0aWNSZW5kZXJpbmciLCJlbmFibGVTdGF0aWNSZW5kZXJpbmciLCJlbmFibGUiLCJpc1VzaW5nU3RhdGljUmVuZGVyaW5nIiwiUkVHSVNUUllfRklOQUxJWkVfQUZURVIiLCJSRUdJU1RSWV9TV0VFUF9JTlRFUlZBTCIsIlRpbWVyQmFzZWRGaW5hbGl6YXRpb25SZWdpc3RyeSIsImZpbmFsaXplIiwibWF4QWdlIiwic3dlZXBUaW1lb3V0IiwicmVnaXN0cmF0aW9ucyIsInJlZ2lzdHJhdGlvbiIsInJlZ2lzdGVyZWRBdCIsInNjaGVkdWxlU3dlZXAiLCJzd2VlcCIsIlVuaXZlcnNhbEZpbmFsaXphdGlvblJlZ2lzdHJ5IiwiRmluYWxpemF0aW9uUmVnaXN0cnkiLCJvYnNlcnZlckZpbmFsaXphdGlvblJlZ2lzdHJ5IiwiX2EiLCJ1c2VTeW5jRXh0ZXJuYWxTdG9yZSIsImNyZWF0ZVJlYWN0aW9uIiwic3RhdGVWZXJzaW9uIiwib25TdG9yZUNoYW5nZSIsInVzZU9ic2VydmVyIiwiYmFzZUNvbXBvbmVudE5hbWUiLCJhZG1SZWYiLCJhZG1fMSIsInVucmVnaXN0ZXIiLCJnZXRTbmFwc2hvdCIsInJlZ2lzdGVyIiwidXNlRGVidWdWYWx1ZSIsInJlbmRlclJlc3VsdCIsImV4Y2VwdGlvbiIsIndhcm5PYnNlcnZlck9wdGlvbnNEZXByZWNhdGVkIiwiaGFzU3ltYm9sIiwiZm9yIiwiX2IiLCJSZWFjdEZvcndhcmRSZWZTeW1ib2wiLCJSZWFjdE1lbW9TeW1ib2wiLCJvYnNlcnZlciIsImJhc2VDb21wb25lbnQiLCJ1c2VGb3J3YXJkUmVmIiwib2JzZXJ2ZXJDb21wb25lbnQiLCJjb250ZXh0VHlwZXMiLCJjb3B5U3RhdGljUHJvcGVydGllcyIsImhvaXN0QmxhY2tMaXN0IiwiJCR0eXBlb2YiLCJjb21wYXJlIiwiT2JzZXJ2ZXJDb21wb25lbnQiLCJwcm9wVHlwZXMiLCJPYnNlcnZlclByb3BzQ2hlY2siLCJPYnNlcnZlciIsImNvbXBvbmVudE5hbWUiLCJwcm9wRnVsbE5hbWUiLCJleHRyYUtleSIsImhhc0V4dHJhUHJvcCIsInVzZUxvY2FsT2JzZXJ2YWJsZSIsImluaXRpYWxpemVyIiwidXNlRGVwcmVjYXRlZCIsInVzZUFzT2JzZXJ2YWJsZVNvdXJjZSIsInVzZUxvY2FsU3RvcmUiLCJiYXRjaCIsInVzZU9ic2VydmVyT3JpZ2luYWwiLCJfb2JzZXJ2ZXJGaW5hbGl6YXRpb25SZWdpc3RyeSIsImNsZWFyVGltZXJzIiwidXNlU3RhdGljUmVuZGVyaW5nIiwiTG9hZGVyIiwiQnV0dG9uIiwibG9hZGluZyIsImRpc2FibGVkIiwiRXJyb3JCb3giLCJlcnJvclNsb3QiLCJBcnJvd0xlZnRJY29uIiwiY3Vyc29yIiwic3Ryb2tlTWl0ZXJsaW1pdCIsIkVxSWNvbiIsIkluZ0ljb24iLCJjcmVhdG9yIiwiY29udGFpbmVyIiwiUmVjaXBlU3RvcmUiLCJfcmVjaXBlIiwic2V0UmVjaXBlIiwibG9hZGluZ1JlY2lwZSIsInJlY2lwZSIsIm5ld1JlY2lwZSIsIlByZXZpZXdCbG9jayIsInVuaXQiLCJSZWNpcGVOZWVkIiwiZWxlbWVudHMiLCJpY29uIiwiUmVjaXBlIiwicmVjaXBlT2JqIiwiZ2V0RXF1aXBtZW50IiwidW5pcUVxIiwic3RlcCIsImdldEluZ3JlZGllbnRzIiwiYW1vdW50Iiwic3JjIiwiYWx0IiwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwiLCJfX2h0bWwiLCJlbGVtIiwiQXJyb3dSaWdodEljb24iLCJQYWdlQ29udHJvbGxlclN0b3JlIiwiX3BhZ2VzIiwiX3RvdGFsIiwidG90YWxSZXN1bHRzIiwiZ2V0UG9pbnRzQXJyYXkiLCJwYWdlcyIsInNlbGVjdGVkUGFnZSIsImVuZEl0ZW0iLCJmaXJzdEl0ZW0iLCJQYWdlQ29udHJvbGxlciIsImdvQmFjayIsImdvTmV4dCIsInNlbGVjdFBhZ2UiLCJwYWdlTnVtYmVyIiwiU2VhcmNoUGFyYW1zU3RvcmUiLCJfc2VhcmNoUGFyYW1zIiwic2V0U2VhcmNoUGFyYW0iLCJnZXRTZWFyY2hQYXJhbXMiLCJzZXRNdWx0aVBhcmFtIiwiZGVsZXRlU2VhcmNoUGFyYW0iLCJjaGFuZ2VTZWFyY2hQYXJhbXNGb3JGaWx0ZXJzIiwidXBkYXRlVXJsIiwidXBkYXRlU2VhcmNoUGFyYW1zIiwiZ2V0U2VhcmNoT2JqZWN0IiwibmV3VXJsIiwicGFyYW1BcnJheSIsInVwZGF0aW5nIiwidmFsdWVTdHIiLCJjYXRlZ29yeVRhZyIsImNhdGVnb3J5Iiwib3RoZXJUYWdzIiwiY2F0IiwiZ2V0UGFyYW0iLCJnZXROdW1iZXJQYXJhbSIsImdldFBhcmFtUGFpciIsImdldE9mZnNldCIsImdldE11bHRpcGxlUGFyYW0iLCJ2YWx1ZUFycmF5Iiwic2VhcmNoU3RvcmUiLCJMaXN0U2hvd2VyIiwidG90YWxDb3VudCIsInBhZ2VDb250cm9sbGVyQ2xpY2siLCJwYWdlIiwiZ2V0SW5pdGlhbENvbGxlY3Rpb25Nb2RlbCIsIm9yZGVyIiwiZW50aXRpZXMiLCJub3JtYWxpemVDb2xsZWN0aW9uIiwiZ2V0S2V5Rm9yRWxlbWVudCIsImNvbGxlY3Rpb24iLCJsaW5lYXJpemVDb2xsZWN0aW9uIiwiQmFzZUxpc3RTdG9yZSIsIl9yZXN1bHRzIiwic2V0UmVzdWx0UmVxdWVzdCIsImxvYWRpbmdMaXN0IiwibmV3UmVzdWx0TGlzdCIsIm5ld1RvdGFsIiwicmVzdWx0c05hbWUiLCJ0b3RhbE5hbWUiLCJSZWNpcGVMaXN0U3RvcmUiLCJyZWNpcGVLY2FsIiwibnV0cml0aW9uIiwibnV0cmllbnRzIiwia2NhbFN0ciIsImNlaWwiLCJkZXNjcmliZVN0ciIsImluZ3JlZGllbnRzIiwiaW5nIiwia2NhbCIsImRlc2NyaWJlIiwiZ2V0VXJsIiwiYWRkUmVjaXBlTnV0cml0aW9uIiwicGF0aFVybCIsInBhdGhQYXJhbXMiLCJJbnB1dCIsIm9uQ2hhbmdlIiwiYWZ0ZXJTbG90Iiwib25DaGFuZ2VGdW5jdGlvbiIsIkFycm93RG93bkljb24iLCJNdWx0aURyb3Bkb3duIiwib3BlbmVkIiwic2V0T3BlbmVkIiwic2V0VGl0bGUiLCJnZXRUaXRsZSIsIm9wdGlvbkxpc3QiLCJzZXRPcHRpb25MaXN0IiwiaGFuZGxlT3V0c2lkZUNsaWNrIiwiY29udGFpbnMiLCJnZXRPcHRpb25MaXN0IiwiY2xpY2tWYWx1ZSIsImdldEZpbHRlckxpc3QiLCJjdXJyVmFsdWUiLCJoYW5kbGVDaGFuZ2UiLCJTZWFyY2hJY29uIiwiRmlsdGVyU3RvcmUiLCJfc2VhcmNoRmllbGQiLCJfY2F0ZWdvcnkiLCJfdmlzaWJpbGl0eSIsIl9pdGVtSW5kZXhMaXN0IiwiX2l0ZW1TaW5nbGVMaXN0IiwiX2l0ZW1NaW5NYXhMaXN0IiwiX2l0ZW1PcHRpb25MaXN0Iiwic2V0U2VhcmNoIiwic2V0Q2F0ZWdvcnkiLCJzZXRWaXNpYmlsaXR5Iiwic2V0U2luZ2xlSXRlbVZhbHVlIiwic2V0TWluTWF4SXRlbVZhbHVlIiwic2V0T3B0aW9uSXRlbVZhbHVlIiwiYWRkTWluTWF4SXRlbSIsImNvbmZpZ0ZpbHRlcnMiLCJzZWFyY2hGaWVsZCIsInZpc2liaWxpdHkiLCJpc0VtcHR5IiwibWluTWF4ZXMiLCJmaWx0ZXJzIiwicG9pbnQiLCJnZXRTaW5nbGVJdGVtVmFsdWUiLCJnZXRNaW5NYXhJdGVtVmFsdWUiLCJnZXRPcHRpb25JdGVtVmFsdWUiLCJpc1NpbmdsZSIsIml0ZW1Qb2ludCIsIkZpbHRlciIsIk11bHRpU3RyaW5nRmlsdGVyIiwiZmlsdGVyTmFtZSIsIm11bHRpUHJvcHMiLCJTdHJpbmdGaWx0ZXIiLCJmaWx0ZXJTZXR0aW5ncyIsImlucHV0UHJvcHMiLCJoZWxwIiwiTnVtYmVyRmlsdGVyIiwiQ2hlY2tJY29uIiwiQ2hlY2tCb3giLCJvbkNoYW5nZUNoZWNrYm94IiwiY2hlY2tlZCIsImlkTmFtZSIsImh0bWxGb3IiLCJCb29sZWFuRmlsdGVyIiwiY2hlY2tib3hQcm9wcyIsIkNvbnRlbnRGaWx0ZXJzIiwiZ2V0RmlsdGVyc0ZvclN0b3JlIiwib3RoZXJGaWx0ZXJzIiwiZmlsdGVyT2JqIiwiZ2VuZXJhdGVPdGhlckZpbHRlcnMiLCJmaWx0IiwiY2F0ZWdvcnlPcHRpb25zIiwiY2hhbmdlU2VhcmNoUGFyYW1zIiwib25DaGFuZ2VJbnB1dEhhbmRsZSIsIm9uQ2hhbmdlQ2F0ZWdvcnkiLCJnZXRUaXRsZVdpdGhJbml0IiwiaW5pdFZhbHVlIiwiZ2V0VGl0bGVDYXRlZ29yeSIsImNhdGVnb3J5UGxhY2Vob2xkZXIiLCJzaG93TW9yZUZpbHRlcnMiLCJoaWRlTW9yZUZpbHRlcnMiLCJpbnB1dFBsYWNlaG9sZGVyIiwibmV3VmFsIiwiY3VzdG9tU3R5bGVzIiwiQ29udGVudEhlYWRlciIsIkNhcmQiLCJjYXJkIiwiY2FwdGlvblNsb3QiLCJzdWJ0aXRsZSIsImNvbnRlbnRTbG90IiwiYWN0aW9uU2xvdCIsIlRpbWVJY29uIiwiUmVjaXBlQ2FyZENhcHRpb24iLCJMb2NhbFN0b3JhZ2UiLCJfcHJlZml4IiwiX2Z1bGxQcmVmaXgiLCJfc2F2ZWRDYXJkUmVjaXBlcyIsImRlbGV0ZVJlY2lwZSIsImFkZFNhdmVkUmVjaXBlIiwiY2hlY2tSZWNpcGVJblNhdmVkIiwibG9hZGluZ1NhdmVkIiwiY2FyZHMiLCJnZXRJdGVtTmFtZSIsImFkZFJlY2lwZVZhbHVlcyIsImxvY2FsU3RvcmFnZSIsImdldFNhdmVkUmVjaXBlIiwiY2FyZFJlY2lwZSIsImdldEFsbFJlY2lwZXMiLCJyZWNpcGVMaXN0IiwiaWRMaXN0Iiwic3RySWQiLCJSZWNpcGVDYXJkIiwibW9kZSIsImlzU2F2ZWQiLCJzZXRJc1NhdmVkIiwibmF2aWdhdGVUb1JlY2lwZVBhZ2UiLCJnZXRCdXR0b25XaXRoQ2FsbEJhY2siLCJzdG9wUHJvcGFnYXRpb24iLCJnZXRCdXR0b25JblJlY2lwZUxpc3QiLCJnZXRBY3Rpb25TbG90QnlNb2RlIiwiQ29udGVudCIsInJlY2lwZXNTdG9yZSIsImltZyIsIlByZXZpZXciLCJwcmV2aWV3IiwiUmVjaXBlcyIsInJlY2lwZXMiLCJQYWdlVGVtcGxhdGUiLCJoZWFkZXJOYW1lIiwiSW5ncmVkaWVudExpc3RTdG9yZSIsImdldEltYWdlVXJsIiwiSW5ncmVkaWVudHMiLCJpbmdyZWRpZW50U3RvcmUiLCJxdWVyeVN0ciIsImluZ3JlZGllbnQiLCJQcm9kdWN0TGlzdFN0b3JlIiwiUHJvZHVjdHMiLCJwcm9kdWN0U3RvcmUiLCJNZW51SXRlbUxpc3RTdG9yZSIsIk1lbnVJdGVtcyIsIm1lbnVJdGVtc1N0b3JlIiwibWVudUl0ZW0iLCJyZXN0YXVyYW50Q2hhaW4iLCJTYXZlZCIsImluaXRSZXF1ZXN0VmFsdWUiLCJMb2dpbiIsInNldFVzZXIiLCJVc2VyIiwiTWVhbFBsYW5uaW5nU3RvcmUiLCJfcGxhbiIsInNldFBsYW4iLCJsb2FkaW5nUGxhbiIsImdlbmVyYXRlUGxhbiIsImFkZEluUGxhbiIsImRlbGV0ZUZyb21QbGFuIiwiY2xlYXJQbGFuIiwicGxhbiIsIndlZWtTdGFydCIsIndlZWtQbGFuIiwiZ2V0RGF0ZUZvcm0iLCJkYXRlT2JqIiwidG9Mb2NhbGVEYXRlU3RyaW5nIiwieWVhciIsIm1vbnRoIiwiZGF5IiwiZ2V0U3RhcnRPZldlZWsiLCJnZXREYXkiLCJkaWZmIiwiZ2V0RGF0ZSIsInNldERhdGUiLCJub3dQcmV2IiwiZ2V0VGltZSIsIm1lYWxQbGFuVGVtcGxhdGVJZCIsInN0YXJ0RGF0ZSIsIlNsb3RJbmZvIiwic2xvdHMiLCJnZXRJdGVtRWxlbWVudEJ5VHlwZSIsIml0ZW0iLCJpbWdVcmwiLCJpbWFnZVR5cGUiLCJzbG90IiwiRGF5SW5mbyIsImJyZWFrZmFzdEl0ZW1zIiwibHVuY2hJdGVtcyIsImRpbm5lckl0ZW1zIiwiZ2V0TnV0cml0aW9uQnlOYW1lIiwibnV0IiwibnV0cml0aW9uU3VtbWFyeSIsIm51dHIiLCJkYXlOYW1lIiwid2Vla0RheXMiLCJXZWVrSW5mbyIsImVtcHR5RGF5cyIsImRheXMiLCJNZWFsUGxhbm5pbmciLCJ0ZW1wbGF0ZXMiLCJzZXRUZW1wbGF0ZXMiLCJzZWFyY2hQYXJhbXNTdG9yZSIsIkFwcCIsImNyZWF0ZVJvb3QiLCJTdHJpY3RNb2RlIiwibW9kdWxlIiwiaG90IiwiYWNjZXB0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///6986\n')},8111:(module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   A: () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(963);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(9089);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(6492);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2__);\n// Imports\n\n\n\nvar ___CSS_LOADER_URL_IMPORT_0___ = new URL(/* asset import */ __webpack_require__(499), __webpack_require__.b);\nvar ___CSS_LOADER_URL_IMPORT_1___ = new URL(/* asset import */ __webpack_require__(7664), __webpack_require__.b);\nvar ___CSS_LOADER_URL_IMPORT_2___ = new URL(/* asset import */ __webpack_require__(8336), __webpack_require__.b);\nvar ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));\nvar ___CSS_LOADER_URL_REPLACEMENT_0___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_0___);\nvar ___CSS_LOADER_URL_REPLACEMENT_1___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_1___);\nvar ___CSS_LOADER_URL_REPLACEMENT_2___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_2___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, `@font-face{font-family:"Roboto";src:url(${___CSS_LOADER_URL_REPLACEMENT_0___}) format("woff2");font-weight:400;font-style:normal;font-display:swap}@font-face{font-family:"Roboto";src:url(${___CSS_LOADER_URL_REPLACEMENT_1___}) format("woff2");font-weight:500;font-style:normal;font-display:swap}@font-face{font-family:"Roboto";src:url(${___CSS_LOADER_URL_REPLACEMENT_2___}) format("woff2");font-weight:700;font-style:normal;font-display:swap}`, "",{"version":3,"sources":["webpack://./src/styles/Roboto/fonts.css"],"names":[],"mappings":"AAAA,WACE,oBAAA,CACA,2DAAA,CACA,eAAA,CACA,iBAAA,CACA,iBAAA,CAGF,WACE,oBAAA,CACA,2DAAA,CACA,eAAA,CACA,iBAAA,CACA,iBAAA,CAGF,WACE,oBAAA,CACA,2DAAA,CACA,eAAA,CACA,iBAAA,CACA,iBAAA","sourcesContent":["@font-face {\\r\\n  font-family: \'Roboto\';\\r\\n  src: url(\'Roboto-Regular.woff2\') format(\'woff2\'),;\\r\\n  font-weight: 400;\\r\\n  font-style: normal;\\r\\n  font-display: swap;\\r\\n}\\r\\n\\r\\n@font-face {\\r\\n  font-family: \'Roboto\';\\r\\n  src: url(\'Roboto-Medium.woff2\') format(\'woff2\'),;\\r\\n  font-weight: 500;\\r\\n  font-style: normal;\\r\\n  font-display: swap;\\r\\n}\\r\\n\\r\\n@font-face {\\r\\n  font-family: \'Roboto\';\\r\\n  src: url(\'Roboto-Bold.woff2\') format(\'woff2\'),;\\r\\n  font-weight: 700;\\r\\n  font-style: normal;\\r\\n  font-display: swap;\\r\\n}\\r\\n"],"sourceRoot":""}]);\n// Exports\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiODExMS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBQTtBQUNnSDtBQUNqQjtBQUNPO0FBQ3RHLDRDQUE0QyxrRUFBdUM7QUFDbkYsNENBQTRDLG1FQUFzQztBQUNsRiw0Q0FBNEMsbUVBQW9DO0FBQ2hGLDhCQUE4QixtRkFBMkIsQ0FBQyw0RkFBcUM7QUFDL0YseUNBQXlDLHNGQUErQjtBQUN4RSx5Q0FBeUMsc0ZBQStCO0FBQ3hFLHlDQUF5QyxzRkFBK0I7QUFDeEU7QUFDQSxxREFBcUQscUJBQXFCLFVBQVUsbUNBQW1DLGtCQUFrQixnQkFBZ0Isa0JBQWtCLGtCQUFrQixXQUFXLHFCQUFxQixVQUFVLG1DQUFtQyxrQkFBa0IsZ0JBQWdCLGtCQUFrQixrQkFBa0IsV0FBVyxxQkFBcUIsVUFBVSxtQ0FBbUMsa0JBQWtCLGdCQUFnQixrQkFBa0Isa0JBQWtCLE9BQU8sMFNBQTBTLDRCQUE0Qix3REFBd0QsdUJBQXVCLHlCQUF5Qix5QkFBeUIsS0FBSyxvQkFBb0IsNEJBQTRCLHVEQUF1RCx1QkFBdUIseUJBQXlCLHlCQUF5QixLQUFLLG9CQUFvQiw0QkFBNEIscURBQXFELHVCQUF1Qix5QkFBeUIseUJBQXlCLEtBQUssdUJBQXVCO0FBQ3J6QztBQUNBLGlFQUFlLHVCQUF1QixFQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vMjAyNC1rdHNzdHVkaW8taG9tZXdvcmtzLy4vc3JjL3N0eWxlcy9Sb2JvdG8vZm9udHMuY3NzPzdlODciXSwic291cmNlc0NvbnRlbnQiOlsiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9HRVRfVVJMX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2dldFVybC5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF8wX19fID0gbmV3IFVSTChcIlJvYm90by1SZWd1bGFyLndvZmYyXCIsIGltcG9ydC5tZXRhLnVybCk7XG52YXIgX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzFfX18gPSBuZXcgVVJMKFwiUm9ib3RvLU1lZGl1bS53b2ZmMlwiLCBpbXBvcnQubWV0YS51cmwpO1xudmFyIF9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF8yX19fID0gbmV3IFVSTChcIlJvYm90by1Cb2xkLndvZmYyXCIsIGltcG9ydC5tZXRhLnVybCk7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG52YXIgX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfMF9fXyA9IF9fX0NTU19MT0FERVJfR0VUX1VSTF9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzBfX18pO1xudmFyIF9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzFfX18gPSBfX19DU1NfTE9BREVSX0dFVF9VUkxfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF8xX19fKTtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF8yX19fID0gX19fQ1NTX0xPQURFUl9HRVRfVVJMX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfMl9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgYEBmb250LWZhY2V7Zm9udC1mYW1pbHk6XCJSb2JvdG9cIjtzcmM6dXJsKCR7X19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfMF9fX30pIGZvcm1hdChcIndvZmYyXCIpO2ZvbnQtd2VpZ2h0OjQwMDtmb250LXN0eWxlOm5vcm1hbDtmb250LWRpc3BsYXk6c3dhcH1AZm9udC1mYWNle2ZvbnQtZmFtaWx5OlwiUm9ib3RvXCI7c3JjOnVybCgke19fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzFfX199KSBmb3JtYXQoXCJ3b2ZmMlwiKTtmb250LXdlaWdodDo1MDA7Zm9udC1zdHlsZTpub3JtYWw7Zm9udC1kaXNwbGF5OnN3YXB9QGZvbnQtZmFjZXtmb250LWZhbWlseTpcIlJvYm90b1wiO3NyYzp1cmwoJHtfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF8yX19ffSkgZm9ybWF0KFwid29mZjJcIik7Zm9udC13ZWlnaHQ6NzAwO2ZvbnQtc3R5bGU6bm9ybWFsO2ZvbnQtZGlzcGxheTpzd2FwfWAsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vc3JjL3N0eWxlcy9Sb2JvdG8vZm9udHMuY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUFBLFdBQ0Usb0JBQUEsQ0FDQSwyREFBQSxDQUNBLGVBQUEsQ0FDQSxpQkFBQSxDQUNBLGlCQUFBLENBR0YsV0FDRSxvQkFBQSxDQUNBLDJEQUFBLENBQ0EsZUFBQSxDQUNBLGlCQUFBLENBQ0EsaUJBQUEsQ0FHRixXQUNFLG9CQUFBLENBQ0EsMkRBQUEsQ0FDQSxlQUFBLENBQ0EsaUJBQUEsQ0FDQSxpQkFBQVwiLFwic291cmNlc0NvbnRlbnRcIjpbXCJAZm9udC1mYWNlIHtcXHJcXG4gIGZvbnQtZmFtaWx5OiAnUm9ib3RvJztcXHJcXG4gIHNyYzogdXJsKCdSb2JvdG8tUmVndWxhci53b2ZmMicpIGZvcm1hdCgnd29mZjInKSw7XFxyXFxuICBmb250LXdlaWdodDogNDAwO1xcclxcbiAgZm9udC1zdHlsZTogbm9ybWFsO1xcclxcbiAgZm9udC1kaXNwbGF5OiBzd2FwO1xcclxcbn1cXHJcXG5cXHJcXG5AZm9udC1mYWNlIHtcXHJcXG4gIGZvbnQtZmFtaWx5OiAnUm9ib3RvJztcXHJcXG4gIHNyYzogdXJsKCdSb2JvdG8tTWVkaXVtLndvZmYyJykgZm9ybWF0KCd3b2ZmMicpLDtcXHJcXG4gIGZvbnQtd2VpZ2h0OiA1MDA7XFxyXFxuICBmb250LXN0eWxlOiBub3JtYWw7XFxyXFxuICBmb250LWRpc3BsYXk6IHN3YXA7XFxyXFxufVxcclxcblxcclxcbkBmb250LWZhY2Uge1xcclxcbiAgZm9udC1mYW1pbHk6ICdSb2JvdG8nO1xcclxcbiAgc3JjOiB1cmwoJ1JvYm90by1Cb2xkLndvZmYyJykgZm9ybWF0KCd3b2ZmMicpLDtcXHJcXG4gIGZvbnQtd2VpZ2h0OiA3MDA7XFxyXFxuICBmb250LXN0eWxlOiBub3JtYWw7XFxyXFxuICBmb250LWRpc3BsYXk6IHN3YXA7XFxyXFxufVxcclxcblwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///8111\n')},1592:(module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   A: () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(963);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(9089);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _node_modules_css_loader_dist_cjs_js_Roboto_fonts_css__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(3898);\n// Imports\n\n\n\nvar ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));\n___CSS_LOADER_EXPORT___.i(_node_modules_css_loader_dist_cjs_js_Roboto_fonts_css__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .A);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, `html,body{font-family:"Roboto";margin:0;padding:0}*{box-sizing:border-box}* a{text-decoration:underline;color:#000}* a:active,* a:link,* a:visited,* a:hover{color:#000}h1,h2,h3,h4,h5,h6,p,blockquote,figure,pre{margin:0}`, "",{"version":3,"sources":["webpack://./src/styles/styles.scss"],"names":[],"mappings":"AAEA,UACE,oBAAA,CACA,QAAA,CACA,SAAA,CAGF,EACE,qBAAA,CAEA,IACE,yBAAA,CACA,UAAA,CAGF,0CACE,UAAA,CAIJ,0CAUE,QAAA","sourcesContent":["@import \'./Roboto/fonts.css\';\\r\\n\\r\\nhtml, body {\\r\\n  font-family: \'Roboto\';\\r\\n  margin: 0;\\r\\n  padding: 0;\\r\\n}\\r\\n\\r\\n* {\\r\\n  box-sizing: border-box;\\r\\n\\r\\n  a {\\r\\n    text-decoration: underline;\\r\\n    color: black;\\r\\n  }\\r\\n  \\r\\n  a:active, a:link, a:visited, a:hover {  \\r\\n    color: black;   \\r\\n  }\\r\\n}\\r\\n\\r\\nh1,\\r\\nh2,\\r\\nh3,\\r\\nh4,\\r\\nh5,\\r\\nh6,\\r\\np,\\r\\nblockquote,\\r\\nfigure,\\r\\npre {\\r\\n  margin: 0;\\r\\n}"],"sourceRoot":""}]);\n// Exports\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTU5Mi5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFBO0FBQzZHO0FBQ2pCO0FBQ21CO0FBQy9HLDhCQUE4QixtRkFBMkIsQ0FBQyw0RkFBcUM7QUFDL0YsMEJBQTBCLHNHQUFpQztBQUMzRDtBQUNBLG9EQUFvRCxxQkFBcUIsU0FBUyxVQUFVLEVBQUUsc0JBQXNCLElBQUksMEJBQTBCLFdBQVcsMENBQTBDLFdBQVcsMENBQTBDLFNBQVMsT0FBTyxtUEFBbVAsb0JBQW9CLDRCQUE0QixnQkFBZ0IsaUJBQWlCLEtBQUssV0FBVyw2QkFBNkIsYUFBYSxtQ0FBbUMscUJBQXFCLE9BQU8sb0RBQW9ELHdCQUF3QixPQUFPLEtBQUssdUZBQXVGLGdCQUFnQixLQUFLLG1CQUFtQjtBQUNoNkI7QUFDQSxpRUFBZSx1QkFBdUIsRUFBQyIsInNvdXJjZXMiOlsid2VicGFjazovLzIwMjQta3Rzc3R1ZGlvLWhvbWV3b3Jrcy8uL3NyYy9zdHlsZXMvc3R5bGVzLnNjc3M/YzAyNyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FUX1JVTEVfSU1QT1JUXzBfX18gZnJvbSBcIi0hLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9Sb2JvdG8vZm9udHMuY3NzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5pKF9fX0NTU19MT0FERVJfQVRfUlVMRV9JTVBPUlRfMF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgYGh0bWwsYm9keXtmb250LWZhbWlseTpcIlJvYm90b1wiO21hcmdpbjowO3BhZGRpbmc6MH0qe2JveC1zaXppbmc6Ym9yZGVyLWJveH0qIGF7dGV4dC1kZWNvcmF0aW9uOnVuZGVybGluZTtjb2xvcjojMDAwfSogYTphY3RpdmUsKiBhOmxpbmssKiBhOnZpc2l0ZWQsKiBhOmhvdmVye2NvbG9yOiMwMDB9aDEsaDIsaDMsaDQsaDUsaDYscCxibG9ja3F1b3RlLGZpZ3VyZSxwcmV7bWFyZ2luOjB9YCwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9zcmMvc3R5bGVzL3N0eWxlcy5zY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUVBLFVBQ0Usb0JBQUEsQ0FDQSxRQUFBLENBQ0EsU0FBQSxDQUdGLEVBQ0UscUJBQUEsQ0FFQSxJQUNFLHlCQUFBLENBQ0EsVUFBQSxDQUdGLDBDQUNFLFVBQUEsQ0FJSiwwQ0FVRSxRQUFBXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIkBpbXBvcnQgJy4vUm9ib3RvL2ZvbnRzLmNzcyc7XFxyXFxuXFxyXFxuaHRtbCwgYm9keSB7XFxyXFxuICBmb250LWZhbWlseTogJ1JvYm90byc7XFxyXFxuICBtYXJnaW46IDA7XFxyXFxuICBwYWRkaW5nOiAwO1xcclxcbn1cXHJcXG5cXHJcXG4qIHtcXHJcXG4gIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XFxyXFxuXFxyXFxuICBhIHtcXHJcXG4gICAgdGV4dC1kZWNvcmF0aW9uOiB1bmRlcmxpbmU7XFxyXFxuICAgIGNvbG9yOiBibGFjaztcXHJcXG4gIH1cXHJcXG4gIFxcclxcbiAgYTphY3RpdmUsIGE6bGluaywgYTp2aXNpdGVkLCBhOmhvdmVyIHsgIFxcclxcbiAgICBjb2xvcjogYmxhY2s7ICAgXFxyXFxuICB9XFxyXFxufVxcclxcblxcclxcbmgxLFxcclxcbmgyLFxcclxcbmgzLFxcclxcbmg0LFxcclxcbmg1LFxcclxcbmg2LFxcclxcbnAsXFxyXFxuYmxvY2txdW90ZSxcXHJcXG5maWd1cmUsXFxyXFxucHJlIHtcXHJcXG4gIG1hcmdpbjogMDtcXHJcXG59XCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///1592\n')},3898:(module,__webpack_exports__,__webpack_require__)=>{"use strict";eval("/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   A: () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(963);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(9089);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(6492);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2__);\n// Imports\n\n\n\nvar ___CSS_LOADER_URL_IMPORT_0___ = new URL(/* asset import */ __webpack_require__(499), __webpack_require__.b);\nvar ___CSS_LOADER_URL_IMPORT_1___ = new URL(/* asset import */ __webpack_require__(7664), __webpack_require__.b);\nvar ___CSS_LOADER_URL_IMPORT_2___ = new URL(/* asset import */ __webpack_require__(8336), __webpack_require__.b);\nvar ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));\nvar ___CSS_LOADER_URL_REPLACEMENT_0___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_0___);\nvar ___CSS_LOADER_URL_REPLACEMENT_1___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_1___);\nvar ___CSS_LOADER_URL_REPLACEMENT_2___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_2___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, `@font-face {\r\n  font-family: 'Roboto';\r\n  src: url(${___CSS_LOADER_URL_REPLACEMENT_0___}) format('woff2'),;\r\n  font-weight: 400;\r\n  font-style: normal;\r\n  font-display: swap;\r\n}\r\n\r\n@font-face {\r\n  font-family: 'Roboto';\r\n  src: url(${___CSS_LOADER_URL_REPLACEMENT_1___}) format('woff2'),;\r\n  font-weight: 500;\r\n  font-style: normal;\r\n  font-display: swap;\r\n}\r\n\r\n@font-face {\r\n  font-family: 'Roboto';\r\n  src: url(${___CSS_LOADER_URL_REPLACEMENT_2___}) format('woff2'),;\r\n  font-weight: 700;\r\n  font-style: normal;\r\n  font-display: swap;\r\n}\r\n`, \"\",{\"version\":3,\"sources\":[\"webpack://./src/styles/Roboto/fonts.css\"],\"names\":[],\"mappings\":\"AAAA;EACE,qBAAqB;EACrB,6DAAiD;EACjD,gBAAgB;EAChB,kBAAkB;EAClB,kBAAkB;AACpB;;AAEA;EACE,qBAAqB;EACrB,6DAAgD;EAChD,gBAAgB;EAChB,kBAAkB;EAClB,kBAAkB;AACpB;;AAEA;EACE,qBAAqB;EACrB,6DAA8C;EAC9C,gBAAgB;EAChB,kBAAkB;EAClB,kBAAkB;AACpB\",\"sourcesContent\":[\"@font-face {\\r\\n  font-family: 'Roboto';\\r\\n  src: url('Roboto-Regular.woff2') format('woff2'),;\\r\\n  font-weight: 400;\\r\\n  font-style: normal;\\r\\n  font-display: swap;\\r\\n}\\r\\n\\r\\n@font-face {\\r\\n  font-family: 'Roboto';\\r\\n  src: url('Roboto-Medium.woff2') format('woff2'),;\\r\\n  font-weight: 500;\\r\\n  font-style: normal;\\r\\n  font-display: swap;\\r\\n}\\r\\n\\r\\n@font-face {\\r\\n  font-family: 'Roboto';\\r\\n  src: url('Roboto-Bold.woff2') format('woff2'),;\\r\\n  font-weight: 700;\\r\\n  font-style: normal;\\r\\n  font-display: swap;\\r\\n}\\r\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzg5OC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBQTtBQUNnSDtBQUNqQjtBQUNPO0FBQ3RHLDRDQUE0QyxrRUFBdUM7QUFDbkYsNENBQTRDLG1FQUFzQztBQUNsRiw0Q0FBNEMsbUVBQW9DO0FBQ2hGLDhCQUE4QixtRkFBMkIsQ0FBQyw0RkFBcUM7QUFDL0YseUNBQXlDLHNGQUErQjtBQUN4RSx5Q0FBeUMsc0ZBQStCO0FBQ3hFLHlDQUF5QyxzRkFBK0I7QUFDeEU7QUFDQTtBQUNBO0FBQ0EsYUFBYSxtQ0FBbUM7QUFDaEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLG1DQUFtQztBQUNoRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsbUNBQW1DO0FBQ2hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTyw4RkFBOEYsWUFBWSxhQUFhLGFBQWEsYUFBYSxhQUFhLE9BQU8sS0FBSyxZQUFZLGFBQWEsYUFBYSxhQUFhLGFBQWEsT0FBTyxLQUFLLFlBQVksYUFBYSxhQUFhLGFBQWEsYUFBYSxzQ0FBc0MsNEJBQTRCLHdEQUF3RCx1QkFBdUIseUJBQXlCLHlCQUF5QixLQUFLLG9CQUFvQiw0QkFBNEIsdURBQXVELHVCQUF1Qix5QkFBeUIseUJBQXlCLEtBQUssb0JBQW9CLDRCQUE0QixxREFBcUQsdUJBQXVCLHlCQUF5Qix5QkFBeUIsS0FBSyx1QkFBdUI7QUFDcDRCO0FBQ0EsaUVBQWUsdUJBQXVCLEVBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8yMDI0LWt0c3N0dWRpby1ob21ld29ya3MvLi9zcmMvc3R5bGVzL1JvYm90by9mb250cy5jc3M/MWRjMCJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0dFVF9VUkxfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvZ2V0VXJsLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzBfX18gPSBuZXcgVVJMKFwiUm9ib3RvLVJlZ3VsYXIud29mZjJcIiwgaW1wb3J0Lm1ldGEudXJsKTtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfMV9fXyA9IG5ldyBVUkwoXCJSb2JvdG8tTWVkaXVtLndvZmYyXCIsIGltcG9ydC5tZXRhLnVybCk7XG52YXIgX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzJfX18gPSBuZXcgVVJMKFwiUm9ib3RvLUJvbGQud29mZjJcIiwgaW1wb3J0Lm1ldGEudXJsKTtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF8wX19fID0gX19fQ1NTX0xPQURFUl9HRVRfVVJMX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfMF9fXyk7XG52YXIgX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfMV9fXyA9IF9fX0NTU19MT0FERVJfR0VUX1VSTF9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzFfX18pO1xudmFyIF9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzJfX18gPSBfX19DU1NfTE9BREVSX0dFVF9VUkxfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF8yX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBgQGZvbnQtZmFjZSB7XHJcbiAgZm9udC1mYW1pbHk6ICdSb2JvdG8nO1xyXG4gIHNyYzogdXJsKCR7X19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfMF9fX30pIGZvcm1hdCgnd29mZjInKSw7XHJcbiAgZm9udC13ZWlnaHQ6IDQwMDtcclxuICBmb250LXN0eWxlOiBub3JtYWw7XHJcbiAgZm9udC1kaXNwbGF5OiBzd2FwO1xyXG59XHJcblxyXG5AZm9udC1mYWNlIHtcclxuICBmb250LWZhbWlseTogJ1JvYm90byc7XHJcbiAgc3JjOiB1cmwoJHtfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF8xX19ffSkgZm9ybWF0KCd3b2ZmMicpLDtcclxuICBmb250LXdlaWdodDogNTAwO1xyXG4gIGZvbnQtc3R5bGU6IG5vcm1hbDtcclxuICBmb250LWRpc3BsYXk6IHN3YXA7XHJcbn1cclxuXHJcbkBmb250LWZhY2Uge1xyXG4gIGZvbnQtZmFtaWx5OiAnUm9ib3RvJztcclxuICBzcmM6IHVybCgke19fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzJfX199KSBmb3JtYXQoJ3dvZmYyJyksO1xyXG4gIGZvbnQtd2VpZ2h0OiA3MDA7XHJcbiAgZm9udC1zdHlsZTogbm9ybWFsO1xyXG4gIGZvbnQtZGlzcGxheTogc3dhcDtcclxufVxyXG5gLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL3NyYy9zdHlsZXMvUm9ib3RvL2ZvbnRzLmNzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFBQTtFQUNFLHFCQUFxQjtFQUNyQiw2REFBaUQ7RUFDakQsZ0JBQWdCO0VBQ2hCLGtCQUFrQjtFQUNsQixrQkFBa0I7QUFDcEI7O0FBRUE7RUFDRSxxQkFBcUI7RUFDckIsNkRBQWdEO0VBQ2hELGdCQUFnQjtFQUNoQixrQkFBa0I7RUFDbEIsa0JBQWtCO0FBQ3BCOztBQUVBO0VBQ0UscUJBQXFCO0VBQ3JCLDZEQUE4QztFQUM5QyxnQkFBZ0I7RUFDaEIsa0JBQWtCO0VBQ2xCLGtCQUFrQjtBQUNwQlwiLFwic291cmNlc0NvbnRlbnRcIjpbXCJAZm9udC1mYWNlIHtcXHJcXG4gIGZvbnQtZmFtaWx5OiAnUm9ib3RvJztcXHJcXG4gIHNyYzogdXJsKCdSb2JvdG8tUmVndWxhci53b2ZmMicpIGZvcm1hdCgnd29mZjInKSw7XFxyXFxuICBmb250LXdlaWdodDogNDAwO1xcclxcbiAgZm9udC1zdHlsZTogbm9ybWFsO1xcclxcbiAgZm9udC1kaXNwbGF5OiBzd2FwO1xcclxcbn1cXHJcXG5cXHJcXG5AZm9udC1mYWNlIHtcXHJcXG4gIGZvbnQtZmFtaWx5OiAnUm9ib3RvJztcXHJcXG4gIHNyYzogdXJsKCdSb2JvdG8tTWVkaXVtLndvZmYyJykgZm9ybWF0KCd3b2ZmMicpLDtcXHJcXG4gIGZvbnQtd2VpZ2h0OiA1MDA7XFxyXFxuICBmb250LXN0eWxlOiBub3JtYWw7XFxyXFxuICBmb250LWRpc3BsYXk6IHN3YXA7XFxyXFxufVxcclxcblxcclxcbkBmb250LWZhY2Uge1xcclxcbiAgZm9udC1mYW1pbHk6ICdSb2JvdG8nO1xcclxcbiAgc3JjOiB1cmwoJ1JvYm90by1Cb2xkLndvZmYyJykgZm9ybWF0KCd3b2ZmMicpLDtcXHJcXG4gIGZvbnQtd2VpZ2h0OiA3MDA7XFxyXFxuICBmb250LXN0eWxlOiBub3JtYWw7XFxyXFxuICBmb250LWRpc3BsYXk6IHN3YXA7XFxyXFxufVxcclxcblwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///3898\n")},4066:(module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   A: () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(963);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(9089);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);\n// Imports\n\n\nvar ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, `.Login-module__login-page{margin:50px 100px 0 100px;display:flex;flex-direction:column;gap:24px;max-width:600px}.Login-module__login-page__form{display:flex;flex-direction:column;gap:12px}.Login-module__login-page__form__unit{display:flex;justify-content:start;gap:6px}.Login-module__login-page>button{width:fit-content}`, "",{"version":3,"sources":["webpack://./src/App/pages/Login/Login.module.scss"],"names":[],"mappings":"AAEA,0BAEI,yBAJgB,CAKhB,YAAA,CACA,qBAAA,CACA,QAAA,CACA,eAAA,CAEA,gCACI,YAAA,CACA,qBAAA,CACA,QAAA,CAEA,sCACI,YAAA,CACA,qBAAA,CACA,OAAA,CAIR,iCACI,iBAAA","sourcesContent":["$login-page-margin: 50px 100px 0 100px;\\r\\n\\r\\n.login-page {\\r\\n\\r\\n    margin: $login-page-margin;\\r\\n    display: flex;\\r\\n    flex-direction: column;\\r\\n    gap: 24px;\\r\\n    max-width: 600px;\\r\\n\\r\\n    &__form {\\r\\n        display: flex;\\r\\n        flex-direction: column;\\r\\n        gap: 12px;\\r\\n\\r\\n        &__unit {\\r\\n            display: flex;\\r\\n            justify-content: start;\\r\\n            gap: 6px;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    > button {\\r\\n        width: fit-content;\\r\\n    }\\r\\n}"],"sourceRoot":""}]);\n// Exports\n___CSS_LOADER_EXPORT___.locals = {\n\t"login-page": `Login-module__login-page`,\n\t"login-page__form": `Login-module__login-page__form`,\n\t"login-page__form__unit": `Login-module__login-page__form__unit`\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDA2Ni5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7QUFDbUg7QUFDakI7QUFDbEcsOEJBQThCLG1GQUEyQixDQUFDLDRGQUFxQztBQUMvRjtBQUNBLG9FQUFvRSwwQkFBMEIsYUFBYSxzQkFBc0IsU0FBUyxnQkFBZ0IsZ0NBQWdDLGFBQWEsc0JBQXNCLFNBQVMsc0NBQXNDLGFBQWEsc0JBQXNCLFFBQVEsaUNBQWlDLGtCQUFrQixPQUFPLHFUQUFxVCxxQkFBcUIsdUNBQXVDLHNCQUFzQiwrQkFBK0Isa0JBQWtCLHlCQUF5QixxQkFBcUIsMEJBQTBCLG1DQUFtQyxzQkFBc0IseUJBQXlCLDhCQUE4Qix1Q0FBdUMseUJBQXlCLGFBQWEsU0FBUyxzQkFBc0IsK0JBQStCLFNBQVMsS0FBSyxtQkFBbUI7QUFDN29DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlFQUFlLHVCQUF1QixFQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vMjAyNC1rdHNzdHVkaW8taG9tZXdvcmtzLy4vc3JjL0FwcC9wYWdlcy9Mb2dpbi9Mb2dpbi5tb2R1bGUuc2Nzcz9lOGVjIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIGAuTG9naW4tbW9kdWxlX19sb2dpbi1wYWdle21hcmdpbjo1MHB4IDEwMHB4IDAgMTAwcHg7ZGlzcGxheTpmbGV4O2ZsZXgtZGlyZWN0aW9uOmNvbHVtbjtnYXA6MjRweDttYXgtd2lkdGg6NjAwcHh9LkxvZ2luLW1vZHVsZV9fbG9naW4tcGFnZV9fZm9ybXtkaXNwbGF5OmZsZXg7ZmxleC1kaXJlY3Rpb246Y29sdW1uO2dhcDoxMnB4fS5Mb2dpbi1tb2R1bGVfX2xvZ2luLXBhZ2VfX2Zvcm1fX3VuaXR7ZGlzcGxheTpmbGV4O2p1c3RpZnktY29udGVudDpzdGFydDtnYXA6NnB4fS5Mb2dpbi1tb2R1bGVfX2xvZ2luLXBhZ2U+YnV0dG9ue3dpZHRoOmZpdC1jb250ZW50fWAsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vc3JjL0FwcC9wYWdlcy9Mb2dpbi9Mb2dpbi5tb2R1bGUuc2Nzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFFQSwwQkFFSSx5QkFKZ0IsQ0FLaEIsWUFBQSxDQUNBLHFCQUFBLENBQ0EsUUFBQSxDQUNBLGVBQUEsQ0FFQSxnQ0FDSSxZQUFBLENBQ0EscUJBQUEsQ0FDQSxRQUFBLENBRUEsc0NBQ0ksWUFBQSxDQUNBLHFCQUFBLENBQ0EsT0FBQSxDQUlSLGlDQUNJLGlCQUFBXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIiRsb2dpbi1wYWdlLW1hcmdpbjogNTBweCAxMDBweCAwIDEwMHB4O1xcclxcblxcclxcbi5sb2dpbi1wYWdlIHtcXHJcXG5cXHJcXG4gICAgbWFyZ2luOiAkbG9naW4tcGFnZS1tYXJnaW47XFxyXFxuICAgIGRpc3BsYXk6IGZsZXg7XFxyXFxuICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxyXFxuICAgIGdhcDogMjRweDtcXHJcXG4gICAgbWF4LXdpZHRoOiA2MDBweDtcXHJcXG5cXHJcXG4gICAgJl9fZm9ybSB7XFxyXFxuICAgICAgICBkaXNwbGF5OiBmbGV4O1xcclxcbiAgICAgICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXHJcXG4gICAgICAgIGdhcDogMTJweDtcXHJcXG5cXHJcXG4gICAgICAgICZfX3VuaXQge1xcclxcbiAgICAgICAgICAgIGRpc3BsYXk6IGZsZXg7XFxyXFxuICAgICAgICAgICAganVzdGlmeS1jb250ZW50OiBzdGFydDtcXHJcXG4gICAgICAgICAgICBnYXA6IDZweDtcXHJcXG4gICAgICAgIH1cXHJcXG4gICAgfVxcclxcblxcclxcbiAgICA+IGJ1dHRvbiB7XFxyXFxuICAgICAgICB3aWR0aDogZml0LWNvbnRlbnQ7XFxyXFxuICAgIH1cXHJcXG59XCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5sb2NhbHMgPSB7XG5cdFwibG9naW4tcGFnZVwiOiBgTG9naW4tbW9kdWxlX19sb2dpbi1wYWdlYCxcblx0XCJsb2dpbi1wYWdlX19mb3JtXCI6IGBMb2dpbi1tb2R1bGVfX2xvZ2luLXBhZ2VfX2Zvcm1gLFxuXHRcImxvZ2luLXBhZ2VfX2Zvcm1fX3VuaXRcIjogYExvZ2luLW1vZHVsZV9fbG9naW4tcGFnZV9fZm9ybV9fdW5pdGBcbn07XG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///4066\n')},8252:(module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   A: () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(963);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(9089);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);\n// Imports\n\n\nvar ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, `.MealPlanning-module__mealplanning-page{display:flex;flex-direction:column;justify-content:center;align-items:center;align-content:center;gap:50px;margin-top:70px}.MealPlanning-module__mealplanning-page button{width:fit-content}.MealPlanning-module__mealplanning-page__form{display:flex;justify-content:center;gap:12px}`, "",{"version":3,"sources":["webpack://./src/App/pages/MealPlanning/MealPlanning.module.scss"],"names":[],"mappings":"AAAA,wCACI,YAAA,CACA,qBAAA,CACA,sBAAA,CACA,kBAAA,CACA,oBAAA,CACA,QAAA,CACA,eAAA,CAEA,+CACI,iBAAA,CAGJ,8CACI,YAAA,CACA,sBAAA,CACA,QAAA","sourcesContent":[".mealplanning-page {\\r\\n    display: flex;\\r\\n    flex-direction: column;\\r\\n    justify-content: center;\\r\\n    align-items: center;\\r\\n    align-content: center;\\r\\n    gap: 50px;\\r\\n    margin-top: 70px;\\r\\n\\r\\n    button {\\r\\n        width: fit-content;\\r\\n    }\\r\\n\\r\\n    &__form {\\r\\n        display: flex;\\r\\n        justify-content: center;\\r\\n        gap: 12px;\\r\\n    }\\r\\n}"],"sourceRoot":""}]);\n// Exports\n___CSS_LOADER_EXPORT___.locals = {\n\t"mealplanning-page": `MealPlanning-module__mealplanning-page`,\n\t"mealplanning-page__form": `MealPlanning-module__mealplanning-page__form`\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiODI1Mi5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7QUFDbUg7QUFDakI7QUFDbEcsOEJBQThCLG1GQUEyQixDQUFDLDRGQUFxQztBQUMvRjtBQUNBLGtGQUFrRixhQUFhLHNCQUFzQix1QkFBdUIsbUJBQW1CLHFCQUFxQixTQUFTLGdCQUFnQiwrQ0FBK0Msa0JBQWtCLDhDQUE4QyxhQUFhLHVCQUF1QixTQUFTLE9BQU8sK1JBQStSLHNCQUFzQiwrQkFBK0IsZ0NBQWdDLDRCQUE0Qiw4QkFBOEIsa0JBQWtCLHlCQUF5QixvQkFBb0IsK0JBQStCLFNBQVMscUJBQXFCLDBCQUEwQixvQ0FBb0Msc0JBQXNCLFNBQVMsS0FBSyxtQkFBbUI7QUFDL2dDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpRUFBZSx1QkFBdUIsRUFBQyIsInNvdXJjZXMiOlsid2VicGFjazovLzIwMjQta3Rzc3R1ZGlvLWhvbWV3b3Jrcy8uL3NyYy9BcHAvcGFnZXMvTWVhbFBsYW5uaW5nL01lYWxQbGFubmluZy5tb2R1bGUuc2Nzcz9iMzg4Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIGAuTWVhbFBsYW5uaW5nLW1vZHVsZV9fbWVhbHBsYW5uaW5nLXBhZ2V7ZGlzcGxheTpmbGV4O2ZsZXgtZGlyZWN0aW9uOmNvbHVtbjtqdXN0aWZ5LWNvbnRlbnQ6Y2VudGVyO2FsaWduLWl0ZW1zOmNlbnRlcjthbGlnbi1jb250ZW50OmNlbnRlcjtnYXA6NTBweDttYXJnaW4tdG9wOjcwcHh9Lk1lYWxQbGFubmluZy1tb2R1bGVfX21lYWxwbGFubmluZy1wYWdlIGJ1dHRvbnt3aWR0aDpmaXQtY29udGVudH0uTWVhbFBsYW5uaW5nLW1vZHVsZV9fbWVhbHBsYW5uaW5nLXBhZ2VfX2Zvcm17ZGlzcGxheTpmbGV4O2p1c3RpZnktY29udGVudDpjZW50ZXI7Z2FwOjEycHh9YCwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9zcmMvQXBwL3BhZ2VzL01lYWxQbGFubmluZy9NZWFsUGxhbm5pbmcubW9kdWxlLnNjc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBQUEsd0NBQ0ksWUFBQSxDQUNBLHFCQUFBLENBQ0Esc0JBQUEsQ0FDQSxrQkFBQSxDQUNBLG9CQUFBLENBQ0EsUUFBQSxDQUNBLGVBQUEsQ0FFQSwrQ0FDSSxpQkFBQSxDQUdKLDhDQUNJLFlBQUEsQ0FDQSxzQkFBQSxDQUNBLFFBQUFcIixcInNvdXJjZXNDb250ZW50XCI6W1wiLm1lYWxwbGFubmluZy1wYWdlIHtcXHJcXG4gICAgZGlzcGxheTogZmxleDtcXHJcXG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXHJcXG4gICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxyXFxuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxyXFxuICAgIGFsaWduLWNvbnRlbnQ6IGNlbnRlcjtcXHJcXG4gICAgZ2FwOiA1MHB4O1xcclxcbiAgICBtYXJnaW4tdG9wOiA3MHB4O1xcclxcblxcclxcbiAgICBidXR0b24ge1xcclxcbiAgICAgICAgd2lkdGg6IGZpdC1jb250ZW50O1xcclxcbiAgICB9XFxyXFxuXFxyXFxuICAgICZfX2Zvcm0ge1xcclxcbiAgICAgICAgZGlzcGxheTogZmxleDtcXHJcXG4gICAgICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xcclxcbiAgICAgICAgZ2FwOiAxMnB4O1xcclxcbiAgICB9XFxyXFxufVwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ubG9jYWxzID0ge1xuXHRcIm1lYWxwbGFubmluZy1wYWdlXCI6IGBNZWFsUGxhbm5pbmctbW9kdWxlX19tZWFscGxhbm5pbmctcGFnZWAsXG5cdFwibWVhbHBsYW5uaW5nLXBhZ2VfX2Zvcm1cIjogYE1lYWxQbGFubmluZy1tb2R1bGVfX21lYWxwbGFubmluZy1wYWdlX19mb3JtYFxufTtcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///8252\n')},1158:(module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   A: () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(963);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(9089);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);\n// Imports\n\n\nvar ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, `.DayInfo-module__day-info{width:100%;text-align:center}.DayInfo-module__day-info__name{padding:6px}.DayInfo-module__day-info__slots{background-color:#fff;padding:6px}.DayInfo-module__day-info__summary{text-align:left;bottom:0;background-color:#afadb5;color:#fff;padding:6px}`, "",{"version":3,"sources":["webpack://./src/App/pages/MealPlanning/components/DayInfo/DayInfo.module.scss","webpack://./src/styles/variables.scss"],"names":[],"mappings":"AAIA,0BAEI,UAAA,CACA,iBAAA,CAEA,gCACI,WARM,CAWV,iCACI,qBCTA,CDUA,WAbM,CAgBV,mCACI,eAAA,CACA,QAAA,CACA,wBCfD,CDgBC,UCjBA,CDkBA,WArBM","sourcesContent":["@use \'styles/variables.scss\' as var;\\r\\n\\r\\n$day-padding: 6px;\\r\\n\\r\\n.day-info {\\r\\n\\r\\n    width: 100%;\\r\\n    text-align: center;\\r\\n\\r\\n    &__name {\\r\\n        padding: $day-padding;\\r\\n    }\\r\\n\\r\\n    &__slots {\\r\\n        background-color: var.$light;\\r\\n        padding: $day-padding;\\r\\n    }\\r\\n\\r\\n    &__summary {\\r\\n        text-align: left;\\r\\n        bottom: 0;\\r\\n        background-color: var.$gray;\\r\\n        color: var.$light;\\r\\n        padding: $day-padding;\\r\\n    }\\r\\n}","$brand: #B5460F;\\r\\n$brand-hover: rgba(181, 70, 15, 0.7);\\r\\n$brand-active: #872D01;\\r\\n\\r\\n$dark: black; \\r\\n$light: white;\\r\\n$gray: #AFADB5;\\r\\n\\r\\n$border-radius: 10px;\\r\\n\\r\\n$space-xl: 24px;\\r\\n$space-l: 20px;\\r\\n$space-m: 16px;\\r\\n$space-s: 14px;\\r\\n$space-xs: 12px;\\r\\n$space-xxs: 8px;"],"sourceRoot":""}]);\n// Exports\n___CSS_LOADER_EXPORT___.locals = {\n\t"day-info": `DayInfo-module__day-info`,\n\t"day-info__name": `DayInfo-module__day-info__name`,\n\t"day-info__slots": `DayInfo-module__day-info__slots`,\n\t"day-info__summary": `DayInfo-module__day-info__summary`\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTE1OC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7QUFDeUg7QUFDakI7QUFDeEcsOEJBQThCLG1GQUEyQixDQUFDLDRGQUFxQztBQUMvRjtBQUNBLG9FQUFvRSxXQUFXLGtCQUFrQixnQ0FBZ0MsWUFBWSxpQ0FBaUMsc0JBQXNCLFlBQVksbUNBQW1DLGdCQUFnQixTQUFTLHlCQUF5QixXQUFXLFlBQVksT0FBTyxtV0FBbVcsMEJBQTBCLG1CQUFtQix3QkFBd0IsMkJBQTJCLHFCQUFxQixrQ0FBa0MsU0FBUyxzQkFBc0IseUNBQXlDLGtDQUFrQyxTQUFTLHdCQUF3Qiw2QkFBNkIsc0JBQXNCLHdDQUF3Qyw4QkFBOEIsa0NBQWtDLFNBQVMsS0FBSyxtQkFBbUIseUNBQXlDLDJCQUEyQixzQkFBc0Isa0JBQWtCLG1CQUFtQiw2QkFBNkIsd0JBQXdCLG1CQUFtQixtQkFBbUIsbUJBQW1CLG9CQUFvQixvQkFBb0IsbUJBQW1CO0FBQzU2QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlFQUFlLHVCQUF1QixFQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vMjAyNC1rdHNzdHVkaW8taG9tZXdvcmtzLy4vc3JjL0FwcC9wYWdlcy9NZWFsUGxhbm5pbmcvY29tcG9uZW50cy9EYXlJbmZvL0RheUluZm8ubW9kdWxlLnNjc3M/ZjRmZiJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBgLkRheUluZm8tbW9kdWxlX19kYXktaW5mb3t3aWR0aDoxMDAlO3RleHQtYWxpZ246Y2VudGVyfS5EYXlJbmZvLW1vZHVsZV9fZGF5LWluZm9fX25hbWV7cGFkZGluZzo2cHh9LkRheUluZm8tbW9kdWxlX19kYXktaW5mb19fc2xvdHN7YmFja2dyb3VuZC1jb2xvcjojZmZmO3BhZGRpbmc6NnB4fS5EYXlJbmZvLW1vZHVsZV9fZGF5LWluZm9fX3N1bW1hcnl7dGV4dC1hbGlnbjpsZWZ0O2JvdHRvbTowO2JhY2tncm91bmQtY29sb3I6I2FmYWRiNTtjb2xvcjojZmZmO3BhZGRpbmc6NnB4fWAsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vc3JjL0FwcC9wYWdlcy9NZWFsUGxhbm5pbmcvY29tcG9uZW50cy9EYXlJbmZvL0RheUluZm8ubW9kdWxlLnNjc3NcIixcIndlYnBhY2s6Ly8uL3NyYy9zdHlsZXMvdmFyaWFibGVzLnNjc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBSUEsMEJBRUksVUFBQSxDQUNBLGlCQUFBLENBRUEsZ0NBQ0ksV0FSTSxDQVdWLGlDQUNJLHFCQ1RBLENEVUEsV0FiTSxDQWdCVixtQ0FDSSxlQUFBLENBQ0EsUUFBQSxDQUNBLHdCQ2ZELENEZ0JDLFVDakJBLENEa0JBLFdBckJNXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIkB1c2UgJ3N0eWxlcy92YXJpYWJsZXMuc2NzcycgYXMgdmFyO1xcclxcblxcclxcbiRkYXktcGFkZGluZzogNnB4O1xcclxcblxcclxcbi5kYXktaW5mbyB7XFxyXFxuXFxyXFxuICAgIHdpZHRoOiAxMDAlO1xcclxcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxyXFxuXFxyXFxuICAgICZfX25hbWUge1xcclxcbiAgICAgICAgcGFkZGluZzogJGRheS1wYWRkaW5nO1xcclxcbiAgICB9XFxyXFxuXFxyXFxuICAgICZfX3Nsb3RzIHtcXHJcXG4gICAgICAgIGJhY2tncm91bmQtY29sb3I6IHZhci4kbGlnaHQ7XFxyXFxuICAgICAgICBwYWRkaW5nOiAkZGF5LXBhZGRpbmc7XFxyXFxuICAgIH1cXHJcXG5cXHJcXG4gICAgJl9fc3VtbWFyeSB7XFxyXFxuICAgICAgICB0ZXh0LWFsaWduOiBsZWZ0O1xcclxcbiAgICAgICAgYm90dG9tOiAwO1xcclxcbiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogdmFyLiRncmF5O1xcclxcbiAgICAgICAgY29sb3I6IHZhci4kbGlnaHQ7XFxyXFxuICAgICAgICBwYWRkaW5nOiAkZGF5LXBhZGRpbmc7XFxyXFxuICAgIH1cXHJcXG59XCIsXCIkYnJhbmQ6ICNCNTQ2MEY7XFxyXFxuJGJyYW5kLWhvdmVyOiByZ2JhKDE4MSwgNzAsIDE1LCAwLjcpO1xcclxcbiRicmFuZC1hY3RpdmU6ICM4NzJEMDE7XFxyXFxuXFxyXFxuJGRhcms6IGJsYWNrOyBcXHJcXG4kbGlnaHQ6IHdoaXRlO1xcclxcbiRncmF5OiAjQUZBREI1O1xcclxcblxcclxcbiRib3JkZXItcmFkaXVzOiAxMHB4O1xcclxcblxcclxcbiRzcGFjZS14bDogMjRweDtcXHJcXG4kc3BhY2UtbDogMjBweDtcXHJcXG4kc3BhY2UtbTogMTZweDtcXHJcXG4kc3BhY2UtczogMTRweDtcXHJcXG4kc3BhY2UteHM6IDEycHg7XFxyXFxuJHNwYWNlLXh4czogOHB4O1wiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ubG9jYWxzID0ge1xuXHRcImRheS1pbmZvXCI6IGBEYXlJbmZvLW1vZHVsZV9fZGF5LWluZm9gLFxuXHRcImRheS1pbmZvX19uYW1lXCI6IGBEYXlJbmZvLW1vZHVsZV9fZGF5LWluZm9fX25hbWVgLFxuXHRcImRheS1pbmZvX19zbG90c1wiOiBgRGF5SW5mby1tb2R1bGVfX2RheS1pbmZvX19zbG90c2AsXG5cdFwiZGF5LWluZm9fX3N1bW1hcnlcIjogYERheUluZm8tbW9kdWxlX19kYXktaW5mb19fc3VtbWFyeWBcbn07XG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///1158\n')},3748:(module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   A: () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(963);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(9089);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);\n// Imports\n\n\nvar ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, `.SlotInfo-module__slot-info{background-color:#fff;padding:6px}.SlotInfo-module__slot-info__item img{max-width:100%}.SlotInfo-module__slot-info__item__ingr img{max-width:100%}`, "",{"version":3,"sources":["webpack://./src/App/pages/MealPlanning/components/SlotInfo/SlotInfo.module.scss","webpack://./src/styles/variables.scss"],"names":[],"mappings":"AAEA,4BACI,qBCEI,CDDJ,WAAA,CAGI,sCACI,cAAA,CAIA,4CACI,cAAA","sourcesContent":["@use \'styles/variables.scss\' as var;\\r\\n\\r\\n.slot-info {\\r\\n    background-color: var.$light;\\r\\n    padding: 6px;\\r\\n\\r\\n    &__item {\\r\\n        img {\\r\\n            max-width: 100%;\\r\\n        }\\r\\n\\r\\n        &__ingr {\\r\\n            img {\\r\\n                max-width: 100%;\\r\\n            }\\r\\n        }    \\r\\n    }\\r\\n}","$brand: #B5460F;\\r\\n$brand-hover: rgba(181, 70, 15, 0.7);\\r\\n$brand-active: #872D01;\\r\\n\\r\\n$dark: black; \\r\\n$light: white;\\r\\n$gray: #AFADB5;\\r\\n\\r\\n$border-radius: 10px;\\r\\n\\r\\n$space-xl: 24px;\\r\\n$space-l: 20px;\\r\\n$space-m: 16px;\\r\\n$space-s: 14px;\\r\\n$space-xs: 12px;\\r\\n$space-xxs: 8px;"],"sourceRoot":""}]);\n// Exports\n___CSS_LOADER_EXPORT___.locals = {\n\t"slot-info": `SlotInfo-module__slot-info`,\n\t"slot-info__item": `SlotInfo-module__slot-info__item`,\n\t"slot-info__item__ingr": `SlotInfo-module__slot-info__item__ingr`\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzc0OC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7QUFDeUg7QUFDakI7QUFDeEcsOEJBQThCLG1GQUEyQixDQUFDLDRGQUFxQztBQUMvRjtBQUNBLHNFQUFzRSxzQkFBc0IsWUFBWSxzQ0FBc0MsZUFBZSw0Q0FBNEMsZUFBZSxPQUFPLDRSQUE0UixvQkFBb0IscUNBQXFDLHFCQUFxQixxQkFBcUIsaUJBQWlCLGdDQUFnQyxhQUFhLHlCQUF5QixxQkFBcUIsb0NBQW9DLGlCQUFpQixpQkFBaUIsU0FBUyxLQUFLLG1CQUFtQix5Q0FBeUMsMkJBQTJCLHNCQUFzQixrQkFBa0IsbUJBQW1CLDZCQUE2Qix3QkFBd0IsbUJBQW1CLG1CQUFtQixtQkFBbUIsb0JBQW9CLG9CQUFvQixtQkFBbUI7QUFDemxDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlFQUFlLHVCQUF1QixFQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vMjAyNC1rdHNzdHVkaW8taG9tZXdvcmtzLy4vc3JjL0FwcC9wYWdlcy9NZWFsUGxhbm5pbmcvY29tcG9uZW50cy9TbG90SW5mby9TbG90SW5mby5tb2R1bGUuc2Nzcz8zODBjIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIGAuU2xvdEluZm8tbW9kdWxlX19zbG90LWluZm97YmFja2dyb3VuZC1jb2xvcjojZmZmO3BhZGRpbmc6NnB4fS5TbG90SW5mby1tb2R1bGVfX3Nsb3QtaW5mb19faXRlbSBpbWd7bWF4LXdpZHRoOjEwMCV9LlNsb3RJbmZvLW1vZHVsZV9fc2xvdC1pbmZvX19pdGVtX19pbmdyIGltZ3ttYXgtd2lkdGg6MTAwJX1gLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL3NyYy9BcHAvcGFnZXMvTWVhbFBsYW5uaW5nL2NvbXBvbmVudHMvU2xvdEluZm8vU2xvdEluZm8ubW9kdWxlLnNjc3NcIixcIndlYnBhY2s6Ly8uL3NyYy9zdHlsZXMvdmFyaWFibGVzLnNjc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBRUEsNEJBQ0kscUJDRUksQ0RESixXQUFBLENBR0ksc0NBQ0ksY0FBQSxDQUlBLDRDQUNJLGNBQUFcIixcInNvdXJjZXNDb250ZW50XCI6W1wiQHVzZSAnc3R5bGVzL3ZhcmlhYmxlcy5zY3NzJyBhcyB2YXI7XFxyXFxuXFxyXFxuLnNsb3QtaW5mbyB7XFxyXFxuICAgIGJhY2tncm91bmQtY29sb3I6IHZhci4kbGlnaHQ7XFxyXFxuICAgIHBhZGRpbmc6IDZweDtcXHJcXG5cXHJcXG4gICAgJl9faXRlbSB7XFxyXFxuICAgICAgICBpbWcge1xcclxcbiAgICAgICAgICAgIG1heC13aWR0aDogMTAwJTtcXHJcXG4gICAgICAgIH1cXHJcXG5cXHJcXG4gICAgICAgICZfX2luZ3Ige1xcclxcbiAgICAgICAgICAgIGltZyB7XFxyXFxuICAgICAgICAgICAgICAgIG1heC13aWR0aDogMTAwJTtcXHJcXG4gICAgICAgICAgICB9XFxyXFxuICAgICAgICB9ICAgIFxcclxcbiAgICB9XFxyXFxufVwiLFwiJGJyYW5kOiAjQjU0NjBGO1xcclxcbiRicmFuZC1ob3ZlcjogcmdiYSgxODEsIDcwLCAxNSwgMC43KTtcXHJcXG4kYnJhbmQtYWN0aXZlOiAjODcyRDAxO1xcclxcblxcclxcbiRkYXJrOiBibGFjazsgXFxyXFxuJGxpZ2h0OiB3aGl0ZTtcXHJcXG4kZ3JheTogI0FGQURCNTtcXHJcXG5cXHJcXG4kYm9yZGVyLXJhZGl1czogMTBweDtcXHJcXG5cXHJcXG4kc3BhY2UteGw6IDI0cHg7XFxyXFxuJHNwYWNlLWw6IDIwcHg7XFxyXFxuJHNwYWNlLW06IDE2cHg7XFxyXFxuJHNwYWNlLXM6IDE0cHg7XFxyXFxuJHNwYWNlLXhzOiAxMnB4O1xcclxcbiRzcGFjZS14eHM6IDhweDtcIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLmxvY2FscyA9IHtcblx0XCJzbG90LWluZm9cIjogYFNsb3RJbmZvLW1vZHVsZV9fc2xvdC1pbmZvYCxcblx0XCJzbG90LWluZm9fX2l0ZW1cIjogYFNsb3RJbmZvLW1vZHVsZV9fc2xvdC1pbmZvX19pdGVtYCxcblx0XCJzbG90LWluZm9fX2l0ZW1fX2luZ3JcIjogYFNsb3RJbmZvLW1vZHVsZV9fc2xvdC1pbmZvX19pdGVtX19pbmdyYFxufTtcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///3748\n')},2040:(module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   A: () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(963);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(9089);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);\n// Imports\n\n\nvar ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, `.WeekInfo-module__week-info{width:80%;background-color:#fff;position:relative;margin:0 auto;margin-bottom:50px}.WeekInfo-module__week-info__header{width:100%;background-color:#b5460f;padding:8px;text-align:center;color:#fff}.WeekInfo-module__week-info__days{width:100%;display:grid;grid-template-rows:repeat(4, min-content) 100px;grid-auto-flow:column;grid-auto-rows:max-content;align-items:stretch;border-left:1px dashed #b5460f;border-top:1px dashed #b5460f}.WeekInfo-module__week-info__days>div{border-right:1px dashed #b5460f;border-bottom:1px dashed #b5460f}`, "",{"version":3,"sources":["webpack://./src/App/pages/MealPlanning/components/WeekInfo/WeekInfo.module.scss","webpack://./src/styles/variables.scss"],"names":[],"mappings":"AAIA,4BACI,SAAA,CACA,qBCDI,CDEJ,iBAAA,CACA,aAAA,CACA,kBAAA,CAEA,oCACI,UAAA,CACA,wBCbA,CDcA,WAAA,CACA,iBAAA,CACA,UCXA,CDcJ,kCACI,UAAA,CACA,YAAA,CACA,+CAAA,CACA,qBAAA,CACA,0BAAA,CACA,mBAAA,CAEA,8BAzBC,CA0BD,6BA1BC,CA4BD,sCACI,+BA7BH,CA8BG,gCA9BH","sourcesContent":["@use \'styles/variables.scss\' as var;\\r\\n\\r\\n$border: 1px dashed var.$brand;\\r\\n\\r\\n.week-info {\\r\\n    width: 80%;\\r\\n    background-color: var.$light;\\r\\n    position: relative;\\r\\n    margin: 0 auto;\\r\\n    margin-bottom: 50px;\\r\\n\\r\\n    &__header {\\r\\n        width: 100%;\\r\\n        background-color: var.$brand;\\r\\n        padding: 8px;\\r\\n        text-align: center;\\r\\n        color: var.$light;\\r\\n    }\\r\\n\\r\\n    &__days {\\r\\n        width: 100%;\\r\\n        display: grid;\\r\\n        grid-template-rows: repeat(4, min-content) 100px;\\r\\n        grid-auto-flow: column;\\r\\n        grid-auto-rows: max-content;\\r\\n        align-items: stretch;\\r\\n\\r\\n        border-left: $border;\\r\\n        border-top: $border;\\r\\n\\r\\n        > div {\\r\\n            border-right: $border;\\r\\n            border-bottom: $border;\\r\\n        }\\r\\n    }\\r\\n}","$brand: #B5460F;\\r\\n$brand-hover: rgba(181, 70, 15, 0.7);\\r\\n$brand-active: #872D01;\\r\\n\\r\\n$dark: black; \\r\\n$light: white;\\r\\n$gray: #AFADB5;\\r\\n\\r\\n$border-radius: 10px;\\r\\n\\r\\n$space-xl: 24px;\\r\\n$space-l: 20px;\\r\\n$space-m: 16px;\\r\\n$space-s: 14px;\\r\\n$space-xs: 12px;\\r\\n$space-xxs: 8px;"],"sourceRoot":""}]);\n// Exports\n___CSS_LOADER_EXPORT___.locals = {\n\t"week-info": `WeekInfo-module__week-info`,\n\t"week-info__header": `WeekInfo-module__week-info__header`,\n\t"week-info__days": `WeekInfo-module__week-info__days`\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjA0MC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7QUFDeUg7QUFDakI7QUFDeEcsOEJBQThCLG1GQUEyQixDQUFDLDRGQUFxQztBQUMvRjtBQUNBLHNFQUFzRSxVQUFVLHNCQUFzQixrQkFBa0IsY0FBYyxtQkFBbUIsb0NBQW9DLFdBQVcseUJBQXlCLFlBQVksa0JBQWtCLFdBQVcsa0NBQWtDLFdBQVcsYUFBYSxnREFBZ0Qsc0JBQXNCLDJCQUEyQixvQkFBb0IsK0JBQStCLDhCQUE4QixzQ0FBc0MsZ0NBQWdDLGlDQUFpQyxPQUFPLHFkQUFxZCx1Q0FBdUMsb0JBQW9CLG1CQUFtQixxQ0FBcUMsMkJBQTJCLHVCQUF1Qiw0QkFBNEIsdUJBQXVCLHdCQUF3Qix5Q0FBeUMseUJBQXlCLCtCQUErQiw4QkFBOEIsU0FBUyxxQkFBcUIsd0JBQXdCLDBCQUEwQiw2REFBNkQsbUNBQW1DLHdDQUF3QyxpQ0FBaUMscUNBQXFDLGdDQUFnQyx1QkFBdUIsc0NBQXNDLHVDQUF1QyxhQUFhLFNBQVMsS0FBSyxtQkFBbUIseUNBQXlDLDJCQUEyQixzQkFBc0Isa0JBQWtCLG1CQUFtQiw2QkFBNkIsd0JBQXdCLG1CQUFtQixtQkFBbUIsbUJBQW1CLG9CQUFvQixvQkFBb0IsbUJBQW1CO0FBQ2hxRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpRUFBZSx1QkFBdUIsRUFBQyIsInNvdXJjZXMiOlsid2VicGFjazovLzIwMjQta3Rzc3R1ZGlvLWhvbWV3b3Jrcy8uL3NyYy9BcHAvcGFnZXMvTWVhbFBsYW5uaW5nL2NvbXBvbmVudHMvV2Vla0luZm8vV2Vla0luZm8ubW9kdWxlLnNjc3M/OGY3ZSJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBgLldlZWtJbmZvLW1vZHVsZV9fd2Vlay1pbmZve3dpZHRoOjgwJTtiYWNrZ3JvdW5kLWNvbG9yOiNmZmY7cG9zaXRpb246cmVsYXRpdmU7bWFyZ2luOjAgYXV0bzttYXJnaW4tYm90dG9tOjUwcHh9LldlZWtJbmZvLW1vZHVsZV9fd2Vlay1pbmZvX19oZWFkZXJ7d2lkdGg6MTAwJTtiYWNrZ3JvdW5kLWNvbG9yOiNiNTQ2MGY7cGFkZGluZzo4cHg7dGV4dC1hbGlnbjpjZW50ZXI7Y29sb3I6I2ZmZn0uV2Vla0luZm8tbW9kdWxlX193ZWVrLWluZm9fX2RheXN7d2lkdGg6MTAwJTtkaXNwbGF5OmdyaWQ7Z3JpZC10ZW1wbGF0ZS1yb3dzOnJlcGVhdCg0LCBtaW4tY29udGVudCkgMTAwcHg7Z3JpZC1hdXRvLWZsb3c6Y29sdW1uO2dyaWQtYXV0by1yb3dzOm1heC1jb250ZW50O2FsaWduLWl0ZW1zOnN0cmV0Y2g7Ym9yZGVyLWxlZnQ6MXB4IGRhc2hlZCAjYjU0NjBmO2JvcmRlci10b3A6MXB4IGRhc2hlZCAjYjU0NjBmfS5XZWVrSW5mby1tb2R1bGVfX3dlZWstaW5mb19fZGF5cz5kaXZ7Ym9yZGVyLXJpZ2h0OjFweCBkYXNoZWQgI2I1NDYwZjtib3JkZXItYm90dG9tOjFweCBkYXNoZWQgI2I1NDYwZn1gLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL3NyYy9BcHAvcGFnZXMvTWVhbFBsYW5uaW5nL2NvbXBvbmVudHMvV2Vla0luZm8vV2Vla0luZm8ubW9kdWxlLnNjc3NcIixcIndlYnBhY2s6Ly8uL3NyYy9zdHlsZXMvdmFyaWFibGVzLnNjc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBSUEsNEJBQ0ksU0FBQSxDQUNBLHFCQ0RJLENERUosaUJBQUEsQ0FDQSxhQUFBLENBQ0Esa0JBQUEsQ0FFQSxvQ0FDSSxVQUFBLENBQ0Esd0JDYkEsQ0RjQSxXQUFBLENBQ0EsaUJBQUEsQ0FDQSxVQ1hBLENEY0osa0NBQ0ksVUFBQSxDQUNBLFlBQUEsQ0FDQSwrQ0FBQSxDQUNBLHFCQUFBLENBQ0EsMEJBQUEsQ0FDQSxtQkFBQSxDQUVBLDhCQXpCQyxDQTBCRCw2QkExQkMsQ0E0QkQsc0NBQ0ksK0JBN0JILENBOEJHLGdDQTlCSFwiLFwic291cmNlc0NvbnRlbnRcIjpbXCJAdXNlICdzdHlsZXMvdmFyaWFibGVzLnNjc3MnIGFzIHZhcjtcXHJcXG5cXHJcXG4kYm9yZGVyOiAxcHggZGFzaGVkIHZhci4kYnJhbmQ7XFxyXFxuXFxyXFxuLndlZWstaW5mbyB7XFxyXFxuICAgIHdpZHRoOiA4MCU7XFxyXFxuICAgIGJhY2tncm91bmQtY29sb3I6IHZhci4kbGlnaHQ7XFxyXFxuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcXHJcXG4gICAgbWFyZ2luOiAwIGF1dG87XFxyXFxuICAgIG1hcmdpbi1ib3R0b206IDUwcHg7XFxyXFxuXFxyXFxuICAgICZfX2hlYWRlciB7XFxyXFxuICAgICAgICB3aWR0aDogMTAwJTtcXHJcXG4gICAgICAgIGJhY2tncm91bmQtY29sb3I6IHZhci4kYnJhbmQ7XFxyXFxuICAgICAgICBwYWRkaW5nOiA4cHg7XFxyXFxuICAgICAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxyXFxuICAgICAgICBjb2xvcjogdmFyLiRsaWdodDtcXHJcXG4gICAgfVxcclxcblxcclxcbiAgICAmX19kYXlzIHtcXHJcXG4gICAgICAgIHdpZHRoOiAxMDAlO1xcclxcbiAgICAgICAgZGlzcGxheTogZ3JpZDtcXHJcXG4gICAgICAgIGdyaWQtdGVtcGxhdGUtcm93czogcmVwZWF0KDQsIG1pbi1jb250ZW50KSAxMDBweDtcXHJcXG4gICAgICAgIGdyaWQtYXV0by1mbG93OiBjb2x1bW47XFxyXFxuICAgICAgICBncmlkLWF1dG8tcm93czogbWF4LWNvbnRlbnQ7XFxyXFxuICAgICAgICBhbGlnbi1pdGVtczogc3RyZXRjaDtcXHJcXG5cXHJcXG4gICAgICAgIGJvcmRlci1sZWZ0OiAkYm9yZGVyO1xcclxcbiAgICAgICAgYm9yZGVyLXRvcDogJGJvcmRlcjtcXHJcXG5cXHJcXG4gICAgICAgID4gZGl2IHtcXHJcXG4gICAgICAgICAgICBib3JkZXItcmlnaHQ6ICRib3JkZXI7XFxyXFxuICAgICAgICAgICAgYm9yZGVyLWJvdHRvbTogJGJvcmRlcjtcXHJcXG4gICAgICAgIH1cXHJcXG4gICAgfVxcclxcbn1cIixcIiRicmFuZDogI0I1NDYwRjtcXHJcXG4kYnJhbmQtaG92ZXI6IHJnYmEoMTgxLCA3MCwgMTUsIDAuNyk7XFxyXFxuJGJyYW5kLWFjdGl2ZTogIzg3MkQwMTtcXHJcXG5cXHJcXG4kZGFyazogYmxhY2s7IFxcclxcbiRsaWdodDogd2hpdGU7XFxyXFxuJGdyYXk6ICNBRkFEQjU7XFxyXFxuXFxyXFxuJGJvcmRlci1yYWRpdXM6IDEwcHg7XFxyXFxuXFxyXFxuJHNwYWNlLXhsOiAyNHB4O1xcclxcbiRzcGFjZS1sOiAyMHB4O1xcclxcbiRzcGFjZS1tOiAxNnB4O1xcclxcbiRzcGFjZS1zOiAxNHB4O1xcclxcbiRzcGFjZS14czogMTJweDtcXHJcXG4kc3BhY2UteHhzOiA4cHg7XCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5sb2NhbHMgPSB7XG5cdFwid2Vlay1pbmZvXCI6IGBXZWVrSW5mby1tb2R1bGVfX3dlZWstaW5mb2AsXG5cdFwid2Vlay1pbmZvX19oZWFkZXJcIjogYFdlZWtJbmZvLW1vZHVsZV9fd2Vlay1pbmZvX19oZWFkZXJgLFxuXHRcIndlZWstaW5mb19fZGF5c1wiOiBgV2Vla0luZm8tbW9kdWxlX193ZWVrLWluZm9fX2RheXNgXG59O1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///2040\n')},5308:(module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   A: () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(963);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(9089);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);\n// Imports\n\n\nvar ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, `.Recipe-module__recipe{margin:0 100px 0 100px}.Recipe-module__recipe__header{margin-top:49px;display:flex;align-content:center;align-items:center;gap:16px;margin-bottom:37px}.Recipe-module__recipe__box{display:flex;flex-direction:column;gap:48px}.Recipe-module__recipe__box__description{width:100%;border-radius:10px;padding:36px;background-color:rgba(181,70,15,.33)}.Recipe-module__recipe__box__needs{width:100%;display:flex;align-items:flex-start;justify-content:space-between}.Recipe-module__recipe__box__needs__line{display:flex;flex-direction:column;justify-content:center;align-items:center;grid-template-rows:7px 1fr;gap:5px;height:100%;margin-left:53px;margin-right:53px;position:relative}.Recipe-module__recipe__box__needs__line .Recipe-module__circle{width:7px;height:7px;border-radius:50%;background-color:#b5460f}.Recipe-module__recipe__box__needs__line .Recipe-module__bottom-line{width:1px;height:231px;background-color:#b5460f}.Recipe-module__recipe__box__directions{display:flex;flex-direction:column;gap:24px;width:50%;padding-bottom:28px}.Recipe-module__recipe__box__directions__steps{display:flex;flex-direction:column;gap:16px}.Recipe-module__recipe__box__directions__steps div{display:flex;flex-direction:column;gap:4px}.Recipe-module__recipe__box__preview{display:flex;align-items:center;align-content:center;gap:166px}.Recipe-module__recipe__box__preview img{border-radius:10px;width:448px;height:298px;background-color:#afadb5;object-fit:cover}.Recipe-module__recipe__box__preview__info{width:100%;display:grid;grid-template-columns:repeat(3, 1fr);column-gap:100px;row-gap:50px}`, "",{"version":3,"sources":["webpack://./src/App/pages/Recipe/Recipe.module.scss","webpack://./src/styles/variables.scss"],"names":[],"mappings":"AAIA,uBACI,sBAHY,CAKZ,+BACI,eAAA,CACA,YAAA,CACA,oBAAA,CACA,kBAAA,CACA,QAAA,CACA,kBAAA,CAGJ,4BACI,YAAA,CACA,qBAAA,CACA,QAAA,CAEA,yCACI,UAAA,CACA,kBCfI,CDgBJ,YAAA,CACA,oCAAA,CAGJ,mCACI,UAAA,CACA,YAAA,CACA,sBAAA,CACA,6BAAA,CAEA,yCACI,YAAA,CACA,qBAAA,CACA,sBAAA,CACA,kBAAA,CACA,0BAAA,CACA,OAAA,CACA,WAAA,CACA,gBAAA,CACA,iBAAA,CAEA,iBAAA,CAEA,gEACI,SAAA,CACA,UAAA,CACA,iBAAA,CACA,wBCnDZ,CDsDQ,qEACI,SAAA,CACA,YAAA,CACA,wBCzDZ,CD8DA,wCACI,YAAA,CACA,qBAAA,CACA,QAAA,CACA,SAAA,CACA,mBAAA,CAEA,+CACI,YAAA,CACA,qBAAA,CACA,QAAA,CAEA,mDACI,YAAA,CACA,qBAAA,CACA,OAAA,CAKZ,qCACI,YAAA,CACA,kBAAA,CACA,oBAAA,CACA,SAAA,CAEA,yCACI,kBCjFA,CDkFA,WAAA,CACA,YAAA,CACA,wBCtFT,CDuFS,gBAAA,CAGJ,2CACI,UAAA,CACA,YAAA,CACA,oCAAA,CACA,gBAAA,CACA,YAAA","sourcesContent":["@use \'styles/variables.scss\' as var;\\r\\n\\r\\n$recipe-margin: 0 100px 0 100px;\\r\\n\\r\\n.recipe {\\r\\n    margin: $recipe-margin;\\r\\n\\r\\n    &__header {\\r\\n        margin-top: 49px;\\r\\n        display: flex;\\r\\n        align-content: center;\\r\\n        align-items: center;\\r\\n        gap: 16px;\\r\\n        margin-bottom: 37px;\\r\\n    }\\r\\n\\r\\n    &__box {\\r\\n        display: flex;\\r\\n        flex-direction: column;\\r\\n        gap: 48px;\\r\\n\\r\\n        &__description {\\r\\n            width: 100%;\\r\\n            border-radius: var.$border-radius;\\r\\n            padding: 36px;\\r\\n            background-color: rgba(181, 70, 15, 0.33);\\r\\n        }\\r\\n\\r\\n        &__needs {\\r\\n            width: 100%;\\r\\n            display: flex;\\r\\n            align-items: flex-start;\\r\\n            justify-content: space-between;\\r\\n    \\r\\n            &__line {\\r\\n                display: flex;\\r\\n                flex-direction: column;\\r\\n                justify-content: center;\\r\\n                align-items: center;\\r\\n                grid-template-rows: 7px 1fr;\\r\\n                gap: 5px;\\r\\n                height: 100%;\\r\\n                margin-left: 53px;\\r\\n                margin-right: 53px;\\r\\n    \\r\\n                position: relative;\\r\\n    \\r\\n                .circle {\\r\\n                    width: 7px;\\r\\n                    height: 7px;\\r\\n                    border-radius: 50%;\\r\\n                    background-color: var.$brand;\\r\\n                }\\r\\n    \\r\\n                .bottom-line {\\r\\n                    width: 1px;\\r\\n                    height: 231px;\\r\\n                    background-color: var.$brand;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    \\r\\n        &__directions {\\r\\n            display: flex;\\r\\n            flex-direction: column;\\r\\n            gap: 24px;\\r\\n            width: 50%;\\r\\n            padding-bottom: 28px;\\r\\n    \\r\\n            &__steps {\\r\\n                display: flex;\\r\\n                flex-direction: column;\\r\\n                gap: 16px;\\r\\n                \\r\\n                div {\\r\\n                    display: flex;\\r\\n                    flex-direction: column;\\r\\n                    gap: 4px;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    \\r\\n        &__preview {\\r\\n            display: flex;\\r\\n            align-items: center;\\r\\n            align-content: center;\\r\\n            gap: 166px;\\r\\n    \\r\\n            img {\\r\\n                border-radius: var.$border-radius;\\r\\n                width: 448px;\\r\\n                height: 298px;\\r\\n                background-color: var.$gray;\\r\\n                object-fit: cover;\\r\\n            }\\r\\n    \\r\\n            &__info {\\r\\n                width: 100%;\\r\\n                display: grid;\\r\\n                grid-template-columns: repeat(3, 1fr);\\r\\n                column-gap: 100px;\\r\\n                row-gap: 50px;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}","$brand: #B5460F;\\r\\n$brand-hover: rgba(181, 70, 15, 0.7);\\r\\n$brand-active: #872D01;\\r\\n\\r\\n$dark: black; \\r\\n$light: white;\\r\\n$gray: #AFADB5;\\r\\n\\r\\n$border-radius: 10px;\\r\\n\\r\\n$space-xl: 24px;\\r\\n$space-l: 20px;\\r\\n$space-m: 16px;\\r\\n$space-s: 14px;\\r\\n$space-xs: 12px;\\r\\n$space-xxs: 8px;"],"sourceRoot":""}]);\n// Exports\n___CSS_LOADER_EXPORT___.locals = {\n\t"recipe": `Recipe-module__recipe`,\n\t"recipe__header": `Recipe-module__recipe__header`,\n\t"recipe__box": `Recipe-module__recipe__box`,\n\t"recipe__box__description": `Recipe-module__recipe__box__description`,\n\t"recipe__box__needs": `Recipe-module__recipe__box__needs`,\n\t"recipe__box__needs__line": `Recipe-module__recipe__box__needs__line`,\n\t"circle": `Recipe-module__circle`,\n\t"bottom-line": `Recipe-module__bottom-line`,\n\t"recipe__box__directions": `Recipe-module__recipe__box__directions`,\n\t"recipe__box__directions__steps": `Recipe-module__recipe__box__directions__steps`,\n\t"recipe__box__preview": `Recipe-module__recipe__box__preview`,\n\t"recipe__box__preview__info": `Recipe-module__recipe__box__preview__info`\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///5308\n')},6820:(module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   A: () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(963);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(9089);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);\n// Imports\n\n\nvar ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, `.RecipeNeed-module__recipe__box__needs__block{display:flex;flex-direction:column;gap:24px;width:100%}.RecipeNeed-module__recipe__box__needs__block__elems{display:grid;row-gap:8px;column-gap:29px;grid-template-columns:1fr 1fr;justify-content:start}.RecipeNeed-module__recipe__box__needs__block__elems div{display:flex;gap:8px;align-items:center;align-content:center}`, "",{"version":3,"sources":["webpack://./src/App/pages/Recipe/components/RecipeNeed/RecipeNeed.module.scss"],"names":[],"mappings":"AAAA,8CACI,YAAA,CACA,qBAAA,CACA,QAAA,CACA,UAAA,CAEA,qDACI,YAAA,CACA,WAAA,CACA,eAAA,CACA,6BAAA,CACA,qBAAA,CAEA,yDACI,YAAA,CACA,OAAA,CACA,kBAAA,CACA,oBAAA","sourcesContent":[".recipe__box__needs__block {\\r\\n    display: flex;\\r\\n    flex-direction: column;\\r\\n    gap: 24px;\\r\\n    width: 100%;\\r\\n\\r\\n    &__elems {\\r\\n        display: grid;\\r\\n        row-gap: 8px;\\r\\n        column-gap: 29px;\\r\\n        grid-template-columns: 1fr 1fr;\\r\\n        justify-content: start;\\r\\n\\r\\n        div {\\r\\n            display: flex;\\r\\n            gap: 8px;\\r\\n            align-items: center;\\r\\n            align-content: center;\\r\\n        }\\r\\n    }\\r\\n}"],"sourceRoot":""}]);\n// Exports\n___CSS_LOADER_EXPORT___.locals = {\n\t"recipe__box__needs__block": `RecipeNeed-module__recipe__box__needs__block`,\n\t"recipe__box__needs__block__elems": `RecipeNeed-module__recipe__box__needs__block__elems`\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNjgyMC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7QUFDeUg7QUFDakI7QUFDeEcsOEJBQThCLG1GQUEyQixDQUFDLDRGQUFxQztBQUMvRjtBQUNBLHdGQUF3RixhQUFhLHNCQUFzQixTQUFTLFdBQVcscURBQXFELGFBQWEsWUFBWSxnQkFBZ0IsOEJBQThCLHNCQUFzQix5REFBeUQsYUFBYSxRQUFRLG1CQUFtQixxQkFBcUIsT0FBTyx3VUFBd1Usc0JBQXNCLCtCQUErQixrQkFBa0Isb0JBQW9CLHNCQUFzQiwwQkFBMEIseUJBQXlCLDZCQUE2QiwyQ0FBMkMsbUNBQW1DLHFCQUFxQiw4QkFBOEIseUJBQXlCLG9DQUFvQyxzQ0FBc0MsYUFBYSxTQUFTLEtBQUssbUJBQW1CO0FBQ3pyQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUVBQWUsdUJBQXVCLEVBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8yMDI0LWt0c3N0dWRpby1ob21ld29ya3MvLi9zcmMvQXBwL3BhZ2VzL1JlY2lwZS9jb21wb25lbnRzL1JlY2lwZU5lZWQvUmVjaXBlTmVlZC5tb2R1bGUuc2Nzcz8wNTUyIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIGAuUmVjaXBlTmVlZC1tb2R1bGVfX3JlY2lwZV9fYm94X19uZWVkc19fYmxvY2t7ZGlzcGxheTpmbGV4O2ZsZXgtZGlyZWN0aW9uOmNvbHVtbjtnYXA6MjRweDt3aWR0aDoxMDAlfS5SZWNpcGVOZWVkLW1vZHVsZV9fcmVjaXBlX19ib3hfX25lZWRzX19ibG9ja19fZWxlbXN7ZGlzcGxheTpncmlkO3Jvdy1nYXA6OHB4O2NvbHVtbi1nYXA6MjlweDtncmlkLXRlbXBsYXRlLWNvbHVtbnM6MWZyIDFmcjtqdXN0aWZ5LWNvbnRlbnQ6c3RhcnR9LlJlY2lwZU5lZWQtbW9kdWxlX19yZWNpcGVfX2JveF9fbmVlZHNfX2Jsb2NrX19lbGVtcyBkaXZ7ZGlzcGxheTpmbGV4O2dhcDo4cHg7YWxpZ24taXRlbXM6Y2VudGVyO2FsaWduLWNvbnRlbnQ6Y2VudGVyfWAsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vc3JjL0FwcC9wYWdlcy9SZWNpcGUvY29tcG9uZW50cy9SZWNpcGVOZWVkL1JlY2lwZU5lZWQubW9kdWxlLnNjc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBQUEsOENBQ0ksWUFBQSxDQUNBLHFCQUFBLENBQ0EsUUFBQSxDQUNBLFVBQUEsQ0FFQSxxREFDSSxZQUFBLENBQ0EsV0FBQSxDQUNBLGVBQUEsQ0FDQSw2QkFBQSxDQUNBLHFCQUFBLENBRUEseURBQ0ksWUFBQSxDQUNBLE9BQUEsQ0FDQSxrQkFBQSxDQUNBLG9CQUFBXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIi5yZWNpcGVfX2JveF9fbmVlZHNfX2Jsb2NrIHtcXHJcXG4gICAgZGlzcGxheTogZmxleDtcXHJcXG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXHJcXG4gICAgZ2FwOiAyNHB4O1xcclxcbiAgICB3aWR0aDogMTAwJTtcXHJcXG5cXHJcXG4gICAgJl9fZWxlbXMge1xcclxcbiAgICAgICAgZGlzcGxheTogZ3JpZDtcXHJcXG4gICAgICAgIHJvdy1nYXA6IDhweDtcXHJcXG4gICAgICAgIGNvbHVtbi1nYXA6IDI5cHg7XFxyXFxuICAgICAgICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IDFmciAxZnI7XFxyXFxuICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IHN0YXJ0O1xcclxcblxcclxcbiAgICAgICAgZGl2IHtcXHJcXG4gICAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xcclxcbiAgICAgICAgICAgIGdhcDogOHB4O1xcclxcbiAgICAgICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxyXFxuICAgICAgICAgICAgYWxpZ24tY29udGVudDogY2VudGVyO1xcclxcbiAgICAgICAgfVxcclxcbiAgICB9XFxyXFxufVwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ubG9jYWxzID0ge1xuXHRcInJlY2lwZV9fYm94X19uZWVkc19fYmxvY2tcIjogYFJlY2lwZU5lZWQtbW9kdWxlX19yZWNpcGVfX2JveF9fbmVlZHNfX2Jsb2NrYCxcblx0XCJyZWNpcGVfX2JveF9fbmVlZHNfX2Jsb2NrX19lbGVtc1wiOiBgUmVjaXBlTmVlZC1tb2R1bGVfX3JlY2lwZV9fYm94X19uZWVkc19fYmxvY2tfX2VsZW1zYFxufTtcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///6820\n')},7726:(module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   A: () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(963);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(9089);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);\n// Imports\n\n\nvar ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, `.Recipes-module__recipes{display:flex;flex-direction:column;gap:36px;padding-bottom:28px}`, "",{"version":3,"sources":["webpack://./src/App/pages/Recipes/Recipes.module.scss"],"names":[],"mappings":"AAGA,yBACI,YAAA,CACA,qBAAA,CACA,QANU,CAOV,mBANa","sourcesContent":["$recipes-gap: 36px;\\r\\n$recipes-bottom: 28px;\\r\\n\\r\\n.recipes {\\r\\n    display: flex;\\r\\n    flex-direction: column;\\r\\n    gap: $recipes-gap;\\r\\n    padding-bottom: $recipes-bottom;\\r\\n}"],"sourceRoot":""}]);\n// Exports\n___CSS_LOADER_EXPORT___.locals = {\n\t"recipes": `Recipes-module__recipes`\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNzcyNi5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7QUFDbUg7QUFDakI7QUFDbEcsOEJBQThCLG1GQUEyQixDQUFDLDRGQUFxQztBQUMvRjtBQUNBLG1FQUFtRSxhQUFhLHNCQUFzQixTQUFTLG9CQUFvQixPQUFPLDhMQUE4TCwwQkFBMEIsa0JBQWtCLHNCQUFzQiwrQkFBK0IsMEJBQTBCLHdDQUF3QyxLQUFLLG1CQUFtQjtBQUNuZ0I7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpRUFBZSx1QkFBdUIsRUFBQyIsInNvdXJjZXMiOlsid2VicGFjazovLzIwMjQta3Rzc3R1ZGlvLWhvbWV3b3Jrcy8uL3NyYy9BcHAvcGFnZXMvUmVjaXBlcy9SZWNpcGVzLm1vZHVsZS5zY3NzP2Q2YzAiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgYC5SZWNpcGVzLW1vZHVsZV9fcmVjaXBlc3tkaXNwbGF5OmZsZXg7ZmxleC1kaXJlY3Rpb246Y29sdW1uO2dhcDozNnB4O3BhZGRpbmctYm90dG9tOjI4cHh9YCwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9zcmMvQXBwL3BhZ2VzL1JlY2lwZXMvUmVjaXBlcy5tb2R1bGUuc2Nzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFHQSx5QkFDSSxZQUFBLENBQ0EscUJBQUEsQ0FDQSxRQU5VLENBT1YsbUJBTmFcIixcInNvdXJjZXNDb250ZW50XCI6W1wiJHJlY2lwZXMtZ2FwOiAzNnB4O1xcclxcbiRyZWNpcGVzLWJvdHRvbTogMjhweDtcXHJcXG5cXHJcXG4ucmVjaXBlcyB7XFxyXFxuICAgIGRpc3BsYXk6IGZsZXg7XFxyXFxuICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxyXFxuICAgIGdhcDogJHJlY2lwZXMtZ2FwO1xcclxcbiAgICBwYWRkaW5nLWJvdHRvbTogJHJlY2lwZXMtYm90dG9tO1xcclxcbn1cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLmxvY2FscyA9IHtcblx0XCJyZWNpcGVzXCI6IGBSZWNpcGVzLW1vZHVsZV9fcmVjaXBlc2Bcbn07XG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///7726\n')},5181:(module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   A: () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(963);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(9089);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);\n// Imports\n\n\nvar ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, `.Content-module__content{display:flex;flex-direction:column;gap:48px;margin:0 100px 0 100px}.Content-module__content__header{text-align:center}`, "",{"version":3,"sources":["webpack://./src/App/pages/Recipes/components/Content/Content.module.scss"],"names":[],"mappings":"AAGA,yBACI,YAAA,CACA,qBAAA,CACA,QALU,CAMV,sBAPa,CASb,iCACI,iBAAA","sourcesContent":["$content-margin: 0 100px 0 100px;\\r\\n$content-gap: 48px;\\r\\n\\r\\n.content {\\r\\n    display: flex;\\r\\n    flex-direction: column;\\r\\n    gap: $content-gap;\\r\\n    margin: $content-margin;\\r\\n\\r\\n    &__header {\\r\\n        text-align: center;\\r\\n    }\\r\\n}"],"sourceRoot":""}]);\n// Exports\n___CSS_LOADER_EXPORT___.locals = {\n\t"content": `Content-module__content`,\n\t"content__header": `Content-module__content__header`\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTE4MS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7QUFDeUg7QUFDakI7QUFDeEcsOEJBQThCLG1GQUEyQixDQUFDLDRGQUFxQztBQUMvRjtBQUNBLG1FQUFtRSxhQUFhLHNCQUFzQixTQUFTLHVCQUF1QixpQ0FBaUMsa0JBQWtCLE9BQU8sZ1BBQWdQLHVCQUF1QixrQkFBa0Isc0JBQXNCLCtCQUErQiwwQkFBMEIsZ0NBQWdDLHVCQUF1QiwrQkFBK0IsU0FBUyxLQUFLLG1CQUFtQjtBQUMvcEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlFQUFlLHVCQUF1QixFQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vMjAyNC1rdHNzdHVkaW8taG9tZXdvcmtzLy4vc3JjL0FwcC9wYWdlcy9SZWNpcGVzL2NvbXBvbmVudHMvQ29udGVudC9Db250ZW50Lm1vZHVsZS5zY3NzPzVkMjQiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgYC5Db250ZW50LW1vZHVsZV9fY29udGVudHtkaXNwbGF5OmZsZXg7ZmxleC1kaXJlY3Rpb246Y29sdW1uO2dhcDo0OHB4O21hcmdpbjowIDEwMHB4IDAgMTAwcHh9LkNvbnRlbnQtbW9kdWxlX19jb250ZW50X19oZWFkZXJ7dGV4dC1hbGlnbjpjZW50ZXJ9YCwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9zcmMvQXBwL3BhZ2VzL1JlY2lwZXMvY29tcG9uZW50cy9Db250ZW50L0NvbnRlbnQubW9kdWxlLnNjc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBR0EseUJBQ0ksWUFBQSxDQUNBLHFCQUFBLENBQ0EsUUFMVSxDQU1WLHNCQVBhLENBU2IsaUNBQ0ksaUJBQUFcIixcInNvdXJjZXNDb250ZW50XCI6W1wiJGNvbnRlbnQtbWFyZ2luOiAwIDEwMHB4IDAgMTAwcHg7XFxyXFxuJGNvbnRlbnQtZ2FwOiA0OHB4O1xcclxcblxcclxcbi5jb250ZW50IHtcXHJcXG4gICAgZGlzcGxheTogZmxleDtcXHJcXG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXHJcXG4gICAgZ2FwOiAkY29udGVudC1nYXA7XFxyXFxuICAgIG1hcmdpbjogJGNvbnRlbnQtbWFyZ2luO1xcclxcblxcclxcbiAgICAmX19oZWFkZXIge1xcclxcbiAgICAgICAgdGV4dC1hbGlnbjogY2VudGVyO1xcclxcbiAgICB9XFxyXFxufVwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ubG9jYWxzID0ge1xuXHRcImNvbnRlbnRcIjogYENvbnRlbnQtbW9kdWxlX19jb250ZW50YCxcblx0XCJjb250ZW50X19oZWFkZXJcIjogYENvbnRlbnQtbW9kdWxlX19jb250ZW50X19oZWFkZXJgXG59O1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///5181\n')},337:(module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   A: () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(963);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(9089);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);\n// Imports\n\n\nvar ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, `.Preview-module__preview{width:100%}.Preview-module__preview img{width:100%}`, "",{"version":3,"sources":["webpack://./src/App/pages/Recipes/components/Preview/Preview.module.scss"],"names":[],"mappings":"AAAA,yBACI,UAAA,CAEA,6BACI,UAAA","sourcesContent":[".preview {\\r\\n    width: 100%;\\r\\n\\r\\n    img {\\r\\n        width: 100%;\\r\\n    }\\r\\n}"],"sourceRoot":""}]);\n// Exports\n___CSS_LOADER_EXPORT___.locals = {\n\t"preview": `Preview-module__preview`\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzM3LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTtBQUN5SDtBQUNqQjtBQUN4Ryw4QkFBOEIsbUZBQTJCLENBQUMsNEZBQXFDO0FBQy9GO0FBQ0EsbUVBQW1FLFdBQVcsNkJBQTZCLFdBQVcsT0FBTyx3TEFBd0wsb0JBQW9CLGlCQUFpQix3QkFBd0IsU0FBUyxLQUFLLG1CQUFtQjtBQUNuWjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlFQUFlLHVCQUF1QixFQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vMjAyNC1rdHNzdHVkaW8taG9tZXdvcmtzLy4vc3JjL0FwcC9wYWdlcy9SZWNpcGVzL2NvbXBvbmVudHMvUHJldmlldy9QcmV2aWV3Lm1vZHVsZS5zY3NzP2RmYWUiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgYC5QcmV2aWV3LW1vZHVsZV9fcHJldmlld3t3aWR0aDoxMDAlfS5QcmV2aWV3LW1vZHVsZV9fcHJldmlldyBpbWd7d2lkdGg6MTAwJX1gLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL3NyYy9BcHAvcGFnZXMvUmVjaXBlcy9jb21wb25lbnRzL1ByZXZpZXcvUHJldmlldy5tb2R1bGUuc2Nzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFBQSx5QkFDSSxVQUFBLENBRUEsNkJBQ0ksVUFBQVwiLFwic291cmNlc0NvbnRlbnRcIjpbXCIucHJldmlldyB7XFxyXFxuICAgIHdpZHRoOiAxMDAlO1xcclxcblxcclxcbiAgICBpbWcge1xcclxcbiAgICAgICAgd2lkdGg6IDEwMCU7XFxyXFxuICAgIH1cXHJcXG59XCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5sb2NhbHMgPSB7XG5cdFwicHJldmlld1wiOiBgUHJldmlldy1tb2R1bGVfX3ByZXZpZXdgXG59O1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///337\n')},8674:(module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   A: () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(963);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(9089);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);\n// Imports\n\n\nvar ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, `.User-module__user-page{margin:50px 100px 0 100px;display:flex;flex-direction:column;gap:24px}.User-module__user-page__info{display:flex;flex-direction:column;gap:12px}.User-module__user-page__info__unit{display:flex;justify-content:start;gap:6px}.User-module__user-page__logout{width:fit-content}`, "",{"version":3,"sources":["webpack://./src/App/pages/User/User.module.scss"],"names":[],"mappings":"AAEA,wBAEI,yBAJe,CAKf,YAAA,CACA,qBAAA,CACA,QAAA,CAEA,8BACI,YAAA,CACA,qBAAA,CACA,QAAA,CAEA,oCACI,YAAA,CACA,qBAAA,CACA,OAAA,CAIR,gCACI,iBAAA","sourcesContent":["$user-page-margin: 50px 100px 0 100px;\\r\\n\\r\\n.user-page {\\r\\n\\r\\n    margin: $user-page-margin;\\r\\n    display: flex;\\r\\n    flex-direction: column;\\r\\n    gap: 24px;\\r\\n\\r\\n    &__info {\\r\\n        display: flex;\\r\\n        flex-direction: column;\\r\\n        gap: 12px;\\r\\n\\r\\n        &__unit {\\r\\n            display: flex;\\r\\n            justify-content: start;\\r\\n            gap: 6px;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    &__logout {\\r\\n        width: fit-content;\\r\\n    }\\r\\n}"],"sourceRoot":""}]);\n// Exports\n___CSS_LOADER_EXPORT___.locals = {\n\t"user-page": `User-module__user-page`,\n\t"user-page__info": `User-module__user-page__info`,\n\t"user-page__info__unit": `User-module__user-page__info__unit`,\n\t"user-page__logout": `User-module__user-page__logout`\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiODY3NC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7QUFDbUg7QUFDakI7QUFDbEcsOEJBQThCLG1GQUEyQixDQUFDLDRGQUFxQztBQUMvRjtBQUNBLGtFQUFrRSwwQkFBMEIsYUFBYSxzQkFBc0IsU0FBUyw4QkFBOEIsYUFBYSxzQkFBc0IsU0FBUyxvQ0FBb0MsYUFBYSxzQkFBc0IsUUFBUSxnQ0FBZ0Msa0JBQWtCLE9BQU8sc1NBQXNTLG9CQUFvQixzQ0FBc0Msc0JBQXNCLCtCQUErQixrQkFBa0IscUJBQXFCLDBCQUEwQixtQ0FBbUMsc0JBQXNCLHlCQUF5Qiw4QkFBOEIsdUNBQXVDLHlCQUF5QixhQUFhLFNBQVMsdUJBQXVCLCtCQUErQixTQUFTLEtBQUssbUJBQW1CO0FBQzdrQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlFQUFlLHVCQUF1QixFQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vMjAyNC1rdHNzdHVkaW8taG9tZXdvcmtzLy4vc3JjL0FwcC9wYWdlcy9Vc2VyL1VzZXIubW9kdWxlLnNjc3M/ZGZjNiJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBgLlVzZXItbW9kdWxlX191c2VyLXBhZ2V7bWFyZ2luOjUwcHggMTAwcHggMCAxMDBweDtkaXNwbGF5OmZsZXg7ZmxleC1kaXJlY3Rpb246Y29sdW1uO2dhcDoyNHB4fS5Vc2VyLW1vZHVsZV9fdXNlci1wYWdlX19pbmZve2Rpc3BsYXk6ZmxleDtmbGV4LWRpcmVjdGlvbjpjb2x1bW47Z2FwOjEycHh9LlVzZXItbW9kdWxlX191c2VyLXBhZ2VfX2luZm9fX3VuaXR7ZGlzcGxheTpmbGV4O2p1c3RpZnktY29udGVudDpzdGFydDtnYXA6NnB4fS5Vc2VyLW1vZHVsZV9fdXNlci1wYWdlX19sb2dvdXR7d2lkdGg6Zml0LWNvbnRlbnR9YCwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9zcmMvQXBwL3BhZ2VzL1VzZXIvVXNlci5tb2R1bGUuc2Nzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFFQSx3QkFFSSx5QkFKZSxDQUtmLFlBQUEsQ0FDQSxxQkFBQSxDQUNBLFFBQUEsQ0FFQSw4QkFDSSxZQUFBLENBQ0EscUJBQUEsQ0FDQSxRQUFBLENBRUEsb0NBQ0ksWUFBQSxDQUNBLHFCQUFBLENBQ0EsT0FBQSxDQUlSLGdDQUNJLGlCQUFBXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIiR1c2VyLXBhZ2UtbWFyZ2luOiA1MHB4IDEwMHB4IDAgMTAwcHg7XFxyXFxuXFxyXFxuLnVzZXItcGFnZSB7XFxyXFxuXFxyXFxuICAgIG1hcmdpbjogJHVzZXItcGFnZS1tYXJnaW47XFxyXFxuICAgIGRpc3BsYXk6IGZsZXg7XFxyXFxuICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxyXFxuICAgIGdhcDogMjRweDtcXHJcXG5cXHJcXG4gICAgJl9faW5mbyB7XFxyXFxuICAgICAgICBkaXNwbGF5OiBmbGV4O1xcclxcbiAgICAgICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXHJcXG4gICAgICAgIGdhcDogMTJweDtcXHJcXG5cXHJcXG4gICAgICAgICZfX3VuaXQge1xcclxcbiAgICAgICAgICAgIGRpc3BsYXk6IGZsZXg7XFxyXFxuICAgICAgICAgICAganVzdGlmeS1jb250ZW50OiBzdGFydDtcXHJcXG4gICAgICAgICAgICBnYXA6IDZweDtcXHJcXG4gICAgICAgIH1cXHJcXG4gICAgfVxcclxcblxcclxcbiAgICAmX19sb2dvdXQge1xcclxcbiAgICAgICAgd2lkdGg6IGZpdC1jb250ZW50O1xcclxcbiAgICB9XFxyXFxufVwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ubG9jYWxzID0ge1xuXHRcInVzZXItcGFnZVwiOiBgVXNlci1tb2R1bGVfX3VzZXItcGFnZWAsXG5cdFwidXNlci1wYWdlX19pbmZvXCI6IGBVc2VyLW1vZHVsZV9fdXNlci1wYWdlX19pbmZvYCxcblx0XCJ1c2VyLXBhZ2VfX2luZm9fX3VuaXRcIjogYFVzZXItbW9kdWxlX191c2VyLXBhZ2VfX2luZm9fX3VuaXRgLFxuXHRcInVzZXItcGFnZV9fbG9nb3V0XCI6IGBVc2VyLW1vZHVsZV9fdXNlci1wYWdlX19sb2dvdXRgXG59O1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///8674\n')},3600:(module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   A: () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(963);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(9089);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);\n// Imports\n\n\nvar ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, `button{background:none;border:none;outline:none;box-shadow:none}.Button-module__button{background-color:#b5460f;color:#fff;font-size:18px;height:52px;border-radius:10px;padding:14px 20px}.Button-module__button_unloading:hover:enabled{background-color:rgba(181,70,15,.7)}.Button-module__button_unloading:disabled{background-color:#d9d9d9}.Button-module__button_unloading:active:enabled{background-color:#872d01}.Button-module__button_loading{display:flex;gap:8px;align-items:center;align-content:center;justify-content:center}.Button-module__button_loading .Button-module__loader{border-color:#fff;border-top-color:rgba(0,0,0,0)}.Button-module__button_loading:disabled{background-color:#b5460f}.Button-module__button_loading_disabled:disabled{background-color:#d9d9d9}`, "",{"version":3,"sources":["webpack://./src/components/Button/Button.module.scss","webpack://./src/styles/variables.scss"],"names":[],"mappings":"AAOA,OACI,eAAA,CACA,WAAA,CACA,YAAA,CACA,eAAA,CAGJ,uBACI,wBCfI,CDgBJ,UCXI,CDYJ,cAfe,CAgBf,WAfY,CAgBZ,kBCXY,CDaZ,iBAAA,CAGI,+CACI,mCCxBE,CD2BN,0CACI,wBAzBY,CA4BhB,gDACI,wBC/BG,CDmCX,+BACI,YAAA,CACA,OAAA,CACA,kBAAA,CACA,oBAAA,CACA,sBAAA,CAEA,sDACI,iBCxCJ,CDyCI,8BAAA,CAGJ,wCACI,wBClDJ,CDqDA,iDACI,wBAlDY","sourcesContent":["@use \'styles/variables.scss\' as var;\\r\\n\\r\\n$button-font-size: 18px;\\r\\n$button-height: 52px;\\r\\n$buttom-color-disabled: #D9D9D9;\\r\\n$buttom-border: var.$border-radius;\\r\\n\\r\\nbutton {\\r\\n    background: none;\\r\\n    border: none;\\r\\n    outline: none;\\r\\n    box-shadow: none;\\r\\n}\\r\\n\\r\\n.button {\\r\\n    background-color: var.$brand;\\r\\n    color: var.$light;\\r\\n    font-size: $button-font-size;\\r\\n    height: $button-height;\\r\\n    border-radius: $buttom-border;\\r\\n\\r\\n    padding: var.$space-s var.$space-l;\\r\\n\\r\\n    &_unloading {\\r\\n        &:hover:enabled {\\r\\n            background-color: var.$brand-hover;\\r\\n        }\\r\\n    \\r\\n        &:disabled {\\r\\n            background-color: $buttom-color-disabled;        \\r\\n        }\\r\\n    \\r\\n        &:active:enabled {\\r\\n            background-color: var.$brand-active;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    &_loading {\\r\\n        display: flex;\\r\\n        gap: 8px;\\r\\n        align-items: center;\\r\\n        align-content: center;\\r\\n        justify-content: center;\\r\\n\\r\\n        .loader {\\r\\n            border-color: var.$light;\\r\\n            border-top-color: transparent;\\r\\n        }\\r\\n\\r\\n        &:disabled {\\r\\n            background-color: var.$brand;\\r\\n        }\\r\\n\\r\\n        &_disabled:disabled {\\r\\n            background-color: $buttom-color-disabled;\\r\\n        }\\r\\n    }\\r\\n}","$brand: #B5460F;\\r\\n$brand-hover: rgba(181, 70, 15, 0.7);\\r\\n$brand-active: #872D01;\\r\\n\\r\\n$dark: black; \\r\\n$light: white;\\r\\n$gray: #AFADB5;\\r\\n\\r\\n$border-radius: 10px;\\r\\n\\r\\n$space-xl: 24px;\\r\\n$space-l: 20px;\\r\\n$space-m: 16px;\\r\\n$space-s: 14px;\\r\\n$space-xs: 12px;\\r\\n$space-xxs: 8px;"],"sourceRoot":""}]);\n// Exports\n___CSS_LOADER_EXPORT___.locals = {\n\t"button": `Button-module__button`,\n\t"button_unloading": `Button-module__button_unloading`,\n\t"button_loading": `Button-module__button_loading`,\n\t"loader": `Button-module__loader`,\n\t"button_loading_disabled": `Button-module__button_loading_disabled`\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzYwMC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7QUFDZ0g7QUFDakI7QUFDL0YsOEJBQThCLG1GQUEyQixDQUFDLDRGQUFxQztBQUMvRjtBQUNBLGlEQUFpRCxnQkFBZ0IsWUFBWSxhQUFhLGdCQUFnQix1QkFBdUIseUJBQXlCLFdBQVcsZUFBZSxZQUFZLG1CQUFtQixrQkFBa0IsK0NBQStDLG9DQUFvQywwQ0FBMEMseUJBQXlCLGdEQUFnRCx5QkFBeUIsK0JBQStCLGFBQWEsUUFBUSxtQkFBbUIscUJBQXFCLHVCQUF1QixzREFBc0Qsa0JBQWtCLCtCQUErQix3Q0FBd0MseUJBQXlCLGlEQUFpRCx5QkFBeUIsT0FBTyxtZkFBbWYsZ0NBQWdDLHlCQUF5QixvQ0FBb0MsdUNBQXVDLGdCQUFnQix5QkFBeUIscUJBQXFCLHNCQUFzQix5QkFBeUIsS0FBSyxpQkFBaUIscUNBQXFDLDBCQUEwQixxQ0FBcUMsK0JBQStCLHNDQUFzQywrQ0FBK0MseUJBQXlCLDZCQUE2QixtREFBbUQsYUFBYSxnQ0FBZ0MsaUVBQWlFLGFBQWEsc0NBQXNDLG9EQUFvRCxhQUFhLFNBQVMsdUJBQXVCLDBCQUEwQixxQkFBcUIsZ0NBQWdDLGtDQUFrQyxvQ0FBb0MseUJBQXlCLHlDQUF5Qyw4Q0FBOEMsYUFBYSw0QkFBNEIsNkNBQTZDLGFBQWEscUNBQXFDLHlEQUF5RCxhQUFhLFNBQVMsS0FBSyxtQkFBbUIseUNBQXlDLDJCQUEyQixzQkFBc0Isa0JBQWtCLG1CQUFtQiw2QkFBNkIsd0JBQXdCLG1CQUFtQixtQkFBbUIsbUJBQW1CLG9CQUFvQixvQkFBb0IsbUJBQW1CO0FBQ3o0RjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUVBQWUsdUJBQXVCLEVBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8yMDI0LWt0c3N0dWRpby1ob21ld29ya3MvLi9zcmMvY29tcG9uZW50cy9CdXR0b24vQnV0dG9uLm1vZHVsZS5zY3NzP2ZiZWIiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgYGJ1dHRvbntiYWNrZ3JvdW5kOm5vbmU7Ym9yZGVyOm5vbmU7b3V0bGluZTpub25lO2JveC1zaGFkb3c6bm9uZX0uQnV0dG9uLW1vZHVsZV9fYnV0dG9ue2JhY2tncm91bmQtY29sb3I6I2I1NDYwZjtjb2xvcjojZmZmO2ZvbnQtc2l6ZToxOHB4O2hlaWdodDo1MnB4O2JvcmRlci1yYWRpdXM6MTBweDtwYWRkaW5nOjE0cHggMjBweH0uQnV0dG9uLW1vZHVsZV9fYnV0dG9uX3VubG9hZGluZzpob3ZlcjplbmFibGVke2JhY2tncm91bmQtY29sb3I6cmdiYSgxODEsNzAsMTUsLjcpfS5CdXR0b24tbW9kdWxlX19idXR0b25fdW5sb2FkaW5nOmRpc2FibGVke2JhY2tncm91bmQtY29sb3I6I2Q5ZDlkOX0uQnV0dG9uLW1vZHVsZV9fYnV0dG9uX3VubG9hZGluZzphY3RpdmU6ZW5hYmxlZHtiYWNrZ3JvdW5kLWNvbG9yOiM4NzJkMDF9LkJ1dHRvbi1tb2R1bGVfX2J1dHRvbl9sb2FkaW5ne2Rpc3BsYXk6ZmxleDtnYXA6OHB4O2FsaWduLWl0ZW1zOmNlbnRlcjthbGlnbi1jb250ZW50OmNlbnRlcjtqdXN0aWZ5LWNvbnRlbnQ6Y2VudGVyfS5CdXR0b24tbW9kdWxlX19idXR0b25fbG9hZGluZyAuQnV0dG9uLW1vZHVsZV9fbG9hZGVye2JvcmRlci1jb2xvcjojZmZmO2JvcmRlci10b3AtY29sb3I6cmdiYSgwLDAsMCwwKX0uQnV0dG9uLW1vZHVsZV9fYnV0dG9uX2xvYWRpbmc6ZGlzYWJsZWR7YmFja2dyb3VuZC1jb2xvcjojYjU0NjBmfS5CdXR0b24tbW9kdWxlX19idXR0b25fbG9hZGluZ19kaXNhYmxlZDpkaXNhYmxlZHtiYWNrZ3JvdW5kLWNvbG9yOiNkOWQ5ZDl9YCwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9zcmMvY29tcG9uZW50cy9CdXR0b24vQnV0dG9uLm1vZHVsZS5zY3NzXCIsXCJ3ZWJwYWNrOi8vLi9zcmMvc3R5bGVzL3ZhcmlhYmxlcy5zY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQU9BLE9BQ0ksZUFBQSxDQUNBLFdBQUEsQ0FDQSxZQUFBLENBQ0EsZUFBQSxDQUdKLHVCQUNJLHdCQ2ZJLENEZ0JKLFVDWEksQ0RZSixjQWZlLENBZ0JmLFdBZlksQ0FnQlosa0JDWFksQ0RhWixpQkFBQSxDQUdJLCtDQUNJLG1DQ3hCRSxDRDJCTiwwQ0FDSSx3QkF6QlksQ0E0QmhCLGdEQUNJLHdCQy9CRyxDRG1DWCwrQkFDSSxZQUFBLENBQ0EsT0FBQSxDQUNBLGtCQUFBLENBQ0Esb0JBQUEsQ0FDQSxzQkFBQSxDQUVBLHNEQUNJLGlCQ3hDSixDRHlDSSw4QkFBQSxDQUdKLHdDQUNJLHdCQ2xESixDRHFEQSxpREFDSSx3QkFsRFlcIixcInNvdXJjZXNDb250ZW50XCI6W1wiQHVzZSAnc3R5bGVzL3ZhcmlhYmxlcy5zY3NzJyBhcyB2YXI7XFxyXFxuXFxyXFxuJGJ1dHRvbi1mb250LXNpemU6IDE4cHg7XFxyXFxuJGJ1dHRvbi1oZWlnaHQ6IDUycHg7XFxyXFxuJGJ1dHRvbS1jb2xvci1kaXNhYmxlZDogI0Q5RDlEOTtcXHJcXG4kYnV0dG9tLWJvcmRlcjogdmFyLiRib3JkZXItcmFkaXVzO1xcclxcblxcclxcbmJ1dHRvbiB7XFxyXFxuICAgIGJhY2tncm91bmQ6IG5vbmU7XFxyXFxuICAgIGJvcmRlcjogbm9uZTtcXHJcXG4gICAgb3V0bGluZTogbm9uZTtcXHJcXG4gICAgYm94LXNoYWRvdzogbm9uZTtcXHJcXG59XFxyXFxuXFxyXFxuLmJ1dHRvbiB7XFxyXFxuICAgIGJhY2tncm91bmQtY29sb3I6IHZhci4kYnJhbmQ7XFxyXFxuICAgIGNvbG9yOiB2YXIuJGxpZ2h0O1xcclxcbiAgICBmb250LXNpemU6ICRidXR0b24tZm9udC1zaXplO1xcclxcbiAgICBoZWlnaHQ6ICRidXR0b24taGVpZ2h0O1xcclxcbiAgICBib3JkZXItcmFkaXVzOiAkYnV0dG9tLWJvcmRlcjtcXHJcXG5cXHJcXG4gICAgcGFkZGluZzogdmFyLiRzcGFjZS1zIHZhci4kc3BhY2UtbDtcXHJcXG5cXHJcXG4gICAgJl91bmxvYWRpbmcge1xcclxcbiAgICAgICAgJjpob3ZlcjplbmFibGVkIHtcXHJcXG4gICAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIuJGJyYW5kLWhvdmVyO1xcclxcbiAgICAgICAgfVxcclxcbiAgICBcXHJcXG4gICAgICAgICY6ZGlzYWJsZWQge1xcclxcbiAgICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6ICRidXR0b20tY29sb3ItZGlzYWJsZWQ7ICAgICAgICBcXHJcXG4gICAgICAgIH1cXHJcXG4gICAgXFxyXFxuICAgICAgICAmOmFjdGl2ZTplbmFibGVkIHtcXHJcXG4gICAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIuJGJyYW5kLWFjdGl2ZTtcXHJcXG4gICAgICAgIH1cXHJcXG4gICAgfVxcclxcblxcclxcbiAgICAmX2xvYWRpbmcge1xcclxcbiAgICAgICAgZGlzcGxheTogZmxleDtcXHJcXG4gICAgICAgIGdhcDogOHB4O1xcclxcbiAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXHJcXG4gICAgICAgIGFsaWduLWNvbnRlbnQ6IGNlbnRlcjtcXHJcXG4gICAgICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xcclxcblxcclxcbiAgICAgICAgLmxvYWRlciB7XFxyXFxuICAgICAgICAgICAgYm9yZGVyLWNvbG9yOiB2YXIuJGxpZ2h0O1xcclxcbiAgICAgICAgICAgIGJvcmRlci10b3AtY29sb3I6IHRyYW5zcGFyZW50O1xcclxcbiAgICAgICAgfVxcclxcblxcclxcbiAgICAgICAgJjpkaXNhYmxlZCB7XFxyXFxuICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogdmFyLiRicmFuZDtcXHJcXG4gICAgICAgIH1cXHJcXG5cXHJcXG4gICAgICAgICZfZGlzYWJsZWQ6ZGlzYWJsZWQge1xcclxcbiAgICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6ICRidXR0b20tY29sb3ItZGlzYWJsZWQ7XFxyXFxuICAgICAgICB9XFxyXFxuICAgIH1cXHJcXG59XCIsXCIkYnJhbmQ6ICNCNTQ2MEY7XFxyXFxuJGJyYW5kLWhvdmVyOiByZ2JhKDE4MSwgNzAsIDE1LCAwLjcpO1xcclxcbiRicmFuZC1hY3RpdmU6ICM4NzJEMDE7XFxyXFxuXFxyXFxuJGRhcms6IGJsYWNrOyBcXHJcXG4kbGlnaHQ6IHdoaXRlO1xcclxcbiRncmF5OiAjQUZBREI1O1xcclxcblxcclxcbiRib3JkZXItcmFkaXVzOiAxMHB4O1xcclxcblxcclxcbiRzcGFjZS14bDogMjRweDtcXHJcXG4kc3BhY2UtbDogMjBweDtcXHJcXG4kc3BhY2UtbTogMTZweDtcXHJcXG4kc3BhY2UtczogMTRweDtcXHJcXG4kc3BhY2UteHM6IDEycHg7XFxyXFxuJHNwYWNlLXh4czogOHB4O1wiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ubG9jYWxzID0ge1xuXHRcImJ1dHRvblwiOiBgQnV0dG9uLW1vZHVsZV9fYnV0dG9uYCxcblx0XCJidXR0b25fdW5sb2FkaW5nXCI6IGBCdXR0b24tbW9kdWxlX19idXR0b25fdW5sb2FkaW5nYCxcblx0XCJidXR0b25fbG9hZGluZ1wiOiBgQnV0dG9uLW1vZHVsZV9fYnV0dG9uX2xvYWRpbmdgLFxuXHRcImxvYWRlclwiOiBgQnV0dG9uLW1vZHVsZV9fbG9hZGVyYCxcblx0XCJidXR0b25fbG9hZGluZ19kaXNhYmxlZFwiOiBgQnV0dG9uLW1vZHVsZV9fYnV0dG9uX2xvYWRpbmdfZGlzYWJsZWRgXG59O1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///3600\n')},2652:(module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   A: () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(963);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(9089);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);\n// Imports\n\n\nvar ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, `.Card-module__card{font-family:"Roboto";display:grid;width:348px;padding:0;padding-bottom:24px;gap:24px;grid-template-rows:348px 1fr;background-color:#fff;border-radius:10px}.Card-module__card:hover{box-shadow:0px 4px 10px 0px rgba(0,0,0,.25)}.Card-module__card__img{background-color:#d9d9d9;object-fit:cover;width:100%;height:348px;border-radius:10px 10px 0 0}.Card-module__card__info{display:grid;padding:0 12px;gap:20px;align-content:space-between}.Card-module__card__info__text{height:100%;display:grid;gap:8px}.Card-module__card__info__text__title,.Card-module__card__info__text__subtitle{overflow:hidden;text-overflow:ellipsis;display:-webkit-box;-webkit-box-orient:vertical}.Card-module__card__info__text__title{-webkit-line-clamp:2}.Card-module__card__info__text__subtitle{-webkit-line-clamp:3}.Card-module__card__info__slot{height:fit-content;display:flex;justify-content:space-between;align-content:center;align-items:center;gap:8px}.Card-module__card__info__slot__content{color:#b5460f}`, "",{"version":3,"sources":["webpack://./src/components/Card/Card.module.scss","webpack://./src/styles/variables.scss"],"names":[],"mappings":"AAcA,mBACI,oBAAA,CACA,YAAA,CACA,WAfS,CAgBT,SAAA,CACA,mBCTO,CDUP,QCVO,CDWP,4BAAA,CACA,qBCjBI,CDkBJ,kBCfY,CDiBZ,yBACI,2CAvBM,CA0BV,wBACI,wBAzBQ,CA0BR,gBAAA,CACA,UAAA,CACA,YA/BK,CAgCL,2BAAA,CAGJ,yBACI,YAAA,CACA,cA/BY,CAgCZ,QC7BE,CD8BF,2BAAA,CAEA,+BACI,WAAA,CACA,YAAA,CACA,OC/BA,CDiCA,+EACI,eAAA,CACA,sBAAA,CACA,mBAAA,CACA,2BAAA,CAGJ,sCACI,oBAAA,CAGJ,yCACI,oBAAA,CAIR,+BACI,kBAAA,CACA,YAAA,CACA,6BAAA,CACA,oBAAA,CACA,kBAAA,CACA,OCvDA,CDyDA,wCACI,aCzER","sourcesContent":["@use \'styles/variables.scss\' as var;\\r\\n\\r\\n$card-width: 348px;\\r\\n$card-shadow: 0px 4px 10px 0px rgba(0, 0, 0, 0.25);\\r\\n$card-bg: var.$light;\\r\\n$card-image-bg: #D9D9D9;\\r\\n$card-padding-bottom: var.$space-xl;\\r\\n$card-gap: var.$space-xl;\\r\\n$card-info-padding: 0 var.$space-xs;\\r\\n$card-info-gap: var.$space-l;\\r\\n$card-info-text-gap: var.$space-xxs;\\r\\n$card-info-slot-gap: var.$space-xxs;\\r\\n$card-border: var.$border-radius;\\r\\n\\r\\n.card {\\r\\n    font-family: \'Roboto\';\\r\\n    display: grid;\\r\\n    width: $card-width;\\r\\n    padding: 0;\\r\\n    padding-bottom: $card-padding-bottom;\\r\\n    gap: $card-gap;\\r\\n    grid-template-rows: $card-width 1fr;\\r\\n    background-color: $card-bg;\\r\\n    border-radius: $card-border;\\r\\n\\r\\n    &:hover {\\r\\n        box-shadow: $card-shadow;\\r\\n    }\\r\\n\\r\\n    &__img {\\r\\n        background-color: $card-image-bg;\\r\\n        object-fit: cover;\\r\\n        width: 100%;\\r\\n        height: $card-width;\\r\\n        border-radius: $card-border $card-border 0 0;\\r\\n    }\\r\\n\\r\\n    &__info {\\r\\n        display: grid;\\r\\n        padding: $card-info-padding;\\r\\n        gap: $card-info-gap;\\r\\n        align-content: space-between;\\r\\n        \\r\\n        &__text {\\r\\n            height: 100%;\\r\\n            display: grid;\\r\\n            gap: $card-info-text-gap;\\r\\n\\r\\n            &__title, &__subtitle {\\r\\n                overflow: hidden;\\r\\n                text-overflow: ellipsis;\\r\\n                display: -webkit-box;\\r\\n                -webkit-box-orient: vertical;\\r\\n            }\\r\\n\\r\\n            &__title {\\r\\n                -webkit-line-clamp: 2;\\r\\n            }\\r\\n\\r\\n            &__subtitle {\\r\\n                -webkit-line-clamp: 3;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        &__slot {\\r\\n            height: fit-content;\\r\\n            display: flex;\\r\\n            justify-content: space-between;\\r\\n            align-content: center;\\r\\n            align-items: center;\\r\\n            gap: $card-info-slot-gap;\\r\\n\\r\\n            &__content {\\r\\n                color: var.$brand;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}","$brand: #B5460F;\\r\\n$brand-hover: rgba(181, 70, 15, 0.7);\\r\\n$brand-active: #872D01;\\r\\n\\r\\n$dark: black; \\r\\n$light: white;\\r\\n$gray: #AFADB5;\\r\\n\\r\\n$border-radius: 10px;\\r\\n\\r\\n$space-xl: 24px;\\r\\n$space-l: 20px;\\r\\n$space-m: 16px;\\r\\n$space-s: 14px;\\r\\n$space-xs: 12px;\\r\\n$space-xxs: 8px;"],"sourceRoot":""}]);\n// Exports\n___CSS_LOADER_EXPORT___.locals = {\n\t"card": `Card-module__card`,\n\t"card__img": `Card-module__card__img`,\n\t"card__info": `Card-module__card__info`,\n\t"card__info__text": `Card-module__card__info__text`,\n\t"card__info__text__title": `Card-module__card__info__text__title`,\n\t"card__info__text__subtitle": `Card-module__card__info__text__subtitle`,\n\t"card__info__slot": `Card-module__card__info__slot`,\n\t"card__info__slot__content": `Card-module__card__info__slot__content`\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///2652\n')},5566:(module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   A: () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(963);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(9089);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);\n// Imports\n\n\nvar ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, `.CheckBox-module__cdiv{margin:0;padding:0;width:0;height:0}.CheckBox-module__cdiv__checkbox{display:none;position:absolute;left:0;top:0;width:40px;height:40px;margin:0;padding:0}.CheckBox-module__cdiv__label{display:block;padding:0;margin:0;position:relative;width:40px;height:40px;background-color:#fff;border:1px solid 10px;border-radius:10px}.CheckBox-module__cdiv__label svg{margin-top:-1px;margin-left:-1px;width:40px;height:40px}.CheckBox-module__cdiv__label:hover{background-color:#fff;border:1px solid #b5460f}.CheckBox-module__cdiv__label_disabled{background-color:rgba(255,255,255,.5);border:1px solid rgba(255,255,255,.5);pointer-events:none}.CheckBox-module__cdiv__label_disabled path{stroke:rgba(0,0,0,.2)}`, "",{"version":3,"sources":["webpack://./src/components/CheckBox/CheckBox.module.scss","webpack://./src/styles/variables.scss"],"names":[],"mappings":"AAeA,uBACI,QAAA,CACA,SAAA,CACA,OAAA,CACA,QAAA,CAEA,iCACI,YAAA,CACA,iBAAA,CACA,MAAA,CACA,KAAA,CACA,UAbQ,CAcR,WAdQ,CAeR,QAAA,CACA,SAAA,CAGJ,8BACI,aAAA,CACA,SAAA,CACA,QAAA,CAEA,iBAAA,CACA,UAzBQ,CA0BR,WA1BQ,CA4BR,qBCpCA,CDqCA,qBAAA,CACA,kBCnCQ,CDqCR,kCACI,eAAA,CACA,gBAAA,CACA,UAnCI,CAoCJ,WApCI,CAuCR,oCACI,qBChDJ,CDiDI,wBAAA,CAGJ,uCACI,qCAjDW,CAkDX,qCAAA,CACA,mBAAA,CAEA,4CACI,qBApDgB","sourcesContent":["@use \'styles/variables.scss\' as var;\\r\\n\\r\\n$checkbox-bg: var.$light;\\r\\n$checkbox-border: var.$light;\\r\\n\\r\\n$checkbox-bg-hover: var.$light;\\r\\n$checkbox-border-hover: var.$brand;\\r\\n$checkbox-border: var.$border-radius;\\r\\n\\r\\n$checkbox-bg-disabled: rgba(255, 255, 255, 0.5);\\r\\n$checkbox-border-disabled: rgba(255, 255, 255, 0.5);\\r\\n$checkbox-check-color-disabled: rgba(0, 0, 0, 0.2);\\r\\n\\r\\n$checkbox-size: 40px;\\r\\n\\r\\n.cdiv {\\r\\n    margin: 0;\\r\\n    padding: 0;\\r\\n    width: 0;\\r\\n    height: 0;\\r\\n\\r\\n    &__checkbox {\\r\\n        display: none;\\r\\n        position: absolute;\\r\\n        left: 0;\\r\\n        top: 0;\\r\\n        width: $checkbox-size;\\r\\n        height: $checkbox-size;\\r\\n        margin: 0;\\r\\n        padding: 0;\\r\\n    }\\r\\n\\r\\n    &__label {\\r\\n        display: block;\\r\\n        padding: 0;\\r\\n        margin: 0;\\r\\n\\r\\n        position: relative;\\r\\n        width: $checkbox-size;\\r\\n        height: $checkbox-size;\\r\\n\\r\\n        background-color: $checkbox-bg;\\r\\n        border: 1px solid $checkbox-border;\\r\\n        border-radius: $checkbox-border;\\r\\n\\r\\n        svg {\\r\\n            margin-top: -1px;\\r\\n            margin-left: -1px;\\r\\n            width: $checkbox-size;\\r\\n            height: $checkbox-size;\\r\\n        }\\r\\n\\r\\n        &:hover {\\r\\n            background-color: $checkbox-bg-hover;\\r\\n            border: 1px solid $checkbox-border-hover;\\r\\n        }\\r\\n\\r\\n        &_disabled {\\r\\n            background-color: $checkbox-bg-disabled;\\r\\n            border: 1px solid $checkbox-border-disabled;\\r\\n            pointer-events: none;\\r\\n\\r\\n            path {\\r\\n                stroke: $checkbox-check-color-disabled;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}","$brand: #B5460F;\\r\\n$brand-hover: rgba(181, 70, 15, 0.7);\\r\\n$brand-active: #872D01;\\r\\n\\r\\n$dark: black; \\r\\n$light: white;\\r\\n$gray: #AFADB5;\\r\\n\\r\\n$border-radius: 10px;\\r\\n\\r\\n$space-xl: 24px;\\r\\n$space-l: 20px;\\r\\n$space-m: 16px;\\r\\n$space-s: 14px;\\r\\n$space-xs: 12px;\\r\\n$space-xxs: 8px;"],"sourceRoot":""}]);\n// Exports\n___CSS_LOADER_EXPORT___.locals = {\n\t"cdiv": `CheckBox-module__cdiv`,\n\t"cdiv__checkbox": `CheckBox-module__cdiv__checkbox`,\n\t"cdiv__label": `CheckBox-module__cdiv__label`,\n\t"cdiv__label_disabled": `CheckBox-module__cdiv__label_disabled`\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTU2Ni5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7QUFDZ0g7QUFDakI7QUFDL0YsOEJBQThCLG1GQUEyQixDQUFDLDRGQUFxQztBQUMvRjtBQUNBLGlFQUFpRSxTQUFTLFVBQVUsUUFBUSxTQUFTLGlDQUFpQyxhQUFhLGtCQUFrQixPQUFPLE1BQU0sV0FBVyxZQUFZLFNBQVMsVUFBVSw4QkFBOEIsY0FBYyxVQUFVLFNBQVMsa0JBQWtCLFdBQVcsWUFBWSxzQkFBc0Isc0JBQXNCLG1CQUFtQixrQ0FBa0MsZ0JBQWdCLGlCQUFpQixXQUFXLFlBQVksb0NBQW9DLHNCQUFzQix5QkFBeUIsdUNBQXVDLHNDQUFzQyxzQ0FBc0Msb0JBQW9CLDRDQUE0QyxzQkFBc0IsT0FBTyx3a0JBQXdrQixpQ0FBaUMsaUNBQWlDLHVDQUF1Qyx1Q0FBdUMseUNBQXlDLHdEQUF3RCx3REFBd0QsdURBQXVELDZCQUE2QixlQUFlLGtCQUFrQixtQkFBbUIsaUJBQWlCLGtCQUFrQix5QkFBeUIsMEJBQTBCLCtCQUErQixvQkFBb0IsbUJBQW1CLGtDQUFrQyxtQ0FBbUMsc0JBQXNCLHVCQUF1QixTQUFTLHNCQUFzQiwyQkFBMkIsdUJBQXVCLHNCQUFzQixtQ0FBbUMsa0NBQWtDLG1DQUFtQywrQ0FBK0MsK0NBQStDLDRDQUE0QyxxQkFBcUIsaUNBQWlDLGtDQUFrQyxzQ0FBc0MsdUNBQXVDLGFBQWEseUJBQXlCLHFEQUFxRCx5REFBeUQsYUFBYSw0QkFBNEIsd0RBQXdELDREQUE0RCxxQ0FBcUMsMEJBQTBCLDJEQUEyRCxpQkFBaUIsYUFBYSxTQUFTLEtBQUssbUJBQW1CLHlDQUF5QywyQkFBMkIsc0JBQXNCLGtCQUFrQixtQkFBbUIsNkJBQTZCLHdCQUF3QixtQkFBbUIsbUJBQW1CLG1CQUFtQixvQkFBb0Isb0JBQW9CLG1CQUFtQjtBQUN2eEc7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpRUFBZSx1QkFBdUIsRUFBQyIsInNvdXJjZXMiOlsid2VicGFjazovLzIwMjQta3Rzc3R1ZGlvLWhvbWV3b3Jrcy8uL3NyYy9jb21wb25lbnRzL0NoZWNrQm94L0NoZWNrQm94Lm1vZHVsZS5zY3NzPzdhYzkiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgYC5DaGVja0JveC1tb2R1bGVfX2NkaXZ7bWFyZ2luOjA7cGFkZGluZzowO3dpZHRoOjA7aGVpZ2h0OjB9LkNoZWNrQm94LW1vZHVsZV9fY2Rpdl9fY2hlY2tib3h7ZGlzcGxheTpub25lO3Bvc2l0aW9uOmFic29sdXRlO2xlZnQ6MDt0b3A6MDt3aWR0aDo0MHB4O2hlaWdodDo0MHB4O21hcmdpbjowO3BhZGRpbmc6MH0uQ2hlY2tCb3gtbW9kdWxlX19jZGl2X19sYWJlbHtkaXNwbGF5OmJsb2NrO3BhZGRpbmc6MDttYXJnaW46MDtwb3NpdGlvbjpyZWxhdGl2ZTt3aWR0aDo0MHB4O2hlaWdodDo0MHB4O2JhY2tncm91bmQtY29sb3I6I2ZmZjtib3JkZXI6MXB4IHNvbGlkIDEwcHg7Ym9yZGVyLXJhZGl1czoxMHB4fS5DaGVja0JveC1tb2R1bGVfX2NkaXZfX2xhYmVsIHN2Z3ttYXJnaW4tdG9wOi0xcHg7bWFyZ2luLWxlZnQ6LTFweDt3aWR0aDo0MHB4O2hlaWdodDo0MHB4fS5DaGVja0JveC1tb2R1bGVfX2NkaXZfX2xhYmVsOmhvdmVye2JhY2tncm91bmQtY29sb3I6I2ZmZjtib3JkZXI6MXB4IHNvbGlkICNiNTQ2MGZ9LkNoZWNrQm94LW1vZHVsZV9fY2Rpdl9fbGFiZWxfZGlzYWJsZWR7YmFja2dyb3VuZC1jb2xvcjpyZ2JhKDI1NSwyNTUsMjU1LC41KTtib3JkZXI6MXB4IHNvbGlkIHJnYmEoMjU1LDI1NSwyNTUsLjUpO3BvaW50ZXItZXZlbnRzOm5vbmV9LkNoZWNrQm94LW1vZHVsZV9fY2Rpdl9fbGFiZWxfZGlzYWJsZWQgcGF0aHtzdHJva2U6cmdiYSgwLDAsMCwuMil9YCwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9zcmMvY29tcG9uZW50cy9DaGVja0JveC9DaGVja0JveC5tb2R1bGUuc2Nzc1wiLFwid2VicGFjazovLy4vc3JjL3N0eWxlcy92YXJpYWJsZXMuc2Nzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFlQSx1QkFDSSxRQUFBLENBQ0EsU0FBQSxDQUNBLE9BQUEsQ0FDQSxRQUFBLENBRUEsaUNBQ0ksWUFBQSxDQUNBLGlCQUFBLENBQ0EsTUFBQSxDQUNBLEtBQUEsQ0FDQSxVQWJRLENBY1IsV0FkUSxDQWVSLFFBQUEsQ0FDQSxTQUFBLENBR0osOEJBQ0ksYUFBQSxDQUNBLFNBQUEsQ0FDQSxRQUFBLENBRUEsaUJBQUEsQ0FDQSxVQXpCUSxDQTBCUixXQTFCUSxDQTRCUixxQkNwQ0EsQ0RxQ0EscUJBQUEsQ0FDQSxrQkNuQ1EsQ0RxQ1Isa0NBQ0ksZUFBQSxDQUNBLGdCQUFBLENBQ0EsVUFuQ0ksQ0FvQ0osV0FwQ0ksQ0F1Q1Isb0NBQ0kscUJDaERKLENEaURJLHdCQUFBLENBR0osdUNBQ0kscUNBakRXLENBa0RYLHFDQUFBLENBQ0EsbUJBQUEsQ0FFQSw0Q0FDSSxxQkFwRGdCXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIkB1c2UgJ3N0eWxlcy92YXJpYWJsZXMuc2NzcycgYXMgdmFyO1xcclxcblxcclxcbiRjaGVja2JveC1iZzogdmFyLiRsaWdodDtcXHJcXG4kY2hlY2tib3gtYm9yZGVyOiB2YXIuJGxpZ2h0O1xcclxcblxcclxcbiRjaGVja2JveC1iZy1ob3ZlcjogdmFyLiRsaWdodDtcXHJcXG4kY2hlY2tib3gtYm9yZGVyLWhvdmVyOiB2YXIuJGJyYW5kO1xcclxcbiRjaGVja2JveC1ib3JkZXI6IHZhci4kYm9yZGVyLXJhZGl1cztcXHJcXG5cXHJcXG4kY2hlY2tib3gtYmctZGlzYWJsZWQ6IHJnYmEoMjU1LCAyNTUsIDI1NSwgMC41KTtcXHJcXG4kY2hlY2tib3gtYm9yZGVyLWRpc2FibGVkOiByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuNSk7XFxyXFxuJGNoZWNrYm94LWNoZWNrLWNvbG9yLWRpc2FibGVkOiByZ2JhKDAsIDAsIDAsIDAuMik7XFxyXFxuXFxyXFxuJGNoZWNrYm94LXNpemU6IDQwcHg7XFxyXFxuXFxyXFxuLmNkaXYge1xcclxcbiAgICBtYXJnaW46IDA7XFxyXFxuICAgIHBhZGRpbmc6IDA7XFxyXFxuICAgIHdpZHRoOiAwO1xcclxcbiAgICBoZWlnaHQ6IDA7XFxyXFxuXFxyXFxuICAgICZfX2NoZWNrYm94IHtcXHJcXG4gICAgICAgIGRpc3BsYXk6IG5vbmU7XFxyXFxuICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XFxyXFxuICAgICAgICBsZWZ0OiAwO1xcclxcbiAgICAgICAgdG9wOiAwO1xcclxcbiAgICAgICAgd2lkdGg6ICRjaGVja2JveC1zaXplO1xcclxcbiAgICAgICAgaGVpZ2h0OiAkY2hlY2tib3gtc2l6ZTtcXHJcXG4gICAgICAgIG1hcmdpbjogMDtcXHJcXG4gICAgICAgIHBhZGRpbmc6IDA7XFxyXFxuICAgIH1cXHJcXG5cXHJcXG4gICAgJl9fbGFiZWwge1xcclxcbiAgICAgICAgZGlzcGxheTogYmxvY2s7XFxyXFxuICAgICAgICBwYWRkaW5nOiAwO1xcclxcbiAgICAgICAgbWFyZ2luOiAwO1xcclxcblxcclxcbiAgICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xcclxcbiAgICAgICAgd2lkdGg6ICRjaGVja2JveC1zaXplO1xcclxcbiAgICAgICAgaGVpZ2h0OiAkY2hlY2tib3gtc2l6ZTtcXHJcXG5cXHJcXG4gICAgICAgIGJhY2tncm91bmQtY29sb3I6ICRjaGVja2JveC1iZztcXHJcXG4gICAgICAgIGJvcmRlcjogMXB4IHNvbGlkICRjaGVja2JveC1ib3JkZXI7XFxyXFxuICAgICAgICBib3JkZXItcmFkaXVzOiAkY2hlY2tib3gtYm9yZGVyO1xcclxcblxcclxcbiAgICAgICAgc3ZnIHtcXHJcXG4gICAgICAgICAgICBtYXJnaW4tdG9wOiAtMXB4O1xcclxcbiAgICAgICAgICAgIG1hcmdpbi1sZWZ0OiAtMXB4O1xcclxcbiAgICAgICAgICAgIHdpZHRoOiAkY2hlY2tib3gtc2l6ZTtcXHJcXG4gICAgICAgICAgICBoZWlnaHQ6ICRjaGVja2JveC1zaXplO1xcclxcbiAgICAgICAgfVxcclxcblxcclxcbiAgICAgICAgJjpob3ZlciB7XFxyXFxuICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogJGNoZWNrYm94LWJnLWhvdmVyO1xcclxcbiAgICAgICAgICAgIGJvcmRlcjogMXB4IHNvbGlkICRjaGVja2JveC1ib3JkZXItaG92ZXI7XFxyXFxuICAgICAgICB9XFxyXFxuXFxyXFxuICAgICAgICAmX2Rpc2FibGVkIHtcXHJcXG4gICAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAkY2hlY2tib3gtYmctZGlzYWJsZWQ7XFxyXFxuICAgICAgICAgICAgYm9yZGVyOiAxcHggc29saWQgJGNoZWNrYm94LWJvcmRlci1kaXNhYmxlZDtcXHJcXG4gICAgICAgICAgICBwb2ludGVyLWV2ZW50czogbm9uZTtcXHJcXG5cXHJcXG4gICAgICAgICAgICBwYXRoIHtcXHJcXG4gICAgICAgICAgICAgICAgc3Ryb2tlOiAkY2hlY2tib3gtY2hlY2stY29sb3ItZGlzYWJsZWQ7XFxyXFxuICAgICAgICAgICAgfVxcclxcbiAgICAgICAgfVxcclxcbiAgICB9XFxyXFxufVwiLFwiJGJyYW5kOiAjQjU0NjBGO1xcclxcbiRicmFuZC1ob3ZlcjogcmdiYSgxODEsIDcwLCAxNSwgMC43KTtcXHJcXG4kYnJhbmQtYWN0aXZlOiAjODcyRDAxO1xcclxcblxcclxcbiRkYXJrOiBibGFjazsgXFxyXFxuJGxpZ2h0OiB3aGl0ZTtcXHJcXG4kZ3JheTogI0FGQURCNTtcXHJcXG5cXHJcXG4kYm9yZGVyLXJhZGl1czogMTBweDtcXHJcXG5cXHJcXG4kc3BhY2UteGw6IDI0cHg7XFxyXFxuJHNwYWNlLWw6IDIwcHg7XFxyXFxuJHNwYWNlLW06IDE2cHg7XFxyXFxuJHNwYWNlLXM6IDE0cHg7XFxyXFxuJHNwYWNlLXhzOiAxMnB4O1xcclxcbiRzcGFjZS14eHM6IDhweDtcIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLmxvY2FscyA9IHtcblx0XCJjZGl2XCI6IGBDaGVja0JveC1tb2R1bGVfX2NkaXZgLFxuXHRcImNkaXZfX2NoZWNrYm94XCI6IGBDaGVja0JveC1tb2R1bGVfX2NkaXZfX2NoZWNrYm94YCxcblx0XCJjZGl2X19sYWJlbFwiOiBgQ2hlY2tCb3gtbW9kdWxlX19jZGl2X19sYWJlbGAsXG5cdFwiY2Rpdl9fbGFiZWxfZGlzYWJsZWRcIjogYENoZWNrQm94LW1vZHVsZV9fY2Rpdl9fbGFiZWxfZGlzYWJsZWRgXG59O1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///5566\n')},348:(module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   A: () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(963);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(9089);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);\n// Imports\n\n\nvar ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, `.ContentFilters-module__content-filters{display:flex;flex-direction:column;gap:20px;width:100%}.ContentFilters-module__content-filters__search{display:flex;gap:19px;justify-content:space-between}.ContentFilters-module__content-filters__search__input{width:100%}.ContentFilters-module__content-filters__category{display:flex;justify-content:space-between;align-items:center}.ContentFilters-module__content-filters__category__block{width:300px}.ContentFilters-module__content-filters__category__shower{cursor:pointer}.ContentFilters-module__content-filters__other{background-color:#ffecd5;border-radius:10px;border:3px solid #fff;box-shadow:0px 4px 10px 0px rgba(0,0,0,.25);z-index:100;position:fixed;top:10%;max-height:100%;padding:24px;display:flex;flex-direction:column;gap:12px;max-width:80%;min-width:800px;overflow-y:scroll;-ms-overflow-style:none;scrollbar-width:none}.ContentFilters-module__content-filters__other::-webkit-scrollbar{display:none}.ContentFilters-module__content-filters__other__header{text-align:center;padding-bottom:12px}.ContentFilters-module__content-filters__other__hide{width:100%;display:flex;justify-content:end}.ContentFilters-module__content-filters__other__multi,.ContentFilters-module__content-filters__other__string,.ContentFilters-module__content-filters__other_number,.ContentFilters-module__content-filters__other__boolean{position:relative;display:grid;grid-template-columns:repeat(auto-fit, 200px);justify-content:space-between;row-gap:12px;column-gap:8px}`, "",{"version":3,"sources":["webpack://./src/components/ContentFilters/ContentFilters.module.scss","webpack://./src/styles/variables.scss"],"names":[],"mappings":"AAOA,wCACI,YAAA,CACA,qBAAA,CACA,QARkB,CASlB,UAAA,CAEA,gDACI,YAAA,CACA,QAZqB,CAarB,6BAAA,CAEA,uDACI,UAAA,CAIR,kDACI,YAAA,CACA,6BAAA,CACA,kBAAA,CAEA,yDACI,WAzBqB,CA4BzB,0DACI,cAAA,CAIR,+CACI,wBAAA,CACA,kBC/BQ,CDgCR,qBAAA,CACA,2CApCS,CAqCT,WAAA,CACA,cAAA,CACA,OAAA,CACA,eAAA,CACA,YAAA,CAEA,YAAA,CACA,qBAAA,CACA,QAAA,CAEA,aAAA,CACA,eAAA,CACA,iBAAA,CAKA,uBAAA,CACA,oBAAA,CALA,kEACI,YAAA,CAMJ,uDACI,iBAAA,CACA,mBAAA,CAGJ,qDACI,UAAA,CACA,YAAA,CACA,mBAAA,CAGJ,2NACI,iBAAA,CACA,YAAA,CACA,6CAAA,CACA,6BAAA,CACA,YAAA,CACA,cAAA","sourcesContent":["@use \'styles/variables.scss\' as var;\\r\\n\\r\\n$content-filters-gap: 20px;\\r\\n$content-filters-search-gap: 19px;\\r\\n$content-filters-category-width: 300px;\\r\\n$filters-shadow: 0px 4px 10px 0px rgba(0, 0, 0, 0.25);\\r\\n\\r\\n.content-filters {\\r\\n    display: flex;\\r\\n    flex-direction: column;\\r\\n    gap: $content-filters-gap;\\r\\n    width: 100%;\\r\\n\\r\\n    &__search {\\r\\n        display: flex;\\r\\n        gap: $content-filters-search-gap;\\r\\n        justify-content: space-between;\\r\\n\\r\\n        &__input {\\r\\n            width: 100%;    \\r\\n        }\\r\\n    }\\r\\n\\r\\n    &__category {\\r\\n        display: flex;\\r\\n        justify-content: space-between;\\r\\n        align-items: center;\\r\\n\\r\\n        &__block {\\r\\n            width: $content-filters-category-width;\\r\\n        }\\r\\n\\r\\n        &__shower {\\r\\n            cursor: pointer;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    &__other {\\r\\n        background-color: #ffecd5;\\r\\n        border-radius: var.$border-radius;\\r\\n        border: 3px solid var.$light;\\r\\n        box-shadow: $filters-shadow;\\r\\n        z-index: 100;\\r\\n        position: fixed;\\r\\n        top: 10%;\\r\\n        max-height: 100%;\\r\\n        padding: 24px;\\r\\n\\r\\n        display: flex;\\r\\n        flex-direction: column;\\r\\n        gap: 12px;\\r\\n\\r\\n        max-width: 80%;\\r\\n        min-width: 800px;\\r\\n        overflow-y: scroll;\\r\\n        &::-webkit-scrollbar {\\r\\n            display: none;\\r\\n        }\\r\\n\\r\\n        -ms-overflow-style: none;\\r\\n        scrollbar-width: none;\\r\\n\\r\\n        &__header {\\r\\n            text-align: center;\\r\\n            padding-bottom: 12px; \\r\\n        }\\r\\n\\r\\n        &__hide {\\r\\n            width: 100%;\\r\\n            display: flex;\\r\\n            justify-content: end;\\r\\n        }\\r\\n\\r\\n        &__multi, &__string, &_number, &__boolean {\\r\\n            position: relative;\\r\\n            display: grid;\\r\\n            grid-template-columns: repeat(auto-fit, 200px);\\r\\n            justify-content: space-between;\\r\\n            row-gap: 12px;\\r\\n            column-gap: 8px;\\r\\n        }\\r\\n    }\\r\\n}","$brand: #B5460F;\\r\\n$brand-hover: rgba(181, 70, 15, 0.7);\\r\\n$brand-active: #872D01;\\r\\n\\r\\n$dark: black; \\r\\n$light: white;\\r\\n$gray: #AFADB5;\\r\\n\\r\\n$border-radius: 10px;\\r\\n\\r\\n$space-xl: 24px;\\r\\n$space-l: 20px;\\r\\n$space-m: 16px;\\r\\n$space-s: 14px;\\r\\n$space-xs: 12px;\\r\\n$space-xxs: 8px;"],"sourceRoot":""}]);\n// Exports\n___CSS_LOADER_EXPORT___.locals = {\n\t"content-filters": `ContentFilters-module__content-filters`,\n\t"content-filters__search": `ContentFilters-module__content-filters__search`,\n\t"content-filters__search__input": `ContentFilters-module__content-filters__search__input`,\n\t"content-filters__category": `ContentFilters-module__content-filters__category`,\n\t"content-filters__category__block": `ContentFilters-module__content-filters__category__block`,\n\t"content-filters__category__shower": `ContentFilters-module__content-filters__category__shower`,\n\t"content-filters__other": `ContentFilters-module__content-filters__other`,\n\t"content-filters__other__header": `ContentFilters-module__content-filters__other__header`,\n\t"content-filters__other__hide": `ContentFilters-module__content-filters__other__hide`,\n\t"content-filters__other__multi": `ContentFilters-module__content-filters__other__multi`,\n\t"content-filters__other__string": `ContentFilters-module__content-filters__other__string`,\n\t"content-filters__other_number": `ContentFilters-module__content-filters__other_number`,\n\t"content-filters__other__boolean": `ContentFilters-module__content-filters__other__boolean`\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///348\n')},4762:(module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   A: () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(963);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(9089);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);\n// Imports\n\n\nvar ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, `.ErrorBox-module__error-box{display:flex;flex-direction:column;justify-content:center;align-items:center;gap:14px}.ErrorBox-module__error-box__message{max-width:30%;text-align:justify}`, "",{"version":3,"sources":["webpack://./src/components/ErrorBox/ErrorBox.module.scss","webpack://./src/styles/variables.scss"],"names":[],"mappings":"AAIA,4BACI,YAAA,CACA,qBAAA,CACA,sBAAA,CACA,kBAAA,CACA,QCIM,CDFN,qCACI,aAAA,CACA,kBAAA","sourcesContent":["@use \'styles/variables.scss\' as var;\\r\\n\\r\\n$error-box-gap: var.$space-s;\\r\\n\\r\\n.error-box {\\r\\n    display: flex;\\r\\n    flex-direction: column;\\r\\n    justify-content: center;\\r\\n    align-items: center;\\r\\n    gap: $error-box-gap;\\r\\n\\r\\n    &__message {\\r\\n        max-width: 30%;\\r\\n        text-align: justify;\\r\\n    }\\r\\n}","$brand: #B5460F;\\r\\n$brand-hover: rgba(181, 70, 15, 0.7);\\r\\n$brand-active: #872D01;\\r\\n\\r\\n$dark: black; \\r\\n$light: white;\\r\\n$gray: #AFADB5;\\r\\n\\r\\n$border-radius: 10px;\\r\\n\\r\\n$space-xl: 24px;\\r\\n$space-l: 20px;\\r\\n$space-m: 16px;\\r\\n$space-s: 14px;\\r\\n$space-xs: 12px;\\r\\n$space-xxs: 8px;"],"sourceRoot":""}]);\n// Exports\n___CSS_LOADER_EXPORT___.locals = {\n\t"error-box": `ErrorBox-module__error-box`,\n\t"error-box__message": `ErrorBox-module__error-box__message`\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDc2Mi5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7QUFDZ0g7QUFDakI7QUFDL0YsOEJBQThCLG1GQUEyQixDQUFDLDRGQUFxQztBQUMvRjtBQUNBLHNFQUFzRSxhQUFhLHNCQUFzQix1QkFBdUIsbUJBQW1CLFNBQVMscUNBQXFDLGNBQWMsbUJBQW1CLE9BQU8sZ1NBQWdTLHFDQUFxQyxvQkFBb0Isc0JBQXNCLCtCQUErQixnQ0FBZ0MsNEJBQTRCLDRCQUE0Qix3QkFBd0IsMkJBQTJCLGdDQUFnQyxTQUFTLEtBQUssbUJBQW1CLHlDQUF5QywyQkFBMkIsc0JBQXNCLGtCQUFrQixtQkFBbUIsNkJBQTZCLHdCQUF3QixtQkFBbUIsbUJBQW1CLG1CQUFtQixvQkFBb0Isb0JBQW9CLG1CQUFtQjtBQUMzbUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlFQUFlLHVCQUF1QixFQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vMjAyNC1rdHNzdHVkaW8taG9tZXdvcmtzLy4vc3JjL2NvbXBvbmVudHMvRXJyb3JCb3gvRXJyb3JCb3gubW9kdWxlLnNjc3M/YTBjYiJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBgLkVycm9yQm94LW1vZHVsZV9fZXJyb3ItYm94e2Rpc3BsYXk6ZmxleDtmbGV4LWRpcmVjdGlvbjpjb2x1bW47anVzdGlmeS1jb250ZW50OmNlbnRlcjthbGlnbi1pdGVtczpjZW50ZXI7Z2FwOjE0cHh9LkVycm9yQm94LW1vZHVsZV9fZXJyb3ItYm94X19tZXNzYWdle21heC13aWR0aDozMCU7dGV4dC1hbGlnbjpqdXN0aWZ5fWAsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vc3JjL2NvbXBvbmVudHMvRXJyb3JCb3gvRXJyb3JCb3gubW9kdWxlLnNjc3NcIixcIndlYnBhY2s6Ly8uL3NyYy9zdHlsZXMvdmFyaWFibGVzLnNjc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBSUEsNEJBQ0ksWUFBQSxDQUNBLHFCQUFBLENBQ0Esc0JBQUEsQ0FDQSxrQkFBQSxDQUNBLFFDSU0sQ0RGTixxQ0FDSSxhQUFBLENBQ0Esa0JBQUFcIixcInNvdXJjZXNDb250ZW50XCI6W1wiQHVzZSAnc3R5bGVzL3ZhcmlhYmxlcy5zY3NzJyBhcyB2YXI7XFxyXFxuXFxyXFxuJGVycm9yLWJveC1nYXA6IHZhci4kc3BhY2UtcztcXHJcXG5cXHJcXG4uZXJyb3ItYm94IHtcXHJcXG4gICAgZGlzcGxheTogZmxleDtcXHJcXG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXHJcXG4gICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxyXFxuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxyXFxuICAgIGdhcDogJGVycm9yLWJveC1nYXA7XFxyXFxuXFxyXFxuICAgICZfX21lc3NhZ2Uge1xcclxcbiAgICAgICAgbWF4LXdpZHRoOiAzMCU7XFxyXFxuICAgICAgICB0ZXh0LWFsaWduOiBqdXN0aWZ5O1xcclxcbiAgICB9XFxyXFxufVwiLFwiJGJyYW5kOiAjQjU0NjBGO1xcclxcbiRicmFuZC1ob3ZlcjogcmdiYSgxODEsIDcwLCAxNSwgMC43KTtcXHJcXG4kYnJhbmQtYWN0aXZlOiAjODcyRDAxO1xcclxcblxcclxcbiRkYXJrOiBibGFjazsgXFxyXFxuJGxpZ2h0OiB3aGl0ZTtcXHJcXG4kZ3JheTogI0FGQURCNTtcXHJcXG5cXHJcXG4kYm9yZGVyLXJhZGl1czogMTBweDtcXHJcXG5cXHJcXG4kc3BhY2UteGw6IDI0cHg7XFxyXFxuJHNwYWNlLWw6IDIwcHg7XFxyXFxuJHNwYWNlLW06IDE2cHg7XFxyXFxuJHNwYWNlLXM6IDE0cHg7XFxyXFxuJHNwYWNlLXhzOiAxMnB4O1xcclxcbiRzcGFjZS14eHM6IDhweDtcIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLmxvY2FscyA9IHtcblx0XCJlcnJvci1ib3hcIjogYEVycm9yQm94LW1vZHVsZV9fZXJyb3ItYm94YCxcblx0XCJlcnJvci1ib3hfX21lc3NhZ2VcIjogYEVycm9yQm94LW1vZHVsZV9fZXJyb3ItYm94X19tZXNzYWdlYFxufTtcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///4762\n')},86:(module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   A: () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(963);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(9089);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);\n// Imports\n\n\nvar ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, `.Header-module__header{margin:0;box-sizing:border-box;width:100%;height:64px;padding:0 100px 0 100px;background-color:#fff;display:flex;justify-content:space-between}.Header-module__header__left{display:flex;gap:80px}.Header-module__header__right{display:flex;align-items:center}`, "",{"version":3,"sources":["webpack://./src/components/Header/Header.module.scss","webpack://./src/styles/variables.scss"],"names":[],"mappings":"AAOA,uBACI,QAAA,CACA,qBAAA,CACA,UAAA,CACA,WARO,CASP,uBARa,CASb,qBCRI,CDSJ,YAAA,CACA,6BAAA,CAEA,6BACI,YAAA,CACA,QAdU,CAiBd,8BACI,YAAA,CACA,kBAAA","sourcesContent":["@use \'styles/variables.scss\' as var;\\r\\n\\r\\n$header-bg: var.$light;\\r\\n$header-h: 64px;\\r\\n$header-padding: 0 100px 0 100px; \\r\\n$header-left-gap: 80px;\\r\\n\\r\\n.header {\\r\\n    margin: 0;\\r\\n    box-sizing: border-box;\\r\\n    width: 100%;\\r\\n    height: $header-h;\\r\\n    padding: $header-padding;\\r\\n    background-color: $header-bg;\\r\\n    display: flex;\\r\\n    justify-content: space-between;\\r\\n\\r\\n    &__left {\\r\\n        display: flex;\\r\\n        gap: $header-left-gap;\\r\\n    }\\r\\n\\r\\n    &__right {\\r\\n        display: flex;\\r\\n        align-items: center;\\r\\n    }\\r\\n}","$brand: #B5460F;\\r\\n$brand-hover: rgba(181, 70, 15, 0.7);\\r\\n$brand-active: #872D01;\\r\\n\\r\\n$dark: black; \\r\\n$light: white;\\r\\n$gray: #AFADB5;\\r\\n\\r\\n$border-radius: 10px;\\r\\n\\r\\n$space-xl: 24px;\\r\\n$space-l: 20px;\\r\\n$space-m: 16px;\\r\\n$space-s: 14px;\\r\\n$space-xs: 12px;\\r\\n$space-xxs: 8px;"],"sourceRoot":""}]);\n// Exports\n___CSS_LOADER_EXPORT___.locals = {\n\t"header": `Header-module__header`,\n\t"header__left": `Header-module__header__left`,\n\t"header__right": `Header-module__header__right`\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiODYuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBO0FBQ2dIO0FBQ2pCO0FBQy9GLDhCQUE4QixtRkFBMkIsQ0FBQyw0RkFBcUM7QUFDL0Y7QUFDQSxpRUFBaUUsU0FBUyxzQkFBc0IsV0FBVyxZQUFZLHdCQUF3QixzQkFBc0IsYUFBYSw4QkFBOEIsNkJBQTZCLGFBQWEsU0FBUyw4QkFBOEIsYUFBYSxtQkFBbUIsT0FBTyxzVkFBc1YsK0JBQStCLG9CQUFvQixzQ0FBc0MsMkJBQTJCLGlCQUFpQixrQkFBa0IsK0JBQStCLG9CQUFvQiwwQkFBMEIsaUNBQWlDLHFDQUFxQyxzQkFBc0IsdUNBQXVDLHFCQUFxQiwwQkFBMEIsa0NBQWtDLFNBQVMsc0JBQXNCLDBCQUEwQixnQ0FBZ0MsU0FBUyxLQUFLLG1CQUFtQix5Q0FBeUMsMkJBQTJCLHNCQUFzQixrQkFBa0IsbUJBQW1CLDZCQUE2Qix3QkFBd0IsbUJBQW1CLG1CQUFtQixtQkFBbUIsb0JBQW9CLG9CQUFvQixtQkFBbUI7QUFDeC9DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlFQUFlLHVCQUF1QixFQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vMjAyNC1rdHNzdHVkaW8taG9tZXdvcmtzLy4vc3JjL2NvbXBvbmVudHMvSGVhZGVyL0hlYWRlci5tb2R1bGUuc2Nzcz9jN2ZhIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIGAuSGVhZGVyLW1vZHVsZV9faGVhZGVye21hcmdpbjowO2JveC1zaXppbmc6Ym9yZGVyLWJveDt3aWR0aDoxMDAlO2hlaWdodDo2NHB4O3BhZGRpbmc6MCAxMDBweCAwIDEwMHB4O2JhY2tncm91bmQtY29sb3I6I2ZmZjtkaXNwbGF5OmZsZXg7anVzdGlmeS1jb250ZW50OnNwYWNlLWJldHdlZW59LkhlYWRlci1tb2R1bGVfX2hlYWRlcl9fbGVmdHtkaXNwbGF5OmZsZXg7Z2FwOjgwcHh9LkhlYWRlci1tb2R1bGVfX2hlYWRlcl9fcmlnaHR7ZGlzcGxheTpmbGV4O2FsaWduLWl0ZW1zOmNlbnRlcn1gLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL3NyYy9jb21wb25lbnRzL0hlYWRlci9IZWFkZXIubW9kdWxlLnNjc3NcIixcIndlYnBhY2s6Ly8uL3NyYy9zdHlsZXMvdmFyaWFibGVzLnNjc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBT0EsdUJBQ0ksUUFBQSxDQUNBLHFCQUFBLENBQ0EsVUFBQSxDQUNBLFdBUk8sQ0FTUCx1QkFSYSxDQVNiLHFCQ1JJLENEU0osWUFBQSxDQUNBLDZCQUFBLENBRUEsNkJBQ0ksWUFBQSxDQUNBLFFBZFUsQ0FpQmQsOEJBQ0ksWUFBQSxDQUNBLGtCQUFBXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIkB1c2UgJ3N0eWxlcy92YXJpYWJsZXMuc2NzcycgYXMgdmFyO1xcclxcblxcclxcbiRoZWFkZXItYmc6IHZhci4kbGlnaHQ7XFxyXFxuJGhlYWRlci1oOiA2NHB4O1xcclxcbiRoZWFkZXItcGFkZGluZzogMCAxMDBweCAwIDEwMHB4OyBcXHJcXG4kaGVhZGVyLWxlZnQtZ2FwOiA4MHB4O1xcclxcblxcclxcbi5oZWFkZXIge1xcclxcbiAgICBtYXJnaW46IDA7XFxyXFxuICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XFxyXFxuICAgIHdpZHRoOiAxMDAlO1xcclxcbiAgICBoZWlnaHQ6ICRoZWFkZXItaDtcXHJcXG4gICAgcGFkZGluZzogJGhlYWRlci1wYWRkaW5nO1xcclxcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAkaGVhZGVyLWJnO1xcclxcbiAgICBkaXNwbGF5OiBmbGV4O1xcclxcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XFxyXFxuXFxyXFxuICAgICZfX2xlZnQge1xcclxcbiAgICAgICAgZGlzcGxheTogZmxleDtcXHJcXG4gICAgICAgIGdhcDogJGhlYWRlci1sZWZ0LWdhcDtcXHJcXG4gICAgfVxcclxcblxcclxcbiAgICAmX19yaWdodCB7XFxyXFxuICAgICAgICBkaXNwbGF5OiBmbGV4O1xcclxcbiAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXHJcXG4gICAgfVxcclxcbn1cIixcIiRicmFuZDogI0I1NDYwRjtcXHJcXG4kYnJhbmQtaG92ZXI6IHJnYmEoMTgxLCA3MCwgMTUsIDAuNyk7XFxyXFxuJGJyYW5kLWFjdGl2ZTogIzg3MkQwMTtcXHJcXG5cXHJcXG4kZGFyazogYmxhY2s7IFxcclxcbiRsaWdodDogd2hpdGU7XFxyXFxuJGdyYXk6ICNBRkFEQjU7XFxyXFxuXFxyXFxuJGJvcmRlci1yYWRpdXM6IDEwcHg7XFxyXFxuXFxyXFxuJHNwYWNlLXhsOiAyNHB4O1xcclxcbiRzcGFjZS1sOiAyMHB4O1xcclxcbiRzcGFjZS1tOiAxNnB4O1xcclxcbiRzcGFjZS1zOiAxNHB4O1xcclxcbiRzcGFjZS14czogMTJweDtcXHJcXG4kc3BhY2UteHhzOiA4cHg7XCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5sb2NhbHMgPSB7XG5cdFwiaGVhZGVyXCI6IGBIZWFkZXItbW9kdWxlX19oZWFkZXJgLFxuXHRcImhlYWRlcl9fbGVmdFwiOiBgSGVhZGVyLW1vZHVsZV9faGVhZGVyX19sZWZ0YCxcblx0XCJoZWFkZXJfX3JpZ2h0XCI6IGBIZWFkZXItbW9kdWxlX19oZWFkZXJfX3JpZ2h0YFxufTtcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///86\n')},7341:(module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   A: () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(963);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(9089);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);\n// Imports\n\n\nvar ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, `.LogoBlock-module__logo-block{display:flex;gap:20px;align-items:center;align-content:center;padding:0}`, "",{"version":3,"sources":["webpack://./src/components/Header/components/LogoBlock/LogoBlock.module.scss"],"names":[],"mappings":"AAEA,8BACI,YAAA,CACA,QAJa,CAKb,kBAAA,CACA,oBAAA,CACA,SAAA","sourcesContent":["$logo-block-gap: 20px;\\r\\n\\r\\n.logo-block {\\r\\n    display: flex;\\r\\n    gap: $logo-block-gap;\\r\\n    align-items: center;\\r\\n    align-content: center;\\r\\n    padding: 0;\\r\\n}"],"sourceRoot":""}]);\n// Exports\n___CSS_LOADER_EXPORT___.locals = {\n\t"logo-block": `LogoBlock-module__logo-block`\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNzM0MS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7QUFDc0g7QUFDakI7QUFDckcsOEJBQThCLG1GQUEyQixDQUFDLDRGQUFxQztBQUMvRjtBQUNBLHdFQUF3RSxhQUFhLFNBQVMsbUJBQW1CLHFCQUFxQixVQUFVLE9BQU8sa09BQWtPLHFCQUFxQixzQkFBc0IsNkJBQTZCLDRCQUE0Qiw4QkFBOEIsbUJBQW1CLEtBQUssbUJBQW1CO0FBQ3RpQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlFQUFlLHVCQUF1QixFQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vMjAyNC1rdHNzdHVkaW8taG9tZXdvcmtzLy4vc3JjL2NvbXBvbmVudHMvSGVhZGVyL2NvbXBvbmVudHMvTG9nb0Jsb2NrL0xvZ29CbG9jay5tb2R1bGUuc2Nzcz80YzE4Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIGAuTG9nb0Jsb2NrLW1vZHVsZV9fbG9nby1ibG9ja3tkaXNwbGF5OmZsZXg7Z2FwOjIwcHg7YWxpZ24taXRlbXM6Y2VudGVyO2FsaWduLWNvbnRlbnQ6Y2VudGVyO3BhZGRpbmc6MH1gLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL3NyYy9jb21wb25lbnRzL0hlYWRlci9jb21wb25lbnRzL0xvZ29CbG9jay9Mb2dvQmxvY2subW9kdWxlLnNjc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBRUEsOEJBQ0ksWUFBQSxDQUNBLFFBSmEsQ0FLYixrQkFBQSxDQUNBLG9CQUFBLENBQ0EsU0FBQVwiLFwic291cmNlc0NvbnRlbnRcIjpbXCIkbG9nby1ibG9jay1nYXA6IDIwcHg7XFxyXFxuXFxyXFxuLmxvZ28tYmxvY2sge1xcclxcbiAgICBkaXNwbGF5OiBmbGV4O1xcclxcbiAgICBnYXA6ICRsb2dvLWJsb2NrLWdhcDtcXHJcXG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXHJcXG4gICAgYWxpZ24tY29udGVudDogY2VudGVyO1xcclxcbiAgICBwYWRkaW5nOiAwO1xcclxcbn1cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLmxvY2FscyA9IHtcblx0XCJsb2dvLWJsb2NrXCI6IGBMb2dvQmxvY2stbW9kdWxlX19sb2dvLWJsb2NrYFxufTtcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///7341\n')},5725:(module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   A: () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(963);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(9089);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);\n// Imports\n\n\nvar ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, `.Menu-module__menu{display:flex;align-items:center;align-content:center;gap:16px}.Menu-module__menu__option:hover{color:#b5460f;cursor:pointer}.Menu-module__menu__option_selected{color:#b5460f}`, "",{"version":3,"sources":["webpack://./src/components/Header/components/Menu/Menu.module.scss","webpack://./src/styles/variables.scss"],"names":[],"mappings":"AAKA,mBACI,YAAA,CACA,kBAAA,CACA,oBAAA,CACA,QCGM,CDCF,iCACI,aCdJ,CDeI,cAAA,CAGJ,oCACI,aCnBJ","sourcesContent":["@use \'styles/variables.scss\' as var;\\r\\n\\r\\n$menu-gap: var.$space-m;\\r\\n$menu-option-hover: var.$brand;\\r\\n\\r\\n.menu {\\r\\n    display: flex;\\r\\n    align-items: center;\\r\\n    align-content: center;\\r\\n    gap: $menu-gap;\\r\\n\\r\\n    &__option {\\r\\n\\r\\n        &:hover {\\r\\n            color: $menu-option-hover;\\r\\n            cursor: pointer;\\r\\n        }\\r\\n\\r\\n        &_selected {\\r\\n            color: $menu-option-hover;\\r\\n        }\\r\\n    }\\r\\n}","$brand: #B5460F;\\r\\n$brand-hover: rgba(181, 70, 15, 0.7);\\r\\n$brand-active: #872D01;\\r\\n\\r\\n$dark: black; \\r\\n$light: white;\\r\\n$gray: #AFADB5;\\r\\n\\r\\n$border-radius: 10px;\\r\\n\\r\\n$space-xl: 24px;\\r\\n$space-l: 20px;\\r\\n$space-m: 16px;\\r\\n$space-s: 14px;\\r\\n$space-xs: 12px;\\r\\n$space-xxs: 8px;"],"sourceRoot":""}]);\n// Exports\n___CSS_LOADER_EXPORT___.locals = {\n\t"menu": `Menu-module__menu`,\n\t"menu__option": `Menu-module__menu__option`,\n\t"menu__option_selected": `Menu-module__menu__option_selected`\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTcyNS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7QUFDc0g7QUFDakI7QUFDckcsOEJBQThCLG1GQUEyQixDQUFDLDRGQUFxQztBQUMvRjtBQUNBLDZEQUE2RCxhQUFhLG1CQUFtQixxQkFBcUIsU0FBUyxpQ0FBaUMsY0FBYyxlQUFlLG9DQUFvQyxjQUFjLE9BQU8sK1NBQStTLGdDQUFnQyxtQ0FBbUMsZUFBZSxzQkFBc0IsNEJBQTRCLDhCQUE4Qix1QkFBdUIsdUJBQXVCLHlCQUF5QiwwQ0FBMEMsZ0NBQWdDLGFBQWEsNEJBQTRCLDBDQUEwQyxhQUFhLFNBQVMsS0FBSyxtQkFBbUIseUNBQXlDLDJCQUEyQixzQkFBc0Isa0JBQWtCLG1CQUFtQiw2QkFBNkIsd0JBQXdCLG1CQUFtQixtQkFBbUIsbUJBQW1CLG9CQUFvQixvQkFBb0IsbUJBQW1CO0FBQzd2QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpRUFBZSx1QkFBdUIsRUFBQyIsInNvdXJjZXMiOlsid2VicGFjazovLzIwMjQta3Rzc3R1ZGlvLWhvbWV3b3Jrcy8uL3NyYy9jb21wb25lbnRzL0hlYWRlci9jb21wb25lbnRzL01lbnUvTWVudS5tb2R1bGUuc2Nzcz80MTE4Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIGAuTWVudS1tb2R1bGVfX21lbnV7ZGlzcGxheTpmbGV4O2FsaWduLWl0ZW1zOmNlbnRlcjthbGlnbi1jb250ZW50OmNlbnRlcjtnYXA6MTZweH0uTWVudS1tb2R1bGVfX21lbnVfX29wdGlvbjpob3Zlcntjb2xvcjojYjU0NjBmO2N1cnNvcjpwb2ludGVyfS5NZW51LW1vZHVsZV9fbWVudV9fb3B0aW9uX3NlbGVjdGVke2NvbG9yOiNiNTQ2MGZ9YCwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9zcmMvY29tcG9uZW50cy9IZWFkZXIvY29tcG9uZW50cy9NZW51L01lbnUubW9kdWxlLnNjc3NcIixcIndlYnBhY2s6Ly8uL3NyYy9zdHlsZXMvdmFyaWFibGVzLnNjc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBS0EsbUJBQ0ksWUFBQSxDQUNBLGtCQUFBLENBQ0Esb0JBQUEsQ0FDQSxRQ0dNLENEQ0YsaUNBQ0ksYUNkSixDRGVJLGNBQUEsQ0FHSixvQ0FDSSxhQ25CSlwiLFwic291cmNlc0NvbnRlbnRcIjpbXCJAdXNlICdzdHlsZXMvdmFyaWFibGVzLnNjc3MnIGFzIHZhcjtcXHJcXG5cXHJcXG4kbWVudS1nYXA6IHZhci4kc3BhY2UtbTtcXHJcXG4kbWVudS1vcHRpb24taG92ZXI6IHZhci4kYnJhbmQ7XFxyXFxuXFxyXFxuLm1lbnUge1xcclxcbiAgICBkaXNwbGF5OiBmbGV4O1xcclxcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xcclxcbiAgICBhbGlnbi1jb250ZW50OiBjZW50ZXI7XFxyXFxuICAgIGdhcDogJG1lbnUtZ2FwO1xcclxcblxcclxcbiAgICAmX19vcHRpb24ge1xcclxcblxcclxcbiAgICAgICAgJjpob3ZlciB7XFxyXFxuICAgICAgICAgICAgY29sb3I6ICRtZW51LW9wdGlvbi1ob3ZlcjtcXHJcXG4gICAgICAgICAgICBjdXJzb3I6IHBvaW50ZXI7XFxyXFxuICAgICAgICB9XFxyXFxuXFxyXFxuICAgICAgICAmX3NlbGVjdGVkIHtcXHJcXG4gICAgICAgICAgICBjb2xvcjogJG1lbnUtb3B0aW9uLWhvdmVyO1xcclxcbiAgICAgICAgfVxcclxcbiAgICB9XFxyXFxufVwiLFwiJGJyYW5kOiAjQjU0NjBGO1xcclxcbiRicmFuZC1ob3ZlcjogcmdiYSgxODEsIDcwLCAxNSwgMC43KTtcXHJcXG4kYnJhbmQtYWN0aXZlOiAjODcyRDAxO1xcclxcblxcclxcbiRkYXJrOiBibGFjazsgXFxyXFxuJGxpZ2h0OiB3aGl0ZTtcXHJcXG4kZ3JheTogI0FGQURCNTtcXHJcXG5cXHJcXG4kYm9yZGVyLXJhZGl1czogMTBweDtcXHJcXG5cXHJcXG4kc3BhY2UteGw6IDI0cHg7XFxyXFxuJHNwYWNlLWw6IDIwcHg7XFxyXFxuJHNwYWNlLW06IDE2cHg7XFxyXFxuJHNwYWNlLXM6IDE0cHg7XFxyXFxuJHNwYWNlLXhzOiAxMnB4O1xcclxcbiRzcGFjZS14eHM6IDhweDtcIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLmxvY2FscyA9IHtcblx0XCJtZW51XCI6IGBNZW51LW1vZHVsZV9fbWVudWAsXG5cdFwibWVudV9fb3B0aW9uXCI6IGBNZW51LW1vZHVsZV9fbWVudV9fb3B0aW9uYCxcblx0XCJtZW51X19vcHRpb25fc2VsZWN0ZWRcIjogYE1lbnUtbW9kdWxlX19tZW51X19vcHRpb25fc2VsZWN0ZWRgXG59O1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///5725\n')},1293:(module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   A: () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(963);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(9089);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);\n// Imports\n\n\nvar ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, `.RightBlock-module__right-block{display:flex;align-items:center;align-content:center;gap:16px}`, "",{"version":3,"sources":["webpack://./src/components/Header/components/RightBlock/RightBlock.module.scss","webpack://./src/styles/variables.scss"],"names":[],"mappings":"AAIA,gCACI,YAAA,CACA,kBAAA,CACA,oBAAA,CACA,QCIM","sourcesContent":["@use \'styles/variables.scss\' as var;\\r\\n\\r\\n$right-block-gap: var.$space-m;\\r\\n\\r\\n.right-block {\\r\\n    display: flex;\\r\\n    align-items: center;\\r\\n    align-content: center;\\r\\n    gap: $right-block-gap;\\r\\n}","$brand: #B5460F;\\r\\n$brand-hover: rgba(181, 70, 15, 0.7);\\r\\n$brand-active: #872D01;\\r\\n\\r\\n$dark: black; \\r\\n$light: white;\\r\\n$gray: #AFADB5;\\r\\n\\r\\n$border-radius: 10px;\\r\\n\\r\\n$space-xl: 24px;\\r\\n$space-l: 20px;\\r\\n$space-m: 16px;\\r\\n$space-s: 14px;\\r\\n$space-xs: 12px;\\r\\n$space-xxs: 8px;"],"sourceRoot":""}]);\n// Exports\n___CSS_LOADER_EXPORT___.locals = {\n\t"right-block": `RightBlock-module__right-block`\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTI5My5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7QUFDc0g7QUFDakI7QUFDckcsOEJBQThCLG1GQUEyQixDQUFDLDRGQUFxQztBQUMvRjtBQUNBLDBFQUEwRSxhQUFhLG1CQUFtQixxQkFBcUIsU0FBUyxPQUFPLGdSQUFnUix1Q0FBdUMsc0JBQXNCLHNCQUFzQiw0QkFBNEIsOEJBQThCLDhCQUE4QixLQUFLLG1CQUFtQix5Q0FBeUMsMkJBQTJCLHNCQUFzQixrQkFBa0IsbUJBQW1CLDZCQUE2Qix3QkFBd0IsbUJBQW1CLG1CQUFtQixtQkFBbUIsb0JBQW9CLG9CQUFvQixtQkFBbUI7QUFDMTRCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUVBQWUsdUJBQXVCLEVBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8yMDI0LWt0c3N0dWRpby1ob21ld29ya3MvLi9zcmMvY29tcG9uZW50cy9IZWFkZXIvY29tcG9uZW50cy9SaWdodEJsb2NrL1JpZ2h0QmxvY2subW9kdWxlLnNjc3M/YTQ0MiJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBgLlJpZ2h0QmxvY2stbW9kdWxlX19yaWdodC1ibG9ja3tkaXNwbGF5OmZsZXg7YWxpZ24taXRlbXM6Y2VudGVyO2FsaWduLWNvbnRlbnQ6Y2VudGVyO2dhcDoxNnB4fWAsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vc3JjL2NvbXBvbmVudHMvSGVhZGVyL2NvbXBvbmVudHMvUmlnaHRCbG9jay9SaWdodEJsb2NrLm1vZHVsZS5zY3NzXCIsXCJ3ZWJwYWNrOi8vLi9zcmMvc3R5bGVzL3ZhcmlhYmxlcy5zY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUlBLGdDQUNJLFlBQUEsQ0FDQSxrQkFBQSxDQUNBLG9CQUFBLENBQ0EsUUNJTVwiLFwic291cmNlc0NvbnRlbnRcIjpbXCJAdXNlICdzdHlsZXMvdmFyaWFibGVzLnNjc3MnIGFzIHZhcjtcXHJcXG5cXHJcXG4kcmlnaHQtYmxvY2stZ2FwOiB2YXIuJHNwYWNlLW07XFxyXFxuXFxyXFxuLnJpZ2h0LWJsb2NrIHtcXHJcXG4gICAgZGlzcGxheTogZmxleDtcXHJcXG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXHJcXG4gICAgYWxpZ24tY29udGVudDogY2VudGVyO1xcclxcbiAgICBnYXA6ICRyaWdodC1ibG9jay1nYXA7XFxyXFxufVwiLFwiJGJyYW5kOiAjQjU0NjBGO1xcclxcbiRicmFuZC1ob3ZlcjogcmdiYSgxODEsIDcwLCAxNSwgMC43KTtcXHJcXG4kYnJhbmQtYWN0aXZlOiAjODcyRDAxO1xcclxcblxcclxcbiRkYXJrOiBibGFjazsgXFxyXFxuJGxpZ2h0OiB3aGl0ZTtcXHJcXG4kZ3JheTogI0FGQURCNTtcXHJcXG5cXHJcXG4kYm9yZGVyLXJhZGl1czogMTBweDtcXHJcXG5cXHJcXG4kc3BhY2UteGw6IDI0cHg7XFxyXFxuJHNwYWNlLWw6IDIwcHg7XFxyXFxuJHNwYWNlLW06IDE2cHg7XFxyXFxuJHNwYWNlLXM6IDE0cHg7XFxyXFxuJHNwYWNlLXhzOiAxMnB4O1xcclxcbiRzcGFjZS14eHM6IDhweDtcIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLmxvY2FscyA9IHtcblx0XCJyaWdodC1ibG9ja1wiOiBgUmlnaHRCbG9jay1tb2R1bGVfX3JpZ2h0LWJsb2NrYFxufTtcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///1293\n')},6742:(module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   A: () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(963);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(9089);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);\n// Imports\n\n\nvar ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, `.Input-module__inputblock{height:52px;position:relative;display:flex;gap:0;justify-content:space-between;align-content:center;align-items:center;background-color:#fff;border:1px solid #fff;border-radius:10px;padding-right:12px}.Input-module__inputblock:focus-within{border:1px solid #b5460f}.Input-module__inputblock_disabled:focus-within{border:1px solid #fff}.Input-module__inputblock__element{font-family:"Roboto";font-size:16px;background-color:#fff;padding:14px 12px;border:1px solid #fff;border-radius:10px;color:#000;outline:none;width:100%;height:100%;margin:0}.Input-module__inputblock__element::placeholder{color:#afadb5}.Input-module__inputblock__element:disabled{color:rgba(0,0,0,.2)}`, "",{"version":3,"sources":["webpack://./src/components/Input/Input.module.scss","webpack://./src/styles/variables.scss"],"names":[],"mappings":"AAiBA,0BACI,WAhBW,CAiBX,iBAAA,CACA,YAAA,CACA,KAAA,CACA,6BAAA,CACA,oBAAA,CACA,kBAAA,CAEA,qBCrBI,CDsBJ,qBAAA,CACA,kBCpBY,CD8BZ,kBCxBO,CDgBP,uCACI,wBAAA,CAGJ,gDACI,qBAAA,CAKJ,mCACI,oBAAA,CACA,cC9BE,CD+BF,qBCtCA,CDuCA,iBAvCQ,CAwCR,qBAAA,CACA,kBCtCQ,CDuCR,UC3CD,CD4CC,YAAA,CAEA,UAAA,CACA,WAAA,CACA,QAAA,CAEA,gDACI,aCjDL,CDoDC,4CACI,oBA5CU","sourcesContent":["@use \'styles/variables.scss\' as var;\\r\\n\\r\\n$input-height: 52px;\\r\\n\\r\\n$input-font-size: var.$space-m;\\r\\n$input-padding: var.$space-s var.$space-xs;\\r\\n\\r\\n$input-bg: var.$light;\\r\\n$input-placeholder: var.$gray;\\r\\n\\r\\n$input-border: var.$light;\\r\\n$input-border-focus: var.$brand;\\r\\n$input-border-radius: var.$border-radius;\\r\\n\\r\\n$input-text: var.$dark;\\r\\n$input-text-disabled: rgba(0, 0, 0, 0.2);\\r\\n\\r\\n.inputblock {\\r\\n    height: $input-height;\\r\\n    position: relative;\\r\\n    display: flex;\\r\\n    gap: 0;\\r\\n    justify-content: space-between;\\r\\n    align-content: center;\\r\\n    align-items: center;\\r\\n\\r\\n    background-color: $input-bg;\\r\\n    border: 1px solid $input-border;\\r\\n    border-radius: $input-border-radius;\\r\\n\\r\\n    &:focus-within {\\r\\n        border: 1px solid $input-border-focus;\\r\\n    }\\r\\n\\r\\n    &_disabled:focus-within {\\r\\n        border: 1px solid $input-border;\\r\\n    }\\r\\n\\r\\n    padding-right: var.$space-xs;\\r\\n\\r\\n    &__element {\\r\\n        font-family: \'Roboto\';\\r\\n        font-size: $input-font-size;\\r\\n        background-color: $input-bg;\\r\\n        padding: $input-padding;\\r\\n        border: 1px solid $input-border;\\r\\n        border-radius: $input-border-radius;\\r\\n        color: $input-text;\\r\\n        outline: none;\\r\\n\\r\\n        width: 100%;\\r\\n        height: 100%;\\r\\n        margin: 0;\\r\\n        \\r\\n        &::placeholder {\\r\\n            color: $input-placeholder;\\r\\n        }\\r\\n\\r\\n        &:disabled {\\r\\n            color: $input-text-disabled;    \\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\n","$brand: #B5460F;\\r\\n$brand-hover: rgba(181, 70, 15, 0.7);\\r\\n$brand-active: #872D01;\\r\\n\\r\\n$dark: black; \\r\\n$light: white;\\r\\n$gray: #AFADB5;\\r\\n\\r\\n$border-radius: 10px;\\r\\n\\r\\n$space-xl: 24px;\\r\\n$space-l: 20px;\\r\\n$space-m: 16px;\\r\\n$space-s: 14px;\\r\\n$space-xs: 12px;\\r\\n$space-xxs: 8px;"],"sourceRoot":""}]);\n// Exports\n___CSS_LOADER_EXPORT___.locals = {\n\t"inputblock": `Input-module__inputblock`,\n\t"inputblock_disabled": `Input-module__inputblock_disabled`,\n\t"inputblock__element": `Input-module__inputblock__element`\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNjc0Mi5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7QUFDZ0g7QUFDakI7QUFDL0YsOEJBQThCLG1GQUEyQixDQUFDLDRGQUFxQztBQUMvRjtBQUNBLG9FQUFvRSxZQUFZLGtCQUFrQixhQUFhLE1BQU0sOEJBQThCLHFCQUFxQixtQkFBbUIsc0JBQXNCLHNCQUFzQixtQkFBbUIsbUJBQW1CLHVDQUF1Qyx5QkFBeUIsZ0RBQWdELHNCQUFzQixtQ0FBbUMscUJBQXFCLGVBQWUsc0JBQXNCLGtCQUFrQixzQkFBc0IsbUJBQW1CLFdBQVcsYUFBYSxXQUFXLFlBQVksU0FBUyxnREFBZ0QsY0FBYyw0Q0FBNEMscUJBQXFCLE9BQU8sa2hCQUFraEIsNEJBQTRCLHVDQUF1QywrQ0FBK0MsOEJBQThCLGtDQUFrQyxrQ0FBa0Msb0NBQW9DLDZDQUE2QywrQkFBK0IsNkNBQTZDLHFCQUFxQiw4QkFBOEIsMkJBQTJCLHNCQUFzQixlQUFlLHVDQUF1Qyw4QkFBOEIsNEJBQTRCLHdDQUF3Qyx3Q0FBd0MsNENBQTRDLDRCQUE0QixrREFBa0QsU0FBUyxxQ0FBcUMsNENBQTRDLFNBQVMseUNBQXlDLHdCQUF3QixrQ0FBa0Msd0NBQXdDLHdDQUF3QyxvQ0FBb0MsNENBQTRDLGdEQUFnRCwrQkFBK0IsMEJBQTBCLDRCQUE0Qix5QkFBeUIsc0JBQXNCLHdDQUF3QywwQ0FBMEMsYUFBYSw0QkFBNEIsZ0RBQWdELGFBQWEsU0FBUyxLQUFLLDJCQUEyQix5Q0FBeUMsMkJBQTJCLHNCQUFzQixrQkFBa0IsbUJBQW1CLDZCQUE2Qix3QkFBd0IsbUJBQW1CLG1CQUFtQixtQkFBbUIsb0JBQW9CLG9CQUFvQixtQkFBbUI7QUFDN2lHO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlFQUFlLHVCQUF1QixFQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vMjAyNC1rdHNzdHVkaW8taG9tZXdvcmtzLy4vc3JjL2NvbXBvbmVudHMvSW5wdXQvSW5wdXQubW9kdWxlLnNjc3M/ZTgwOCJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBgLklucHV0LW1vZHVsZV9faW5wdXRibG9ja3toZWlnaHQ6NTJweDtwb3NpdGlvbjpyZWxhdGl2ZTtkaXNwbGF5OmZsZXg7Z2FwOjA7anVzdGlmeS1jb250ZW50OnNwYWNlLWJldHdlZW47YWxpZ24tY29udGVudDpjZW50ZXI7YWxpZ24taXRlbXM6Y2VudGVyO2JhY2tncm91bmQtY29sb3I6I2ZmZjtib3JkZXI6MXB4IHNvbGlkICNmZmY7Ym9yZGVyLXJhZGl1czoxMHB4O3BhZGRpbmctcmlnaHQ6MTJweH0uSW5wdXQtbW9kdWxlX19pbnB1dGJsb2NrOmZvY3VzLXdpdGhpbntib3JkZXI6MXB4IHNvbGlkICNiNTQ2MGZ9LklucHV0LW1vZHVsZV9faW5wdXRibG9ja19kaXNhYmxlZDpmb2N1cy13aXRoaW57Ym9yZGVyOjFweCBzb2xpZCAjZmZmfS5JbnB1dC1tb2R1bGVfX2lucHV0YmxvY2tfX2VsZW1lbnR7Zm9udC1mYW1pbHk6XCJSb2JvdG9cIjtmb250LXNpemU6MTZweDtiYWNrZ3JvdW5kLWNvbG9yOiNmZmY7cGFkZGluZzoxNHB4IDEycHg7Ym9yZGVyOjFweCBzb2xpZCAjZmZmO2JvcmRlci1yYWRpdXM6MTBweDtjb2xvcjojMDAwO291dGxpbmU6bm9uZTt3aWR0aDoxMDAlO2hlaWdodDoxMDAlO21hcmdpbjowfS5JbnB1dC1tb2R1bGVfX2lucHV0YmxvY2tfX2VsZW1lbnQ6OnBsYWNlaG9sZGVye2NvbG9yOiNhZmFkYjV9LklucHV0LW1vZHVsZV9faW5wdXRibG9ja19fZWxlbWVudDpkaXNhYmxlZHtjb2xvcjpyZ2JhKDAsMCwwLC4yKX1gLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL3NyYy9jb21wb25lbnRzL0lucHV0L0lucHV0Lm1vZHVsZS5zY3NzXCIsXCJ3ZWJwYWNrOi8vLi9zcmMvc3R5bGVzL3ZhcmlhYmxlcy5zY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQWlCQSwwQkFDSSxXQWhCVyxDQWlCWCxpQkFBQSxDQUNBLFlBQUEsQ0FDQSxLQUFBLENBQ0EsNkJBQUEsQ0FDQSxvQkFBQSxDQUNBLGtCQUFBLENBRUEscUJDckJJLENEc0JKLHFCQUFBLENBQ0Esa0JDcEJZLENEOEJaLGtCQ3hCTyxDRGdCUCx1Q0FDSSx3QkFBQSxDQUdKLGdEQUNJLHFCQUFBLENBS0osbUNBQ0ksb0JBQUEsQ0FDQSxjQzlCRSxDRCtCRixxQkN0Q0EsQ0R1Q0EsaUJBdkNRLENBd0NSLHFCQUFBLENBQ0Esa0JDdENRLENEdUNSLFVDM0NELENENENDLFlBQUEsQ0FFQSxVQUFBLENBQ0EsV0FBQSxDQUNBLFFBQUEsQ0FFQSxnREFDSSxhQ2pETCxDRG9EQyw0Q0FDSSxvQkE1Q1VcIixcInNvdXJjZXNDb250ZW50XCI6W1wiQHVzZSAnc3R5bGVzL3ZhcmlhYmxlcy5zY3NzJyBhcyB2YXI7XFxyXFxuXFxyXFxuJGlucHV0LWhlaWdodDogNTJweDtcXHJcXG5cXHJcXG4kaW5wdXQtZm9udC1zaXplOiB2YXIuJHNwYWNlLW07XFxyXFxuJGlucHV0LXBhZGRpbmc6IHZhci4kc3BhY2UtcyB2YXIuJHNwYWNlLXhzO1xcclxcblxcclxcbiRpbnB1dC1iZzogdmFyLiRsaWdodDtcXHJcXG4kaW5wdXQtcGxhY2Vob2xkZXI6IHZhci4kZ3JheTtcXHJcXG5cXHJcXG4kaW5wdXQtYm9yZGVyOiB2YXIuJGxpZ2h0O1xcclxcbiRpbnB1dC1ib3JkZXItZm9jdXM6IHZhci4kYnJhbmQ7XFxyXFxuJGlucHV0LWJvcmRlci1yYWRpdXM6IHZhci4kYm9yZGVyLXJhZGl1cztcXHJcXG5cXHJcXG4kaW5wdXQtdGV4dDogdmFyLiRkYXJrO1xcclxcbiRpbnB1dC10ZXh0LWRpc2FibGVkOiByZ2JhKDAsIDAsIDAsIDAuMik7XFxyXFxuXFxyXFxuLmlucHV0YmxvY2sge1xcclxcbiAgICBoZWlnaHQ6ICRpbnB1dC1oZWlnaHQ7XFxyXFxuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcXHJcXG4gICAgZGlzcGxheTogZmxleDtcXHJcXG4gICAgZ2FwOiAwO1xcclxcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XFxyXFxuICAgIGFsaWduLWNvbnRlbnQ6IGNlbnRlcjtcXHJcXG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXHJcXG5cXHJcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogJGlucHV0LWJnO1xcclxcbiAgICBib3JkZXI6IDFweCBzb2xpZCAkaW5wdXQtYm9yZGVyO1xcclxcbiAgICBib3JkZXItcmFkaXVzOiAkaW5wdXQtYm9yZGVyLXJhZGl1cztcXHJcXG5cXHJcXG4gICAgJjpmb2N1cy13aXRoaW4ge1xcclxcbiAgICAgICAgYm9yZGVyOiAxcHggc29saWQgJGlucHV0LWJvcmRlci1mb2N1cztcXHJcXG4gICAgfVxcclxcblxcclxcbiAgICAmX2Rpc2FibGVkOmZvY3VzLXdpdGhpbiB7XFxyXFxuICAgICAgICBib3JkZXI6IDFweCBzb2xpZCAkaW5wdXQtYm9yZGVyO1xcclxcbiAgICB9XFxyXFxuXFxyXFxuICAgIHBhZGRpbmctcmlnaHQ6IHZhci4kc3BhY2UteHM7XFxyXFxuXFxyXFxuICAgICZfX2VsZW1lbnQge1xcclxcbiAgICAgICAgZm9udC1mYW1pbHk6ICdSb2JvdG8nO1xcclxcbiAgICAgICAgZm9udC1zaXplOiAkaW5wdXQtZm9udC1zaXplO1xcclxcbiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogJGlucHV0LWJnO1xcclxcbiAgICAgICAgcGFkZGluZzogJGlucHV0LXBhZGRpbmc7XFxyXFxuICAgICAgICBib3JkZXI6IDFweCBzb2xpZCAkaW5wdXQtYm9yZGVyO1xcclxcbiAgICAgICAgYm9yZGVyLXJhZGl1czogJGlucHV0LWJvcmRlci1yYWRpdXM7XFxyXFxuICAgICAgICBjb2xvcjogJGlucHV0LXRleHQ7XFxyXFxuICAgICAgICBvdXRsaW5lOiBub25lO1xcclxcblxcclxcbiAgICAgICAgd2lkdGg6IDEwMCU7XFxyXFxuICAgICAgICBoZWlnaHQ6IDEwMCU7XFxyXFxuICAgICAgICBtYXJnaW46IDA7XFxyXFxuICAgICAgICBcXHJcXG4gICAgICAgICY6OnBsYWNlaG9sZGVyIHtcXHJcXG4gICAgICAgICAgICBjb2xvcjogJGlucHV0LXBsYWNlaG9sZGVyO1xcclxcbiAgICAgICAgfVxcclxcblxcclxcbiAgICAgICAgJjpkaXNhYmxlZCB7XFxyXFxuICAgICAgICAgICAgY29sb3I6ICRpbnB1dC10ZXh0LWRpc2FibGVkOyAgICBcXHJcXG4gICAgICAgIH1cXHJcXG4gICAgfVxcclxcbn1cXHJcXG5cXHJcXG5cIixcIiRicmFuZDogI0I1NDYwRjtcXHJcXG4kYnJhbmQtaG92ZXI6IHJnYmEoMTgxLCA3MCwgMTUsIDAuNyk7XFxyXFxuJGJyYW5kLWFjdGl2ZTogIzg3MkQwMTtcXHJcXG5cXHJcXG4kZGFyazogYmxhY2s7IFxcclxcbiRsaWdodDogd2hpdGU7XFxyXFxuJGdyYXk6ICNBRkFEQjU7XFxyXFxuXFxyXFxuJGJvcmRlci1yYWRpdXM6IDEwcHg7XFxyXFxuXFxyXFxuJHNwYWNlLXhsOiAyNHB4O1xcclxcbiRzcGFjZS1sOiAyMHB4O1xcclxcbiRzcGFjZS1tOiAxNnB4O1xcclxcbiRzcGFjZS1zOiAxNHB4O1xcclxcbiRzcGFjZS14czogMTJweDtcXHJcXG4kc3BhY2UteHhzOiA4cHg7XCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5sb2NhbHMgPSB7XG5cdFwiaW5wdXRibG9ja1wiOiBgSW5wdXQtbW9kdWxlX19pbnB1dGJsb2NrYCxcblx0XCJpbnB1dGJsb2NrX2Rpc2FibGVkXCI6IGBJbnB1dC1tb2R1bGVfX2lucHV0YmxvY2tfZGlzYWJsZWRgLFxuXHRcImlucHV0YmxvY2tfX2VsZW1lbnRcIjogYElucHV0LW1vZHVsZV9faW5wdXRibG9ja19fZWxlbWVudGBcbn07XG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///6742\n')},4088:(module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   A: () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(963);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(9089);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);\n// Imports\n\n\nvar ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, `.ListShower-module__list-shower{display:grid;column-gap:80px;row-gap:64px;grid-template-columns:repeat(auto-fit, 348px);justify-content:center}`, "",{"version":3,"sources":["webpack://./src/components/ListShower/ListShower.module.scss"],"names":[],"mappings":"AAAA,gCACI,YAAA,CACA,eAAA,CACA,YAAA,CACA,6CAAA,CACA,sBAAA","sourcesContent":[".list-shower {\\r\\n    display: grid;\\r\\n    column-gap: 80px;\\r\\n    row-gap: 64px;\\r\\n    grid-template-columns: repeat(auto-fit, 348px);\\r\\n    justify-content: center;\\r\\n}"],"sourceRoot":""}]);\n// Exports\n___CSS_LOADER_EXPORT___.locals = {\n\t"list-shower": `ListShower-module__list-shower`\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDA4OC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7QUFDZ0g7QUFDakI7QUFDL0YsOEJBQThCLG1GQUEyQixDQUFDLDRGQUFxQztBQUMvRjtBQUNBLDBFQUEwRSxhQUFhLGdCQUFnQixhQUFhLDhDQUE4Qyx1QkFBdUIsT0FBTywwTUFBME0sc0JBQXNCLHlCQUF5QixzQkFBc0IsdURBQXVELGdDQUFnQyxLQUFLLG1CQUFtQjtBQUM5akI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpRUFBZSx1QkFBdUIsRUFBQyIsInNvdXJjZXMiOlsid2VicGFjazovLzIwMjQta3Rzc3R1ZGlvLWhvbWV3b3Jrcy8uL3NyYy9jb21wb25lbnRzL0xpc3RTaG93ZXIvTGlzdFNob3dlci5tb2R1bGUuc2Nzcz8zNjM3Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIGAuTGlzdFNob3dlci1tb2R1bGVfX2xpc3Qtc2hvd2Vye2Rpc3BsYXk6Z3JpZDtjb2x1bW4tZ2FwOjgwcHg7cm93LWdhcDo2NHB4O2dyaWQtdGVtcGxhdGUtY29sdW1uczpyZXBlYXQoYXV0by1maXQsIDM0OHB4KTtqdXN0aWZ5LWNvbnRlbnQ6Y2VudGVyfWAsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vc3JjL2NvbXBvbmVudHMvTGlzdFNob3dlci9MaXN0U2hvd2VyLm1vZHVsZS5zY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUFBLGdDQUNJLFlBQUEsQ0FDQSxlQUFBLENBQ0EsWUFBQSxDQUNBLDZDQUFBLENBQ0Esc0JBQUFcIixcInNvdXJjZXNDb250ZW50XCI6W1wiLmxpc3Qtc2hvd2VyIHtcXHJcXG4gICAgZGlzcGxheTogZ3JpZDtcXHJcXG4gICAgY29sdW1uLWdhcDogODBweDtcXHJcXG4gICAgcm93LWdhcDogNjRweDtcXHJcXG4gICAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiByZXBlYXQoYXV0by1maXQsIDM0OHB4KTtcXHJcXG4gICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxyXFxufVwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ubG9jYWxzID0ge1xuXHRcImxpc3Qtc2hvd2VyXCI6IGBMaXN0U2hvd2VyLW1vZHVsZV9fbGlzdC1zaG93ZXJgXG59O1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///4088\n')},8618:(module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   A: () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(963);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(9089);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);\n// Imports\n\n\nvar ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, `@keyframes Loader-module__loader-rotate{0%{transform:rotate(121deg)}67%{transform:rotate(360deg)}100%{transform:rotate(481deg)}}.Loader-module__loader{border-radius:50%;border-color:#b5460f;border-style:solid;border-top-style:inset;border-right-style:inset;border-top-color:rgba(0,0,0,0);transform:rotate(121deg);animation:Loader-module__loader-rotate 3s linear infinite}.Loader-module__loader_size_s{width:calc(8px*2);height:calc(8px*2);margin:calc(8px*2/4);border-width:calc(8px*2/8)}.Loader-module__loader_size_m{width:calc(8px*4);height:calc(8px*4);margin:calc(8px*4/4);border-width:calc(8px*4/8)}.Loader-module__loader_size_l{width:calc(8px*5);height:calc(8px*5);margin:calc(8px*5/4);border-width:calc(8px*5/8)}`, "",{"version":3,"sources":["webpack://./src/components/Loader/Loader.module.scss","webpack://./src/styles/variables.scss"],"names":[],"mappings":"AAMA,wCACI,GACI,wBAAA,CAGJ,IACI,wBAAA,CAGJ,KACI,wBAAA,CAAA,CAIR,uBACI,iBAAA,CACA,oBCtBI,CDuBJ,kBAAA,CACA,sBAAA,CACA,wBAAA,CACA,8BAAA,CACA,wBAAA,CAEA,yDAAA,CAGI,8BACI,iBA/BR,CAgCQ,kBAhCR,CAiCQ,oBAAA,CACA,0BAAA,CAGJ,8BACI,iBArCR,CAsCQ,kBAtCR,CAuCQ,oBAAA,CACA,0BAAA,CAGJ,8BACI,iBA3CR,CA4CQ,kBA5CR,CA6CQ,oBAAA,CACA,0BAAA","sourcesContent":["@use \'styles/variables.scss\' as var;\\r\\n\\r\\n$s: calc(#{var.$space-xxs} * 2);\\r\\n$m: calc(#{var.$space-xxs} * 4);\\r\\n$l: calc(#{var.$space-xxs} * 5);\\r\\n\\r\\n@keyframes loader-rotate {\\r\\n    0% {\\r\\n        transform: rotate(121deg);\\r\\n    }\\r\\n\\r\\n    67% {\\r\\n        transform: rotate(360deg);\\r\\n    }\\r\\n\\r\\n    100% {\\r\\n        transform: rotate(481deg);\\r\\n    }\\r\\n}\\r\\n\\r\\n.loader {\\r\\n    border-radius: 50%;\\r\\n    border-color: var.$brand;\\r\\n    border-style: solid;\\r\\n    border-top-style: inset;\\r\\n    border-right-style: inset;\\r\\n    border-top-color: transparent;\\r\\n    transform: rotate(121deg);\\r\\n\\r\\n    animation: loader-rotate 3s linear infinite;\\r\\n\\r\\n    &_size {\\r\\n        &_s {\\r\\n            width: $s;\\r\\n            height: $s;\\r\\n            margin: calc($s / 4);\\r\\n            border-width: calc($s / 8);\\r\\n        }\\r\\n    \\r\\n        &_m {\\r\\n            width: $m;\\r\\n            height: $m;\\r\\n            margin: calc($m / 4);\\r\\n            border-width: calc($m / 8);\\r\\n        }\\r\\n    \\r\\n        &_l {\\r\\n            width: $l;\\r\\n            height: $l;\\r\\n            margin: calc($l / 4);\\r\\n            border-width: calc($l / 8);\\r\\n        }\\r\\n    }\\r\\n}","$brand: #B5460F;\\r\\n$brand-hover: rgba(181, 70, 15, 0.7);\\r\\n$brand-active: #872D01;\\r\\n\\r\\n$dark: black; \\r\\n$light: white;\\r\\n$gray: #AFADB5;\\r\\n\\r\\n$border-radius: 10px;\\r\\n\\r\\n$space-xl: 24px;\\r\\n$space-l: 20px;\\r\\n$space-m: 16px;\\r\\n$space-s: 14px;\\r\\n$space-xs: 12px;\\r\\n$space-xxs: 8px;"],"sourceRoot":""}]);\n// Exports\n___CSS_LOADER_EXPORT___.locals = {\n\t"loader": `Loader-module__loader`,\n\t"loader-rotate": `Loader-module__loader-rotate`,\n\t"loader_size_s": `Loader-module__loader_size_s`,\n\t"loader_size_m": `Loader-module__loader_size_m`,\n\t"loader_size_l": `Loader-module__loader_size_l`\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiODYxOC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7QUFDZ0g7QUFDakI7QUFDL0YsOEJBQThCLG1GQUEyQixDQUFDLDRGQUFxQztBQUMvRjtBQUNBLGtGQUFrRixHQUFHLHlCQUF5QixJQUFJLHlCQUF5QixLQUFLLDBCQUEwQix1QkFBdUIsa0JBQWtCLHFCQUFxQixtQkFBbUIsdUJBQXVCLHlCQUF5QiwrQkFBK0IseUJBQXlCLDBEQUEwRCw4QkFBOEIsa0JBQWtCLG1CQUFtQixxQkFBcUIsMkJBQTJCLDhCQUE4QixrQkFBa0IsbUJBQW1CLHFCQUFxQiwyQkFBMkIsOEJBQThCLGtCQUFrQixtQkFBbUIscUJBQXFCLDJCQUEyQixPQUFPLG1nQkFBbWdCLG1CQUFtQixnQkFBZ0IsS0FBSyxlQUFlLGdCQUFnQixLQUFLLGVBQWUsZ0JBQWdCLEtBQUssa0NBQWtDLFlBQVksc0NBQXNDLFNBQVMsaUJBQWlCLHNDQUFzQyxTQUFTLGtCQUFrQixzQ0FBc0MsU0FBUyxLQUFLLGlCQUFpQiwyQkFBMkIsaUNBQWlDLDRCQUE0QixnQ0FBZ0Msa0NBQWtDLHNDQUFzQyxrQ0FBa0Msd0RBQXdELG9CQUFvQixpQkFBaUIsMEJBQTBCLDJCQUEyQixxQ0FBcUMsMkNBQTJDLGFBQWEseUJBQXlCLDBCQUEwQiwyQkFBMkIscUNBQXFDLDJDQUEyQyxhQUFhLHlCQUF5QiwwQkFBMEIsMkJBQTJCLHFDQUFxQywyQ0FBMkMsYUFBYSxTQUFTLEtBQUssbUJBQW1CLHlDQUF5QywyQkFBMkIsc0JBQXNCLGtCQUFrQixtQkFBbUIsNkJBQTZCLHdCQUF3QixtQkFBbUIsbUJBQW1CLG1CQUFtQixvQkFBb0Isb0JBQW9CLG1CQUFtQjtBQUNwdEY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlFQUFlLHVCQUF1QixFQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vMjAyNC1rdHNzdHVkaW8taG9tZXdvcmtzLy4vc3JjL2NvbXBvbmVudHMvTG9hZGVyL0xvYWRlci5tb2R1bGUuc2Nzcz82ZmUwIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIGBAa2V5ZnJhbWVzIExvYWRlci1tb2R1bGVfX2xvYWRlci1yb3RhdGV7MCV7dHJhbnNmb3JtOnJvdGF0ZSgxMjFkZWcpfTY3JXt0cmFuc2Zvcm06cm90YXRlKDM2MGRlZyl9MTAwJXt0cmFuc2Zvcm06cm90YXRlKDQ4MWRlZyl9fS5Mb2FkZXItbW9kdWxlX19sb2FkZXJ7Ym9yZGVyLXJhZGl1czo1MCU7Ym9yZGVyLWNvbG9yOiNiNTQ2MGY7Ym9yZGVyLXN0eWxlOnNvbGlkO2JvcmRlci10b3Atc3R5bGU6aW5zZXQ7Ym9yZGVyLXJpZ2h0LXN0eWxlOmluc2V0O2JvcmRlci10b3AtY29sb3I6cmdiYSgwLDAsMCwwKTt0cmFuc2Zvcm06cm90YXRlKDEyMWRlZyk7YW5pbWF0aW9uOkxvYWRlci1tb2R1bGVfX2xvYWRlci1yb3RhdGUgM3MgbGluZWFyIGluZmluaXRlfS5Mb2FkZXItbW9kdWxlX19sb2FkZXJfc2l6ZV9ze3dpZHRoOmNhbGMoOHB4KjIpO2hlaWdodDpjYWxjKDhweCoyKTttYXJnaW46Y2FsYyg4cHgqMi80KTtib3JkZXItd2lkdGg6Y2FsYyg4cHgqMi84KX0uTG9hZGVyLW1vZHVsZV9fbG9hZGVyX3NpemVfbXt3aWR0aDpjYWxjKDhweCo0KTtoZWlnaHQ6Y2FsYyg4cHgqNCk7bWFyZ2luOmNhbGMoOHB4KjQvNCk7Ym9yZGVyLXdpZHRoOmNhbGMoOHB4KjQvOCl9LkxvYWRlci1tb2R1bGVfX2xvYWRlcl9zaXplX2x7d2lkdGg6Y2FsYyg4cHgqNSk7aGVpZ2h0OmNhbGMoOHB4KjUpO21hcmdpbjpjYWxjKDhweCo1LzQpO2JvcmRlci13aWR0aDpjYWxjKDhweCo1LzgpfWAsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vc3JjL2NvbXBvbmVudHMvTG9hZGVyL0xvYWRlci5tb2R1bGUuc2Nzc1wiLFwid2VicGFjazovLy4vc3JjL3N0eWxlcy92YXJpYWJsZXMuc2Nzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFNQSx3Q0FDSSxHQUNJLHdCQUFBLENBR0osSUFDSSx3QkFBQSxDQUdKLEtBQ0ksd0JBQUEsQ0FBQSxDQUlSLHVCQUNJLGlCQUFBLENBQ0Esb0JDdEJJLENEdUJKLGtCQUFBLENBQ0Esc0JBQUEsQ0FDQSx3QkFBQSxDQUNBLDhCQUFBLENBQ0Esd0JBQUEsQ0FFQSx5REFBQSxDQUdJLDhCQUNJLGlCQS9CUixDQWdDUSxrQkFoQ1IsQ0FpQ1Esb0JBQUEsQ0FDQSwwQkFBQSxDQUdKLDhCQUNJLGlCQXJDUixDQXNDUSxrQkF0Q1IsQ0F1Q1Esb0JBQUEsQ0FDQSwwQkFBQSxDQUdKLDhCQUNJLGlCQTNDUixDQTRDUSxrQkE1Q1IsQ0E2Q1Esb0JBQUEsQ0FDQSwwQkFBQVwiLFwic291cmNlc0NvbnRlbnRcIjpbXCJAdXNlICdzdHlsZXMvdmFyaWFibGVzLnNjc3MnIGFzIHZhcjtcXHJcXG5cXHJcXG4kczogY2FsYygje3Zhci4kc3BhY2UteHhzfSAqIDIpO1xcclxcbiRtOiBjYWxjKCN7dmFyLiRzcGFjZS14eHN9ICogNCk7XFxyXFxuJGw6IGNhbGMoI3t2YXIuJHNwYWNlLXh4c30gKiA1KTtcXHJcXG5cXHJcXG5Aa2V5ZnJhbWVzIGxvYWRlci1yb3RhdGUge1xcclxcbiAgICAwJSB7XFxyXFxuICAgICAgICB0cmFuc2Zvcm06IHJvdGF0ZSgxMjFkZWcpO1xcclxcbiAgICB9XFxyXFxuXFxyXFxuICAgIDY3JSB7XFxyXFxuICAgICAgICB0cmFuc2Zvcm06IHJvdGF0ZSgzNjBkZWcpO1xcclxcbiAgICB9XFxyXFxuXFxyXFxuICAgIDEwMCUge1xcclxcbiAgICAgICAgdHJhbnNmb3JtOiByb3RhdGUoNDgxZGVnKTtcXHJcXG4gICAgfVxcclxcbn1cXHJcXG5cXHJcXG4ubG9hZGVyIHtcXHJcXG4gICAgYm9yZGVyLXJhZGl1czogNTAlO1xcclxcbiAgICBib3JkZXItY29sb3I6IHZhci4kYnJhbmQ7XFxyXFxuICAgIGJvcmRlci1zdHlsZTogc29saWQ7XFxyXFxuICAgIGJvcmRlci10b3Atc3R5bGU6IGluc2V0O1xcclxcbiAgICBib3JkZXItcmlnaHQtc3R5bGU6IGluc2V0O1xcclxcbiAgICBib3JkZXItdG9wLWNvbG9yOiB0cmFuc3BhcmVudDtcXHJcXG4gICAgdHJhbnNmb3JtOiByb3RhdGUoMTIxZGVnKTtcXHJcXG5cXHJcXG4gICAgYW5pbWF0aW9uOiBsb2FkZXItcm90YXRlIDNzIGxpbmVhciBpbmZpbml0ZTtcXHJcXG5cXHJcXG4gICAgJl9zaXplIHtcXHJcXG4gICAgICAgICZfcyB7XFxyXFxuICAgICAgICAgICAgd2lkdGg6ICRzO1xcclxcbiAgICAgICAgICAgIGhlaWdodDogJHM7XFxyXFxuICAgICAgICAgICAgbWFyZ2luOiBjYWxjKCRzIC8gNCk7XFxyXFxuICAgICAgICAgICAgYm9yZGVyLXdpZHRoOiBjYWxjKCRzIC8gOCk7XFxyXFxuICAgICAgICB9XFxyXFxuICAgIFxcclxcbiAgICAgICAgJl9tIHtcXHJcXG4gICAgICAgICAgICB3aWR0aDogJG07XFxyXFxuICAgICAgICAgICAgaGVpZ2h0OiAkbTtcXHJcXG4gICAgICAgICAgICBtYXJnaW46IGNhbGMoJG0gLyA0KTtcXHJcXG4gICAgICAgICAgICBib3JkZXItd2lkdGg6IGNhbGMoJG0gLyA4KTtcXHJcXG4gICAgICAgIH1cXHJcXG4gICAgXFxyXFxuICAgICAgICAmX2wge1xcclxcbiAgICAgICAgICAgIHdpZHRoOiAkbDtcXHJcXG4gICAgICAgICAgICBoZWlnaHQ6ICRsO1xcclxcbiAgICAgICAgICAgIG1hcmdpbjogY2FsYygkbCAvIDQpO1xcclxcbiAgICAgICAgICAgIGJvcmRlci13aWR0aDogY2FsYygkbCAvIDgpO1xcclxcbiAgICAgICAgfVxcclxcbiAgICB9XFxyXFxufVwiLFwiJGJyYW5kOiAjQjU0NjBGO1xcclxcbiRicmFuZC1ob3ZlcjogcmdiYSgxODEsIDcwLCAxNSwgMC43KTtcXHJcXG4kYnJhbmQtYWN0aXZlOiAjODcyRDAxO1xcclxcblxcclxcbiRkYXJrOiBibGFjazsgXFxyXFxuJGxpZ2h0OiB3aGl0ZTtcXHJcXG4kZ3JheTogI0FGQURCNTtcXHJcXG5cXHJcXG4kYm9yZGVyLXJhZGl1czogMTBweDtcXHJcXG5cXHJcXG4kc3BhY2UteGw6IDI0cHg7XFxyXFxuJHNwYWNlLWw6IDIwcHg7XFxyXFxuJHNwYWNlLW06IDE2cHg7XFxyXFxuJHNwYWNlLXM6IDE0cHg7XFxyXFxuJHNwYWNlLXhzOiAxMnB4O1xcclxcbiRzcGFjZS14eHM6IDhweDtcIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLmxvY2FscyA9IHtcblx0XCJsb2FkZXJcIjogYExvYWRlci1tb2R1bGVfX2xvYWRlcmAsXG5cdFwibG9hZGVyLXJvdGF0ZVwiOiBgTG9hZGVyLW1vZHVsZV9fbG9hZGVyLXJvdGF0ZWAsXG5cdFwibG9hZGVyX3NpemVfc1wiOiBgTG9hZGVyLW1vZHVsZV9fbG9hZGVyX3NpemVfc2AsXG5cdFwibG9hZGVyX3NpemVfbVwiOiBgTG9hZGVyLW1vZHVsZV9fbG9hZGVyX3NpemVfbWAsXG5cdFwibG9hZGVyX3NpemVfbFwiOiBgTG9hZGVyLW1vZHVsZV9fbG9hZGVyX3NpemVfbGBcbn07XG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///8618\n')},7374:(module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   A: () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(963);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(9089);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);\n// Imports\n\n\nvar ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, `.Main-module__main{box-sizing:border-box;width:100%;min-height:100vh;background-color:rgba(255,192,118,.23)}`, "",{"version":3,"sources":["webpack://./src/components/Main/Main.module.scss"],"names":[],"mappings":"AAEA,mBACI,qBAAA,CACA,UAAA,CACA,gBAAA,CACA,sCANM","sourcesContent":["$main-bg: rgba(255, 192, 118, 0.23);\\r\\n\\r\\n.main {\\r\\n    box-sizing: border-box;\\r\\n    width: 100%;\\r\\n    min-height: 100vh;\\r\\n    background-color: $main-bg;\\r\\n}"],"sourceRoot":""}]);\n// Exports\n___CSS_LOADER_EXPORT___.locals = {\n\t"main": `Main-module__main`\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNzM3NC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7QUFDZ0g7QUFDakI7QUFDL0YsOEJBQThCLG1GQUEyQixDQUFDLDRGQUFxQztBQUMvRjtBQUNBLDZEQUE2RCxzQkFBc0IsV0FBVyxpQkFBaUIsdUNBQXVDLE9BQU8sMk1BQTJNLGVBQWUsK0JBQStCLG9CQUFvQiwwQkFBMEIsbUNBQW1DLEtBQUssbUJBQW1CO0FBQy9mO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUVBQWUsdUJBQXVCLEVBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8yMDI0LWt0c3N0dWRpby1ob21ld29ya3MvLi9zcmMvY29tcG9uZW50cy9NYWluL01haW4ubW9kdWxlLnNjc3M/MWNiMyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBgLk1haW4tbW9kdWxlX19tYWlue2JveC1zaXppbmc6Ym9yZGVyLWJveDt3aWR0aDoxMDAlO21pbi1oZWlnaHQ6MTAwdmg7YmFja2dyb3VuZC1jb2xvcjpyZ2JhKDI1NSwxOTIsMTE4LC4yMyl9YCwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9zcmMvY29tcG9uZW50cy9NYWluL01haW4ubW9kdWxlLnNjc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBRUEsbUJBQ0kscUJBQUEsQ0FDQSxVQUFBLENBQ0EsZ0JBQUEsQ0FDQSxzQ0FOTVwiLFwic291cmNlc0NvbnRlbnRcIjpbXCIkbWFpbi1iZzogcmdiYSgyNTUsIDE5MiwgMTE4LCAwLjIzKTtcXHJcXG5cXHJcXG4ubWFpbiB7XFxyXFxuICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XFxyXFxuICAgIHdpZHRoOiAxMDAlO1xcclxcbiAgICBtaW4taGVpZ2h0OiAxMDB2aDtcXHJcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogJG1haW4tYmc7XFxyXFxufVwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ubG9jYWxzID0ge1xuXHRcIm1haW5cIjogYE1haW4tbW9kdWxlX19tYWluYFxufTtcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///7374\n')},1562:(module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   A: () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(963);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(9089);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);\n// Imports\n\n\nvar ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, `.MultiDropdown-module__multidropdown{display:flex;flex-direction:column;padding:0;position:relative}.MultiDropdown-module__multidropdown__options{background-color:#fff;box-shadow:0px 4px 10px 0px rgba(0,0,0,.25);border-radius:10px;position:absolute;top:100%;width:100%;left:0;margin-top:8px;overflow-y:auto;max-height:144px;z-index:100}.MultiDropdown-module__multidropdown__options::-webkit-scrollbar{width:10px;border-radius:10px}.MultiDropdown-module__multidropdown__options::-webkit-scrollbar-thumb{background:#afadb5;border-radius:10px}.MultiDropdown-module__multidropdown__options__option{padding:14px 12px;cursor:pointer}.MultiDropdown-module__multidropdown__options__option:hover{color:#afadb5}.MultiDropdown-module__multidropdown__options__option_selected,.MultiDropdown-module__multidropdown__options__option_selected:hover{color:#b5460f}`, "",{"version":3,"sources":["webpack://./src/components/MultiDropdown/MultiDropdown.module.scss","webpack://./src/styles/variables.scss"],"names":[],"mappings":"AAUA,qCACI,YAAA,CACA,qBAAA,CACA,SAAA,CACA,iBAAA,CAEA,8CACI,qBCZA,CDaA,2CAdS,CAeT,kBCXQ,CDYR,iBAAA,CACA,QAAA,CACA,UAAA,CACA,MAAA,CACA,cCTI,CDUJ,eAAA,CACA,gBAAA,CACA,WAAA,CAEA,iEACI,UCtBI,CDuBJ,kBCvBI,CDyBJ,uEACI,kBC5BT,CD6BS,kBC3BA,CD+BR,sDACI,iBAnCK,CAoCL,cAAA,CAEA,4DACI,aCtCT,CDyCK,oIACI,aChDR","sourcesContent":["@use \'styles/variables.scss\' as var;\\r\\n\\r\\n$multidropdown-gap: var.$space-xxs;\\r\\n$options-bg: var.$light;\\r\\n$options-shadow: 0px 4px 10px 0px rgba(0, 0, 0, 0.25);\\r\\n$option-padding: var.$space-s var.$space-xs; \\r\\n$option-color-hover: var.$gray;\\r\\n$option-color-selected: var.$brand;\\r\\n$option-border: var.$border-radius;\\r\\n\\r\\n.multidropdown {\\r\\n    display: flex;\\r\\n    flex-direction: column;\\r\\n    padding: 0;\\r\\n    position: relative;\\r\\n\\r\\n    &__options {\\r\\n        background-color: $options-bg;\\r\\n        box-shadow: $options-shadow;\\r\\n        border-radius: $option-border;\\r\\n        position: absolute;\\r\\n        top: 100%;\\r\\n        width: 100%;\\r\\n        left: 0;\\r\\n        margin-top: $multidropdown-gap;\\r\\n        overflow-y: auto;\\r\\n        max-height: calc(48px * 3);\\r\\n        z-index: 100;\\r\\n\\r\\n        &::-webkit-scrollbar {\\r\\n            width: $option-border;\\r\\n            border-radius: $option-border;\\r\\n\\r\\n            &-thumb {\\r\\n                background: $option-color-hover;\\r\\n                border-radius: $option-border;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        &__option {\\r\\n            padding: $option-padding;\\r\\n            cursor: pointer;\\r\\n\\r\\n            &:hover {\\r\\n                color: $option-color-hover;\\r\\n            }\\r\\n\\r\\n            &_selected, &_selected:hover {\\r\\n                color: $option-color-selected;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}","$brand: #B5460F;\\r\\n$brand-hover: rgba(181, 70, 15, 0.7);\\r\\n$brand-active: #872D01;\\r\\n\\r\\n$dark: black; \\r\\n$light: white;\\r\\n$gray: #AFADB5;\\r\\n\\r\\n$border-radius: 10px;\\r\\n\\r\\n$space-xl: 24px;\\r\\n$space-l: 20px;\\r\\n$space-m: 16px;\\r\\n$space-s: 14px;\\r\\n$space-xs: 12px;\\r\\n$space-xxs: 8px;"],"sourceRoot":""}]);\n// Exports\n___CSS_LOADER_EXPORT___.locals = {\n\t"multidropdown": `MultiDropdown-module__multidropdown`,\n\t"multidropdown__options": `MultiDropdown-module__multidropdown__options`,\n\t"multidropdown__options__option": `MultiDropdown-module__multidropdown__options__option`,\n\t"multidropdown__options__option_selected": `MultiDropdown-module__multidropdown__options__option_selected`\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTU2Mi5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7QUFDZ0g7QUFDakI7QUFDL0YsOEJBQThCLG1GQUEyQixDQUFDLDRGQUFxQztBQUMvRjtBQUNBLCtFQUErRSxhQUFhLHNCQUFzQixVQUFVLGtCQUFrQiw4Q0FBOEMsc0JBQXNCLDRDQUE0QyxtQkFBbUIsa0JBQWtCLFNBQVMsV0FBVyxPQUFPLGVBQWUsZ0JBQWdCLGlCQUFpQixZQUFZLGlFQUFpRSxXQUFXLG1CQUFtQix1RUFBdUUsbUJBQW1CLG1CQUFtQixzREFBc0Qsa0JBQWtCLGVBQWUsNERBQTRELGNBQWMsb0lBQW9JLGNBQWMsT0FBTyw0ZkFBNGYsMkNBQTJDLDRCQUE0QiwwREFBMEQsaURBQWlELG1DQUFtQyx1Q0FBdUMsdUNBQXVDLHdCQUF3QixzQkFBc0IsK0JBQStCLG1CQUFtQiwyQkFBMkIsd0JBQXdCLDBDQUEwQyx3Q0FBd0MsMENBQTBDLCtCQUErQixzQkFBc0Isd0JBQXdCLG9CQUFvQiwyQ0FBMkMsNkJBQTZCLHVDQUF1Qyx5QkFBeUIsc0NBQXNDLHNDQUFzQyw4Q0FBOEMsNkJBQTZCLG9EQUFvRCxrREFBa0QsaUJBQWlCLGFBQWEsMkJBQTJCLHlDQUF5QyxnQ0FBZ0MsNkJBQTZCLCtDQUErQyxpQkFBaUIsa0RBQWtELGtEQUFrRCxpQkFBaUIsYUFBYSxTQUFTLEtBQUssbUJBQW1CLHlDQUF5QywyQkFBMkIsc0JBQXNCLGtCQUFrQixtQkFBbUIsNkJBQTZCLHdCQUF3QixtQkFBbUIsbUJBQW1CLG1CQUFtQixvQkFBb0Isb0JBQW9CLG1CQUFtQjtBQUM5akc7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpRUFBZSx1QkFBdUIsRUFBQyIsInNvdXJjZXMiOlsid2VicGFjazovLzIwMjQta3Rzc3R1ZGlvLWhvbWV3b3Jrcy8uL3NyYy9jb21wb25lbnRzL011bHRpRHJvcGRvd24vTXVsdGlEcm9wZG93bi5tb2R1bGUuc2Nzcz83OWE1Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIGAuTXVsdGlEcm9wZG93bi1tb2R1bGVfX211bHRpZHJvcGRvd257ZGlzcGxheTpmbGV4O2ZsZXgtZGlyZWN0aW9uOmNvbHVtbjtwYWRkaW5nOjA7cG9zaXRpb246cmVsYXRpdmV9Lk11bHRpRHJvcGRvd24tbW9kdWxlX19tdWx0aWRyb3Bkb3duX19vcHRpb25ze2JhY2tncm91bmQtY29sb3I6I2ZmZjtib3gtc2hhZG93OjBweCA0cHggMTBweCAwcHggcmdiYSgwLDAsMCwuMjUpO2JvcmRlci1yYWRpdXM6MTBweDtwb3NpdGlvbjphYnNvbHV0ZTt0b3A6MTAwJTt3aWR0aDoxMDAlO2xlZnQ6MDttYXJnaW4tdG9wOjhweDtvdmVyZmxvdy15OmF1dG87bWF4LWhlaWdodDoxNDRweDt6LWluZGV4OjEwMH0uTXVsdGlEcm9wZG93bi1tb2R1bGVfX211bHRpZHJvcGRvd25fX29wdGlvbnM6Oi13ZWJraXQtc2Nyb2xsYmFye3dpZHRoOjEwcHg7Ym9yZGVyLXJhZGl1czoxMHB4fS5NdWx0aURyb3Bkb3duLW1vZHVsZV9fbXVsdGlkcm9wZG93bl9fb3B0aW9uczo6LXdlYmtpdC1zY3JvbGxiYXItdGh1bWJ7YmFja2dyb3VuZDojYWZhZGI1O2JvcmRlci1yYWRpdXM6MTBweH0uTXVsdGlEcm9wZG93bi1tb2R1bGVfX211bHRpZHJvcGRvd25fX29wdGlvbnNfX29wdGlvbntwYWRkaW5nOjE0cHggMTJweDtjdXJzb3I6cG9pbnRlcn0uTXVsdGlEcm9wZG93bi1tb2R1bGVfX211bHRpZHJvcGRvd25fX29wdGlvbnNfX29wdGlvbjpob3Zlcntjb2xvcjojYWZhZGI1fS5NdWx0aURyb3Bkb3duLW1vZHVsZV9fbXVsdGlkcm9wZG93bl9fb3B0aW9uc19fb3B0aW9uX3NlbGVjdGVkLC5NdWx0aURyb3Bkb3duLW1vZHVsZV9fbXVsdGlkcm9wZG93bl9fb3B0aW9uc19fb3B0aW9uX3NlbGVjdGVkOmhvdmVye2NvbG9yOiNiNTQ2MGZ9YCwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9zcmMvY29tcG9uZW50cy9NdWx0aURyb3Bkb3duL011bHRpRHJvcGRvd24ubW9kdWxlLnNjc3NcIixcIndlYnBhY2s6Ly8uL3NyYy9zdHlsZXMvdmFyaWFibGVzLnNjc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBVUEscUNBQ0ksWUFBQSxDQUNBLHFCQUFBLENBQ0EsU0FBQSxDQUNBLGlCQUFBLENBRUEsOENBQ0kscUJDWkEsQ0RhQSwyQ0FkUyxDQWVULGtCQ1hRLENEWVIsaUJBQUEsQ0FDQSxRQUFBLENBQ0EsVUFBQSxDQUNBLE1BQUEsQ0FDQSxjQ1RJLENEVUosZUFBQSxDQUNBLGdCQUFBLENBQ0EsV0FBQSxDQUVBLGlFQUNJLFVDdEJJLENEdUJKLGtCQ3ZCSSxDRHlCSix1RUFDSSxrQkM1QlQsQ0Q2QlMsa0JDM0JBLENEK0JSLHNEQUNJLGlCQW5DSyxDQW9DTCxjQUFBLENBRUEsNERBQ0ksYUN0Q1QsQ0R5Q0ssb0lBQ0ksYUNoRFJcIixcInNvdXJjZXNDb250ZW50XCI6W1wiQHVzZSAnc3R5bGVzL3ZhcmlhYmxlcy5zY3NzJyBhcyB2YXI7XFxyXFxuXFxyXFxuJG11bHRpZHJvcGRvd24tZ2FwOiB2YXIuJHNwYWNlLXh4cztcXHJcXG4kb3B0aW9ucy1iZzogdmFyLiRsaWdodDtcXHJcXG4kb3B0aW9ucy1zaGFkb3c6IDBweCA0cHggMTBweCAwcHggcmdiYSgwLCAwLCAwLCAwLjI1KTtcXHJcXG4kb3B0aW9uLXBhZGRpbmc6IHZhci4kc3BhY2UtcyB2YXIuJHNwYWNlLXhzOyBcXHJcXG4kb3B0aW9uLWNvbG9yLWhvdmVyOiB2YXIuJGdyYXk7XFxyXFxuJG9wdGlvbi1jb2xvci1zZWxlY3RlZDogdmFyLiRicmFuZDtcXHJcXG4kb3B0aW9uLWJvcmRlcjogdmFyLiRib3JkZXItcmFkaXVzO1xcclxcblxcclxcbi5tdWx0aWRyb3Bkb3duIHtcXHJcXG4gICAgZGlzcGxheTogZmxleDtcXHJcXG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXHJcXG4gICAgcGFkZGluZzogMDtcXHJcXG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xcclxcblxcclxcbiAgICAmX19vcHRpb25zIHtcXHJcXG4gICAgICAgIGJhY2tncm91bmQtY29sb3I6ICRvcHRpb25zLWJnO1xcclxcbiAgICAgICAgYm94LXNoYWRvdzogJG9wdGlvbnMtc2hhZG93O1xcclxcbiAgICAgICAgYm9yZGVyLXJhZGl1czogJG9wdGlvbi1ib3JkZXI7XFxyXFxuICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XFxyXFxuICAgICAgICB0b3A6IDEwMCU7XFxyXFxuICAgICAgICB3aWR0aDogMTAwJTtcXHJcXG4gICAgICAgIGxlZnQ6IDA7XFxyXFxuICAgICAgICBtYXJnaW4tdG9wOiAkbXVsdGlkcm9wZG93bi1nYXA7XFxyXFxuICAgICAgICBvdmVyZmxvdy15OiBhdXRvO1xcclxcbiAgICAgICAgbWF4LWhlaWdodDogY2FsYyg0OHB4ICogMyk7XFxyXFxuICAgICAgICB6LWluZGV4OiAxMDA7XFxyXFxuXFxyXFxuICAgICAgICAmOjotd2Via2l0LXNjcm9sbGJhciB7XFxyXFxuICAgICAgICAgICAgd2lkdGg6ICRvcHRpb24tYm9yZGVyO1xcclxcbiAgICAgICAgICAgIGJvcmRlci1yYWRpdXM6ICRvcHRpb24tYm9yZGVyO1xcclxcblxcclxcbiAgICAgICAgICAgICYtdGh1bWIge1xcclxcbiAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kOiAkb3B0aW9uLWNvbG9yLWhvdmVyO1xcclxcbiAgICAgICAgICAgICAgICBib3JkZXItcmFkaXVzOiAkb3B0aW9uLWJvcmRlcjtcXHJcXG4gICAgICAgICAgICB9XFxyXFxuICAgICAgICB9XFxyXFxuXFxyXFxuICAgICAgICAmX19vcHRpb24ge1xcclxcbiAgICAgICAgICAgIHBhZGRpbmc6ICRvcHRpb24tcGFkZGluZztcXHJcXG4gICAgICAgICAgICBjdXJzb3I6IHBvaW50ZXI7XFxyXFxuXFxyXFxuICAgICAgICAgICAgJjpob3ZlciB7XFxyXFxuICAgICAgICAgICAgICAgIGNvbG9yOiAkb3B0aW9uLWNvbG9yLWhvdmVyO1xcclxcbiAgICAgICAgICAgIH1cXHJcXG5cXHJcXG4gICAgICAgICAgICAmX3NlbGVjdGVkLCAmX3NlbGVjdGVkOmhvdmVyIHtcXHJcXG4gICAgICAgICAgICAgICAgY29sb3I6ICRvcHRpb24tY29sb3Itc2VsZWN0ZWQ7XFxyXFxuICAgICAgICAgICAgfVxcclxcbiAgICAgICAgfVxcclxcbiAgICB9XFxyXFxufVwiLFwiJGJyYW5kOiAjQjU0NjBGO1xcclxcbiRicmFuZC1ob3ZlcjogcmdiYSgxODEsIDcwLCAxNSwgMC43KTtcXHJcXG4kYnJhbmQtYWN0aXZlOiAjODcyRDAxO1xcclxcblxcclxcbiRkYXJrOiBibGFjazsgXFxyXFxuJGxpZ2h0OiB3aGl0ZTtcXHJcXG4kZ3JheTogI0FGQURCNTtcXHJcXG5cXHJcXG4kYm9yZGVyLXJhZGl1czogMTBweDtcXHJcXG5cXHJcXG4kc3BhY2UteGw6IDI0cHg7XFxyXFxuJHNwYWNlLWw6IDIwcHg7XFxyXFxuJHNwYWNlLW06IDE2cHg7XFxyXFxuJHNwYWNlLXM6IDE0cHg7XFxyXFxuJHNwYWNlLXhzOiAxMnB4O1xcclxcbiRzcGFjZS14eHM6IDhweDtcIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLmxvY2FscyA9IHtcblx0XCJtdWx0aWRyb3Bkb3duXCI6IGBNdWx0aURyb3Bkb3duLW1vZHVsZV9fbXVsdGlkcm9wZG93bmAsXG5cdFwibXVsdGlkcm9wZG93bl9fb3B0aW9uc1wiOiBgTXVsdGlEcm9wZG93bi1tb2R1bGVfX211bHRpZHJvcGRvd25fX29wdGlvbnNgLFxuXHRcIm11bHRpZHJvcGRvd25fX29wdGlvbnNfX29wdGlvblwiOiBgTXVsdGlEcm9wZG93bi1tb2R1bGVfX211bHRpZHJvcGRvd25fX29wdGlvbnNfX29wdGlvbmAsXG5cdFwibXVsdGlkcm9wZG93bl9fb3B0aW9uc19fb3B0aW9uX3NlbGVjdGVkXCI6IGBNdWx0aURyb3Bkb3duLW1vZHVsZV9fbXVsdGlkcm9wZG93bl9fb3B0aW9uc19fb3B0aW9uX3NlbGVjdGVkYFxufTtcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///1562\n')},1078:(module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   A: () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(963);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(9089);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);\n// Imports\n\n\nvar ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, `.PageController-module__page-controller{margin:0 auto;display:flex;gap:15px}.PageController-module__page-controller__numbers{display:flex;gap:0}.PageController-module__page-controller__numbers__number,.PageController-module__page-controller__numbers__points{cursor:pointer;width:38px;height:42px;text-align:center;display:flex;align-items:center;justify-content:center}.PageController-module__page-controller__numbers__number_selected,.PageController-module__page-controller__numbers__points_selected{background-color:#b5460f;color:#fff}`, "",{"version":3,"sources":["webpack://./src/components/PageController/PageController.module.scss","webpack://./src/styles/variables.scss"],"names":[],"mappings":"AAEA,wCACI,aAAA,CACA,YAAA,CACA,QAAA,CAEA,iDACI,YAAA,CACA,KAAA,CAEA,kHACI,cAAA,CACA,UAAA,CACA,WAAA,CACA,iBAAA,CACA,YAAA,CACA,kBAAA,CACA,sBAAA,CAEA,oIACI,wBCrBR,CDsBQ,UCjBR","sourcesContent":["@use \'styles/variables.scss\' as var;\\r\\n\\r\\n.page-controller {\\r\\n    margin: 0 auto;\\r\\n    display: flex;\\r\\n    gap: 15px;\\r\\n\\r\\n    &__numbers {\\r\\n        display: flex;\\r\\n        gap: 0;\\r\\n\\r\\n        &__number, &__points {\\r\\n            cursor: pointer;\\r\\n            width: 38px;\\r\\n            height: 42px;\\r\\n            text-align: center;\\r\\n            display: flex;\\r\\n            align-items: center;\\r\\n            justify-content: center;\\r\\n\\r\\n            &_selected {\\r\\n                background-color: var.$brand;\\r\\n                color: var.$light;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}","$brand: #B5460F;\\r\\n$brand-hover: rgba(181, 70, 15, 0.7);\\r\\n$brand-active: #872D01;\\r\\n\\r\\n$dark: black; \\r\\n$light: white;\\r\\n$gray: #AFADB5;\\r\\n\\r\\n$border-radius: 10px;\\r\\n\\r\\n$space-xl: 24px;\\r\\n$space-l: 20px;\\r\\n$space-m: 16px;\\r\\n$space-s: 14px;\\r\\n$space-xs: 12px;\\r\\n$space-xxs: 8px;"],"sourceRoot":""}]);\n// Exports\n___CSS_LOADER_EXPORT___.locals = {\n\t"page-controller": `PageController-module__page-controller`,\n\t"page-controller__numbers": `PageController-module__page-controller__numbers`,\n\t"page-controller__numbers__number": `PageController-module__page-controller__numbers__number`,\n\t"page-controller__numbers__points": `PageController-module__page-controller__numbers__points`,\n\t"page-controller__numbers__number_selected": `PageController-module__page-controller__numbers__number_selected`,\n\t"page-controller__numbers__points_selected": `PageController-module__page-controller__numbers__points_selected`\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTA3OC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7QUFDZ0g7QUFDakI7QUFDL0YsOEJBQThCLG1GQUEyQixDQUFDLDRGQUFxQztBQUMvRjtBQUNBLGtGQUFrRixjQUFjLGFBQWEsU0FBUyxpREFBaUQsYUFBYSxNQUFNLGtIQUFrSCxlQUFlLFdBQVcsWUFBWSxrQkFBa0IsYUFBYSxtQkFBbUIsdUJBQXVCLG9JQUFvSSx5QkFBeUIsV0FBVyxPQUFPLGlZQUFpWSwwQkFBMEIsdUJBQXVCLHNCQUFzQixrQkFBa0Isd0JBQXdCLDBCQUEwQixtQkFBbUIsc0NBQXNDLGdDQUFnQyw0QkFBNEIsNkJBQTZCLG1DQUFtQyw4QkFBOEIsb0NBQW9DLHdDQUF3QyxnQ0FBZ0MsaURBQWlELHNDQUFzQyxpQkFBaUIsYUFBYSxTQUFTLEtBQUssbUJBQW1CLHlDQUF5QywyQkFBMkIsc0JBQXNCLGtCQUFrQixtQkFBbUIsNkJBQTZCLHdCQUF3QixtQkFBbUIsbUJBQW1CLG1CQUFtQixvQkFBb0Isb0JBQW9CLG1CQUFtQjtBQUNuMUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUVBQWUsdUJBQXVCLEVBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8yMDI0LWt0c3N0dWRpby1ob21ld29ya3MvLi9zcmMvY29tcG9uZW50cy9QYWdlQ29udHJvbGxlci9QYWdlQ29udHJvbGxlci5tb2R1bGUuc2Nzcz8xMzkxIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIGAuUGFnZUNvbnRyb2xsZXItbW9kdWxlX19wYWdlLWNvbnRyb2xsZXJ7bWFyZ2luOjAgYXV0bztkaXNwbGF5OmZsZXg7Z2FwOjE1cHh9LlBhZ2VDb250cm9sbGVyLW1vZHVsZV9fcGFnZS1jb250cm9sbGVyX19udW1iZXJze2Rpc3BsYXk6ZmxleDtnYXA6MH0uUGFnZUNvbnRyb2xsZXItbW9kdWxlX19wYWdlLWNvbnRyb2xsZXJfX251bWJlcnNfX251bWJlciwuUGFnZUNvbnRyb2xsZXItbW9kdWxlX19wYWdlLWNvbnRyb2xsZXJfX251bWJlcnNfX3BvaW50c3tjdXJzb3I6cG9pbnRlcjt3aWR0aDozOHB4O2hlaWdodDo0MnB4O3RleHQtYWxpZ246Y2VudGVyO2Rpc3BsYXk6ZmxleDthbGlnbi1pdGVtczpjZW50ZXI7anVzdGlmeS1jb250ZW50OmNlbnRlcn0uUGFnZUNvbnRyb2xsZXItbW9kdWxlX19wYWdlLWNvbnRyb2xsZXJfX251bWJlcnNfX251bWJlcl9zZWxlY3RlZCwuUGFnZUNvbnRyb2xsZXItbW9kdWxlX19wYWdlLWNvbnRyb2xsZXJfX251bWJlcnNfX3BvaW50c19zZWxlY3RlZHtiYWNrZ3JvdW5kLWNvbG9yOiNiNTQ2MGY7Y29sb3I6I2ZmZn1gLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL3NyYy9jb21wb25lbnRzL1BhZ2VDb250cm9sbGVyL1BhZ2VDb250cm9sbGVyLm1vZHVsZS5zY3NzXCIsXCJ3ZWJwYWNrOi8vLi9zcmMvc3R5bGVzL3ZhcmlhYmxlcy5zY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUVBLHdDQUNJLGFBQUEsQ0FDQSxZQUFBLENBQ0EsUUFBQSxDQUVBLGlEQUNJLFlBQUEsQ0FDQSxLQUFBLENBRUEsa0hBQ0ksY0FBQSxDQUNBLFVBQUEsQ0FDQSxXQUFBLENBQ0EsaUJBQUEsQ0FDQSxZQUFBLENBQ0Esa0JBQUEsQ0FDQSxzQkFBQSxDQUVBLG9JQUNJLHdCQ3JCUixDRHNCUSxVQ2pCUlwiLFwic291cmNlc0NvbnRlbnRcIjpbXCJAdXNlICdzdHlsZXMvdmFyaWFibGVzLnNjc3MnIGFzIHZhcjtcXHJcXG5cXHJcXG4ucGFnZS1jb250cm9sbGVyIHtcXHJcXG4gICAgbWFyZ2luOiAwIGF1dG87XFxyXFxuICAgIGRpc3BsYXk6IGZsZXg7XFxyXFxuICAgIGdhcDogMTVweDtcXHJcXG5cXHJcXG4gICAgJl9fbnVtYmVycyB7XFxyXFxuICAgICAgICBkaXNwbGF5OiBmbGV4O1xcclxcbiAgICAgICAgZ2FwOiAwO1xcclxcblxcclxcbiAgICAgICAgJl9fbnVtYmVyLCAmX19wb2ludHMge1xcclxcbiAgICAgICAgICAgIGN1cnNvcjogcG9pbnRlcjtcXHJcXG4gICAgICAgICAgICB3aWR0aDogMzhweDtcXHJcXG4gICAgICAgICAgICBoZWlnaHQ6IDQycHg7XFxyXFxuICAgICAgICAgICAgdGV4dC1hbGlnbjogY2VudGVyO1xcclxcbiAgICAgICAgICAgIGRpc3BsYXk6IGZsZXg7XFxyXFxuICAgICAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXHJcXG4gICAgICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXHJcXG5cXHJcXG4gICAgICAgICAgICAmX3NlbGVjdGVkIHtcXHJcXG4gICAgICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogdmFyLiRicmFuZDtcXHJcXG4gICAgICAgICAgICAgICAgY29sb3I6IHZhci4kbGlnaHQ7XFxyXFxuICAgICAgICAgICAgfVxcclxcbiAgICAgICAgfVxcclxcbiAgICB9XFxyXFxufVwiLFwiJGJyYW5kOiAjQjU0NjBGO1xcclxcbiRicmFuZC1ob3ZlcjogcmdiYSgxODEsIDcwLCAxNSwgMC43KTtcXHJcXG4kYnJhbmQtYWN0aXZlOiAjODcyRDAxO1xcclxcblxcclxcbiRkYXJrOiBibGFjazsgXFxyXFxuJGxpZ2h0OiB3aGl0ZTtcXHJcXG4kZ3JheTogI0FGQURCNTtcXHJcXG5cXHJcXG4kYm9yZGVyLXJhZGl1czogMTBweDtcXHJcXG5cXHJcXG4kc3BhY2UteGw6IDI0cHg7XFxyXFxuJHNwYWNlLWw6IDIwcHg7XFxyXFxuJHNwYWNlLW06IDE2cHg7XFxyXFxuJHNwYWNlLXM6IDE0cHg7XFxyXFxuJHNwYWNlLXhzOiAxMnB4O1xcclxcbiRzcGFjZS14eHM6IDhweDtcIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLmxvY2FscyA9IHtcblx0XCJwYWdlLWNvbnRyb2xsZXJcIjogYFBhZ2VDb250cm9sbGVyLW1vZHVsZV9fcGFnZS1jb250cm9sbGVyYCxcblx0XCJwYWdlLWNvbnRyb2xsZXJfX251bWJlcnNcIjogYFBhZ2VDb250cm9sbGVyLW1vZHVsZV9fcGFnZS1jb250cm9sbGVyX19udW1iZXJzYCxcblx0XCJwYWdlLWNvbnRyb2xsZXJfX251bWJlcnNfX251bWJlclwiOiBgUGFnZUNvbnRyb2xsZXItbW9kdWxlX19wYWdlLWNvbnRyb2xsZXJfX251bWJlcnNfX251bWJlcmAsXG5cdFwicGFnZS1jb250cm9sbGVyX19udW1iZXJzX19wb2ludHNcIjogYFBhZ2VDb250cm9sbGVyLW1vZHVsZV9fcGFnZS1jb250cm9sbGVyX19udW1iZXJzX19wb2ludHNgLFxuXHRcInBhZ2UtY29udHJvbGxlcl9fbnVtYmVyc19fbnVtYmVyX3NlbGVjdGVkXCI6IGBQYWdlQ29udHJvbGxlci1tb2R1bGVfX3BhZ2UtY29udHJvbGxlcl9fbnVtYmVyc19fbnVtYmVyX3NlbGVjdGVkYCxcblx0XCJwYWdlLWNvbnRyb2xsZXJfX251bWJlcnNfX3BvaW50c19zZWxlY3RlZFwiOiBgUGFnZUNvbnRyb2xsZXItbW9kdWxlX19wYWdlLWNvbnRyb2xsZXJfX251bWJlcnNfX3BvaW50c19zZWxlY3RlZGBcbn07XG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///1078\n')},8526:(module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   A: () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(963);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(9089);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);\n// Imports\n\n\nvar ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, `.PageTemplate-module__page-template{margin:50px 100px 0 100px;display:flex;flex-direction:column;gap:48px;padding-bottom:50px}.PageTemplate-module__page-template__name{text-align:center}.PageTemplate-module__page-template__content{display:flex;flex-direction:column;gap:24px}`, "",{"version":3,"sources":["webpack://./src/components/PageTemplate/PageTemplate.module.scss"],"names":[],"mappings":"AAKA,oCAEI,yBAPU,CAQV,YAAA,CACA,qBAAA,CACA,QAPO,CAQP,mBAVkB,CAYlB,0CACI,iBAAA,CAGJ,6CACI,YAAA,CACA,qBAAA,CACA,QAlBW","sourcesContent":["$page-margin: 50px 100px 0 100px;\\r\\n$page-padding-bottom: 50px;\\r\\n$page-content-gap: 24px;\\r\\n$page-gap: 48px;\\r\\n\\r\\n.page-template {\\r\\n\\r\\n    margin: $page-margin;\\r\\n    display: flex;\\r\\n    flex-direction: column;\\r\\n    gap: $page-gap;\\r\\n    padding-bottom: $page-padding-bottom;\\r\\n\\r\\n    &__name {\\r\\n        text-align: center;\\r\\n    }\\r\\n\\r\\n    &__content {\\r\\n        display: flex;\\r\\n        flex-direction: column;\\r\\n        gap: $page-content-gap;\\r\\n    }    \\r\\n}"],"sourceRoot":""}]);\n// Exports\n___CSS_LOADER_EXPORT___.locals = {\n\t"page-template": `PageTemplate-module__page-template`,\n\t"page-template__name": `PageTemplate-module__page-template__name`,\n\t"page-template__content": `PageTemplate-module__page-template__content`\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiODUyNi5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7QUFDZ0g7QUFDakI7QUFDL0YsOEJBQThCLG1GQUEyQixDQUFDLDRGQUFxQztBQUMvRjtBQUNBLDhFQUE4RSwwQkFBMEIsYUFBYSxzQkFBc0IsU0FBUyxvQkFBb0IsMENBQTBDLGtCQUFrQiw2Q0FBNkMsYUFBYSxzQkFBc0IsU0FBUyxPQUFPLDJSQUEyUiwrQkFBK0IsNEJBQTRCLG9CQUFvQix3QkFBd0IsaUNBQWlDLHNCQUFzQiwrQkFBK0IsdUJBQXVCLDZDQUE2QyxxQkFBcUIsK0JBQStCLFNBQVMsd0JBQXdCLDBCQUEwQixtQ0FBbUMsbUNBQW1DLGFBQWEsS0FBSyxtQkFBbUI7QUFDMWpDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlFQUFlLHVCQUF1QixFQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vMjAyNC1rdHNzdHVkaW8taG9tZXdvcmtzLy4vc3JjL2NvbXBvbmVudHMvUGFnZVRlbXBsYXRlL1BhZ2VUZW1wbGF0ZS5tb2R1bGUuc2Nzcz9iN2IxIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIGAuUGFnZVRlbXBsYXRlLW1vZHVsZV9fcGFnZS10ZW1wbGF0ZXttYXJnaW46NTBweCAxMDBweCAwIDEwMHB4O2Rpc3BsYXk6ZmxleDtmbGV4LWRpcmVjdGlvbjpjb2x1bW47Z2FwOjQ4cHg7cGFkZGluZy1ib3R0b206NTBweH0uUGFnZVRlbXBsYXRlLW1vZHVsZV9fcGFnZS10ZW1wbGF0ZV9fbmFtZXt0ZXh0LWFsaWduOmNlbnRlcn0uUGFnZVRlbXBsYXRlLW1vZHVsZV9fcGFnZS10ZW1wbGF0ZV9fY29udGVudHtkaXNwbGF5OmZsZXg7ZmxleC1kaXJlY3Rpb246Y29sdW1uO2dhcDoyNHB4fWAsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vc3JjL2NvbXBvbmVudHMvUGFnZVRlbXBsYXRlL1BhZ2VUZW1wbGF0ZS5tb2R1bGUuc2Nzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFLQSxvQ0FFSSx5QkFQVSxDQVFWLFlBQUEsQ0FDQSxxQkFBQSxDQUNBLFFBUE8sQ0FRUCxtQkFWa0IsQ0FZbEIsMENBQ0ksaUJBQUEsQ0FHSiw2Q0FDSSxZQUFBLENBQ0EscUJBQUEsQ0FDQSxRQWxCV1wiLFwic291cmNlc0NvbnRlbnRcIjpbXCIkcGFnZS1tYXJnaW46IDUwcHggMTAwcHggMCAxMDBweDtcXHJcXG4kcGFnZS1wYWRkaW5nLWJvdHRvbTogNTBweDtcXHJcXG4kcGFnZS1jb250ZW50LWdhcDogMjRweDtcXHJcXG4kcGFnZS1nYXA6IDQ4cHg7XFxyXFxuXFxyXFxuLnBhZ2UtdGVtcGxhdGUge1xcclxcblxcclxcbiAgICBtYXJnaW46ICRwYWdlLW1hcmdpbjtcXHJcXG4gICAgZGlzcGxheTogZmxleDtcXHJcXG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXHJcXG4gICAgZ2FwOiAkcGFnZS1nYXA7XFxyXFxuICAgIHBhZGRpbmctYm90dG9tOiAkcGFnZS1wYWRkaW5nLWJvdHRvbTtcXHJcXG5cXHJcXG4gICAgJl9fbmFtZSB7XFxyXFxuICAgICAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxyXFxuICAgIH1cXHJcXG5cXHJcXG4gICAgJl9fY29udGVudCB7XFxyXFxuICAgICAgICBkaXNwbGF5OiBmbGV4O1xcclxcbiAgICAgICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXHJcXG4gICAgICAgIGdhcDogJHBhZ2UtY29udGVudC1nYXA7XFxyXFxuICAgIH0gICAgXFxyXFxufVwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ubG9jYWxzID0ge1xuXHRcInBhZ2UtdGVtcGxhdGVcIjogYFBhZ2VUZW1wbGF0ZS1tb2R1bGVfX3BhZ2UtdGVtcGxhdGVgLFxuXHRcInBhZ2UtdGVtcGxhdGVfX25hbWVcIjogYFBhZ2VUZW1wbGF0ZS1tb2R1bGVfX3BhZ2UtdGVtcGxhdGVfX25hbWVgLFxuXHRcInBhZ2UtdGVtcGxhdGVfX2NvbnRlbnRcIjogYFBhZ2VUZW1wbGF0ZS1tb2R1bGVfX3BhZ2UtdGVtcGxhdGVfX2NvbnRlbnRgXG59O1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///8526\n')},9676:(module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   A: () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(963);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(9089);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);\n// Imports\n\n\nvar ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, `.RecipeCardCaption-module__recipe-card-caption{display:flex;align-items:center;justify-content:start;gap:6px}`, "",{"version":3,"sources":["webpack://./src/components/RecipeCard/components/RecipeCardCaption/RecipeCardCaption.module.scss"],"names":[],"mappings":"AAAA,+CACI,YAAA,CACA,kBAAA,CACA,qBAAA,CACA,OAAA","sourcesContent":[".recipe-card-caption {\\r\\n    display: flex;\\r\\n    align-items: center;\\r\\n    justify-content: start;\\r\\n    gap: 6px;\\r\\n}"],"sourceRoot":""}]);\n// Exports\n___CSS_LOADER_EXPORT___.locals = {\n\t"recipe-card-caption": `RecipeCardCaption-module__recipe-card-caption`\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTY3Ni5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7QUFDc0g7QUFDakI7QUFDckcsOEJBQThCLG1GQUEyQixDQUFDLDRGQUFxQztBQUMvRjtBQUNBLHlGQUF5RixhQUFhLG1CQUFtQixzQkFBc0IsUUFBUSxPQUFPLDRPQUE0TyxzQkFBc0IsNEJBQTRCLCtCQUErQixpQkFBaUIsS0FBSyxtQkFBbUI7QUFDcGdCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUVBQWUsdUJBQXVCLEVBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8yMDI0LWt0c3N0dWRpby1ob21ld29ya3MvLi9zcmMvY29tcG9uZW50cy9SZWNpcGVDYXJkL2NvbXBvbmVudHMvUmVjaXBlQ2FyZENhcHRpb24vUmVjaXBlQ2FyZENhcHRpb24ubW9kdWxlLnNjc3M/ZTI0NSJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBgLlJlY2lwZUNhcmRDYXB0aW9uLW1vZHVsZV9fcmVjaXBlLWNhcmQtY2FwdGlvbntkaXNwbGF5OmZsZXg7YWxpZ24taXRlbXM6Y2VudGVyO2p1c3RpZnktY29udGVudDpzdGFydDtnYXA6NnB4fWAsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vc3JjL2NvbXBvbmVudHMvUmVjaXBlQ2FyZC9jb21wb25lbnRzL1JlY2lwZUNhcmRDYXB0aW9uL1JlY2lwZUNhcmRDYXB0aW9uLm1vZHVsZS5zY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUFBLCtDQUNJLFlBQUEsQ0FDQSxrQkFBQSxDQUNBLHFCQUFBLENBQ0EsT0FBQVwiLFwic291cmNlc0NvbnRlbnRcIjpbXCIucmVjaXBlLWNhcmQtY2FwdGlvbiB7XFxyXFxuICAgIGRpc3BsYXk6IGZsZXg7XFxyXFxuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxyXFxuICAgIGp1c3RpZnktY29udGVudDogc3RhcnQ7XFxyXFxuICAgIGdhcDogNnB4O1xcclxcbn1cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLmxvY2FscyA9IHtcblx0XCJyZWNpcGUtY2FyZC1jYXB0aW9uXCI6IGBSZWNpcGVDYXJkQ2FwdGlvbi1tb2R1bGVfX3JlY2lwZS1jYXJkLWNhcHRpb25gXG59O1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///9676\n')},4834:(module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   A: () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(963);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(9089);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);\n// Imports\n\n\nvar ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, `.Text-module__text{font-family:"Roboto"}.Text-module__text_color_primary{color:#000}.Text-module__text_color_secondary{color:#afadb5}.Text-module__text_color_accent{color:#b5460f}.Text-module__text_color_inherit{color:inherit}.Text-module__text_view_title{font-size:44px;line-height:calc(44px + 4px);font-weight:700}.Text-module__text_view_button{font-size:18px;line-height:18px}.Text-module__text_view_p-20{font-size:20px;line-height:calc(20px + 4px)}.Text-module__text_view_p-18{font-size:18px;line-height:calc(18px + 4px)}.Text-module__text_view_p-16{font-size:16px;line-height:calc(16px + 4px)}.Text-module__text_view_p-14{font-size:14px;line-height:calc(14px + 4px)}.Text-module__text_weight_normal{font-weight:400}.Text-module__text_weight_medium{font-weight:500}.Text-module__text_weight_bold{font-weight:700}`, "",{"version":3,"sources":["webpack://./src/components/Text/Text.module.scss","webpack://./src/styles/variables.scss"],"names":[],"mappings":"AAiBA,mBAEI,oBAAA,CAGI,iCACI,UCnBL,CDsBC,mCACI,aCrBL,CDwBC,gCACI,aC/BJ,CDkCA,iCACI,aAAA,CAKJ,8BACI,cA/BJ,CAgCI,4BAAA,CACA,eA5BL,CA+BC,+BACI,cApCH,CAqCG,gBArCH,CAwCD,6BACI,cA9CN,CA+CM,4BAAA,CAGJ,6BACI,cAlDN,CAmDM,4BAAA,CAGJ,6BACI,cAtDN,CAuDM,4BAAA,CAGJ,6BACI,cA1DN,CA2DM,4BAAA,CAKJ,iCACI,eA7DH,CAgED,iCACI,eAhEH,CAmED,+BACI,eAnEL","sourcesContent":["@use \'styles/variables.scss\' as var;\\r\\n\\r\\n$primary: var.$dark;\\r\\n$secondary: var.$gray;\\r\\n$accent: var.$brand;\\r\\n\\r\\n$p20: 20px;\\r\\n$p18: 18px;\\r\\n$p16: 16px;\\r\\n$p14: 14px;\\r\\n$title: 44px;\\r\\n$button: 18px;\\r\\n\\r\\n$normal: 400;\\r\\n$medium: 500;\\r\\n$bold: 700;\\r\\n\\r\\n.text {\\r\\n\\r\\n    font-family: \'Roboto\';\\r\\n\\r\\n    &_color {\\r\\n        &_primary {\\r\\n            color: $primary;\\r\\n        }\\r\\n    \\r\\n        &_secondary {\\r\\n            color: $secondary;\\r\\n        }\\r\\n    \\r\\n        &_accent {\\r\\n            color: $accent;\\r\\n        }\\r\\n\\r\\n        &_inherit {\\r\\n            color: inherit;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    &_view {\\r\\n        &_title {\\r\\n            font-size: $title;\\r\\n            line-height: calc(#{$title} + 4px);\\r\\n            font-weight: $bold;\\r\\n        }\\r\\n\\r\\n        &_button {\\r\\n            font-size: $button;\\r\\n            line-height: $button;\\r\\n        }\\r\\n\\r\\n        &_p-20 {\\r\\n            font-size: $p20;\\r\\n            line-height: calc(#{$p20} + 4px);\\r\\n        }\\r\\n\\r\\n        &_p-18 {\\r\\n            font-size: $p18;\\r\\n            line-height: calc(#{$p18} + 4px);\\r\\n        }\\r\\n\\r\\n        &_p-16 {\\r\\n            font-size: $p16;\\r\\n            line-height: calc(#{$p16} + 4px);\\r\\n        }\\r\\n\\r\\n        &_p-14 {\\r\\n            font-size: $p14;\\r\\n            line-height: calc(#{$p14} + 4px);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    &_weight {\\r\\n        &_normal {\\r\\n            font-weight: $normal;\\r\\n        }\\r\\n\\r\\n        &_medium {\\r\\n            font-weight: $medium;\\r\\n        }\\r\\n\\r\\n        &_bold {\\r\\n            font-weight: $bold;\\r\\n        }\\r\\n    }\\r\\n}","$brand: #B5460F;\\r\\n$brand-hover: rgba(181, 70, 15, 0.7);\\r\\n$brand-active: #872D01;\\r\\n\\r\\n$dark: black; \\r\\n$light: white;\\r\\n$gray: #AFADB5;\\r\\n\\r\\n$border-radius: 10px;\\r\\n\\r\\n$space-xl: 24px;\\r\\n$space-l: 20px;\\r\\n$space-m: 16px;\\r\\n$space-s: 14px;\\r\\n$space-xs: 12px;\\r\\n$space-xxs: 8px;"],"sourceRoot":""}]);\n// Exports\n___CSS_LOADER_EXPORT___.locals = {\n\t"text": `Text-module__text`,\n\t"text_color_primary": `Text-module__text_color_primary`,\n\t"text_color_secondary": `Text-module__text_color_secondary`,\n\t"text_color_accent": `Text-module__text_color_accent`,\n\t"text_color_inherit": `Text-module__text_color_inherit`,\n\t"text_view_title": `Text-module__text_view_title`,\n\t"text_view_button": `Text-module__text_view_button`,\n\t"text_view_p-20": `Text-module__text_view_p-20`,\n\t"text_view_p-18": `Text-module__text_view_p-18`,\n\t"text_view_p-16": `Text-module__text_view_p-16`,\n\t"text_view_p-14": `Text-module__text_view_p-14`,\n\t"text_weight_normal": `Text-module__text_weight_normal`,\n\t"text_weight_medium": `Text-module__text_weight_medium`,\n\t"text_weight_bold": `Text-module__text_weight_bold`\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDgzNC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7QUFDZ0g7QUFDakI7QUFDL0YsOEJBQThCLG1GQUEyQixDQUFDLDRGQUFxQztBQUMvRjtBQUNBLDZEQUE2RCxxQkFBcUIsaUNBQWlDLFdBQVcsbUNBQW1DLGNBQWMsZ0NBQWdDLGNBQWMsaUNBQWlDLGNBQWMsOEJBQThCLGVBQWUsNkJBQTZCLGdCQUFnQiwrQkFBK0IsZUFBZSxpQkFBaUIsNkJBQTZCLGVBQWUsNkJBQTZCLDZCQUE2QixlQUFlLDZCQUE2Qiw2QkFBNkIsZUFBZSw2QkFBNkIsNkJBQTZCLGVBQWUsNkJBQTZCLGlDQUFpQyxnQkFBZ0IsaUNBQWlDLGdCQUFnQiwrQkFBK0IsZ0JBQWdCLE9BQU8sMmdCQUEyZ0IsNEJBQTRCLDBCQUEwQix3QkFBd0IsbUJBQW1CLGVBQWUsZUFBZSxlQUFlLGlCQUFpQixrQkFBa0IscUJBQXFCLGlCQUFpQixlQUFlLGVBQWUsa0NBQWtDLHFCQUFxQix1QkFBdUIsZ0NBQWdDLGFBQWEsaUNBQWlDLGtDQUFrQyxhQUFhLDhCQUE4QiwrQkFBK0IsYUFBYSwyQkFBMkIsK0JBQStCLGFBQWEsU0FBUyxvQkFBb0IscUJBQXFCLGtDQUFrQyxvQ0FBb0MsUUFBUSxPQUFPLG1DQUFtQyxhQUFhLDBCQUEwQixtQ0FBbUMscUNBQXFDLGFBQWEsd0JBQXdCLGdDQUFnQyxvQ0FBb0MsTUFBTSxPQUFPLGFBQWEsd0JBQXdCLGdDQUFnQyxvQ0FBb0MsTUFBTSxPQUFPLGFBQWEsd0JBQXdCLGdDQUFnQyxvQ0FBb0MsTUFBTSxPQUFPLGFBQWEsd0JBQXdCLGdDQUFnQyxvQ0FBb0MsTUFBTSxPQUFPLGFBQWEsU0FBUyxzQkFBc0Isc0JBQXNCLHFDQUFxQyxhQUFhLDBCQUEwQixxQ0FBcUMsYUFBYSx3QkFBd0IsbUNBQW1DLGFBQWEsU0FBUyxLQUFLLG1CQUFtQix5Q0FBeUMsMkJBQTJCLHNCQUFzQixrQkFBa0IsbUJBQW1CLDZCQUE2Qix3QkFBd0IsbUJBQW1CLG1CQUFtQixtQkFBbUIsb0JBQW9CLG9CQUFvQixtQkFBbUI7QUFDL3ZHO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpRUFBZSx1QkFBdUIsRUFBQyIsInNvdXJjZXMiOlsid2VicGFjazovLzIwMjQta3Rzc3R1ZGlvLWhvbWV3b3Jrcy8uL3NyYy9jb21wb25lbnRzL1RleHQvVGV4dC5tb2R1bGUuc2Nzcz80ZTEwIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIGAuVGV4dC1tb2R1bGVfX3RleHR7Zm9udC1mYW1pbHk6XCJSb2JvdG9cIn0uVGV4dC1tb2R1bGVfX3RleHRfY29sb3JfcHJpbWFyeXtjb2xvcjojMDAwfS5UZXh0LW1vZHVsZV9fdGV4dF9jb2xvcl9zZWNvbmRhcnl7Y29sb3I6I2FmYWRiNX0uVGV4dC1tb2R1bGVfX3RleHRfY29sb3JfYWNjZW50e2NvbG9yOiNiNTQ2MGZ9LlRleHQtbW9kdWxlX190ZXh0X2NvbG9yX2luaGVyaXR7Y29sb3I6aW5oZXJpdH0uVGV4dC1tb2R1bGVfX3RleHRfdmlld190aXRsZXtmb250LXNpemU6NDRweDtsaW5lLWhlaWdodDpjYWxjKDQ0cHggKyA0cHgpO2ZvbnQtd2VpZ2h0OjcwMH0uVGV4dC1tb2R1bGVfX3RleHRfdmlld19idXR0b257Zm9udC1zaXplOjE4cHg7bGluZS1oZWlnaHQ6MThweH0uVGV4dC1tb2R1bGVfX3RleHRfdmlld19wLTIwe2ZvbnQtc2l6ZToyMHB4O2xpbmUtaGVpZ2h0OmNhbGMoMjBweCArIDRweCl9LlRleHQtbW9kdWxlX190ZXh0X3ZpZXdfcC0xOHtmb250LXNpemU6MThweDtsaW5lLWhlaWdodDpjYWxjKDE4cHggKyA0cHgpfS5UZXh0LW1vZHVsZV9fdGV4dF92aWV3X3AtMTZ7Zm9udC1zaXplOjE2cHg7bGluZS1oZWlnaHQ6Y2FsYygxNnB4ICsgNHB4KX0uVGV4dC1tb2R1bGVfX3RleHRfdmlld19wLTE0e2ZvbnQtc2l6ZToxNHB4O2xpbmUtaGVpZ2h0OmNhbGMoMTRweCArIDRweCl9LlRleHQtbW9kdWxlX190ZXh0X3dlaWdodF9ub3JtYWx7Zm9udC13ZWlnaHQ6NDAwfS5UZXh0LW1vZHVsZV9fdGV4dF93ZWlnaHRfbWVkaXVte2ZvbnQtd2VpZ2h0OjUwMH0uVGV4dC1tb2R1bGVfX3RleHRfd2VpZ2h0X2JvbGR7Zm9udC13ZWlnaHQ6NzAwfWAsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vc3JjL2NvbXBvbmVudHMvVGV4dC9UZXh0Lm1vZHVsZS5zY3NzXCIsXCJ3ZWJwYWNrOi8vLi9zcmMvc3R5bGVzL3ZhcmlhYmxlcy5zY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQWlCQSxtQkFFSSxvQkFBQSxDQUdJLGlDQUNJLFVDbkJMLENEc0JDLG1DQUNJLGFDckJMLENEd0JDLGdDQUNJLGFDL0JKLENEa0NBLGlDQUNJLGFBQUEsQ0FLSiw4QkFDSSxjQS9CSixDQWdDSSw0QkFBQSxDQUNBLGVBNUJMLENBK0JDLCtCQUNJLGNBcENILENBcUNHLGdCQXJDSCxDQXdDRCw2QkFDSSxjQTlDTixDQStDTSw0QkFBQSxDQUdKLDZCQUNJLGNBbEROLENBbURNLDRCQUFBLENBR0osNkJBQ0ksY0F0RE4sQ0F1RE0sNEJBQUEsQ0FHSiw2QkFDSSxjQTFETixDQTJETSw0QkFBQSxDQUtKLGlDQUNJLGVBN0RILENBZ0VELGlDQUNJLGVBaEVILENBbUVELCtCQUNJLGVBbkVMXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIkB1c2UgJ3N0eWxlcy92YXJpYWJsZXMuc2NzcycgYXMgdmFyO1xcclxcblxcclxcbiRwcmltYXJ5OiB2YXIuJGRhcms7XFxyXFxuJHNlY29uZGFyeTogdmFyLiRncmF5O1xcclxcbiRhY2NlbnQ6IHZhci4kYnJhbmQ7XFxyXFxuXFxyXFxuJHAyMDogMjBweDtcXHJcXG4kcDE4OiAxOHB4O1xcclxcbiRwMTY6IDE2cHg7XFxyXFxuJHAxNDogMTRweDtcXHJcXG4kdGl0bGU6IDQ0cHg7XFxyXFxuJGJ1dHRvbjogMThweDtcXHJcXG5cXHJcXG4kbm9ybWFsOiA0MDA7XFxyXFxuJG1lZGl1bTogNTAwO1xcclxcbiRib2xkOiA3MDA7XFxyXFxuXFxyXFxuLnRleHQge1xcclxcblxcclxcbiAgICBmb250LWZhbWlseTogJ1JvYm90byc7XFxyXFxuXFxyXFxuICAgICZfY29sb3Ige1xcclxcbiAgICAgICAgJl9wcmltYXJ5IHtcXHJcXG4gICAgICAgICAgICBjb2xvcjogJHByaW1hcnk7XFxyXFxuICAgICAgICB9XFxyXFxuICAgIFxcclxcbiAgICAgICAgJl9zZWNvbmRhcnkge1xcclxcbiAgICAgICAgICAgIGNvbG9yOiAkc2Vjb25kYXJ5O1xcclxcbiAgICAgICAgfVxcclxcbiAgICBcXHJcXG4gICAgICAgICZfYWNjZW50IHtcXHJcXG4gICAgICAgICAgICBjb2xvcjogJGFjY2VudDtcXHJcXG4gICAgICAgIH1cXHJcXG5cXHJcXG4gICAgICAgICZfaW5oZXJpdCB7XFxyXFxuICAgICAgICAgICAgY29sb3I6IGluaGVyaXQ7XFxyXFxuICAgICAgICB9XFxyXFxuICAgIH1cXHJcXG5cXHJcXG4gICAgJl92aWV3IHtcXHJcXG4gICAgICAgICZfdGl0bGUge1xcclxcbiAgICAgICAgICAgIGZvbnQtc2l6ZTogJHRpdGxlO1xcclxcbiAgICAgICAgICAgIGxpbmUtaGVpZ2h0OiBjYWxjKCN7JHRpdGxlfSArIDRweCk7XFxyXFxuICAgICAgICAgICAgZm9udC13ZWlnaHQ6ICRib2xkO1xcclxcbiAgICAgICAgfVxcclxcblxcclxcbiAgICAgICAgJl9idXR0b24ge1xcclxcbiAgICAgICAgICAgIGZvbnQtc2l6ZTogJGJ1dHRvbjtcXHJcXG4gICAgICAgICAgICBsaW5lLWhlaWdodDogJGJ1dHRvbjtcXHJcXG4gICAgICAgIH1cXHJcXG5cXHJcXG4gICAgICAgICZfcC0yMCB7XFxyXFxuICAgICAgICAgICAgZm9udC1zaXplOiAkcDIwO1xcclxcbiAgICAgICAgICAgIGxpbmUtaGVpZ2h0OiBjYWxjKCN7JHAyMH0gKyA0cHgpO1xcclxcbiAgICAgICAgfVxcclxcblxcclxcbiAgICAgICAgJl9wLTE4IHtcXHJcXG4gICAgICAgICAgICBmb250LXNpemU6ICRwMTg7XFxyXFxuICAgICAgICAgICAgbGluZS1oZWlnaHQ6IGNhbGMoI3skcDE4fSArIDRweCk7XFxyXFxuICAgICAgICB9XFxyXFxuXFxyXFxuICAgICAgICAmX3AtMTYge1xcclxcbiAgICAgICAgICAgIGZvbnQtc2l6ZTogJHAxNjtcXHJcXG4gICAgICAgICAgICBsaW5lLWhlaWdodDogY2FsYygjeyRwMTZ9ICsgNHB4KTtcXHJcXG4gICAgICAgIH1cXHJcXG5cXHJcXG4gICAgICAgICZfcC0xNCB7XFxyXFxuICAgICAgICAgICAgZm9udC1zaXplOiAkcDE0O1xcclxcbiAgICAgICAgICAgIGxpbmUtaGVpZ2h0OiBjYWxjKCN7JHAxNH0gKyA0cHgpO1xcclxcbiAgICAgICAgfVxcclxcbiAgICB9XFxyXFxuXFxyXFxuICAgICZfd2VpZ2h0IHtcXHJcXG4gICAgICAgICZfbm9ybWFsIHtcXHJcXG4gICAgICAgICAgICBmb250LXdlaWdodDogJG5vcm1hbDtcXHJcXG4gICAgICAgIH1cXHJcXG5cXHJcXG4gICAgICAgICZfbWVkaXVtIHtcXHJcXG4gICAgICAgICAgICBmb250LXdlaWdodDogJG1lZGl1bTtcXHJcXG4gICAgICAgIH1cXHJcXG5cXHJcXG4gICAgICAgICZfYm9sZCB7XFxyXFxuICAgICAgICAgICAgZm9udC13ZWlnaHQ6ICRib2xkO1xcclxcbiAgICAgICAgfVxcclxcbiAgICB9XFxyXFxufVwiLFwiJGJyYW5kOiAjQjU0NjBGO1xcclxcbiRicmFuZC1ob3ZlcjogcmdiYSgxODEsIDcwLCAxNSwgMC43KTtcXHJcXG4kYnJhbmQtYWN0aXZlOiAjODcyRDAxO1xcclxcblxcclxcbiRkYXJrOiBibGFjazsgXFxyXFxuJGxpZ2h0OiB3aGl0ZTtcXHJcXG4kZ3JheTogI0FGQURCNTtcXHJcXG5cXHJcXG4kYm9yZGVyLXJhZGl1czogMTBweDtcXHJcXG5cXHJcXG4kc3BhY2UteGw6IDI0cHg7XFxyXFxuJHNwYWNlLWw6IDIwcHg7XFxyXFxuJHNwYWNlLW06IDE2cHg7XFxyXFxuJHNwYWNlLXM6IDE0cHg7XFxyXFxuJHNwYWNlLXhzOiAxMnB4O1xcclxcbiRzcGFjZS14eHM6IDhweDtcIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLmxvY2FscyA9IHtcblx0XCJ0ZXh0XCI6IGBUZXh0LW1vZHVsZV9fdGV4dGAsXG5cdFwidGV4dF9jb2xvcl9wcmltYXJ5XCI6IGBUZXh0LW1vZHVsZV9fdGV4dF9jb2xvcl9wcmltYXJ5YCxcblx0XCJ0ZXh0X2NvbG9yX3NlY29uZGFyeVwiOiBgVGV4dC1tb2R1bGVfX3RleHRfY29sb3Jfc2Vjb25kYXJ5YCxcblx0XCJ0ZXh0X2NvbG9yX2FjY2VudFwiOiBgVGV4dC1tb2R1bGVfX3RleHRfY29sb3JfYWNjZW50YCxcblx0XCJ0ZXh0X2NvbG9yX2luaGVyaXRcIjogYFRleHQtbW9kdWxlX190ZXh0X2NvbG9yX2luaGVyaXRgLFxuXHRcInRleHRfdmlld190aXRsZVwiOiBgVGV4dC1tb2R1bGVfX3RleHRfdmlld190aXRsZWAsXG5cdFwidGV4dF92aWV3X2J1dHRvblwiOiBgVGV4dC1tb2R1bGVfX3RleHRfdmlld19idXR0b25gLFxuXHRcInRleHRfdmlld19wLTIwXCI6IGBUZXh0LW1vZHVsZV9fdGV4dF92aWV3X3AtMjBgLFxuXHRcInRleHRfdmlld19wLTE4XCI6IGBUZXh0LW1vZHVsZV9fdGV4dF92aWV3X3AtMThgLFxuXHRcInRleHRfdmlld19wLTE2XCI6IGBUZXh0LW1vZHVsZV9fdGV4dF92aWV3X3AtMTZgLFxuXHRcInRleHRfdmlld19wLTE0XCI6IGBUZXh0LW1vZHVsZV9fdGV4dF92aWV3X3AtMTRgLFxuXHRcInRleHRfd2VpZ2h0X25vcm1hbFwiOiBgVGV4dC1tb2R1bGVfX3RleHRfd2VpZ2h0X25vcm1hbGAsXG5cdFwidGV4dF93ZWlnaHRfbWVkaXVtXCI6IGBUZXh0LW1vZHVsZV9fdGV4dF93ZWlnaHRfbWVkaXVtYCxcblx0XCJ0ZXh0X3dlaWdodF9ib2xkXCI6IGBUZXh0LW1vZHVsZV9fdGV4dF93ZWlnaHRfYm9sZGBcbn07XG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///4834\n')},5172:(module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   A: () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(963);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(9089);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);\n// Imports\n\n\nvar ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, `.Filter-module__filter{display:flex;flex-direction:column;width:100%;gap:6px;align-items:center;align-content:center}`, "",{"version":3,"sources":["webpack://./src/components/filters/Filter/Filter.module.scss"],"names":[],"mappings":"AAAA,uBACI,YAAA,CACA,qBAAA,CACA,UAAA,CACA,OAAA,CACA,kBAAA,CACA,oBAAA","sourcesContent":[".filter {\\r\\n    display: flex;\\r\\n    flex-direction: column;\\r\\n    width: 100%;\\r\\n    gap: 6px;\\r\\n    align-items: center;\\r\\n    align-content: center;\\r\\n}"],"sourceRoot":""}]);\n// Exports\n___CSS_LOADER_EXPORT___.locals = {\n\t"filter": `Filter-module__filter`\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTE3Mi5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7QUFDbUg7QUFDakI7QUFDbEcsOEJBQThCLG1GQUEyQixDQUFDLDRGQUFxQztBQUMvRjtBQUNBLGlFQUFpRSxhQUFhLHNCQUFzQixXQUFXLFFBQVEsbUJBQW1CLHFCQUFxQixPQUFPLGdOQUFnTixzQkFBc0IsK0JBQStCLG9CQUFvQixpQkFBaUIsNEJBQTRCLDhCQUE4QixLQUFLLG1CQUFtQjtBQUNsaUI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpRUFBZSx1QkFBdUIsRUFBQyIsInNvdXJjZXMiOlsid2VicGFjazovLzIwMjQta3Rzc3R1ZGlvLWhvbWV3b3Jrcy8uL3NyYy9jb21wb25lbnRzL2ZpbHRlcnMvRmlsdGVyL0ZpbHRlci5tb2R1bGUuc2Nzcz8wZTlhIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIGAuRmlsdGVyLW1vZHVsZV9fZmlsdGVye2Rpc3BsYXk6ZmxleDtmbGV4LWRpcmVjdGlvbjpjb2x1bW47d2lkdGg6MTAwJTtnYXA6NnB4O2FsaWduLWl0ZW1zOmNlbnRlcjthbGlnbi1jb250ZW50OmNlbnRlcn1gLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL3NyYy9jb21wb25lbnRzL2ZpbHRlcnMvRmlsdGVyL0ZpbHRlci5tb2R1bGUuc2Nzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFBQSx1QkFDSSxZQUFBLENBQ0EscUJBQUEsQ0FDQSxVQUFBLENBQ0EsT0FBQSxDQUNBLGtCQUFBLENBQ0Esb0JBQUFcIixcInNvdXJjZXNDb250ZW50XCI6W1wiLmZpbHRlciB7XFxyXFxuICAgIGRpc3BsYXk6IGZsZXg7XFxyXFxuICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxyXFxuICAgIHdpZHRoOiAxMDAlO1xcclxcbiAgICBnYXA6IDZweDtcXHJcXG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXHJcXG4gICAgYWxpZ24tY29udGVudDogY2VudGVyO1xcclxcbn1cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLmxvY2FscyA9IHtcblx0XCJmaWx0ZXJcIjogYEZpbHRlci1tb2R1bGVfX2ZpbHRlcmBcbn07XG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///5172\n')},7180:(module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   A: () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(963);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(9089);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);\n// Imports\n\n\nvar ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, `.customStyles-module__icon_stroke_color_primary{stroke:#000}.customStyles-module__icon_stroke_color_secondary{stroke:#afadb5}.customStyles-module__icon_stroke_color_accent{stroke:#b5460f}.customStyles-module__icon_stroke_color_inherit{stroke:"currentColor"}.customStyles-module__icon_fill_color_primary{fill:#000}.customStyles-module__icon_fill_color_secondary{fill:#afadb5}.customStyles-module__icon_fill_color_accent{fill:#b5460f}.customStyles-module__icon_fill_color_inherit{fill:"currentColor"}.customStyles-module__text-align-center{text-align:center}`, "",{"version":3,"sources":["webpack://./src/styles/customStyles.module.scss","webpack://./src/styles/variables.scss"],"names":[],"mappings":"AASM,gDACE,WCND,CDSD,kDACE,cCRD,CDWD,+CACE,cClBA,CDqBF,gDACE,qBAhBW,CAqBb,8CACE,SCxBD,CD2BD,gDACE,YC1BD,CD6BD,6CACE,YCpCA,CDuCF,8CACE,mBAlCW,CAuCnB,wCACE,iBAAA","sourcesContent":["@use \'./variables.scss\' as var;\\r\\n\\r\\n.icon {\\r\\n    $icon-primary: var.$dark;\\r\\n    $icon-secondary: var.$gray;\\r\\n    $icon-accent: var.$brand;\\r\\n    $icon-inherit: \'currentColor\';\\r\\n  \\r\\n    &_stroke_color {\\r\\n      &_primary {\\r\\n        stroke: $icon-primary;\\r\\n      }\\r\\n      \\r\\n      &_secondary {\\r\\n        stroke: $icon-secondary;\\r\\n      }\\r\\n      \\r\\n      &_accent {\\r\\n        stroke: $icon-accent;\\r\\n      }\\r\\n      \\r\\n      &_inherit {\\r\\n        stroke: $icon-inherit;\\r\\n      }\\r\\n    }\\r\\n  \\r\\n    &_fill_color {\\r\\n      &_primary {\\r\\n        fill: $icon-primary;\\r\\n      }\\r\\n      \\r\\n      &_secondary {\\r\\n        fill: $icon-secondary;\\r\\n      }\\r\\n      \\r\\n      &_accent {\\r\\n        fill: $icon-accent;\\r\\n      }\\r\\n      \\r\\n      &_inherit {\\r\\n        fill: $icon-inherit;\\r\\n      }\\r\\n    }\\r\\n}\\r\\n\\r\\n.text-align-center {\\r\\n  text-align: center;\\r\\n}","$brand: #B5460F;\\r\\n$brand-hover: rgba(181, 70, 15, 0.7);\\r\\n$brand-active: #872D01;\\r\\n\\r\\n$dark: black; \\r\\n$light: white;\\r\\n$gray: #AFADB5;\\r\\n\\r\\n$border-radius: 10px;\\r\\n\\r\\n$space-xl: 24px;\\r\\n$space-l: 20px;\\r\\n$space-m: 16px;\\r\\n$space-s: 14px;\\r\\n$space-xs: 12px;\\r\\n$space-xxs: 8px;"],"sourceRoot":""}]);\n// Exports\n___CSS_LOADER_EXPORT___.locals = {\n\t"icon_stroke_color_primary": `customStyles-module__icon_stroke_color_primary`,\n\t"icon_stroke_color_secondary": `customStyles-module__icon_stroke_color_secondary`,\n\t"icon_stroke_color_accent": `customStyles-module__icon_stroke_color_accent`,\n\t"icon_stroke_color_inherit": `customStyles-module__icon_stroke_color_inherit`,\n\t"icon_fill_color_primary": `customStyles-module__icon_fill_color_primary`,\n\t"icon_fill_color_secondary": `customStyles-module__icon_fill_color_secondary`,\n\t"icon_fill_color_accent": `customStyles-module__icon_fill_color_accent`,\n\t"icon_fill_color_inherit": `customStyles-module__icon_fill_color_inherit`,\n\t"text-align-center": `customStyles-module__text-align-center`\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNzE4MC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7QUFDNkc7QUFDakI7QUFDNUYsOEJBQThCLG1GQUEyQixDQUFDLDRGQUFxQztBQUMvRjtBQUNBLDBGQUEwRixZQUFZLGtEQUFrRCxlQUFlLCtDQUErQyxlQUFlLGdEQUFnRCxzQkFBc0IsOENBQThDLFVBQVUsZ0RBQWdELGFBQWEsNkNBQTZDLGFBQWEsOENBQThDLG9CQUFvQix3Q0FBd0Msa0JBQWtCLE9BQU8sNFZBQTRWLGVBQWUsaUNBQWlDLG1DQUFtQyxpQ0FBaUMsc0NBQXNDLDhCQUE4QixxQkFBcUIsa0NBQWtDLFdBQVcsaUNBQWlDLG9DQUFvQyxXQUFXLDhCQUE4QixpQ0FBaUMsV0FBVywrQkFBK0Isa0NBQWtDLFdBQVcsU0FBUyw0QkFBNEIscUJBQXFCLGdDQUFnQyxXQUFXLGlDQUFpQyxrQ0FBa0MsV0FBVyw4QkFBOEIsK0JBQStCLFdBQVcsK0JBQStCLGdDQUFnQyxXQUFXLFNBQVMsS0FBSyw0QkFBNEIseUJBQXlCLEtBQUssbUJBQW1CLHlDQUF5QywyQkFBMkIsc0JBQXNCLGtCQUFrQixtQkFBbUIsNkJBQTZCLHdCQUF3QixtQkFBbUIsbUJBQW1CLG1CQUFtQixvQkFBb0Isb0JBQW9CLG1CQUFtQjtBQUNqbUU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUVBQWUsdUJBQXVCLEVBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8yMDI0LWt0c3N0dWRpby1ob21ld29ya3MvLi9zcmMvc3R5bGVzL2N1c3RvbVN0eWxlcy5tb2R1bGUuc2Nzcz85MzMxIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIGAuY3VzdG9tU3R5bGVzLW1vZHVsZV9faWNvbl9zdHJva2VfY29sb3JfcHJpbWFyeXtzdHJva2U6IzAwMH0uY3VzdG9tU3R5bGVzLW1vZHVsZV9faWNvbl9zdHJva2VfY29sb3Jfc2Vjb25kYXJ5e3N0cm9rZTojYWZhZGI1fS5jdXN0b21TdHlsZXMtbW9kdWxlX19pY29uX3N0cm9rZV9jb2xvcl9hY2NlbnR7c3Ryb2tlOiNiNTQ2MGZ9LmN1c3RvbVN0eWxlcy1tb2R1bGVfX2ljb25fc3Ryb2tlX2NvbG9yX2luaGVyaXR7c3Ryb2tlOlwiY3VycmVudENvbG9yXCJ9LmN1c3RvbVN0eWxlcy1tb2R1bGVfX2ljb25fZmlsbF9jb2xvcl9wcmltYXJ5e2ZpbGw6IzAwMH0uY3VzdG9tU3R5bGVzLW1vZHVsZV9faWNvbl9maWxsX2NvbG9yX3NlY29uZGFyeXtmaWxsOiNhZmFkYjV9LmN1c3RvbVN0eWxlcy1tb2R1bGVfX2ljb25fZmlsbF9jb2xvcl9hY2NlbnR7ZmlsbDojYjU0NjBmfS5jdXN0b21TdHlsZXMtbW9kdWxlX19pY29uX2ZpbGxfY29sb3JfaW5oZXJpdHtmaWxsOlwiY3VycmVudENvbG9yXCJ9LmN1c3RvbVN0eWxlcy1tb2R1bGVfX3RleHQtYWxpZ24tY2VudGVye3RleHQtYWxpZ246Y2VudGVyfWAsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vc3JjL3N0eWxlcy9jdXN0b21TdHlsZXMubW9kdWxlLnNjc3NcIixcIndlYnBhY2s6Ly8uL3NyYy9zdHlsZXMvdmFyaWFibGVzLnNjc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBU00sZ0RBQ0UsV0NORCxDRFNELGtEQUNFLGNDUkQsQ0RXRCwrQ0FDRSxjQ2xCQSxDRHFCRixnREFDRSxxQkFoQlcsQ0FxQmIsOENBQ0UsU0N4QkQsQ0QyQkQsZ0RBQ0UsWUMxQkQsQ0Q2QkQsNkNBQ0UsWUNwQ0EsQ0R1Q0YsOENBQ0UsbUJBbENXLENBdUNuQix3Q0FDRSxpQkFBQVwiLFwic291cmNlc0NvbnRlbnRcIjpbXCJAdXNlICcuL3ZhcmlhYmxlcy5zY3NzJyBhcyB2YXI7XFxyXFxuXFxyXFxuLmljb24ge1xcclxcbiAgICAkaWNvbi1wcmltYXJ5OiB2YXIuJGRhcms7XFxyXFxuICAgICRpY29uLXNlY29uZGFyeTogdmFyLiRncmF5O1xcclxcbiAgICAkaWNvbi1hY2NlbnQ6IHZhci4kYnJhbmQ7XFxyXFxuICAgICRpY29uLWluaGVyaXQ6ICdjdXJyZW50Q29sb3InO1xcclxcbiAgXFxyXFxuICAgICZfc3Ryb2tlX2NvbG9yIHtcXHJcXG4gICAgICAmX3ByaW1hcnkge1xcclxcbiAgICAgICAgc3Ryb2tlOiAkaWNvbi1wcmltYXJ5O1xcclxcbiAgICAgIH1cXHJcXG4gICAgICBcXHJcXG4gICAgICAmX3NlY29uZGFyeSB7XFxyXFxuICAgICAgICBzdHJva2U6ICRpY29uLXNlY29uZGFyeTtcXHJcXG4gICAgICB9XFxyXFxuICAgICAgXFxyXFxuICAgICAgJl9hY2NlbnQge1xcclxcbiAgICAgICAgc3Ryb2tlOiAkaWNvbi1hY2NlbnQ7XFxyXFxuICAgICAgfVxcclxcbiAgICAgIFxcclxcbiAgICAgICZfaW5oZXJpdCB7XFxyXFxuICAgICAgICBzdHJva2U6ICRpY29uLWluaGVyaXQ7XFxyXFxuICAgICAgfVxcclxcbiAgICB9XFxyXFxuICBcXHJcXG4gICAgJl9maWxsX2NvbG9yIHtcXHJcXG4gICAgICAmX3ByaW1hcnkge1xcclxcbiAgICAgICAgZmlsbDogJGljb24tcHJpbWFyeTtcXHJcXG4gICAgICB9XFxyXFxuICAgICAgXFxyXFxuICAgICAgJl9zZWNvbmRhcnkge1xcclxcbiAgICAgICAgZmlsbDogJGljb24tc2Vjb25kYXJ5O1xcclxcbiAgICAgIH1cXHJcXG4gICAgICBcXHJcXG4gICAgICAmX2FjY2VudCB7XFxyXFxuICAgICAgICBmaWxsOiAkaWNvbi1hY2NlbnQ7XFxyXFxuICAgICAgfVxcclxcbiAgICAgIFxcclxcbiAgICAgICZfaW5oZXJpdCB7XFxyXFxuICAgICAgICBmaWxsOiAkaWNvbi1pbmhlcml0O1xcclxcbiAgICAgIH1cXHJcXG4gICAgfVxcclxcbn1cXHJcXG5cXHJcXG4udGV4dC1hbGlnbi1jZW50ZXIge1xcclxcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xcclxcbn1cIixcIiRicmFuZDogI0I1NDYwRjtcXHJcXG4kYnJhbmQtaG92ZXI6IHJnYmEoMTgxLCA3MCwgMTUsIDAuNyk7XFxyXFxuJGJyYW5kLWFjdGl2ZTogIzg3MkQwMTtcXHJcXG5cXHJcXG4kZGFyazogYmxhY2s7IFxcclxcbiRsaWdodDogd2hpdGU7XFxyXFxuJGdyYXk6ICNBRkFEQjU7XFxyXFxuXFxyXFxuJGJvcmRlci1yYWRpdXM6IDEwcHg7XFxyXFxuXFxyXFxuJHNwYWNlLXhsOiAyNHB4O1xcclxcbiRzcGFjZS1sOiAyMHB4O1xcclxcbiRzcGFjZS1tOiAxNnB4O1xcclxcbiRzcGFjZS1zOiAxNHB4O1xcclxcbiRzcGFjZS14czogMTJweDtcXHJcXG4kc3BhY2UteHhzOiA4cHg7XCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5sb2NhbHMgPSB7XG5cdFwiaWNvbl9zdHJva2VfY29sb3JfcHJpbWFyeVwiOiBgY3VzdG9tU3R5bGVzLW1vZHVsZV9faWNvbl9zdHJva2VfY29sb3JfcHJpbWFyeWAsXG5cdFwiaWNvbl9zdHJva2VfY29sb3Jfc2Vjb25kYXJ5XCI6IGBjdXN0b21TdHlsZXMtbW9kdWxlX19pY29uX3N0cm9rZV9jb2xvcl9zZWNvbmRhcnlgLFxuXHRcImljb25fc3Ryb2tlX2NvbG9yX2FjY2VudFwiOiBgY3VzdG9tU3R5bGVzLW1vZHVsZV9faWNvbl9zdHJva2VfY29sb3JfYWNjZW50YCxcblx0XCJpY29uX3N0cm9rZV9jb2xvcl9pbmhlcml0XCI6IGBjdXN0b21TdHlsZXMtbW9kdWxlX19pY29uX3N0cm9rZV9jb2xvcl9pbmhlcml0YCxcblx0XCJpY29uX2ZpbGxfY29sb3JfcHJpbWFyeVwiOiBgY3VzdG9tU3R5bGVzLW1vZHVsZV9faWNvbl9maWxsX2NvbG9yX3ByaW1hcnlgLFxuXHRcImljb25fZmlsbF9jb2xvcl9zZWNvbmRhcnlcIjogYGN1c3RvbVN0eWxlcy1tb2R1bGVfX2ljb25fZmlsbF9jb2xvcl9zZWNvbmRhcnlgLFxuXHRcImljb25fZmlsbF9jb2xvcl9hY2NlbnRcIjogYGN1c3RvbVN0eWxlcy1tb2R1bGVfX2ljb25fZmlsbF9jb2xvcl9hY2NlbnRgLFxuXHRcImljb25fZmlsbF9jb2xvcl9pbmhlcml0XCI6IGBjdXN0b21TdHlsZXMtbW9kdWxlX19pY29uX2ZpbGxfY29sb3JfaW5oZXJpdGAsXG5cdFwidGV4dC1hbGlnbi1jZW50ZXJcIjogYGN1c3RvbVN0eWxlcy1tb2R1bGVfX3RleHQtYWxpZ24tY2VudGVyYFxufTtcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///7180\n')},5072:module=>{"use strict";eval('\n\nvar stylesInDOM = [];\nfunction getIndexByIdentifier(identifier) {\n  var result = -1;\n  for (var i = 0; i < stylesInDOM.length; i++) {\n    if (stylesInDOM[i].identifier === identifier) {\n      result = i;\n      break;\n    }\n  }\n  return result;\n}\nfunction modulesToDom(list, options) {\n  var idCountMap = {};\n  var identifiers = [];\n  for (var i = 0; i < list.length; i++) {\n    var item = list[i];\n    var id = options.base ? item[0] + options.base : item[0];\n    var count = idCountMap[id] || 0;\n    var identifier = "".concat(id, " ").concat(count);\n    idCountMap[id] = count + 1;\n    var indexByIdentifier = getIndexByIdentifier(identifier);\n    var obj = {\n      css: item[1],\n      media: item[2],\n      sourceMap: item[3],\n      supports: item[4],\n      layer: item[5]\n    };\n    if (indexByIdentifier !== -1) {\n      stylesInDOM[indexByIdentifier].references++;\n      stylesInDOM[indexByIdentifier].updater(obj);\n    } else {\n      var updater = addElementStyle(obj, options);\n      options.byIndex = i;\n      stylesInDOM.splice(i, 0, {\n        identifier: identifier,\n        updater: updater,\n        references: 1\n      });\n    }\n    identifiers.push(identifier);\n  }\n  return identifiers;\n}\nfunction addElementStyle(obj, options) {\n  var api = options.domAPI(options);\n  api.update(obj);\n  var updater = function updater(newObj) {\n    if (newObj) {\n      if (newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap && newObj.supports === obj.supports && newObj.layer === obj.layer) {\n        return;\n      }\n      api.update(obj = newObj);\n    } else {\n      api.remove();\n    }\n  };\n  return updater;\n}\nmodule.exports = function (list, options) {\n  options = options || {};\n  list = list || [];\n  var lastIdentifiers = modulesToDom(list, options);\n  return function update(newList) {\n    newList = newList || [];\n    for (var i = 0; i < lastIdentifiers.length; i++) {\n      var identifier = lastIdentifiers[i];\n      var index = getIndexByIdentifier(identifier);\n      stylesInDOM[index].references--;\n    }\n    var newLastIdentifiers = modulesToDom(newList, options);\n    for (var _i = 0; _i < lastIdentifiers.length; _i++) {\n      var _identifier = lastIdentifiers[_i];\n      var _index = getIndexByIdentifier(_identifier);\n      if (stylesInDOM[_index].references === 0) {\n        stylesInDOM[_index].updater();\n        stylesInDOM.splice(_index, 1);\n      }\n    }\n    lastIdentifiers = newLastIdentifiers;\n  };\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTA3Mi5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYjtBQUNBO0FBQ0E7QUFDQSxrQkFBa0Isd0JBQXdCO0FBQzFDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCLGlCQUFpQjtBQUNuQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLDRCQUE0QjtBQUNoRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCLDZCQUE2QjtBQUNsRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovLzIwMjQta3Rzc3R1ZGlvLWhvbWV3b3Jrcy8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qcz8yZGJhIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG52YXIgc3R5bGVzSW5ET00gPSBbXTtcbmZ1bmN0aW9uIGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpIHtcbiAgdmFyIHJlc3VsdCA9IC0xO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHN0eWxlc0luRE9NLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKHN0eWxlc0luRE9NW2ldLmlkZW50aWZpZXIgPT09IGlkZW50aWZpZXIpIHtcbiAgICAgIHJlc3VsdCA9IGk7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cbmZ1bmN0aW9uIG1vZHVsZXNUb0RvbShsaXN0LCBvcHRpb25zKSB7XG4gIHZhciBpZENvdW50TWFwID0ge307XG4gIHZhciBpZGVudGlmaWVycyA9IFtdO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgaXRlbSA9IGxpc3RbaV07XG4gICAgdmFyIGlkID0gb3B0aW9ucy5iYXNlID8gaXRlbVswXSArIG9wdGlvbnMuYmFzZSA6IGl0ZW1bMF07XG4gICAgdmFyIGNvdW50ID0gaWRDb3VudE1hcFtpZF0gfHwgMDtcbiAgICB2YXIgaWRlbnRpZmllciA9IFwiXCIuY29uY2F0KGlkLCBcIiBcIikuY29uY2F0KGNvdW50KTtcbiAgICBpZENvdW50TWFwW2lkXSA9IGNvdW50ICsgMTtcbiAgICB2YXIgaW5kZXhCeUlkZW50aWZpZXIgPSBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKTtcbiAgICB2YXIgb2JqID0ge1xuICAgICAgY3NzOiBpdGVtWzFdLFxuICAgICAgbWVkaWE6IGl0ZW1bMl0sXG4gICAgICBzb3VyY2VNYXA6IGl0ZW1bM10sXG4gICAgICBzdXBwb3J0czogaXRlbVs0XSxcbiAgICAgIGxheWVyOiBpdGVtWzVdXG4gICAgfTtcbiAgICBpZiAoaW5kZXhCeUlkZW50aWZpZXIgIT09IC0xKSB7XG4gICAgICBzdHlsZXNJbkRPTVtpbmRleEJ5SWRlbnRpZmllcl0ucmVmZXJlbmNlcysrO1xuICAgICAgc3R5bGVzSW5ET01baW5kZXhCeUlkZW50aWZpZXJdLnVwZGF0ZXIob2JqKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIHVwZGF0ZXIgPSBhZGRFbGVtZW50U3R5bGUob2JqLCBvcHRpb25zKTtcbiAgICAgIG9wdGlvbnMuYnlJbmRleCA9IGk7XG4gICAgICBzdHlsZXNJbkRPTS5zcGxpY2UoaSwgMCwge1xuICAgICAgICBpZGVudGlmaWVyOiBpZGVudGlmaWVyLFxuICAgICAgICB1cGRhdGVyOiB1cGRhdGVyLFxuICAgICAgICByZWZlcmVuY2VzOiAxXG4gICAgICB9KTtcbiAgICB9XG4gICAgaWRlbnRpZmllcnMucHVzaChpZGVudGlmaWVyKTtcbiAgfVxuICByZXR1cm4gaWRlbnRpZmllcnM7XG59XG5mdW5jdGlvbiBhZGRFbGVtZW50U3R5bGUob2JqLCBvcHRpb25zKSB7XG4gIHZhciBhcGkgPSBvcHRpb25zLmRvbUFQSShvcHRpb25zKTtcbiAgYXBpLnVwZGF0ZShvYmopO1xuICB2YXIgdXBkYXRlciA9IGZ1bmN0aW9uIHVwZGF0ZXIobmV3T2JqKSB7XG4gICAgaWYgKG5ld09iaikge1xuICAgICAgaWYgKG5ld09iai5jc3MgPT09IG9iai5jc3MgJiYgbmV3T2JqLm1lZGlhID09PSBvYmoubWVkaWEgJiYgbmV3T2JqLnNvdXJjZU1hcCA9PT0gb2JqLnNvdXJjZU1hcCAmJiBuZXdPYmouc3VwcG9ydHMgPT09IG9iai5zdXBwb3J0cyAmJiBuZXdPYmoubGF5ZXIgPT09IG9iai5sYXllcikge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBhcGkudXBkYXRlKG9iaiA9IG5ld09iaik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFwaS5yZW1vdmUoKTtcbiAgICB9XG4gIH07XG4gIHJldHVybiB1cGRhdGVyO1xufVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobGlzdCwgb3B0aW9ucykge1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgbGlzdCA9IGxpc3QgfHwgW107XG4gIHZhciBsYXN0SWRlbnRpZmllcnMgPSBtb2R1bGVzVG9Eb20obGlzdCwgb3B0aW9ucyk7XG4gIHJldHVybiBmdW5jdGlvbiB1cGRhdGUobmV3TGlzdCkge1xuICAgIG5ld0xpc3QgPSBuZXdMaXN0IHx8IFtdO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGFzdElkZW50aWZpZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgaWRlbnRpZmllciA9IGxhc3RJZGVudGlmaWVyc1tpXTtcbiAgICAgIHZhciBpbmRleCA9IGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpO1xuICAgICAgc3R5bGVzSW5ET01baW5kZXhdLnJlZmVyZW5jZXMtLTtcbiAgICB9XG4gICAgdmFyIG5ld0xhc3RJZGVudGlmaWVycyA9IG1vZHVsZXNUb0RvbShuZXdMaXN0LCBvcHRpb25zKTtcbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgbGFzdElkZW50aWZpZXJzLmxlbmd0aDsgX2krKykge1xuICAgICAgdmFyIF9pZGVudGlmaWVyID0gbGFzdElkZW50aWZpZXJzW19pXTtcbiAgICAgIHZhciBfaW5kZXggPSBnZXRJbmRleEJ5SWRlbnRpZmllcihfaWRlbnRpZmllcik7XG4gICAgICBpZiAoc3R5bGVzSW5ET01bX2luZGV4XS5yZWZlcmVuY2VzID09PSAwKSB7XG4gICAgICAgIHN0eWxlc0luRE9NW19pbmRleF0udXBkYXRlcigpO1xuICAgICAgICBzdHlsZXNJbkRPTS5zcGxpY2UoX2luZGV4LCAxKTtcbiAgICAgIH1cbiAgICB9XG4gICAgbGFzdElkZW50aWZpZXJzID0gbmV3TGFzdElkZW50aWZpZXJzO1xuICB9O1xufTsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///5072\n')},7659:module=>{"use strict";eval('\n\nvar memo = {};\n\n/* istanbul ignore next  */\nfunction getTarget(target) {\n  if (typeof memo[target] === "undefined") {\n    var styleTarget = document.querySelector(target);\n\n    // Special case to return head of iframe instead of iframe itself\n    if (window.HTMLIFrameElement && styleTarget instanceof window.HTMLIFrameElement) {\n      try {\n        // This will throw an exception if access to iframe is blocked\n        // due to cross-origin restrictions\n        styleTarget = styleTarget.contentDocument.head;\n      } catch (e) {\n        // istanbul ignore next\n        styleTarget = null;\n      }\n    }\n    memo[target] = styleTarget;\n  }\n  return memo[target];\n}\n\n/* istanbul ignore next  */\nfunction insertBySelector(insert, style) {\n  var target = getTarget(insert);\n  if (!target) {\n    throw new Error("Couldn\'t find a style target. This probably means that the value for the \'insert\' parameter is invalid.");\n  }\n  target.appendChild(style);\n}\nmodule.exports = insertBySelector;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNzY1OS5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8yMDI0LWt0c3N0dWRpby1ob21ld29ya3MvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzP2IyMTQiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBtZW1vID0ge307XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gZ2V0VGFyZ2V0KHRhcmdldCkge1xuICBpZiAodHlwZW9mIG1lbW9bdGFyZ2V0XSA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgIHZhciBzdHlsZVRhcmdldCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGFyZ2V0KTtcblxuICAgIC8vIFNwZWNpYWwgY2FzZSB0byByZXR1cm4gaGVhZCBvZiBpZnJhbWUgaW5zdGVhZCBvZiBpZnJhbWUgaXRzZWxmXG4gICAgaWYgKHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCAmJiBzdHlsZVRhcmdldCBpbnN0YW5jZW9mIHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgLy8gVGhpcyB3aWxsIHRocm93IGFuIGV4Y2VwdGlvbiBpZiBhY2Nlc3MgdG8gaWZyYW1lIGlzIGJsb2NrZWRcbiAgICAgICAgLy8gZHVlIHRvIGNyb3NzLW9yaWdpbiByZXN0cmljdGlvbnNcbiAgICAgICAgc3R5bGVUYXJnZXQgPSBzdHlsZVRhcmdldC5jb250ZW50RG9jdW1lbnQuaGVhZDtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgLy8gaXN0YW5idWwgaWdub3JlIG5leHRcbiAgICAgICAgc3R5bGVUYXJnZXQgPSBudWxsO1xuICAgICAgfVxuICAgIH1cbiAgICBtZW1vW3RhcmdldF0gPSBzdHlsZVRhcmdldDtcbiAgfVxuICByZXR1cm4gbWVtb1t0YXJnZXRdO1xufVxuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIGluc2VydEJ5U2VsZWN0b3IoaW5zZXJ0LCBzdHlsZSkge1xuICB2YXIgdGFyZ2V0ID0gZ2V0VGFyZ2V0KGluc2VydCk7XG4gIGlmICghdGFyZ2V0KSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiQ291bGRuJ3QgZmluZCBhIHN0eWxlIHRhcmdldC4gVGhpcyBwcm9iYWJseSBtZWFucyB0aGF0IHRoZSB2YWx1ZSBmb3IgdGhlICdpbnNlcnQnIHBhcmFtZXRlciBpcyBpbnZhbGlkLlwiKTtcbiAgfVxuICB0YXJnZXQuYXBwZW5kQ2hpbGQoc3R5bGUpO1xufVxubW9kdWxlLmV4cG9ydHMgPSBpbnNlcnRCeVNlbGVjdG9yOyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///7659\n')},540:module=>{"use strict";eval('\n\n/* istanbul ignore next  */\nfunction insertStyleElement(options) {\n  var element = document.createElement("style");\n  options.setAttributes(element, options.attributes);\n  options.insert(element, options.options);\n  return element;\n}\nmodule.exports = insertStyleElement;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTQwLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8yMDI0LWt0c3N0dWRpby1ob21ld29ya3MvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanM/ZGU2YyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBpbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucykge1xuICB2YXIgZWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzdHlsZVwiKTtcbiAgb3B0aW9ucy5zZXRBdHRyaWJ1dGVzKGVsZW1lbnQsIG9wdGlvbnMuYXR0cmlidXRlcyk7XG4gIG9wdGlvbnMuaW5zZXJ0KGVsZW1lbnQsIG9wdGlvbnMub3B0aW9ucyk7XG4gIHJldHVybiBlbGVtZW50O1xufVxubW9kdWxlLmV4cG9ydHMgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///540\n')},5056:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval('\n\n/* istanbul ignore next  */\nfunction setAttributesWithoutAttributes(styleElement) {\n  var nonce =  true ? __webpack_require__.nc : 0;\n  if (nonce) {\n    styleElement.setAttribute("nonce", nonce);\n  }\n}\nmodule.exports = setAttributesWithoutAttributes;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTA1Ni5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYjtBQUNBO0FBQ0EsY0FBYyxLQUF3QyxHQUFHLHNCQUFpQixHQUFHLENBQUk7QUFDakY7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovLzIwMjQta3Rzc3R1ZGlvLWhvbWV3b3Jrcy8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qcz9kZGNlIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIHNldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcyhzdHlsZUVsZW1lbnQpIHtcbiAgdmFyIG5vbmNlID0gdHlwZW9mIF9fd2VicGFja19ub25jZV9fICE9PSBcInVuZGVmaW5lZFwiID8gX193ZWJwYWNrX25vbmNlX18gOiBudWxsO1xuICBpZiAobm9uY2UpIHtcbiAgICBzdHlsZUVsZW1lbnQuc2V0QXR0cmlidXRlKFwibm9uY2VcIiwgbm9uY2UpO1xuICB9XG59XG5tb2R1bGUuZXhwb3J0cyA9IHNldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlczsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///5056\n')},7825:module=>{"use strict";eval('\n\n/* istanbul ignore next  */\nfunction apply(styleElement, options, obj) {\n  var css = "";\n  if (obj.supports) {\n    css += "@supports (".concat(obj.supports, ") {");\n  }\n  if (obj.media) {\n    css += "@media ".concat(obj.media, " {");\n  }\n  var needLayer = typeof obj.layer !== "undefined";\n  if (needLayer) {\n    css += "@layer".concat(obj.layer.length > 0 ? " ".concat(obj.layer) : "", " {");\n  }\n  css += obj.css;\n  if (needLayer) {\n    css += "}";\n  }\n  if (obj.media) {\n    css += "}";\n  }\n  if (obj.supports) {\n    css += "}";\n  }\n  var sourceMap = obj.sourceMap;\n  if (sourceMap && typeof btoa !== "undefined") {\n    css += "\\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))), " */");\n  }\n\n  // For old IE\n  /* istanbul ignore if  */\n  options.styleTagTransform(css, styleElement, options.options);\n}\nfunction removeStyleElement(styleElement) {\n  // istanbul ignore if\n  if (styleElement.parentNode === null) {\n    return false;\n  }\n  styleElement.parentNode.removeChild(styleElement);\n}\n\n/* istanbul ignore next  */\nfunction domAPI(options) {\n  if (typeof document === "undefined") {\n    return {\n      update: function update() {},\n      remove: function remove() {}\n    };\n  }\n  var styleElement = options.insertStyleElement(options);\n  return {\n    update: function update(obj) {\n      apply(styleElement, options, obj);\n    },\n    remove: function remove() {\n      removeStyleElement(styleElement);\n    }\n  };\n}\nmodule.exports = domAPI;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNzgyNS5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtEQUFrRDtBQUNsRDtBQUNBO0FBQ0EsMENBQTBDO0FBQzFDO0FBQ0E7QUFDQTtBQUNBLGlGQUFpRjtBQUNqRjtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBLHlEQUF5RDtBQUN6RDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0NBQWtDO0FBQ2xDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovLzIwMjQta3Rzc3R1ZGlvLWhvbWV3b3Jrcy8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzP2U0NzkiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gYXBwbHkoc3R5bGVFbGVtZW50LCBvcHRpb25zLCBvYmopIHtcbiAgdmFyIGNzcyA9IFwiXCI7XG4gIGlmIChvYmouc3VwcG9ydHMpIHtcbiAgICBjc3MgKz0gXCJAc3VwcG9ydHMgKFwiLmNvbmNhdChvYmouc3VwcG9ydHMsIFwiKSB7XCIpO1xuICB9XG4gIGlmIChvYmoubWVkaWEpIHtcbiAgICBjc3MgKz0gXCJAbWVkaWEgXCIuY29uY2F0KG9iai5tZWRpYSwgXCIge1wiKTtcbiAgfVxuICB2YXIgbmVlZExheWVyID0gdHlwZW9mIG9iai5sYXllciAhPT0gXCJ1bmRlZmluZWRcIjtcbiAgaWYgKG5lZWRMYXllcikge1xuICAgIGNzcyArPSBcIkBsYXllclwiLmNvbmNhdChvYmoubGF5ZXIubGVuZ3RoID4gMCA/IFwiIFwiLmNvbmNhdChvYmoubGF5ZXIpIDogXCJcIiwgXCIge1wiKTtcbiAgfVxuICBjc3MgKz0gb2JqLmNzcztcbiAgaWYgKG5lZWRMYXllcikge1xuICAgIGNzcyArPSBcIn1cIjtcbiAgfVxuICBpZiAob2JqLm1lZGlhKSB7XG4gICAgY3NzICs9IFwifVwiO1xuICB9XG4gIGlmIChvYmouc3VwcG9ydHMpIHtcbiAgICBjc3MgKz0gXCJ9XCI7XG4gIH1cbiAgdmFyIHNvdXJjZU1hcCA9IG9iai5zb3VyY2VNYXA7XG4gIGlmIChzb3VyY2VNYXAgJiYgdHlwZW9mIGJ0b2EgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICBjc3MgKz0gXCJcXG4vKiMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LFwiLmNvbmNhdChidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShzb3VyY2VNYXApKSkpLCBcIiAqL1wiKTtcbiAgfVxuXG4gIC8vIEZvciBvbGQgSUVcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICAqL1xuICBvcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtKGNzcywgc3R5bGVFbGVtZW50LCBvcHRpb25zLm9wdGlvbnMpO1xufVxuZnVuY3Rpb24gcmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlRWxlbWVudCkge1xuICAvLyBpc3RhbmJ1bCBpZ25vcmUgaWZcbiAgaWYgKHN0eWxlRWxlbWVudC5wYXJlbnROb2RlID09PSBudWxsKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHN0eWxlRWxlbWVudC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHN0eWxlRWxlbWVudCk7XG59XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gZG9tQVBJKG9wdGlvbnMpIHtcbiAgaWYgKHR5cGVvZiBkb2N1bWVudCA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgIHJldHVybiB7XG4gICAgICB1cGRhdGU6IGZ1bmN0aW9uIHVwZGF0ZSgpIHt9LFxuICAgICAgcmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUoKSB7fVxuICAgIH07XG4gIH1cbiAgdmFyIHN0eWxlRWxlbWVudCA9IG9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMpO1xuICByZXR1cm4ge1xuICAgIHVwZGF0ZTogZnVuY3Rpb24gdXBkYXRlKG9iaikge1xuICAgICAgYXBwbHkoc3R5bGVFbGVtZW50LCBvcHRpb25zLCBvYmopO1xuICAgIH0sXG4gICAgcmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUoKSB7XG4gICAgICByZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGVFbGVtZW50KTtcbiAgICB9XG4gIH07XG59XG5tb2R1bGUuZXhwb3J0cyA9IGRvbUFQSTsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///7825\n')},1113:module=>{"use strict";eval("\n\n/* istanbul ignore next  */\nfunction styleTagTransform(css, styleElement) {\n  if (styleElement.styleSheet) {\n    styleElement.styleSheet.cssText = css;\n  } else {\n    while (styleElement.firstChild) {\n      styleElement.removeChild(styleElement.firstChild);\n    }\n    styleElement.appendChild(document.createTextNode(css));\n  }\n}\nmodule.exports = styleTagTransform;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTExMy5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYjtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovLzIwMjQta3Rzc3R1ZGlvLWhvbWV3b3Jrcy8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzPzFkZGUiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gc3R5bGVUYWdUcmFuc2Zvcm0oY3NzLCBzdHlsZUVsZW1lbnQpIHtcbiAgaWYgKHN0eWxlRWxlbWVudC5zdHlsZVNoZWV0KSB7XG4gICAgc3R5bGVFbGVtZW50LnN0eWxlU2hlZXQuY3NzVGV4dCA9IGNzcztcbiAgfSBlbHNlIHtcbiAgICB3aGlsZSAoc3R5bGVFbGVtZW50LmZpcnN0Q2hpbGQpIHtcbiAgICAgIHN0eWxlRWxlbWVudC5yZW1vdmVDaGlsZChzdHlsZUVsZW1lbnQuZmlyc3RDaGlsZCk7XG4gICAgfVxuICAgIHN0eWxlRWxlbWVudC5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjc3MpKTtcbiAgfVxufVxubW9kdWxlLmV4cG9ydHMgPSBzdHlsZVRhZ1RyYW5zZm9ybTsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///1113\n")},8336:(Q,U,F)=>{"use strict";Q.exports=F.p+"6cd35edfbc0d7a417131.woff2"},7664:(Q,U,F)=>{"use strict";Q.exports=F.p+"fc0337b9cf1cce2e6e1e.woff2"},499:(Q,U,F)=>{"use strict";Q.exports=F.p+"a25806274237d06e00a6.woff2"},7073:(module,exports)=>{eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!\n\tCopyright (c) 2018 Jed Watson.\n\tLicensed under the MIT License (MIT), see\n\thttp://jedwatson.github.io/classnames\n*/\n/* global define */\n\n(function () {\n  'use strict';\n\n  var hasOwn = {}.hasOwnProperty;\n  function classNames() {\n    var classes = '';\n    for (var i = 0; i < arguments.length; i++) {\n      var arg = arguments[i];\n      if (arg) {\n        classes = appendClass(classes, parseValue(arg));\n      }\n    }\n    return classes;\n  }\n  function parseValue(arg) {\n    if (typeof arg === 'string' || typeof arg === 'number') {\n      return arg;\n    }\n    if (typeof arg !== 'object') {\n      return '';\n    }\n    if (Array.isArray(arg)) {\n      return classNames.apply(null, arg);\n    }\n    if (arg.toString !== Object.prototype.toString && !arg.toString.toString().includes('[native code]')) {\n      return arg.toString();\n    }\n    var classes = '';\n    for (var key in arg) {\n      if (hasOwn.call(arg, key) && arg[key]) {\n        classes = appendClass(classes, key);\n      }\n    }\n    return classes;\n  }\n  function appendClass(value, newClass) {\n    if (!newClass) {\n      return value;\n    }\n    if (value) {\n      return value + ' ' + newClass;\n    }\n    return value + newClass;\n  }\n  if ( true && module.exports) {\n    classNames.default = classNames;\n    module.exports = classNames;\n  } else if (true) {\n    // register as 'classnames', consistent with npm package name\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function () {\n      return classNames;\n    }).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n  } else {}\n})();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNzA3My5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUMsYUFBWTtFQUNaLFlBQVk7O0VBRVosSUFBSUEsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDQyxjQUFjO0VBRTlCLFNBQVNDLFVBQVVBLENBQUEsRUFBSTtJQUN0QixJQUFJQyxPQUFPLEdBQUcsRUFBRTtJQUVoQixLQUFLLElBQUlDLENBQUMsR0FBRyxDQUFDLEVBQUVBLENBQUMsR0FBR0MsU0FBUyxDQUFDQyxNQUFNLEVBQUVGLENBQUMsRUFBRSxFQUFFO01BQzFDLElBQUlHLEdBQUcsR0FBR0YsU0FBUyxDQUFDRCxDQUFDLENBQUM7TUFDdEIsSUFBSUcsR0FBRyxFQUFFO1FBQ1JKLE9BQU8sR0FBR0ssV0FBVyxDQUFDTCxPQUFPLEVBQUVNLFVBQVUsQ0FBQ0YsR0FBRyxDQUFDLENBQUM7TUFDaEQ7SUFDRDtJQUVBLE9BQU9KLE9BQU87RUFDZjtFQUVBLFNBQVNNLFVBQVVBLENBQUVGLEdBQUcsRUFBRTtJQUN6QixJQUFJLE9BQU9BLEdBQUcsS0FBSyxRQUFRLElBQUksT0FBT0EsR0FBRyxLQUFLLFFBQVEsRUFBRTtNQUN2RCxPQUFPQSxHQUFHO0lBQ1g7SUFFQSxJQUFJLE9BQU9BLEdBQUcsS0FBSyxRQUFRLEVBQUU7TUFDNUIsT0FBTyxFQUFFO0lBQ1Y7SUFFQSxJQUFJRyxLQUFLLENBQUNDLE9BQU8sQ0FBQ0osR0FBRyxDQUFDLEVBQUU7TUFDdkIsT0FBT0wsVUFBVSxDQUFDVSxLQUFLLENBQUMsSUFBSSxFQUFFTCxHQUFHLENBQUM7SUFDbkM7SUFFQSxJQUFJQSxHQUFHLENBQUNNLFFBQVEsS0FBS0MsTUFBTSxDQUFDQyxTQUFTLENBQUNGLFFBQVEsSUFBSSxDQUFDTixHQUFHLENBQUNNLFFBQVEsQ0FBQ0EsUUFBUSxDQUFDLENBQUMsQ0FBQ0csUUFBUSxDQUFDLGVBQWUsQ0FBQyxFQUFFO01BQ3JHLE9BQU9ULEdBQUcsQ0FBQ00sUUFBUSxDQUFDLENBQUM7SUFDdEI7SUFFQSxJQUFJVixPQUFPLEdBQUcsRUFBRTtJQUVoQixLQUFLLElBQUljLEdBQUcsSUFBSVYsR0FBRyxFQUFFO01BQ3BCLElBQUlQLE1BQU0sQ0FBQ2tCLElBQUksQ0FBQ1gsR0FBRyxFQUFFVSxHQUFHLENBQUMsSUFBSVYsR0FBRyxDQUFDVSxHQUFHLENBQUMsRUFBRTtRQUN0Q2QsT0FBTyxHQUFHSyxXQUFXLENBQUNMLE9BQU8sRUFBRWMsR0FBRyxDQUFDO01BQ3BDO0lBQ0Q7SUFFQSxPQUFPZCxPQUFPO0VBQ2Y7RUFFQSxTQUFTSyxXQUFXQSxDQUFFVyxLQUFLLEVBQUVDLFFBQVEsRUFBRTtJQUN0QyxJQUFJLENBQUNBLFFBQVEsRUFBRTtNQUNkLE9BQU9ELEtBQUs7SUFDYjtJQUVBLElBQUlBLEtBQUssRUFBRTtNQUNWLE9BQU9BLEtBQUssR0FBRyxHQUFHLEdBQUdDLFFBQVE7SUFDOUI7SUFFQSxPQUFPRCxLQUFLLEdBQUdDLFFBQVE7RUFDeEI7RUFFQSxJQUFJLEtBQTZCLElBQUlDLE1BQU0sQ0FBQ0MsT0FBTyxFQUFFO0lBQ3BEcEIsVUFBVSxDQUFDcUIsT0FBTyxHQUFHckIsVUFBVTtJQUMvQm1CLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHcEIsVUFBVTtFQUM1QixDQUFDLE1BQU0sSUFBSSxJQUE0RSxFQUFFO0lBQ3hGO0lBQ0FzQixpQ0FBcUIsRUFBRSxtQ0FBRSxZQUFZO01BQ3BDLE9BQU90QixVQUFVO0lBQ2xCLENBQUM7QUFBQSxrR0FBQztFQUNILENBQUMsTUFBTSxFQUVOO0FBQ0YsQ0FBQyxFQUFDLENBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8yMDI0LWt0c3N0dWRpby1ob21ld29ya3MvLi9ub2RlX21vZHVsZXMvY2xhc3NuYW1lcy9pbmRleC5qcz80ZDI2Il0sInNvdXJjZXNDb250ZW50IjpbIi8qIVxuXHRDb3B5cmlnaHQgKGMpIDIwMTggSmVkIFdhdHNvbi5cblx0TGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlIChNSVQpLCBzZWVcblx0aHR0cDovL2plZHdhdHNvbi5naXRodWIuaW8vY2xhc3NuYW1lc1xuKi9cbi8qIGdsb2JhbCBkZWZpbmUgKi9cblxuKGZ1bmN0aW9uICgpIHtcblx0J3VzZSBzdHJpY3QnO1xuXG5cdHZhciBoYXNPd24gPSB7fS5oYXNPd25Qcm9wZXJ0eTtcblxuXHRmdW5jdGlvbiBjbGFzc05hbWVzICgpIHtcblx0XHR2YXIgY2xhc3NlcyA9ICcnO1xuXG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcblx0XHRcdHZhciBhcmcgPSBhcmd1bWVudHNbaV07XG5cdFx0XHRpZiAoYXJnKSB7XG5cdFx0XHRcdGNsYXNzZXMgPSBhcHBlbmRDbGFzcyhjbGFzc2VzLCBwYXJzZVZhbHVlKGFyZykpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBjbGFzc2VzO1xuXHR9XG5cblx0ZnVuY3Rpb24gcGFyc2VWYWx1ZSAoYXJnKSB7XG5cdFx0aWYgKHR5cGVvZiBhcmcgPT09ICdzdHJpbmcnIHx8IHR5cGVvZiBhcmcgPT09ICdudW1iZXInKSB7XG5cdFx0XHRyZXR1cm4gYXJnO1xuXHRcdH1cblxuXHRcdGlmICh0eXBlb2YgYXJnICE9PSAnb2JqZWN0Jykge1xuXHRcdFx0cmV0dXJuICcnO1xuXHRcdH1cblxuXHRcdGlmIChBcnJheS5pc0FycmF5KGFyZykpIHtcblx0XHRcdHJldHVybiBjbGFzc05hbWVzLmFwcGx5KG51bGwsIGFyZyk7XG5cdFx0fVxuXG5cdFx0aWYgKGFyZy50b1N0cmluZyAhPT0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZyAmJiAhYXJnLnRvU3RyaW5nLnRvU3RyaW5nKCkuaW5jbHVkZXMoJ1tuYXRpdmUgY29kZV0nKSkge1xuXHRcdFx0cmV0dXJuIGFyZy50b1N0cmluZygpO1xuXHRcdH1cblxuXHRcdHZhciBjbGFzc2VzID0gJyc7XG5cblx0XHRmb3IgKHZhciBrZXkgaW4gYXJnKSB7XG5cdFx0XHRpZiAoaGFzT3duLmNhbGwoYXJnLCBrZXkpICYmIGFyZ1trZXldKSB7XG5cdFx0XHRcdGNsYXNzZXMgPSBhcHBlbmRDbGFzcyhjbGFzc2VzLCBrZXkpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBjbGFzc2VzO1xuXHR9XG5cblx0ZnVuY3Rpb24gYXBwZW5kQ2xhc3MgKHZhbHVlLCBuZXdDbGFzcykge1xuXHRcdGlmICghbmV3Q2xhc3MpIHtcblx0XHRcdHJldHVybiB2YWx1ZTtcblx0XHR9XG5cdFxuXHRcdGlmICh2YWx1ZSkge1xuXHRcdFx0cmV0dXJuIHZhbHVlICsgJyAnICsgbmV3Q2xhc3M7XG5cdFx0fVxuXHRcblx0XHRyZXR1cm4gdmFsdWUgKyBuZXdDbGFzcztcblx0fVxuXG5cdGlmICh0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJyAmJiBtb2R1bGUuZXhwb3J0cykge1xuXHRcdGNsYXNzTmFtZXMuZGVmYXVsdCA9IGNsYXNzTmFtZXM7XG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBjbGFzc05hbWVzO1xuXHR9IGVsc2UgaWYgKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIGRlZmluZS5hbWQgPT09ICdvYmplY3QnICYmIGRlZmluZS5hbWQpIHtcblx0XHQvLyByZWdpc3RlciBhcyAnY2xhc3NuYW1lcycsIGNvbnNpc3RlbnQgd2l0aCBucG0gcGFja2FnZSBuYW1lXG5cdFx0ZGVmaW5lKCdjbGFzc25hbWVzJywgW10sIGZ1bmN0aW9uICgpIHtcblx0XHRcdHJldHVybiBjbGFzc05hbWVzO1xuXHRcdH0pO1xuXHR9IGVsc2Uge1xuXHRcdHdpbmRvdy5jbGFzc05hbWVzID0gY2xhc3NOYW1lcztcblx0fVxufSgpKTtcbiJdLCJuYW1lcyI6WyJoYXNPd24iLCJoYXNPd25Qcm9wZXJ0eSIsImNsYXNzTmFtZXMiLCJjbGFzc2VzIiwiaSIsImFyZ3VtZW50cyIsImxlbmd0aCIsImFyZyIsImFwcGVuZENsYXNzIiwicGFyc2VWYWx1ZSIsIkFycmF5IiwiaXNBcnJheSIsImFwcGx5IiwidG9TdHJpbmciLCJPYmplY3QiLCJwcm90b3R5cGUiLCJpbmNsdWRlcyIsImtleSIsImNhbGwiLCJ2YWx1ZSIsIm5ld0NsYXNzIiwibW9kdWxlIiwiZXhwb3J0cyIsImRlZmF1bHQiLCJkZWZpbmUiLCJhbWQiLCJ3aW5kb3ciXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///7073\n")}},__webpack_module_cache__={},leafPrototypes,getProto;function __webpack_require__(Q){var U=__webpack_module_cache__[Q];if(void 0!==U)return U.exports;var F=__webpack_module_cache__[Q]={id:Q,exports:{}};return __webpack_modules__[Q](F,F.exports,__webpack_require__),F.exports}__webpack_require__.m=__webpack_modules__,__webpack_require__.n=Q=>{var U=Q&&Q.__esModule?()=>Q.default:()=>Q;return __webpack_require__.d(U,{a:U}),U},getProto=Object.getPrototypeOf?Q=>Object.getPrototypeOf(Q):Q=>Q.__proto__,__webpack_require__.t=function(Q,U){if(1&U&&(Q=this(Q)),8&U)return Q;if("object"==typeof Q&&Q){if(4&U&&Q.__esModule)return Q;if(16&U&&"function"==typeof Q.then)return Q}var F=Object.create(null);__webpack_require__.r(F);var B={};leafPrototypes=leafPrototypes||[null,getProto({}),getProto([]),getProto(getProto)];for(var s=2&U&&Q;"object"==typeof s&&!~leafPrototypes.indexOf(s);s=getProto(s))Object.getOwnPropertyNames(s).forEach((U=>B[U]=()=>Q[U]));return B.default=()=>Q,__webpack_require__.d(F,B),F},__webpack_require__.d=(Q,U)=>{for(var F in U)__webpack_require__.o(U,F)&&!__webpack_require__.o(Q,F)&&Object.defineProperty(Q,F,{enumerable:!0,get:U[F]})},__webpack_require__.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(Q){if("object"==typeof window)return window}}(),__webpack_require__.o=(Q,U)=>Object.prototype.hasOwnProperty.call(Q,U),__webpack_require__.r=Q=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(Q,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(Q,"__esModule",{value:!0})},(()=>{var Q;__webpack_require__.g.importScripts&&(Q=__webpack_require__.g.location+"");var U=__webpack_require__.g.document;if(!Q&&U&&(U.currentScript&&(Q=U.currentScript.src),!Q)){var F=U.getElementsByTagName("script");if(F.length)for(var B=F.length-1;B>-1&&(!Q||!/^http(s?):/.test(Q));)Q=F[B--].src}if(!Q)throw new Error("Automatic publicPath is not supported in this browser");Q=Q.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),__webpack_require__.p=Q})(),__webpack_require__.b=document.baseURI||self.location.href,__webpack_require__.nc=void 0;var __webpack_exports__=__webpack_require__(6986)})();